
.vsteensy/build/microSoundRecorder.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00013bb8 l    d  .fini	00000000 .fini
00013bbc l    d  .ARM.exidx	00000000 .ARM.exidx
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
200169d0 l    d  .usbbuffers	00000000 .usbbuffers
20016d30 l    d  .data	00000000 .data
20017980 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00008704 l     F .text	0000000c startup_default_early_hook
00008710 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
20017980 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
20017984 l       .bss	00000000 object.8610
00013b64 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 myAPP.cpp
0000047c l     F .text	0000001c llwuISR()
000005a8 l     F .text	00000034 getTime(char*) [clone .constprop.33]
000005dc l     F .text	00000034 getDate(char*) [clone .constprop.34]
000020dc l     F .text	00000214 _GLOBAL__sub_I_acqParameters
20017ea8 l     O .bss	00000004 loop::t3
20017eac l     O .bss	00000004 loop::t4
2001c0b4 l     O .bss	00000028 makeFilename(char*)::filename
2001c0f0 l     O .bss	00000004 checkDutyCycle(ACQ_Parameters_s*, short)::t_start
2001c118 l     O .bss	00000030 wavHeader(unsigned long)::wheader
2001c59c l     O .bss	00000002 checkDutyCycle(ACQ_Parameters_s*, short)::recording
1fff0200 l     O .dmabuffers	0002605c setup::data
2001c5a4 l     O .bss	00000004 loop::loopCount
2001c5a8 l     O .bss	00000002 loop::state
2001c5ac l     O .bss	00000004 loop::t0
00000000 l    df *ABS*	00000000 SPI.cpp
0000230c l     F .text	000001f8 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]
00000000 l    df *ABS*	00000000 Time.cpp
000027f0 l     F .text	00000018 refreshCache(long) [clone .part.0]
2001c5b0 l     O .bss	00000004 cacheTime
2001c5b4 l     O .bss	00000007 tm
2001c5bc l     O .bss	00000004 sysTime
2001c5c0 l     O .bss	00000001 Status
2001c5c8 l     O .bss	00000004 prevMillis
20016dcc l     O .data	00000004 syncInterval
00013348 l     O .text	0000000c monthDays
2001c5cc l     O .bss	00000004 nextSyncTime
00000000 l    df *ABS*	00000000 output_pwm.cpp
00002ae0 l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE
00000000 l    df *ABS*	00000000 input_i2s.cpp
00002af8 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE
00000000 l    df *ABS*	00000000 output_pt8211.cpp
00002b10 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE
00000000 l    df *ABS*	00000000 output_i2s.cpp
00002b28 l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE
00000000 l    df *ABS*	00000000 input_i2s_oct.cpp
00002b40 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E
00000000 l    df *ABS*	00000000 input_adc.cpp
00002b58 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE
00000000 l    df *ABS*	00000000 output_dac.cpp
00002b70 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE
00000000 l    df *ABS*	00000000 output_tdm.cpp
00002b88 l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE
00000000 l    df *ABS*	00000000 input_adcs.cpp
00002ba0 l     F .text	00000030 _GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE
00000000 l    df *ABS*	00000000 input_i2s_quad.cpp
00002e88 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E
20016260 l     O .dmabuffers	00000400 i2s_rx_buffer
00000000 l    df *ABS*	00000000 output_dacs.cpp
00002ea0 l     F .text	00000018 _GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE
00000000 l    df *ABS*	00000000 output_i2s_quad.cpp
00002fb4 l     F .text	00000018 _GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE
00000000 l    df *ABS*	00000000 output_adat.cpp
00002fcc l     F .text	00000018 _GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_tdm.cpp
00002fe4 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE
00000000 l    df *ABS*	00000000 input_i2s_hex.cpp
00002ffc l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E
00000000 l    df *ABS*	00000000 input_pdm.cpp
00003014 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE
00000000 l    df *ABS*	00000000 output_spdif.cpp
0000302c l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE
00000000 l    df *ABS*	00000000 WireKinetis.cpp
2001c678 l     O .bss	00000001 TwoWire::isr()::receiving
00000000 l    df *ABS*	00000000 SD.cpp
00003244 l     F .text	00000024 _GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc
00000000 l    df *ABS*	00000000 SdVolume.cpp
00003344 l     F .text	00000084 SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]
00000000 l    df *ABS*	00000000 NXP_SDHC.cpp
00003528 l     F .text	00000094 SDHC_CMD_Do(unsigned long)
000035bc l     F .text	00000044 SDHC_CMD12_StopTransferWaitForBusy()
2001c8dc l     O .bss	00000010 sdCardDesc
00000000 l    df *ABS*	00000000 SdFile.cpp
000037d4 l     F .text	0000006c SdFile::sync() [clone .part.23] [clone .constprop.37]
00000000 l    df *ABS*	00000000 Sd2Card.cpp
00003f78 l     F .text	00000010 _GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm
2001c8f0 l     O .bss	00000004 settings
2001c8f4 l     O .bss	00000001 chip_select_asserted
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
0000483c l     F .text	0000001e FsCache::sync() [clone .part.2]
000048c8 l     F .text	00000034 ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]
000048fc l     F .text	0000002a ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
000054c8 l     F .text	00000032 FatFile::openRoot(FatVolume*) [clone .part.36]
000055e4 l     F .text	00000094 FatFile::sync() [clone .part.40]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00005da0 l     F .text	0000004a FatCache::sync() [clone .part.8]
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
000061bc l     F .text	00000028 lfnGetChar(DirLfn_t*, unsigned char)
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00006a98 l     F .text	00000018 SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]
00006ab0 l     F .text	00000022 SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
00007094 l     F .text	00000030 sdIrs()
000070c4 l     F .text	00000018 isBusyCommandComplete()
000070dc l     F .text	00000010 isBusyCommandInhibit()
000070ec l     F .text	0000000c isBusyDMA()
000070f8 l     F .text	00000014 isBusyFifoRead()
0000710c l     F .text	00000014 isBusyFifoWrite()
00007120 l     F .text	00000018 isBusyTransferComplete()
00007138 l     F .text	000000cc setSdclk(unsigned long)
00007268 l     F .text	00000028 waitTimeout(bool (*)())
00007290 l     F .text	0000004c yieldTimeout(bool (*)())
0000730c l     F .text	0000005c cardCommand(unsigned long, unsigned long)
00007388 l     F .text	00000064 readReg16(unsigned long, void*)
000073ec l     F .text	0000002c isBusyCMD13()
00007434 l     F .text	00000020 waitDmaStatus() [clone .part.6]
00007454 l     F .text	000000b4 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00007648 l     F .text	00000078 transferStop()
000079f8 l     F .text	000000ac cardCMD6(unsigned long, unsigned char*)
2001c900 l     O .bss	00000001 m_version2
2001c904 l     O .bss	00000010 m_cid
2001c914 l     O .bss	00000004 m_busyFcn
2001c918 l     O .bss	00000001 m_highCapacity
2001c91c l     O .bss	00000004 m_ocr
2001c920 l     O .bss	00000004 m_rca
2001c924 l     O .bss	00000004 m_irqstat
20016f18 l     O .data	00000001 m_errorCode
2001c928 l     O .bss	00000001 m_initDone
2001c92c l     O .bss	00000010 m_csd
2001c93c l     O .bss	00000001 m_dmaBusy
2001c940 l     O .bss	00000004 m_sdClkKhz
2001c944 l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
2001c949 l     O .bss	00000001 tx_noautoflush
2001c94c l     O .bss	00000004 tx_packet
2001c950 l     O .bss	00000001 transmit_previous_timeout
2001c954 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
2001c959 l     O .bss	00000001 calibrating
20016f19 l     O .data	00000001 analog_config_bits
2001c95a l     O .bss	00000001 analog_reference_internal
20016f1a l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
00008744 l     F .text	0000004c digitalWrite.part.1
00008790 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_mem.c
20016f20 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
2001c960 l     O .bss	00000004 ep0_tx_ptr
2001c964 l     O .bss	00000010 rx_last
2001c974 l     O .bss	00000002 ep0_tx_len
2001c978 l     O .bss	00000040 ep0_rx0_buf
2001c9b8 l     O .bss	00000010 rx_first
2001c9c8 l     O .bss	00000001 ep0_tx_data_toggle
2001c9cc l     O .bss	00000040 ep0_rx1_buf
2001ca0c l     O .bss	00000010 tx_first
1fff0000 l     O .usbdescriptortable	000000a0 table
2001ca1c l     O .bss	00000010 tx_last
2001ca2c l     O .bss	00000008 setup
2001ca34 l     O .bss	00000001 ep0_tx_bdt_bank
2001ca38 l     O .bss	00000008 reply_buffer
2001ca44 l     O .bss	00000004 tx_state
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 yield.cpp
2001ca68 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 AudioStream.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 serial5.c
2001caf4 l     O .bss	00000004 rts_pin
2001caf8 l     O .bss	00000001 rx_buffer_head
2001caf9 l     O .bss	00000001 rx_buffer_tail
2001cafc l     O .bss	00000028 tx_buffer
2001cb24 l     O .bss	00000040 rx_buffer
2001cb64 l     O .bss	00000001 transmitting
2001cb65 l     O .bss	00000001 tx_buffer_tail
2001cb68 l     O .bss	00000004 transmit_pin
2001cb6c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
2001cb70 l     O .bss	00000004 rts_pin
2001cb74 l     O .bss	00000001 transmitting
2001cb75 l     O .bss	00000001 rx_buffer_tail
2001cb78 l     O .bss	00000028 tx_buffer
2001cba0 l     O .bss	00000040 rx_buffer
2001cbe0 l     O .bss	00000001 rx_buffer_head
2001cbe1 l     O .bss	00000001 tx_buffer_tail
2001cbe4 l     O .bss	00000004 transmit_pin
2001cbe8 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
2001cbec l     O .bss	00000004 rts_pin
2001cbf0 l     O .bss	00000001 rx_buffer_head
2001cbf1 l     O .bss	00000001 rx_buffer_tail
2001cbf4 l     O .bss	00000028 tx_buffer
2001cc1c l     O .bss	00000040 rx_buffer
2001cc5c l     O .bss	00000001 transmitting
2001cc5d l     O .bss	00000001 tx_buffer_tail
2001cc60 l     O .bss	00000004 transmit_pin
2001cc64 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
2001cc68 l     O .bss	00000004 rts_pin
2001cc6c l     O .bss	00000001 rx_buffer_head
2001cc6d l     O .bss	00000001 rx_buffer_tail
2001cc70 l     O .bss	00000040 tx_buffer
2001ccb0 l     O .bss	00000040 rx_buffer
2001ccf0 l     O .bss	00000001 transmitting
2001ccf1 l     O .bss	00000001 tx_buffer_tail
2001ccf4 l     O .bss	00000004 transmit_pin
2001ccf8 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
2001ccfc l     O .bss	00000004 rts_pin
2001cd00 l     O .bss	00000001 rx_buffer_head
2001cd01 l     O .bss	00000001 rx_buffer_tail
2001cd04 l     O .bss	00000028 tx_buffer
2001cd2c l     O .bss	00000040 rx_buffer
2001cd6c l     O .bss	00000001 transmitting
2001cd6d l     O .bss	00000001 tx_buffer_tail
2001cd70 l     O .bss	00000004 transmit_pin
2001cd74 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
20016f34 l     O .data	00000012 device_descriptor
20016f60 l     O .data	00000043 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
2001cd78 l     O .bss	00000004 rts_pin
2001cd7c l     O .bss	00000001 rx_buffer_head
2001cd7d l     O .bss	00000001 rx_buffer_tail
2001cd80 l     O .bss	00000028 tx_buffer
2001cda8 l     O .bss	00000040 rx_buffer
2001cde8 l     O .bss	00000001 transmitting
2001cde9 l     O .bss	00000001 tx_buffer_tail
2001cdec l     O .bss	00000004 transmit_pin
2001cdf0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 locale.c
0000b8f8 l     F .text	00000018 __get_current_locale
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strtod.c
0000c93c l     F .text	00000038 sulp
0001374c l     O .text	00000014 fpi.6173
00013770 l     O .text	00000014 fpinan.6209
00013788 l     O .text	00000028 tinytens
00000000 l    df *ABS*	00000000 strtol.c
0000d870 l     F .text	00000136 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
000137b0 l     O .text	00000010 zeroes.7258
00013804 l     O .text	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfscanf.c
00013814 l     O .text	00000022 basefix.7328
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0001008c l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
000100ac l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
000112a0 l     F .text	000000a8 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mprec.c
00013b48 l     O .text	0000000c p05.6087
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 strtoll.c
000123fc l     F .text	000001ac _strtoll_l.isra.0
00000000 l    df *ABS*	00000000 strtoul.c
000125cc l     F .text	00000168 _strtoul_l.isra.0
00000000 l    df *ABS*	00000000 strtoull.c
00012758 l     F .text	000001ec _strtoull_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vfscanf.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
20016fd8 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
20017980 l       .bss	00000000 __bss_start__
2001ce40 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
000086fc  w    F .text	00000006 adc0_isr
0000b190 g     F .text	0000002c .hidden __aeabi_dcmpun
00008378 g     F .text	0000001c usb_serial_available
00012328 g     F .text	0000005e __any_on
0000b154 g     F .text	00000012 .hidden __aeabi_dcmple
0000a3e8 g     F .text	00000020 serial4_available
0000c6fc g     F .text	000000ba strcpy
00002a68 g     F .text	0000006c setTime(int, int, int, int, int, int)
0000b090 g     F .text	0000007a .hidden __cmpdf2
0000a1bc g     F .text	00000004 operator new[](unsigned int)
2001ca74 g     O .bss	00000004 AudioStream::memory_pool
00007804 g     F .text	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
00009b98  w    F .text	000000c4 yield
00005bb8 g     F .text	000001e8 FatFile::write(void const*, unsigned int)
0000b090 g     F .text	0000007a .hidden __eqdf2
00006a0c  w    F .text	00000002 SdSpiCard::~SdSpiCard()
00003840 g     F .text	0000002a SdFile::addCluster()
00004358 g     F .text	000003d4 ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)
20016f48 g     O .data	00000018 usb_string_manufacturer_name_default
0000a4e0 g     F .text	00000020 serial_available
00005b40 g     F .text	00000076 FatFile::truncate()
20016ea8 g     O .data	0000006c Wire1
0000ac00 g     F .text	0000005a .hidden __floatdidf
000086b4  w    F .text	00000048 hard_fault_isr
000086fc  w    F .text	00000006 dma_ch6_isr
2001ca78 g     O .bss	00000001 AudioStream::update_scheduled
2001c8f8 g     O .bss	00000004 FsDateTime::callback
20016d64 g     O .data	00000028 acqParameters
00009cb8 g     F .text	00000020 Print::println()
000030f0 g     F .text	00000130 TwoWire::isr()
0000a2bc g     F .text	00000020 serial2_available
2001caf0 g     O .bss	00000002 AudioStream::memory_used
000086fc  w    F .text	00000006 uart0_lon_isr
00004258 g     F .text	000000fe ExFatFile::seekSet(unsigned long long)
00008bb0 g     F .text	000000c8 usb_rx_memory
00009c5c  w    F .text	00000002 serialEvent5()
000069e0  w    F .text	00000004 SdSpiCard::errorCode() const
000086fc  w    F .text	00000006 dma_ch8_isr
000010ec g     F .text	000008cc doMenu()
0000a60c g     F .text	00000020 serial6_available
0000c17c g     F .text	00000002 __malloc_unlock
00003ad8 g     F .text	00000068 Sd2Card::chipSelectHigh()
2001c8fc g     O .bss	00000004 FsVolume::m_cwv
000056e8 g     F .text	000000be FatFile::open(FatFile*, char const*, int)
000085d4 g     F .text	000000e0 analog_init
00008c78 g     F .text	00000084 usb_tx
0000d850 g     F .text	00000020 _strtod_r
000086fc  w    F .text	00000006 portcd_isr
0000ff3c g     F .text	0000004a _vdprintf_r
00003ac0 g     F .text	00000018 SdFile::write(unsigned char)
00012b28 g     F .text	00000082 _sfread_r
0000c014 g     F .text	000000c6 memmove
00009af0 g     F .text	00000098 MillisTimer::runFromTimer()
2001c640 g     O .bss	00000008 AudioOutputAnalogStereo::dma
0000b934 g     F .text	00000014 __locale_ctype_ptr
00011aa0 g     F .text	0000004c _Balloc
000086fc  w    F .text	00000006 can1_rx_warn_isr
00013bc4 g       .ARM.exidx	00000000 __exidx_end
000086fc  w    F .text	00000006 dma_error_isr
0000606c g     F .text	0000003c FatPartition::freeChain(unsigned long)
2001ca60 g     O .bss	00000001 EventResponder::runningFromYield
00008120 g     F .text	0000001a SdSpiArduinoDriver::receive()
00006bd0 g     F .text	0000007c SdSpiCard::cardCommand(unsigned char, unsigned long)
00003220 g     F .text	0000000c i2c0_isr
00009c8c g     F .text	0000002c Print::write(unsigned char const*, unsigned int)
0000b080 g     F .text	0000008a .hidden __gtdf2
0000b89c g     F .text	0000000c __errno
000086fc  w    F .text	00000006 portd_isr
000086fc  w    F .text	00000006 enet_error_isr
000133a0 g     O .text	00000020 TwoWire::i2c2_hardware
00000904 g     F .text	00000078 makeFilename(char*)
2001ca4c g     O .bss	00000004 EventResponder::firstInterrupt
2001c570 g     O .bss	00000014 patchCord2
00011a24 g     F .text	00000004 __localeconv_l
00006a10  w    F .text	0000000e SdSpiCard::~SdSpiCard()
000086fc  w    F .text	00000006 tpm1_isr
00004cf4 g     F .text	00000018 ExFatPartition::rootLength()
00000730  w    F .text	00000024 Print::println(__FlashStringHelper const*)
000069e4  w    F .text	00000004 SdSpiCard::errorData() const
00009c78  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
000134b4 g     O .text	00000200 digital_pin_to_info_PGM
00005fc4 g     F .text	000000a8 FatPartition::allocContiguous(unsigned long, unsigned long*)
2001ce3c g     O .bss	00000004 errno
00006c4c g     F .text	00000054 SdSpiCard::readOCR(unsigned long*)
0000813c g     F .text	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
000064e8 g     F .text	00000388 FatFile::open(FatFile*, fname_t*, int)
00004c3c g     F .text	00000012 ExFatPartition::fatGet(unsigned long, unsigned long*)
0000c628 g     F .text	00000004 __seofread
00013bc4 g       .ARM.exidx	00000000 _etext
00002504 g     F .text	00000134 _spi_dma_rxISR0()
20017980 g       .bss	00000000 _sbss
000038d0 g     F .text	000001f0 SdFile::write(void const*, unsigned int)
0000b11c g     F .text	00000010 .hidden __aeabi_cdcmple
00007210 g     F .text	0000000c SdioCard::errorData() const
2001c6d8 g     O .bss	00000200 SdVolume::cacheBuffer_
0000a1b8  w    F .text	00000002 serialEvent6()
0000b2f8 g     F .text	00000160 .hidden __aeabi_fadd
00007914 g     F .text	000000b4 SdioCard::writeSector(unsigned long, unsigned char const*)
0000b2f4 g     F .text	00000164 .hidden __subsf3
00008848 g     F .text	0000001c digitalRead
000086fc  w    F .text	00000006 porte_isr
00001d14 g     F .text	000003c8 loop
00009f3c g     F .text	00000018 AudioStream::receiveReadOnly(unsigned int)
000086fc  w    F .text	00000006 portb_isr
000086fc  w    F .text	00000006 spi1_isr
0000a408 g     F .text	000000d8 uart3_status_isr
00009d9c  w    F .text	00000002 serialEvent1()
00003fc4 g     F .text	000000c4 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
000086fc  w    F .text	00000006 mcm_isr
2001c148 g     O .bss	00000014 patchCord3
00007e38 g     F .text	000000cc SdioCard::readData(unsigned char*)
00009a88 g     F .text	00000068 MillisTimer::addToActiveList()
0000a12c g     F .text	00000028 Stream::peekNextDigit()
00000530  w    F .text	0000001c c_uSD::~c_uSD()
00003438 g     F .text	000000f0 SdVolume::allocContiguous(unsigned long, unsigned long*)
00006b14 g     F .text	00000080 SdSpiCard::readData(unsigned char*, unsigned int)
2001ca50 g     O .bss	00000004 EventResponder::lastInterrupt
0000b538 g     F .text	00000024 .hidden __aeabi_f2lz
0000a2dc g     F .text	0000010c uart1_status_isr
00006870 g     F .text	00000028 FsBaseFile::close()
000081cc g     F .text	00000134 memcpy
000086fc  w    F .text	00000006 randnum_isr
00011888 g     F .text	00000180 __hexnan
0000b10c g     F .text	00000020 .hidden __aeabi_cdrcmple
00004c74 g     F .text	00000080 ExFatPartition::freeChain(unsigned long)
0000595c g     F .text	0000002a FatFile::peek()
0000d9d0 g     F .text	000016e4 _svfprintf_r
2001c8ec g     O .bss	00000004 SdFile::dateTime_
0000ab90 g     F .text	00000022 .hidden __floatsidf
20016d34 g     O .data	00000002 mustClose
2001c95c g     O .bss	00000004 systick_millis_count
0000b088 g     F .text	00000082 .hidden __ltdf2
2001c6d0 g     O .bss	00000004 SdVolume::cacheMirrorBlock_
000086b4  w    F .text	00000048 bus_fault_isr
000086fc  w    F .text	00000006 watchdog_isr
00000558  w    F .text	0000004e mRecordQueue<137>::update()
0000b508 g     F .text	00000000 .hidden __aeabi_uldivmod
0000322c g     F .text	0000000c i2c1_isr
2001ca40 g     O .bss	00000001 usb_configuration
000086fc  w    F .text	00000006 dma_ch11_isr
00000474  w    F .text	00000006 SdCardInterface::status()
000079c8 g     F .text	00000030 SdioCard::syncDevice()
000076c4 g     F .text	000000cc SdioCard::writeData(unsigned char const*)
00000000  w      *UND*	00000000 __fini_array_end
000032e8 g     F .text	0000005c SdVolume::cacheRawBlock(unsigned long, unsigned char)
00000610  w    F .text	00000058 StreamFile<FsBaseFile, unsigned long long>::available()
00005988 g     F .text	00000040 FatFile::readDirCache(bool)
00009d84  w    F .text	00000002 serialEvent2()
00012280 g     F .text	00000060 __ratio
00003238 g     F .text	0000000c i2c2_isr
2001ca7c g     O .bss	00000070 AudioStream::memory_pool_available_mask
2001c600 g     O .bss	00000008 AudioOutputAnalog::dma
20016f48  w    O .data	00000018 usb_string_manufacturer_name
2001ce34 g     O .bss	00000008 usb_rx_byte_count_data
00002eb8 g     F .text	000000fc AudioOutputI2SQuad::config_i2s()
000086fc  w    F .text	00000006 pit1_isr
0000b948 g     F .text	00000010 malloc
2001c114 g     O .bss	00000004 maxNoise
000086fc  w    F .text	00000006 dma_ch4_isr
00013380 g     O .text	00000020 TwoWire::i2c1_hardware
20017eb0 g     O .bss	00000004 queue
0000a068 g     F .text	00000084 software_isr
00012d20  w    O .text	00000024 vtable for FsFile
00011a08 g     F .text	0000001c iswspace
000086fc  w    F .text	00000006 dma_ch7_isr
00003050  w    F .text	0000001e TwoWire::read()
0000b460 g     F .text	0000001c .hidden __aeabi_i2f
000022f0  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00013a58 g     O .text	000000c8 __mprec_tens
000097c8 g     F .text	000000f4 usb_init
2001caee g     O .bss	00000002 AudioStream::memory_pool_first_mask
000069f8  w    F .text	00000004 SdSpiCard::type() const
0000b20c g     F .text	00000040 .hidden __fixunsdfsi
000086fc  w    F .text	00000006 lptmr_isr
2001cdfc g     O .bss	00000004 __malloc_top_pad
00008818 g     F .text	00000024 rtc_set
00012aec g     F .text	0000003a __ssrefill_r
00006a20 g     F .text	00000076 SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
2001c624 g     O .bss	00000001 AudioInputI2SQuad::update_responsibility
0000515c g     F .text	000000e2 ExFatFile::truncate()
20016d30 g     O .data	00000000 .hidden __dso_handle
0000ab70 g     F .text	0000001e .hidden __aeabi_ui2d
00011a28 g     F .text	0000001c _localeconv_r
00012944 g     F .text	00000024 _strtoull_r
00008808 g     F .text	00000010 attachInterruptVector
000080d8 g     F .text	00000048 SdSpiArduinoDriver::deactivate()
00011cb4 g     F .text	00000012 __i2b
20016d30 g       .data	00000000 _sdata
2001c5a0 g     O .bss	00000004 maxValue
00013360 g     O .text	00000020 TwoWire::i2c0_hardware
00005e4c g     F .text	0000000e FatCache::sync()
0000b5a8 g     F .text	000002e2 .hidden __udivmoddi4
0000a8ec g     F .text	00000000 .hidden __aeabi_drsub
000054fc g     F .text	00000034 FatFile::addCluster()
0000c560 g     F .text	00000024 _sbrk_r
00006ca0 g     F .text	0000004a SdSpiCard::readRegister(unsigned char, void*)
00002db0 g     F .text	000000d8 AudioInputI2SQuad::begin()
000072ec g     F .text	00000020 SdioCard::type() const
000001d0 g     F .text	000001f0 ResetHandler
00008300 g     F .text	00000048 usb_serial_getchar
000086fc  w    F .text	00000006 can1_bus_off_isr
000086fc  w    F .text	00000006 ftm2_isr
2001ce28 g     O .bss	00000008 usb_cdc_line_coding
0000883c g     F .text	0000000a digitalWrite
2001ca58 g     O .bss	00000004 EventResponder::lastYield
000086fc  w    F .text	00000006 uart5_status_isr
0000a62c g     F .text	000000e4 lpuart0_status_isr
00003f9c g     F .text	00000028 ExFatFile::openRoot(ExFatVolume*)
000136e0 g     O .text	00000004 usb_endpoint_config_table
000086fc  w    F .text	00000006 dma_ch9_isr
00000714  w    F .text	0000001c Print::write(char const*)
00000694  w    F .text	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
000086fc  w    F .text	00000006 pit2_isr
0000b140 g     F .text	00000012 .hidden __aeabi_dcmplt
0000a7d8 g     F .text	00000020 serial3_available
2001cdf8 g     O .bss	00000004 __malloc_max_sbrked_mem
00003b40 g     F .text	000000b4 Sd2Card::chipSelectLow()
00008864 g     F .text	0000000a pinMode
00006f9c g     F .text	00000042 SdSpiCard::writeStop()
2001c170 g     O .bss	00000400 tempBuffer
00008afc g     F .text	0000004c usb_free
000086fc  w    F .text	00000006 i2c3_isr
0000abb4 g     F .text	0000003a .hidden __extendsfdf2
0000f0b4 g     F .text	00000e88 __ssvfscanf_r
0000aeb0 g     F .text	000001d0 .hidden __aeabi_ddiv
0000a8f8 g     F .text	00000276 .hidden __adddf3
2001c6d4 g     O .bss	00000004 SdVolume::sdCard_
20016dd0 g     O .data	0000006c Wire2
00007060 g     F .text	00000032 SdSpiCard::writeData(unsigned char const*)
000120f4 g     F .text	000000d0 __b2d
00001be0  w    F .text	00000028 SdBase<FsVolume>::errorHalt(char const*)
00013bbc g       .ARM.exidx	00000000 __exidx_start
0000ac5c g     F .text	00000254 .hidden __aeabi_dmul
00002ad4  w    F .text	0000000c DMAChannel::~DMAChannel()
00006e94 g     F .text	00000050 SdSpiCard::writeStart(unsigned long)
000086fc  w    F .text	00000006 pit0_isr
2001ca5c g     O .bss	00000004 EventResponder::firstYield
0000386c g     F .text	00000064 SdFile::seekSet(unsigned long)
00013738 g     O .text	00000004 _global_impure_ptr
000086fc  w    F .text	00000006 can1_error_isr
00003eec g     F .text	0000008c Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)
000006e0  w    F .text	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000c180 g     F .text	000003de _realloc_r
0000b8a8 g     F .text	00000050 __libc_init_array
2001ce40 g       .bss	00000000 __bss_end
00003044  w    F .text	0000000c TwoWire::available()
000086fc  w    F .text	00000006 can0_wakeup_isr
0000482c g     F .text	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
0000721c g     F .text	0000001c SdioCard::readCID(CID*)
00013954 g     O .text	00000100 __hexdig
00004fe4 g     F .text	000000ea ExFatFile::addDirCluster()
000086fc  w    F .text	00000006 flash_cmd_isr
0000700c g     F .text	00000052 SdSpiCard::writeData(unsigned char, unsigned char const*)
00003704 g     F .text	000000d0 SDHC_CardWriteBlock(void const*, unsigned long)
00013b20 g     O .text	00000028 __mprec_bigtens
00011b80 g     F .text	00000098 __s2b
00009c60  w    F .text	00000004 usb_serial_class::clear()
0000ab70 g     F .text	0000001e .hidden __floatunsidf
0000a7f8 g     F .text	000000d8 uart2_status_isr
00008714 g     F .text	0000002c _sbrk
00011f48 g     F .text	00000042 __mcmp
2001ca64 g     O .bss	00000004 MillisTimer::listWaiting
2001c608 g     O .bss	00000008 AudioOutputTDM::dma
20016f1c g     O .data	00000004 __brkval
2001c958 g     O .bss	00000001 usb_cdc_line_rtsdtr
0000858c g     F .text	00000048 usb_serial_flush_callback
00013b54 g     F .text	00000000 _init
000055c4 g     F .text	0000001e FatFile::cacheDirEntry(unsigned char)
000086fc  w    F .text	00000006 svcall_isr
00009da0 g     F .text	0000006c AudioStream::initialize_memory(audio_block_struct*, unsigned int)
000086fc  w    F .text	00000006 dma_ch15_isr
0000b24c g     F .text	0000009e .hidden __aeabi_d2f
00002a04 g     F .text	00000020 day()
0000b2f4 g     F .text	00000164 .hidden __aeabi_fsub
000133c0 g     O .text	00000024 vtable for TwoWire
000086fc  w    F .text	00000006 uart1_error_isr
0001100c g     F .text	00000028 __libc_fini_array
0000c978 g     F .text	00000ed8 _strtod_l
00011858 g     F .text	00000030 __match
000086fc  w    F .text	00000006 usbhs_phy_isr
2001c610 g     O .bss	00000008 AudioInputAnalogStereo::dma0
2001c584 g     O .bss	00000018 acq
2001ce40 g       .bss	00000000 _ebss
0000788c g     F .text	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00005698 g     F .text	00000050 FatFile::preAllocate(unsigned long)
2001c650 g     O .bss	00000008 AudioOutputADAT::dma
00000680  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
00005dec g     F .text	0000005e FatCache::read(unsigned long, unsigned char)
00011c18 g     F .text	00000040 __hi0bits
0000b1bc g     F .text	0000004e .hidden __fixdfsi
000086fc g     F .text	00000006 unused_isr
000086fc  w    F .text	00000006 spi0_isr
0000b48c g     F .text	0000007c .hidden __floatdisf
000086fc  w    F .text	00000006 dma_ch3_isr
00002ad4  w    F .text	0000000c DMAChannel::~DMAChannel()
200180b4 g     O .bss	00004000 diskBuffer
2001c0f4 g     O .bss	00000020 text
00000ca0 g     F .text	00000110 c_uSD::loadConfig(unsigned long*, int, long*, int)
00002a44 g     F .text	00000024 year()
0000a1c0 g     F .text	00000004 operator delete(void*, unsigned int)
000086fc  w    F .text	00000006 flash_error_isr
0000a8f8 g     F .text	00000276 .hidden __aeabi_dadd
0000b088 g     F .text	00000082 .hidden __ledf2
2001c638 g     O .bss	00000004 AudioInputI2SQuad::block_ch1
0000a1c4 g     F .text	00000020 serial5_available
000086fc  w    F .text	00000006 uart5_error_isr
0000b55c g     F .text	0000004c .hidden __aeabi_f2ulz
000086fc  w    F .text	00000006 rtc_seconds_isr
000132b4 g     O .text	00000094 SPIClass::spi0_hardware
000086fc  w    F .text	00000006 pdb_isr
00011df8 g     F .text	000000a0 __pow5mult
0000abf0 g     F .text	0000006a .hidden __aeabi_ul2d
000086b4  w    F .text	00000048 usage_fault_isr
000086fc  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00005f40 g     F .text	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
000086fc  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
2001ce30 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
00009b88 g     F .text	00000010 systick_isr
000086fc  w    F .text	00000006 rtc_alarm_isr
00000754 g     F .text	000000b4 I2S_dividers(unsigned long*, unsigned long, unsigned long)
00006de4 g     F .text	00000076 SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
2001ca6c g     O .bss	00000004 AudioStream::first_update
000086fc  w    F .text	00000006 dma_ch2_isr
0000097c g     F .text	0000006c wavHeader(unsigned long)
20016f24 g     O .data	00000010 Serial
2001ca70 g     O .bss	00000002 AudioStream::memory_used_max
000086fc  w    F .text	00000006 ftm1_isr
0000054c  w    F .text	0000000c AudioConnection::~AudioConnection()
00009c80  w    F .text	00000006 usb_serial_class::write(unsigned char)
00008704  w    F .text	0000000c startup_early_hook
000086fc  w    F .text	00000006 dma_ch13_isr
00004da0 g     F .text	0000008c ExFatFile::addCluster()
000086fc  w    F .text	00000006 uart2_error_isr
00008348 g     F .text	00000030 usb_serial_peekchar
0000b17c g     F .text	00000012 .hidden __aeabi_dcmpgt
0000bf10 g     F .text	00000000 memchr
00005ed8 g     F .text	00000066 FatPartition::fatPut(unsigned long, unsigned long)
20016fc0 g     O .data	00000016 usb_string_serial_number_default
000086b4 g     F .text	00000048 fault_isr
000110d0 g     F .text	000001d0 _free_r
000076c0 g     F .text	00000004 SdioCard::readStop()
00004868 g     F .text	00000060 FsCache::get(unsigned long, unsigned char)
0000b910 g     F .text	0000001c __locale_mb_cur_max
0000b168 g     F .text	00000012 .hidden __aeabi_dcmpge
000086fc  w    F .text	00000006 usb_charge_isr
00009c70  w    F .text	00000004 usb_serial_class::flush()
00012a68 g     F .text	00000082 _sungetc_r
000086fc  w    F .text	00000006 cmt_isr
0000a8f4 g     F .text	0000027a .hidden __aeabi_dsub
000060a8 g     F .text	00000114 FatPartition::init(BlockDeviceInterface*, unsigned char)
000086fc  w    F .text	00000006 usbhs_isr
2001797c g     O .data	00000004 __malloc_sbrk_base
00009c68  w    F .text	00000004 usb_serial_class::read()
000086fc  w    F .text	00000006 ftm3_isr
000125a8 g     F .text	00000024 _strtoll_r
000086fc  w    F .text	00000006 tsi0_isr
2001799c g     O .bss	0000050c uSD
0000abf0 g     F .text	0000006a .hidden __floatundidf
00008740  w    F .text	00000002 __cxa_pure_virtual
00011e98 g     F .text	000000ae __lshift
000086fc  w    F .text	00000006 spi2_isr
00004d48 g     F .text	00000058 exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
2001c618 g     O .bss	00000008 AudioInputAnalogStereo::dma1
0000b460 g     F .text	0000001c .hidden __floatsisf
00012968 g     F .text	00000100 __ssprint_r
00009d88  w    F .text	00000002 serialEvent4()
00012c24 g     F .text	0000005e _vasnprintf_r
00002c84 g     F .text	0000012c AudioInputI2SQuad::update()
00009c88  w    F .text	00000002 serialEvent()
2001c9c9 g     O .bss	00000001 usb_reboot_timer
2001c5d0 g     O .bss	00000008 AudioOutputPWM::dma
0000ffe8 g     F .text	000000a4 __register_exitproc
0000472c g     F .text	000000fe ExFatFile::open(ExFatFile*, char const*, int)
0000c89c g     F .text	000000a0 strncmp
00000f48 g     F .text	000001a4 checkDutyCycle(ACQ_Parameters_s*, short)
00008394 g     F .text	00000038 usb_serial_flush_input
00011cc8 g     F .text	00000130 __multiply
000084d4 g     F .text	00000018 usb_serial_putchar
00000022 g       *ABS*	00000000 _teensy_model_identifier
2001ce00 g     O .bss	00000028 __malloc_current_mallinfo
000121c4 g     F .text	000000ba __d2b
000086fc  w    F .text	00000006 can0_bus_off_isr
000072dc  w    F .text	0000000e SdioCard::~SdioCard()
2001ca35 g     O .bss	00000001 usb_rx_memory_needed
00007790 g     F .text	00000074 SdioCard::writeStart(unsigned long)
00012734 g     F .text	00000024 _strtoul_r
00008cfc g     F .text	00000acc usb_isr
0000b890 g     F .text	0000000c __cxa_atexit
00004088 g     F .text	0000019e ExFatFile::read(void*, unsigned int)
0000a038 g     F .text	00000030 AudioStream::update_setup()
0000ab90 g     F .text	00000022 .hidden __aeabi_i2d
0000b538 g     F .text	00000024 .hidden __fixsfdi
00004928 g     F .text	0000000e FsCache::sync()
0000a1b0 g     F .text	00000006 Stream::parseInt()
20016d8c g     O .data	00000040 SPI
0000bfb0 g     F .text	00000062 memcmp
000136b4  w    O .text	00000028 vtable for usb_serial_class
0000815c g     F .text	00000016 SdSpiArduinoDriver::send(unsigned char)
000086fc  w    F .text	00000006 uart3_error_isr
0000b47c g     F .text	0000008c .hidden __floatundisf
20016d3c g     O .data	00000005 postfix
000081c8  w    F .text	00000004 sdCsWrite(unsigned char, bool)
0000a0ec g     F .text	00000040 Stream::timedPeek()
0000c5d0 g     F .text	00000058 sscanf
2001ca54 g     O .bss	00000004 MillisTimer::listActive
0000b88c  w    F .text	00000002 .hidden __aeabi_ldiv0
2001c660 g     O .bss	00000008 AudioInputI2SHex::dma
000086fc  w    F .text	00000006 porta_isr
0000aeb0 g     F .text	000001d0 .hidden __divdf3
00000db0 g     F .text	00000198 setWakeupCallandSleep(unsigned long)
000122e0 g     F .text	00000046 __copybits
200169d0 g     O .usbbuffers	00000360 usb_buffer_memory
00006cfc g     F .text	00000098 SdSpiCard::sectorCount()
000086fc  w    F .text	00000006 low_voltage_isr
20017570 g     O .data	00000408 __malloc_av_
0000b458 g     F .text	00000024 .hidden __aeabi_ui2f
000086fc  w    F .text	00000006 can0_error_isr
00008950 g     F .text	0000016c _init_Teensyduino_internal_
20016d38 g     O .data	00000004 outptr
0000ac5c g     F .text	00000254 .hidden __muldf3
00008534 g     F .text	00000058 usb_serial_flush_output
000086fc  w    F .text	00000006 dma_ch12_isr
2001c5d8 g     O .bss	00000008 AudioInputI2S::dma
0000c178 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
000061e4 g     F .text	0000024c FatFile::parsePathName(char const*, fname_t*, char const**)
000086fc  w    F .text	00000006 can1_wakeup_isr
20016800 g     O .dmabuffers	000001d0 _VectorsRam
00008174 g     F .text	00000052 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
2001c63c g     O .bss	00000004 AudioInputI2SQuad::block_ch2
00012c84 g     F .text	0000005e _calloc_r
000086fc  w    F .text	00000006 pit3_isr
2001c5c4 g     O .bss	00000004 getTimePtr
000086fc  w    F .text	00000006 enet_rx_isr
00004f84 g     F .text	0000005e ExFatFile::sync()
00007418 g     F .text	0000001c SdioCard::isBusy()
000086fc  w    F .text	00000006 portc_isr
00006e5c g     F .text	00000038 SdSpiCard::readStop()
00000808 g     F .text	000000fc I2S_modification(unsigned long, unsigned short, int)
2001c62c g     O .bss	00000008 AudioInputI2SQuad::dma
0000c0dc g     F .text	0000009a memset
00009d8c g     F .text	00000010 main
000033c8 g     F .text	00000070 SdVolume::fatGet(unsigned long, unsigned long*) const
2001c5e8 g     O .bss	00000008 AudioOutputI2S::dma
2001cdf4 g     O .bss	00000004 __malloc_max_total_mem
00004938 g     F .text	000000b4 ExFatPartition::bitmapFind(unsigned long, unsigned long)
0000b48c g     F .text	0000007c .hidden __aeabi_l2f
00002904 g     F .text	000000a0 now()
00005240 g     F .text	00000288 ExFatFile::write(void const*, unsigned int)
000086b4  w    F .text	00000048 memmanage_fault_isr
20016d44 g     O .data	00000020 snipParameters
0000a710 g     F .text	0000007c usb_init_serialnumber
0000d9a8 g     F .text	00000024 _strtol_r
0000b24c g     F .text	0000009e .hidden __truncdfsf2
00013bb8 g       .text	00000000 __init_array_end
000101d8 g     F .text	00000e34 _dtoa_r
0000b968 g     F .text	00000570 _malloc_r
000086fc  w    F .text	00000006 debugmonitor_isr
0000ffa0 g     F .text	0000001a __ascii_wctomb
0000ac00 g     F .text	0000005a .hidden __aeabi_l2d
2001c5f0 g     O .bss	00000008 AudioInputI2SOct::dma
00012bac g     F .text	00000078 __submore
000099c0 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
00002638 g     F .text	00000008 SPIClass::transfer(void const*, void*, unsigned int)
00000031 g       *ABS*	00000000 __rtc_localtime
00008870 g     F .text	00000044 micros
00000000  w      *UND*	00000000 __libc_fini
000009e8 g     F .text	00000070 c_uSD::init()
0000b47c g     F .text	0000008c .hidden __aeabi_ul2f
000086fc  w    F .text	00000006 cmp1_isr
0000b55c g     F .text	0000004c .hidden __fixunssfdi
000086fc  w    F .text	00000006 ftm0_isr
00004e2c g     F .text	00000158 ExFatFile::syncDir()
00011034 g     F .text	0000009c _malloc_trim_r
20016fbc g     O .data	00000004 string0
00003600 g     F .text	00000104 SDHC_CardReadBlock(void*, unsigned long)
000083cc g     F .text	00000108 usb_serial_write
00008710  w    F .text	00000002 startup_late_hook
00009c6c  w    F .text	00000004 usb_serial_class::available()
00000a58 g     F .text	00000120 c_uSD::close()
00005b34 g     F .text	0000000c FatFile::sync()
20016fa4  w    O .data	00000016 usb_string_product_name
000088b4 g     F .text	0000009c delay
0000b090 g     F .text	0000007a .hidden __nedf2
000086fc  w    F .text	00000006 tpm0_isr
2001ca48 g     O .bss	00000002 dma_channel_allocated_mask
00012cf0  w    O .text	0000000c vtable for mRecordQueue<137>
00013bb8 g     F .fini	00000000 _fini
20016f14 g     O .data	00000004 SdVolume::cacheBlockNumber_
000030c8 g     F .text	00000026 TwoWire::write(unsigned char)
2001c5e0 g     O .bss	00000008 AudioOutputPT8211::dma
00002a24 g     F .text	00000020 month()
00001c08 g     F .text	0000010c c_uSD::write(short*, long)
00006d94 g     F .text	00000050 SdSpiCard::readStart(unsigned long)
00009ce8 g     F .text	0000001c Print::printf(char const*, ...)
0000c584 g     F .text	0000004c sprintf
000086fc  w    F .text	00000006 i2s0_rx_isr
000086fc  w    F .text	00000006 uart4_error_isr
00005678 g     F .text	0000001e FatFile::close()
00005e5c g     F .text	0000000c FatPartition::clusterStartSector(unsigned long) const
000100a0 g     F .text	0000000c atexit
00007264  w    F .text	00000002 SdioCard::~SdioCard()
00000668  w    F .text	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
0000ffbc g     F .text	0000002c _write_r
2001c67c g     O .bss	00000054 SD
00007574 g     F .text	000000d4 SdioCard::erase(unsigned long, unsigned long)
0000b2ec g     F .text	0000016c .hidden __aeabi_frsub
00009eb4 g     F .text	00000054 AudioStream::release(audio_block_struct*)
000086fc  w    F .text	00000006 can0_message_isr
0000a8d4 g     F .text	0000000c nanf
20017400 g     O .data	00000004 _impure_ptr
000086fc  w    F .text	00000006 can1_message_isr
00004228 g     F .text	0000002e ExFatFile::peek()
00012cfc  w    O .text	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
2001c670 g     O .bss	00000008 AudioOutputSPDIF::dma
00011a44 g     F .text	0000005c _mbrtowc_r
000086fc  w    F .text	00000006 nmi_isr
20016e3c g     O .data	0000006c Wire
00006430 g     F .text	000000b6 FatFile::lfnUniqueSfn(fname_t*)
00009f08 g     F .text	00000034 AudioStream::transmit(audio_block_struct*, unsigned char)
00007204 g     F .text	0000000c SdioCard::errorCode() const
000057a8 g     F .text	0000000e FatFile::open(FatVolume*, char const*, int)
000006cc  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
00013b60 g       .text	00000000 __preinit_array_end
00000498 g     F .text	00000098 dateTime(unsigned short*, unsigned short*, unsigned char*)
00006a0c  w    F .text	00000002 SdSpiCard::~SdSpiCard()
2001c658 g     O .bss	00000008 AudioInputTDM::dma
000086fc  w    F .text	00000006 sdhc_isr
000029c4 g     F .text	00000020 minute()
000049ec g     F .text	000000e0 ExFatPartition::init(BlockDeviceInterface*, unsigned char)
000050d0 g     F .text	0000008a ExFatFile::preAllocate(unsigned long long)
00004bb0 g     F .text	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
00006ee4 g     F .text	000000b8 SdSpiCard::erase(unsigned long, unsigned long)
0000bed8 g     F .text	0000002a __ascii_mbtowc
00006ad4 g     F .text	0000003e SdSpiCard::isBusy()
000120a0 g     F .text	00000054 __ulp
00013404 g     O .text	00000058 vtable for SdSpiCard
00009e0c g     F .text	000000a8 AudioStream::allocate()
20017eb4 g     O .bss	00000200 header
00006cf4  w    F .text	00000008 SdSpiCard::readCID(CID*)
00003070  w    F .text	00000016 TwoWire::peek()
00003088  w    F .text	00000002 TwoWire::flush()
000019b8 g     F .text	00000190 setup
000136e4 g     O .text	00000054 usb_descriptor_list
00008b48 g     F .text	0000003c usb_rx
00007368 g     F .text	00000020 SdioCard::status()
00003bf4 g     F .text	00000054 Sd2Card::waitNotBusy(unsigned int)
000086fc  w    F .text	00000006 dma_ch10_isr
00000470  w    F .text	00000002 Print::flush()
0000b20c g     F .text	00000040 .hidden __aeabi_d2uiz
00000b78 g     F .text	00000128 c_uSD::storeConfig(unsigned long*, int, long*, int)
2001c0dc g     O .bss	00000014 patchCord1
000086fc  w    F .text	00000006 uart0_error_isr
2001c15c g     O .bss	00000014 patchCord4
00008abc g     F .text	00000040 usb_malloc
000057c4 g     F .text	00000198 FatFile::read(void*, unsigned int)
000086fc  w    F .text	00000006 i2s0_isr
000057b8 g     F .text	0000000c FatFile::openRoot(FatVolume*)
20030000 g       .bss	00000000 _estack
000069dc g     F .text	00000004 operator new(unsigned int, unsigned long*)
00006cec  w    F .text	00000008 SdSpiCard::readCSD(csd_t*)
00009988 g     F .text	00000038 DMAChannel::release()
000084ec g     F .text	00000048 usb_serial_write_buffer_free
00006b94 g     F .text	0000003c SdSpiCard::waitNotBusy(unsigned short)
000086fc  w    F .text	00000006 enet_timer_isr
00009f54 g     F .text	00000068 AudioConnection::connect()
0000b12c g     F .text	00000012 .hidden __aeabi_dcmpeq
00003d00 g     F .text	00000060 Sd2Card::waitStartBlock()
00002808 g     F .text	000000fc makeTime(tmElements_t const&)
2001c668 g     O .bss	00000008 AudioInputPDM::dma
0000308c g     F .text	0000003a TwoWire::write(unsigned char const*, unsigned int)
00009cd8  w    F .text	0000000e _write
20017980 g       .data	00000000 _edata
00004c50 g     F .text	00000024 ExFatPartition::fatPut(unsigned long, unsigned long)
00007264  w    F .text	00000002 SdioCard::~SdioCard()
000086fc  w    F .text	00000006 i2s0_tx_isr
000086fc  w    F .text	00000006 adc1_isr
00002bd0 g     F .text	000000b4 AudioInputI2SQuad::isr()
00006fe0 g     F .text	0000002c SdSpiCard::syncDevice()
00005530 g     F .text	00000094 FatFile::addDirCluster()
00009c74  w    F .text	00000004 usb_serial_class::availableForWrite()
000086fc  w    F .text	00000006 cmp0_isr
0000a78c g     F .text	0000004c ultoa
000133e4 g     O .text	00000018 vtable for SdFile
000029e4 g     F .text	00000020 second()
00001b48  w    F .text	00000098 SdBase<FsVolume>::errorHalt(Print*)
00006898 g     F .text	00000080 FsBaseFile::open(FsVolume*, char const*, int)
00009a40 g     F .text	00000044 EventResponder::runFromInterrupt()
20017978 g     O .data	00000004 __malloc_trim_threshold
00009c64  w    F .text	00000004 usb_serial_class::peek()
00009fbc g     F .text	0000007a AudioConnection::disconnect()
00003e20 g     F .text	000000cc Sd2Card::writeData(unsigned char, unsigned char const*)
0000b458 g     F .text	00000024 .hidden __floatunsisf
00011f8c g     F .text	00000114 __mdiff
00007254 g     F .text	00000010 SdioCard::readOCR(unsigned long*)
0000b1bc g     F .text	0000004e .hidden __aeabi_d2iz
00004be4 g     F .text	00000058 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
2001c948 g     O .bss	00000001 usb_cdc_transmit_flush_timer
2001caf2 g     O .bss	00000002 AudioStream::cpu_cycles_total
000086fc  w    F .text	00000006 pit_isr
000029a4 g     F .text	00000020 hour()
00003c48 g     F .text	000000b8 Sd2Card::cardCommand(unsigned char, unsigned long)
000076c0 g     F .text	00000004 SdioCard::writeStop()
00003268 g     F .text	00000080 SdVolume::cacheFlush()
2001c634 g     O .bss	00000002 AudioInputI2SQuad::block_offset
000069fc  w    F .text	00000010 SdSpiCard::writeSector(unsigned long, unsigned char const*)
00012388 g     F .text	00000072 __sccl
00003f88 g     F .text	00000014 ExFatFile::close()
00013840 g     O .text	00000101 _ctype_
000086fc  w    F .text	00000006 dac0_isr
000069e8  w    F .text	00000010 SdSpiCard::readSector(unsigned long, unsigned char*)
00013b60 g       .text	00000000 __init_array_start
0000b88c  w    F .text	00000002 .hidden __aeabi_idiv0
000086fc  w    F .text	00000006 can1_tx_warn_isr
0000b190 g     F .text	0000002c .hidden __unorddf2
00003d60 g     F .text	000000c0 Sd2Card::SD_readBlock(unsigned long, unsigned char*)
0000a500 g     F .text	0000010c uart0_status_isr
000086fc  w    F .text	00000006 mcg_isr
0000a154 g     F .text	0000005a Stream::parseInt(char)
00000400 g     O .text	00000010 flashconfigbytes
000098bc g     F .text	000000cc DMAChannel::begin(bool)
0000c7c0 g     F .text	000000dc strlen
0000b92c g     F .text	00000006 __locale_ctype_ptr_l
2001c628 g     O .bss	00000004 AudioInputI2SQuad::block_ch4
0000b11c g     F .text	00000010 .hidden __aeabi_cdcmpeq
0000b080 g     F .text	0000008a .hidden __gedf2
000059c8 g     F .text	00000094 FatFile::seekSet(unsigned long)
00011348 g     F .text	00000510 __gethex
20016fa4 g     O .data	00000016 usb_string_product_name_default
2001c648 g     O .bss	00000008 AudioOutputI2SQuad::dma
0000ff88 g     F .text	00000018 vdprintf
000086fc  w    F .text	00000006 dma_ch1_isr
00007508 g     F .text	0000006c SdioCard::sectorCount()
00006918 g     F .text	000000c4 FsVolume::begin(BlockDeviceInterface*)
00000530  w    F .text	0000001c c_uSD::~c_uSD()
00008b84 g     F .text	0000002c usb_tx_packet_count
0000c62c g     F .text	000000ce strchr
0001345c g     O .text	00000058 vtable for SdioCard
0000abb4 g     F .text	0000003a .hidden __aeabi_f2d
000086fc  w    F .text	00000006 dma_ch5_isr
000086fc  w    F .text	00000006 can0_rx_warn_isr
2001c620 g     O .bss	00000004 AudioInputI2SQuad::block_ch3
000086fc  w    F .text	00000006 can0_tx_warn_isr
0000a1e4 g     F .text	000000d8 uart4_status_isr
00007f04 g     F .text	00000074 SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
2001c5f8 g     O .bss	00000008 AudioInputAnalog::dma
2001caec g     O .bss	00000002 AudioStream::cpu_cycles_total_max
00008048 g     F .text	00000090 SdSpiArduinoDriver::activate()
0000a8f4 g     F .text	0000027a .hidden __subdf3
00013b60 g       .text	00000000 __preinit_array_start
00012ce4  w    O .text	0000000c vtable for AudioStream
00004acc g     F .text	000000a6 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
00011c58 g     F .text	0000005a __lo0bits
00004b74 g     F .text	0000003a ExFatPartition::chainSize(unsigned long)
00005a5c g     F .text	000000d6 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
0000a8d0  w    F .text	00000002 serialEvent3()
0000a8e0 g     F .text	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
000086fc  w    F .text	00000006 cmp2_isr
0000b2f8 g     F .text	00000160 .hidden __addsf3
00009a84 g     F .text	00000004 pendablesrvreq_isr
0000054c  w    F .text	0000000c AudioConnection::~AudioConnection()
0000046c  w    F .text	00000004 Print::availableForWrite()
20017404 g     O .data	0000016c __global_locale
000086fc  w    F .text	00000006 wakeup_isr
00007aa4 g     F .text	00000394 SdioCard::begin(SdioConfig)
0000485c g     F .text	0000000c FsCache::invalidate()
000086fc  w    F .text	00000006 cmp3_isr
00002640 g     F .text	000001b0 breakTime(long, tmElements_t&)
00009d04 g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
00005e68 g     F .text	0000006e FatPartition::fatGet(unsigned long, unsigned long*)
0000b958 g     F .text	00000010 free
2001c8d8 g     O .bss	00000001 SdVolume::cacheDirty_
000086fc  w    F .text	00000006 tpm2_isr
00011b00 g     F .text	00000080 __multadd
00011aec g     F .text	00000012 _Bfree
00013354 g     O .text	0000000c vtable for AudioInputI2SQuad
000086fc  w    F .text	00000006 dma_ch0_isr
20016fc0  w    O .data	00000016 usb_string_serial_number
000086fc  w    F .text	00000006 enet_tx_isr
00004d0c g     F .text	0000003a exFatHashName(char const*, unsigned int, unsigned short)
00007f78 g     F .text	000000d0 SdioCard::readSector(unsigned long, unsigned char*)
00007238 g     F .text	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text:

00000000 <_VectorsFlash>:
  str = fsFmtField(str, 2*(time & 31) + sec100/100, '.');
  *--str = ':';
  return fsFmtTime(str, time);
}
//------------------------------------------------------------------------------
char* fsFmtTimeZone(char* str, int8_t tz) {
       0:	... ............
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      10:	................
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      20:	................
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      30:	................
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
      40:	................
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      50:	................
      tz = -tz;
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      60:	................
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      *--str = sign;
    }
    *--str = 'C';
    *--str = 'T';
      70:	................
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      80:	................
      90:	................
      a0:	!2..-2..........
      b0:	................
      c0:	................
      d0:	................
      e0:	................
      f0:	................
     100:	................
     110:	................
     120:	................
     130:	................
     140:	i...............
     150:	................
     160:	........92......
     170:	................
     180:	................
     190:	........-.......
     1a0:	................
     1b0:	................
     1c0:	................

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #356]	; (338 <ResetHandler+0x168>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	8704 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #336]	; (33c <ResetHandler+0x16c>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #332]	; (340 <ResetHandler+0x170>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #332]	; (344 <ResetHandler+0x174>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #332]	; (348 <ResetHandler+0x178>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #328]	; (34c <ResetHandler+0x17c>)
     202:	ldr	r2, [pc, #332]	; (350 <ResetHandler+0x180>)
     204:	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	ldr	r3, [pc, #332]	; (354 <ResetHandler+0x184>)
     208:	ldrb	r2, [r3, #0]
     20a:	lsls	r1, r2, #28
     20c:	bpl.n	216 <ResetHandler+0x46>
     20e:	ldrb	r2, [r3, #0]
     210:	orr.w	r2, r2, #8
     214:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	ldr	r3, [pc, #320]	; (358 <ResetHandler+0x188>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	ldr	r1, [pc, #320]	; (35c <ResetHandler+0x18c>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	movs	r2, #170	; 0xaa
     21c:	strb	r2, [r3, #0]
     21e:	ldr	r2, [pc, #320]	; (360 <ResetHandler+0x190>)
     220:	ldr	r3, [pc, #320]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	cmp	r3, r1
     224:	bcs.n	230 <ResetHandler+0x60>
     226:	ldr.w	r0, [r2, #4]!
     22a:	str.w	r0, [r3], #4
     22e:	b.n	222 <ResetHandler+0x52>
     230:	ldr	r3, [pc, #308]	; (368 <ResetHandler+0x198>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	ldr	r1, [pc, #312]	; (36c <ResetHandler+0x19c>)
     234:	movs	r2, #0
     236:	cmp	r3, r1
     238:	bcs.n	240 <ResetHandler+0x70>
     23a:	str.w	r2, [r3], #4
     23e:	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	ldr	r1, [pc, #300]	; (370 <ResetHandler+0x1a0>)
     242:	ldr	r2, [pc, #304]	; (374 <ResetHandler+0x1a4>)
     244:	movs	r3, #0
     246:	ldr.w	r0, [r2, r3, lsl #2]
     24a:	str.w	r0, [r1, r3, lsl #2]
     24e:	adds	r3, #1
     250:	cmp	r3, #116	; 0x74
     252:	bne.n	246 <ResetHandler+0x76>
     254:	ldr	r3, [pc, #288]	; (378 <ResetHandler+0x1a8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	ldr	r2, [pc, #292]	; (37c <ResetHandler+0x1ac>)
     258:	movs	r1, #128	; 0x80
     25a:	strb.w	r1, [r3], #1
     25e:	cmp	r3, r2
     260:	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	ldr	r3, [pc, #284]	; (380 <ResetHandler+0x1b0>)
     264:	ldr	r2, [pc, #264]	; (370 <ResetHandler+0x1a0>)
     266:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	ldr	r3, [pc, #280]	; (384 <ResetHandler+0x1b4>)
     26a:	movs	r2, #138	; 0x8a
     26c:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	sub.w	r3, r3, #4096	; 0x1000
     272:	movs	r2, #36	; 0x24
     274:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	movs	r2, #160	; 0xa0
     278:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	ldrb	r2, [r3, #6]
     27c:	lsls	r2, r2, #30
     27e:	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	ldrb	r2, [r3, #6]
     282:	lsls	r4, r2, #27
     284:	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	ldr	r2, [pc, #256]	; (388 <ResetHandler+0x1b8>)
     288:	ldrb	r3, [r2, #6]
     28a:	and.w	r3, r3, #12
     28e:	cmp	r3, #8
     290:	ldr	r3, [pc, #244]	; (388 <ResetHandler+0x1b8>)
     292:	bne.n	288 <ResetHandler+0xb8>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(2);
    #elif F_CPU == 120000000
	MCG_C5 = MCG_C5_PRDIV0(1);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(14);
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     294:	movs	r2, #1
     296:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
     298:	movs	r2, #72	; 0x48
     29a:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     29c:	ldrb	r2, [r3, #6]
     29e:	lsls	r0, r2, #26
     2a0:	bpl.n	29c <ResetHandler+0xcc>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2a2:	ldr	r2, [pc, #228]	; (388 <ResetHandler+0x1b8>)
     2a4:	ldrb	r1, [r2, #6]
     2a6:	ldr	r3, [pc, #224]	; (388 <ResetHandler+0x1b8>)
     2a8:	lsls	r1, r1, #25
     2aa:	bpl.n	2a4 <ResetHandler+0xd4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     2ac:	ldr	r2, [pc, #220]	; (38c <ResetHandler+0x1bc>)
     2ae:	ldr	r1, [pc, #224]	; (390 <ResetHandler+0x1c0>)
     2b0:	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2b2:	movs	r1, #2
     2b4:	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2b6:	movs	r2, #32
     2b8:	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ba:	ldrb	r2, [r3, #6]
     2bc:	and.w	r2, r2, #12
     2c0:	cmp	r2, #12
     2c2:	bne.n	2ba <ResetHandler+0xea>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2c4:	ldr	r3, [pc, #204]	; (394 <ResetHandler+0x1c4>)
     2c6:	ldr	r2, [pc, #208]	; (398 <ResetHandler+0x1c8>)
     2c8:	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2ca:	ldr	r2, [pc, #208]	; (39c <ResetHandler+0x1cc>)
     2cc:	ldr	r4, [pc, #208]	; (3a0 <ResetHandler+0x1d0>)
     2ce:	ldr	r3, [r2, #0]
     2d0:	ands.w	r3, r3, #256	; 0x100
     2d4:	bne.n	2de <ResetHandler+0x10e>
		RTC_SR = 0;
     2d6:	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2d8:	mov.w	r3, #5376	; 0x1500
     2dc:	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2de:	ldr	r3, [pc, #196]	; (3a4 <ResetHandler+0x1d4>)
     2e0:	ldr	r2, [pc, #196]	; (3a8 <ResetHandler+0x1d8>)
     2e2:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2e4:	movs	r2, #0
     2e6:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2e8:	movs	r2, #7
     2ea:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2ee:	ldr	r2, [pc, #188]	; (3ac <ResetHandler+0x1dc>)
     2f0:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2f4:	cpsie	i

	_init_Teensyduino_internal_();
     2f6:	bl	8950 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2fa:	ldr	r3, [r4, #0]
     2fc:	lsls	r2, r3, #31
     2fe:	bpl.n	30c <ResetHandler+0x13c>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     300:	ldr	r0, [pc, #172]	; (3b0 <ResetHandler+0x1e0>)
     302:	bl	8818 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     306:	ldr	r3, [pc, #172]	; (3b4 <ResetHandler+0x1e4>)
     308:	ldr	r2, [pc, #172]	; (3b8 <ResetHandler+0x1e8>)
     30a:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     30c:	ldr	r3, [pc, #172]	; (3bc <ResetHandler+0x1ec>)
     30e:	ldrb	r3, [r3, #0]
     310:	lsls	r3, r3, #25
     312:	bpl.n	328 <ResetHandler+0x158>
     314:	ldr	r4, [pc, #156]	; (3b4 <ResetHandler+0x1e4>)
     316:	ldr	r3, [pc, #160]	; (3b8 <ResetHandler+0x1e8>)
     318:	ldr	r2, [r4, #0]
     31a:	cmp	r2, r3
     31c:	bne.n	328 <ResetHandler+0x158>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     31e:	ldr	r0, [pc, #144]	; (3b0 <ResetHandler+0x1e0>)
     320:	bl	8818 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     324:	movs	r3, #0
     326:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     328:	bl	b8a8 <__libc_init_array>

	startup_late_hook();
     32c:	bl	8710 <startup_late_hook>
	main();
     330:	bl	9d8c <main>
     334:	b.n	334 <ResetHandler+0x164>
     336:	nop
     338:	.word	0x4005200e
     33c:	.word	0x40048030
     340:	.word	0x00043f82
     344:	.word	0x2b000001
     348:	.word	0xe000ed88
     34c:	.word	0xe0082000
     350:	.word	0x85000003
     354:	.word	0x4007d002
     358:	.word	0x4007e000
     35c:	.word	0x20017980
     360:	.word	0x00013bc0
     364:	.word	0x20016d30
     368:	.word	0x20017980
     36c:	.word	0x2001ce40
     370:	.word	0x20016800
     374:	.word	0x00000000
     378:	.word	0xe000e400
     37c:	.word	0xe000e464
     380:	.word	0xe000ed08
     384:	.word	0x40065000
     388:	.word	0x40064000
     38c:	.word	0x40048044
     390:	.word	0x01030000
     394:	.word	0x40048004
     398:	.word	0x000510c0
     39c:	.word	0x4003d010
     3a0:	.word	0x4003d014
     3a4:	.word	0xe000e014
     3a8:	.word	0x000176ff
     3ac:	.word	0x20200000
     3b0:	.word	0x00000031
     3b4:	.word	0x4003e01c
     3b8:	.word	0x5a94c3a5
     3bc:	.word	0x4007f000
     3c0:	.word	0xffffffff
     3c4:	.word	0xffffffff
     3c8:	.word	0xffffffff
     3cc:	.word	0xffffffff
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x20017980
     42c:	.word	0x00000000
     430:	.word	0x00013bbc

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x20017984
     460:	.word	0x00013bbc
     464:	.word	0x20017980
     468:	.word	0x00000000

0000046c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     46c:	movs	r0, #0
     46e:	bx	lr

00000470 <Print::flush()>:
	virtual void flush()				{ }
     470:	bx	lr
     472:	nop

00000474 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
     474:	mov.w	r0, #4294967295
     478:	bx	lr
     47a:	nop

0000047c <llwuISR()>:

static void llwuISR(void)
{
    //
#if defined(HAS_KINETIS_LLWU_32CH)
    LLWU_MF5 |= LLWU_MF5_MWUF5_MASK; // clear source in LLWU Flag register
     47c:	ldr	r2, [pc, #16]	; (490 <llwuISR()+0x14>)
#else
    LLWU_F3 |= LLWU_F3_MWUF5_MASK; // clear source in LLWU Flag register
#endif
    //
    RTC_IER = 0;// clear RTC interrupts
     47e:	ldr	r1, [pc, #20]	; (494 <llwuISR()+0x18>)

static void llwuISR(void)
{
    //
#if defined(HAS_KINETIS_LLWU_32CH)
    LLWU_MF5 |= LLWU_MF5_MWUF5_MASK; // clear source in LLWU Flag register
     480:	ldrb	r3, [r2, #0]
#else
    LLWU_F3 |= LLWU_F3_MWUF5_MASK; // clear source in LLWU Flag register
#endif
    //
    RTC_IER = 0;// clear RTC interrupts
     482:	movs	r0, #0

static void llwuISR(void)
{
    //
#if defined(HAS_KINETIS_LLWU_32CH)
    LLWU_MF5 |= LLWU_MF5_MWUF5_MASK; // clear source in LLWU Flag register
     484:	orr.w	r3, r3, #32
     488:	strb	r3, [r2, #0]
#else
    LLWU_F3 |= LLWU_F3_MWUF5_MASK; // clear source in LLWU Flag register
#endif
    //
    RTC_IER = 0;// clear RTC interrupts
     48a:	str	r0, [r1, #0]
     48c:	bx	lr
     48e:	nop
     490:	.word	0x4007c00d
     494:	.word	0x4003d01c

00000498 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

#include <TimeLib.h>

// Call back for file timestamps (used by FS).  Only called for file create and sync().
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
     498:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     49c:	mov	r7, r1
     49e:	mov	r6, r2
     4a0:	mov	r8, r0
  // Return date using FS_DATE macro to format fields.
  *date = FS_DATE(year(), month(), day());
     4a2:	bl	2a44 <year()>
     4a6:	mov	r4, r0
     4a8:	bl	2a24 <month()>
     4ac:	mov	r5, r0
     4ae:	bl	2a04 <day()>
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
     4b2:	subw	r3, r4, #1980	; 0x7bc
     4b6:	uxth	r3, r3
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
     4b8:	cmp	r3, #127	; 0x7f
     4ba:	bhi.n	4c2 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     4bc:	uxtb	r2, r5
     4be:	cmp	r2, #12
     4c0:	bls.n	51a <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x82>
         year << 9 | month << 5 | day;
     4c2:	movs	r3, #0
     4c4:	strh.w	r3, [r8]

  // Return time using FS_TIME macro to format fields.
  *time = FS_TIME(hour(), minute(), second());
     4c8:	bl	29a4 <hour()>
     4cc:	mov	r4, r0
     4ce:	bl	29c4 <minute()>
     4d2:	mov	r5, r0
     4d4:	bl	29e4 <second()>
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
     4d8:	uxtb	r3, r4
     4da:	cmp	r3, #23
     4dc:	bhi.n	4e4 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     4de:	uxtb	r3, r5
     4e0:	cmp	r3, #59	; 0x3b
     4e2:	bls.n	4fc <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x64>
         hour << 11 | minute << 5 | second >> 1;
     4e4:	movs	r3, #0
     4e6:	strh	r3, [r7, #0]

  // Return low time bits in units of 10 ms.
  *ms10 = second() & 1 ? 100 : 0;
     4e8:	bl	29e4 <second()>
     4ec:	tst.w	r0, #1
     4f0:	ite	ne
     4f2:	movne	r3, #100	; 0x64
     4f4:	moveq	r3, #0
     4f6:	strb	r3, [r6, #0]
     4f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     4fc:	uxtb	r3, r0
     4fe:	cmp	r3, #59	; 0x3b
     500:	bhi.n	4e4 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
         hour << 11 | minute << 5 | second >> 1;
     502:	lsls	r4, r4, #11
     504:	lsls	r3, r5, #5
     506:	and.w	r4, r4, #522240	; 0x7f800
     50a:	and.w	r3, r3, #8160	; 0x1fe0
     50e:	orrs	r3, r4
     510:	ubfx	r0, r0, #1, #7
     514:	orrs	r3, r0
     516:	uxth	r3, r3
     518:	b.n	4e6 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4e>

// Call back for file timestamps (used by FS).  Only called for file create and sync().
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
  // Return date using FS_DATE macro to format fields.
  *date = FS_DATE(year(), month(), day());
     51a:	uxtb	r0, r0
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     51c:	cmp	r0, #31
     51e:	bhi.n	4c2 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
         year << 9 | month << 5 | day;
     520:	lsls	r5, r5, #5
     522:	and.w	r5, r5, #8160	; 0x1fe0
     526:	orrs	r0, r5
     528:	orr.w	r3, r0, r3, lsl #9
     52c:	uxth	r3, r3
     52e:	b.n	4c4 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2c>

00000530 <c_uSD::~c_uSD()>:
int16_t diskBuffer[BUFFERSIZE];
int16_t *outptr = diskBuffer;

char header[512];

class c_uSD
     530:	push	{r4, lr}
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     532:	ldr	r3, [pc, #20]	; (548 <c_uSD::~c_uSD()+0x18>)
     534:	str.w	r3, [r0, #1196]	; 0x4ac
     538:	mov	r4, r0
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     53a:	addw	r0, r0, #1212	; 0x4bc
     53e:	bl	6870 <FsBaseFile::close()>
     542:	mov	r0, r4
     544:	pop	{r4, pc}
     546:	nop
     548:	.word	0x00012d04

0000054c <AudioConnection::~AudioConnection()>:
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
		{ isConnected = false;
		  connect(); }
	friend class AudioStream;
	~AudioConnection() {
     54c:	push	{r4, lr}
     54e:	mov	r4, r0
		disconnect();
     550:	bl	9fbc <AudioConnection::disconnect()>
	}
     554:	mov	r0, r4
     556:	pop	{r4, pc}

00000558 <mRecordQueue<137>::update()>:
	release(userblock);
	userblock = NULL;
}

template <int MQ>
void mRecordQueue<MQ>::update(void)
     558:	push	{r4, lr}
{
	audio_block_t *block;
	uint16_t h;

	block = receiveReadOnly();
     55a:	movs	r1, #0
	release(userblock);
	userblock = NULL;
}

template <int MQ>
void mRecordQueue<MQ>::update(void)
     55c:	mov	r4, r0
{
	audio_block_t *block;
	uint16_t h;

	block = receiveReadOnly();
     55e:	bl	9f3c <AudioStream::receiveReadOnly(unsigned int)>
	if (!block) return;
     562:	cbz	r0, 590 <mRecordQueue<137>::update()+0x38>
	if (!enabled) {
     564:	ldrh.w	r3, [r4, #588]	; 0x24c
     568:	uxth	r3, r3
     56a:	cbz	r3, 592 <mRecordQueue<137>::update()+0x3a>
		release(block);
		return;
	}
	h = head + 1;
     56c:	ldrh.w	r3, [r4, #584]	; 0x248
	if (h >= MQ) h = 0;
	if (h == tail) {
     570:	ldrh.w	r2, [r4, #586]	; 0x24a
	if (!block) return;
	if (!enabled) {
		release(block);
		return;
	}
	h = head + 1;
     574:	adds	r3, #1
     576:	uxth	r3, r3
	if (h >= MQ) h = 0;
     578:	cmp	r3, #137	; 0x89
     57a:	it	cs
     57c:	movcs	r3, #0
	if (h == tail) {
     57e:	uxth	r2, r2
     580:	cmp	r3, r2
     582:	beq.n	59a <mRecordQueue<137>::update()+0x42>
		release(block); // drop incomming data
    dropCount++; // flag for main to know
	} else {
		queue[h] = block; // store incomming data
     584:	add.w	r2, r3, #8
     588:	str.w	r0, [r4, r2, lsl #2]
		head = h;
     58c:	strh.w	r3, [r4, #584]	; 0x248
     590:	pop	{r4, pc}
	}
}
     592:	ldmia.w	sp!, {r4, lr}
	uint16_t h;

	block = receiveReadOnly();
	if (!block) return;
	if (!enabled) {
		release(block);
     596:	b.w	9eb4 <AudioStream::release(audio_block_struct*)>
		return;
	}
	h = head + 1;
	if (h >= MQ) h = 0;
	if (h == tail) {
		release(block); // drop incomming data
     59a:	bl	9eb4 <AudioStream::release(audio_block_struct*)>
    dropCount++; // flag for main to know
     59e:	ldr	r3, [r4, #24]
     5a0:	adds	r3, #1
     5a2:	str	r3, [r4, #24]
     5a4:	pop	{r4, pc}
     5a6:	nop

000005a8 <getTime(char*) [clone .constprop.33]>:
{
    sprintf(text,"%04d/%02d/%02d",year(), month(), day());
    return text;  
}

static char * getTime(char *text)
     5a8:	push	{r4, r5, r6, lr}
     5aa:	sub	sp, #8
{
    sprintf(text,"%02d:%02d:%02d",hour(),minute(),second());
     5ac:	bl	29a4 <hour()>
     5b0:	mov	r5, r0
     5b2:	bl	29c4 <minute()>
     5b6:	mov	r6, r0
     5b8:	bl	29e4 <second()>
     5bc:	ldr	r4, [pc, #20]	; (5d4 <getTime(char*) [clone .constprop.33]+0x2c>)
     5be:	str	r0, [sp, #0]
     5c0:	mov	r3, r6
     5c2:	mov	r2, r5
     5c4:	mov	r0, r4
     5c6:	ldr	r1, [pc, #16]	; (5d8 <getTime(char*) [clone .constprop.33]+0x30>)
     5c8:	bl	c584 <sprintf>
    return text;
}
     5cc:	mov	r0, r4
     5ce:	add	sp, #8
     5d0:	pop	{r4, r5, r6, pc}
     5d2:	nop
     5d4:	.word	0x2001c0f4
     5d8:	.word	0x00012d44

000005dc <getDate(char*) [clone .constprop.34]>:
*/


#include <TimeLib.h>

static char * getDate(char *text)
     5dc:	push	{r4, r5, r6, lr}
     5de:	sub	sp, #8
{
    sprintf(text,"%04d/%02d/%02d",year(), month(), day());
     5e0:	bl	2a44 <year()>
     5e4:	mov	r5, r0
     5e6:	bl	2a24 <month()>
     5ea:	mov	r6, r0
     5ec:	bl	2a04 <day()>
     5f0:	ldr	r4, [pc, #20]	; (608 <getDate(char*) [clone .constprop.34]+0x2c>)
     5f2:	str	r0, [sp, #0]
     5f4:	mov	r3, r6
     5f6:	mov	r2, r5
     5f8:	mov	r0, r4
     5fa:	ldr	r1, [pc, #16]	; (60c <getDate(char*) [clone .constprop.34]+0x30>)
     5fc:	bl	c584 <sprintf>
    return text;  
}
     600:	mov	r0, r4
     602:	add	sp, #8
     604:	pop	{r4, r5, r6, pc}
     606:	nop
     608:	.word	0x2001c0f4
     60c:	.word	0x00012d54

00000610 <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     610:	ldr	r2, [r0, #72]	; 0x48
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     612:	cbz	r2, 62e <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     614:	ldrb	r3, [r2, #0]
     616:	and.w	r3, r3, #8
     61a:	and.w	r0, r3, #255	; 0xff
     61e:	cbz	r3, 662 <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     620:	ldr	r3, [r2, #28]
     622:	ldr	r0, [r2, #20]
     624:	subs	r0, r3, r0
     626:	it	mi
     628:	mvnmi.w	r0, #2147483648	; 0x80000000
     62c:	bx	lr
     62e:	ldr	r1, [r0, #76]	; 0x4c
     630:	cbz	r1, 664 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     632:	ldrb.w	r3, [r1, #49]	; 0x31
     636:	and.w	r3, r3, #8
     63a:	and.w	r0, r3, #255	; 0xff
     63e:	cbz	r3, 662 <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
     640:	ldrd	r2, r3, [r1, #16]
     644:	ldrd	r0, r1, [r1]
     648:	subs	r0, r2, r0
     64a:	push	{r4, r5}
     64c:	sbc.w	r1, r3, r1
     650:	movs	r5, #0
     652:	mvn.w	r4, #2147483648	; 0x80000000
     656:	cmp	r5, r1
     658:	it	eq
     65a:	cmpeq	r4, r0
     65c:	bcs.n	660 <StreamFile<FsBaseFile, unsigned long long>::available()+0x50>
     65e:	mov	r0, r4
    return BaseFile::available();
  }
     660:	pop	{r4, r5}
     662:	bx	lr
     664:	mov	r0, r1
     666:	bx	lr

00000668 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  }
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     668:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     66a:	cbz	r3, 672 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     66c:	mov	r0, r3
     66e:	b.w	595c <FatFile::peek()>
     672:	ldr	r0, [r0, #76]	; 0x4c
     674:	cbz	r0, 67a <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     676:	b.w	4228 <ExFatFile::peek()>
    return BaseFile::peek();
  }
     67a:	mov.w	r0, #4294967295
     67e:	bx	lr

00000680 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
     680:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     682:	cbz	r3, 68a <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     684:	mov	r0, r3
     686:	b.w	5b34 <FatFile::sync()>
     68a:	ldr	r0, [r0, #76]	; 0x4c
     68c:	cbz	r0, 692 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     68e:	b.w	4f84 <ExFatFile::sync()>
     692:	bx	lr

00000694 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     694:	push	{lr}
     696:	ldr	r3, [r0, #72]	; 0x48
     698:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     69a:	cbz	r3, 6b6 <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     69c:	mov	r0, r3
     69e:	movs	r2, #1
     6a0:	add.w	r1, sp, #7
     6a4:	bl	57c4 <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     6a8:	cmp	r0, #1
     6aa:	bne.n	6c6 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     6ac:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     6b0:	add	sp, #12
     6b2:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     6b6:	ldr	r0, [r0, #76]	; 0x4c
     6b8:	cbz	r0, 6c6 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     6ba:	movs	r2, #1
     6bc:	add.w	r1, sp, #7
     6c0:	bl	4088 <ExFatFile::read(void*, unsigned int)>
     6c4:	b.n	6a8 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     6c6:	mov.w	r0, #4294967295
     6ca:	b.n	6b0 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

000006cc <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     6cc:	ldr	r3, [r0, #72]	; 0x48
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     6ce:	cbz	r3, 6d6 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     6d0:	mov	r0, r3
     6d2:	b.w	5bb8 <FatFile::write(void const*, unsigned int)>
     6d6:	ldr	r0, [r0, #76]	; 0x4c
     6d8:	cbz	r0, 6de <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     6da:	b.w	5240 <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     6de:	bx	lr

000006e0 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     6e0:	push	{lr}
     6e2:	ldr	r3, [r0, #72]	; 0x48
     6e4:	sub	sp, #12
     6e6:	strb.w	r1, [sp, #7]
     6ea:	cbz	r3, 6fe <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     6ec:	mov	r0, r3
     6ee:	movs	r2, #1
     6f0:	add.w	r1, sp, #7
     6f4:	bl	5bb8 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     6f8:	add	sp, #12
     6fa:	ldr.w	pc, [sp], #4
     6fe:	ldr	r0, [r0, #76]	; 0x4c
     700:	cmp	r0, #0
     702:	beq.n	6f8 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     704:	movs	r2, #1
     706:	add.w	r1, sp, #7
     70a:	bl	5240 <ExFatFile::write(void const*, unsigned int)>
     70e:	add	sp, #12
     710:	ldr.w	pc, [sp], #4

00000714 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     714:	push	{r4, r5, r6, lr}
     716:	mov	r4, r0
     718:	mov	r0, r1
     71a:	mov	r5, r1
     71c:	bl	c7c0 <strlen>
     720:	ldr	r3, [r4, #0]
     722:	mov	r2, r0
     724:	mov	r1, r5
     726:	mov	r0, r4
     728:	ldr	r3, [r3, #4]
     72a:	ldmia.w	sp!, {r4, r5, r6, lr}
     72e:	bx	r3

00000730 <Print::println(__FlashStringHelper const*)>:
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     730:	push	{r3, r4, r5, lr}
     732:	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     734:	mov	r0, r1
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     736:	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     738:	bl	c7c0 <strlen>
     73c:	ldr	r3, [r4, #0]
     73e:	mov	r2, r0
     740:	mov	r1, r5
     742:	ldr	r3, [r3, #4]
     744:	mov	r0, r4
     746:	blx	r3
     748:	mov	r5, r0
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     74a:	mov	r0, r4
     74c:	bl	9cb8 <Print::println()>
     750:	add	r0, r5
     752:	pop	{r3, r4, r5, pc}

00000754 <I2S_dividers(unsigned long*, unsigned long, unsigned long)>:

// ********************************************** following is to change I2S sampling rates ********************
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
     754:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     758:	mov	r9, r0
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     75a:	ldr	r0, [r0, #8]

// ********************************************** following is to change I2S sampling rates ********************
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
     75c:	vpush	{d8-d9}
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     760:	adds	r0, #1

// ********************************************** following is to change I2S sampling rates ********************
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
     762:	vmov	s17, r1
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     766:	movs	r1, #0

// ********************************************** following is to change I2S sampling rates ********************
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
     768:	vmov	s16, r2
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     76c:	bl	b48c <__aeabi_l2f>
     770:	vldr	s15, [pc, #140]	; 800 <I2S_dividers(unsigned long*, unsigned long, unsigned long)+0xac>
    float mn=1.0; 
    for(int ii=1;ii<=256;ii++) 
    { float xx;
      xx=A*ii-(int32_t)(A*ii);
      if(xx<mn && A*ii<4096.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
     774:	vldr	s18, [pc, #140]	; 804 <I2S_dividers(unsigned long*, unsigned long, unsigned long)+0xb0>
{ // nbits is number of bits / frame
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     778:	vmov	s14, r0
     77c:	vdiv.f32	s13, s15, s14
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
    int64_t i1 = 1;
    int64_t i2 = 1;
     780:	movs	r0, #1
// ********************************************** following is to change I2S sampling rates ********************
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
    int64_t i1 = 1;
     782:	mov	r8, r0
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     784:	movs	r4, #1
     786:	movs	r5, #0
    float mn=1.0; 
    for(int ii=1;ii<=256;ii++) 
     788:	movw	r6, #257	; 0x101
     78c:	movs	r7, #0
{ // nbits is number of bits / frame
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     78e:	vcvt.f32.u32	s15, s17
     792:	vcvt.f32.u32	s16, s16
    float mn=1.0; 
     796:	vmov.f32	s14, #112	; 0x3f800000  1.0
{ // nbits is number of bits / frame
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     79a:	vmul.f32	s15, s16, s15
     79e:	vdiv.f32	s17, s13, s15
    float mn=1.0; 
    for(int ii=1;ii<=256;ii++) 
    { float xx;
      xx=A*ii-(int32_t)(A*ii);
     7a2:	vmov	s15, r4
     7a6:	vcvt.f32.s32	s15, s15
     7aa:	vmul.f32	s15, s15, s17
     7ae:	vcvt.s32.f32	s16, s15
     7b2:	vcvt.f32.s32	s16, s16
     7b6:	vsub.f32	s16, s15, s16
      if(xx<mn && A*ii<4096.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
     7ba:	vcmpe.f32	s16, s14
     7be:	vmrs	APSR_nzcv, fpscr
     7c2:	bpl.n	7dc <I2S_dividers(unsigned long*, unsigned long, unsigned long)+0x88>
     7c4:	vcmpe.f32	s15, s18
     7c8:	vmrs	APSR_nzcv, fpscr
     7cc:	bpl.n	7dc <I2S_dividers(unsigned long*, unsigned long, unsigned long)+0x88>
     7ce:	vmov	r0, s15
     7d2:	bl	b538 <__aeabi_f2lz>
     7d6:	mov	r8, r4
     7d8:	vmov.f32	s14, s16
     7dc:	adds	r4, #1
     7de:	adc.w	r5, r5, #0
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
    float mn=1.0; 
    for(int ii=1;ii<=256;ii++) 
     7e2:	cmp	r5, r7
     7e4:	it	eq
     7e6:	cmpeq	r4, r6
     7e8:	bne.n	7a2 <I2S_dividers(unsigned long*, unsigned long, unsigned long)+0x4e>
      if(xx<mn && A*ii<4096.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
    }
    iscl[0] = (int) (i1-1);
    iscl[1] = (int) (i2-1);
    iscl[2] = (int) (i3-1);
}
     7ea:	vpop	{d8-d9}
    for(int ii=1;ii<=256;ii++) 
    { float xx;
      xx=A*ii-(int32_t)(A*ii);
      if(xx<mn && A*ii<4096.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
    }
    iscl[0] = (int) (i1-1);
     7ee:	add.w	r3, r8, #4294967295
    iscl[1] = (int) (i2-1);
     7f2:	subs	r0, #1
    for(int ii=1;ii<=256;ii++) 
    { float xx;
      xx=A*ii-(int32_t)(A*ii);
      if(xx<mn && A*ii<4096.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
    }
    iscl[0] = (int) (i1-1);
     7f4:	str.w	r3, [r9]
    iscl[1] = (int) (i2-1);
     7f8:	str.w	r0, [r9, #4]
    iscl[2] = (int) (i3-1);
}
     7fc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     800:	.word	0x4c371b00
     804:	.word	0x45800000

00000808 <I2S_modification(unsigned long, unsigned short, int)>:
{
    I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
}

void I2S_modification(uint32_t fsamp, uint16_t nbits, int nch)
{ uint32_t iscl[3];
     808:	push	{r4, r5, r6, r7, lr}

  if(nch==8)
     80a:	cmp	r2, #8
{
    I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
}

void I2S_modification(uint32_t fsamp, uint16_t nbits, int nch)
{ uint32_t iscl[3];
     80c:	sub	sp, #44	; 0x2c

  if(nch==8)
    iscl[2]=0;
     80e:	ite	eq
     810:	moveq	r3, #0
  else
    iscl[2]=1;
     812:	movne	r3, #1
{
    I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
}

void I2S_modification(uint32_t fsamp, uint16_t nbits, int nch)
{ uint32_t iscl[3];
     814:	mov	r6, r1
     816:	mov	r4, r2
     818:	mov	r7, r0
  if(nch==8)
    iscl[2]=0;
  else
    iscl[2]=1;
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
     81a:	mul.w	r2, r1, r2
     81e:	mov	r1, r0
     820:	add	r0, sp, #28
{ uint32_t iscl[3];

  if(nch==8)
    iscl[2]=0;
  else
    iscl[2]=1;
     822:	str	r3, [sp, #36]	; 0x24
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
     824:	bl	754 <I2S_dividers(unsigned long*, unsigned long, unsigned long)>
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
     828:	vldr	s15, [sp, #28]
    iscl[2]=0;
  else
    iscl[2]=1;
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
     82c:	ldr	r2, [sp, #32]
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
     82e:	vldr	s13, [pc, #180]	; 8e4 <I2S_modification(unsigned long, unsigned short, int)+0xdc>
    iscl[2]=0;
  else
    iscl[2]=1;
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
     832:	ldr	r5, [sp, #36]	; 0x24
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
     834:	ldr	r3, [sp, #28]
     836:	str	r6, [sp, #4]
     838:	vcvt.f32.u32	s14, s15
    iscl[2]=0;
  else
    iscl[2]=1;
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
     83c:	adds	r2, #1
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
     83e:	vmov.f32	s15, #112	; 0x3f800000  1.0
     842:	vadd.f32	s15, s14, s15
     846:	vmov	s14, r2
     84a:	vmul.f32	s15, s15, s13
     84e:	vcvt.f32.u32	s14, s14
    iscl[2]=0;
  else
    iscl[2]=1;
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
     852:	adds	r5, #1
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
     854:	vdiv.f32	s13, s15, s14
     858:	adds	r1, r3, #1
     85a:	str	r1, [sp, #8]
     85c:	mov	r3, r7
     85e:	str	r2, [sp, #12]
     860:	str	r5, [sp, #16]
     862:	ldr	r2, [pc, #132]	; (8e8 <I2S_modification(unsigned long, unsigned short, int)+0xe0>)
     864:	ldr	r1, [pc, #132]	; (8ec <I2S_modification(unsigned long, unsigned short, int)+0xe4>)
     866:	ldr	r0, [pc, #136]	; (8f0 <I2S_modification(unsigned long, unsigned short, int)+0xe8>)
     868:	vmov	s15, r5
     86c:	vmov.f32	s12, #96	; 0x3f000000  0.5
     870:	vcvt.f32.u32	s14, s15
     874:	vmul.f32	s13, s13, s12
     878:	vmov	s15, r4
     87c:	vdiv.f32	s12, s13, s14
#endif
  // stop I2S
  I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);

  // modify sampling frequency
  I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]);
     880:	ldr	r5, [pc, #112]	; (8f4 <I2S_modification(unsigned long, unsigned short, int)+0xec>)

  // configure transmitter
  I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
    | I2S_TCR2_BCD | I2S_TCR2_DIV(iscl[2]);
     882:	ldr	r4, [pc, #116]	; (8f8 <I2S_modification(unsigned long, unsigned short, int)+0xf0>)
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
     884:	vmov	s14, r6
     888:	vcvt.f32.s32	s15, s15
     88c:	vcvt.f32.s32	s14, s14
     890:	vmul.f32	s15, s15, s14
     894:	vdiv.f32	s14, s12, s15
     898:	vcvt.s32.f32	s14, s14
     89c:	vstr	s14, [sp]
     8a0:	bl	9ce8 <Print::printf(char const*, ...)>
#endif
  // stop I2S
  I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     8a4:	ldr	r1, [pc, #84]	; (8fc <I2S_modification(unsigned long, unsigned short, int)+0xf4>)
//  I2S0_TCR4 = I2S_TCR4_FRSZ(nch-1) | I2S_TCR4_SYWD(0) | I2S_TCR4_MF
//    | I2S_TCR4_FSE | I2S_TCR4_FSD;

  // configure receiver (sync'd to transmitter clocks)
  I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
    | I2S_RCR2_BCD | I2S_RCR2_DIV(iscl[2]);
     8a6:	ldr	r0, [pc, #88]	; (900 <I2S_modification(unsigned long, unsigned short, int)+0xf8>)
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
#endif
  // stop I2S
  I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     8a8:	ldr	r3, [r1, #0]
     8aa:	bic.w	r3, r3, #2415919104	; 0x90000000
     8ae:	str	r3, [r1, #0]

  // modify sampling frequency
  I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]);
     8b0:	ldr	r2, [sp, #28]
     8b2:	ldr	r3, [sp, #32]
     8b4:	lsls	r2, r2, #12
     8b6:	and.w	r2, r2, #1044480	; 0xff000
     8ba:	ubfx	r3, r3, #0, #12
     8be:	orrs	r3, r2
     8c0:	str	r3, [r5, #0]

  // configure transmitter
  I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
    | I2S_TCR2_BCD | I2S_TCR2_DIV(iscl[2]);
     8c2:	ldrb.w	r3, [sp, #36]	; 0x24
     8c6:	orr.w	r3, r3, #117440512	; 0x7000000
     8ca:	str	r3, [r4, #0]
//  I2S0_TCR4 = I2S_TCR4_FRSZ(nch-1) | I2S_TCR4_SYWD(0) | I2S_TCR4_MF
//    | I2S_TCR4_FSE | I2S_TCR4_FSD;

  // configure receiver (sync'd to transmitter clocks)
  I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
    | I2S_RCR2_BCD | I2S_RCR2_DIV(iscl[2]);
     8cc:	ldrb.w	r3, [sp, #36]	; 0x24
     8d0:	orr.w	r3, r3, #1191182336	; 0x47000000
     8d4:	str	r3, [r0, #0]
//  I2S0_RCR4 = I2S_RCR4_FRSZ(nch-1) | I2S_RCR4_SYWD(0) | I2S_RCR4_MF
//    | I2S_RCR4_FSE | I2S_RCR4_FSD;

  //restart I2S
  I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     8d6:	ldr	r3, [r1, #0]
     8d8:	orr.w	r3, r3, #2415919104	; 0x90000000
     8dc:	str	r3, [r1, #0]
}
     8de:	add	sp, #44	; 0x2c
     8e0:	pop	{r4, r5, r6, r7, pc}
     8e2:	nop
     8e4:	.word	0x4cb71b00
     8e8:	.word	0x05b8d800
     8ec:	.word	0x00012d64
     8f0:	.word	0x20016f24
     8f4:	.word	0x4002f104
     8f8:	.word	0x4002f008
     8fc:	.word	0x4002f080
     900:	.word	0x4002f088

00000904 <makeFilename(char*)>:
  // Return low time bits in units of 10 ms.
  *ms10 = second() & 1 ? 100 : 0;
}

char *makeFilename(char * prefix)
{ static char filename[40];
     904:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     908:	sub	sp, #24
     90a:	mov	r5, r0

  sprintf(filename, "%s_%04d_%02d_%02d_%02d_%02d_%02d%s", prefix, 
     90c:	bl	2a44 <year()>
     910:	mov	r6, r0
     912:	bl	2a24 <month()>
     916:	mov	sl, r0
     918:	bl	2a04 <day()>
     91c:	mov	r7, r0
     91e:	bl	29a4 <hour()>
     922:	mov	r8, r0
     924:	bl	29c4 <minute()>
     928:	mov	r9, r0
     92a:	bl	29e4 <second()>
                    year(), month(), day(), hour(), minute(), second(), postfix);
     92e:	ldr	r4, [pc, #60]	; (96c <makeFilename(char*)+0x68>)
     930:	ldr	r1, [pc, #60]	; (970 <makeFilename(char*)+0x6c>)
     932:	str	r0, [sp, #16]
     934:	mov	r3, r6
     936:	mov	r2, r5
     938:	str	r1, [sp, #20]
     93a:	str.w	sl, [sp]
     93e:	ldr	r1, [pc, #52]	; (974 <makeFilename(char*)+0x70>)
     940:	str.w	r9, [sp, #12]
     944:	str.w	r8, [sp, #8]
     948:	str	r7, [sp, #4]
     94a:	mov	r0, r4
     94c:	bl	c584 <sprintf>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     950:	mov	r0, r4
     952:	bl	c7c0 <strlen>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     956:	mov	r1, r0
     958:	mov	r0, r4
     95a:	bl	83cc <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     95e:	ldr	r0, [pc, #24]	; (978 <makeFilename(char*)+0x74>)
     960:	bl	9cb8 <Print::println()>
#if DO_DEBUG>0
  Serial.println(filename);
#endif
  return filename;  
}
     964:	mov	r0, r4
     966:	add	sp, #24
     968:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     96c:	.word	0x2001c0b4
     970:	.word	0x20016d3c
     974:	.word	0x00012d7c
     978:	.word	0x20016f24

0000097c <wavHeader(unsigned long)>:

  int nsamp=(fileSize-44)/(nbytes*nchan);
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
     97c:	ldr	r3, [pc, #80]	; (9d0 <wavHeader(unsigned long)+0x54>)
     97e:	ldr	r1, [pc, #84]	; (9d4 <wavHeader(unsigned long)+0x58>)
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
     980:	ldr	r2, [pc, #84]	; (9d8 <wavHeader(unsigned long)+0x5c>)

	return header;
}

char * wavHeader(uint32_t fileSize)
{
     982:	push	{r4, r5, r6, r7}
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
     984:	str	r2, [r3, #28]

	return header;
}

char * wavHeader(uint32_t fileSize)
{
     986:	mov	r2, r0

  int nsamp=(fileSize-44)/(nbytes*nchan);
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
     988:	ldmia	r1, {r0, r1}
  strcpy(wheader+8,"WAVE");
     98a:	ldr	r6, [pc, #80]	; (9dc <wavHeader(unsigned long)+0x60>)

  int nsamp=(fileSize-44)/(nbytes*nchan);
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
     98c:	str	r0, [r3, #0]
  strcpy(wheader+8,"WAVE");
     98e:	ldmia.w	r6, {r0, r1}
  strcpy(wheader+12,"fmt ");
     992:	ldr	r5, [pc, #76]	; (9e0 <wavHeader(unsigned long)+0x64>)
  int nsamp=(fileSize-44)/(nbytes*nchan);
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
     994:	str	r0, [r3, #8]
  strcpy(wheader+12,"fmt ");
     996:	ldmia.w	r5, {r0, r1}
  strcpy(wheader+36,"data");
     99a:	ldr	r4, [pc, #72]	; (9e4 <wavHeader(unsigned long)+0x68>)
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
     99c:	str	r0, [r3, #12]
  strcpy(wheader+36,"data");
     99e:	ldmia.w	r4, {r0, r1}
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
     9a2:	subs	r2, #44	; 0x2c
     9a4:	bic.w	r2, r2, #7
  *(int32_t*)(wheader+4)=36+nsamp*nchan*nbytes; 
     9a8:	add.w	r7, r2, #36	; 0x24
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
     9ac:	movs	r6, #1
  *(int16_t*)(wheader+22)=nchan;// numChannels 
     9ae:	movs	r5, #4
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
     9b0:	movw	r4, #48000	; 0xbb80
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
     9b4:	str	r0, [r3, #36]	; 0x24
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
     9b6:	movs	r1, #8
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
     9b8:	str	r2, [r3, #40]	; 0x28
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
     9ba:	movs	r2, #16
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
  *(int32_t*)(wheader+4)=36+nsamp*nchan*nbytes; 
     9bc:	str	r7, [r3, #4]
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
     9be:	strh	r6, [r3, #20]
  *(int16_t*)(wheader+22)=nchan;// numChannels 
     9c0:	strh	r5, [r3, #22]
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
     9c2:	str	r4, [r3, #24]
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
  *(int32_t*)(wheader+4)=36+nsamp*nchan*nbytes; 

   return wheader;
}
     9c4:	mov	r0, r3
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
     9c6:	strh	r1, [r3, #32]
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
     9c8:	str	r2, [r3, #16]
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
     9ca:	strh	r2, [r3, #34]	; 0x22
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
  *(int32_t*)(wheader+4)=36+nsamp*nchan*nbytes; 

   return wheader;
}
     9cc:	pop	{r4, r5, r6, r7}
     9ce:	bx	lr
     9d0:	.word	0x2001c118
     9d4:	.word	0x00012dc0
     9d8:	.word	0x00017700
     9dc:	.word	0x00012dc8
     9e0:	.word	0x00012dd0
     9e4:	.word	0x00012dd8

000009e8 <c_uSD::init()>:
//____________________________ FS Interface implementation______________________
void c_uSD::init()
{
     9e8:	push	{r4, r5, r6, lr}
     9ea:	mov	r4, r0
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     9ec:	add.w	r5, r0, #1160	; 0x488
     9f0:	mov	r0, r5
     9f2:	mov.w	r1, #0
     9f6:	bl	7aa4 <SdioCard::begin(SdioConfig)>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
     9fa:	str.w	r5, [r4, #1156]	; 0x484
    return m_card && !m_card->errorCode();
     9fe:	cbz	r5, a0a <c_uSD::init()+0x22>
     a00:	mov	r0, r5
     a02:	bl	7204 <SdioCard::errorCode() const>
     a06:	mov	r5, r0
     a08:	cbz	r0, a2a <c_uSD::init()+0x42>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     a0a:	ldr	r6, [pc, #60]	; (a48 <c_uSD::init()+0x60>)
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     a0c:	ldr	r5, [pc, #60]	; (a4c <c_uSD::init()+0x64>)
  {
//    sd.errorHalt("sd.begin failed");
    while(1)
    {
      // blink code suggests insertion of an SD card
            pinMode(13,OUTPUT);
     a0e:	movs	r1, #1
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     a10:	movs	r4, #32
     a12:	movs	r0, #13
     a14:	bl	8864 <pinMode>
     a18:	str	r4, [r6, #0]
            digitalWriteFast(13,HIGH);
            delay(200);
     a1a:	movs	r0, #200	; 0xc8
     a1c:	bl	88b4 <delay>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     a20:	str	r4, [r5, #0]
            digitalWriteFast(13,LOW);
            delay(200);
     a22:	movs	r0, #200	; 0xc8
     a24:	bl	88b4 <delay>
     a28:	b.n	a0e <c_uSD::init()+0x26>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     a2a:	ldr.w	r1, [r4, #1156]	; 0x484
     a2e:	mov	r0, r4
     a30:	bl	6918 <FsVolume::begin(BlockDeviceInterface*)>
     a34:	cmp	r0, #0
     a36:	beq.n	a0a <c_uSD::init()+0x22>
    }
  }

  // Set Time callback
  FsDateTime::callback = dateTime;
     a38:	ldr	r3, [pc, #20]	; (a50 <c_uSD::init()+0x68>)
     a3a:	ldr	r2, [pc, #24]	; (a54 <c_uSD::init()+0x6c>)
  //
  nbuf=0;
     a3c:	strh.w	r5, [r4, #1278]	; 0x4fe
  state=0;
     a40:	strh.w	r5, [r4, #1276]	; 0x4fc
            delay(200);
    }
  }

  // Set Time callback
  FsDateTime::callback = dateTime;
     a44:	str	r2, [r3, #0]
  //
  nbuf=0;
  state=0;
}
     a46:	pop	{r4, r5, r6, pc}
     a48:	.word	0x400ff084
     a4c:	.word	0x400ff088
     a50:	.word	0x2001c8f8
     a54:	.word	0x00000499

00000a58 <c_uSD::close()>:
    state=close();
  }
  return state;
}
int16_t c_uSD::close(void)
{   // close file
     a58:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     a5c:	mov	r5, r0
     a5e:	ldr.w	r0, [r0, #1268]	; 0x4f4
   *
   * \return true for success or false for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
     a62:	cmp	r0, #0
     a64:	beq.n	afa <c_uSD::close()+0xa2>
     a66:	bl	5b40 <FatFile::truncate()>
     a6a:	ldr.w	r3, [r5, #1268]	; 0x4f4
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     a6e:	cmp	r3, #0
     a70:	beq.n	b0c <c_uSD::close()+0xb4>
     a72:	ldr.w	sl, [r3, #28]
     a76:	mov.w	r9, #0
     a7a:	mov	r8, sl
    file.truncate();
    #ifdef GEN_WAV_FILE
       uint32_t fileSize = file.size();
       memcpy(header,wavHeader(fileSize),44);
     a7c:	mov	r0, sl
     a7e:	bl	97c <wavHeader(unsigned long)>
     a82:	ldr	r7, [pc, #232]	; (b6c <c_uSD::close()+0x114>)
     a84:	mov	r4, r0
     a86:	add.w	lr, r0, #32
     a8a:	ldr	r0, [r4, #0]
     a8c:	ldr	r1, [r4, #4]
     a8e:	ldr	r2, [r4, #8]
     a90:	ldr	r3, [r4, #12]
     a92:	mov	r6, r7
     a94:	stmia	r6!, {r0, r1, r2, r3}
     a96:	adds	r4, #16
     a98:	cmp	r4, lr
     a9a:	mov	r7, r6
     a9c:	bne.n	a8a <c_uSD::close()+0x32>
     a9e:	ldr	r0, [r4, #0]
     aa0:	ldr	r1, [r4, #4]
     aa2:	ldr	r2, [r4, #8]
     aa4:	stmia	r7!, {r0, r1, r2}
     aa6:	ldr.w	r0, [r5, #1268]	; 0x4f4
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     aaa:	cmp	r0, #0
     aac:	beq.n	b40 <c_uSD::close()+0xe8>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     aae:	movs	r1, #0
     ab0:	bl	59c8 <FatFile::seekSet(unsigned long)>
     ab4:	ldr.w	r0, [r5, #1268]	; 0x4f4
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     ab8:	cbz	r0, b1e <c_uSD::close()+0xc6>
     aba:	mov.w	r2, #512	; 0x200
     abe:	ldr	r1, [pc, #172]	; (b6c <c_uSD::close()+0x114>)
     ac0:	bl	5bb8 <FatFile::write(void const*, unsigned int)>
     ac4:	ldr.w	r0, [r5, #1268]	; 0x4f4
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     ac8:	cmp	r0, #0
     aca:	bne.n	b38 <c_uSD::close()+0xe0>
     acc:	ldr.w	r0, [r5, #1272]	; 0x4f8
     ad0:	cbz	r0, ada <c_uSD::close()+0x82>
     ad2:	mov	r2, r8
     ad4:	mov	r3, r9
     ad6:	bl	4258 <ExFatFile::seekSet(unsigned long long)>
       file.seek(0);
       file.write(header,512);
       file.seek(fileSize);
    #endif
    file.close();
     ada:	addw	r0, r5, #1212	; 0x4bc
     ade:	bl	6870 <FsBaseFile::close()>
     ae2:	movs	r1, #11
     ae4:	ldr	r0, [pc, #136]	; (b70 <c_uSD::close()+0x118>)
     ae6:	bl	83cc <usb_serial_write>
     aea:	ldr	r0, [pc, #136]	; (b74 <c_uSD::close()+0x11c>)
     aec:	bl	9cb8 <Print::println()>
#if DO_DEBUG>0
    Serial.println("file Closed");    
#endif
    state=0;  // flag to open new file
     af0:	movs	r0, #0
     af2:	strh.w	r0, [r5, #1276]	; 0x4fc
    return state;
}
     af6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   *
   * \return true for success or false for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
     afa:	ldr.w	r0, [r5, #1272]	; 0x4f8
     afe:	cbz	r0, b52 <c_uSD::close()+0xfa>
     b00:	bl	515c <ExFatFile::truncate()>
     b04:	ldr.w	r3, [r5, #1268]	; 0x4f4
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     b08:	cmp	r3, #0
     b0a:	bne.n	a72 <c_uSD::close()+0x1a>
     b0c:	ldr.w	r3, [r5, #1272]	; 0x4f8
     b10:	cbz	r3, b5e <c_uSD::close()+0x106>
     b12:	ldrd	r8, r9, [r3, #16]
     b16:	mov.w	r9, #0
     b1a:	mov	sl, r8
     b1c:	b.n	a7c <c_uSD::close()+0x24>
     b1e:	ldr.w	r0, [r5, #1272]	; 0x4f8
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     b22:	cmp	r0, #0
     b24:	beq.n	ada <c_uSD::close()+0x82>
     b26:	mov.w	r2, #512	; 0x200
     b2a:	ldr	r1, [pc, #64]	; (b6c <c_uSD::close()+0x114>)
     b2c:	bl	5240 <ExFatFile::write(void const*, unsigned int)>
     b30:	ldr.w	r0, [r5, #1268]	; 0x4f4
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     b34:	cmp	r0, #0
     b36:	beq.n	acc <c_uSD::close()+0x74>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     b38:	mov	r1, sl
     b3a:	bl	59c8 <FatFile::seekSet(unsigned long)>
     b3e:	b.n	ada <c_uSD::close()+0x82>
           m_xFile ? m_xFile->seekSet(pos) : false;
     b40:	ldr.w	r0, [r5, #1272]	; 0x4f8
     b44:	cmp	r0, #0
     b46:	beq.n	ada <c_uSD::close()+0x82>
     b48:	movs	r2, #0
     b4a:	movs	r3, #0
     b4c:	bl	4258 <ExFatFile::seekSet(unsigned long long)>
     b50:	b.n	ab4 <c_uSD::close()+0x5c>
   *
   * \return true for success or false for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
     b52:	mov	sl, r0
     b54:	mov.w	r8, #0
     b58:	mov.w	r9, #0
     b5c:	b.n	a7c <c_uSD::close()+0x24>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     b5e:	mov	sl, r3
     b60:	mov.w	r8, #0
     b64:	mov.w	r9, #0
     b68:	b.n	a7c <c_uSD::close()+0x24>
     b6a:	nop
     b6c:	.word	0x20017eb4
     b70:	.word	0x00012de0
     b74:	.word	0x20016f24

00000b78 <c_uSD::storeConfig(unsigned long*, int, long*, int)>:

void c_uSD::storeConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{ char text[32];
     b78:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
     b7c:	ldr	r4, [pc, #272]	; (c90 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x118>)
     b7e:	sub	sp, #44	; 0x2c
     b80:	ldr	r4, [r4, #0]
     b82:	ldr.w	r9, [sp, #80]	; 0x50
     b86:	str	r3, [sp, #4]
     b88:	mov	r5, r0
     b8a:	mov	sl, r1
     b8c:	mov	r8, r2
  file.open("Config.txt", O_CREAT|O_WRITE|O_TRUNC);
     b8e:	addw	fp, r0, #1212	; 0x4bc
     b92:	cbz	r4, ba2 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x2a>
     b94:	mov	r1, r4
     b96:	movw	r3, #1537	; 0x601
     b9a:	ldr	r2, [pc, #248]	; (c94 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x11c>)
     b9c:	mov	r0, fp
     b9e:	bl	6898 <FsBaseFile::open(FsVolume*, char const*, int)>
  for(int ii=0; ii<n1; ii++)
     ba2:	cmp.w	r8, #0
     ba6:	ble.n	c8a <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x112>
     ba8:	sub.w	r7, sl, #4
     bac:	movs	r6, #0
     bae:	add	r4, sp, #8
     bb0:	b.n	bbc <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x44>
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     bb2:	bl	5bb8 <FatFile::write(void const*, unsigned int)>
     bb6:	adds	r6, #1
     bb8:	cmp	r8, r6
     bba:	beq.n	bf6 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x7e>
  { sprintf(text,"%10d\r\n",(int) param1[ii]); file.write((uint8_t*)text,strlen(text));
     bbc:	ldr.w	r2, [r7, #4]!
     bc0:	ldr	r1, [pc, #212]	; (c98 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x120>)
     bc2:	mov	r0, r4
     bc4:	bl	c584 <sprintf>
     bc8:	mov	r0, r4
     bca:	bl	c7c0 <strlen>
     bce:	ldr.w	r3, [r5, #1268]	; 0x4f4
     bd2:	mov	lr, r0
     bd4:	mov	r2, r0
     bd6:	mov	r1, r4
     bd8:	mov	r0, r3
     bda:	cmp	r3, #0
     bdc:	bne.n	bb2 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x3a>
     bde:	ldr.w	r3, [r5, #1272]	; 0x4f8
     be2:	mov	r2, lr
     be4:	mov	r1, r4
     be6:	mov	r0, r3
     be8:	cmp	r3, #0
     bea:	beq.n	bb6 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x3e>
}

void c_uSD::storeConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{ char text[32];
  file.open("Config.txt", O_CREAT|O_WRITE|O_TRUNC);
  for(int ii=0; ii<n1; ii++)
     bec:	adds	r6, #1
     bee:	bl	5240 <ExFatFile::write(void const*, unsigned int)>
     bf2:	cmp	r8, r6
     bf4:	bne.n	bbc <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x44>
  { sprintf(text,"%10d\r\n",(int) param1[ii]); file.write((uint8_t*)text,strlen(text));
  }
//
  for(int ii=0; ii<n2; ii++)
     bf6:	cmp.w	r9, #0
     bfa:	ble.n	c48 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0xd0>
     bfc:	ldr	r3, [sp, #4]
     bfe:	movs	r6, #0
     c00:	subs	r7, r3, #4
     c02:	b.n	c0e <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x96>
     c04:	bl	5bb8 <FatFile::write(void const*, unsigned int)>
     c08:	adds	r6, #1
     c0a:	cmp	r9, r6
     c0c:	beq.n	c48 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0xd0>
  { sprintf(text,"%10d\r\n",(int) param2[ii]); file.write((uint8_t*)text,strlen(text));
     c0e:	ldr.w	r2, [r7, #4]!
     c12:	ldr	r1, [pc, #132]	; (c98 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x120>)
     c14:	mov	r0, r4
     c16:	bl	c584 <sprintf>
     c1a:	mov	r0, r4
     c1c:	bl	c7c0 <strlen>
     c20:	ldr.w	r3, [r5, #1268]	; 0x4f4
     c24:	mov	lr, r0
     c26:	mov	r2, r0
     c28:	mov	r1, r4
     c2a:	mov	r0, r3
     c2c:	cmp	r3, #0
     c2e:	bne.n	c04 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x8c>
     c30:	ldr.w	r3, [r5, #1272]	; 0x4f8
     c34:	mov	r2, lr
     c36:	mov	r1, r4
     c38:	mov	r0, r3
     c3a:	cmp	r3, #0
     c3c:	beq.n	c08 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x90>
  file.open("Config.txt", O_CREAT|O_WRITE|O_TRUNC);
  for(int ii=0; ii<n1; ii++)
  { sprintf(text,"%10d\r\n",(int) param1[ii]); file.write((uint8_t*)text,strlen(text));
  }
//
  for(int ii=0; ii<n2; ii++)
     c3e:	adds	r6, #1
     c40:	bl	5240 <ExFatFile::write(void const*, unsigned int)>
     c44:	cmp	r9, r6
     c46:	bne.n	c0e <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x96>
  { sprintf(text,"%10d\r\n",(int) param2[ii]); file.write((uint8_t*)text,strlen(text));
  }
  sprintf(text,"%s\r\n",(char*) &param1[n1]);
     c48:	add.w	r2, sl, r8, lsl #2
     c4c:	ldr	r1, [pc, #76]	; (c9c <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x124>)
     c4e:	mov	r0, r4
     c50:	bl	c584 <sprintf>
     c54:	ldr.w	r0, [r5, #1268]	; 0x4f4
     c58:	cbz	r0, c6e <c_uSD::storeConfig(unsigned long*, int, long*, int)+0xf6>
     c5a:	mov	r1, r4
     c5c:	movs	r2, #6
     c5e:	bl	5bb8 <FatFile::write(void const*, unsigned int)>
  file.write((uint8_t *)text,6);

  file.close();
     c62:	mov	r0, fp
     c64:	bl	6870 <FsBaseFile::close()>
  
}
     c68:	add	sp, #44	; 0x2c
     c6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c6e:	ldr.w	r0, [r5, #1272]	; 0x4f8
     c72:	cmp	r0, #0
     c74:	beq.n	c62 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0xea>
     c76:	mov	r1, r4
     c78:	movs	r2, #6
     c7a:	bl	5240 <ExFatFile::write(void const*, unsigned int)>
  { sprintf(text,"%10d\r\n",(int) param2[ii]); file.write((uint8_t*)text,strlen(text));
  }
  sprintf(text,"%s\r\n",(char*) &param1[n1]);
  file.write((uint8_t *)text,6);

  file.close();
     c7e:	mov	r0, fp
     c80:	bl	6870 <FsBaseFile::close()>
  
}
     c84:	add	sp, #44	; 0x2c
     c86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c8a:	add	r4, sp, #8
     c8c:	b.n	bf6 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x7e>
     c8e:	nop
     c90:	.word	0x2001c8fc
     c94:	.word	0x00012dec
     c98:	.word	0x00012e00
     c9c:	.word	0x00012df8

00000ca0 <c_uSD::loadConfig(unsigned long*, int, long*, int)>:

void c_uSD::loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{
     ca0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
     ca4:	ldr	r4, [pc, #248]	; (da0 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x100>)
     ca6:	sub	sp, #44	; 0x2c
     ca8:	ldr	r4, [r4, #0]
     caa:	ldr.w	r9, [sp, #80]	; 0x50
     cae:	cmp	r4, #0
     cb0:	beq.n	d2a <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x8a>
  char text[32];
  if(!file.open("Config.txt",O_RDONLY)) return;
     cb2:	addw	fp, r0, #1212	; 0x4bc
     cb6:	str	r3, [sp, #4]
     cb8:	mov	r8, r2
     cba:	mov	sl, r1
     cbc:	mov	r5, r0
     cbe:	mov	r1, r4
     cc0:	mov	r0, fp
     cc2:	movs	r3, #0
     cc4:	ldr	r2, [pc, #220]	; (da4 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x104>)
     cc6:	bl	6898 <FsBaseFile::open(FsVolume*, char const*, int)>
     cca:	cbz	r0, d2a <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x8a>
  //
  for(int ii=0; ii<n1; ii++)
     ccc:	cmp.w	r8, #0
     cd0:	ble.n	d30 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x90>
     cd2:	mov	r7, sl
     cd4:	movs	r6, #0
     cd6:	add	r4, sp, #8
     cd8:	b.n	cf2 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x52>
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     cda:	bl	57c4 <FatFile::read(void*, unsigned int)>
  { if(file.read((uint8_t*)text,12)); sscanf(text,"%d",(int *) &param1[ii]);
     cde:	mov	r2, r7
void c_uSD::loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{
  char text[32];
  if(!file.open("Config.txt",O_RDONLY)) return;
  //
  for(int ii=0; ii<n1; ii++)
     ce0:	adds	r6, #1
  { if(file.read((uint8_t*)text,12)); sscanf(text,"%d",(int *) &param1[ii]);
     ce2:	ldr	r1, [pc, #196]	; (da8 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x108>)
     ce4:	mov	r0, r4
     ce6:	bl	c5d0 <sscanf>
void c_uSD::loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{
  char text[32];
  if(!file.open("Config.txt",O_RDONLY)) return;
  //
  for(int ii=0; ii<n1; ii++)
     cea:	cmp	r8, r6
     cec:	add.w	r7, r7, #4
     cf0:	beq.n	d32 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x92>
     cf2:	ldr.w	r3, [r5, #1268]	; 0x4f4
     cf6:	movs	r2, #12
     cf8:	mov	r1, r4
     cfa:	mov	r0, r3
     cfc:	cmp	r3, #0
     cfe:	bne.n	cda <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x3a>
     d00:	ldr.w	r3, [r5, #1272]	; 0x4f8
     d04:	movs	r2, #12
     d06:	mov	r1, r4
     d08:	mov	r0, r3
     d0a:	cmp	r3, #0
     d0c:	beq.n	cde <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x3e>
     d0e:	bl	4088 <ExFatFile::read(void*, unsigned int)>
     d12:	b.n	cde <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x3e>
     d14:	ldr.w	r0, [r5, #1268]	; 0x4f4
     d18:	cbz	r0, d78 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xd8>
     d1a:	movs	r2, #6
     d1c:	mov	r1, r4
     d1e:	bl	57c4 <FatFile::read(void*, unsigned int)>
  { if(file.read((uint8_t*)text,12)); sscanf(text,"%d",(int *) &param1[ii]);
  }
  for(int ii=0; ii<n2; ii++)
  { if(file.read((uint8_t*)text,12)); sscanf(text,"%d", (int *)&param2[ii]);
  }
  if(file.read((uint8_t *)text,6))
     d22:	cbnz	r0, d8a <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xea>
  { text[5]=0;
    sscanf(text,"%s",(char *) &param1[n1]);
  }  
  file.close();
     d24:	mov	r0, fp
     d26:	bl	6870 <FsBaseFile::close()>
}
     d2a:	add	sp, #44	; 0x2c
     d2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d30:	add	r4, sp, #8
  if(!file.open("Config.txt",O_RDONLY)) return;
  //
  for(int ii=0; ii<n1; ii++)
  { if(file.read((uint8_t*)text,12)); sscanf(text,"%d",(int *) &param1[ii]);
  }
  for(int ii=0; ii<n2; ii++)
     d32:	cmp.w	r9, #0
     d36:	ble.n	d14 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x74>
     d38:	ldr	r7, [sp, #4]
     d3a:	movs	r6, #0
     d3c:	b.n	d56 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xb6>
     d3e:	bl	57c4 <FatFile::read(void*, unsigned int)>
  { if(file.read((uint8_t*)text,12)); sscanf(text,"%d", (int *)&param2[ii]);
     d42:	mov	r2, r7
  if(!file.open("Config.txt",O_RDONLY)) return;
  //
  for(int ii=0; ii<n1; ii++)
  { if(file.read((uint8_t*)text,12)); sscanf(text,"%d",(int *) &param1[ii]);
  }
  for(int ii=0; ii<n2; ii++)
     d44:	adds	r6, #1
  { if(file.read((uint8_t*)text,12)); sscanf(text,"%d", (int *)&param2[ii]);
     d46:	ldr	r1, [pc, #96]	; (da8 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x108>)
     d48:	mov	r0, r4
     d4a:	bl	c5d0 <sscanf>
  if(!file.open("Config.txt",O_RDONLY)) return;
  //
  for(int ii=0; ii<n1; ii++)
  { if(file.read((uint8_t*)text,12)); sscanf(text,"%d",(int *) &param1[ii]);
  }
  for(int ii=0; ii<n2; ii++)
     d4e:	cmp	r9, r6
     d50:	add.w	r7, r7, #4
     d54:	beq.n	d14 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x74>
     d56:	ldr.w	r3, [r5, #1268]	; 0x4f4
     d5a:	movs	r2, #12
     d5c:	mov	r1, r4
     d5e:	mov	r0, r3
     d60:	cmp	r3, #0
     d62:	bne.n	d3e <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x9e>
     d64:	ldr.w	r3, [r5, #1272]	; 0x4f8
     d68:	movs	r2, #12
     d6a:	mov	r1, r4
     d6c:	mov	r0, r3
     d6e:	cmp	r3, #0
     d70:	beq.n	d42 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xa2>
     d72:	bl	4088 <ExFatFile::read(void*, unsigned int)>
     d76:	b.n	d42 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xa2>
     d78:	ldr.w	r0, [r5, #1272]	; 0x4f8
     d7c:	cbz	r0, d8a <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xea>
     d7e:	movs	r2, #6
     d80:	mov	r1, r4
     d82:	bl	4088 <ExFatFile::read(void*, unsigned int)>
  { if(file.read((uint8_t*)text,12)); sscanf(text,"%d", (int *)&param2[ii]);
  }
  if(file.read((uint8_t *)text,6))
     d86:	cmp	r0, #0
     d88:	beq.n	d24 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x84>
  { text[5]=0;
     d8a:	movs	r3, #0
    sscanf(text,"%s",(char *) &param1[n1]);
     d8c:	add.w	r2, sl, r8, lsl #2
     d90:	mov	r0, r4
     d92:	ldr	r1, [pc, #24]	; (dac <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x10c>)
  }
  for(int ii=0; ii<n2; ii++)
  { if(file.read((uint8_t*)text,12)); sscanf(text,"%d", (int *)&param2[ii]);
  }
  if(file.read((uint8_t *)text,6))
  { text[5]=0;
     d94:	strb.w	r3, [sp, #13]
    sscanf(text,"%s",(char *) &param1[n1]);
     d98:	bl	c5d0 <sscanf>
     d9c:	b.n	d24 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x84>
     d9e:	nop
     da0:	.word	0x2001c8fc
     da4:	.word	0x00012dec
     da8:	.word	0x00012e08
     dac:	.word	0x00012d9c

00000db0 <setWakeupCallandSleep(unsigned long)>:
   asm volatile( "wfi" );  // WFI instruction will start entry into STOP mode
   // will never return, but wake-up results in call to ResetHandler() in mk20dx128.c
}

void setWakeupCallandSleep(uint32_t nsec)
{  // set alarm to nsec secods in future and go to hibernate
     db0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#define RTC_IER_TAIE_MASK       0x4u
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
     db4:	ldr	r4, [pc, #308]	; (eec <setWakeupCallandSleep(unsigned long)+0x13c>)
   RTC_CR |= RTC_CR_OSCE;// enable RTC
     db6:	ldr	r2, [pc, #312]	; (ef0 <setWakeupCallandSleep(unsigned long)+0x140>)
#define RTC_IER_TAIE_MASK       0x4u
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
     db8:	ldr	r3, [r4, #0]
    RTC_IER = 0;// clear RTC interrupts
}

static void llwuSetup(void)
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
     dba:	ldr	r1, [pc, #312]	; (ef4 <setWakeupCallandSleep(unsigned long)+0x144>)
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
     dbc:	ldr.w	r8, [pc, #376]	; f38 <setWakeupCallandSleep(unsigned long)+0x188>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     dc0:	ldr	r6, [pc, #308]	; (ef8 <setWakeupCallandSleep(unsigned long)+0x148>)
#define RTC_IER_TAIE_MASK       0x4u
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
     dc2:	orr.w	r3, r3, #536870912	; 0x20000000
     dc6:	str	r3, [r4, #0]
   RTC_CR |= RTC_CR_OSCE;// enable RTC
     dc8:	ldr	r3, [r2, #0]
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
  NVIC_ENABLE_IRQ( IRQ_LLWU );
     dca:	ldr	r4, [pc, #304]	; (efc <setWakeupCallandSleep(unsigned long)+0x14c>)
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
   RTC_CR |= RTC_CR_OSCE;// enable RTC
     dcc:	orr.w	r3, r3, #256	; 0x100
   asm volatile( "wfi" );  // WFI instruction will start entry into STOP mode
   // will never return, but wake-up results in call to ResetHandler() in mk20dx128.c
}

void setWakeupCallandSleep(uint32_t nsec)
{  // set alarm to nsec secods in future and go to hibernate
     dd0:	mov	r7, r0
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
   RTC_CR |= RTC_CR_OSCE;// enable RTC
     dd2:	str	r3, [r2, #0]
    RTC_IER = 0;// clear RTC interrupts
}

static void llwuSetup(void)
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
     dd4:	movs	r0, #21
     dd6:	bl	8808 <attachInterruptVector>
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
     dda:	ldr	r3, [pc, #292]	; (f00 <setWakeupCallandSleep(unsigned long)+0x150>)
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
     ddc:	ldr.w	ip, [pc, #348]	; f3c <setWakeupCallandSleep(unsigned long)+0x18c>
  NVIC_ENABLE_IRQ( IRQ_LLWU );
//
  LLWU_PE1 = 0;
  LLWU_PE2 = 0;
     de0:	ldr	r1, [pc, #288]	; (f04 <setWakeupCallandSleep(unsigned long)+0x154>)
  LLWU_PE3 = 0;
     de2:	ldr	r0, [pc, #292]	; (f08 <setWakeupCallandSleep(unsigned long)+0x158>)
  LLWU_PE4 = 0;
     de4:	ldr	r2, [pc, #292]	; (f0c <setWakeupCallandSleep(unsigned long)+0x15c>)
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
  NVIC_ENABLE_IRQ( IRQ_LLWU );
//
  LLWU_PE1 = 0;
     de6:	ldr.w	lr, [pc, #344]	; f40 <setWakeupCallandSleep(unsigned long)+0x190>
}

static void llwuSetup(void)
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
     dea:	movs	r5, #32
     dec:	strb	r5, [r3, #0]
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
     dee:	mov.w	r3, #2097152	; 0x200000
     df2:	str.w	r3, [ip]
  NVIC_ENABLE_IRQ( IRQ_LLWU );
     df6:	str	r3, [r4, #0]
  LLWU_PE1 = 0;
  LLWU_PE2 = 0;
  LLWU_PE3 = 0;
  LLWU_PE4 = 0;
#if defined(HAS_KINETIS_LLWU_32CH)
  LLWU_PE5 = 0;
     df8:	ldr	r3, [pc, #276]	; (f10 <setWakeupCallandSleep(unsigned long)+0x160>)
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
  NVIC_ENABLE_IRQ( IRQ_LLWU );
//
  LLWU_PE1 = 0;
     dfa:	movs	r4, #0
     dfc:	strb.w	r4, [lr]
  LLWU_PE7 = 0;
  LLWU_PE8 = 0;
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
     e00:	mvn.w	ip, #1020	; 0x3fc
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
  NVIC_ENABLE_IRQ( IRQ_LLWU );
//
  LLWU_PE1 = 0;
  LLWU_PE2 = 0;
     e04:	strb	r4, [r1, #0]
  LLWU_PE3 = 0;
     e06:	strb	r4, [r0, #0]
  LLWU_PE4 = 0;
     e08:	strb	r4, [r2, #0]
#if defined(HAS_KINETIS_LLWU_32CH)
  LLWU_PE5 = 0;
     e0a:	strb	r4, [r3, #0]
  LLWU_PE6 = 0;
     e0c:	strb	r4, [r1, #4]
  LLWU_PE7 = 0;
  LLWU_PE8 = 0;
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
     e0e:	sub.w	r1, r1, #216064	; 0x34c00
     e12:	add	r1, ip
  LLWU_PE3 = 0;
  LLWU_PE4 = 0;
#if defined(HAS_KINETIS_LLWU_32CH)
  LLWU_PE5 = 0;
  LLWU_PE6 = 0;
  LLWU_PE7 = 0;
     e14:	strb	r4, [r0, #4]
  LLWU_PE8 = 0;
     e16:	strb	r4, [r2, #4]
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
     e18:	strb	r5, [r3, #4]
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
     e1a:	ldr	r3, [r1, #0]
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
     e1c:	ldr	r2, [pc, #244]	; (f14 <setWakeupCallandSleep(unsigned long)+0x164>)
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
     e1e:	ldr.w	ip, [pc, #292]	; f44 <setWakeupCallandSleep(unsigned long)+0x194>
  LLWU_PE7 = 0;
  LLWU_PE8 = 0;
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
     e22:	orr.w	r3, r3, #67108864	; 0x4000000
     e26:	str	r3, [r1, #0]
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
     e28:	ldr	r3, [r2, #0]
     e2a:	orr.w	r3, r3, #1073741824	; 0x40000000
     e2e:	str	r3, [r2, #0]
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
    PORTA_PCR2 = PORT_PCR_MUX(0);
    PORTA_PCR3 = PORT_PCR_MUX(0);

    PORTB_PCR2 = PORT_PCR_MUX(0);
     e30:	add.w	r1, r1, #12288	; 0x3000
    PORTB_PCR3 = PORT_PCR_MUX(0);
     e34:	add.w	r2, r2, #12288	; 0x3000
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
    PORTA_PCR2 = PORT_PCR_MUX(0);
     e38:	sub.w	lr, lr, #207872	; 0x32c00
    PORTA_PCR3 = PORT_PCR_MUX(0);
     e3c:	sub.w	r0, r0, #207872	; 0x32c00
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
    PORTA_PCR2 = PORT_PCR_MUX(0);
     e40:	sub.w	lr, lr, #1016	; 0x3f8
    PORTA_PCR3 = PORT_PCR_MUX(0);
     e44:	subw	r0, r0, #1014	; 0x3f6

    PORTB_PCR2 = PORT_PCR_MUX(0);
     e48:	adds	r1, #4
    PORTB_PCR3 = PORT_PCR_MUX(0);
     e4a:	adds	r2, #12
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
     e4c:	ldr	r3, [pc, #200]	; (f18 <setWakeupCallandSleep(unsigned long)+0x168>)
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
     e4e:	str.w	r4, [r8]
    PORTA_PCR1 = PORT_PCR_MUX(0);
     e52:	str.w	r4, [ip]
    PORTA_PCR2 = PORT_PCR_MUX(0);
     e56:	str.w	r4, [lr]
    PORTA_PCR3 = PORT_PCR_MUX(0);
     e5a:	str	r4, [r0, #0]

    PORTB_PCR2 = PORT_PCR_MUX(0);
     e5c:	str	r4, [r1, #0]
    PORTB_PCR3 = PORT_PCR_MUX(0);
     e5e:	str	r4, [r2, #0]
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
     e60:	ldr	r3, [r3, #0]
     e62:	sub.w	r1, r1, #53248	; 0xd000
   RTC_IER |= RTC_IER_TAIE_MASK;
     e66:	sub.w	r2, r2, #52992	; 0xcf00
     e6a:	subs	r2, #240	; 0xf0
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
     e6c:	add	r3, r7
     e6e:	str	r3, [r1, #0]
   RTC_IER |= RTC_IER_TAIE_MASK;
     e70:	ldr	r3, [r2, #0]
     e72:	orr.w	r3, r3, #4
     e76:	str	r3, [r2, #0]
void setWakeupCallandSleep(uint32_t nsec)
{  // set alarm to nsec secods in future and go to hibernate
   rtcSetup();
   llwuSetup();  
   rtcSetAlarm(nsec);
   yield();
     e78:	bl	9b98 <yield>
     e7c:	mov	r3, r4
     e7e:	movs	r2, #10
     e80:	mov	r1, r7
     e82:	mov	r0, r6
     e84:	bl	9d04 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
     e88:	mov	r0, r6
     e8a:	bl	9cb8 <Print::println()>
#if DO_DEBUG>0
   Serial.println(nsec);
   pinMode(13,OUTPUT); digitalWriteFast(13,HIGH); delay(1000); digitalWriteFast(13,LOW);
     e8e:	movs	r1, #1
     e90:	movs	r0, #13
     e92:	bl	8864 <pinMode>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     e96:	ldr	r3, [pc, #132]	; (f1c <setWakeupCallandSleep(unsigned long)+0x16c>)

#define VLLS_MODE VLLS0
static void gotoSleep(void)
{  
//  /* Make sure clock monitor is off so we don't get spurious reset */
   MCG_C6 &= ~MCG_C6_CME0;
     e98:	ldr	r6, [pc, #132]	; (f20 <setWakeupCallandSleep(unsigned long)+0x170>)
     e9a:	str	r5, [r3, #0]
   llwuSetup();  
   rtcSetAlarm(nsec);
   yield();
#if DO_DEBUG>0
   Serial.println(nsec);
   pinMode(13,OUTPUT); digitalWriteFast(13,HIGH); delay(1000); digitalWriteFast(13,LOW);
     e9c:	mov.w	r0, #1000	; 0x3e8
     ea0:	bl	88b4 <delay>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     ea4:	ldr	r3, [pc, #124]	; (f24 <setWakeupCallandSleep(unsigned long)+0x174>)
// is defined in kinetis.h and mk20dx128c
#if defined(HAS_KINETIS_HSRUN) && (F_CPU > 120000000)
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
     ea6:	ldr	r7, [pc, #128]	; (f28 <setWakeupCallandSleep(unsigned long)+0x178>)
     ea8:	str	r5, [r3, #0]

#define VLLS_MODE VLLS0
static void gotoSleep(void)
{  
//  /* Make sure clock monitor is off so we don't get spurious reset */
   MCG_C6 &= ~MCG_C6_CME0;
     eaa:	ldrb	r2, [r6, #5]
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
   SMC_PMCTRL |= SMC_PMCTRL_STOPM(0x4); // VLLSx

   SMC_VLLSCTRL =  SMC_VLLSCTRL_VLLSM(VLLS_MODE);
     eac:	ldr	r5, [pc, #124]	; (f2c <setWakeupCallandSleep(unsigned long)+0x17c>)
   /*wait for write to complete to SMC before stopping core */
   (void) SMC_PMCTRL;

   SYST_CSR &= ~SYST_CSR_TICKINT;      // disable systick timer interrupt
     eae:	ldr	r0, [pc, #128]	; (f30 <setWakeupCallandSleep(unsigned long)+0x180>)
   SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK;  // Set the SLEEPDEEP bit to enable deep sleep mode (STOP)
     eb0:	ldr	r1, [pc, #128]	; (f34 <setWakeupCallandSleep(unsigned long)+0x184>)
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
     eb2:	sub.w	r3, r3, #528384	; 0x81000

#define VLLS_MODE VLLS0
static void gotoSleep(void)
{  
//  /* Make sure clock monitor is off so we don't get spurious reset */
   MCG_C6 &= ~MCG_C6_CME0;
     eb6:	and.w	r2, r2, #223	; 0xdf
     eba:	strb	r2, [r6, #5]
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
     ebc:	subs	r3, #135	; 0x87
// is defined in kinetis.h and mk20dx128c
#if defined(HAS_KINETIS_HSRUN) && (F_CPU > 120000000)
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
     ebe:	movs	r2, #2
     ec0:	strb	r2, [r7, #0]
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
     ec2:	ldrb	r2, [r3, #0]
     ec4:	and.w	r2, r2, #248	; 0xf8
     ec8:	strb	r2, [r3, #0]
   SMC_PMCTRL |= SMC_PMCTRL_STOPM(0x4); // VLLSx
     eca:	ldrb	r2, [r3, #0]
     ecc:	orr.w	r2, r2, #4
     ed0:	strb	r2, [r3, #0]

   SMC_VLLSCTRL =  SMC_VLLSCTRL_VLLSM(VLLS_MODE);
     ed2:	strb	r4, [r5, #0]
   /*wait for write to complete to SMC before stopping core */
   (void) SMC_PMCTRL;
     ed4:	ldrb	r3, [r3, #0]

   SYST_CSR &= ~SYST_CSR_TICKINT;      // disable systick timer interrupt
     ed6:	ldr	r3, [r0, #0]
     ed8:	bic.w	r3, r3, #2
     edc:	str	r3, [r0, #0]
   SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK;  // Set the SLEEPDEEP bit to enable deep sleep mode (STOP)
     ede:	ldr	r3, [r1, #0]
     ee0:	orr.w	r3, r3, #4
     ee4:	str	r3, [r1, #0]
   
   asm volatile( "wfi" );  // WFI instruction will start entry into STOP mode
     ee6:	wfi
     ee8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     eec:	.word	0x4004803c
     ef0:	.word	0x4003d010
     ef4:	.word	0x0000047d
     ef8:	.word	0x20016f24
     efc:	.word	0xe000e100
     f00:	.word	0xe000e415
     f04:	.word	0x4007c001
     f08:	.word	0x4007c002
     f0c:	.word	0x4007c003
     f10:	.word	0x4007c004
     f14:	.word	0x40047000
     f18:	.word	0x4003d000
     f1c:	.word	0x400ff084
     f20:	.word	0x40064000
     f24:	.word	0x400ff088
     f28:	.word	0x4007e000
     f2c:	.word	0x4007e002
     f30:	.word	0xe000e010
     f34:	.word	0xe000ed10
     f38:	.word	0x40049000
     f3c:	.word	0xe000e280
     f40:	.word	0x4007c000
     f44:	.word	0x40049004

00000f48 <checkDutyCycle(ACQ_Parameters_s*, short)>:
  #define ShortSleepDuration 60   // i.e. wake up every 'ShortSleepDuration' seconds
#endif
//
// flag can be 0 file to be open // time to shutdown if required
int16_t checkDutyCycle(ACQ_Parameters_s *acqParameters,int16_t flag)
{	static uint32_t t_start = 0;  // start of actual file
     f48:	push	{r3, r4, r5, r6, r7, lr}
     f4a:	mov	r6, r0
     f4c:	mov	r5, r1
  static uint16_t recording = 0;  // acquisition has started

  uint32_t tt = now();
     f4e:	bl	2904 <now()>
     f52:	mov	r4, r0
  uint16_t to = hour();
     f54:	bl	29a4 <hour()>
  
  // check if we should sleep longer
  // sleep time between T2 and T3 and T4 and T1 (values are in hours)
  
  uint16_t T1 = acqParameters->T1;
     f58:	ldrh	r7, [r6, #12]
  uint16_t T2 = acqParameters->T2;
  uint16_t T3 = acqParameters->T3;
  uint16_t T4 = acqParameters->T4;
     f5a:	ldrh.w	lr, [r6, #24]
  
  // check if we should sleep longer
  // sleep time between T2 and T3 and T4 and T1 (values are in hours)
  
  uint16_t T1 = acqParameters->T1;
  uint16_t T2 = acqParameters->T2;
     f5e:	ldrh	r3, [r6, #16]
  uint16_t T3 = acqParameters->T3;
     f60:	ldrh	r1, [r6, #20]
  uint16_t T4 = acqParameters->T4;
  
  uint16_t doRecording=1;
  if (T4<T1) // e.g. 3-4, 23-1 (work over midnight)
     f62:	cmp	r7, lr
int16_t checkDutyCycle(ACQ_Parameters_s *acqParameters,int16_t flag)
{	static uint32_t t_start = 0;  // start of actual file
  static uint16_t recording = 0;  // acquisition has started

  uint32_t tt = now();
  uint16_t to = hour();
     f64:	uxth	r0, r0
  uint16_t T2 = acqParameters->T2;
  uint16_t T3 = acqParameters->T3;
  uint16_t T4 = acqParameters->T4;
  
  uint16_t doRecording=1;
  if (T4<T1) // e.g. 3-4, 23-1 (work over midnight)
     f66:	bls.n	f8a <checkDutyCycle(ACQ_Parameters_s*, short)+0x42>
    doRecording =   ((to>=T3) || (to<T4) || ((to>=T1) && (to<T2)));
     f68:	cmp	r0, r1
     f6a:	bcc.n	fe8 <checkDutyCycle(ACQ_Parameters_s*, short)+0xa0>
      uint16_t t_on = acqParameters->on;
      uint16_t t_dur = acqParameters->ad;
      uint16_t t_rep = acqParameters->ar;
      uint32_t t_rec = acqParameters->rec;
      
    if(flag>=0)
     f6c:	cmp	r5, #0
    doRecording = (((to>=T1) && (to<T2)) || ((to>=T3) && (to<T4)));

  uint32_t nsec=0;
  if (doRecording) // we can record
  {
      uint16_t t_on = acqParameters->on;
     f6e:	ldr	r3, [r6, #0]
      uint16_t t_dur = acqParameters->ad;
      uint16_t t_rep = acqParameters->ar;
     f70:	ldr	r2, [r6, #8]
      uint32_t t_rec = acqParameters->rec;
     f72:	ldr	r0, [r6, #28]
      
    if(flag>=0)
     f74:	blt.n	1026 <checkDutyCycle(ACQ_Parameters_s*, short)+0xde>
    { 
      if((flag>0) && (tt >= t_start + t_dur)) //we are indeed still recording
     f76:	beq.n	ffe <checkDutyCycle(ACQ_Parameters_s*, short)+0xb6>
     f78:	ldr	r5, [pc, #332]	; (10c8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x180>)
     f7a:	ldrh	r2, [r6, #4]
     f7c:	ldr	r3, [r5, #0]
     f7e:	add	r3, r2
     f80:	cmp	r4, r3
     f82:	bcs.w	10b2 <checkDutyCycle(ACQ_Parameters_s*, short)+0x16a>
    Serial.println(nsec); 
    Serial.println("Hibernate now 3");
#endif
    return nsec;
  }
  return 0;
     f86:	movs	r0, #0
}
     f88:	pop	{r3, r4, r5, r6, r7, pc}
  
  uint16_t doRecording=1;
  if (T4<T1) // e.g. 3-4, 23-1 (work over midnight)
    doRecording =   ((to>=T3) || (to<T4) || ((to>=T1) && (to<T2)));
  else		// e.g. 3-4, 23-24
    doRecording = (((to>=T1) && (to<T2)) || ((to>=T3) && (to<T4)));
     f8a:	cmp	r0, r7
     f8c:	bcc.n	f92 <checkDutyCycle(ACQ_Parameters_s*, short)+0x4a>
     f8e:	cmp	r0, r3
     f90:	bcc.n	f6c <checkDutyCycle(ACQ_Parameters_s*, short)+0x24>
     f92:	cmp	r0, r1
     f94:	bcs.n	1018 <checkDutyCycle(ACQ_Parameters_s*, short)+0xd0>
          }
    }
  }
  else
  {
    uint32_t tto= tt%(24*3600); // seconds since midnight
     f96:	ldr	r2, [pc, #308]	; (10cc <checkDutyCycle(ACQ_Parameters_s*, short)+0x184>)
     f98:	ldr	r5, [pc, #308]	; (10d0 <checkDutyCycle(ACQ_Parameters_s*, short)+0x188>)
     f9a:	umull	r6, r2, r2, r4
     f9e:	lsrs	r2, r2, #16
    nsec=0;
    // estimate next start time
    if ((to >= T2) && (to<T3))  // sleep during the day  //eg: to=10: T1=4; T2=9; T3=16; T4=20
     fa0:	cmp	r0, r3
          }
    }
  }
  else
  {
    uint32_t tto= tt%(24*3600); // seconds since midnight
     fa2:	mls	r2, r5, r2, r4
    nsec=0;
    // estimate next start time
    if ((to >= T2) && (to<T3))  // sleep during the day  //eg: to=10: T1=4; T2=9; T3=16; T4=20
     fa6:	bcc.n	fac <checkDutyCycle(ACQ_Parameters_s*, short)+0x64>
     fa8:	cmp	r0, r1
     faa:	bcc.n	106c <checkDutyCycle(ACQ_Parameters_s*, short)+0x124>
    }
  }
  else
  {
    uint32_t tto= tt%(24*3600); // seconds since midnight
    nsec=0;
     fac:	movs	r4, #0
    if ((to >= T2) && (to<T3))  // sleep during the day  //eg: to=10: T1=4; T2=9; T3=16; T4=20
    { if(tto < T3 * 3600) 
      nsec = T3 * 3600 - tto;
    }
    //
    if((to>=T4) && (T4>T1)) // sleep over midnight to T1 //eg: to=21: T1=4; T2=9; T3=16; T4=20
     fae:	cmp	r0, lr
     fb0:	bcc.n	fb6 <checkDutyCycle(ACQ_Parameters_s*, short)+0x6e>
     fb2:	cmp	r7, lr
     fb4:	bcc.n	105c <checkDutyCycle(ACQ_Parameters_s*, short)+0x114>
    {  nsec = (T1+24) * 3600 - tto;
    }
    //
    if(to<T1)                                            //eg: to=2:  T1=4; T2=9; T3=16; T4=20
     fb6:	cmp	r0, r7
     fb8:	bcs.n	fc4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x7c>
    { nsec = T1 * 3600 - tto;
     fba:	mov.w	r0, #3600	; 0xe10
     fbe:	mul.w	r0, r0, r7
     fc2:	subs	r4, r0, r2

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     fc4:	movs	r3, #0
     fc6:	movs	r2, #10
     fc8:	mov	r1, r4
     fca:	ldr	r0, [pc, #264]	; (10d4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x18c>)
     fcc:	bl	9d04 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
     fd0:	ldr	r0, [pc, #256]	; (10d4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x18c>)
     fd2:	bl	9cb8 <Print::println()>
     fd6:	movs	r1, #15
     fd8:	ldr	r0, [pc, #252]	; (10d8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x190>)
     fda:	bl	83cc <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     fde:	ldr	r0, [pc, #244]	; (10d4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x18c>)
     fe0:	bl	9cb8 <Print::println()>
    
#if DO_DEBUG>0
    Serial.println(nsec); 
    Serial.println("Hibernate now 3");
#endif
    return nsec;
     fe4:	sxth	r0, r4
     fe6:	pop	{r3, r4, r5, r6, r7, pc}
  uint16_t T3 = acqParameters->T3;
  uint16_t T4 = acqParameters->T4;
  
  uint16_t doRecording=1;
  if (T4<T1) // e.g. 3-4, 23-1 (work over midnight)
    doRecording =   ((to>=T3) || (to<T4) || ((to>=T1) && (to<T2)));
     fe8:	cmp	r0, lr
     fea:	bcc.n	f6c <checkDutyCycle(ACQ_Parameters_s*, short)+0x24>
     fec:	cmp	r0, r7
     fee:	bcc.n	f96 <checkDutyCycle(ACQ_Parameters_s*, short)+0x4e>
     ff0:	cmp	r0, r3
     ff2:	ite	cs
     ff4:	movcs	r2, #0
     ff6:	movcc	r2, #1
  else		// e.g. 3-4, 23-24
    doRecording = (((to>=T1) && (to<T2)) || ((to>=T3) && (to<T4)));

  uint32_t nsec=0;
  if (doRecording) // we can record
     ff8:	cmp	r2, #0
     ffa:	beq.n	f96 <checkDutyCycle(ACQ_Parameters_s*, short)+0x4e>
     ffc:	b.n	f6c <checkDutyCycle(ACQ_Parameters_s*, short)+0x24>
        return -1; // flag to close acquisition
      }
      
      if( flag==0 )  // file is closed new file
      { 
        if(!recording) // we are at the beginning of an acquisition cycle
     ffe:	ldr	r1, [pc, #220]	; (10dc <checkDutyCycle(ACQ_Parameters_s*, short)+0x194>)
    1000:	ldrh	r7, [r1, #0]
    1002:	cmp	r7, #0
    1004:	beq.n	107c <checkDutyCycle(ACQ_Parameters_s*, short)+0x134>
          // the following is for each new file
          t_start = tt; // beginning of each file
        }
        else
        // check is we end acquisition cycle
        if ((t_rep>t_on) && (tt >= t_rec + t_on))
    1006:	uxth	r3, r3
    1008:	uxth	r2, r2
    100a:	cmp	r3, r2
    100c:	bcs.n	1014 <checkDutyCycle(ACQ_Parameters_s*, short)+0xcc>
    100e:	add	r3, r0
    1010:	cmp	r4, r3
    1012:	bcs.n	108a <checkDutyCycle(ACQ_Parameters_s*, short)+0x142>
    Serial.println(nsec); 
    Serial.println("Hibernate now 3");
#endif
    return nsec;
  }
  return 0;
    1014:	mov	r0, r5
    1016:	pop	{r3, r4, r5, r6, r7, pc}
    1018:	cmp	r0, lr
    101a:	ite	cs
    101c:	movcs	r2, #0
    101e:	movcc	r2, #1
    doRecording =   ((to>=T3) || (to<T4) || ((to>=T1) && (to<T2)));
  else		// e.g. 3-4, 23-24
    doRecording = (((to>=T1) && (to<T2)) || ((to>=T3) && (to<T4)));

  uint32_t nsec=0;
  if (doRecording) // we can record
    1020:	cmp	r2, #0
    1022:	beq.n	f96 <checkDutyCycle(ACQ_Parameters_s*, short)+0x4e>
    1024:	b.n	f6c <checkDutyCycle(ACQ_Parameters_s*, short)+0x24>
      }
    }
    else // initial check during setup
    {
          // check if this is simply wakeup
          if((tt>t_rec+t_on) && (tt < t_rec+t_rep))
    1026:	uxtah	r3, r0, r3
    102a:	cmp	r4, r3
    102c:	bls.n	f86 <checkDutyCycle(ACQ_Parameters_s*, short)+0x3e>
    102e:	uxtah	r2, r0, r2
    1032:	cmp	r4, r2
    1034:	bcs.n	f86 <checkDutyCycle(ACQ_Parameters_s*, short)+0x3e>
          {
            nsec = (t_rec+t_rep-tt);
    1036:	subs	r4, r2, r4

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1038:	movs	r3, #0
    103a:	movs	r2, #10
    103c:	mov	r1, r4
    103e:	ldr	r0, [pc, #148]	; (10d4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x18c>)
    1040:	bl	9d04 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1044:	ldr	r0, [pc, #140]	; (10d4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x18c>)
    1046:	bl	9cb8 <Print::println()>
    104a:	movs	r1, #15
    104c:	ldr	r0, [pc, #144]	; (10e0 <checkDutyCycle(ACQ_Parameters_s*, short)+0x198>)
    104e:	bl	83cc <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1052:	ldr	r0, [pc, #128]	; (10d4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x18c>)
    1054:	bl	9cb8 <Print::println()>
            #endif
#if DO_DEBUG>0
            Serial.println(nsec); 
            Serial.println("Hibernate now 2");
#endif
            return nsec; 
    1058:	sxth	r0, r4
    105a:	pop	{r3, r4, r5, r6, r7, pc}
    { if(tto < T3 * 3600) 
      nsec = T3 * 3600 - tto;
    }
    //
    if((to>=T4) && (T4>T1)) // sleep over midnight to T1 //eg: to=21: T1=4; T2=9; T3=16; T4=20
    {  nsec = (T1+24) * 3600 - tto;
    105c:	add.w	r4, r7, #24
    1060:	mov.w	r3, #3600	; 0xe10
    1064:	mul.w	r1, r3, r4
    1068:	subs	r4, r1, r2
    106a:	b.n	fb6 <checkDutyCycle(ACQ_Parameters_s*, short)+0x6e>
  {
    uint32_t tto= tt%(24*3600); // seconds since midnight
    nsec=0;
    // estimate next start time
    if ((to >= T2) && (to<T3))  // sleep during the day  //eg: to=10: T1=4; T2=9; T3=16; T4=20
    { if(tto < T3 * 3600) 
    106c:	mov.w	r3, #3600	; 0xe10
    1070:	mul.w	r3, r3, r1
    1074:	cmp	r2, r3
    1076:	bcs.n	fac <checkDutyCycle(ACQ_Parameters_s*, short)+0x64>
      nsec = T3 * 3600 - tto;
    1078:	subs	r4, r3, r2
    107a:	b.n	fae <checkDutyCycle(ACQ_Parameters_s*, short)+0x66>
          { t_rec=tt; 
            acqParameters->rec=t_rec;
            recording=1; 
          } 
          // the following is for each new file
          t_start = tt; // beginning of each file
    107c:	ldr	r2, [pc, #72]	; (10c8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x180>)
      if( flag==0 )  // file is closed new file
      { 
        if(!recording) // we are at the beginning of an acquisition cycle
        {
          { t_rec=tt; 
            acqParameters->rec=t_rec;
    107e:	str	r4, [r6, #28]
            recording=1; 
    1080:	movs	r3, #1
    Serial.println(nsec); 
    Serial.println("Hibernate now 3");
#endif
    return nsec;
  }
  return 0;
    1082:	mov	r0, r5
          { t_rec=tt; 
            acqParameters->rec=t_rec;
            recording=1; 
          } 
          // the following is for each new file
          t_start = tt; // beginning of each file
    1084:	str	r4, [r2, #0]
      { 
        if(!recording) // we are at the beginning of an acquisition cycle
        {
          { t_rec=tt; 
            acqParameters->rec=t_rec;
            recording=1; 
    1086:	strh	r3, [r1, #0]
    1088:	pop	{r3, r4, r5, r6, r7, pc}
        }
        else
        // check is we end acquisition cycle
        if ((t_rep>t_on) && (tt >= t_rec + t_on))
        { // need to stop
          nsec = (t_rec + t_rep - tt);
    108a:	add	r2, r0
    108c:	subs	r4, r2, r4

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    108e:	mov	r3, r5
    1090:	movs	r2, #10
    1092:	mov	r1, r4
    1094:	ldr	r0, [pc, #60]	; (10d4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x18c>)
    1096:	bl	9d04 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    109a:	ldr	r0, [pc, #56]	; (10d4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x18c>)
    109c:	bl	9cb8 <Print::println()>
    10a0:	movs	r1, #15
    10a2:	ldr	r0, [pc, #64]	; (10e4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x19c>)
    10a4:	bl	83cc <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    10a8:	ldr	r0, [pc, #40]	; (10d4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x18c>)
    10aa:	bl	9cb8 <Print::println()>
          #endif
#if DO_DEBUG>0
          Serial.println(nsec); 
          Serial.println("Hibernate now 1");
#endif
          return nsec; 
    10ae:	sxth	r0, r4
    10b0:	pop	{r3, r4, r5, r6, r7, pc}
    10b2:	movs	r1, #17
    10b4:	ldr	r0, [pc, #48]	; (10e8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x1a0>)
    10b6:	bl	83cc <usb_serial_write>
    10ba:	ldr	r0, [pc, #24]	; (10d4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x18c>)
    10bc:	bl	9cb8 <Print::println()>
      if((flag>0) && (tt >= t_start + t_dur)) //we are indeed still recording
      { // need to close file
#if DO_DEBUG>0
        Serial.println("close acquisition");
#endif
        t_start = tt; // update start time for next file
    10c0:	str	r4, [r5, #0]
        return -1; // flag to close acquisition
    10c2:	mov.w	r0, #4294967295
    10c6:	pop	{r3, r4, r5, r6, r7, pc}
    10c8:	.word	0x2001c0f0
    10cc:	.word	0xc22e4507
    10d0:	.word	0x00015180
    10d4:	.word	0x20016f24
    10d8:	.word	0x00012e74
    10dc:	.word	0x2001c59c
    10e0:	.word	0x00012e64
    10e4:	.word	0x00012e54
    10e8:	.word	0x00012e40

000010ec <doMenu()>:
      }
    }  
}

int16_t doMenu(void)
{
    10ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
extern ACQ_Parameters_s acqParameters;
extern SNIP_Parameters_s snipParameters;

static void printAll(void)
{
  Serial.printf("%c %5d on_time\n\r",     'o',acqParameters.on);
    10f0:	ldr	r5, [pc, #724]	; (13c8 <doMenu()+0x2dc>)
      }
    }  
}

int16_t doMenu(void)
{
    10f2:	sub	sp, #12
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    10f4:	bl	8378 <usb_serial_available>
  int16_t ret=0;
  do
  {
    while(!Serial.available());
    10f8:	cmp	r0, #0
    10fa:	beq.n	10f4 <doMenu()+0x8>
        virtual int read() { return usb_serial_getchar(); }
    10fc:	bl	8300 <usb_serial_getchar>
    1100:	uxtb	r4, r0
    char c=Serial.read();
    
    if (strchr("?!xa", c))
    1102:	mov	r1, r4
    1104:	ldr	r0, [pc, #708]	; (13cc <doMenu()+0x2e0>)
    1106:	bl	c62c <strchr>
    110a:	cmp	r0, #0
    110c:	beq.n	10f4 <doMenu()+0x8>
    { switch (c)
    110e:	cmp	r4, #63	; 0x3f
    1110:	beq.n	1132 <doMenu()+0x46>
    1112:	ble.w	1274 <doMenu()+0x188>
    1116:	cmp	r4, #97	; 0x61
    1118:	beq.w	13d8 <doMenu()+0x2ec>
    111c:	cmp	r4, #120	; 0x78
    111e:	bne.n	10f4 <doMenu()+0x8>
      {
        case '?': doMenu1(); break;
        case '!': doMenu2(); break;
        case 'x': ret = Serial.parseInt(); break;
    1120:	ldr	r0, [pc, #684]	; (13d0 <doMenu()+0x2e4>)
    1122:	bl	a1b0 <Stream::parseInt()>
    1126:	sxth	r0, r0
        case 'a': printAll(); break;
      }
    }
  } while(ret==0);
    1128:	cmp	r0, #0
    112a:	beq.n	10f4 <doMenu()+0x8>
  return ret;
}
    112c:	add	sp, #12
    112e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1132:	bl	8378 <usb_serial_available>
  Serial.println();
}

static void doMenu1(void)
{ // for enquiries
    while(!Serial.available());
    1136:	cmp	r0, #0
    1138:	beq.n	1132 <doMenu()+0x46>
        virtual int read() { return usb_serial_getchar(); }
    113a:	bl	8300 <usb_serial_getchar>
    113e:	uxtb	r4, r0
    char c=Serial.read();
    
    if (strchr("oar1234ndtchwseikp", c))
    1140:	mov	r1, r4
    1142:	ldr	r0, [pc, #656]	; (13d4 <doMenu()+0x2e8>)
    1144:	bl	c62c <strchr>
    1148:	cmp	r0, #0
    114a:	beq.n	10f4 <doMenu()+0x8>
    { switch (c)
    114c:	subs	r4, #49	; 0x31
    114e:	cmp	r4, #70	; 0x46
    1150:	bhi.n	10f4 <doMenu()+0x8>
    1152:	add	r3, pc, #4	; (adr r3, 1158 <doMenu()+0x6c>)
    1154:	ldr.w	pc, [r3, r4, lsl #2]
    1158:	.word	0x00001561
    115c:	.word	0x0000156d
    1160:	.word	0x00001579
    1164:	.word	0x00001585
    1168:	.word	0x000010f5
    116c:	.word	0x000010f5
    1170:	.word	0x000010f5
    1174:	.word	0x000010f5
    1178:	.word	0x000010f5
    117c:	.word	0x000010f5
    1180:	.word	0x000010f5
    1184:	.word	0x000010f5
    1188:	.word	0x000010f5
    118c:	.word	0x000010f5
    1190:	.word	0x000010f5
    1194:	.word	0x000010f5
    1198:	.word	0x000010f5
    119c:	.word	0x000010f5
    11a0:	.word	0x000010f5
    11a4:	.word	0x000010f5
    11a8:	.word	0x000010f5
    11ac:	.word	0x000010f5
    11b0:	.word	0x000010f5
    11b4:	.word	0x000010f5
    11b8:	.word	0x000010f5
    11bc:	.word	0x000010f5
    11c0:	.word	0x000010f5
    11c4:	.word	0x000010f5
    11c8:	.word	0x000010f5
    11cc:	.word	0x000010f5
    11d0:	.word	0x000010f5
    11d4:	.word	0x000010f5
    11d8:	.word	0x000010f5
    11dc:	.word	0x000010f5
    11e0:	.word	0x000010f5
    11e4:	.word	0x000010f5
    11e8:	.word	0x000010f5
    11ec:	.word	0x000010f5
    11f0:	.word	0x000010f5
    11f4:	.word	0x000010f5
    11f8:	.word	0x000010f5
    11fc:	.word	0x000010f5
    1200:	.word	0x000010f5
    1204:	.word	0x000010f5
    1208:	.word	0x000010f5
    120c:	.word	0x000010f5
    1210:	.word	0x000010f5
    1214:	.word	0x000010f5
    1218:	.word	0x00001591
    121c:	.word	0x000010f5
    1220:	.word	0x0000159d
    1224:	.word	0x000015ab
    1228:	.word	0x000015bb
    122c:	.word	0x000010f5
    1230:	.word	0x000010f5
    1234:	.word	0x000015c9
    1238:	.word	0x000015d7
    123c:	.word	0x000010f5
    1240:	.word	0x000015e5
    1244:	.word	0x000010f5
    1248:	.word	0x000010f5
    124c:	.word	0x000015f3
    1250:	.word	0x000015ff
    1254:	.word	0x0000160b
    1258:	.word	0x000010f5
    125c:	.word	0x00001619
    1260:	.word	0x00001625
    1264:	.word	0x00001633
    1268:	.word	0x000010f5
    126c:	.word	0x000010f5
    1270:	.word	0x00001643
  {
    while(!Serial.available());
    char c=Serial.read();
    
    if (strchr("?!xa", c))
    { switch (c)
    1274:	cmp	r4, #33	; 0x21
    1276:	bne.w	10f4 <doMenu()+0x8>
static void doMenu2(void)
{ // for settings
    uint16_t year,month,day,hour,minutes,seconds;
    int T1=acqParameters.T1;
    int T2=acqParameters.T2;
    int T3=acqParameters.T3;
    127a:	add.w	r6, r5, #12
    127e:	ldmia.w	r6, {r6, r7, r8}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1282:	bl	8378 <usb_serial_available>
    //int T4=acqParameters.T4; mot used
    //
    while(!Serial.available());
    1286:	cmp	r0, #0
    1288:	beq.n	1282 <doMenu()+0x196>
        virtual int read() { return usb_serial_getchar(); }
    128a:	bl	8300 <usb_serial_getchar>
    128e:	uxtb	r4, r0
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    1290:	mov	r1, r4
    1292:	ldr	r0, [pc, #320]	; (13d4 <doMenu()+0x2e8>)
    1294:	bl	c62c <strchr>
    1298:	cmp	r0, #0
    129a:	beq.w	10f4 <doMenu()+0x8>
    { switch (c)
    129e:	subs	r4, #49	; 0x31
    12a0:	cmp	r4, #70	; 0x46
    12a2:	bhi.w	10f4 <doMenu()+0x8>
    12a6:	add	r3, pc, #4	; (adr r3, 12ac <doMenu()+0x1c0>)
    12a8:	ldr.w	pc, [r3, r4, lsl #2]
    12ac:	.word	0x00001651
    12b0:	.word	0x00001669
    12b4:	.word	0x00001709
    12b8:	.word	0x0000171f
    12bc:	.word	0x000010f5
    12c0:	.word	0x000010f5
    12c4:	.word	0x000010f5
    12c8:	.word	0x000010f5
    12cc:	.word	0x000010f5
    12d0:	.word	0x000010f5
    12d4:	.word	0x000010f5
    12d8:	.word	0x000010f5
    12dc:	.word	0x000010f5
    12e0:	.word	0x000010f5
    12e4:	.word	0x000010f5
    12e8:	.word	0x000010f5
    12ec:	.word	0x000010f5
    12f0:	.word	0x000010f5
    12f4:	.word	0x000010f5
    12f8:	.word	0x000010f5
    12fc:	.word	0x000010f5
    1300:	.word	0x000010f5
    1304:	.word	0x000010f5
    1308:	.word	0x000010f5
    130c:	.word	0x000010f5
    1310:	.word	0x000010f5
    1314:	.word	0x000010f5
    1318:	.word	0x000010f5
    131c:	.word	0x000010f5
    1320:	.word	0x000010f5
    1324:	.word	0x000010f5
    1328:	.word	0x000010f5
    132c:	.word	0x000010f5
    1330:	.word	0x000010f5
    1334:	.word	0x000010f5
    1338:	.word	0x000010f5
    133c:	.word	0x000010f5
    1340:	.word	0x000010f5
    1344:	.word	0x000010f5
    1348:	.word	0x000010f5
    134c:	.word	0x000010f5
    1350:	.word	0x000010f5
    1354:	.word	0x000010f5
    1358:	.word	0x000010f5
    135c:	.word	0x000010f5
    1360:	.word	0x000010f5
    1364:	.word	0x000010f5
    1368:	.word	0x000010f5
    136c:	.word	0x0000173d
    1370:	.word	0x000010f5
    1374:	.word	0x00001869
    1378:	.word	0x00001881
    137c:	.word	0x000018db
    1380:	.word	0x000010f5
    1384:	.word	0x000010f5
    1388:	.word	0x000018f7
    138c:	.word	0x00001759
    1390:	.word	0x000010f5
    1394:	.word	0x00001775
    1398:	.word	0x000010f5
    139c:	.word	0x000010f5
    13a0:	.word	0x00001791
    13a4:	.word	0x000017a9
    13a8:	.word	0x000017c5
    13ac:	.word	0x000010f5
    13b0:	.word	0x000017d7
    13b4:	.word	0x000017f3
    13b8:	.word	0x0000180f
    13bc:	.word	0x000010f5
    13c0:	.word	0x000010f5
    13c4:	.word	0x00001545
    13c8:	.word	0x20016d64
    13cc:	.word	0x00012e84
    13d0:	.word	0x20016f24
    13d4:	.word	0x00012e8c
extern ACQ_Parameters_s acqParameters;
extern SNIP_Parameters_s snipParameters;

static void printAll(void)
{
  Serial.printf("%c %5d on_time\n\r",     'o',acqParameters.on);
    13d8:	ldr	r3, [r5, #0]
    13da:	ldr	r1, [pc, #684]	; (1688 <doMenu()+0x59c>)
    13dc:	ldr	r0, [pc, #684]	; (168c <doMenu()+0x5a0>)
  Serial.println();
  Serial.printf("%c %s name\n\r",         'n',acqParameters.name);
  Serial.printf("%c %s date\n\r",         'd',getDate(text));
  Serial.printf("%c %s time\n\r",         't',getTime(text));
  Serial.println();
  Serial.printf("%c %5d processing type\r\n",       'c',snipParameters.iproc);
    13de:	ldr	r6, [pc, #688]	; (1690 <doMenu()+0x5a4>)
extern ACQ_Parameters_s acqParameters;
extern SNIP_Parameters_s snipParameters;

static void printAll(void)
{
  Serial.printf("%c %5d on_time\n\r",     'o',acqParameters.on);
    13e0:	movs	r2, #111	; 0x6f
    13e2:	bl	9ce8 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d acq_time\n\r",    'a',acqParameters.ad);
    13e6:	mov	r2, r4
    13e8:	ldr	r3, [r5, #4]
    13ea:	ldr	r1, [pc, #680]	; (1694 <doMenu()+0x5a8>)
    13ec:	ldr	r0, [pc, #668]	; (168c <doMenu()+0x5a0>)
    13ee:	bl	9ce8 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d rep_rate\n\r",    'r',acqParameters.ar);
    13f2:	ldr	r3, [r5, #8]
    13f4:	ldr	r1, [pc, #672]	; (1698 <doMenu()+0x5ac>)
    13f6:	ldr	r0, [pc, #660]	; (168c <doMenu()+0x5a0>)
    13f8:	movs	r2, #114	; 0x72
    13fa:	bl	9ce8 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d first_hour\n\r",  '1',acqParameters.T1);
    13fe:	ldr	r3, [r5, #12]
    1400:	ldr	r1, [pc, #664]	; (169c <doMenu()+0x5b0>)
    1402:	ldr	r0, [pc, #648]	; (168c <doMenu()+0x5a0>)
    1404:	movs	r2, #49	; 0x31
    1406:	bl	9ce8 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d second_hour\n\r", '2',acqParameters.T2);
    140a:	ldr	r3, [r5, #16]
    140c:	ldr	r1, [pc, #656]	; (16a0 <doMenu()+0x5b4>)
    140e:	ldr	r0, [pc, #636]	; (168c <doMenu()+0x5a0>)
    1410:	movs	r2, #50	; 0x32
    1412:	bl	9ce8 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d third_hour\n\r",  '3',acqParameters.T3);
    1416:	ldr	r3, [r5, #20]
    1418:	ldr	r1, [pc, #648]	; (16a4 <doMenu()+0x5b8>)
    141a:	ldr	r0, [pc, #624]	; (168c <doMenu()+0x5a0>)
    141c:	movs	r2, #51	; 0x33
    141e:	bl	9ce8 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d last_hour\n\r",   '4',acqParameters.T4);
    1422:	ldr	r3, [r5, #24]
    1424:	ldr	r1, [pc, #640]	; (16a8 <doMenu()+0x5bc>)
    1426:	ldr	r0, [pc, #612]	; (168c <doMenu()+0x5a0>)
    1428:	movs	r2, #52	; 0x34
    142a:	bl	9ce8 <Print::printf(char const*, ...)>
  Serial.println();
    142e:	ldr	r0, [pc, #604]	; (168c <doMenu()+0x5a0>)
    1430:	bl	9cb8 <Print::println()>
  Serial.printf("%c %s name\n\r",         'n',acqParameters.name);
    1434:	ldr	r3, [pc, #628]	; (16ac <doMenu()+0x5c0>)
    1436:	ldr	r1, [pc, #632]	; (16b0 <doMenu()+0x5c4>)
    1438:	ldr	r0, [pc, #592]	; (168c <doMenu()+0x5a0>)
    143a:	movs	r2, #110	; 0x6e
    143c:	bl	9ce8 <Print::printf(char const*, ...)>
  Serial.printf("%c %s date\n\r",         'd',getDate(text));
    1440:	bl	5dc <getDate(char*) [clone .constprop.34]>
    1444:	movs	r2, #100	; 0x64
    1446:	mov	r3, r0
    1448:	ldr	r1, [pc, #616]	; (16b4 <doMenu()+0x5c8>)
    144a:	ldr	r0, [pc, #576]	; (168c <doMenu()+0x5a0>)
    144c:	bl	9ce8 <Print::printf(char const*, ...)>
  Serial.printf("%c %s time\n\r",         't',getTime(text));
    1450:	bl	5a8 <getTime(char*) [clone .constprop.33]>
    1454:	movs	r2, #116	; 0x74
    1456:	mov	r3, r0
    1458:	ldr	r1, [pc, #604]	; (16b8 <doMenu()+0x5cc>)
    145a:	ldr	r0, [pc, #560]	; (168c <doMenu()+0x5a0>)
    145c:	bl	9ce8 <Print::printf(char const*, ...)>
  Serial.println();
    1460:	ldr	r0, [pc, #552]	; (168c <doMenu()+0x5a0>)
    1462:	bl	9cb8 <Print::println()>
  Serial.printf("%c %5d processing type\r\n",       'c',snipParameters.iproc);
    1466:	ldr	r3, [r6, #0]
    1468:	ldr	r1, [pc, #592]	; (16bc <doMenu()+0x5d0>)
    146a:	ldr	r0, [pc, #544]	; (168c <doMenu()+0x5a0>)
    146c:	movs	r2, #99	; 0x63
    146e:	bl	9ce8 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d threshold\r\n",             'h',snipParameters.thresh);
    1472:	ldr	r3, [r6, #4]
    1474:	ldr	r1, [pc, #584]	; (16c0 <doMenu()+0x5d4>)
    1476:	ldr	r0, [pc, #532]	; (168c <doMenu()+0x5a0>)
    1478:	movs	r2, #104	; 0x68
    147a:	bl	9ce8 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d noise window\r\n",          'w',snipParameters.win0);
    147e:	ldr	r3, [r6, #8]
    1480:	ldr	r1, [pc, #576]	; (16c4 <doMenu()+0x5d8>)
    1482:	ldr	r0, [pc, #520]	; (168c <doMenu()+0x5a0>)
    1484:	movs	r2, #119	; 0x77
    1486:	bl	9ce8 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d slow window\r\n",           's',snipParameters.win1);
    148a:	ldr	r3, [r6, #12]
    148c:	ldr	r1, [pc, #568]	; (16c8 <doMenu()+0x5dc>)
    148e:	ldr	r0, [pc, #508]	; (168c <doMenu()+0x5a0>)
    1490:	movs	r2, #115	; 0x73
    1492:	bl	9ce8 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d extraction window\r\n",     'e',snipParameters.extr);
    1496:	ldr	r3, [r6, #16]
    1498:	ldr	r1, [pc, #560]	; (16cc <doMenu()+0x5e0>)
    149a:	ldr	r0, [pc, #496]	; (168c <doMenu()+0x5a0>)
    149c:	movs	r2, #101	; 0x65
    149e:	bl	9ce8 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d inhibit window\r\n",        'i',snipParameters.inhib);
    14a2:	ldr	r3, [r6, #20]
    14a4:	ldr	r1, [pc, #552]	; (16d0 <doMenu()+0x5e4>)
    14a6:	ldr	r0, [pc, #484]	; (168c <doMenu()+0x5a0>)
    14a8:	movs	r2, #105	; 0x69
    14aa:	bl	9ce8 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d noise repetition rate\r\n", 'k',snipParameters.nrep);
    14ae:	ldr	r3, [r6, #24]
    14b0:	ldr	r1, [pc, #544]	; (16d4 <doMenu()+0x5e8>)
    14b2:	ldr	r0, [pc, #472]	; (168c <doMenu()+0x5a0>)
    14b4:	movs	r2, #107	; 0x6b
    14b6:	bl	9ce8 <Print::printf(char const*, ...)>
  Serial.printf("%c %5d pre trigger delay\r\n",     'p',snipParameters.ndel);
    14ba:	ldr	r3, [r6, #28]
    14bc:	ldr	r1, [pc, #536]	; (16d8 <doMenu()+0x5ec>)
    14be:	ldr	r0, [pc, #460]	; (168c <doMenu()+0x5a0>)
    14c0:	movs	r2, #112	; 0x70
    14c2:	bl	9ce8 <Print::printf(char const*, ...)>
  //
  Serial.println();
    14c6:	ldr	r0, [pc, #452]	; (168c <doMenu()+0x5a0>)
    14c8:	bl	9cb8 <Print::println()>
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    14cc:	movs	r1, #23
    14ce:	ldr	r0, [pc, #524]	; (16dc <doMenu()+0x5f0>)
    14d0:	bl	83cc <usb_serial_write>
    14d4:	ldr	r0, [pc, #436]	; (168c <doMenu()+0x5a0>)
    14d6:	bl	9cb8 <Print::println()>
    14da:	movs	r1, #64	; 0x40
    14dc:	ldr	r0, [pc, #512]	; (16e0 <doMenu()+0x5f4>)
    14de:	bl	83cc <usb_serial_write>
    14e2:	ldr	r0, [pc, #424]	; (168c <doMenu()+0x5a0>)
    14e4:	bl	9cb8 <Print::println()>
    14e8:	movs	r1, #32
    14ea:	ldr	r0, [pc, #504]	; (16e4 <doMenu()+0x5f8>)
    14ec:	bl	83cc <usb_serial_write>
    14f0:	ldr	r0, [pc, #408]	; (168c <doMenu()+0x5a0>)
    14f2:	bl	9cb8 <Print::println()>
    14f6:	movs	r1, #88	; 0x58
    14f8:	ldr	r0, [pc, #492]	; (16e8 <doMenu()+0x5fc>)
    14fa:	bl	83cc <usb_serial_write>
    14fe:	ldr	r0, [pc, #396]	; (168c <doMenu()+0x5a0>)
    1500:	bl	9cb8 <Print::println()>
    1504:	movs	r1, #38	; 0x26
    1506:	ldr	r0, [pc, #484]	; (16ec <doMenu()+0x600>)
    1508:	bl	83cc <usb_serial_write>
    150c:	ldr	r0, [pc, #380]	; (168c <doMenu()+0x5a0>)
    150e:	bl	9cb8 <Print::println()>
    1512:	movs	r1, #69	; 0x45
    1514:	ldr	r0, [pc, #472]	; (16f0 <doMenu()+0x604>)
    1516:	bl	83cc <usb_serial_write>
    151a:	ldr	r0, [pc, #368]	; (168c <doMenu()+0x5a0>)
    151c:	bl	9cb8 <Print::println()>
    1520:	movs	r1, #50	; 0x32
    1522:	ldr	r0, [pc, #464]	; (16f4 <doMenu()+0x608>)
    1524:	bl	83cc <usb_serial_write>
    1528:	ldr	r0, [pc, #352]	; (168c <doMenu()+0x5a0>)
    152a:	bl	9cb8 <Print::println()>
    152e:	movs	r1, #43	; 0x2b
    1530:	ldr	r0, [pc, #452]	; (16f8 <doMenu()+0x60c>)
    1532:	bl	83cc <usb_serial_write>
    1536:	ldr	r0, [pc, #340]	; (168c <doMenu()+0x5a0>)
    1538:	bl	9cb8 <Print::println()>
  Serial.println("exter '!cval' to read value c=(0,a,r,1,2,3,4,n,d,t,c,h,w,s,m,i,k,p) and val is new value");
  Serial.println("  e.g.: !110 will set first hour to 10");
  Serial.println("exter 'xval' to exit menu (x is delay in minutes, -1 means immediate)");
  Serial.println("  e.g.: x10 will exit and hibernate for 10 minutes");
  Serial.println("        x-1 with exit and start immediately");
  Serial.println();
    153c:	ldr	r0, [pc, #332]	; (168c <doMenu()+0x5a0>)
    153e:	bl	9cb8 <Print::println()>
    1542:	b.n	10f4 <doMenu()+0x8>
                  setTime(hour,minutes,seconds);
                  break;
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1544:	ldr	r0, [pc, #324]	; (168c <doMenu()+0x5a0>)
    1546:	bl	a1b0 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    154a:	cmp	r0, #0
    154c:	blt.w	1976 <doMenu()+0x88a>
    if(val>maxVal) val=maxVal;
    1550:	cmp.w	r0, #131072	; 0x20000
    1554:	it	ge
    1556:	movge.w	r0, #131072	; 0x20000
                  setTime(hour,minutes,seconds);
                  break;
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    155a:	ldr	r3, [pc, #308]	; (1690 <doMenu()+0x5a4>)
    155c:	str	r0, [r3, #8]
    155e:	b.n	10f4 <doMenu()+0x8>
    { switch (c)
      {
        case 'o': Serial.printf("%02d\r\n",acqParameters.on); break;
        case 'a': Serial.printf("%02d\r\n",acqParameters.ad); break;
        case 'r': Serial.printf("%02d\r\n",acqParameters.ar); break;
        case '1': Serial.printf("%02d\r\n",acqParameters.T1);break;
    1560:	ldr	r2, [r5, #12]
    1562:	ldr	r1, [pc, #408]	; (16fc <doMenu()+0x610>)
    1564:	ldr	r0, [pc, #292]	; (168c <doMenu()+0x5a0>)
    1566:	bl	9ce8 <Print::printf(char const*, ...)>
    156a:	b.n	10f4 <doMenu()+0x8>
        case '2': Serial.printf("%02d\r\n",acqParameters.T2);break;
    156c:	ldr	r2, [r5, #16]
    156e:	ldr	r1, [pc, #396]	; (16fc <doMenu()+0x610>)
    1570:	ldr	r0, [pc, #280]	; (168c <doMenu()+0x5a0>)
    1572:	bl	9ce8 <Print::printf(char const*, ...)>
    1576:	b.n	10f4 <doMenu()+0x8>
        case '3': Serial.printf("%02d\r\n",acqParameters.T3);break;
    1578:	ldr	r2, [r5, #20]
    157a:	ldr	r1, [pc, #384]	; (16fc <doMenu()+0x610>)
    157c:	ldr	r0, [pc, #268]	; (168c <doMenu()+0x5a0>)
    157e:	bl	9ce8 <Print::printf(char const*, ...)>
    1582:	b.n	10f4 <doMenu()+0x8>
        case '4': Serial.printf("%02d\r\n",acqParameters.T4);break;
    1584:	ldr	r2, [r5, #24]
    1586:	ldr	r1, [pc, #372]	; (16fc <doMenu()+0x610>)
    1588:	ldr	r0, [pc, #256]	; (168c <doMenu()+0x5a0>)
    158a:	bl	9ce8 <Print::printf(char const*, ...)>
    158e:	b.n	10f4 <doMenu()+0x8>
    
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      {
        case 'o': Serial.printf("%02d\r\n",acqParameters.on); break;
        case 'a': Serial.printf("%02d\r\n",acqParameters.ad); break;
    1590:	ldr	r2, [r5, #4]
    1592:	ldr	r1, [pc, #360]	; (16fc <doMenu()+0x610>)
    1594:	ldr	r0, [pc, #244]	; (168c <doMenu()+0x5a0>)
    1596:	bl	9ce8 <Print::printf(char const*, ...)>
    159a:	b.n	10f4 <doMenu()+0x8>
        case 'n': Serial.printf("%s\r\n",acqParameters.name);break; 
        
        case 'd': Serial.printf("%s\r\n",getDate(text));break;
        case 't': Serial.printf("%s\r\n",getTime(text));break;
        
        case 'c': Serial.printf("%04d\r\n",snipParameters.iproc);break;
    159c:	ldr	r3, [pc, #240]	; (1690 <doMenu()+0x5a4>)
    159e:	ldr	r1, [pc, #352]	; (1700 <doMenu()+0x614>)
    15a0:	ldr	r2, [r3, #0]
    15a2:	ldr	r0, [pc, #232]	; (168c <doMenu()+0x5a0>)
    15a4:	bl	9ce8 <Print::printf(char const*, ...)>
    15a8:	b.n	10f4 <doMenu()+0x8>
        case '2': Serial.printf("%02d\r\n",acqParameters.T2);break;
        case '3': Serial.printf("%02d\r\n",acqParameters.T3);break;
        case '4': Serial.printf("%02d\r\n",acqParameters.T4);break;
        case 'n': Serial.printf("%s\r\n",acqParameters.name);break; 
        
        case 'd': Serial.printf("%s\r\n",getDate(text));break;
    15aa:	bl	5dc <getDate(char*) [clone .constprop.34]>
    15ae:	ldr	r1, [pc, #340]	; (1704 <doMenu()+0x618>)
    15b0:	mov	r2, r0
    15b2:	ldr	r0, [pc, #216]	; (168c <doMenu()+0x5a0>)
    15b4:	bl	9ce8 <Print::printf(char const*, ...)>
    15b8:	b.n	10f4 <doMenu()+0x8>
        
        case 'c': Serial.printf("%04d\r\n",snipParameters.iproc);break;
        case 'h': Serial.printf("%04d\r\n",snipParameters.thresh);break;
        case 'w': Serial.printf("%04d\r\n",snipParameters.win0);break;
        case 's': Serial.printf("%04d\r\n",snipParameters.win1);break;
        case 'e': Serial.printf("%04d\r\n",snipParameters.extr);break;
    15ba:	ldr	r3, [pc, #212]	; (1690 <doMenu()+0x5a4>)
    15bc:	ldr	r1, [pc, #320]	; (1700 <doMenu()+0x614>)
    15be:	ldr	r2, [r3, #16]
    15c0:	ldr	r0, [pc, #200]	; (168c <doMenu()+0x5a0>)
    15c2:	bl	9ce8 <Print::printf(char const*, ...)>
    15c6:	b.n	10f4 <doMenu()+0x8>
        
        case 'd': Serial.printf("%s\r\n",getDate(text));break;
        case 't': Serial.printf("%s\r\n",getTime(text));break;
        
        case 'c': Serial.printf("%04d\r\n",snipParameters.iproc);break;
        case 'h': Serial.printf("%04d\r\n",snipParameters.thresh);break;
    15c8:	ldr	r3, [pc, #196]	; (1690 <doMenu()+0x5a4>)
    15ca:	ldr	r1, [pc, #308]	; (1700 <doMenu()+0x614>)
    15cc:	ldr	r2, [r3, #4]
    15ce:	ldr	r0, [pc, #188]	; (168c <doMenu()+0x5a0>)
    15d0:	bl	9ce8 <Print::printf(char const*, ...)>
    15d4:	b.n	10f4 <doMenu()+0x8>
        case 'w': Serial.printf("%04d\r\n",snipParameters.win0);break;
        case 's': Serial.printf("%04d\r\n",snipParameters.win1);break;
        case 'e': Serial.printf("%04d\r\n",snipParameters.extr);break;
        case 'i': Serial.printf("%04d\r\n",snipParameters.inhib);break;
    15d6:	ldr	r3, [pc, #184]	; (1690 <doMenu()+0x5a4>)
    15d8:	ldr	r1, [pc, #292]	; (1700 <doMenu()+0x614>)
    15da:	ldr	r2, [r3, #20]
    15dc:	ldr	r0, [pc, #172]	; (168c <doMenu()+0x5a0>)
    15de:	bl	9ce8 <Print::printf(char const*, ...)>
    15e2:	b.n	10f4 <doMenu()+0x8>
        case 'k': Serial.printf("%04d\r\n",snipParameters.nrep);break;
    15e4:	ldr	r3, [pc, #168]	; (1690 <doMenu()+0x5a4>)
    15e6:	ldr	r1, [pc, #280]	; (1700 <doMenu()+0x614>)
    15e8:	ldr	r2, [r3, #24]
    15ea:	ldr	r0, [pc, #160]	; (168c <doMenu()+0x5a0>)
    15ec:	bl	9ce8 <Print::printf(char const*, ...)>
    15f0:	b.n	10f4 <doMenu()+0x8>
        case 'r': Serial.printf("%02d\r\n",acqParameters.ar); break;
        case '1': Serial.printf("%02d\r\n",acqParameters.T1);break;
        case '2': Serial.printf("%02d\r\n",acqParameters.T2);break;
        case '3': Serial.printf("%02d\r\n",acqParameters.T3);break;
        case '4': Serial.printf("%02d\r\n",acqParameters.T4);break;
        case 'n': Serial.printf("%s\r\n",acqParameters.name);break; 
    15f2:	ldr	r2, [pc, #184]	; (16ac <doMenu()+0x5c0>)
    15f4:	ldr	r1, [pc, #268]	; (1704 <doMenu()+0x618>)
    15f6:	ldr	r0, [pc, #148]	; (168c <doMenu()+0x5a0>)
    15f8:	bl	9ce8 <Print::printf(char const*, ...)>
    15fc:	b.n	10f4 <doMenu()+0x8>
    char c=Serial.read();
    
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      {
        case 'o': Serial.printf("%02d\r\n",acqParameters.on); break;
    15fe:	ldr	r2, [r5, #0]
    1600:	ldr	r1, [pc, #248]	; (16fc <doMenu()+0x610>)
    1602:	ldr	r0, [pc, #136]	; (168c <doMenu()+0x5a0>)
    1604:	bl	9ce8 <Print::printf(char const*, ...)>
    1608:	b.n	10f4 <doMenu()+0x8>
        case 'w': Serial.printf("%04d\r\n",snipParameters.win0);break;
        case 's': Serial.printf("%04d\r\n",snipParameters.win1);break;
        case 'e': Serial.printf("%04d\r\n",snipParameters.extr);break;
        case 'i': Serial.printf("%04d\r\n",snipParameters.inhib);break;
        case 'k': Serial.printf("%04d\r\n",snipParameters.nrep);break;
        case 'p': Serial.printf("%04d\r\n",snipParameters.ndel);break;
    160a:	ldr	r3, [pc, #132]	; (1690 <doMenu()+0x5a4>)
    160c:	ldr	r1, [pc, #240]	; (1700 <doMenu()+0x614>)
    160e:	ldr	r2, [r3, #28]
    1610:	ldr	r0, [pc, #120]	; (168c <doMenu()+0x5a0>)
    1612:	bl	9ce8 <Print::printf(char const*, ...)>
    1616:	b.n	10f4 <doMenu()+0x8>
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      {
        case 'o': Serial.printf("%02d\r\n",acqParameters.on); break;
        case 'a': Serial.printf("%02d\r\n",acqParameters.ad); break;
        case 'r': Serial.printf("%02d\r\n",acqParameters.ar); break;
    1618:	ldr	r2, [r5, #8]
    161a:	ldr	r1, [pc, #224]	; (16fc <doMenu()+0x610>)
    161c:	ldr	r0, [pc, #108]	; (168c <doMenu()+0x5a0>)
    161e:	bl	9ce8 <Print::printf(char const*, ...)>
    1622:	b.n	10f4 <doMenu()+0x8>
        case 't': Serial.printf("%s\r\n",getTime(text));break;
        
        case 'c': Serial.printf("%04d\r\n",snipParameters.iproc);break;
        case 'h': Serial.printf("%04d\r\n",snipParameters.thresh);break;
        case 'w': Serial.printf("%04d\r\n",snipParameters.win0);break;
        case 's': Serial.printf("%04d\r\n",snipParameters.win1);break;
    1624:	ldr	r3, [pc, #104]	; (1690 <doMenu()+0x5a4>)
    1626:	ldr	r1, [pc, #216]	; (1700 <doMenu()+0x614>)
    1628:	ldr	r2, [r3, #12]
    162a:	ldr	r0, [pc, #96]	; (168c <doMenu()+0x5a0>)
    162c:	bl	9ce8 <Print::printf(char const*, ...)>
    1630:	b.n	10f4 <doMenu()+0x8>
        case '3': Serial.printf("%02d\r\n",acqParameters.T3);break;
        case '4': Serial.printf("%02d\r\n",acqParameters.T4);break;
        case 'n': Serial.printf("%s\r\n",acqParameters.name);break; 
        
        case 'd': Serial.printf("%s\r\n",getDate(text));break;
        case 't': Serial.printf("%s\r\n",getTime(text));break;
    1632:	bl	5a8 <getTime(char*) [clone .constprop.33]>
    1636:	ldr	r1, [pc, #204]	; (1704 <doMenu()+0x618>)
    1638:	mov	r2, r0
    163a:	ldr	r0, [pc, #80]	; (168c <doMenu()+0x5a0>)
    163c:	bl	9ce8 <Print::printf(char const*, ...)>
    1640:	b.n	10f4 <doMenu()+0x8>
        
        case 'c': Serial.printf("%04d\r\n",snipParameters.iproc);break;
        case 'h': Serial.printf("%04d\r\n",snipParameters.thresh);break;
        case 'w': Serial.printf("%04d\r\n",snipParameters.win0);break;
    1642:	ldr	r3, [pc, #76]	; (1690 <doMenu()+0x5a4>)
    1644:	ldr	r1, [pc, #184]	; (1700 <doMenu()+0x614>)
    1646:	ldr	r2, [r3, #8]
    1648:	ldr	r0, [pc, #64]	; (168c <doMenu()+0x5a0>)
    164a:	bl	9ce8 <Print::printf(char const*, ...)>
    164e:	b.n	10f4 <doMenu()+0x8>
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
    1650:	ldr	r0, [pc, #56]	; (168c <doMenu()+0x5a0>)
    1652:	bl	a1b0 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1656:	cmp	r0, #0
    1658:	blt.w	1972 <doMenu()+0x886>
    165c:	cmp	r0, #24
    165e:	mov	r3, r0
    1660:	it	ge
    1662:	movge	r3, #24
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
    1664:	str	r3, [r5, #12]
    1666:	b.n	10f4 <doMenu()+0x8>
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
    1668:	ldr	r0, [pc, #32]	; (168c <doMenu()+0x5a0>)
    166a:	bl	a1b0 <Stream::parseInt()>
    }
}
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
    166e:	cmp	r6, #23
    1670:	bgt.w	1922 <doMenu()+0x836>
  {
    if(val<minVal) val=minVal;
    1674:	cmp	r6, r0
    1676:	bgt.n	1684 <doMenu()+0x598>
    if(val>maxVal) val=maxVal;
    1678:	cmp	r0, #24
    167a:	it	gt
    167c:	movgt	r0, #24
    167e:	bgt.w	1928 <doMenu()+0x83c>
    1682:	mov	r6, r0
    1684:	mov	r0, r6
    1686:	b.n	1928 <doMenu()+0x83c>
    1688:	.word	0x00012eb0
    168c:	.word	0x20016f24
    1690:	.word	0x20016d44
    1694:	.word	0x00012ec4
    1698:	.word	0x00012ed8
    169c:	.word	0x00012eec
    16a0:	.word	0x00012f00
    16a4:	.word	0x00012f18
    16a8:	.word	0x00012f2c
    16ac:	.word	0x20016d84
    16b0:	.word	0x00012f40
    16b4:	.word	0x00012f50
    16b8:	.word	0x00012f60
    16bc:	.word	0x00012f70
    16c0:	.word	0x00012f8c
    16c4:	.word	0x00012fa0
    16c8:	.word	0x00012fb8
    16cc:	.word	0x00012fd0
    16d0:	.word	0x00012fec
    16d4:	.word	0x00013004
    16d8:	.word	0x00013024
    16dc:	.word	0x00013040
    16e0:	.word	0x00013058
    16e4:	.word	0x0001309c
    16e8:	.word	0x000130c0
    16ec:	.word	0x0001311c
    16f0:	.word	0x00013144
    16f4:	.word	0x0001318c
    16f8:	.word	0x000131c0
    16fc:	.word	0x00012ea0
    1700:	.word	0x00012ea8
    1704:	.word	0x00012df8
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
    1708:	ldr	r0, [pc, #672]	; (19ac <doMenu()+0x8c0>)
    170a:	bl	a1b0 <Stream::parseInt()>
    }
}
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
    170e:	cmp	r7, #23
    1710:	bgt.w	1918 <doMenu()+0x82c>
  {
    if(val<minVal) val=minVal;
    1714:	cmp	r7, r0
    1716:	ble.w	1956 <doMenu()+0x86a>
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
    171a:	str	r7, [r5, #20]
    171c:	b.n	10f4 <doMenu()+0x8>
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
    171e:	ldr	r0, [pc, #652]	; (19ac <doMenu()+0x8c0>)
    1720:	bl	a1b0 <Stream::parseInt()>
  }
  return val; 
}
int boundaryCheck2(int val, int minVal, int maxVal, int modVal)
{
  if(minVal < maxVal) // standard case
    1724:	cmp	r6, r8
static void doMenu2(void)
{ // for settings
    uint16_t year,month,day,hour,minutes,seconds;
    int T1=acqParameters.T1;
    int T2=acqParameters.T2;
    int T3=acqParameters.T3;
    1726:	mov	r4, r8
  }
  return val; 
}
int boundaryCheck2(int val, int minVal, int maxVal, int modVal)
{
  if(minVal < maxVal) // standard case
    1728:	ble.w	192e <doMenu()+0x842>
  {
    if(val<minVal) val=minVal;
    172c:	cmp	r8, r0
    172e:	bgt.n	1738 <doMenu()+0x64c>
    if(val>maxVal) val=maxVal;
    1730:	cmp	r6, r0
    1732:	blt.w	1950 <doMenu()+0x864>
    1736:	mov	r4, r0
  }
  else // wrap around when checking hours
  {
    if(val<0) val=0;
    if(val>modVal) val=modVal;
    1738:	mov	r6, r4
    173a:	b.n	1950 <doMenu()+0x864>
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    173c:	ldr	r0, [pc, #620]	; (19ac <doMenu()+0x8c0>)
    173e:	bl	a1b0 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1742:	cmp	r0, #0
    1744:	blt.w	196e <doMenu()+0x882>
    1748:	cmp.w	r0, #131072	; 0x20000
    174c:	mov	r3, r0
    174e:	it	ge
    1750:	movge.w	r3, #131072	; 0x20000
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1754:	str	r3, [r5, #4]
    1756:	b.n	10f4 <doMenu()+0x8>
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'e': snipParameters.extr   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'i': snipParameters.inhib  = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1758:	ldr	r0, [pc, #592]	; (19ac <doMenu()+0x8c0>)
    175a:	bl	a1b0 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    175e:	cmp	r0, #0
    1760:	blt.w	19a8 <doMenu()+0x8bc>
    if(val>maxVal) val=maxVal;
    1764:	cmp.w	r0, #131072	; 0x20000
    1768:	it	ge
    176a:	movge.w	r0, #131072	; 0x20000
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'e': snipParameters.extr   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'i': snipParameters.inhib  = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    176e:	ldr	r3, [pc, #576]	; (19b0 <doMenu()+0x8c4>)
    1770:	str	r0, [r3, #20]
    1772:	b.n	10f4 <doMenu()+0x8>
        case 'k': snipParameters.nrep   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1774:	ldr	r0, [pc, #564]	; (19ac <doMenu()+0x8c0>)
    1776:	bl	a1b0 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    177a:	cmp	r0, #0
    177c:	blt.w	19a4 <doMenu()+0x8b8>
    if(val>maxVal) val=maxVal;
    1780:	cmp.w	r0, #131072	; 0x20000
    1784:	it	ge
    1786:	movge.w	r0, #131072	; 0x20000
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'e': snipParameters.extr   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'i': snipParameters.inhib  = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'k': snipParameters.nrep   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    178a:	ldr	r3, [pc, #548]	; (19b0 <doMenu()+0x8c4>)
    178c:	str	r0, [r3, #24]
    178e:	b.n	10f4 <doMenu()+0x8>
    1790:	ldr	r4, [pc, #544]	; (19b4 <doMenu()+0x8c8>)
    1792:	adds	r6, r4, #4
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    1794:	bl	8300 <usb_serial_getchar>
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
    1798:	strb.w	r0, [r4, #1]!
    179c:	cmp	r4, r6
    179e:	bne.n	1794 <doMenu()+0x6a8>
                  acqParameters.name[4]=0; break;
    17a0:	movs	r3, #0
    17a2:	strb.w	r3, [r5, #36]	; 0x24
    17a6:	b.n	10f4 <doMenu()+0x8>
    while(!Serial.available());
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    17a8:	ldr	r0, [pc, #512]	; (19ac <doMenu()+0x8c0>)
    17aa:	bl	a1b0 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    17ae:	cmp	r0, #0
    17b0:	blt.w	19a0 <doMenu()+0x8b4>
    17b4:	cmp.w	r0, #131072	; 0x20000
    17b8:	mov	r3, r0
    17ba:	it	ge
    17bc:	movge.w	r3, #131072	; 0x20000
    while(!Serial.available());
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    17c0:	str	r3, [r5, #0]
    17c2:	b.n	10f4 <doMenu()+0x8>
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'e': snipParameters.extr   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'i': snipParameters.inhib  = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'k': snipParameters.nrep   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'p': snipParameters.ndel   = boundaryCheck(Serial.parseInt(),0,MDEL); break;
    17c4:	ldr	r0, [pc, #484]	; (19ac <doMenu()+0x8c0>)
    17c6:	bl	a1b0 <Stream::parseInt()>
    17ca:	ldr	r3, [pc, #484]	; (19b0 <doMenu()+0x8c4>)
    17cc:	cmp	r0, #24
    17ce:	it	ge
    17d0:	movge	r0, #24
    17d2:	str	r0, [r3, #28]
    17d4:	b.n	10f4 <doMenu()+0x8>
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    17d6:	ldr	r0, [pc, #468]	; (19ac <doMenu()+0x8c0>)
    17d8:	bl	a1b0 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    17dc:	cmp	r0, #0
    17de:	blt.w	199c <doMenu()+0x8b0>
    17e2:	cmp.w	r0, #131072	; 0x20000
    17e6:	mov	r3, r0
    17e8:	it	ge
    17ea:	movge.w	r3, #131072	; 0x20000
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    17ee:	str	r3, [r5, #8]
    17f0:	b.n	10f4 <doMenu()+0x8>
                  break;
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    17f2:	ldr	r0, [pc, #440]	; (19ac <doMenu()+0x8c0>)
    17f4:	bl	a1b0 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    17f8:	cmp	r0, #0
    17fa:	blt.w	1998 <doMenu()+0x8ac>
    if(val>maxVal) val=maxVal;
    17fe:	cmp.w	r0, #131072	; 0x20000
    1802:	it	ge
    1804:	movge.w	r0, #131072	; 0x20000
                  break;
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1808:	ldr	r3, [pc, #420]	; (19b0 <doMenu()+0x8c4>)
    180a:	str	r0, [r3, #12]
    180c:	b.n	10f4 <doMenu()+0x8>
                  month=  boundaryCheck(Serial.parseInt(),1,12);
                  day=    boundaryCheck(Serial.parseInt(),1,31);
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour=     boundaryCheck(Serial.parseInt(),0,23);
    180e:	ldr	r0, [pc, #412]	; (19ac <doMenu()+0x8c0>)
    1810:	bl	a1b0 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1814:	subs	r4, r0, #0
    1816:	blt.w	1994 <doMenu()+0x8a8>
    if(val>maxVal) val=maxVal;
    181a:	cmp	r4, #23
    181c:	it	ge
    181e:	movge	r4, #23
                  day=    boundaryCheck(Serial.parseInt(),1,31);
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour=     boundaryCheck(Serial.parseInt(),0,23);
                  minutes=  boundaryCheck(Serial.parseInt(),0,59);
    1820:	ldr	r0, [pc, #392]	; (19ac <doMenu()+0x8c0>)
    1822:	bl	a1b0 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1826:	subs	r6, r0, #0
    1828:	blt.w	1990 <doMenu()+0x8a4>
    if(val>maxVal) val=maxVal;
    182c:	cmp	r6, #59	; 0x3b
    182e:	it	ge
    1830:	movge	r6, #59	; 0x3b
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour=     boundaryCheck(Serial.parseInt(),0,23);
                  minutes=  boundaryCheck(Serial.parseInt(),0,59);
                  seconds=  boundaryCheck(Serial.parseInt(),0,59);
    1832:	ldr	r0, [pc, #376]	; (19ac <doMenu()+0x8c0>)
    1834:	bl	a1b0 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1838:	subs	r7, r0, #0
    183a:	blt.w	198c <doMenu()+0x8a0>
    if(val>maxVal) val=maxVal;
    183e:	cmp	r7, #59	; 0x3b
    1840:	it	ge
    1842:	movge	r7, #59	; 0x3b
    setTime(hour(),minute(),second(),day, month, year);
}

static void setTime(uint16_t hour, uint16_t minutes, uint16_t seconds)
{
    setTime(hour,minutes,seconds,day(),month(),year());
    1844:	bl	2a04 <day()>
    1848:	mov	r8, r0
    184a:	bl	2a24 <month()>
    184e:	mov	r9, r0
    1850:	bl	2a44 <year()>
    1854:	str.w	r9, [sp]
    1858:	str	r0, [sp, #4]
    185a:	mov	r3, r8
    185c:	mov	r2, r7
    185e:	mov	r1, r6
    1860:	mov	r0, r4
    1862:	bl	2a68 <setTime(int, int, int, int, int, int)>
    1866:	b.n	10f4 <doMenu()+0x8>
                  minutes=  boundaryCheck(Serial.parseInt(),0,59);
                  seconds=  boundaryCheck(Serial.parseInt(),0,59);
                  setTime(hour,minutes,seconds);
                  break;
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
    1868:	ldr	r0, [pc, #320]	; (19ac <doMenu()+0x8c0>)
    186a:	bl	a1b0 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    186e:	cmp	r0, #0
    1870:	blt.w	1988 <doMenu()+0x89c>
    if(val>maxVal) val=maxVal;
    1874:	cmp	r0, #1
    1876:	it	ge
    1878:	movge	r0, #1
                  minutes=  boundaryCheck(Serial.parseInt(),0,59);
                  seconds=  boundaryCheck(Serial.parseInt(),0,59);
                  setTime(hour,minutes,seconds);
                  break;
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
    187a:	ldr	r3, [pc, #308]	; (19b0 <doMenu()+0x8c4>)
    187c:	str	r0, [r3, #0]
    187e:	b.n	10f4 <doMenu()+0x8>
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
                  acqParameters.name[4]=0; break;
        case 'd':     
                  year=   boundaryCheck(Serial.parseInt(),2000,3000);
    1880:	ldr	r0, [pc, #296]	; (19ac <doMenu()+0x8c0>)
    1882:	bl	a1b0 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1886:	cmp.w	r0, #2000	; 0x7d0
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
                  acqParameters.name[4]=0; break;
        case 'd':     
                  year=   boundaryCheck(Serial.parseInt(),2000,3000);
    188a:	mov	r4, r0
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    188c:	blt.n	1912 <doMenu()+0x826>
    if(val>maxVal) val=maxVal;
    188e:	movw	r3, #3000	; 0xbb8
    1892:	cmp	r0, r3
    1894:	it	ge
    1896:	movge	r4, r3
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
                  acqParameters.name[4]=0; break;
        case 'd':     
                  year=   boundaryCheck(Serial.parseInt(),2000,3000);
                  month=  boundaryCheck(Serial.parseInt(),1,12);
    1898:	ldr	r0, [pc, #272]	; (19ac <doMenu()+0x8c0>)
    189a:	bl	a1b0 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    189e:	subs	r7, r0, #0
    18a0:	ble.n	197a <doMenu()+0x88e>
    if(val>maxVal) val=maxVal;
    18a2:	cmp	r7, #12
    18a4:	it	ge
    18a6:	movge	r7, #12
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
                  acqParameters.name[4]=0; break;
        case 'd':     
                  year=   boundaryCheck(Serial.parseInt(),2000,3000);
                  month=  boundaryCheck(Serial.parseInt(),1,12);
                  day=    boundaryCheck(Serial.parseInt(),1,31);
    18a8:	ldr	r0, [pc, #256]	; (19ac <doMenu()+0x8c0>)
    18aa:	bl	a1b0 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    18ae:	subs	r6, r0, #0
    18b0:	ble.n	196a <doMenu()+0x87e>
    if(val>maxVal) val=maxVal;
    18b2:	cmp	r6, #31
    18b4:	it	ge
    18b6:	movge	r6, #31
    return text;
}

static void setDate(uint16_t year, uint16_t month, uint16_t day)
{
    setTime(hour(),minute(),second(),day, month, year);
    18b8:	bl	29a4 <hour()>
    18bc:	mov	r8, r0
    18be:	bl	29c4 <minute()>
    18c2:	mov	r9, r0
    18c4:	bl	29e4 <second()>
    18c8:	mov	r1, r9
    18ca:	mov	r2, r0
    18cc:	str	r4, [sp, #4]
    18ce:	mov	r0, r8
    18d0:	str	r7, [sp, #0]
    18d2:	mov	r3, r6
    18d4:	bl	2a68 <setTime(int, int, int, int, int, int)>
    18d8:	b.n	10f4 <doMenu()+0x8>
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'e': snipParameters.extr   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    18da:	ldr	r0, [pc, #208]	; (19ac <doMenu()+0x8c0>)
    18dc:	bl	a1b0 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    18e0:	cmp	r0, #0
    18e2:	blt.n	1984 <doMenu()+0x898>
    if(val>maxVal) val=maxVal;
    18e4:	cmp.w	r0, #131072	; 0x20000
    18e8:	it	ge
    18ea:	movge.w	r0, #131072	; 0x20000
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'e': snipParameters.extr   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    18ee:	ldr	r3, [pc, #192]	; (19b0 <doMenu()+0x8c4>)
    18f0:	str	r0, [r3, #16]
    18f2:	b.w	10f4 <doMenu()+0x8>
                  seconds=  boundaryCheck(Serial.parseInt(),0,59);
                  setTime(hour,minutes,seconds);
                  break;
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
    18f6:	ldr	r0, [pc, #180]	; (19ac <doMenu()+0x8c0>)
    18f8:	bl	a1b0 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    18fc:	adds	r3, r0, #1
    18fe:	blt.n	197e <doMenu()+0x892>
    if(val>maxVal) val=maxVal;
    1900:	cmp.w	r0, #131072	; 0x20000
    1904:	it	ge
    1906:	movge.w	r0, #131072	; 0x20000
                  seconds=  boundaryCheck(Serial.parseInt(),0,59);
                  setTime(hour,minutes,seconds);
                  break;
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
    190a:	ldr	r3, [pc, #164]	; (19b0 <doMenu()+0x8c4>)
    190c:	str	r0, [r3, #4]
    190e:	b.w	10f4 <doMenu()+0x8>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1912:	mov.w	r4, #2000	; 0x7d0
    1916:	b.n	1898 <doMenu()+0x7ac>
    if(val>maxVal) val=maxVal;
  }
  else // wrap around when checking hours
  {
    if((val>maxVal) && (val<minVal)) val=maxVal;
    1918:	cmp	r0, #24
    191a:	it	ge
    191c:	movge	r0, #24
    191e:	mov	r7, r0
    1920:	b.n	171a <doMenu()+0x62e>
    1922:	cmp	r0, #24
    1924:	it	ge
    1926:	movge	r0, #24
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
    1928:	str	r0, [r5, #16]
    192a:	b.w	10f4 <doMenu()+0x8>
    if(val<minVal) val=minVal;
    if(val>maxVal) val=maxVal;
  }
  else // wrap around when checking hours
  {
    if(val<0) val=0;
    192e:	cmp	r0, #0
    1930:	blt.n	1962 <doMenu()+0x876>
    if(val>modVal) val=modVal;
    1932:	cmp	r0, #24
    1934:	it	ge
    1936:	movge	r0, #24
    // shift data to next good value
    if((val>maxVal) && (val<minVal))
    1938:	cmp	r6, r0
    193a:	bge.n	1966 <doMenu()+0x87a>
    193c:	cmp	r8, r0
    193e:	ble.n	1966 <doMenu()+0x87a>
    { if(val>(minVal+maxVal)/2) val = minVal; else val=maxVal;
    1940:	add.w	r3, r6, r8
    1944:	add.w	r3, r3, r3, lsr #31
    1948:	cmp.w	r0, r3, asr #1
    194c:	it	gt
    194e:	movgt	r6, r8
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
    1950:	str	r6, [r5, #24]
    1952:	b.w	10f4 <doMenu()+0x8>
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    if(val>maxVal) val=maxVal;
    1956:	cmp	r0, #24
    1958:	it	gt
    195a:	movgt	r7, #24
    195c:	bgt.w	171a <doMenu()+0x62e>
    1960:	b.n	191e <doMenu()+0x832>
    if(val<minVal) val=minVal;
    if(val>maxVal) val=maxVal;
  }
  else // wrap around when checking hours
  {
    if(val<0) val=0;
    1962:	movs	r0, #0
    1964:	b.n	1938 <doMenu()+0x84c>
    if(val>modVal) val=modVal;
    // shift data to next good value
    if((val>maxVal) && (val<minVal))
    1966:	mov	r6, r0
    1968:	b.n	1950 <doMenu()+0x864>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    196a:	movs	r6, #1
    196c:	b.n	18b8 <doMenu()+0x7cc>
    196e:	movs	r3, #0
    1970:	b.n	1754 <doMenu()+0x668>
    1972:	movs	r3, #0
    1974:	b.n	1664 <doMenu()+0x578>
    1976:	movs	r0, #0
    1978:	b.n	155a <doMenu()+0x46e>
    197a:	movs	r7, #1
    197c:	b.n	18a8 <doMenu()+0x7bc>
    197e:	mov.w	r0, #4294967295
    1982:	b.n	190a <doMenu()+0x81e>
    1984:	movs	r0, #0
    1986:	b.n	18ee <doMenu()+0x802>
    1988:	movs	r0, #0
    198a:	b.n	187a <doMenu()+0x78e>
    198c:	movs	r7, #0
    198e:	b.n	1844 <doMenu()+0x758>
    1990:	movs	r6, #0
    1992:	b.n	1832 <doMenu()+0x746>
    1994:	movs	r4, #0
    1996:	b.n	1820 <doMenu()+0x734>
    1998:	movs	r0, #0
    199a:	b.n	1808 <doMenu()+0x71c>
    199c:	movs	r3, #0
    199e:	b.n	17ee <doMenu()+0x702>
    19a0:	movs	r3, #0
    19a2:	b.n	17c0 <doMenu()+0x6d4>
    19a4:	movs	r0, #0
    19a6:	b.n	178a <doMenu()+0x69e>
    19a8:	movs	r0, #0
    19aa:	b.n	176e <doMenu()+0x682>
    19ac:	.word	0x20016f24
    19b0:	.word	0x20016d44
    19b4:	.word	0x20016d83

000019b8 <setup>:
extern void *__rtc_localtime; // Arduino build process sets this
extern void rtc_set(unsigned long t);

//__________________________General Arduino Routines_____________________________________

extern "C" void setup() {
    19b8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // put your setup code here, to run once:
  int16_t nsec;
  pinMode(3,INPUT_PULLUP); // needed to enter menu if grounded
    19bc:	movs	r1, #2
extern void *__rtc_localtime; // Arduino build process sets this
extern void rtc_set(unsigned long t);

//__________________________General Arduino Routines_____________________________________

extern "C" void setup() {
    19be:	sub	sp, #8
  // put your setup code here, to run once:
  int16_t nsec;
  pinMode(3,INPUT_PULLUP); // needed to enter menu if grounded
    19c0:	movs	r0, #3
    19c2:	bl	8864 <pinMode>
    19c6:	ldr	r4, [pc, #312]	; (1b00 <setup+0x148>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    19c8:	ldr	r5, [pc, #312]	; (1b04 <setup+0x14c>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    19ca:	ldr	r7, [pc, #316]	; (1b08 <setup+0x150>)
    19cc:	ldr	r6, [pc, #316]	; (1b0c <setup+0x154>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    19ce:	ldrb	r3, [r4, #0]

#if DO_DEBUG>0
   while(!Serial && !digitalRead(3));
    19d0:	movs	r0, #3
    19d2:	cmp	r3, #0
    19d4:	beq.w	1af2 <setup+0x13a>
    19d8:	ldrb	r3, [r5, #0]
    19da:	lsls	r2, r3, #31
    19dc:	bpl.w	1af2 <setup+0x13a>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    19e0:	ldr	r3, [r7, #0]
    19e2:	ldr	r2, [r6, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    19e4:	subs	r3, r3, r2
    19e6:	cmp	r3, #14
    19e8:	bls.w	1af2 <setup+0x13a>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    19ec:	movs	r1, #18
    19ee:	ldr	r0, [pc, #288]	; (1b10 <setup+0x158>)

  //
  uSD.init();

  // always load config first
  uSD.loadConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    19f0:	ldr	r5, [pc, #288]	; (1b14 <setup+0x15c>)
    19f2:	bl	83cc <usb_serial_write>
    19f6:	ldr	r0, [pc, #288]	; (1b18 <setup+0x160>)
    19f8:	bl	9cb8 <Print::println()>
  // for 16bit resolution
  temperature = -0.0293 * analogRead(70) + 440.5;
*/

#define MAUDIO (M_QUEU+MDEL+50)
	AudioMemory (MAUDIO); // 600 blocks use about 200 kB (requires Teensy 3.6)
    19fc:	movw	r1, #599	; 0x257
    1a00:	ldr	r0, [pc, #280]	; (1b1c <setup+0x164>)
    1a02:	bl	9da0 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>
      SIM_SCGC6 &= ~SIM_SCGC6_I2S;
}

void I2S_stop(void)
{
    I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    1a06:	ldr	r2, [pc, #280]	; (1b20 <setup+0x168>)
//  uint32_t t0=rtc_get();
//  uint32_t t1=(uint32_t)&__rtc_localtime;
//  if((t1-t0)>100) rtc_set(t1);

  //
  uSD.init();
    1a08:	ldr	r0, [pc, #280]	; (1b24 <setup+0x16c>)
    1a0a:	ldr	r3, [r2, #0]
    1a0c:	bic.w	r3, r3, #2415919104	; 0x90000000
    1a10:	str	r3, [r2, #0]

  // always load config first
  uSD.loadConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1a12:	movs	r4, #8
//  uint32_t t0=rtc_get();
//  uint32_t t1=(uint32_t)&__rtc_localtime;
//  if((t1-t0)>100) rtc_set(t1);

  //
  uSD.init();
    1a14:	bl	9e8 <c_uSD::init()>

  // always load config first
  uSD.loadConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1a18:	mov	r3, r5
    1a1a:	str	r4, [sp, #0]
    1a1c:	mov	r2, r4
    1a1e:	ldr	r1, [pc, #264]	; (1b28 <setup+0x170>)
    1a20:	ldr	r0, [pc, #256]	; (1b24 <setup+0x16c>)
    1a22:	bl	ca0 <c_uSD::loadConfig(unsigned long*, int, long*, int)>
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
		} else if (pin == 3) {
			return (CORE_PIN3_PINREG & CORE_PIN3_BITMASK) ? 1 : 0;
    1a26:	ldr	r3, [pc, #260]	; (1b2c <setup+0x174>)
    1a28:	ldr	r3, [r3, #0]
    1a2a:	lsls	r3, r3, #19
    1a2c:	bmi.n	1a40 <setup+0x88>
#endif

  // if pin3 is connected to GND enter menu mode
  int ret;
  if(!digitalReadFast(3))
  { ret=doMenu();
    1a2e:	bl	10ec <doMenu()>
    if(ret<0) ;  // should shutdown now (not implemented) // keep compiler happy
      
    // should here save parameters to disk if modified
    uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1a32:	str	r4, [sp, #0]
    1a34:	mov	r2, r4
    1a36:	mov	r3, r5
    1a38:	ldr	r1, [pc, #236]	; (1b28 <setup+0x170>)
    1a3a:	ldr	r0, [pc, #232]	; (1b24 <setup+0x16c>)
    1a3c:	bl	b78 <c_uSD::storeConfig(unsigned long*, int, long*, int)>
  }
  //
  // check if it is our time to record
  nsec=checkDutyCycle(&acqParameters, -1);
    1a40:	mov.w	r1, #4294967295
    1a44:	ldr	r0, [pc, #224]	; (1b28 <setup+0x170>)
    1a46:	bl	f48 <checkDutyCycle(ACQ_Parameters_s*, short)>
  if(nsec>0) 
    1a4a:	cmp	r0, #0
    1a4c:	ble.n	1a5c <setup+0xa4>
    iscl[2] = (int) (i3-1);
}

void I2S_stopClock(void)
{
      SIM_SCGC6 &= ~SIM_SCGC6_I2S;
    1a4e:	ldr	r2, [pc, #224]	; (1b30 <setup+0x178>)
    1a50:	ldr	r3, [r2, #0]
    1a52:	bic.w	r3, r3, #32768	; 0x8000
    1a56:	str	r3, [r2, #0]
  { 
    #if ((ACQ == _I2S) || (ACQ == _I2S_QUAD) || (ACQ == _I2S_32) || (ACQ == _I2S_32_MONO) || (ACQ == _I2S_TYMPAN) || (ACQ == _I2S_TDM))
      I2S_stopClock();
    #endif
    setWakeupCallandSleep(nsec); // will not return if we should not continue with acquisition 
    1a58:	bl	db0 <setWakeupCallandSleep(unsigned long)>
  
  #elif ((ACQ == _I2S))
    I2S_modification(F_SAMP,32,2);
  
  #elif (ACQ == _I2S_QUAD)
    I2S_modification(F_SAMP,16,4); // I2S_Quad not modified for 32 bit (therefore 16 bit)
    1a5c:	movs	r2, #4
    1a5e:	movs	r1, #16
    1a60:	movw	r0, #48000	; 0xbb80
    1a64:	bl	808 <I2S_modification(unsigned long, unsigned short, int)>
    int16_t nbits=NSHIFT; 
    acq.digitalShift(nbits); 
  #endif

  //are we using the eventTrigger?
  if(snipParameters.thresh>=0) mustClose=0; else mustClose=-1;
    1a68:	ldr	r3, [r5, #4]
  state=0;
}

void c_uSD::setPrefix(char *prefix)
{
  strcpy(name,prefix);
    1a6a:	ldr	r1, [pc, #200]	; (1b34 <setup+0x17c>)
    1a6c:	ldr	r0, [pc, #200]	; (1b38 <setup+0x180>)
    1a6e:	ldr	r6, [pc, #204]	; (1b3c <setup+0x184>)
    1a70:	cmp	r3, #0
    1a72:	ldr	r3, [pc, #204]	; (1b40 <setup+0x188>)
    1a74:	ite	ge
    1a76:	movge	r2, #0
    1a78:	movwlt	r2, #65535	; 0xffff
    1a7c:	strh	r2, [r3, #0]
    1a7e:	bl	c6fc <strcpy>
    1a82:	movs	r5, #0
{
	uint16_t t;

	if (userblock) {
		release(userblock);
		userblock = NULL;
    1a84:	mov	r7, r5
  // lets start
  #if MDEL>=0
    process1.begin(&snipParameters); 
  #endif

  for(int ii=0; ii<NCH; ii++) queue[ii].begin();
    1a86:	ldr	r3, [r6, #0]
    1a88:	add.w	r8, r3, r5
template <int MQ>
void mRecordQueue<MQ>::clear(void)
{
	uint16_t t;

	if (userblock) {
    1a8c:	ldr.w	r0, [r8, #580]	; 0x244
    1a90:	cbz	r0, 1a9a <setup+0xe2>
		release(userblock);
    1a92:	bl	9eb4 <AudioStream::release(audio_block_struct*)>
		userblock = NULL;
    1a96:	str.w	r7, [r8, #580]	; 0x244
	}
	t = tail;
    1a9a:	ldrh.w	r4, [r8, #586]	; 0x24a
	while (t != head) {
    1a9e:	ldrh.w	r3, [r8, #584]	; 0x248

	if (userblock) {
		release(userblock);
		userblock = NULL;
	}
	t = tail;
    1aa2:	uxth	r4, r4
	while (t != head) {
    1aa4:	uxth	r3, r3
    1aa6:	cmp	r4, r3
    1aa8:	beq.n	1aca <setup+0x112>
		if (++t >= MQ) t = 0;
    1aaa:	adds	r4, #1
    1aac:	uxth	r4, r4
    1aae:	cmp	r4, #136	; 0x88
    1ab0:	it	hi
    1ab2:	movhi	r4, #0
    1ab4:	mov	r3, r4
		release(queue[t]);
    1ab6:	adds	r3, #8
    1ab8:	ldr.w	r0, [r8, r3, lsl #2]
    1abc:	bl	9eb4 <AudioStream::release(audio_block_struct*)>
	if (userblock) {
		release(userblock);
		userblock = NULL;
	}
	t = tail;
	while (t != head) {
    1ac0:	ldrh.w	r3, [r8, #584]	; 0x248
    1ac4:	uxth	r3, r3
    1ac6:	cmp	r3, r4
    1ac8:	bne.n	1aaa <setup+0xf2>
    1aca:	add.w	r5, r5, #592	; 0x250
{
public:
	mRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
   
	void begin(void) { clear();	enabled = 1;}
    1ace:	movs	r3, #1
    1ad0:	cmp.w	r5, #2368	; 0x940
	t = tail;
	while (t != head) {
		if (++t >= MQ) t = 0;
		release(queue[t]);
	}
	tail = t;
    1ad4:	strh.w	r4, [r8, #586]	; 0x24a
{
public:
	mRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
   
	void begin(void) { clear();	enabled = 1;}
    1ad8:	strh.w	r3, [r8, #588]	; 0x24c
    1adc:	bne.n	1a86 <setup+0xce>
    1ade:	movs	r1, #12
    1ae0:	ldr	r0, [pc, #96]	; (1b44 <setup+0x18c>)
    1ae2:	bl	83cc <usb_serial_write>
    1ae6:	ldr	r0, [pc, #48]	; (1b18 <setup+0x160>)
  //
  Serial.println("End of Setup");
}
    1ae8:	add	sp, #8
    1aea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1aee:	b.w	9cb8 <Print::println()>
  // put your setup code here, to run once:
  int16_t nsec;
  pinMode(3,INPUT_PULLUP); // needed to enter menu if grounded

#if DO_DEBUG>0
   while(!Serial && !digitalRead(3));
    1af2:	bl	8848 <digitalRead>
    1af6:	cmp	r0, #0
    1af8:	beq.w	19ce <setup+0x16>
    1afc:	b.n	19ec <setup+0x34>
    1afe:	nop
    1b00:	.word	0x2001ca40
    1b04:	.word	0x2001c958
    1b08:	.word	0x2001c95c
    1b0c:	.word	0x2001ce30
    1b10:	.word	0x000131ec
    1b14:	.word	0x20016d44
    1b18:	.word	0x20016f24
    1b1c:	.word	0x1fff0200
    1b20:	.word	0x4002f080
    1b24:	.word	0x2001799c
    1b28:	.word	0x20016d64
    1b2c:	.word	0x400ff010
    1b30:	.word	0x4004803c
    1b34:	.word	0x20016d84
    1b38:	.word	0x20017e9e
    1b3c:	.word	0x20017eb0
    1b40:	.word	0x20016d34
    1b44:	.word	0x00013200

00001b48 <SdBase<FsVolume>::errorHalt(Print*)>:
  //----------------------------------------------------------------------------
  /** %Print error info and halt.
   *
   * \param[in] pr Print destination.
   */
  void errorHalt(print_t* pr) {
    1b48:	mov	r5, r0
    1b4a:	ldr.w	r0, [r0, #1156]	; 0x484
    1b4e:	push	{r3, lr}
    1b50:	mov	r4, r1
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1b52:	cbz	r0, 1b84 <SdBase<FsVolume>::errorHalt(Print*)+0x3c>
      return m_card->errorCode();
    1b54:	ldr	r3, [r0, #0]
    1b56:	ldr	r3, [r3, #36]	; 0x24
    1b58:	blx	r3
  /** %Print error info and halt.
   *
   * \param[in] pr Print destination.
   */
  void errorHalt(print_t* pr) {
    if (sdErrorCode()) {
    1b5a:	cbnz	r0, 1b84 <SdBase<FsVolume>::errorHalt(Print*)+0x3c>
    1b5c:	ldr.w	r3, [r5, #1144]	; 0x478
  /** \return Partition type, FAT_TYPE_EXFAT, FAT_TYPE_FAT32,
   *          FAT_TYPE_FAT16, or zero for error.
   */
  uint8_t fatType() const {
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
    1b60:	cbz	r3, 1b6c <SdBase<FsVolume>::errorHalt(Print*)+0x24>
    1b62:	ldrb	r3, [r3, #7]
      pr->print(F("SdError: 0X"));
      pr->print(sdErrorCode(), HEX);
      pr->print(F(",0X"));
      pr->println(sdErrorData(), HEX);
    } else if (!Vol::fatType()) {
    1b64:	cbz	r3, 1b7a <SdBase<FsVolume>::errorHalt(Print*)+0x32>
  Particle.process();
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    1b66:	bl	9b98 <yield>
    1b6a:	b.n	1b66 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
    1b6c:	ldr.w	r3, [r5, #1148]	; 0x47c
    1b70:	cbz	r3, 1b7a <SdBase<FsVolume>::errorHalt(Print*)+0x32>
    1b72:	ldrb.w	r3, [r3, #1084]	; 0x43c
    1b76:	cmp	r3, #0
    1b78:	bne.n	1b66 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
      pr->println(F("Check SD format."));
    1b7a:	mov	r0, r4
    1b7c:	ldr	r1, [pc, #84]	; (1bd4 <SdBase<FsVolume>::errorHalt(Print*)+0x8c>)
    1b7e:	bl	730 <Print::println(__FlashStringHelper const*)>
    1b82:	b.n	1b66 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    1b84:	ldr	r1, [pc, #80]	; (1bd8 <SdBase<FsVolume>::errorHalt(Print*)+0x90>)
    1b86:	mov	r0, r4
    1b88:	bl	714 <Print::write(char const*)>
    1b8c:	ldr.w	r0, [r5, #1156]	; 0x484
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1b90:	cbz	r0, 1bd0 <SdBase<FsVolume>::errorHalt(Print*)+0x88>
      return m_card->errorCode();
    1b92:	ldr	r3, [r0, #0]
    1b94:	ldr	r3, [r3, #36]	; 0x24
    1b96:	blx	r3
    1b98:	mov	r1, r0
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1b9a:	movs	r3, #0
    1b9c:	movs	r2, #16
    1b9e:	mov	r0, r4
    1ba0:	bl	9d04 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    1ba4:	ldr	r1, [pc, #52]	; (1bdc <SdBase<FsVolume>::errorHalt(Print*)+0x94>)
    1ba6:	mov	r0, r4
    1ba8:	bl	714 <Print::write(char const*)>
    1bac:	ldr.w	r0, [r5, #1156]	; 0x484
    }
    return SD_CARD_ERROR_INVALID_CARD_CONFIG;
  }
  //----------------------------------------------------------------------------
  /** \return SD card error data. */
  uint8_t sdErrorData() {return m_card ? m_card->errorData() : 0;}
    1bb0:	cbz	r0, 1bcc <SdBase<FsVolume>::errorHalt(Print*)+0x84>
    1bb2:	ldr	r3, [r0, #0]
    1bb4:	ldr	r3, [r3, #40]	; 0x28
    1bb6:	blx	r3
    1bb8:	uxtb	r1, r0
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1bba:	movs	r3, #0
    1bbc:	movs	r2, #16
    1bbe:	mov	r0, r4
    1bc0:	bl	9d04 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    1bc4:	mov	r0, r4
    1bc6:	bl	9cb8 <Print::println()>
    1bca:	b.n	1b66 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
    1bcc:	mov	r1, r0
    1bce:	b.n	1bba <SdBase<FsVolume>::errorHalt(Print*)+0x72>
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1bd0:	movs	r1, #41	; 0x29
    1bd2:	b.n	1b9a <SdBase<FsVolume>::errorHalt(Print*)+0x52>
    1bd4:	.word	0x00013220
    1bd8:	.word	0x00013210
    1bdc:	.word	0x0001321c

00001be0 <SdBase<FsVolume>::errorHalt(char const*)>:
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    1be0:	ldr	r4, [pc, #28]	; (1c00 <SdBase<FsVolume>::errorHalt(char const*)+0x20>)
  //----------------------------------------------------------------------------
  /** %Print error info and halt.
   *
   * \param[in] msg Message to print.
   */
  void errorHalt(const char* msg) {errorHalt(&Serial, msg);}
    1be2:	push	{r3, lr}
    1be4:	mov	r5, r0
    1be6:	mov	r6, r1
    1be8:	mov	r0, r4
    1bea:	ldr	r1, [pc, #24]	; (1c04 <SdBase<FsVolume>::errorHalt(char const*)+0x24>)
    1bec:	bl	714 <Print::write(char const*)>
   * \param[in] pr Print destination.
   * \param[in] msg Message to print.
   */
  void errorHalt(print_t* pr, const char* msg) {
    pr->print(F("error: "));
    pr->println(msg);
    1bf0:	mov	r1, r6
    1bf2:	mov	r0, r4
    1bf4:	bl	730 <Print::println(__FlashStringHelper const*)>
    errorHalt(pr);
    1bf8:	mov	r1, r4
    1bfa:	mov	r0, r5
    1bfc:	bl	1b48 <SdBase<FsVolume>::errorHalt(Print*)>
    1c00:	.word	0x20016f24
    1c04:	.word	0x00013234

00001c08 <c_uSD::write(short*, long)>:
}

int16_t c_uSD::write(int16_t *data, int32_t ndat)
{
    1c08:	push	{r4, r5, r6, lr}
    1c0a:	mov	r4, r0
  if(state == 0)
    1c0c:	ldrsh.w	r0, [r0, #1276]	; 0x4fc
{
  strcpy(name,prefix);
}

int16_t c_uSD::write(int16_t *data, int32_t ndat)
{
    1c10:	mov	r6, r1
    1c12:	mov	r5, r2
  if(state == 0)
    1c14:	cbz	r0, 1c24 <c_uSD::write(short*, long)+0x1c>
    #endif
    state=1; // flag that file is open
    nbuf=0;
  }
  
  if(state == 1 || state == 2)
    1c16:	subs	r3, r0, #1
    1c18:	uxth	r3, r3
    1c1a:	cmp	r3, #1
    1c1c:	bls.n	1c6a <c_uSD::write(short*, long)+0x62>
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    nbuf++;
    if(closing) {closing=0; state=3;}
  }
  
  if(state == 3)
    1c1e:	cmp	r0, #3
    1c20:	beq.n	1cdc <c_uSD::write(short*, long)+0xd4>
  {
    state=close();
  }
  return state;
}
    1c22:	pop	{r4, r5, r6, pc}

int16_t c_uSD::write(int16_t *data, int32_t ndat)
{
  if(state == 0)
  { // open file
    char *filename = makeFilename(name);
    1c24:	addw	r0, r4, #1282	; 0x502
    1c28:	bl	904 <makeFilename(char*)>
    if(!filename) {state=-1; return state;} // flag to do not anything
    1c2c:	cmp	r0, #0
    1c2e:	beq.n	1ce8 <c_uSD::write(short*, long)+0xe0>
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    1c30:	ldr	r3, [pc, #204]	; (1d00 <c_uSD::write(short*, long)+0xf8>)
    1c32:	ldr	r1, [r3, #0]
    1c34:	cmp	r1, #0
    1c36:	beq.n	1cb6 <c_uSD::write(short*, long)+0xae>
    1c38:	mov	r2, r0
    1c3a:	movw	r3, #1538	; 0x602
    1c3e:	addw	r0, r4, #1212	; 0x4bc
    1c42:	bl	6898 <FsBaseFile::open(FsVolume*, char const*, int)>
    1c46:	cbz	r0, 1cb6 <c_uSD::write(short*, long)+0xae>
    1c48:	ldr.w	r0, [r4, #1268]	; 0x4f4
   * \param[in] length size of the file in bytes.
   * \return true for success or false for failure.
   */
  bool preAllocate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->preAllocate(length) :
           m_xFile ? m_xFile->preAllocate(length) : false;
    1c4c:	cbz	r0, 1c9a <c_uSD::write(short*, long)+0x92>
   *
   * \param[in] length size of the file in bytes.
   * \return true for success or false for failure.
   */
  bool preAllocate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->preAllocate(length) :
    1c4e:	mov.w	r1, #41943040	; 0x2800000
    1c52:	bl	5698 <FatFile::preAllocate(unsigned long)>
    1c56:	cbz	r0, 1cae <c_uSD::write(short*, long)+0xa6>
    //
    if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) sd.errorHalt("file.open failed");
    if (!file.preAllocate(PRE_ALLOCATE_SIZE)) sd.errorHalt("file.preAllocate failed");
    #ifdef  GEN_WAV_FILE // keep first record
          memcpy(header,(const char *)data,512);
    1c58:	mov.w	r2, #512	; 0x200
    1c5c:	mov	r1, r6
    1c5e:	ldr	r0, [pc, #164]	; (1d04 <c_uSD::write(short*, long)+0xfc>)
    1c60:	bl	81cc <memcpy>
    #endif
    state=1; // flag that file is open
    nbuf=0;
    1c64:	movs	r3, #0
    1c66:	strh.w	r3, [r4, #1278]	; 0x4fe
    1c6a:	ldr.w	r0, [r4, #1268]	; 0x4f4
  }
  
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    1c6e:	movs	r3, #2
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    1c70:	lsls	r5, r5, #1
    nbuf=0;
  }
  
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    1c72:	strh.w	r3, [r4, #1276]	; 0x4fc
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    1c76:	cbz	r0, 1cbe <c_uSD::write(short*, long)+0xb6>
    1c78:	mov	r1, r6
    1c7a:	mov	r2, r5
    1c7c:	bl	5bb8 <FatFile::write(void const*, unsigned int)>
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    1c80:	cmp	r0, r5
    1c82:	bne.n	1cf6 <c_uSD::write(short*, long)+0xee>
    nbuf++;
    1c84:	ldrh.w	r3, [r4, #1278]	; 0x4fe
    if(closing) {closing=0; state=3;}
    1c88:	ldrsh.w	r2, [r4, #1280]	; 0x500
  
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    nbuf++;
    1c8c:	adds	r3, #1
    1c8e:	strh.w	r3, [r4, #1278]	; 0x4fe
    if(closing) {closing=0; state=3;}
    1c92:	cbnz	r2, 1cd0 <c_uSD::write(short*, long)+0xc8>
    1c94:	ldrsh.w	r0, [r4, #1276]	; 0x4fc
    1c98:	b.n	1c1e <c_uSD::write(short*, long)+0x16>
   * \param[in] length size of the file in bytes.
   * \return true for success or false for failure.
   */
  bool preAllocate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->preAllocate(length) :
           m_xFile ? m_xFile->preAllocate(length) : false;
    1c9a:	ldr.w	r0, [r4, #1272]	; 0x4f8
    1c9e:	cbz	r0, 1cae <c_uSD::write(short*, long)+0xa6>
    1ca0:	mov.w	r2, #41943040	; 0x2800000
    1ca4:	movs	r3, #0
    1ca6:	bl	50d0 <ExFatFile::preAllocate(unsigned long long)>
  { // open file
    char *filename = makeFilename(name);
    if(!filename) {state=-1; return state;} // flag to do not anything
    //
    if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) sd.errorHalt("file.open failed");
    if (!file.preAllocate(PRE_ALLOCATE_SIZE)) sd.errorHalt("file.preAllocate failed");
    1caa:	cmp	r0, #0
    1cac:	bne.n	1c58 <c_uSD::write(short*, long)+0x50>
    1cae:	mov	r0, r4
    1cb0:	ldr	r1, [pc, #84]	; (1d08 <c_uSD::write(short*, long)+0x100>)
    1cb2:	bl	1be0 <SdBase<FsVolume>::errorHalt(char const*)>
  if(state == 0)
  { // open file
    char *filename = makeFilename(name);
    if(!filename) {state=-1; return state;} // flag to do not anything
    //
    if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) sd.errorHalt("file.open failed");
    1cb6:	mov	r0, r4
    1cb8:	ldr	r1, [pc, #80]	; (1d0c <c_uSD::write(short*, long)+0x104>)
    1cba:	bl	1be0 <SdBase<FsVolume>::errorHalt(char const*)>
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    1cbe:	ldr.w	r0, [r4, #1272]	; 0x4f8
    1cc2:	cmp	r0, #0
    1cc4:	beq.n	1c80 <c_uSD::write(short*, long)+0x78>
    1cc6:	mov	r1, r6
    1cc8:	mov	r2, r5
    1cca:	bl	5240 <ExFatFile::write(void const*, unsigned int)>
    1cce:	b.n	1c80 <c_uSD::write(short*, long)+0x78>
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    nbuf++;
    if(closing) {closing=0; state=3;}
    1cd0:	movs	r2, #0
    1cd2:	movs	r3, #3
    1cd4:	strh.w	r2, [r4, #1280]	; 0x500
    1cd8:	strh.w	r3, [r4, #1276]	; 0x4fc
  }
  
  if(state == 3)
  {
    state=close();
    1cdc:	mov	r0, r4
    1cde:	bl	a58 <c_uSD::close()>
    1ce2:	strh.w	r0, [r4, #1276]	; 0x4fc
  }
  return state;
    1ce6:	pop	{r4, r5, r6, pc}
int16_t c_uSD::write(int16_t *data, int32_t ndat)
{
  if(state == 0)
  { // open file
    char *filename = makeFilename(name);
    if(!filename) {state=-1; return state;} // flag to do not anything
    1ce8:	movw	r3, #65535	; 0xffff
    1cec:	strh.w	r3, [r4, #1276]	; 0x4fc
    1cf0:	mov.w	r0, #4294967295
    1cf4:	pop	{r4, r5, r6, pc}
  }
  
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    1cf6:	mov	r0, r4
    1cf8:	ldr	r1, [pc, #20]	; (1d10 <c_uSD::write(short*, long)+0x108>)
    1cfa:	bl	1be0 <SdBase<FsVolume>::errorHalt(char const*)>
    1cfe:	nop
    1d00:	.word	0x2001c8fc
    1d04:	.word	0x20017eb4
    1d08:	.word	0x00013268
    1d0c:	.word	0x00013254
    1d10:	.word	0x0001323c

00001d14 <loop>:
}

volatile uint32_t maxValue=0, maxNoise=0; // possibly be updated outside
int16_t tempBuffer[AUDIO_BLOCK_SAMPLES*NCH];

extern "C" void loop() {
    1d14:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1d18:	ldr	r7, [pc, #704]	; (1fdc <loop+0x2c8>)
    1d1a:	ldr	r2, [r7, #0]
    1d1c:	sub	sp, #40	; 0x28
  int16_t nsec;
  uint32_t to=0,t1,t2;
  static uint32_t t3,t4;
  static int16_t state=0; // 0: open new file, -1: last file

  int have_data=1;
    1d1e:	movs	r0, #1
    1d20:	add.w	r5, r2, #2368	; 0x940
template <int MQ>
uint16_t mRecordQueue<MQ>::available(void)
{
  uint16_t h, t;

  h = head;
    1d24:	ldrh.w	r3, [r2, #584]	; 0x248
  t = tail;
    1d28:	ldrh.w	r1, [r2, #586]	; 0x24a
template <int MQ>
uint16_t mRecordQueue<MQ>::available(void)
{
  uint16_t h, t;

  h = head;
    1d2c:	uxth	r3, r3
  t = tail;
    1d2e:	uxth	r1, r1
  if (h >= t) return h - t;
    1d30:	cmp	r3, r1
    1d32:	sub.w	r4, r3, r1
  return MQ + h - t;
    1d36:	ittet	cc
    1d38:	addcc	r3, #137	; 0x89
    1d3a:	subcc	r3, r3, r1
{
  uint16_t h, t;

  h = head;
  t = tail;
  if (h >= t) return h - t;
    1d3c:	uxthcs	r3, r4
  return MQ + h - t;
    1d3e:	uxthcc	r3, r3
  for(int ii=0;ii<NCH;ii++) if(queue[ii].available()==0) have_data=0;
    1d40:	cmp	r3, #0
    1d42:	add.w	r2, r2, #592	; 0x250
    1d46:	it	eq
    1d48:	moveq	r0, #0
    1d4a:	cmp	r2, r5
    1d4c:	bne.n	1d24 <loop+0x10>

  if(have_data)
    1d4e:	cmp	r0, #0
    1d50:	bne.n	1de0 <loop+0xcc>
    int must_hibernate=0;
    if(
        #if MDEL >=0
          ((mustClose>0) && (process1.getSigCount()< -MDEL)) ||
        #endif
          ((mustClose==0) && ((must_hibernate=checkDutyCycle(&acqParameters, state))<0)))
    1d52:	ldr	r4, [pc, #652]	; (1fe0 <loop+0x2cc>)
    1d54:	ldrsh.w	r3, [r4]
    1d58:	cmp	r3, #0
    1d5a:	beq.w	1f2a <loop+0x216>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1d5e:	ldr	r6, [pc, #644]	; (1fe4 <loop+0x2d0>)
#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
  if(millis()>t0+1000)
    1d60:	ldr	r5, [pc, #644]	; (1fe8 <loop+0x2d4>)
    1d62:	ldr	r3, [r6, #0]

#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
    1d64:	ldr	r4, [pc, #644]	; (1fec <loop+0x2d8>)
    1d66:	str	r3, [sp, #20]
  if(millis()>t0+1000)
    1d68:	ldr	r3, [r5, #0]

#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
    1d6a:	ldr	r2, [r4, #0]
	return ret;
    1d6c:	ldr	r1, [sp, #20]
  if(millis()>t0+1000)
    1d6e:	add.w	r3, r3, #1000	; 0x3e8

#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
    1d72:	adds	r2, #1
  if(millis()>t0+1000)
    1d74:	cmp	r1, r3

#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
    1d76:	str	r2, [r4, #0]
  if(millis()>t0+1000)
    1d78:	bls.n	1dd8 <loop+0xc4>
  {  Serial.printf("\tloop: %5d %4d; %5d %5d; %5d; ",
    1d7a:	ldr.w	r9, [pc, #704]	; 203c <loop+0x328>
          loopCount, uSD.getNbuf(), t3,t4, 
          AudioMemoryUsageMax());
    1d7e:	ldr	r7, [pc, #624]	; (1ff0 <loop+0x2dc>)
    1d80:	ldr	r3, [pc, #624]	; (1ff4 <loop+0x2e0>)
    1d82:	ldrh.w	r1, [r9]
    1d86:	ldr	r0, [r7, #0]
    1d88:	ldr.w	r8, [pc, #664]	; 2024 <loop+0x310>
    1d8c:	ldrh.w	r3, [r3, #1278]	; 0x4fe
    1d90:	str	r0, [sp, #4]
    1d92:	str	r1, [sp, #8]
    1d94:	ldr.w	r1, [r8]
    1d98:	str	r1, [sp, #0]
    1d9a:	ldr	r0, [pc, #604]	; (1ff8 <loop+0x2e4>)
    1d9c:	ldr	r1, [pc, #604]	; (1ffc <loop+0x2e8>)
    1d9e:	bl	9ce8 <Print::printf(char const*, ...)>
    AudioMemoryUsageMaxReset();
    1da2:	ldr	r3, [pc, #604]	; (2000 <loop+0x2ec>)

  #if (ACQ==_ADC_0) | (ACQ==_ADC_D) | (ACQ==_ADC_S)
    Serial.printf("%5d %5d",PDB0_CNT, PDB0_MOD);
  #endif
  
    Serial.println();
    1da4:	ldr	r0, [pc, #592]	; (1ff8 <loop+0x2e4>)
  loopCount++;
  if(millis()>t0+1000)
  {  Serial.printf("\tloop: %5d %4d; %5d %5d; %5d; ",
          loopCount, uSD.getNbuf(), t3,t4, 
          AudioMemoryUsageMax());
    AudioMemoryUsageMaxReset();
    1da6:	ldrh	r3, [r3, #0]
    1da8:	strh.w	r3, [r9]
    t3=1<<31;
    t4=0;
    1dac:	mov.w	r9, #0
  if(millis()>t0+1000)
  {  Serial.printf("\tloop: %5d %4d; %5d %5d; %5d; ",
          loopCount, uSD.getNbuf(), t3,t4, 
          AudioMemoryUsageMax());
    AudioMemoryUsageMaxReset();
    t3=1<<31;
    1db0:	mov.w	r3, #2147483648	; 0x80000000
    1db4:	str.w	r3, [r8]
    t4=0;
    1db8:	str.w	r9, [r7]

  #if (ACQ==_ADC_0) | (ACQ==_ADC_D) | (ACQ==_ADC_S)
    Serial.printf("%5d %5d",PDB0_CNT, PDB0_MOD);
  #endif
  
    Serial.println();
    1dbc:	bl	9cb8 <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1dc0:	ldr	r3, [r6, #0]
    1dc2:	str	r3, [sp, #24]
    t0=millis();
    loopCount=0;
    maxValue=0;
    1dc4:	ldr	r2, [pc, #572]	; (2004 <loop+0x2f0>)
    maxNoise=0;
    1dc6:	ldr	r3, [pc, #576]	; (2008 <loop+0x2f4>)
	return ret;
    1dc8:	ldr	r1, [sp, #24]
    Serial.printf("%5d %5d",PDB0_CNT, PDB0_MOD);
  #endif
  
    Serial.println();
    t0=millis();
    loopCount=0;
    1dca:	str.w	r9, [r4]
    maxValue=0;
    1dce:	str.w	r9, [r2]
  #if (ACQ==_ADC_0) | (ACQ==_ADC_D) | (ACQ==_ADC_S)
    Serial.printf("%5d %5d",PDB0_CNT, PDB0_MOD);
  #endif
  
    Serial.println();
    t0=millis();
    1dd2:	str	r1, [r5, #0]
    loopCount=0;
    maxValue=0;
    maxNoise=0;
    1dd4:	str.w	r9, [r3]
 }
#endif

  asm("wfi"); // to save some power switch off idle cpu
    1dd8:	wfi
}
    1dda:	add	sp, #40	; 0x28
    1ddc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  int have_data=1;
  for(int ii=0;ii<NCH;ii++) if(queue[ii].available()==0) have_data=0;

  if(have_data)
  { // have data on queue
    nsec=checkDutyCycle(&acqParameters, state);
    1de0:	ldr	r6, [pc, #552]	; (200c <loop+0x2f8>)
    1de2:	ldr	r0, [pc, #556]	; (2010 <loop+0x2fc>)
    1de4:	ldrsh.w	r1, [r6]
    1de8:	bl	f48 <checkDutyCycle(ACQ_Parameters_s*, short)>
    if(nsec<0) { uSD.setClosing();} // this will be last record in file
    1dec:	cmp	r0, #0
    1dee:	blt.w	208c <loop+0x378>
    if(nsec>0) 
    1df2:	beq.n	1e02 <loop+0xee>
    1df4:	ldr	r2, [pc, #540]	; (2014 <loop+0x300>)
    1df6:	ldr	r3, [r2, #0]
    1df8:	bic.w	r3, r3, #32768	; 0x8000
    1dfc:	str	r3, [r2, #0]
    { 
      #if ((ACQ == _I2S) || (ACQ == _I2S_QUAD) || (ACQ == _I2S_32) || (ACQ == _I2S_32_MONO) || (ACQ == _I2S_TYMPAN) || (ACQ == _I2S_TDM))
        I2S_stopClock();
      #endif
      setWakeupCallandSleep(nsec); // file closed sleep now
    1dfe:	bl	db0 <setWakeupCallandSleep(unsigned long)>
    }
    //
    if(state==0)
    1e02:	ldrsh.w	r0, [r6]
    { // generate header before file is opened
      #ifdef GEN_WAV_FILE // is declared in audio_logger_if.h
         uint32_t *header=(uint32_t *) wavHeader(0); // call initially with zero filesize
         //
         int ndat=outptr-diskBuffer;
    1e06:	ldr	r5, [pc, #528]	; (2018 <loop+0x304>)
        I2S_stopClock();
      #endif
      setWakeupCallandSleep(nsec); // file closed sleep now
    }
    //
    if(state==0)
    1e08:	cmp	r0, #0
    1e0a:	beq.w	2040 <loop+0x32c>
    1e0e:	ldr.w	ip, [r7]
  uint32_t to=0,t1,t2;
  static uint32_t t3,t4;
  static int16_t state=0; // 0: open new file, -1: last file

  int have_data=1;
  for(int ii=0;ii<NCH;ii++) if(queue[ii].available()==0) have_data=0;
    1e12:	add	r1, sp, #24
    1e14:	mov	r2, ip
    1e16:	add.w	r0, ip, #2368	; 0x940
template <int MQ>
void * mRecordQueue<MQ>::readBuffer(void)
{
	uint16_t t;

	if (userblock) return NULL;
    1e1a:	ldr.w	r3, [r2, #580]	; 0x244
    1e1e:	cmp	r3, #0
    1e20:	beq.w	2096 <loop+0x382>
    1e24:	movs	r3, #0
    1e26:	add.w	r2, r2, #592	; 0x250
      state=1;
    }
    
    // fetch data from queues
    int16_t * data[NCH];
    for(int ii=0; ii<NCH; ii++) data[ii] = (int16_t *)queue[ii].readBuffer();
    1e2a:	cmp	r0, r2
    1e2c:	str.w	r3, [r1], #4
    1e30:	bne.n	1e1a <loop+0x106>
    1e32:	ldr	r2, [pc, #488]	; (201c <loop+0x308>)
    1e34:	add.w	lr, r2, #1024	; 0x400
    1e38:	add.w	r4, r2, #8
    1e3c:	add	r1, sp, #24
    // multiplex data
    int16_t *tmp = tempBuffer;
    for(int ii=0;ii<AUDIO_BLOCK_SAMPLES;ii++) for(int jj=0; jj<NCH; jj++) *tmp++ = *data[jj]++;
    1e3e:	ldr	r3, [r1, #0]
    1e40:	ldrsh.w	r0, [r3]
    1e44:	strh.w	r0, [r2, #2]!
    1e48:	adds	r3, #2
    1e4a:	cmp	r4, r2
    1e4c:	str.w	r3, [r1], #4
    1e50:	bne.n	1e3e <loop+0x12a>
    1e52:	cmp	r4, lr
    1e54:	mov	r2, r4
    1e56:	bne.n	1e38 <loop+0x124>
    1e58:	movs	r4, #0
    // release queues
    for(int ii=0; ii<NCH; ii++) queue[ii].freeBuffer();
    1e5a:	add.w	r8, ip, r4
template <int MQ>
void mRecordQueue<MQ>::freeBuffer(void)
{
	if (userblock == NULL) return;
	release(userblock);
	userblock = NULL;
    1e5e:	mov	r9, r4
}

template <int MQ>
void mRecordQueue<MQ>::freeBuffer(void)
{
	if (userblock == NULL) return;
    1e60:	ldr.w	r0, [r8, #580]	; 0x244
    1e64:	add.w	r4, r4, #592	; 0x250
    1e68:	cbz	r0, 1e72 <loop+0x15e>
	release(userblock);
    1e6a:	bl	9eb4 <AudioStream::release(audio_block_struct*)>
	userblock = NULL;
    1e6e:	str.w	r9, [r8, #580]	; 0x244
    1e72:	cmp.w	r4, #2368	; 0x940
    1e76:	beq.n	1e92 <loop+0x17e>
    1e78:	ldr.w	ip, [r7]
    1e7c:	add.w	r8, ip, r4
    1e80:	add.w	r4, r4, #592	; 0x250
}

template <int MQ>
void mRecordQueue<MQ>::freeBuffer(void)
{
	if (userblock == NULL) return;
    1e84:	ldr.w	r0, [r8, #580]	; 0x244
    1e88:	cmp	r0, #0
    1e8a:	bne.n	1e6a <loop+0x156>
    1e8c:	cmp.w	r4, #2368	; 0x940
    1e90:	bne.n	1e78 <loop+0x164>

    // copy data to disk buffer
    int16_t *ptr=(int16_t *) outptr;
    1e92:	ldr	r4, [r5, #0]
    
    // number of data in tempBuffer
    int32_t ndat = AUDIO_BLOCK_SAMPLES*NCH;
    
    // number of free samples on diskbuffer
    int32_t nout = diskBuffer+BUFFERSIZE - outptr;
    1e94:	ldr	r3, [pc, #392]	; (2020 <loop+0x30c>)
    1e96:	subs	r3, r3, r4
    1e98:	asrs	r3, r3, #1

    tmp = tempBuffer;
    if (nout>ndat)
    1e9a:	cmp.w	r3, #512	; 0x200
    
    // number of data in tempBuffer
    int32_t ndat = AUDIO_BLOCK_SAMPLES*NCH;
    
    // number of free samples on diskbuffer
    int32_t nout = diskBuffer+BUFFERSIZE - outptr;
    1e9e:	mov	r7, r3
    1ea0:	mov	r8, r4

    tmp = tempBuffer;
    if (nout>ndat)
    1ea2:	bgt.n	1f9a <loop+0x286>
    1ea4:	ldr	r2, [pc, #332]	; (1ff4 <loop+0x2e0>)
      ndat=0;
    }
    else
    { // fill up disk buffer
      int nbuf=nout;
      if(uSD.isClosing()) nbuf=(nbuf/NCH)*NCH; // is last record of file 
    1ea6:	ldrsh.w	r2, [r2, #1280]	; 0x500
    1eaa:	cbz	r2, 1eb6 <loop+0x1a2>
    1eac:	cmp	r3, #0
    1eae:	it	lt
    1eb0:	addlt	r3, #3
    1eb2:	bic.w	r7, r3, #3
      for(int ii=0;ii<nbuf;ii++) *ptr++ = *tmp++;
    1eb6:	cmp	r7, #0
    1eb8:	ble.w	20cc <loop+0x3b8>
    1ebc:	ldr.w	lr, [pc, #372]	; 2034 <loop+0x320>
    1ec0:	mov	r3, r4
    1ec2:	lsls	r4, r7, #1
    1ec4:	adds	r0, r3, r4
    1ec6:	mov	r2, lr
    1ec8:	ldrsh.w	r1, [r2], #2
    1ecc:	strh.w	r1, [r3], #2
    1ed0:	cmp	r0, r3
    1ed2:	bne.n	1ec8 <loop+0x1b4>
    1ed4:	add	r4, lr
    1ed6:	mov	r8, r0
    }
    
    if(nout==0) //buffer is filled, so write to disk
    { int32_t nbuf=ptr-diskBuffer;
    
      to=micros();
    1ed8:	bl	8870 <micros>
      state=uSD.write(diskBuffer,nbuf); // this is blocking
    1edc:	ldr.w	r9, [pc, #328]	; 2028 <loop+0x314>
    1ee0:	rsb	r2, r9, r8
    1ee4:	asrs	r2, r2, #1
    }
    
    if(nout==0) //buffer is filled, so write to disk
    { int32_t nbuf=ptr-diskBuffer;
    
      to=micros();
    1ee6:	mov	sl, r0
      state=uSD.write(diskBuffer,nbuf); // this is blocking
    1ee8:	mov	r1, r9
    1eea:	ldr	r0, [pc, #264]	; (1ff4 <loop+0x2e0>)
    1eec:	bl	1c08 <c_uSD::write(short*, long)>
    1ef0:	strh	r0, [r6, #0]
      t1=micros();
    1ef2:	bl	8870 <micros>
      t2=t1-to;
      if(t2<t3) t3=t2; // accumulate some time statistics
    1ef6:	ldr	r2, [pc, #300]	; (2024 <loop+0x310>)
    1ef8:	ldr	r3, [r2, #0]
    { int32_t nbuf=ptr-diskBuffer;
    
      to=micros();
      state=uSD.write(diskBuffer,nbuf); // this is blocking
      t1=micros();
      t2=t1-to;
    1efa:	rsb	r0, sl, r0
      if(t2<t3) t3=t2; // accumulate some time statistics
    1efe:	cmp	r0, r3
      if(t2>t4) t4=t2;
    1f00:	ldr	r3, [pc, #236]	; (1ff0 <loop+0x2dc>)
    
      to=micros();
      state=uSD.write(diskBuffer,nbuf); // this is blocking
      t1=micros();
      t2=t1-to;
      if(t2<t3) t3=t2; // accumulate some time statistics
    1f02:	it	cc
    1f04:	strcc	r0, [r2, #0]
      if(t2>t4) t4=t2;
    1f06:	ldr	r2, [r3, #0]
    else
    { // fill up disk buffer
      int nbuf=nout;
      if(uSD.isClosing()) nbuf=(nbuf/NCH)*NCH; // is last record of file 
      for(int ii=0;ii<nbuf;ii++) *ptr++ = *tmp++;
      ndat-=nbuf;
    1f08:	rsb	r7, r7, #512	; 0x200
      to=micros();
      state=uSD.write(diskBuffer,nbuf); // this is blocking
      t1=micros();
      t2=t1-to;
      if(t2<t3) t3=t2; // accumulate some time statistics
      if(t2>t4) t4=t2;
    1f0c:	cmp	r0, r2
    1f0e:	it	hi
    1f10:	strhi	r0, [r3, #0]
    1f12:	ldr	r2, [pc, #276]	; (2028 <loop+0x314>)

      ptr=(int16_t *)diskBuffer;
    }

    if(ndat>0) // save residual data
    1f14:	cmp	r7, #0
    1f16:	beq.n	1fb2 <loop+0x29e>
    1f18:	movs	r3, #0
    {
      for(int ii=0;ii<ndat;ii++) *ptr++ = *tmp++;
    1f1a:	adds	r3, #1
    1f1c:	ldrh.w	r1, [r4], #2
    1f20:	strh.w	r1, [r2], #2
    1f24:	cmp	r7, r3
    1f26:	bgt.n	1f1a <loop+0x206>
    1f28:	b.n	1fb2 <loop+0x29e>
    int must_hibernate=0;
    if(
        #if MDEL >=0
          ((mustClose>0) && (process1.getSigCount()< -MDEL)) ||
        #endif
          ((mustClose==0) && ((must_hibernate=checkDutyCycle(&acqParameters, state))<0)))
    1f2a:	ldr	r6, [pc, #224]	; (200c <loop+0x2f8>)
    1f2c:	ldr	r0, [pc, #224]	; (2010 <loop+0x2fc>)
    1f2e:	ldrsh.w	r1, [r6]
    1f32:	bl	f48 <checkDutyCycle(ACQ_Parameters_s*, short)>
    1f36:	cmp	r0, #0
    1f38:	bge.w	1d5e <loop+0x4a>
    { 
      // write remaining data to disk and close file
      if(state>=0)
    1f3c:	ldrsh.w	r3, [r6]
      { uint32_t nbuf = (uint32_t)(outptr-diskBuffer);
    1f40:	ldr	r5, [pc, #212]	; (2018 <loop+0x304>)
        state=uSD.write(diskBuffer,nbuf); // this is blocking
    1f42:	ldr.w	r9, [pc, #228]	; 2028 <loop+0x314>
          ((mustClose>0) && (process1.getSigCount()< -MDEL)) ||
        #endif
          ((mustClose==0) && ((must_hibernate=checkDutyCycle(&acqParameters, state))<0)))
    { 
      // write remaining data to disk and close file
      if(state>=0)
    1f46:	cmp	r3, #0
    1f48:	blt.n	1f76 <loop+0x262>
      { uint32_t nbuf = (uint32_t)(outptr-diskBuffer);
        state=uSD.write(diskBuffer,nbuf); // this is blocking
    1f4a:	ldr	r3, [r5, #0]
    1f4c:	ldr	r0, [pc, #164]	; (1ff4 <loop+0x2e0>)
    1f4e:	rsb	r2, r9, r3
    1f52:	asrs	r2, r2, #1
    1f54:	mov	r1, r9
    1f56:	bl	1c08 <c_uSD::write(short*, long)>
    1f5a:	strh	r0, [r6, #0]
        state=uSD.close();
    1f5c:	ldr	r0, [pc, #148]	; (1ff4 <loop+0x2e0>)
    1f5e:	bl	a58 <c_uSD::close()>
        if(must_hibernate) state=-1;
    1f62:	movw	r0, #65535	; 0xffff
        uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1f66:	movs	r2, #8
    1f68:	str	r2, [sp, #0]
    1f6a:	ldr	r3, [pc, #192]	; (202c <loop+0x318>)
      // write remaining data to disk and close file
      if(state>=0)
      { uint32_t nbuf = (uint32_t)(outptr-diskBuffer);
        state=uSD.write(diskBuffer,nbuf); // this is blocking
        state=uSD.close();
        if(must_hibernate) state=-1;
    1f6c:	strh	r0, [r6, #0]
        uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1f6e:	ldr	r1, [pc, #160]	; (2010 <loop+0x2fc>)
    1f70:	ldr	r0, [pc, #128]	; (1ff4 <loop+0x2e0>)
    1f72:	bl	b78 <c_uSD::storeConfig(unsigned long*, int, long*, int)>
      }
      outptr = diskBuffer;

      // reset mustClose flag
      if(snipParameters.thresh>=0) mustClose=0; else mustClose=-1;
    1f76:	ldr	r3, [pc, #180]	; (202c <loop+0x318>)
    1f78:	ldr	r0, [pc, #180]	; (2030 <loop+0x31c>)
    1f7a:	ldr	r3, [r3, #4]
        state=uSD.write(diskBuffer,nbuf); // this is blocking
        state=uSD.close();
        if(must_hibernate) state=-1;
        uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
      }
      outptr = diskBuffer;
    1f7c:	str.w	r9, [r5]

      // reset mustClose flag
      if(snipParameters.thresh>=0) mustClose=0; else mustClose=-1;
    1f80:	cmp	r3, #0
    1f82:	ite	ge
    1f84:	movge	r3, #0
    1f86:	movwlt	r3, #65535	; 0xffff
    1f8a:	movs	r1, #11
    1f8c:	strh	r3, [r4, #0]
    1f8e:	bl	83cc <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1f92:	ldr	r0, [pc, #100]	; (1ff8 <loop+0x2e4>)
    1f94:	bl	9cb8 <Print::println()>
    1f98:	b.n	1d5e <loop+0x4a>
    
    // number of free samples on diskbuffer
    int32_t nout = diskBuffer+BUFFERSIZE - outptr;

    tmp = tempBuffer;
    if (nout>ndat)
    1f9a:	ldr	r3, [pc, #152]	; (2034 <loop+0x320>)
    1f9c:	subs	r2, r4, #2
    1f9e:	add.w	r0, r3, #1024	; 0x400
    { // sufficient space for all data
      for(int ii=0;ii<ndat;ii++) *ptr++ = *tmp++;
    1fa2:	ldrsh.w	r1, [r3], #2
    1fa6:	strh.w	r1, [r2, #2]!
    1faa:	cmp	r3, r0
    1fac:	bne.n	1fa2 <loop+0x28e>
    1fae:	add.w	r2, r4, #1024	; 0x400
        }
      }
    } // copied now all data
    outptr=(int16_t *)ptr; // save actual write position
*/
    if(!state)
    1fb2:	ldrsh.w	r3, [r6]
    {
      for(int ii=0;ii<ndat;ii++) *ptr++ = *tmp++;
    }
    
    // all data are copied
    outptr=(int16_t *)ptr; // save actual write position
    1fb6:	str	r2, [r5, #0]
        }
      }
    } // copied now all data
    outptr=(int16_t *)ptr; // save actual write position
*/
    if(!state)
    1fb8:	cmp	r3, #0
    1fba:	bne.w	1d5e <loop+0x4a>
    1fbe:	movs	r1, #6
    1fc0:	ldr	r0, [pc, #116]	; (2038 <loop+0x324>)
    1fc2:	bl	83cc <usb_serial_write>
    1fc6:	ldr	r0, [pc, #48]	; (1ff8 <loop+0x2e4>)
    1fc8:	bl	9cb8 <Print::println()>
    { 
#if DO_DEBUG>0
      Serial.println("closed");
#endif
      // store config again if you wanted time of latest file stored
      uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1fcc:	movs	r2, #8
    1fce:	str	r2, [sp, #0]
    1fd0:	ldr	r3, [pc, #88]	; (202c <loop+0x318>)
    1fd2:	ldr	r1, [pc, #60]	; (2010 <loop+0x2fc>)
    1fd4:	ldr	r0, [pc, #28]	; (1ff4 <loop+0x2e0>)
    1fd6:	bl	b78 <c_uSD::storeConfig(unsigned long*, int, long*, int)>
    1fda:	b.n	1d5e <loop+0x4a>
    1fdc:	.word	0x20017eb0
    1fe0:	.word	0x20016d34
    1fe4:	.word	0x2001c95c
    1fe8:	.word	0x2001c5ac
    1fec:	.word	0x2001c5a4
    1ff0:	.word	0x20017eac
    1ff4:	.word	0x2001799c
    1ff8:	.word	0x20016f24
    1ffc:	.word	0x00013294
    2000:	.word	0x2001caf0
    2004:	.word	0x2001c5a0
    2008:	.word	0x2001c114
    200c:	.word	0x2001c5a8
    2010:	.word	0x20016d64
    2014:	.word	0x4004803c
    2018:	.word	0x20016d38
    201c:	.word	0x2001c16e
    2020:	.word	0x2001c0b4
    2024:	.word	0x20017ea8
    2028:	.word	0x200180b4
    202c:	.word	0x20016d44
    2030:	.word	0x00013288
    2034:	.word	0x2001c170
    2038:	.word	0x00013280
    203c:	.word	0x2001ca70
    }
    //
    if(state==0)
    { // generate header before file is opened
      #ifdef GEN_WAV_FILE // is declared in audio_logger_if.h
         uint32_t *header=(uint32_t *) wavHeader(0); // call initially with zero filesize
    2040:	bl	97c <wavHeader(unsigned long)>
         //
         int ndat=outptr-diskBuffer;
    2044:	ldr.w	lr, [r5]
    2048:	ldr	r2, [pc, #132]	; (20d0 <loop+0x3bc>)
    204a:	rsb	r4, r2, lr
    204e:	asrs	r4, r4, #1
         if(ndat>0)
    2050:	cmp	r4, #0
    2052:	ble.n	206e <loop+0x35a>
    2054:	add.w	r4, r4, #2147483648	; 0x80000000
    2058:	subs	r4, #1
    205a:	add.w	r4, r2, r4, lsl #1
    205e:	subs	r3, r2, #2
    2060:	adds	r2, #42	; 0x2a
         { // shift exisiting data after header, which is always at beginnig of file
          for(int ii=0; ii<ndat; ii++) diskBuffer[22+ii]=diskBuffer[ii]; 
    2062:	ldrsh.w	r1, [r3, #2]!
    2066:	strh.w	r1, [r2, #2]!
    206a:	cmp	r3, r4
    206c:	bne.n	2062 <loop+0x34e>
    206e:	ldr	r2, [pc, #96]	; (20d0 <loop+0x3bc>)
    2070:	subs	r3, r0, #4
    2072:	adds	r0, #40	; 0x28
         }
         // copy header to disk buffer
         uint32_t *ptr=(uint32_t *) diskBuffer;
         for(int ii=0;ii<11;ii++) ptr[ii] = header[ii];
    2074:	ldr.w	r1, [r3, #4]!
    2078:	str.w	r1, [r2], #4
    207c:	cmp	r0, r3
    207e:	bne.n	2074 <loop+0x360>
         outptr+=22; //(44 bytes)
    2080:	add.w	r3, lr, #44	; 0x2c
         uint32_t *ptr=(uint32_t *) diskBuffer;
         // copy to disk buffer
         for(int ii=0;ii<128;ii++) ptr[ii] = header[ii];
         outptr+=256; //(512 bytes)
      #endif
      state=1;
    2084:	movs	r2, #1
          for(int ii=0; ii<ndat; ii++) diskBuffer[22+ii]=diskBuffer[ii]; 
         }
         // copy header to disk buffer
         uint32_t *ptr=(uint32_t *) diskBuffer;
         for(int ii=0;ii<11;ii++) ptr[ii] = header[ii];
         outptr+=22; //(44 bytes)
    2086:	str	r3, [r5, #0]
         uint32_t *ptr=(uint32_t *) diskBuffer;
         // copy to disk buffer
         for(int ii=0;ii<128;ii++) ptr[ii] = header[ii];
         outptr+=256; //(512 bytes)
      #endif
      state=1;
    2088:	strh	r2, [r6, #0]
    208a:	b.n	1e0e <loop+0xfa>
  public:
    c_uSD(): state(-1), closing(0) {;}
    void init();
    int16_t write(int16_t * data, int32_t ndat);
    uint16_t getNbuf(void) {return nbuf;}
    void setClosing(void) {closing=1;}
    208c:	ldr	r3, [pc, #68]	; (20d4 <loop+0x3c0>)
    208e:	movs	r2, #1
    2090:	strh.w	r2, [r3, #1280]	; 0x500
    2094:	b.n	1e02 <loop+0xee>
void * mRecordQueue<MQ>::readBuffer(void)
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
    2096:	ldrh.w	lr, [r2, #586]	; 0x24a
	if (t == head) return NULL;
    209a:	ldrh.w	r8, [r2, #584]	; 0x248
void * mRecordQueue<MQ>::readBuffer(void)
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
    209e:	uxth.w	lr, lr
	if (t == head) return NULL;
    20a2:	uxth.w	r8, r8
	if (++t >= MQ) t = 0;
    20a6:	add.w	r4, lr, #1
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
	if (t == head) return NULL;
    20aa:	cmp	lr, r8
	if (++t >= MQ) t = 0;
    20ac:	uxth	r4, r4
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
	if (t == head) return NULL;
    20ae:	beq.w	1e26 <loop+0x112>
	if (++t >= MQ) t = 0;
    20b2:	cmp	r4, #136	; 0x88
    20b4:	ite	ls
    20b6:	movls	r3, r4
    20b8:	movhi	r4, r3
	userblock = queue[t];
    20ba:	adds	r3, #8
    20bc:	ldr.w	r3, [r2, r3, lsl #2]
    20c0:	str.w	r3, [r2, #580]	; 0x244
	tail = t;
    20c4:	strh.w	r4, [r2, #586]	; 0x24a
	return (void *) userblock->data;
    20c8:	adds	r3, #4
    20ca:	b.n	1e26 <loop+0x112>
    int32_t ndat = AUDIO_BLOCK_SAMPLES*NCH;
    
    // number of free samples on diskbuffer
    int32_t nout = diskBuffer+BUFFERSIZE - outptr;

    tmp = tempBuffer;
    20cc:	ldr	r4, [pc, #8]	; (20d8 <loop+0x3c4>)
    20ce:	b.n	1ed8 <loop+0x1c4>
    20d0:	.word	0x200180b4
    20d4:	.word	0x2001799c
    20d8:	.word	0x2001c170

000020dc <_GLOBAL__sub_I_acqParameters>:
    maxNoise=0;
 }
#endif

  asm("wfi"); // to save some power switch off idle cpu
}
    20dc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    20e0:	ldr	r7, [pc, #452]	; (22a8 <_GLOBAL__sub_I_acqParameters+0x1cc>)

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    20e2:	ldr	r6, [pc, #456]	; (22ac <_GLOBAL__sub_I_acqParameters+0x1d0>)
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    20e4:	ldr	r2, [r7, #0]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    20e6:	ldr.w	r8, [pc, #504]	; 22e0 <_GLOBAL__sub_I_acqParameters+0x204>
    20ea:	str.w	r8, [r6]
    20ee:	movs	r3, #0
    20f0:	strb	r3, [r6, #9]
    20f2:	str	r3, [r6, #16]
			active = false;
    20f4:	strb	r3, [r6, #8]
			destination_list = NULL;
    20f6:	str	r3, [r6, #12]
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    20f8:	cbnz	r2, 20fe <_GLOBAL__sub_I_acqParameters+0x22>
    20fa:	b.n	22a2 <_GLOBAL__sub_I_acqParameters+0x1c6>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
    20fc:	mov	r2, r3
    20fe:	ldr	r3, [r2, #20]
    2100:	cmp	r3, #0
    2102:	bne.n	20fc <_GLOBAL__sub_I_acqParameters+0x20>
				p->next_update = this;
    2104:	str	r6, [r2, #20]
			}
			next_update = NULL;
    2106:	movs	r4, #0
#include "DMAChannel.h"

class AudioInputI2SQuad : public AudioStream
{
public:
	AudioInputI2SQuad(void) : AudioStream(0, NULL) { begin(); }
    2108:	ldr	r3, [pc, #420]	; (22b0 <_GLOBAL__sub_I_acqParameters+0x1d4>)
    210a:	ldr	r0, [pc, #416]	; (22ac <_GLOBAL__sub_I_acqParameters+0x1d0>)
    210c:	str	r4, [r6, #20]
			cpu_cycles = 0;
    210e:	strh	r4, [r6, #4]
			cpu_cycles_max = 0;
    2110:	strh	r4, [r6, #6]
			numConnections = 0;
    2112:	strb	r4, [r6, #10]
    2114:	str	r3, [r6, #0]
    2116:	bl	2db0 <AudioInputI2SQuad::begin()>
  #include "input_i2s_quad.h"
  AudioInputI2SQuad     acq;
  
  #define mq (M_QUEU/NCH)
  #include "m_queue.h"
  mRecordQueue<mq> *queue = new mRecordQueue<mq> [NCH];
    211a:	mov.w	r0, #2368	; 0x940
    211e:	bl	a1bc <operator new[](unsigned int)>
    2122:	ldr.w	sl, [pc, #448]	; 22e4 <_GLOBAL__sub_I_acqParameters+0x208>
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    2126:	ldr.w	fp, [pc, #384]	; 22a8 <_GLOBAL__sub_I_acqParameters+0x1cc>
    212a:	mov	lr, r0
class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
    212c:	mov	r1, r4
    212e:	adds	r0, #28
    2130:	add.w	r9, lr, #2368	; 0x940
    2134:	mov	r2, lr

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    2136:	mov.w	ip, #1
    213a:	str.w	r8, [r0, #-28]
			active = false;
			destination_list = NULL;
    213e:	mov	r4, r0

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    2140:	strb.w	ip, [r2, #9]
    2144:	str	r0, [r2, #16]
			active = false;
    2146:	strb	r1, [r2, #8]
			destination_list = NULL;
    2148:	str	r1, [r2, #12]
    214a:	movs	r3, #0
    214c:	b.n	2150 <_GLOBAL__sub_I_acqParameters+0x74>
    214e:	ldr	r4, [r2, #16]
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
    2150:	str.w	r1, [r4, r3, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
    2154:	ldrb	r4, [r2, #9]
    2156:	adds	r3, #1
    2158:	cmp	r4, r3
    215a:	bgt.n	214e <_GLOBAL__sub_I_acqParameters+0x72>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    215c:	ldr	r4, [r7, #0]
    215e:	cbnz	r4, 2164 <_GLOBAL__sub_I_acqParameters+0x88>
    2160:	b.n	229c <_GLOBAL__sub_I_acqParameters+0x1c0>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
    2162:	mov	r4, r3
    2164:	ldr	r3, [r4, #20]
    2166:	cmp	r3, #0
    2168:	bne.n	2162 <_GLOBAL__sub_I_acqParameters+0x86>
				p->next_update = this;
    216a:	str	r2, [r4, #20]
			}
			next_update = NULL;
    216c:	str	r1, [r2, #20]
			cpu_cycles = 0;
    216e:	strh	r1, [r2, #4]
			cpu_cycles_max = 0;
    2170:	strh	r1, [r2, #6]
			numConnections = 0;
    2172:	strb	r1, [r2, #10]
template <int MQ>
class mRecordQueue : public AudioStream
{
public:
	mRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
    2174:	str.w	sl, [r0, #-28]
    2178:	add.w	r2, r2, #592	; 0x250
    217c:	strh.w	r1, [r2, #-8]
    2180:	str.w	r1, [r2, #-12]
    2184:	strh.w	r1, [r2, #-6]
    2188:	strh.w	r1, [r2, #-4]
    218c:	cmp	r2, r9
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
    218e:	mov.w	r4, #0
    2192:	add.w	r0, r0, #592	; 0x250
    2196:	bne.n	213a <_GLOBAL__sub_I_acqParameters+0x5e>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    2198:	ldr	r7, [pc, #280]	; (22b4 <_GLOBAL__sub_I_acqParameters+0x1d8>)
    219a:	ldr.w	r8, [pc, #332]	; 22e8 <_GLOBAL__sub_I_acqParameters+0x20c>
    219e:	str.w	lr, [r7, #4]
		{ isConnected = false;
		  connect(); }
    21a2:	mov	r0, r7
    21a4:	str.w	lr, [r8]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    21a8:	str	r6, [r7, #0]
    21aa:	strb	r4, [r7, #8]
    21ac:	strb	r4, [r7, #9]
    21ae:	str	r4, [r7, #12]
		{ isConnected = false;
    21b0:	strb	r4, [r7, #16]
		  connect(); }
    21b2:	bl	9f54 <AudioConnection::connect()>

  AudioConnection     patchCord1(acq,0, queue[0],0);
    21b6:	ldr	r1, [pc, #256]	; (22b8 <_GLOBAL__sub_I_acqParameters+0x1dc>)
    21b8:	ldr	r2, [pc, #256]	; (22bc <_GLOBAL__sub_I_acqParameters+0x1e0>)
    21ba:	mov	r0, r7
    21bc:	bl	a8e0 <__aeabi_atexit>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    21c0:	ldr	r7, [pc, #252]	; (22c0 <_GLOBAL__sub_I_acqParameters+0x1e4>)
  AudioConnection     patchCord2(acq,1, queue[1],0);
    21c2:	ldr.w	r3, [r8]
    21c6:	str	r6, [r7, #0]
    21c8:	add.w	r3, r3, #592	; 0x250
    21cc:	movs	r2, #1
		{ isConnected = false;
		  connect(); }
    21ce:	mov	r0, r7
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    21d0:	str	r3, [r7, #4]
    21d2:	strb	r4, [r7, #9]
    21d4:	str	r4, [r7, #12]
		{ isConnected = false;
    21d6:	strb	r4, [r7, #16]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    21d8:	strb	r2, [r7, #8]
		{ isConnected = false;
		  connect(); }
    21da:	bl	9f54 <AudioConnection::connect()>
    21de:	ldr	r1, [pc, #216]	; (22b8 <_GLOBAL__sub_I_acqParameters+0x1dc>)
    21e0:	ldr	r2, [pc, #216]	; (22bc <_GLOBAL__sub_I_acqParameters+0x1e0>)
    21e2:	mov	r0, r7
    21e4:	bl	a8e0 <__aeabi_atexit>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    21e8:	ldr	r7, [pc, #216]	; (22c4 <_GLOBAL__sub_I_acqParameters+0x1e8>)
  AudioConnection     patchCord3(acq,2, queue[2],0);
    21ea:	ldr.w	r3, [r8]
    21ee:	str	r6, [r7, #0]
    21f0:	add.w	r3, r3, #1184	; 0x4a0
    21f4:	movs	r2, #2
		{ isConnected = false;
		  connect(); }
    21f6:	mov	r0, r7
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    21f8:	str	r3, [r7, #4]
    21fa:	strb	r4, [r7, #9]
    21fc:	str	r4, [r7, #12]
		{ isConnected = false;
    21fe:	strb	r4, [r7, #16]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    2200:	strb	r2, [r7, #8]
		{ isConnected = false;
		  connect(); }
    2202:	bl	9f54 <AudioConnection::connect()>
    2206:	ldr	r1, [pc, #176]	; (22b8 <_GLOBAL__sub_I_acqParameters+0x1dc>)
    2208:	ldr	r2, [pc, #176]	; (22bc <_GLOBAL__sub_I_acqParameters+0x1e0>)
    220a:	mov	r0, r7
    220c:	bl	a8e0 <__aeabi_atexit>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    2210:	ldr	r7, [pc, #180]	; (22c8 <_GLOBAL__sub_I_acqParameters+0x1ec>)
  AudioConnection     patchCord4(acq,3, queue[3],0);
    2212:	ldr.w	r3, [r8]
    2216:	str	r6, [r7, #0]
    2218:	add.w	r3, r3, #1776	; 0x6f0
    221c:	movs	r2, #3
		{ isConnected = false;
		  connect(); }
    221e:	mov	r0, r7
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    2220:	str	r3, [r7, #4]
    2222:	strb	r4, [r7, #9]
    2224:	str	r4, [r7, #12]
		{ isConnected = false;
    2226:	strb	r4, [r7, #16]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    2228:	strb	r2, [r7, #8]
		{ isConnected = false;
		  connect(); }
    222a:	bl	9f54 <AudioConnection::connect()>
    222e:	mov	r0, r7
    2230:	ldr	r2, [pc, #136]	; (22bc <_GLOBAL__sub_I_acqParameters+0x1e0>)
    2232:	ldr	r1, [pc, #132]	; (22b8 <_GLOBAL__sub_I_acqParameters+0x1dc>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2234:	ldr	r6, [pc, #148]	; (22cc <_GLOBAL__sub_I_acqParameters+0x1f0>)
    2236:	bl	a8e0 <__aeabi_atexit>
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() : m_fVol(nullptr), m_xVol(nullptr) {}
    223a:	ldr	r3, [pc, #148]	; (22d0 <_GLOBAL__sub_I_acqParameters+0x1f4>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    223c:	ldr.w	lr, [pc, #172]	; 22ec <_GLOBAL__sub_I_acqParameters+0x210>
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
    2240:	ldr	r0, [pc, #144]	; (22d4 <_GLOBAL__sub_I_acqParameters+0x1f8>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    2242:	ldr	r1, [pc, #148]	; (22d8 <_GLOBAL__sub_I_acqParameters+0x1fc>)
    2244:	str.w	r4, [r3, #1144]	; 0x478
    2248:	movs	r7, #40	; 0x28
    224a:	str.w	r4, [r3, #1148]	; 0x47c
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    224e:	strb.w	r4, [r3, #1168]	; 0x490
    2252:	strb.w	r4, [r3, #1194]	; 0x4aa
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    2256:	strb.w	r4, [r3, #1200]	; 0x4b0
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    225a:	strb.w	r4, [r3, #1208]	; 0x4b8
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
    225e:	str.w	r4, [r3, #1268]	; 0x4f4
    2262:	str.w	r4, [r3, #1272]	; 0x4f8
  private:
    SdFs sd;
    FsFile file;
    
  public:
    c_uSD(): state(-1), closing(0) {;}
    2266:	strh.w	r4, [r3, #1280]	; 0x500
    226a:	mov.w	r5, #1000	; 0x3e8
    226e:	movw	r4, #65535	; 0xffff
    2272:	strb.w	r7, [r3, #1191]	; 0x4a7
    2276:	str.w	r0, [r3, #1172]	; 0x494
    227a:	str.w	r1, [r3, #1180]	; 0x49c
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    227e:	str.w	lr, [r3, #1160]	; 0x488
  public:
  void loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2);
  void storeConfig(uint32_t * param1, int n1, int32_t *param2, int n2);
  void writeTemperature(float temperature, float pressure, float humidity, uint16_t lux);
};
c_uSD uSD;
    2282:	mov	r0, r3
    2284:	str.w	r5, [r3, #1204]	; 0x4b4
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2288:	str.w	r6, [r3, #1196]	; 0x4ac
  private:
    SdFs sd;
    FsFile file;
    
  public:
    c_uSD(): state(-1), closing(0) {;}
    228c:	strh.w	r4, [r3, #1276]	; 0x4fc
  public:
  void loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2);
  void storeConfig(uint32_t * param1, int n1, int32_t *param2, int n2);
  void writeTemperature(float temperature, float pressure, float humidity, uint16_t lux);
};
c_uSD uSD;
    2290:	ldr	r2, [pc, #40]	; (22bc <_GLOBAL__sub_I_acqParameters+0x1e0>)
    2292:	ldr	r1, [pc, #72]	; (22dc <_GLOBAL__sub_I_acqParameters+0x200>)
    maxNoise=0;
 }
#endif

  asm("wfi"); // to save some power switch off idle cpu
}
    2294:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2298:	b.w	a8e0 <__aeabi_atexit>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
				first_update = this;
    229c:	str.w	r2, [fp]
    22a0:	b.n	216c <_GLOBAL__sub_I_acqParameters+0x90>
    22a2:	str	r6, [r7, #0]
    22a4:	b.n	2106 <_GLOBAL__sub_I_acqParameters+0x2a>
    22a6:	nop
    22a8:	.word	0x2001ca6c
    22ac:	.word	0x2001c584
    22b0:	.word	0x0001335c
    22b4:	.word	0x2001c0dc
    22b8:	.word	0x0000054d
    22bc:	.word	0x20016d30
    22c0:	.word	0x2001c570
    22c4:	.word	0x2001c148
    22c8:	.word	0x2001c15c
    22cc:	.word	0x00012d28
    22d0:	.word	0x2001799c
    22d4:	.word	0x0001340c
    22d8:	.word	0x38011001
    22dc:	.word	0x00000531
    22e0:	.word	0x00012cec
    22e4:	.word	0x00012cf8
    22e8:	.word	0x20017eb0
    22ec:	.word	0x00013464

000022f0 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    22f0:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    22f2:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    22f4:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    22f6:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    22f8:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    22fa:	beq.n	2304 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    22fc:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    2300:	b.w	99c0 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2304:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    2306:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    230a:	bx	r3

0000230c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>:
			}
		}
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    230c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2310:	ldr	r4, [r0, #0]
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    2312:	ldr	r5, [r4, #12]
    2314:	tst.w	r5, #16777216	; 0x1000000
		const uint8_t *p_write = (const uint8_t *)buf;
		uint8_t *p_read = (uint8_t *)retbuf;
		size_t count_read = count;

		// Lets clear the reader queue
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    2318:	ldr	r5, [pc, #484]	; (2500 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1f4>)
    231a:	str	r5, [r4, #0]

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    231c:	bne.n	23c4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xb8>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    231e:	lsls	r7, r3, #31
    2320:	bpl.w	248a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17e>
		    if (p_write) {
    2324:	cmp	r1, #0
    2326:	beq.w	24f0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1e4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    232a:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    232c:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    232e:	it	ne
    2330:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    2334:	str	r5, [r4, #52]	; 0x34
    2336:	adds	r1, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    2338:	ldrb.w	r8, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    233c:	add.w	ip, r3, #4294967295
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    2340:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    2344:	cmp.w	ip, #0
    2348:	beq.w	249c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
			// Push out the next byte; 
		    if (p_write) {
    234c:	cbz	r1, 2358 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x4c>
		    	w = (*p_write++) << 8;
				w |= *p_write++;
    234e:	ldrb	r5, [r1, #1]
	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
    2350:	ldrb.w	r8, [r1], #2
				w |= *p_write++;
    2354:	orr.w	r8, r5, r8, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2358:	ldr	r5, [r0, #4]
    235a:	ldrb	r6, [r5, #8]
			if (count == 2)
    235c:	cmp.w	ip, #2
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2360:	add.w	r6, r6, #4294967295
    2364:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    2368:	ite	eq
    236a:	orreq.w	r5, r8, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    236e:	orrne.w	r5, r8, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2372:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    2374:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    2376:	sub.w	ip, ip, #2
    237a:	b.n	238e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x82>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    237c:	cbz	r2, 2382 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x76>
							*p_read++ = w;  // Read any pending RX bytes in
    237e:	strb	r4, [r2, #0]
    2380:	adds	r2, #1
						} 
						count_read--;
    2382:	subs	r3, #1
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2384:	and.w	r5, r5, #61440	; 0xf000
    2388:	cmp	r5, r6
    238a:	bls.n	23ba <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xae>
    238c:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    238e:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    2390:	tst.w	r5, #240	; 0xf0
    2394:	beq.n	2384 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x78>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    2396:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    2398:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
    239c:	mov	r7, r2
    239e:	mov.w	lr, r4, asr #8
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    23a2:	bne.n	237c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x70>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    23a4:	cbz	r2, 23ae <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xa2>
							*p_read++ = w >> 8;
    23a6:	strb.w	lr, [r7], #2
							*p_read++ = (w & 0xff);
    23aa:	strb	r4, [r2, #1]
    23ac:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    23ae:	and.w	r5, r5, #61440	; 0xf000
    23b2:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
    23b4:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    23b8:	bhi.n	238c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x80>
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
    23ba:	cmp.w	ip, #0
    23be:	beq.n	249c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    23c0:	ldr	r4, [r0, #0]
    23c2:	b.n	234c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    23c4:	lsls	r5, r3, #31
    23c6:	bpl.n	2462 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x156>
		    if (p_write) {
    23c8:	cmp	r1, #0
    23ca:	beq.w	24e0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    23ce:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    23d0:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    23d2:	it	ne
    23d4:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    23d8:	str	r5, [r4, #52]	; 0x34
    23da:	adds	r1, #1
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    23dc:	add.w	lr, r3, #4294967295
		}

	    uint16_t w = _transferWriteFill;
    23e0:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    23e4:	cmp.w	lr, #0
    23e8:	beq.n	246e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
			// Push out the next byte; 
		    if (p_write) {
    23ea:	cbz	r1, 23f8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xec>
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
    23ec:	ldrb.w	ip, [r1, #1]
    23f0:	ldrb	r5, [r1, #0]
    23f2:	adds	r1, #2
    23f4:	orr.w	ip, r5, ip, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    23f8:	ldr	r5, [r0, #4]
    23fa:	ldrb	r6, [r5, #8]
			if (count == 2)
    23fc:	cmp.w	lr, #2
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2400:	add.w	r6, r6, #4294967295
    2404:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    2408:	ite	eq
    240a:	orreq.w	r5, ip, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    240e:	orrne.w	r5, ip, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2412:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    2414:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    2416:	sub.w	lr, lr, #2
    241a:	b.n	242e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x122>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    241c:	cbz	r2, 2422 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x116>
							*p_read++ = w;  // Read any pending RX bytes in
    241e:	strb	r4, [r2, #0]
    2420:	adds	r2, #1
						} 
						count_read--;
    2422:	subs	r3, #1
							*p_read++ = w >> 8;
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2424:	and.w	r5, r5, #61440	; 0xf000
    2428:	cmp	r5, r6
    242a:	bls.n	2458 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x14c>
    242c:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    242e:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    2430:	tst.w	r5, #240	; 0xf0
    2434:	beq.n	2424 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x118>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    2436:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
    243a:	mov	r7, r2
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    243c:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    243e:	bne.n	241c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x110>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    2440:	cbz	r2, 244c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x140>
							*p_read++ = (w & 0xff);
    2442:	strb.w	r4, [r7], #2
							*p_read++ = w >> 8;
    2446:	asrs	r4, r4, #8
    2448:	strb	r4, [r2, #1]
    244a:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    244c:	and.w	r5, r5, #61440	; 0xf000
    2450:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
							*p_read++ = w >> 8;
						}
						count_read -= 2;
    2452:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2456:	bhi.n	242c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x120>
			count--;
		}

	    uint16_t w = _transferWriteFill;

		while (count > 0) {
    2458:	cmp.w	lr, #0
    245c:	beq.n	246e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
    245e:	ldr	r4, [r0, #0]
    2460:	b.n	23ea <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    2462:	mov	lr, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w = _transferWriteFill;
    2464:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    2468:	cmp.w	lr, #0
    246c:	bne.n	23ea <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    246e:	cbz	r3, 24b8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    2470:	ldr	r4, [r0, #0]
			sr = port().SR;
    2472:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    2474:	tst.w	r1, #240	; 0xf0
    2478:	beq.n	2472 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x166>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    247a:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    247c:	lsls	r4, r3, #31
    247e:	bpl.n	24bc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1b0>
					if (p_read)
    2480:	cbz	r2, 2486 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17a>
						*p_read++ = w;  // Read any pending RX bytes in
    2482:	strb	r1, [r2, #0]
    2484:	adds	r2, #1
					count_read--;
    2486:	subs	r3, #1
    2488:	b.n	246e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    248a:	ldrb.w	r8, [r0, #44]	; 0x2c
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    248e:	mov	ip, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    2490:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    2494:	cmp.w	ip, #0
    2498:	bne.w	234c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    249c:	cbz	r3, 24b8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
    249e:	ldr	r4, [r0, #0]
			sr = port().SR;
    24a0:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    24a2:	tst.w	r1, #240	; 0xf0
    24a6:	beq.n	24a0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x194>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
				if (count_read & 1) {
    24a8:	lsls	r6, r3, #31

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
			sr = port().SR;
			if (sr & 0xF0)  {
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    24aa:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    24ac:	bpl.n	24ce <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1c2>
					if (p_read)
    24ae:	cbz	r2, 24b4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1a8>
						*p_read++ = w;  // Read any pending RX bytes in
    24b0:	strb	r1, [r2, #0]
    24b2:	adds	r2, #1
					count_read--;
    24b4:	subs	r3, #1
    24b6:	b.n	249c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    24b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    24bc:	cbz	r2, 24ca <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1be>
						*p_read++ = (w & 0xff);
    24be:	mov	r4, r2
						*p_read++ = w >> 8;
    24c0:	asrs	r5, r1, #8
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
						*p_read++ = (w & 0xff);
    24c2:	strb.w	r1, [r4], #2
						*p_read++ = w >> 8;
    24c6:	strb	r5, [r2, #1]
    24c8:	mov	r2, r4
					}
					count_read -= 2;
    24ca:	subs	r3, #2
    24cc:	b.n	246e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    24ce:	cbz	r2, 24dc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d0>
						*p_read++ = w >> 8;
    24d0:	mov	r4, r2
    24d2:	asrs	r5, r1, #8
    24d4:	strb.w	r5, [r4], #2
						*p_read++ = (w & 0xff);
    24d8:	strb	r1, [r2, #1]
    24da:	mov	r2, r4
					}
					count_read -= 2;
    24dc:	subs	r3, #2
    24de:	b.n	249c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    24e0:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    24e4:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    24e6:	it	ne
    24e8:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    24ec:	str	r5, [r4, #52]	; 0x34
    24ee:	b.n	23dc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xd0>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    24f0:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    24f4:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    24f6:	it	ne
    24f8:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    24fc:	str	r5, [r4, #52]	; 0x34
    24fe:	b.n	2338 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x2c>
    2500:	.word	0x801f0400

00002504 <_spi_dma_rxISR0()>:
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2504:	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    2506:	ldr	r3, [pc, #280]	; (2620 <_spi_dma_rxISR0()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    2508:	ldr	r2, [pc, #280]	; (2624 <_spi_dma_rxISR0()+0x120>)
    250a:	ldr	r0, [r3, #56]	; 0x38
    250c:	ldr	r4, [r3, #52]	; 0x34
    250e:	ldrb	r1, [r0, #4]
    2510:	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    2512:	ldr	r1, [pc, #276]	; (2628 <_spi_dma_rxISR0()+0x124>)
    2514:	ldrb	r2, [r4, #4]
    2516:	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    2518:	ldr	r2, [r3, #48]	; 0x30
    251a:	ldrb	r0, [r0, #4]
    251c:	strb	r0, [r1, #0]
    251e:	cmp	r2, #0
    2520:	beq.n	25b0 <_spi_dma_rxISR0()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    2522:	ldr	r1, [r3, #4]
    2524:	ldr	r1, [r1, #12]
    2526:	cmp	r2, r1
    2528:	bhi.n	25a8 <_spi_dma_rxISR0()+0xa4>
    252a:	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    252c:	ldrh	r4, [r1, #30]
    252e:	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    2530:	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2534:	bmi.n	2602 <_spi_dma_rxISR0()+0xfe>
		tcd->BITER = len & 0x7fff;
    2536:	ubfx	r0, r0, #0, #15
    253a:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    253c:	ldrh	r0, [r1, #30]
    253e:	uxth	r0, r0
    2540:	strh	r0, [r1, #22]
    2542:	ldr	r1, [r3, #56]	; 0x38
    2544:	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2546:	ldrh	r0, [r1, #30]
    2548:	lsls	r0, r0, #16
    254a:	bmi.n	25f2 <_spi_dma_rxISR0()+0xee>
		tcd->BITER = len & 0x7fff;
    254c:	ubfx	r0, r2, #0, #15
    2550:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    2552:	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    2554:	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    2556:	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    2558:	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    255c:	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    255e:	it	ne
    2560:	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    2562:	str	r4, [r3, #48]	; 0x30
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    2564:	ldr	r1, [r3, #52]	; 0x34
    2566:	ldr	r0, [pc, #184]	; (2620 <_spi_dma_rxISR0()+0x11c>)
    2568:	ldr	r1, [r1, #0]
    256a:	ldr	r5, [r1, #0]
    256c:	add.w	r4, r0, #44	; 0x2c
    2570:	cmp	r5, r4
    2572:	beq.n	25e2 <_spi_dma_rxISR0()+0xde>
    2574:	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    2576:	ldr	r4, [r0, #12]
    2578:	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    257c:	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    257e:	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    2580:	itete	ne
    2582:	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    2584:	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    2586:	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    2588:	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    258a:	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    258e:	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    2590:	str	r4, [r0, #52]	; 0x34
    2592:	ldr	r1, [r3, #56]	; 0x38
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    2594:	ldr	r3, [pc, #148]	; (262c <_spi_dma_rxISR0()+0x128>)
    2596:	ldrb	r1, [r1, #4]
    2598:	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    259a:	ldr	r1, [pc, #132]	; (2620 <_spi_dma_rxISR0()+0x11c>)
		if (should_reenable_tx)
    259c:	cbz	r2, 25a4 <_spi_dma_rxISR0()+0xa0>
    259e:	ldr	r2, [r1, #52]	; 0x34
    25a0:	ldrb	r2, [r2, #4]
    25a2:	strb	r2, [r3, #0]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    25a4:	pop	{r4, r5, r6, r7}
    25a6:	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    25a8:	subs	r2, r2, r1
    25aa:	str	r2, [r3, #48]	; 0x30
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    25ac:	movs	r2, #1
    25ae:	b.n	2564 <_spi_dma_rxISR0()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    25b0:	ldr	r0, [r3, #60]	; 0x3c
    25b2:	ldr	r1, [r3, #0]
    25b4:	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    25b6:	ldr	r4, [pc, #120]	; (2630 <_spi_dma_rxISR0()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    25b8:	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    25ba:	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    25bc:	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    25be:	ldr	r5, [r5, #0]
    25c0:	ldr	r6, [pc, #112]	; (2634 <_spi_dma_rxISR0()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    25c2:	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    25c6:	movs	r7, #3
    25c8:	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    25ca:	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    25cc:	strb.w	r7, [r3, #45]	; 0x2d
    25d0:	bne.n	2612 <_spi_dma_rxISR0()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    25d2:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    25d4:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    25d6:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    25d8:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    25da:	beq.n	261a <_spi_dma_rxISR0()+0x116>
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    25dc:	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    25de:	b.w	99c0 <EventResponder::triggerEventNotImmediate()>
    25e2:	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    25e4:	ldrb.w	r0, [r0, #44]	; 0x2c

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    25e8:	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    25ea:	orr.w	r0, r0, #2147483648	; 0x80000000
    25ee:	str	r0, [r1, #52]	; 0x34
    25f0:	b.n	2592 <_spi_dma_rxISR0()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    25f2:	ldrh	r4, [r1, #30]
    25f4:	ubfx	r0, r2, #0, #9
    25f8:	and.w	r4, r4, #65024	; 0xfe00
    25fc:	orrs	r0, r4
    25fe:	strh	r0, [r1, #30]
    2600:	b.n	2552 <_spi_dma_rxISR0()+0x4e>
    2602:	ldrh	r4, [r1, #30]
    2604:	ubfx	r0, r0, #0, #9
    2608:	and.w	r4, r4, #65024	; 0xfe00
    260c:	orrs	r0, r4
    260e:	strh	r0, [r1, #30]
    2610:	b.n	253c <_spi_dma_rxISR0()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2612:	mov	r3, r5
    2614:	mov	r1, r2
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2616:	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2618:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    261a:	ldr	r3, [r0, #8]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    261c:	pop	{r4, r5, r6, r7}
    261e:	bx	r3
    2620:	.word	0x20016d8c
    2624:	.word	0x4000801f
    2628:	.word	0x4000801c
    262c:	.word	0x4000801b
    2630:	.word	0xff0f0000
    2634:	.word	0x000022f1

00002638 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    2638:	cbz	r3, 263e <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    263a:	b.w	230c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>
    263e:	bx	lr

00002640 <breakTime(long, tmElements_t&)>:
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    2640:	ldr	r2, [pc, #400]	; (27d4 <breakTime(long, tmElements_t&)+0x194>)
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    2642:	ldr	r3, [pc, #404]	; (27d8 <breakTime(long, tmElements_t&)+0x198>)
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    2644:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2648:	ldr	r6, [pc, #400]	; (27dc <breakTime(long, tmElements_t&)+0x19c>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    264a:	ldr.w	sl, [pc, #416]	; 27ec <breakTime(long, tmElements_t&)+0x1ac>
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    264e:	ldr	r4, [pc, #400]	; (27e0 <breakTime(long, tmElements_t&)+0x1a0>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    2650:	ldr.w	r9, [pc, #400]	; 27e4 <breakTime(long, tmElements_t&)+0x1a4>
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    2654:	umull	r5, r2, r2, r0
    2658:	mov.w	ip, r2, lsr #16
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    265c:	add.w	r7, ip, #4
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    2660:	umull	r2, r5, r3, r0
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2664:	umull	r6, r2, r6, r0
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2668:	umull	sl, fp, r7, sl
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    266c:	lsrs	r5, r5, #5
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    266e:	lsrs	r2, r2, #11
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    2670:	umull	r6, r3, r3, r5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2674:	umull	r6, r4, r4, r2
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2678:	rsb	r6, fp, r7
    267c:	add.w	r6, fp, r6, lsr #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    2680:	lsrs	r3, r3, #5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2682:	lsrs	r6, r6, #2
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2684:	lsrs	r4, r4, #4
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2686:	rsb	r6, r6, r6, lsl #3
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    268a:	rsb	r3, r3, r3, lsl #4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    268e:	add.w	r4, r4, r4, lsl #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    2692:	sub.w	r3, r5, r3, lsl #2
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2696:	subs	r6, r7, r6
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    2698:	rsb	r5, r5, r5, lsl #4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    269c:	sub.w	r2, r2, r4, lsl #3
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    26a0:	sub.w	r0, r0, r5, lsl #2
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    26a4:	adds	r6, #1
    26a6:	movs	r4, #0
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    26a8:	strb	r2, [r1, #2]
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    26aa:	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    26ac:	strb	r3, [r1, #1]
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    26ae:	strb	r6, [r1, #3]
  
  year = 0;  
  days = 0;
    26b0:	mov	r2, r4
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    26b2:	movw	fp, #365	; 0x16d
    26b6:	mov.w	r8, #100	; 0x64
    26ba:	mov.w	sl, #400	; 0x190
    26be:	b.n	26de <breakTime(long, tmElements_t&)+0x9e>
    26c0:	rsb	r5, r6, r5, asr #7
    26c4:	mls	r5, sl, r5, r3
    26c8:	cbnz	r0, 2728 <breakTime(long, tmElements_t&)+0xe8>
    26ca:	cmp	r5, #0
    26cc:	ite	ne
    26ce:	movne	r0, fp
    26d0:	moveq.w	r0, #366	; 0x16e
    26d4:	add	r2, r0
    26d6:	cmp	ip, r2
    26d8:	add.w	r4, r4, #1
    26dc:	bcc.n	2706 <breakTime(long, tmElements_t&)+0xc6>
    26de:	uxtb	r7, r4
    26e0:	addw	r3, r7, #1970	; 0x7b2
    26e4:	smull	r0, r5, r9, r3
    26e8:	asrs	r6, r3, #31
    26ea:	rsb	r0, r6, r5, asr #5
    26ee:	ands.w	lr, r3, #3
    26f2:	mls	r0, r8, r0, r3
    26f6:	beq.n	26c0 <breakTime(long, tmElements_t&)+0x80>
    26f8:	movw	r0, #365	; 0x16d
    26fc:	add	r2, r0
    26fe:	cmp	ip, r2
    2700:	add.w	r4, r4, #1
    2704:	bcs.n	26de <breakTime(long, tmElements_t&)+0x9e>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    2706:	strb	r7, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    2708:	cmp.w	lr, #0
    270c:	bne.n	272e <breakTime(long, tmElements_t&)+0xee>
    270e:	ldr	r0, [pc, #212]	; (27e4 <breakTime(long, tmElements_t&)+0x1a4>)
    2710:	asrs	r6, r3, #31
    2712:	smull	r4, r0, r0, r3
    2716:	rsb	r4, r6, r0, asr #5
    271a:	movs	r5, #100	; 0x64
    271c:	mls	r4, r5, r4, r3
    2720:	cbz	r4, 2792 <breakTime(long, tmElements_t&)+0x152>
    2722:	mov.w	r4, #366	; 0x16e
    2726:	b.n	2734 <breakTime(long, tmElements_t&)+0xf4>
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    2728:	mov.w	r0, #366	; 0x16e
    272c:	b.n	26d4 <breakTime(long, tmElements_t&)+0x94>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    272e:	movw	r4, #365	; 0x16d
    2732:	asrs	r6, r3, #31
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    2734:	ldr	r0, [pc, #172]	; (27e4 <breakTime(long, tmElements_t&)+0x1a4>)
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    2736:	ldr	r5, [pc, #176]	; (27e8 <breakTime(long, tmElements_t&)+0x1a8>)
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    2738:	smull	r7, r0, r0, r3
    273c:	rsb	r8, r6, r0, asr #5
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    2740:	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    2742:	rsb	r6, r6, r0, asr #7
    2746:	movs	r4, #100	; 0x64
    2748:	mov.w	r0, #400	; 0x190
    274c:	mls	r6, r0, r6, r3
    2750:	mls	r8, r4, r8, r3
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    2754:	rsb	r2, r2, ip
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    2758:	movs	r0, #1
    275a:	movs	r3, #0
    275c:	b.n	2764 <breakTime(long, tmElements_t&)+0x124>
    275e:	adds	r0, #1
    2760:	uxtb	r0, r0
    2762:	adds	r3, #1
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    2764:	cmp	r3, #1
    2766:	uxtb	r7, r3
    2768:	beq.n	27ac <breakTime(long, tmElements_t&)+0x16c>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    276a:	ldrb	r4, [r3, r5]
    276c:	cmp	r4, r2
    276e:	bhi.n	2784 <breakTime(long, tmElements_t&)+0x144>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    2770:	cmp	r0, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    2772:	sub.w	r2, r2, r4
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    2776:	bne.n	275e <breakTime(long, tmElements_t&)+0x11e>
    2778:	movs	r7, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    277a:	adds	r2, #1
    277c:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    277e:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    2780:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2784:	adds	r7, #1
    2786:	uxtb	r7, r7
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    2788:	adds	r2, #1
    278a:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    278c:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    278e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    2792:	mov.w	r4, #400	; 0x190
    2796:	rsb	r0, r6, r0, asr #7
    279a:	mls	r0, r4, r0, r3
    279e:	cmp	r0, #0
    27a0:	movw	r4, #365	; 0x16d
    27a4:	it	eq
    27a6:	moveq.w	r4, #366	; 0x16e
    27aa:	b.n	2734 <breakTime(long, tmElements_t&)+0xf4>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    27ac:	cmp.w	lr, #0
    27b0:	bne.n	27c8 <breakTime(long, tmElements_t&)+0x188>
    27b2:	cmp.w	r8, #0
    27b6:	bne.n	27d0 <breakTime(long, tmElements_t&)+0x190>
    27b8:	cmp	r6, #0
    27ba:	ite	ne
    27bc:	movne	r4, #28
    27be:	moveq	r4, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    27c0:	cmp	r2, r4
    27c2:	bcc.n	27cc <breakTime(long, tmElements_t&)+0x18c>
      time -= monthLength;
    27c4:	subs	r2, r2, r4
    27c6:	b.n	275e <breakTime(long, tmElements_t&)+0x11e>
    27c8:	movs	r4, #28
    27ca:	b.n	27c0 <breakTime(long, tmElements_t&)+0x180>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    27cc:	movs	r7, #2
    27ce:	b.n	277a <breakTime(long, tmElements_t&)+0x13a>
    27d0:	movs	r4, #29
    27d2:	b.n	27c0 <breakTime(long, tmElements_t&)+0x180>
    27d4:	.word	0xc22e4507
    27d8:	.word	0x88888889
    27dc:	.word	0x91a2b3c5
    27e0:	.word	0xaaaaaaab
    27e4:	.word	0x51eb851f
    27e8:	.word	0x00013348
    27ec:	.word	0x24924925

000027f0 <refreshCache(long) [clone .part.0]>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    27f0:	push	{r4, lr}
  if (t != cacheTime) {
    breakTime(t, tm); 
    27f2:	ldr	r1, [pc, #12]	; (2800 <refreshCache(long) [clone .part.0]+0x10>)

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    27f4:	mov	r4, r0
  if (t != cacheTime) {
    breakTime(t, tm); 
    27f6:	bl	2640 <breakTime(long, tmElements_t&)>
    cacheTime = t; 
    27fa:	ldr	r3, [pc, #8]	; (2804 <refreshCache(long) [clone .part.0]+0x14>)
    27fc:	str	r4, [r3, #0]
    27fe:	pop	{r4, pc}
    2800:	.word	0x2001c5b4
    2804:	.word	0x2001c5b0

00002808 <makeTime(tmElements_t const&)>:
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
}

time_t makeTime(const tmElements_t &tm){   
    2808:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
    280c:	ldr	r1, [pc, #228]	; (28f4 <makeTime(tmElements_t const&)+0xec>)
    280e:	ldrb	r6, [r0, #6]
    2810:	mul.w	r1, r1, r6
  for (i = 0; i < tm.Year; i++) {
    2814:	cbz	r6, 2858 <makeTime(tmElements_t const&)+0x50>
    2816:	addw	ip, r6, #1970	; 0x7b2
    281a:	movw	r3, #1971	; 0x7b3
    if (LEAP_YEAR(i)) {
    281e:	ldr.w	lr, [pc, #216]	; 28f8 <makeTime(tmElements_t const&)+0xf0>
    2822:	movs	r7, #100	; 0x64
    2824:	mov.w	r8, #400	; 0x190
    2828:	b.n	2846 <makeTime(tmElements_t const&)+0x3e>
    282a:	tst.w	r3, #3
    282e:	bne.n	2844 <makeTime(tmElements_t const&)+0x3c>
    2830:	rsb	r2, r2, r5, asr #7
    2834:	mls	r2, r8, r2, r3
    2838:	cbnz	r4, 283c <makeTime(tmElements_t const&)+0x34>
    283a:	cbnz	r2, 2844 <makeTime(tmElements_t const&)+0x3c>
      seconds += SECS_PER_DAY;   // add extra days for leap years
    283c:	add.w	r1, r1, #86016	; 0x15000
    2840:	add.w	r1, r1, #384	; 0x180
    2844:	adds	r3, #1
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    if (LEAP_YEAR(i)) {
    2846:	smull	r2, r5, lr, r3
    284a:	asrs	r2, r3, #31
    284c:	rsb	r4, r2, r5, asr #5
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    2850:	cmp	r3, ip
    if (LEAP_YEAR(i)) {
    2852:	mls	r4, r7, r4, r3
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    2856:	bne.n	282a <makeTime(tmElements_t const&)+0x22>
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    2858:	ldrb	r7, [r0, #5]
    285a:	cmp	r7, #1
    285c:	ble.n	28be <makeTime(tmElements_t const&)+0xb6>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    285e:	ldr	r4, [pc, #152]	; (28f8 <makeTime(tmElements_t const&)+0xf0>)
    2860:	ldr	r2, [pc, #152]	; (28fc <makeTime(tmElements_t const&)+0xf4>)
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    2862:	ldr.w	lr, [pc, #156]	; 2900 <makeTime(tmElements_t const&)+0xf8>
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    2866:	addw	r3, r6, #1970	; 0x7b2
    286a:	smull	r4, r6, r4, r3
    286e:	asrs	r4, r3, #31
    2870:	rsb	ip, r4, r6, asr #5
    2874:	movs	r5, #100	; 0x64
    2876:	rsb	r6, r4, r6, asr #7
    287a:	mov.w	r4, #400	; 0x190
    287e:	mls	ip, r5, ip, r3
    2882:	mls	r6, r4, r6, r3
    2886:	and.w	r5, r3, #3
    288a:	movs	r3, #1
    288c:	b.n	289e <makeTime(tmElements_t const&)+0x96>
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    288e:	ldrb	r4, [r2, #0]
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    2890:	adds	r3, #1
    2892:	cmp	r3, r7
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    2894:	mla	r1, lr, r4, r1
    2898:	add.w	r2, r2, #1
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    289c:	beq.n	28be <makeTime(tmElements_t const&)+0xb6>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    289e:	cmp	r3, #2
    28a0:	bne.n	288e <makeTime(tmElements_t const&)+0x86>
    28a2:	cmp	r5, #0
    28a4:	bne.n	288e <makeTime(tmElements_t const&)+0x86>
    28a6:	cmp.w	ip, #0
    28aa:	beq.n	28e4 <makeTime(tmElements_t const&)+0xdc>
      seconds += SECS_PER_DAY * 29;
    28ac:	add.w	r1, r1, #2490368	; 0x260000
    28b0:	add.w	r1, r1, #15232	; 0x3b80
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    28b4:	adds	r3, #1
    28b6:	cmp	r3, r7
    28b8:	add.w	r2, r2, #1
    28bc:	bne.n	289e <makeTime(tmElements_t const&)+0x96>
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
  seconds+= tm.Second;
  return (time_t)seconds; 
    28be:	ldrb	r3, [r0, #1]
    28c0:	ldrb	r5, [r0, #2]
    28c2:	ldrb	r4, [r0, #0]
    28c4:	ldrb	r2, [r0, #4]
    28c6:	ldr	r0, [pc, #56]	; (2900 <makeTime(tmElements_t const&)+0xf8>)
    28c8:	rsb	r3, r3, r3, lsl #4
    28cc:	mov.w	r6, #3600	; 0xe10
    28d0:	lsls	r3, r3, #2
    28d2:	mla	r3, r6, r5, r3
    28d6:	add	r3, r4
    28d8:	subs	r2, #1
    28da:	mla	r0, r0, r2, r3
}
    28de:	add	r0, r1
    28e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    28e4:	cmp	r6, #0
    28e6:	bne.n	288e <makeTime(tmElements_t const&)+0x86>
      seconds += SECS_PER_DAY * 29;
    28e8:	add.w	r1, r1, #2490368	; 0x260000
    28ec:	add.w	r1, r1, #15232	; 0x3b80
    28f0:	b.n	28b4 <makeTime(tmElements_t const&)+0xac>
    28f2:	nop
    28f4:	.word	0x01e13380
    28f8:	.word	0x51eb851f
    28fc:	.word	0x00013348
    2900:	.word	0x00015180

00002904 <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    2904:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2906:	ldr	r4, [pc, #128]	; (2988 <now()+0x84>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    2908:	ldr	r6, [pc, #128]	; (298c <now()+0x88>)
    290a:	ldr	r3, [r4, #0]
    290c:	ldr	r2, [r6, #0]
    290e:	ldr	r5, [pc, #128]	; (2990 <now()+0x8c>)
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    2910:	sub	sp, #12
    2912:	ldr	r0, [r5, #0]
    2914:	str	r3, [sp, #0]
	return ret;
    2916:	ldr	r3, [sp, #0]
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    2918:	subs	r3, r3, r2
    291a:	cmp.w	r3, #1000	; 0x3e8
    291e:	bcc.n	2940 <now()+0x3c>
    2920:	adds	r0, #1
    2922:	b.n	2926 <now()+0x22>
    2924:	mov	r0, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2926:	ldr	r3, [r4, #0]
    2928:	str	r3, [sp, #0]
	return ret;
    292a:	ldr	r3, [sp, #0]
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    292c:	add.w	r2, r2, #1000	; 0x3e8
#endif


time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    2930:	subs	r3, r3, r2
    2932:	cmp.w	r3, #1000	; 0x3e8
    2936:	add.w	r1, r0, #1
    293a:	bcs.n	2924 <now()+0x20>
    293c:	str	r0, [r5, #0]
    293e:	str	r2, [r6, #0]
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    2940:	ldr	r7, [pc, #80]	; (2994 <now()+0x90>)
    2942:	ldr	r3, [r7, #0]
    2944:	cmp	r0, r3
    2946:	bcc.n	2968 <now()+0x64>
    if (getTimePtr != 0) {
    2948:	ldr	r3, [pc, #76]	; (2998 <now()+0x94>)
    294a:	ldr	r3, [r3, #0]
    294c:	cbz	r3, 2968 <now()+0x64>
      time_t t = getTimePtr();
    294e:	blx	r3
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    2950:	ldr	r3, [pc, #72]	; (299c <now()+0x98>)
#endif
  }
  if (nextSyncTime <= sysTime) {
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
    2952:	cbnz	r0, 296c <now()+0x68>
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    2954:	ldr	r1, [pc, #72]	; (29a0 <now()+0x9c>)
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    2956:	ldr	r2, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    2958:	ldrb	r3, [r1, #0]
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    295a:	ldr	r0, [r5, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    295c:	adds	r3, #0
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    295e:	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    2960:	it	ne
    2962:	movne	r3, #1
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    2964:	str	r2, [r7, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    2966:	strb	r3, [r1, #0]
      }
    }
  }  
  return (time_t)sysTime;
}
    2968:	add	sp, #12
    296a:	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    296c:	ldr	r2, [r4, #0]
    296e:	str	r2, [sp, #4]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    2970:	ldr	r3, [r3, #0]
  Status = timeSet;
    2972:	ldr	r2, [pc, #44]	; (29a0 <now()+0x9c>)
	return ret;
    2974:	ldr	r4, [sp, #4]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    2976:	str	r0, [r5, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
    2978:	add	r3, r0
  Status = timeSet;
    297a:	movs	r1, #2
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    297c:	str	r4, [r6, #0]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    297e:	str	r3, [r7, #0]
  Status = timeSet;
    2980:	strb	r1, [r2, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
      }
    }
  }  
  return (time_t)sysTime;
}
    2982:	add	sp, #12
    2984:	pop	{r4, r5, r6, r7, pc}
    2986:	nop
    2988:	.word	0x2001c95c
    298c:	.word	0x2001c5c8
    2990:	.word	0x2001c5bc
    2994:	.word	0x2001c5cc
    2998:	.word	0x2001c5c4
    299c:	.word	0x20016dcc
    29a0:	.word	0x2001c5c0

000029a4 <hour()>:
    breakTime(t, tm); 
    cacheTime = t; 
  }
}

int hour() { // the hour now 
    29a4:	push	{r3, lr}
  return hour(now()); 
    29a6:	bl	2904 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    29aa:	ldr	r3, [pc, #16]	; (29bc <hour()+0x18>)
    29ac:	ldr	r3, [r3, #0]
    29ae:	cmp	r0, r3
    29b0:	beq.n	29b6 <hour()+0x12>
    29b2:	bl	27f0 <refreshCache(long) [clone .part.0]>
  return hour(now()); 
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
  return tm.Hour;  
    29b6:	ldr	r3, [pc, #8]	; (29c0 <hour()+0x1c>)
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    29b8:	ldrb	r0, [r3, #2]
    29ba:	pop	{r3, pc}
    29bc:	.word	0x2001c5b0
    29c0:	.word	0x2001c5b4

000029c4 <minute()>:

uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
    29c4:	push	{r3, lr}
  return minute(now()); 
    29c6:	bl	2904 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    29ca:	ldr	r3, [pc, #16]	; (29dc <minute()+0x18>)
    29cc:	ldr	r3, [r3, #0]
    29ce:	cmp	r0, r3
    29d0:	beq.n	29d6 <minute()+0x12>
    29d2:	bl	27f0 <refreshCache(long) [clone .part.0]>
  return minute(now()); 
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
    29d6:	ldr	r3, [pc, #8]	; (29e0 <minute()+0x1c>)
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
    29d8:	ldrb	r0, [r3, #1]
    29da:	pop	{r3, pc}
    29dc:	.word	0x2001c5b0
    29e0:	.word	0x2001c5b4

000029e4 <second()>:
int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
}

int second() {
    29e4:	push	{r3, lr}
  return second(now()); 
    29e6:	bl	2904 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    29ea:	ldr	r3, [pc, #16]	; (29fc <second()+0x18>)
    29ec:	ldr	r3, [r3, #0]
    29ee:	cmp	r0, r3
    29f0:	beq.n	29f6 <second()+0x12>
    29f2:	bl	27f0 <refreshCache(long) [clone .part.0]>
  return second(now()); 
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
    29f6:	ldr	r3, [pc, #8]	; (2a00 <second()+0x1c>)
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
    29f8:	ldrb	r0, [r3, #0]
    29fa:	pop	{r3, pc}
    29fc:	.word	0x2001c5b0
    2a00:	.word	0x2001c5b4

00002a04 <day()>:
int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
}

int day(){
    2a04:	push	{r3, lr}
  return(day(now())); 
    2a06:	bl	2904 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2a0a:	ldr	r3, [pc, #16]	; (2a1c <day()+0x18>)
    2a0c:	ldr	r3, [r3, #0]
    2a0e:	cmp	r0, r3
    2a10:	beq.n	2a16 <day()+0x12>
    2a12:	bl	27f0 <refreshCache(long) [clone .part.0]>
  return(day(now())); 
}

int day(time_t t) { // the day for the given time (0-6)
  refreshCache(t);
  return tm.Day;
    2a16:	ldr	r3, [pc, #8]	; (2a20 <day()+0x1c>)
  return tm.Second;
}

int day(){
  return(day(now())); 
}
    2a18:	ldrb	r0, [r3, #4]
    2a1a:	pop	{r3, pc}
    2a1c:	.word	0x2001c5b0
    2a20:	.word	0x2001c5b4

00002a24 <month()>:
int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
   
int month(){
    2a24:	push	{r3, lr}
  return month(now()); 
    2a26:	bl	2904 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2a2a:	ldr	r3, [pc, #16]	; (2a3c <month()+0x18>)
    2a2c:	ldr	r3, [r3, #0]
    2a2e:	cmp	r0, r3
    2a30:	beq.n	2a36 <month()+0x12>
    2a32:	bl	27f0 <refreshCache(long) [clone .part.0]>
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
    2a36:	ldr	r3, [pc, #8]	; (2a40 <month()+0x1c>)
  return tm.Wday;
}
   
int month(){
  return month(now()); 
}
    2a38:	ldrb	r0, [r3, #5]
    2a3a:	pop	{r3, pc}
    2a3c:	.word	0x2001c5b0
    2a40:	.word	0x2001c5b4

00002a44 <year()>:
int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
    2a44:	push	{r3, lr}
  return year(now()); 
    2a46:	bl	2904 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2a4a:	ldr	r3, [pc, #20]	; (2a60 <year()+0x1c>)
    2a4c:	ldr	r3, [r3, #0]
    2a4e:	cmp	r0, r3
    2a50:	beq.n	2a56 <year()+0x12>
    2a52:	bl	27f0 <refreshCache(long) [clone .part.0]>
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
  return tmYearToCalendar(tm.Year);
    2a56:	ldr	r3, [pc, #12]	; (2a64 <year()+0x20>)
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    2a58:	ldrb	r0, [r3, #6]
}
    2a5a:	addw	r0, r0, #1970	; 0x7b2
    2a5e:	pop	{r3, pc}
    2a60:	.word	0x2001c5b0
    2a64:	.word	0x2001c5b4

00002a68 <setTime(int, int, int, int, int, int)>:
  nextSyncTime = (uint32_t)t + syncInterval;
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
} 

void setTime(int hr,int min,int sec,int dy, int mnth, int yr){
    2a68:	push	{r4, r5, r6, r7, lr}
    2a6a:	sub	sp, #12
    2a6c:	mov	r7, r0
    2a6e:	ldr	r4, [sp, #36]	; 0x24
    2a70:	ldr	r6, [sp, #32]
 // year can be given as full four digit year or two digts (2010 or 10 for 2010);  
 //it is converted to years since 1970
  if( yr > 99)
    2a72:	cmp	r4, #99	; 0x63
      yr = yr - 1970;
    2a74:	ite	gt
    2a76:	subwgt	r5, r4, #1970	; 0x7b2
  else
      yr += 30;  
    2a7a:	addle.w	r5, r4, #30
  tm.Year = yr;
    2a7e:	ldr	r4, [pc, #56]	; (2ab8 <setTime(int, int, int, int, int, int)+0x50>)
  tm.Month = mnth;
  tm.Day = dy;
  tm.Hour = hr;
  tm.Minute = min;
  tm.Second = sec;
  setTime(makeTime(tm));
    2a80:	mov	r0, r4
 //it is converted to years since 1970
  if( yr > 99)
      yr = yr - 1970;
  else
      yr += 30;  
  tm.Year = yr;
    2a82:	strb	r5, [r4, #6]
  tm.Month = mnth;
    2a84:	strb	r6, [r4, #5]
  tm.Day = dy;
    2a86:	strb	r3, [r4, #4]
  tm.Hour = hr;
    2a88:	strb	r7, [r4, #2]
  tm.Minute = min;
    2a8a:	strb	r1, [r4, #1]
  tm.Second = sec;
    2a8c:	strb	r2, [r4, #0]
  setTime(makeTime(tm));
    2a8e:	bl	2808 <makeTime(tmElements_t const&)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2a92:	ldr	r3, [pc, #40]	; (2abc <setTime(int, int, int, int, int, int)+0x54>)
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    2a94:	ldr	r2, [pc, #40]	; (2ac0 <setTime(int, int, int, int, int, int)+0x58>)
    2a96:	ldr	r3, [r3, #0]
    2a98:	ldr	r2, [r2, #0]
    2a9a:	str	r3, [sp, #4]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    2a9c:	ldr	r6, [pc, #36]	; (2ac4 <setTime(int, int, int, int, int, int)+0x5c>)
  nextSyncTime = (uint32_t)t + syncInterval;
    2a9e:	ldr	r5, [pc, #40]	; (2ac8 <setTime(int, int, int, int, int, int)+0x60>)
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    2aa0:	ldr	r1, [pc, #40]	; (2acc <setTime(int, int, int, int, int, int)+0x64>)
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
  Status = timeSet;
    2aa2:	ldr	r3, [pc, #44]	; (2ad0 <setTime(int, int, int, int, int, int)+0x68>)
	return ret;
    2aa4:	ldr	r4, [sp, #4]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    2aa6:	str	r0, [r6, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
    2aa8:	add	r0, r2
  Status = timeSet;
    2aaa:	movs	r2, #2
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    2aac:	str	r0, [r5, #0]
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    2aae:	str	r4, [r1, #0]
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
  Status = timeSet;
    2ab0:	strb	r2, [r3, #0]
  tm.Day = dy;
  tm.Hour = hr;
  tm.Minute = min;
  tm.Second = sec;
  setTime(makeTime(tm));
}
    2ab2:	add	sp, #12
    2ab4:	pop	{r4, r5, r6, r7, pc}
    2ab6:	nop
    2ab8:	.word	0x2001c5b4
    2abc:	.word	0x2001c95c
    2ac0:	.word	0x20016dcc
    2ac4:	.word	0x2001c5bc
    2ac8:	.word	0x2001c5cc
    2acc:	.word	0x2001c5c8
    2ad0:	.word	0x2001c5c0

00002ad4 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
    2ad4:	push	{r4, lr}
    2ad6:	mov	r4, r0
		release();
    2ad8:	bl	9988 <DMAChannel::release()>
	}
    2adc:	mov	r0, r4
    2ade:	pop	{r4, pc}

00002ae0 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE>:
audio_block_t * AudioOutputPWM::block_2nd = NULL;
uint32_t  AudioOutputPWM::block_offset = 0;
uint8_t AudioOutputPWM::interrupt_count = 0;

DMAMEM uint32_t pwm_dma_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputPWM::dma(false);
    2ae0:	ldr	r2, [pc, #8]	; (2aec <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0xc>)
    2ae2:	ldr	r1, [pc, #12]	; (2af0 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x10>)
    2ae4:	ldr	r0, [pc, #12]	; (2af4 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x14>)
    2ae6:	b.w	a8e0 <__aeabi_atexit>
    2aea:	nop
    2aec:	.word	0x20016d30
    2af0:	.word	0x00002ad5
    2af4:	.word	0x2001c5d0

00002af8 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S::block_left = NULL;
audio_block_t * AudioInputI2S::block_right = NULL;
uint16_t AudioInputI2S::block_offset = 0;
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);
    2af8:	ldr	r2, [pc, #8]	; (2b04 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    2afa:	ldr	r1, [pc, #12]	; (2b08 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    2afc:	ldr	r0, [pc, #12]	; (2b0c <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    2afe:	b.w	a8e0 <__aeabi_atexit>
    2b02:	nop
    2b04:	.word	0x20016d30
    2b08:	.word	0x00002ad5
    2b0c:	.word	0x2001c5d8

00002b10 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    2b10:	ldr	r2, [pc, #8]	; (2b1c <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    2b12:	ldr	r1, [pc, #12]	; (2b20 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    2b14:	ldr	r0, [pc, #12]	; (2b24 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    2b16:	b.w	a8e0 <__aeabi_atexit>
    2b1a:	nop
    2b1c:	.word	0x20016d30
    2b20:	.word	0x00002ad5
    2b24:	.word	0x2001c5e0

00002b28 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAChannel AudioOutputI2S::dma(false);
    2b28:	ldr	r2, [pc, #8]	; (2b34 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    2b2a:	ldr	r1, [pc, #12]	; (2b38 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    2b2c:	ldr	r0, [pc, #12]	; (2b3c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    2b2e:	b.w	a8e0 <__aeabi_atexit>
    2b32:	nop
    2b34:	.word	0x20016d30
    2b38:	.word	0x00002ad5
    2b3c:	.word	0x2001c5e8

00002b40 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
    2b40:	ldr	r2, [pc, #8]	; (2b4c <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
    2b42:	ldr	r1, [pc, #12]	; (2b50 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
    2b44:	ldr	r0, [pc, #12]	; (2b54 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
    2b46:	b.w	a8e0 <__aeabi_atexit>
    2b4a:	nop
    2b4c:	.word	0x20016d30
    2b50:	.word	0x00002ad5
    2b54:	.word	0x2001c5f0

00002b58 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE>:
uint16_t AudioInputAnalog::block_offset = 0;
int32_t AudioInputAnalog::hpf_y1 = 0;
int32_t AudioInputAnalog::hpf_x1 = 0;

bool AudioInputAnalog::update_responsibility = false;
DMAChannel AudioInputAnalog::dma(false);
    2b58:	ldr	r2, [pc, #8]	; (2b64 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0xc>)
    2b5a:	ldr	r1, [pc, #12]	; (2b68 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x10>)
    2b5c:	ldr	r0, [pc, #12]	; (2b6c <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x14>)
    2b5e:	b.w	a8e0 <__aeabi_atexit>
    2b62:	nop
    2b64:	.word	0x20016d30
    2b68:	.word	0x00002ad5
    2b6c:	.word	0x2001c5f8

00002b70 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE>:

DMAMEM __attribute__((aligned(32))) static uint16_t dac_buffer[AUDIO_BLOCK_SAMPLES*2];
audio_block_t * AudioOutputAnalog::block_left_1st = NULL;
audio_block_t * AudioOutputAnalog::block_left_2nd = NULL;
bool AudioOutputAnalog::update_responsibility = false;
DMAChannel AudioOutputAnalog::dma(false);
    2b70:	ldr	r2, [pc, #8]	; (2b7c <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0xc>)
    2b72:	ldr	r1, [pc, #12]	; (2b80 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x10>)
    2b74:	ldr	r0, [pc, #12]	; (2b84 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x14>)
    2b76:	b.w	a8e0 <__aeabi_atexit>
    2b7a:	nop
    2b7c:	.word	0x20016d30
    2b80:	.word	0x00002ad5
    2b84:	.word	0x2001c600

00002b88 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
    2b88:	ldr	r2, [pc, #8]	; (2b94 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    2b8a:	ldr	r1, [pc, #12]	; (2b98 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    2b8c:	ldr	r0, [pc, #12]	; (2b9c <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    2b8e:	b.w	a8e0 <__aeabi_atexit>
    2b92:	nop
    2b94:	.word	0x20016d30
    2b98:	.word	0x00002ad5
    2b9c:	.word	0x2001c608

00002ba0 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE>:
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
    2ba0:	push	{r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_left = 0;
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
    2ba2:	ldr	r5, [pc, #28]	; (2bc0 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x20>)
    2ba4:	ldr	r4, [pc, #28]	; (2bc4 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x24>)
    2ba6:	ldr	r0, [pc, #32]	; (2bc8 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x28>)
    2ba8:	mov	r2, r5
    2baa:	mov	r1, r4
    2bac:	bl	a8e0 <__aeabi_atexit>
DMAChannel AudioInputAnalogStereo::dma1(false);
    2bb0:	mov	r2, r5
    2bb2:	mov	r1, r4
    2bb4:	ldr	r0, [pc, #20]	; (2bcc <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x2c>)
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
    2bb6:	ldmia.w	sp!, {r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
DMAChannel AudioInputAnalogStereo::dma1(false);
    2bba:	b.w	a8e0 <__aeabi_atexit>
    2bbe:	nop
    2bc0:	.word	0x20016d30
    2bc4:	.word	0x00002ad5
    2bc8:	.word	0x2001c610
    2bcc:	.word	0x2001c618

00002bd0 <AudioInputI2SQuad::isr()>:
	uint32_t daddr, offset;
	const int16_t *src;
	int16_t *dest1, *dest2, *dest3, *dest4;

	//digitalWriteFast(3, HIGH);
	daddr = (uint32_t)(dma.TCD->DADDR);
    2bd0:	ldr	r3, [pc, #136]	; (2c5c <AudioInputI2SQuad::isr()+0x8c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    2bd2:	ldr	r1, [pc, #140]	; (2c60 <AudioInputI2SQuad::isr()+0x90>)
    2bd4:	ldr	r2, [r3, #0]
	dma.attachInterrupt(isr);
#endif
}

void AudioInputI2SQuad::isr(void)
{
    2bd6:	push	{r4, r5, r6, r7}
	uint32_t daddr, offset;
	const int16_t *src;
	int16_t *dest1, *dest2, *dest3, *dest4;

	//digitalWriteFast(3, HIGH);
	daddr = (uint32_t)(dma.TCD->DADDR);
    2bd8:	ldr	r2, [r2, #16]
	dma.clearInterrupt();

	if (daddr < (uint32_t)i2s_rx_buffer + sizeof(i2s_rx_buffer) / 2) {
    2bda:	ldr	r5, [pc, #136]	; (2c64 <AudioInputI2SQuad::isr()+0x94>)
    2bdc:	ldrb	r3, [r3, #4]
    2bde:	strb	r3, [r1, #0]
    2be0:	cmp	r2, r5
    2be2:	bcs.n	2c4e <AudioInputI2SQuad::isr()+0x7e>
		// DMA is receiving to the first half of the buffer
		// need to remove data from the second half
		src = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
		if (update_responsibility) update_all();
    2be4:	ldr	r3, [pc, #128]	; (2c68 <AudioInputI2SQuad::isr()+0x98>)
    2be6:	ldrb	r3, [r3, #0]
    2be8:	cmp	r3, #0
    2bea:	bne.n	2c54 <AudioInputI2SQuad::isr()+0x84>
	} else {
		// DMA is receiving to the second half of the buffer
		// need to remove data from the first half
		src = (int16_t *)&i2s_rx_buffer[0];
	}
	if (block_ch1) {
    2bec:	ldr	r3, [pc, #124]	; (2c6c <AudioInputI2SQuad::isr()+0x9c>)
    2bee:	ldr	r1, [r3, #0]
    2bf0:	cbz	r1, 2c4a <AudioInputI2SQuad::isr()+0x7a>
		offset = block_offset;
    2bf2:	ldr	r7, [pc, #124]	; (2c70 <AudioInputI2SQuad::isr()+0xa0>)
    2bf4:	ldrh	r4, [r7, #0]
		if (offset <= AUDIO_BLOCK_SAMPLES/2) {
    2bf6:	cmp	r4, #64	; 0x40
    2bf8:	bhi.n	2c4a <AudioInputI2SQuad::isr()+0x7a>
			arm_dcache_delete((void*)src, sizeof(i2s_rx_buffer) / 2);
			block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
			dest1 = &(block_ch1->data[offset]);
			dest2 = &(block_ch2->data[offset]);
			dest3 = &(block_ch3->data[offset]);
    2bfa:	ldr	r0, [pc, #120]	; (2c74 <AudioInputI2SQuad::isr()+0xa4>)
		offset = block_offset;
		if (offset <= AUDIO_BLOCK_SAMPLES/2) {
			arm_dcache_delete((void*)src, sizeof(i2s_rx_buffer) / 2);
			block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
			dest1 = &(block_ch1->data[offset]);
			dest2 = &(block_ch2->data[offset]);
    2bfc:	ldr	r2, [pc, #120]	; (2c78 <AudioInputI2SQuad::isr()+0xa8>)
			dest3 = &(block_ch3->data[offset]);
			dest4 = &(block_ch4->data[offset]);
    2bfe:	ldr	r3, [pc, #124]	; (2c7c <AudioInputI2SQuad::isr()+0xac>)
		if (offset <= AUDIO_BLOCK_SAMPLES/2) {
			arm_dcache_delete((void*)src, sizeof(i2s_rx_buffer) / 2);
			block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
			dest1 = &(block_ch1->data[offset]);
			dest2 = &(block_ch2->data[offset]);
			dest3 = &(block_ch3->data[offset]);
    2c00:	ldr	r6, [r0, #0]
		offset = block_offset;
		if (offset <= AUDIO_BLOCK_SAMPLES/2) {
			arm_dcache_delete((void*)src, sizeof(i2s_rx_buffer) / 2);
			block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
			dest1 = &(block_ch1->data[offset]);
			dest2 = &(block_ch2->data[offset]);
    2c02:	ldr	r0, [r2, #0]
			dest3 = &(block_ch3->data[offset]);
			dest4 = &(block_ch4->data[offset]);
    2c04:	ldr	r2, [r3, #0]
	if (block_ch1) {
		offset = block_offset;
		if (offset <= AUDIO_BLOCK_SAMPLES/2) {
			arm_dcache_delete((void*)src, sizeof(i2s_rx_buffer) / 2);
			block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
			dest1 = &(block_ch1->data[offset]);
    2c06:	lsls	r3, r4, #1
			dest2 = &(block_ch2->data[offset]);
			dest3 = &(block_ch3->data[offset]);
    2c08:	add	r6, r3
	if (block_ch1) {
		offset = block_offset;
		if (offset <= AUDIO_BLOCK_SAMPLES/2) {
			arm_dcache_delete((void*)src, sizeof(i2s_rx_buffer) / 2);
			block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
			dest1 = &(block_ch1->data[offset]);
    2c0a:	add	r1, r3
			dest2 = &(block_ch2->data[offset]);
    2c0c:	add	r0, r3
	}
	if (block_ch1) {
		offset = block_offset;
		if (offset <= AUDIO_BLOCK_SAMPLES/2) {
			arm_dcache_delete((void*)src, sizeof(i2s_rx_buffer) / 2);
			block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
    2c0e:	adds	r4, #64	; 0x40
			dest1 = &(block_ch1->data[offset]);
			dest2 = &(block_ch2->data[offset]);
			dest3 = &(block_ch3->data[offset]);
			dest4 = &(block_ch4->data[offset]);
    2c10:	add	r3, r2
    2c12:	adds	r2, r3, #2
    2c14:	adds	r6, #2
    2c16:	add.w	r3, r5, #8
    2c1a:	adds	r1, #2
	}
	if (block_ch1) {
		offset = block_offset;
		if (offset <= AUDIO_BLOCK_SAMPLES/2) {
			arm_dcache_delete((void*)src, sizeof(i2s_rx_buffer) / 2);
			block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
    2c1c:	strh	r4, [r7, #0]
    2c1e:	adds	r0, #2
    2c20:	add.w	r5, r5, #520	; 0x208
			dest1 = &(block_ch1->data[offset]);
			dest2 = &(block_ch2->data[offset]);
			dest3 = &(block_ch3->data[offset]);
			dest4 = &(block_ch4->data[offset]);
			for (int i=0; i < AUDIO_BLOCK_SAMPLES/2; i++) {
				*dest1++ = *src++;
    2c24:	ldrsh.w	r4, [r3, #-8]
    2c28:	strh.w	r4, [r1, #2]!
				*dest3++ = *src++;
    2c2c:	ldrsh.w	r4, [r3, #-6]
    2c30:	strh.w	r4, [r6, #2]!
				*dest2++ = *src++;
    2c34:	ldrsh.w	r4, [r3, #-4]
    2c38:	strh.w	r4, [r0, #2]!
    2c3c:	adds	r3, #8
				*dest4++ = *src++;
    2c3e:	ldrsh.w	r4, [r3, #-10]
    2c42:	strh.w	r4, [r2, #2]!
			block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
			dest1 = &(block_ch1->data[offset]);
			dest2 = &(block_ch2->data[offset]);
			dest3 = &(block_ch3->data[offset]);
			dest4 = &(block_ch4->data[offset]);
			for (int i=0; i < AUDIO_BLOCK_SAMPLES/2; i++) {
    2c46:	cmp	r3, r5
    2c48:	bne.n	2c24 <AudioInputI2SQuad::isr()+0x54>
				*dest4++ = *src++;
			}
		}
	}
	//digitalWriteFast(3, LOW);
}
    2c4a:	pop	{r4, r5, r6, r7}
    2c4c:	bx	lr
		src = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
		if (update_responsibility) update_all();
	} else {
		// DMA is receiving to the second half of the buffer
		// need to remove data from the first half
		src = (int16_t *)&i2s_rx_buffer[0];
    2c4e:	sub.w	r5, r5, #512	; 0x200
    2c52:	b.n	2bec <AudioInputI2SQuad::isr()+0x1c>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
    2c54:	ldr	r3, [pc, #40]	; (2c80 <AudioInputI2SQuad::isr()+0xb0>)
    2c56:	movs	r2, #1
    2c58:	str	r2, [r3, #0]
    2c5a:	b.n	2bec <AudioInputI2SQuad::isr()+0x1c>
    2c5c:	.word	0x2001c62c
    2c60:	.word	0x4000801f
    2c64:	.word	0x20016460
    2c68:	.word	0x2001c624
    2c6c:	.word	0x2001c638
    2c70:	.word	0x2001c634
    2c74:	.word	0x2001c620
    2c78:	.word	0x2001c63c
    2c7c:	.word	0x2001c628
    2c80:	.word	0xe000e208

00002c84 <AudioInputI2SQuad::update()>:
	//digitalWriteFast(3, LOW);
}


void AudioInputI2SQuad::update(void)
{
    2c84:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2c88:	mov	r8, r0
	audio_block_t *new1, *new2, *new3, *new4;
	audio_block_t *out1, *out2, *out3, *out4;

	// allocate 4 new blocks
	new1 = allocate();
    2c8a:	bl	9e0c <AudioStream::allocate()>
    2c8e:	mov	r5, r0
	new2 = allocate();
    2c90:	bl	9e0c <AudioStream::allocate()>
    2c94:	mov	r6, r0
	new3 = allocate();
    2c96:	bl	9e0c <AudioStream::allocate()>
    2c9a:	mov	r7, r0
	new4 = allocate();
    2c9c:	bl	9e0c <AudioStream::allocate()>
    2ca0:	mov	r4, r0
	// but if any fails, allocate none
	if (!new1 || !new2 || !new3 || !new4) {
    2ca2:	cbz	r5, 2cfc <AudioInputI2SQuad::update()+0x78>
    2ca4:	cbz	r6, 2cf6 <AudioInputI2SQuad::update()+0x72>
    2ca6:	cbz	r7, 2cf6 <AudioInputI2SQuad::update()+0x72>
    2ca8:	cbz	r0, 2cf6 <AudioInputI2SQuad::update()+0x72>
		if (new4) {
			release(new4);
			new4 = NULL;
		}
	}
	__disable_irq();
    2caa:	cpsid	i
	if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    2cac:	ldr	r3, [pc, #236]	; (2d9c <AudioInputI2SQuad::update()+0x118>)
    2cae:	ldrh	r2, [r3, #0]
    2cb0:	cmp	r2, #127	; 0x7f
    2cb2:	bhi.n	2d28 <AudioInputI2SQuad::update()+0xa4>
		release(out2);
		transmit(out3, 2);
		release(out3);
		transmit(out4, 3);
		release(out4);
	} else if (new1 != NULL) {
    2cb4:	cmp	r5, #0
    2cb6:	beq.n	2d94 <AudioInputI2SQuad::update()+0x110>
		// the DMA didn't fill blocks, but we allocated blocks
		if (block_ch1 == NULL) {
    2cb8:	ldr	r1, [pc, #228]	; (2da0 <AudioInputI2SQuad::update()+0x11c>)
    2cba:	ldr	r2, [r1, #0]
    2cbc:	cbz	r2, 2cdc <AudioInputI2SQuad::update()+0x58>
			block_ch4 = new4;
			block_offset = 0;
			__enable_irq();
		} else {
			// the DMA already has blocks, doesn't need these
			__enable_irq();
    2cbe:	cpsie	i
			release(new1);
    2cc0:	mov	r0, r5
    2cc2:	bl	9eb4 <AudioStream::release(audio_block_struct*)>
			release(new2);
    2cc6:	mov	r0, r6
    2cc8:	bl	9eb4 <AudioStream::release(audio_block_struct*)>
			release(new3);
    2ccc:	mov	r0, r7
    2cce:	bl	9eb4 <AudioStream::release(audio_block_struct*)>
			release(new4);
    2cd2:	mov	r0, r4
		// The DMA didn't fill blocks, and we could not allocate
		// memory... the system is likely starving for memory!
		// Sadly, there's nothing we can do.
		__enable_irq();
	}
}
    2cd4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			// the DMA already has blocks, doesn't need these
			__enable_irq();
			release(new1);
			release(new2);
			release(new3);
			release(new4);
    2cd8:	b.w	9eb4 <AudioStream::release(audio_block_struct*)>
	} else if (new1 != NULL) {
		// the DMA didn't fill blocks, but we allocated blocks
		if (block_ch1 == NULL) {
			// the DMA doesn't have any blocks to fill, so
			// give it the ones we just allocated
			block_ch1 = new1;
    2cdc:	str	r5, [r1, #0]
			block_ch2 = new2;
    2cde:	ldr.w	lr, [pc, #204]	; 2dac <AudioInputI2SQuad::update()+0x128>
			block_ch3 = new3;
    2ce2:	ldr	r0, [pc, #192]	; (2da4 <AudioInputI2SQuad::update()+0x120>)
			block_ch4 = new4;
    2ce4:	ldr	r1, [pc, #192]	; (2da8 <AudioInputI2SQuad::update()+0x124>)
			block_offset = 0;
    2ce6:	strh	r2, [r3, #0]
		// the DMA didn't fill blocks, but we allocated blocks
		if (block_ch1 == NULL) {
			// the DMA doesn't have any blocks to fill, so
			// give it the ones we just allocated
			block_ch1 = new1;
			block_ch2 = new2;
    2ce8:	str.w	r6, [lr]
			block_ch3 = new3;
    2cec:	str	r7, [r0, #0]
			block_ch4 = new4;
    2cee:	str	r4, [r1, #0]
			block_offset = 0;
			__enable_irq();
    2cf0:	cpsie	i
    2cf2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	new3 = allocate();
	new4 = allocate();
	// but if any fails, allocate none
	if (!new1 || !new2 || !new3 || !new4) {
		if (new1) {
			release(new1);
    2cf6:	mov	r0, r5
    2cf8:	bl	9eb4 <AudioStream::release(audio_block_struct*)>
			new1 = NULL;
		}
		if (new2) {
    2cfc:	cbz	r6, 2d04 <AudioInputI2SQuad::update()+0x80>
			release(new2);
    2cfe:	mov	r0, r6
    2d00:	bl	9eb4 <AudioStream::release(audio_block_struct*)>
			new2 = NULL;
		}
		if (new3) {
    2d04:	cbz	r7, 2d0c <AudioInputI2SQuad::update()+0x88>
			release(new3);
    2d06:	mov	r0, r7
    2d08:	bl	9eb4 <AudioStream::release(audio_block_struct*)>
			new3 = NULL;
		}
		if (new4) {
    2d0c:	cmp	r4, #0
    2d0e:	beq.n	2d8c <AudioInputI2SQuad::update()+0x108>
			release(new4);
    2d10:	mov	r0, r4
			new4 = NULL;
    2d12:	movs	r4, #0
		if (new3) {
			release(new3);
			new3 = NULL;
		}
		if (new4) {
			release(new4);
    2d14:	bl	9eb4 <AudioStream::release(audio_block_struct*)>
    2d18:	mov	r7, r4
    2d1a:	mov	r6, r4
    2d1c:	mov	r5, r4
			new4 = NULL;
		}
	}
	__disable_irq();
    2d1e:	cpsid	i
	if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    2d20:	ldr	r3, [pc, #120]	; (2d9c <AudioInputI2SQuad::update()+0x118>)
    2d22:	ldrh	r2, [r3, #0]
    2d24:	cmp	r2, #127	; 0x7f
    2d26:	bls.n	2cb4 <AudioInputI2SQuad::update()+0x30>
		// the DMA filled 4 blocks, so grab them and get the
		// 4 new blocks to the DMA, as quickly as possible
		out1 = block_ch1;
    2d28:	ldr	r1, [pc, #116]	; (2da0 <AudioInputI2SQuad::update()+0x11c>)
		block_ch1 = new1;
		out2 = block_ch2;
    2d2a:	ldr	r0, [pc, #128]	; (2dac <AudioInputI2SQuad::update()+0x128>)
		block_ch2 = new2;
		out3 = block_ch3;
    2d2c:	ldr	r2, [pc, #116]	; (2da4 <AudioInputI2SQuad::update()+0x120>)
	}
	__disable_irq();
	if (block_offset >= AUDIO_BLOCK_SAMPLES) {
		// the DMA filled 4 blocks, so grab them and get the
		// 4 new blocks to the DMA, as quickly as possible
		out1 = block_ch1;
    2d2e:	ldr.w	sl, [r1]
		block_ch1 = new1;
    2d32:	str	r5, [r1, #0]
		out2 = block_ch2;
		block_ch2 = new2;
		out3 = block_ch3;
		block_ch3 = new3;
		out4 = block_ch4;
    2d34:	ldr	r1, [pc, #112]	; (2da8 <AudioInputI2SQuad::update()+0x124>)
	if (block_offset >= AUDIO_BLOCK_SAMPLES) {
		// the DMA filled 4 blocks, so grab them and get the
		// 4 new blocks to the DMA, as quickly as possible
		out1 = block_ch1;
		block_ch1 = new1;
		out2 = block_ch2;
    2d36:	ldr.w	r9, [r0]
		block_ch2 = new2;
    2d3a:	str	r6, [r0, #0]
		out3 = block_ch3;
    2d3c:	ldr	r6, [r2, #0]
		block_ch3 = new3;
    2d3e:	str	r7, [r2, #0]
		out4 = block_ch4;
		block_ch4 = new4;
		block_offset = 0;
    2d40:	movs	r2, #0
		block_ch1 = new1;
		out2 = block_ch2;
		block_ch2 = new2;
		out3 = block_ch3;
		block_ch3 = new3;
		out4 = block_ch4;
    2d42:	ldr	r5, [r1, #0]
		block_ch4 = new4;
		block_offset = 0;
    2d44:	strh	r2, [r3, #0]
		out2 = block_ch2;
		block_ch2 = new2;
		out3 = block_ch3;
		block_ch3 = new3;
		out4 = block_ch4;
		block_ch4 = new4;
    2d46:	str	r4, [r1, #0]
		block_offset = 0;
		__enable_irq();
    2d48:	cpsie	i
		// then transmit the DMA's former blocks
		transmit(out1, 0);
    2d4a:	mov	r1, sl
    2d4c:	mov	r0, r8
    2d4e:	bl	9f08 <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(out1);
    2d52:	mov	r0, sl
    2d54:	bl	9eb4 <AudioStream::release(audio_block_struct*)>
		transmit(out2, 1);
    2d58:	mov	r1, r9
    2d5a:	mov	r0, r8
    2d5c:	movs	r2, #1
    2d5e:	bl	9f08 <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(out2);
    2d62:	mov	r0, r9
    2d64:	bl	9eb4 <AudioStream::release(audio_block_struct*)>
		transmit(out3, 2);
    2d68:	mov	r1, r6
    2d6a:	mov	r0, r8
    2d6c:	movs	r2, #2
    2d6e:	bl	9f08 <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(out3);
    2d72:	mov	r0, r6
    2d74:	bl	9eb4 <AudioStream::release(audio_block_struct*)>
		transmit(out4, 3);
    2d78:	mov	r0, r8
    2d7a:	mov	r1, r5
    2d7c:	movs	r2, #3
    2d7e:	bl	9f08 <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(out4);
    2d82:	mov	r0, r5
		// The DMA didn't fill blocks, and we could not allocate
		// memory... the system is likely starving for memory!
		// Sadly, there's nothing we can do.
		__enable_irq();
	}
}
    2d84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		transmit(out2, 1);
		release(out2);
		transmit(out3, 2);
		release(out3);
		transmit(out4, 3);
		release(out4);
    2d88:	b.w	9eb4 <AudioStream::release(audio_block_struct*)>
    2d8c:	mov	r7, r4
    2d8e:	mov	r6, r4
    2d90:	mov	r5, r4
    2d92:	b.n	2caa <AudioInputI2SQuad::update()+0x26>
		}
	} else {
		// The DMA didn't fill blocks, and we could not allocate
		// memory... the system is likely starving for memory!
		// Sadly, there's nothing we can do.
		__enable_irq();
    2d94:	cpsie	i
    2d96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d9a:	nop
    2d9c:	.word	0x2001c634
    2da0:	.word	0x2001c638
    2da4:	.word	0x2001c620
    2da8:	.word	0x2001c628
    2dac:	.word	0x2001c63c

00002db0 <AudioInputI2SQuad::begin()>:
DMAChannel AudioInputI2SQuad::dma(false);

#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1062__)

void AudioInputI2SQuad::begin(void)
{
    2db0:	push	{r3, r4, r5, r6, r7, lr}
	dma.begin(true); // Allocate the DMA channel first
    2db2:	ldr	r4, [pc, #164]	; (2e58 <AudioInputI2SQuad::begin()+0xa8>)

#if defined(KINETISK)
	// TODO: should we set & clear the I2S_RCSR_SR bit here?
	AudioOutputI2SQuad::config_i2s();

	CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
    2db4:	ldr	r5, [pc, #164]	; (2e5c <AudioInputI2SQuad::begin()+0xac>)
	dma.TCD->NBYTES_MLNO = 4;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 4;
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
    2db6:	ldr	r6, [pc, #168]	; (2e60 <AudioInputI2SQuad::begin()+0xb0>)

#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1062__)

void AudioInputI2SQuad::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first
    2db8:	mov	r0, r4
    2dba:	movs	r1, #1
    2dbc:	bl	98bc <DMAChannel::begin(bool)>

#if defined(KINETISK)
	// TODO: should we set & clear the I2S_RCSR_SR bit here?
	AudioOutputI2SQuad::config_i2s();
    2dc0:	bl	2eb8 <AudioOutputI2SQuad::config_i2s()>

	CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
#if defined(__MK20DX256__)
	CORE_PIN30_CONFIG = PORT_PCR_MUX(4); // pin 30, PTC11, I2S0_RXD1
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11, I2S0_RXD1
    2dc4:	ldr	r0, [pc, #156]	; (2e64 <AudioInputI2SQuad::begin()+0xb4>)
#endif

#if defined(KINETISK)
	dma.TCD->SADDR = &I2S0_RDR0;
    2dc6:	ldr	r2, [pc, #160]	; (2e68 <AudioInputI2SQuad::begin()+0xb8>)
	dma.TCD->SOFF = 4;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_SMOD(3) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 4;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
    2dc8:	ldr	r1, [pc, #160]	; (2e6c <AudioInputI2SQuad::begin()+0xbc>)

#if defined(KINETISK)
	// TODO: should we set & clear the I2S_RCSR_SR bit here?
	AudioOutputI2SQuad::config_i2s();

	CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
    2dca:	mov.w	r3, #1024	; 0x400
    2dce:	str	r3, [r5, #0]
#if defined(__MK20DX256__)
	CORE_PIN30_CONFIG = PORT_PCR_MUX(4); // pin 30, PTC11, I2S0_RXD1
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11, I2S0_RXD1
    2dd0:	str	r3, [r0, #0]
#endif

#if defined(KINETISK)
	dma.TCD->SADDR = &I2S0_RDR0;
    2dd2:	ldr	r3, [r4, #0]
	dma.TCD->SOFF = 4;
    2dd4:	movs	r5, #4
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11, I2S0_RXD1
#endif

#if defined(KINETISK)
	dma.TCD->SADDR = &I2S0_RDR0;
    2dd6:	str	r2, [r3, #0]
	dma.TCD->SOFF = 4;
    2dd8:	strh	r5, [r3, #4]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    2dda:	ldrb	r2, [r4, #4]
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_SMOD(3) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 4;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
    2ddc:	str	r1, [r3, #16]
    2dde:	add.w	r2, r2, #1073741824	; 0x40000000
    2de2:	add.w	r2, r2, #135168	; 0x21000
#endif

#if defined(KINETISK)
	dma.TCD->SADDR = &I2S0_RDR0;
	dma.TCD->SOFF = 4;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_SMOD(3) | DMA_TCD_ATTR_DSIZE(1);
    2de6:	movw	r7, #6401	; 0x1901
	dma.TCD->NBYTES_MLNO = 4;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
    2dea:	movs	r1, #2
#endif

#if defined(KINETISK)
	dma.TCD->SADDR = &I2S0_RDR0;
	dma.TCD->SOFF = 4;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_SMOD(3) | DMA_TCD_ATTR_DSIZE(1);
    2dec:	strh	r7, [r3, #6]
	dma.TCD->NBYTES_MLNO = 4;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
    2dee:	strh	r1, [r3, #20]
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 4;
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
    2df0:	str	r6, [r3, #24]
#if defined(KINETISK)
	dma.TCD->SADDR = &I2S0_RDR0;
	dma.TCD->SOFF = 4;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_SMOD(3) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 4;
	dma.TCD->SLAST = 0;
    2df2:	movs	r1, #0
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 4;
    2df4:	mov.w	r0, #256	; 0x100
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer) / 4;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    2df8:	movs	r7, #6
		*mux = 0;
		*mux = (source & 63) | DMAMUX_ENABLE;
    2dfa:	movs	r6, #140	; 0x8c
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_SMOD(3) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 4;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 4;
    2dfc:	strh	r0, [r3, #22]

#if defined(KINETISK)
	dma.TCD->SADDR = &I2S0_RDR0;
	dma.TCD->SOFF = 4;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_SMOD(3) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 4;
    2dfe:	str	r5, [r3, #8]
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 4;
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer) / 4;
    2e00:	strh	r0, [r3, #30]
#if defined(KINETISK)
	dma.TCD->SADDR = &I2S0_RDR0;
	dma.TCD->SOFF = 4;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_SMOD(3) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 4;
	dma.TCD->SLAST = 0;
    2e02:	str	r1, [r3, #12]
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 4;
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer) / 4;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    2e04:	strh	r7, [r3, #28]

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
    2e06:	strb	r1, [r2, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
    2e08:	strb	r6, [r2, #0]
#endif
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_RX);
	update_responsibility = update_setup();
    2e0a:	bl	a038 <AudioStream::update_setup()>
    2e0e:	ldr	r1, [pc, #96]	; (2e70 <AudioInputI2SQuad::begin()+0xc0>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    2e10:	ldr	r3, [pc, #96]	; (2e74 <AudioInputI2SQuad::begin()+0xc4>)
    2e12:	ldrb	r2, [r4, #4]
	dma.enable();

	I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
    2e14:	ldr	r7, [pc, #96]	; (2e78 <AudioInputI2SQuad::begin()+0xc8>)
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer) / 4;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
#endif
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_RX);
	update_responsibility = update_setup();
    2e16:	strb	r0, [r1, #0]
    2e18:	strb	r2, [r3, #0]
	dma.enable();

	I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
    2e1a:	ldr	r1, [r7, #0]
    2e1c:	ldrb	r2, [r4, #4]
	I2S0_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE; // TX clock enable, because sync'd to TX
    2e1e:	ldr	r4, [pc, #92]	; (2e7c <AudioInputI2SQuad::begin()+0xcc>)

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    2e20:	ldr	r5, [pc, #92]	; (2e80 <AudioInputI2SQuad::begin()+0xd0>)
    2e22:	ldr	r6, [pc, #96]	; (2e84 <AudioInputI2SQuad::begin()+0xd4>)
#endif
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_RX);
	update_responsibility = update_setup();
	dma.enable();

	I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
    2e24:	orr.w	r1, r1, #2449473536	; 0x92000000
    2e28:	orr.w	r1, r1, #1
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    2e2c:	asrs	r3, r2, #5
    2e2e:	str	r1, [r7, #0]
    2e30:	lsls	r3, r3, #2
	I2S0_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE; // TX clock enable, because sync'd to TX
    2e32:	ldr	r0, [r4, #0]
    2e34:	add.w	r3, r3, #3758096384	; 0xe0000000

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    2e38:	add.w	r7, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    2e3c:	add.w	r3, r3, #57600	; 0xe100
    2e40:	and.w	r2, r2, #31
    2e44:	movs	r1, #1
    2e46:	orr.w	r0, r0, #2415919104	; 0x90000000
    2e4a:	lsl.w	r2, r1, r2
    2e4e:	str	r0, [r4, #0]

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    2e50:	str.w	r6, [r5, r7, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    2e54:	str	r2, [r3, #0]
    2e56:	pop	{r3, r4, r5, r6, r7, pc}
    2e58:	.word	0x2001c62c
    2e5c:	.word	0x4004b014
    2e60:	.word	0xfffffc00
    2e64:	.word	0x4004b02c
    2e68:	.word	0x4002f0a0
    2e6c:	.word	0x20016260
    2e70:	.word	0x2001c624
    2e74:	.word	0x4000801b
    2e78:	.word	0x4002f080
    2e7c:	.word	0x4002f000
    2e80:	.word	0x20016800
    2e84:	.word	0x00002bd1

00002e88 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
    2e88:	ldr	r2, [pc, #8]	; (2e94 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    2e8a:	ldr	r1, [pc, #12]	; (2e98 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    2e8c:	ldr	r0, [pc, #12]	; (2e9c <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    2e8e:	b.w	a8e0 <__aeabi_atexit>
    2e92:	nop
    2e94:	.word	0x20016d30
    2e98:	.word	0x00002ad5
    2e9c:	.word	0x2001c62c

00002ea0 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE>:
audio_block_t * AudioOutputAnalogStereo::block_left_2nd = NULL;
audio_block_t * AudioOutputAnalogStereo::block_right_1st = NULL;
audio_block_t * AudioOutputAnalogStereo::block_right_2nd = NULL;
audio_block_t AudioOutputAnalogStereo::block_silent;
bool AudioOutputAnalogStereo::update_responsibility = false;
DMAChannel AudioOutputAnalogStereo::dma(false);
    2ea0:	ldr	r2, [pc, #8]	; (2eac <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0xc>)
    2ea2:	ldr	r1, [pc, #12]	; (2eb0 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0x10>)
    2ea4:	ldr	r0, [pc, #12]	; (2eb4 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0x14>)
    2ea6:	b.w	a8e0 <__aeabi_atexit>
    2eaa:	nop
    2eac:	.word	0x20016d30
    2eb0:	.word	0x00002ad5
    2eb4:	.word	0x2001c640

00002eb8 <AudioOutputI2SQuad::config_i2s()>:
#endif
#endif

void AudioOutputI2SQuad::config_i2s(void)
{
	SIM_SCGC6 |= SIM_SCGC6_I2S;
    2eb8:	ldr	r3, [pc, #160]	; (2f5c <AudioOutputI2SQuad::config_i2s()+0xa4>)
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    2eba:	ldr	r1, [pc, #164]	; (2f60 <AudioOutputI2SQuad::config_i2s()+0xa8>)
#endif
#endif

void AudioOutputI2SQuad::config_i2s(void)
{
	SIM_SCGC6 |= SIM_SCGC6_I2S;
    2ebc:	ldr	r2, [r3, #0]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;

	// if either transmitter or receiver is enabled, do nothing
	if (I2S0_TCSR & I2S_TCSR_TE) return;
    2ebe:	ldr	r0, [pc, #164]	; (2f64 <AudioOutputI2SQuad::config_i2s()+0xac>)
#endif
#endif

void AudioOutputI2SQuad::config_i2s(void)
{
	SIM_SCGC6 |= SIM_SCGC6_I2S;
    2ec0:	orr.w	r2, r2, #32768	; 0x8000
    2ec4:	str	r2, [r3, #0]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    2ec6:	ldr	r2, [r1, #0]
    2ec8:	orr.w	r2, r2, #2
    2ecc:	str	r2, [r1, #0]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    2ece:	ldr	r2, [r3, #0]
    2ed0:	orr.w	r2, r2, #2
    2ed4:	str	r2, [r3, #0]

	// if either transmitter or receiver is enabled, do nothing
	if (I2S0_TCSR & I2S_TCSR_TE) return;
    2ed6:	ldr	r3, [r0, #0]
    2ed8:	cmp	r3, #0
    2eda:	blt.n	2f58 <AudioOutputI2SQuad::config_i2s()+0xa0>
	if (I2S0_RCSR & I2S_RCSR_RE) return;
    2edc:	ldr	r3, [pc, #136]	; (2f68 <AudioOutputI2SQuad::config_i2s()+0xb0>)
    2ede:	ldr	r3, [r3, #0]
    2ee0:	cmp	r3, #0
    2ee2:	blt.n	2f58 <AudioOutputI2SQuad::config_i2s()+0xa0>

	// enable MCLK output
	I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
    2ee4:	ldr	r2, [pc, #132]	; (2f6c <AudioOutputI2SQuad::config_i2s()+0xb4>)
    2ee6:	mov.w	r3, #1124073472	; 0x43000000
    2eea:	str	r3, [r2, #0]
	while (I2S0_MCR & I2S_MCR_DUF) ;
    2eec:	ldr	r3, [r2, #0]
    2eee:	cmp	r3, #0
    2ef0:	blt.n	2eec <AudioOutputI2SQuad::config_i2s()+0x34>
  #define MCLK_SRC  0  // system clock
#endif
#endif

void AudioOutputI2SQuad::config_i2s(void)
{
    2ef2:	push	{r4, r5, r6, r7, lr}
	if (I2S0_RCSR & I2S_RCSR_RE) return;

	// enable MCLK output
	I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
	while (I2S0_MCR & I2S_MCR_DUF) ;
	I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
    2ef4:	ldr	r4, [pc, #120]	; (2f70 <AudioOutputI2SQuad::config_i2s()+0xb8>)

	// configure transmitter
	I2S0_TMR = 0;
    2ef6:	ldr	r0, [pc, #124]	; (2f74 <AudioOutputI2SQuad::config_i2s()+0xbc>)
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
    2ef8:	ldr.w	lr, [pc, #172]	; 2fa8 <AudioOutputI2SQuad::config_i2s()+0xf0>
	I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
		| I2S_TCR2_BCD | I2S_TCR2_DIV(3);
    2efc:	ldr	r1, [pc, #120]	; (2f78 <AudioOutputI2SQuad::config_i2s()+0xc0>)
	I2S0_TCR3 = I2S_TCR3_TCE_2CH;
    2efe:	ldr	r3, [pc, #124]	; (2f7c <AudioOutputI2SQuad::config_i2s()+0xc4>)
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(15) | I2S_TCR4_MF
		| I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
    2f00:	ldr	r2, [pc, #124]	; (2f80 <AudioOutputI2SQuad::config_i2s()+0xc8>)
	I2S0_TCR5 = I2S_TCR5_WNW(15) | I2S_TCR5_W0W(15) | I2S_TCR5_FBT(15);
    2f02:	ldr	r7, [pc, #128]	; (2f84 <AudioOutputI2SQuad::config_i2s()+0xcc>)

	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
    2f04:	ldr	r6, [pc, #128]	; (2f88 <AudioOutputI2SQuad::config_i2s()+0xd0>)
	I2S0_RCR1 = I2S_RCR1_RFW(1);
    2f06:	ldr	r5, [pc, #132]	; (2f8c <AudioOutputI2SQuad::config_i2s()+0xd4>)
	if (I2S0_RCSR & I2S_RCSR_RE) return;

	// enable MCLK output
	I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
	while (I2S0_MCR & I2S_MCR_DUF) ;
	I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
    2f08:	movw	ip, #4112	; 0x1010
    2f0c:	str.w	ip, [r4]

	// configure transmitter
	I2S0_TMR = 0;
    2f10:	movs	r4, #0
    2f12:	str	r4, [r0, #0]
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
    2f14:	movs	r0, #1
    2f16:	str.w	r0, [lr]
	I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
		| I2S_TCR2_BCD | I2S_TCR2_DIV(3);
    2f1a:	ldr.w	lr, [pc, #144]	; 2fac <AudioOutputI2SQuad::config_i2s()+0xf4>
    2f1e:	str.w	lr, [r1]
	I2S0_TCR3 = I2S_TCR3_TCE_2CH;
    2f22:	mov.w	r1, #196608	; 0x30000
    2f26:	str	r1, [r3, #0]
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(15) | I2S_TCR4_MF
		| I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
    2f28:	ldr	r3, [pc, #100]	; (2f90 <AudioOutputI2SQuad::config_i2s()+0xd8>)
    2f2a:	str	r3, [r2, #0]

	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1);
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(3);
    2f2c:	ldr.w	lr, [pc, #128]	; 2fb0 <AudioOutputI2SQuad::config_i2s()+0xf8>
	I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
		| I2S_TCR2_BCD | I2S_TCR2_DIV(3);
	I2S0_TCR3 = I2S_TCR3_TCE_2CH;
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(15) | I2S_TCR4_MF
		| I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
	I2S0_TCR5 = I2S_TCR5_WNW(15) | I2S_TCR5_W0W(15) | I2S_TCR5_FBT(15);
    2f30:	ldr	r2, [pc, #96]	; (2f94 <AudioOutputI2SQuad::config_i2s()+0xdc>)
    2f32:	str	r2, [r7, #0]

	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
    2f34:	str	r4, [r6, #0]
	I2S0_RCR1 = I2S_RCR1_RFW(1);
    2f36:	str	r0, [r5, #0]
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(3);
    2f38:	ldr	r0, [pc, #92]	; (2f98 <AudioOutputI2SQuad::config_i2s()+0xe0>)
    2f3a:	str.w	r0, [lr]
	I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(15) | I2S_RCR4_MF
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S0_RCR5 = I2S_RCR5_WNW(15) | I2S_RCR5_W0W(15) | I2S_RCR5_FBT(15);

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
    2f3e:	ldr	r4, [pc, #92]	; (2f9c <AudioOutputI2SQuad::config_i2s()+0xe4>)
	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1);
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(3);
	I2S0_RCR3 = I2S_RCR3_RCE_2CH;
    2f40:	str	r1, [r7, #120]	; 0x78
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S0_RCR5 = I2S_RCR5_WNW(15) | I2S_RCR5_W0W(15) | I2S_RCR5_FBT(15);

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
    2f42:	ldr	r0, [pc, #92]	; (2fa0 <AudioOutputI2SQuad::config_i2s()+0xe8>)
	CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
    2f44:	ldr	r1, [pc, #92]	; (2fa4 <AudioOutputI2SQuad::config_i2s()+0xec>)
	I2S0_RCR1 = I2S_RCR1_RFW(1);
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(3);
	I2S0_RCR3 = I2S_RCR3_RCE_2CH;
	I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(15) | I2S_RCR4_MF
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
    2f46:	str.w	r3, [r6, #-80]
	I2S0_RCR5 = I2S_RCR5_WNW(15) | I2S_RCR5_W0W(15) | I2S_RCR5_FBT(15);

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
    2f4a:	mov.w	r3, #1536	; 0x600
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(3);
	I2S0_RCR3 = I2S_RCR3_RCE_2CH;
	I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(15) | I2S_RCR4_MF
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S0_RCR5 = I2S_RCR5_WNW(15) | I2S_RCR5_W0W(15) | I2S_RCR5_FBT(15);
    2f4e:	str	r2, [r5, #16]

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
    2f50:	str	r3, [r4, #0]
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
    2f52:	str	r3, [r0, #0]
	CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
    2f54:	str	r3, [r1, #0]
    2f56:	pop	{r4, r5, r6, r7, pc}
    2f58:	bx	lr
    2f5a:	nop
    2f5c:	.word	0x4004803c
    2f60:	.word	0x40048040
    2f64:	.word	0x4002f000
    2f68:	.word	0x4002f080
    2f6c:	.word	0x4002f100
    2f70:	.word	0x4002f104
    2f74:	.word	0x4002f060
    2f78:	.word	0x4002f008
    2f7c:	.word	0x4002f00c
    2f80:	.word	0x4002f010
    2f84:	.word	0x4002f014
    2f88:	.word	0x4002f0e0
    2f8c:	.word	0x4002f084
    2f90:	.word	0x00010f1b
    2f94:	.word	0x0f0f0f00
    2f98:	.word	0x47000003
    2f9c:	.word	0x4004b008
    2fa0:	.word	0x4004b00c
    2fa4:	.word	0x4004b018
    2fa8:	.word	0x4002f004
    2fac:	.word	0x07000003
    2fb0:	.word	0x4002f088

00002fb4 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch2_offset = 0;
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    2fb4:	ldr	r2, [pc, #8]	; (2fc0 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    2fb6:	ldr	r1, [pc, #12]	; (2fc4 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    2fb8:	ldr	r0, [pc, #12]	; (2fc8 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    2fba:	b.w	a8e0 <__aeabi_atexit>
    2fbe:	nop
    2fc0:	.word	0x20016d30
    2fc4:	.word	0x00002ad5
    2fc8:	.word	0x2001c648

00002fcc <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE>:
bool AudioOutputADAT::update_responsibility = false;
//uint32_t  AudioOutputADAT::vucp = VUCP_VALID;

DMAMEM __attribute__((aligned(32))) static uint32_t ADAT_tx_buffer[AUDIO_BLOCK_SAMPLES * 8]; //4 KB, AUDIO_BLOCK_SAMPLES is usually 128

DMAChannel AudioOutputADAT::dma(false);
    2fcc:	ldr	r2, [pc, #8]	; (2fd8 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0xc>)
    2fce:	ldr	r1, [pc, #12]	; (2fdc <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x10>)
    2fd0:	ldr	r0, [pc, #12]	; (2fe0 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x14>)
    2fd2:	b.w	a8e0 <__aeabi_atexit>
    2fd6:	nop
    2fd8:	.word	0x20016d30
    2fdc:	.word	0x00002ad5
    2fe0:	.word	0x2001c650

00002fe4 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
audio_block_t * AudioInputTDM::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM::update_responsibility = false;
DMAChannel AudioInputTDM::dma(false);
    2fe4:	ldr	r2, [pc, #8]	; (2ff0 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    2fe6:	ldr	r1, [pc, #12]	; (2ff4 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    2fe8:	ldr	r0, [pc, #12]	; (2ff8 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    2fea:	b.w	a8e0 <__aeabi_atexit>
    2fee:	nop
    2ff0:	.word	0x20016d30
    2ff4:	.word	0x00002ad5
    2ff8:	.word	0x2001c658

00002ffc <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
audio_block_t * AudioInputI2SHex::block_ch4 = NULL;
audio_block_t * AudioInputI2SHex::block_ch5 = NULL;
audio_block_t * AudioInputI2SHex::block_ch6 = NULL;
uint16_t AudioInputI2SHex::block_offset = 0;
bool AudioInputI2SHex::update_responsibility = false;
DMAChannel AudioInputI2SHex::dma(false);
    2ffc:	ldr	r2, [pc, #8]	; (3008 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
    2ffe:	ldr	r1, [pc, #12]	; (300c <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
    3000:	ldr	r0, [pc, #12]	; (3010 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
    3002:	b.w	a8e0 <__aeabi_atexit>
    3006:	nop
    3008:	.word	0x20016d30
    300c:	.word	0x00002ad5
    3010:	.word	0x2001c660

00003014 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE>:

DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM::block_left = NULL;
bool AudioInputPDM::update_responsibility = false;
DMAChannel AudioInputPDM::dma(false);
    3014:	ldr	r2, [pc, #8]	; (3020 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0xc>)
    3016:	ldr	r1, [pc, #12]	; (3024 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x10>)
    3018:	ldr	r0, [pc, #12]	; (3028 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x14>)
    301a:	b.w	a8e0 <__aeabi_atexit>
    301e:	nop
    3020:	.word	0x20016d30
    3024:	.word	0x00002ad5
    3028:	.word	0x2001c668

0000302c <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    302c:	ldr	r2, [pc, #8]	; (3038 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    302e:	ldr	r1, [pc, #12]	; (303c <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    3030:	ldr	r0, [pc, #12]	; (3040 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    3032:	b.w	a8e0 <__aeabi_atexit>
    3036:	nop
    3038:	.word	0x20016d30
    303c:	.word	0x00002ad5
    3040:	.word	0x2001c670

00003044 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    3044:	ldrb.w	r2, [r0, #57]	; 0x39
    3048:	ldrb.w	r0, [r0, #56]	; 0x38
	}
    304c:	subs	r0, r2, r0
    304e:	bx	lr

00003050 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    3050:	ldrb.w	r3, [r0, #56]	; 0x38
    3054:	ldrb.w	r2, [r0, #57]	; 0x39
    3058:	cmp	r2, r3
    305a:	bls.n	3068 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    305c:	adds	r2, r3, #1
    305e:	add	r3, r0
    3060:	strb.w	r2, [r0, #56]	; 0x38
    3064:	ldrb	r0, [r3, #24]
    3066:	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    3068:	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
    306c:	bx	lr
    306e:	nop

00003070 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    3070:	ldrb.w	r3, [r0, #56]	; 0x38
    3074:	ldrb.w	r2, [r0, #57]	; 0x39
    3078:	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    307a:	itte	hi
    307c:	addhi	r3, r3, r0
    307e:	ldrbhi	r0, [r3, #24]
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    3080:	movls.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
    3084:	bx	lr
    3086:	nop

00003088 <TwoWire::flush()>:
	virtual void flush(void) {
    3088:	bx	lr
    308a:	nop

0000308c <TwoWire::write(unsigned char const*, unsigned int)>:
	}
	return 0;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    308c:	push	{r3, r4, r5, lr}
    308e:	mov	r5, r0
	if (transmitting || slave_mode) {
    3090:	ldrh.w	r0, [r0, #94]	; 0x5e
    3094:	cbz	r0, 30bc <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    3096:	ldrb.w	r3, [r5, #93]	; 0x5d
    309a:	mov	r4, r2
    309c:	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
    30a0:	cmp	r4, r2
    30a2:	bhi.n	30be <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    30a4:	add.w	r0, r5, #59	; 0x3b
    30a8:	add	r0, r3
    30aa:	mov	r2, r4
    30ac:	bl	81cc <memcpy>
		txBufferLength += quantity;
    30b0:	ldrb.w	r3, [r5, #93]	; 0x5d
    30b4:	add	r3, r4
    30b6:	strb.w	r3, [r5, #93]	; 0x5d
    30ba:	mov	r0, r4
		return quantity;
	}
	return 0;
}
    30bc:	pop	{r3, r4, r5, pc}
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    30be:	movs	r0, #1
    30c0:	mov	r4, r2
    30c2:	strb	r0, [r5, #4]
    30c4:	b.n	30a4 <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    30c6:	nop

000030c8 <TwoWire::write(unsigned char)>:
//  I2C0_C2      // I2C Control Register 2
//  I2C0_FLT     // I2C Programmable Input Glitch Filter register

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    30c8:	ldrh.w	r3, [r0, #94]	; 0x5e
    30cc:	cbz	r3, 30ea <TwoWire::write(unsigned char)+0x22>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    30ce:	ldrb.w	r3, [r0, #93]	; 0x5d
    30d2:	cmp	r3, #32
    30d4:	bhi.n	30e6 <TwoWire::write(unsigned char)+0x1e>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    30d6:	adds	r2, r0, r3
    30d8:	adds	r3, #1
    30da:	strb.w	r3, [r0, #93]	; 0x5d
		return 1;
    30de:	movs	r0, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    30e0:	strb.w	r1, [r2, #59]	; 0x3b
    30e4:	bx	lr
    30e6:	movs	r3, #1
    30e8:	strb	r3, [r0, #4]
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
    30ea:	movs	r0, #0
    30ec:	bx	lr
    30ee:	nop

000030f0 <TwoWire::isr()>:
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    30f0:	push	{r3, r4, r5, lr}
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    30f2:	ldr	r2, [r0, #16]
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    30f4:	ldrb	r4, [r2, #3]
    30f6:	uxtb	r4, r4
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    30f8:	lsls	r1, r4, #27
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    30fa:	mov	r5, r0
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    30fc:	bpl.n	3148 <TwoWire::isr()+0x58>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    30fe:	movs	r3, #16
    3100:	strb	r3, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    3102:	lsls	r3, r4, #25
    3104:	bpl.n	3146 <TwoWire::isr()+0x56>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    3106:	and.w	r4, r4, #4
    310a:	and.w	r3, r4, #255	; 0xff
    310e:	cmp	r4, #0
    3110:	beq.n	31c8 <TwoWire::isr()+0xd8>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    3112:	ldr	r1, [pc, #264]	; (321c <TwoWire::isr()+0x12c>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    3114:	ldr	r2, [r5, #100]	; 0x64
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    3116:	movs	r3, #0
    3118:	strb	r3, [r1, #0]
			txBufferLength = 0;
    311a:	strb.w	r3, [r5, #93]	; 0x5d
			if (user_onRequest != NULL) {
    311e:	cmp	r2, #0
    3120:	beq.n	31f0 <TwoWire::isr()+0x100>
				user_onRequest();
    3122:	blx	r2
			}
			if (txBufferLength == 0) {
    3124:	ldrb.w	r3, [r5, #93]	; 0x5d
    3128:	cmp	r3, #0
    312a:	beq.n	31f0 <TwoWire::isr()+0x100>
    312c:	ldr	r3, [r5, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    312e:	movs	r2, #208	; 0xd0
    3130:	strb	r2, [r3, #2]
    3132:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
    3134:	ldrb.w	r2, [r5, #59]	; 0x3b
    3138:	strb	r2, [r3, #4]
    313a:	ldr	r3, [r5, #16]
			txBufferIndex = 1;
    313c:	movs	r2, #1
    313e:	strb.w	r2, [r5, #92]	; 0x5c
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    3142:	movs	r2, #2
    3144:	strb	r2, [r3, #3]
    3146:	pop	{r3, r4, r5, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    3148:	and.w	r3, r4, #64	; 0x40
    314c:	and.w	r0, r3, #255	; 0xff
    3150:	cmp	r3, #0
    3152:	bne.n	3106 <TwoWire::isr()+0x16>
		}
		port().S = I2C_S_IICIF;
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
    3154:	ldrb	r3, [r2, #6]
    3156:	uxtb	r3, r3
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
    3158:	and.w	r1, r3, #96	; 0x60
    315c:	cmp	r1, #96	; 0x60
    315e:	beq.n	31fe <TwoWire::isr()+0x10e>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    3160:	ldrb	r3, [r2, #2]
	if (c1 & I2C_C1_TX) {
    3162:	and.w	r3, r3, #16
    3166:	and.w	r1, r3, #255	; 0xff
    316a:	cbz	r3, 319a <TwoWire::isr()+0xaa>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    316c:	ands.w	r4, r4, #1
    3170:	bne.n	31e2 <TwoWire::isr()+0xf2>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    3172:	ldrb.w	r3, [r5, #92]	; 0x5c
    3176:	ldrb.w	r1, [r5, #93]	; 0x5d
    317a:	cmp	r1, r3
    317c:	bls.n	3216 <TwoWire::isr()+0x126>
				port().D = txBuffer[txBufferIndex++];
    317e:	adds	r1, r3, #1
    3180:	add	r3, r5
    3182:	strb.w	r1, [r5, #92]	; 0x5c
    3186:	ldrb.w	r3, [r3, #59]	; 0x3b
    318a:	strb	r3, [r2, #4]
    318c:	ldr	r3, [r5, #16]
			} else {
				port().D = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    318e:	movs	r2, #208	; 0xd0
    3190:	strb	r2, [r3, #2]
    3192:	ldr	r3, [r5, #16]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    3194:	movs	r2, #2
    3196:	strb	r2, [r3, #3]
    3198:	b.n	3146 <TwoWire::isr()+0x56>
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    319a:	strb.w	r1, [r5, #96]	; 0x60
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    319e:	ldrb	r3, [r2, #6]
    31a0:	orr.w	r3, r3, #32
    31a4:	strb	r3, [r2, #6]
    31a6:	ldr	r3, [r5, #16]
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    31a8:	ldrb.w	r1, [r5, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    31ac:	ldrb	r2, [r3, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    31ae:	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    31b0:	uxtb	r2, r2
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    31b2:	bhi.n	3142 <TwoWire::isr()+0x52>
    31b4:	ldr	r0, [pc, #100]	; (321c <TwoWire::isr()+0x12c>)
    31b6:	ldrb	r0, [r0, #0]
    31b8:	cmp	r0, #0
    31ba:	beq.n	3142 <TwoWire::isr()+0x52>
			rxBuffer[rxBufferLength++] = data;
    31bc:	adds	r0, r5, r1
    31be:	adds	r1, #1
    31c0:	strb.w	r1, [r5, #57]	; 0x39
    31c4:	strb	r2, [r0, #24]
    31c6:	b.n	3142 <TwoWire::isr()+0x52>
    31c8:	ldr	r2, [r5, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    31ca:	strb.w	r3, [r5, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    31ce:	movs	r3, #192	; 0xc0
    31d0:	strb	r3, [r2, #2]
    31d2:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    31d4:	ldr	r2, [pc, #68]	; (321c <TwoWire::isr()+0x12c>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    31d6:	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    31d8:	movs	r1, #1
    31da:	strb	r1, [r2, #0]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    31dc:	movs	r2, #2
    31de:	strb	r2, [r3, #3]
    31e0:	b.n	3146 <TwoWire::isr()+0x56>
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    31e2:	movs	r3, #192	; 0xc0
    31e4:	strb	r3, [r2, #2]
    31e6:	ldr	r3, [r5, #16]
			data = port().D;
    31e8:	ldrb	r2, [r3, #4]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    31ea:	movs	r2, #2
    31ec:	strb	r2, [r3, #3]
    31ee:	b.n	3146 <TwoWire::isr()+0x56>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    31f0:	movs	r2, #1
				txBuffer[0] = 0;
    31f2:	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    31f4:	strb.w	r2, [r5, #93]	; 0x5d
				txBuffer[0] = 0;
    31f8:	strb.w	r3, [r5, #59]	; 0x3b
    31fc:	b.n	312c <TwoWire::isr()+0x3c>
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
		port().FLT = c1 & ~I2C_FLT_STOPIE;
    31fe:	and.w	r3, r3, #223	; 0xdf
    3202:	strb	r3, [r2, #6]
		if (user_onReceive != NULL) {
    3204:	ldr	r3, [r5, #104]	; 0x68
    3206:	cbz	r3, 3212 <TwoWire::isr()+0x122>
			rxBufferIndex = 0;
    3208:	strb.w	r0, [r5, #56]	; 0x38
			user_onReceive(rxBufferLength);
    320c:	ldrb.w	r0, [r5, #57]	; 0x39
    3210:	blx	r3
    3212:	ldr	r2, [r5, #16]
    3214:	b.n	3160 <TwoWire::isr()+0x70>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
				port().D = txBuffer[txBufferIndex++];
			} else {
				port().D = 0;
    3216:	strb	r4, [r2, #4]
    3218:	b.n	318c <TwoWire::isr()+0x9c>
    321a:	nop
    321c:	.word	0x2001c678

00003220 <i2c0_isr>:
#define MAKE_CONST(x) (__builtin_constant_p(x) ? (x) : (x))

#ifdef WIRE_IMPLEMENT_WIRE
constexpr uintptr_t i2c0_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C0));
TwoWire Wire(i2c0_addr, TwoWire::i2c0_hardware);
void i2c0_isr(void) { Wire.isr(); }
    3220:	ldr	r0, [pc, #4]	; (3228 <i2c0_isr+0x8>)
    3222:	b.w	30f0 <TwoWire::isr()>
    3226:	nop
    3228:	.word	0x20016e3c

0000322c <i2c1_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE1
constexpr uintptr_t i2c1_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C1));
TwoWire Wire1(i2c1_addr, TwoWire::i2c1_hardware);
void i2c1_isr(void) { Wire1.isr(); }
    322c:	ldr	r0, [pc, #4]	; (3234 <i2c1_isr+0x8>)
    322e:	b.w	30f0 <TwoWire::isr()>
    3232:	nop
    3234:	.word	0x20016ea8

00003238 <i2c2_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE2
constexpr uintptr_t i2c2_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C2));
TwoWire Wire2(i2c2_addr, TwoWire::i2c2_hardware);
void i2c2_isr(void) { Wire2.isr(); }
    3238:	ldr	r0, [pc, #4]	; (3240 <i2c2_isr+0x8>)
    323a:	b.w	30f0 <TwoWire::isr()>
    323e:	nop
    3240:	.word	0x20016dd0

00003244 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : type_(0) {}
    3244:	ldr	r3, [pc, #24]	; (3260 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x1c>)
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    3246:	ldr	r2, [pc, #28]	; (3264 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x20>)
    3248:	str	r2, [r3, #44]	; 0x2c
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    324a:	movs	r1, #2
    324c:	movs	r2, #0
    324e:	str	r1, [r3, #4]
    3250:	strb	r2, [r3, #2]
    3252:	strb.w	r2, [r3, #36]	; 0x24
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    3256:	strb.w	r2, [r3, #48]	; 0x30
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    325a:	strb.w	r2, [r3, #50]	; 0x32
    325e:	bx	lr
    3260:	.word	0x2001c67c
    3264:	.word	0x000133ec

00003268 <SdVolume::cacheFlush()>:
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
    3268:	push	{r4, r5, r6, lr}
  if (cacheDirty_) {
    326a:	ldr	r4, [pc, #104]	; (32d4 <SdVolume::cacheFlush()+0x6c>)
    326c:	ldrb	r3, [r4, #0]
    326e:	cbnz	r3, 3274 <SdVolume::cacheFlush()+0xc>
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
    3270:	movs	r0, #1
}
    3272:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    3274:	ldr	r5, [pc, #96]	; (32d8 <SdVolume::cacheFlush()+0x70>)
    3276:	ldr	r3, [pc, #100]	; (32dc <SdVolume::cacheFlush()+0x74>)
    3278:	ldr	r0, [r5, #0]
    327a:	ldr	r1, [r3, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    327c:	ldrb	r3, [r0, #0]
    327e:	cmp	r3, #254	; 0xfe
    3280:	beq.n	32b2 <SdVolume::cacheFlush()+0x4a>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    3282:	ldr	r2, [pc, #92]	; (32e0 <SdVolume::cacheFlush()+0x78>)
    3284:	bl	3eec <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    3288:	cbz	r0, 32ae <SdVolume::cacheFlush()+0x46>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    328a:	ldr	r6, [pc, #88]	; (32e4 <SdVolume::cacheFlush()+0x7c>)
    328c:	ldr	r1, [r6, #0]
    328e:	cbnz	r1, 3298 <SdVolume::cacheFlush()+0x30>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    3290:	movs	r3, #0
    3292:	strb	r3, [r4, #0]
  }
  return true;
    3294:	movs	r0, #1
    3296:	pop	{r4, r5, r6, pc}
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    3298:	ldr	r0, [r5, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    329a:	ldrb	r3, [r0, #0]
    329c:	cmp	r3, #254	; 0xfe
    329e:	beq.n	32c0 <SdVolume::cacheFlush()+0x58>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    32a0:	ldr	r2, [pc, #60]	; (32e0 <SdVolume::cacheFlush()+0x78>)
    32a2:	bl	3eec <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    32a6:	cbz	r0, 32ae <SdVolume::cacheFlush()+0x46>
        return false;
      }
      cacheMirrorBlock_ = 0;
    32a8:	movs	r3, #0
    32aa:	str	r3, [r6, #0]
    32ac:	b.n	3290 <SdVolume::cacheFlush()+0x28>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    32ae:	movs	r0, #0
    32b0:	pop	{r4, r5, r6, pc}
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    32b2:	ldr	r0, [pc, #44]	; (32e0 <SdVolume::cacheFlush()+0x78>)
    32b4:	bl	3704 <SDHC_CardWriteBlock(void const*, unsigned long)>
    32b8:	clz	r0, r0
    32bc:	lsrs	r0, r0, #5
    32be:	b.n	3288 <SdVolume::cacheFlush()+0x20>
    32c0:	ldr	r0, [pc, #28]	; (32e0 <SdVolume::cacheFlush()+0x78>)
    32c2:	bl	3704 <SDHC_CardWriteBlock(void const*, unsigned long)>
    32c6:	clz	r0, r0
    32ca:	lsrs	r0, r0, #5
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    32cc:	cmp	r0, #0
    32ce:	bne.n	32a8 <SdVolume::cacheFlush()+0x40>
    32d0:	b.n	32ae <SdVolume::cacheFlush()+0x46>
    32d2:	nop
    32d4:	.word	0x2001c8d8
    32d8:	.word	0x2001c6d4
    32dc:	.word	0x20016f14
    32e0:	.word	0x2001c6d8
    32e4:	.word	0x2001c6d0

000032e8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    32e8:	push	{r4, r5, r6, lr}
  if (cacheBlockNumber_ != blockNumber) {
    32ea:	ldr	r5, [pc, #72]	; (3334 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x4c>)
    32ec:	ldr	r3, [r5, #0]
    32ee:	cmp	r3, r0
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    32f0:	mov	r6, r1
  if (cacheBlockNumber_ != blockNumber) {
    32f2:	beq.n	3318 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x30>
    32f4:	mov	r4, r0
    if (!cacheFlush()) return false;
    32f6:	bl	3268 <SdVolume::cacheFlush()>
    32fa:	cbnz	r0, 3300 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x18>
    32fc:	movs	r0, #0
    32fe:	pop	{r4, r5, r6, pc}
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    3300:	ldr	r3, [pc, #52]	; (3338 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x50>)
    3302:	ldr	r0, [r3, #0]
  /* return the type of SD card detected during init() */
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    3304:	ldrb	r3, [r0, #0]
    3306:	cmp	r3, #254	; 0xfe
    3308:	beq.n	3324 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x3c>
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    }
    #endif
    return SD_readBlock(block, dst);
    330a:	ldr	r2, [pc, #48]	; (333c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    330c:	mov	r1, r4
    330e:	bl	3d60 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
    3312:	cmp	r0, #0
    3314:	beq.n	32fc <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x14>
    cacheBlockNumber_ = blockNumber;
    3316:	str	r4, [r5, #0]
  }
  cacheDirty_ |= action;
    3318:	ldr	r3, [pc, #36]	; (3340 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x58>)
    331a:	ldrb	r1, [r3, #0]
    331c:	orrs	r1, r6
    331e:	strb	r1, [r3, #0]
  return true;
    3320:	movs	r0, #1
}
    3322:	pop	{r4, r5, r6, pc}
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    3324:	mov	r1, r4
    3326:	ldr	r0, [pc, #20]	; (333c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    3328:	bl	3600 <SDHC_CardReadBlock(void*, unsigned long)>
    332c:	clz	r0, r0
    3330:	lsrs	r0, r0, #5
    3332:	b.n	3312 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x2a>
    3334:	.word	0x20016f14
    3338:	.word	0x2001c6d4
    333c:	.word	0x2001c6d8
    3340:	.word	0x2001c8d8

00003344 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    3344:	push	{r3, r4, r5, r6, r7, lr}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    3346:	ldrb.w	r3, [r0, #32]

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    334a:	ldr	r4, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    334c:	cmp	r3, #16

  if (lba != cacheBlockNumber_) {
    334e:	ldr	r3, [pc, #104]	; (33b8 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x74>)
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    3350:	mov	r5, r0
    3352:	mov	r6, r1
    3354:	mov	r7, r2

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    3356:	ldr	r3, [r3, #0]
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    3358:	beq.n	3388 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x44>
    335a:	add.w	r4, r4, r1, lsr #7

  if (lba != cacheBlockNumber_) {
    335e:	cmp	r4, r3
    3360:	bne.n	3390 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x4c>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    3362:	and.w	r6, r6, #127	; 0x7f
    3366:	ldr	r2, [pc, #84]	; (33bc <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    3368:	str.w	r7, [r2, r6, lsl #2]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    336c:	ldr	r1, [pc, #80]	; (33c0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x7c>)
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    336e:	ldrb	r0, [r5, #24]
    3370:	ldrb	r2, [r1, #0]
    3372:	cmp	r0, #1
    3374:	orr.w	r2, r2, #1
    3378:	strb	r2, [r1, #0]
    337a:	bls.n	33ae <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6a>
    337c:	ldr	r1, [r5, #8]
    337e:	ldr	r2, [pc, #68]	; (33c4 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x80>)
    3380:	add	r3, r1
    3382:	str	r3, [r2, #0]
  return true;
    3384:	movs	r0, #1
    3386:	pop	{r3, r4, r5, r6, r7, pc}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    3388:	add.w	r4, r4, r1, lsr #8

  if (lba != cacheBlockNumber_) {
    338c:	cmp	r4, r3
    338e:	beq.n	33a2 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x5e>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    3390:	movs	r1, #0
    3392:	mov	r0, r4
    3394:	bl	32e8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    3398:	cbz	r0, 33b0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6c>
  }
  // store entry
  if (fatType_ == 16) {
    339a:	ldrb.w	r3, [r5, #32]
    339e:	cmp	r3, #16
    33a0:	bne.n	33b2 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6e>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    33a2:	uxtb	r6, r6
    33a4:	ldr	r2, [pc, #20]	; (33bc <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    33a6:	mov	r3, r4
    33a8:	strh.w	r7, [r2, r6, lsl #1]
    33ac:	b.n	336c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x28>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
    33ae:	movs	r0, #1
}
    33b0:	pop	{r3, r4, r5, r6, r7, pc}

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    33b2:	mov	r3, r4
    33b4:	b.n	3362 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x1e>
    33b6:	nop
    33b8:	.word	0x20016f14
    33bc:	.word	0x2001c6d8
    33c0:	.word	0x2001c8d8
    33c4:	.word	0x2001c6d0

000033c8 <SdVolume::fatGet(unsigned long, unsigned long*) const>:
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    33c8:	ldr	r3, [r0, #12]
    33ca:	adds	r3, #1
    33cc:	cmp	r3, r1
    33ce:	bcc.n	3402 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3a>
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    33d0:	push	{r4, r5, r6, lr}
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    33d2:	ldrb.w	r3, [r0, #32]
    33d6:	cmp	r3, #16
  if (lba != cacheBlockNumber_) {
    33d8:	ldr	r3, [pc, #84]	; (3430 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x68>)
    33da:	mov	r4, r0
    33dc:	mov	r6, r2
    33de:	mov	r5, r1
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
    33e0:	ldr	r0, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    33e2:	ldr	r3, [r3, #0]
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    33e4:	beq.n	3406 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3e>
    33e6:	add.w	r0, r0, r1, lsr #7
  if (lba != cacheBlockNumber_) {
    33ea:	cmp	r0, r3
    33ec:	bne.n	340e <SdVolume::fatGet(unsigned long, unsigned long*) const+0x46>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    33ee:	and.w	r1, r5, #127	; 0x7f
    33f2:	ldr	r3, [pc, #64]	; (3434 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
    33f4:	ldr.w	r3, [r3, r1, lsl #2]
    33f8:	bic.w	r3, r3, #4026531840	; 0xf0000000
    33fc:	str	r3, [r6, #0]
    33fe:	movs	r0, #1
  }
  return true;
}
    3400:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    3402:	movs	r0, #0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    3404:	bx	lr
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    3406:	add.w	r0, r0, r1, lsr #8
  if (lba != cacheBlockNumber_) {
    340a:	cmp	r0, r3
    340c:	beq.n	341e <SdVolume::fatGet(unsigned long, unsigned long*) const+0x56>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    340e:	movs	r1, #0
    3410:	bl	32e8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    3414:	cbz	r0, 342c <SdVolume::fatGet(unsigned long, unsigned long*) const+0x64>
  }
  if (fatType_ == 16) {
    3416:	ldrb.w	r3, [r4, #32]
    341a:	cmp	r3, #16
    341c:	bne.n	33ee <SdVolume::fatGet(unsigned long, unsigned long*) const+0x26>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    341e:	uxtb	r1, r5
    3420:	ldr	r3, [pc, #16]	; (3434 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
    3422:	ldrh.w	r3, [r3, r1, lsl #1]
    3426:	str	r3, [r6, #0]
    3428:	movs	r0, #1
    342a:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    342c:	movs	r0, #0
    342e:	pop	{r4, r5, r6, pc}
    3430:	.word	0x20016f14
    3434:	.word	0x2001c6d8

00003438 <SdVolume::allocContiguous(unsigned long, unsigned long*)>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    3438:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    343c:	ldr	r7, [r2, #0]
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    343e:	sub	sp, #12

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    3440:	cbz	r7, 349e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x66>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    3442:	adds	r7, #1

    // don't save new start location
    setStart = false;
    3444:	mov.w	sl, #0
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    3448:	ldr	r3, [r0, #12]
    344a:	add.w	r8, r3, #1

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    344e:	cbz	r3, 3496 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    3450:	mov	fp, r1
    3452:	mov	r6, r0
    3454:	mov	r9, r2
    3456:	mov	r4, r7
    3458:	movs	r5, #0
    345a:	b.n	3468 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    345c:	mov	r4, r3
    345e:	mov	r7, r3
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    3460:	ldr	r3, [r6, #12]

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    3462:	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    3464:	cmp	r3, r5
    3466:	bls.n	3496 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    3468:	cmp	r8, r4
      bgnCluster = endCluster = 2;
    346a:	it	cc
    346c:	movcc	r4, #2
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    346e:	mov	r1, r4
    3470:	add	r2, sp, #4
    3472:	mov	r0, r6
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    3474:	it	cc
    3476:	movcc	r7, r4
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    3478:	bl	33c8 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    347c:	adds	r3, r4, #1

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    347e:	subs	r1, r3, r7
    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    3480:	cbz	r0, 3496 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

    if (f != 0) {
    3482:	ldr	r2, [sp, #4]
    3484:	cmp	r2, #0
    3486:	bne.n	345c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x24>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    3488:	cmp	fp, r1
    348a:	beq.n	34ae <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x76>
    348c:	mov	r4, r3
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    348e:	ldr	r3, [r6, #12]

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    3490:	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    3492:	cmp	r3, r5
    3494:	bhi.n	3468 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    3496:	movs	r0, #0

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
    3498:	add	sp, #12
    349a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;

    // save next search start if one cluster
    setStart = 1 == count;
    349e:	sub.w	sl, r1, #1
    34a2:	clz	sl, sl

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    34a6:	ldr	r7, [r0, #0]

    // save next search start if one cluster
    setStart = 1 == count;
    34a8:	mov.w	sl, sl, lsr #5
    34ac:	b.n	3448 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x10>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    34ae:	cmp	r4, #1
    34b0:	bls.n	3496 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    34b2:	ldr	r3, [r6, #12]
    34b4:	adds	r3, #1
    34b6:	cmp	r4, r3
    34b8:	bhi.n	3496 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    34ba:	mvn.w	r2, #4026531840	; 0xf0000000
    34be:	mov	r1, r4
    34c0:	mov	r0, r6
    34c2:	bl	3344 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    34c6:	cmp	r0, #0
    34c8:	beq.n	3496 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // link clusters
  while (endCluster > bgnCluster) {
    34ca:	cmp	r7, r4
    34cc:	bcs.n	34f8 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xc0>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    34ce:	subs	r4, #1
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    34d0:	cmp	r4, #1
    34d2:	bls.n	3496 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    34d4:	ldr	r3, [r6, #12]
    34d6:	adds	r3, #1
    34d8:	cmp	r4, r3
    34da:	bhi.n	3496 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    34dc:	adds	r2, r4, #1
    34de:	mov	r1, r4
    34e0:	mov	r0, r6
    34e2:	bl	3344 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    34e6:	cmp	r0, #0
    34e8:	beq.n	3496 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    34ea:	cmp	r7, r4
    if (!fatPut(endCluster - 1, endCluster)) return false;
    34ec:	add.w	r4, r4, #4294967295
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    34f0:	beq.n	34f8 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xc0>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    34f2:	cmp	r4, #1
    34f4:	bne.n	34d4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x9c>
    34f6:	b.n	3496 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    34f8:	ldr.w	r1, [r9]
    34fc:	cbz	r1, 3516 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xde>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    34fe:	cmp	r1, #1
    3500:	bls.n	3496 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    3502:	ldr	r3, [r6, #12]
    3504:	adds	r3, #1
    3506:	cmp	r1, r3
    3508:	bhi.n	3496 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    350a:	mov	r2, r7
    350c:	mov	r0, r6
    350e:	bl	3344 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    3512:	cmp	r0, #0
    3514:	beq.n	3496 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    3516:	str.w	r7, [r9]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    351a:	cmp.w	sl, #0
    351e:	beq.n	3524 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xec>
    3520:	adds	r7, #1
    3522:	str	r7, [r6, #0]

  return true;
    3524:	movs	r0, #1
    3526:	b.n	3498 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x60>

00003528 <SDHC_CMD_Do(unsigned long)>:

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    3528:	ldr	r1, [pc, #128]	; (35ac <SDHC_CMD_Do(unsigned long)+0x84>)

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    352a:	ldr	r2, [pc, #132]	; (35b0 <SDHC_CMD_Do(unsigned long)+0x88>)

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    352c:	ldr	r3, [r1, #0]
    352e:	orr.w	r3, r3, #128	; 0x80
    3532:	str	r3, [r1, #0]

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    3534:	mov	r1, r2
    3536:	ldr	r3, [r2, #0]
    3538:	lsls	r3, r3, #31
    353a:	bmi.n	3536 <SDHC_CMD_Do(unsigned long)+0xe>
    353c:	ldr	r3, [r1, #0]
    353e:	lsls	r3, r3, #30
    3540:	bmi.n	3536 <SDHC_CMD_Do(unsigned long)+0xe>
  SDHC_XFERTYP = xfertyp;
    3542:	ldr	r3, [pc, #112]	; (35b4 <SDHC_CMD_Do(unsigned long)+0x8c>)
	return SDHC_RESULT_OK;
}

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
    3544:	push	{r4, r5}

// waits for status bits sets
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
    3546:	mov.w	r2, #16777216	; 0x1000000
  do
  { result = SDHC_IRQSTAT & mask;
    354a:	ldr	r5, [pc, #96]	; (35ac <SDHC_CMD_Do(unsigned long)+0x84>)
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
  SDHC_XFERTYP = xfertyp;
    354c:	str	r0, [r3, #0]
    354e:	b.n	3552 <SDHC_CMD_Do(unsigned long)+0x2a>
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    timeout--;
  } while (!result && (timeout));
    3550:	cbz	r2, 357c <SDHC_CMD_Do(unsigned long)+0x54>
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    3552:	ldr	r1, [r5, #0]
    3554:	ldr	r3, [pc, #96]	; (35b8 <SDHC_CMD_Do(unsigned long)+0x90>)
    3556:	ldr	r4, [pc, #84]	; (35ac <SDHC_CMD_Do(unsigned long)+0x84>)
    3558:	ands	r3, r1
    timeout--;
    355a:	subs	r2, #1
  } while (!result && (timeout));
    355c:	cmp	r3, #0
    355e:	beq.n	3550 <SDHC_CMD_Do(unsigned long)+0x28>
  if (timeout) return result;
    3560:	cbz	r2, 357c <SDHC_CMD_Do(unsigned long)+0x54>
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
    3562:	cmp	r3, #1
    3564:	bne.n	357c <SDHC_CMD_Do(unsigned long)+0x54>
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    3566:	ldr	r3, [r4, #0]
    3568:	tst.w	r3, #128	; 0x80
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    356c:	ldr	r3, [r4, #0]
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    356e:	beq.n	3590 <SDHC_CMD_Do(unsigned long)+0x68>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    3570:	orr.w	r3, r3, #65537	; 0x10001
    3574:	str	r3, [r4, #0]
      return SDHC_RESULT_NOT_READY;
    3576:	movs	r0, #3
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    3578:	pop	{r4, r5}
    357a:	bx	lr

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
    357c:	ldr	r2, [pc, #44]	; (35ac <SDHC_CMD_Do(unsigned long)+0x84>)
    357e:	ldr	r3, [r2, #0]
    3580:	orr.w	r3, r3, #983040	; 0xf0000
    3584:	orr.w	r3, r3, #1
    3588:	str	r3, [r2, #0]
      return SDHC_RESULT_ERROR;
    358a:	movs	r0, #1
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    358c:	pop	{r4, r5}
    358e:	bx	lr
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    3590:	ands.w	r0, r3, #65536	; 0x10000
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    3594:	ldr	r3, [r4, #0]
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    3596:	beq.n	35a2 <SDHC_CMD_Do(unsigned long)+0x7a>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    3598:	orr.w	r3, r3, #65537	; 0x10001
    359c:	str	r3, [r4, #0]
      return SDHC_RESULT_NO_RESPONSE;
    359e:	movs	r0, #5
    35a0:	b.n	358c <SDHC_CMD_Do(unsigned long)+0x64>
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;
    35a2:	orr.w	r3, r3, #1
    35a6:	str	r3, [r4, #0]
    35a8:	b.n	358c <SDHC_CMD_Do(unsigned long)+0x64>
    35aa:	nop
    35ac:	.word	0x400b1030
    35b0:	.word	0x400b1024
    35b4:	.word	0x400b100c
    35b8:	.word	0x000e0001

000035bc <SDHC_CMD12_StopTransferWaitForBusy()>:
  return result;
}

// sends CMD12 to stop transfer and first waits to ready SDCArd
static int SDHC_CMD12_StopTransferWaitForBusy(void)
{
    35bc:	push	{r4, r5, r6, lr}
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    35be:	ldr	r5, [pc, #52]	; (35f4 <SDHC_CMD12_StopTransferWaitForBusy()+0x38>)
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    35c0:	ldr	r0, [pc, #52]	; (35f8 <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    35c2:	ldr	r6, [pc, #56]	; (35fc <SDHC_CMD12_StopTransferWaitForBusy()+0x40>)
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    35c4:	movs	r3, #0
    35c6:	str	r3, [r5, #0]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    35c8:	bl	3528 <SDHC_CMD_Do(unsigned long)>
{
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
    35cc:	movw	r4, #999	; 0x3e7

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    35d0:	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    35d2:	ldr	r2, [r6, #0]
    35d4:	lsls	r2, r2, #29
    35d6:	bpl.n	35dc <SDHC_CMD12_StopTransferWaitForBusy()+0x20>

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    35d8:	ldr	r0, [pc, #28]	; (35f8 <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    35da:	cbz	r3, 35e0 <SDHC_CMD12_StopTransferWaitForBusy()+0x24>
    35dc:	mov	r0, r3
    35de:	pop	{r4, r5, r6, pc}
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    35e0:	str	r3, [r5, #0]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    35e2:	bl	3528 <SDHC_CMD_Do(unsigned long)>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    35e6:	subs	r4, #1

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    35e8:	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    35ea:	bne.n	35d2 <SDHC_CMD12_StopTransferWaitForBusy()+0x16>

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    35ec:	cmp	r0, #0
    35ee:	it	eq
    35f0:	moveq	r0, #5

  if (result != SDHC_RESULT_OK)  return result;
  if (!timeOut)  return SDHC_RESULT_NO_RESPONSE;

  return SDHC_RESULT_OK;
}
    35f2:	pop	{r4, r5, r6, pc}
    35f4:	.word	0x400b1008
    35f8:	.word	0x0cdb0000
    35fc:	.word	0x400b1024

00003600 <SDHC_CardReadBlock(void*, unsigned long)>:
#if 1
// read a block from disk, using polling
//   buff - pointer on buffer where read data should be stored
//   sector - index of start sector
int SDHC_CardReadBlock(void * buff, uint32_t sector)
{
    3600:	push	{r3, r4, r5, r6, r7, lr}
  int result;
  uint32_t* pData = (uint32_t*)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0)
    3602:	ldr	r3, [pc, #224]	; (36e4 <SDHC_CardReadBlock(void*, unsigned long)+0xe4>)
    3604:	ldrb	r2, [r3, #0]
    3606:	cbz	r2, 360c <SDHC_CardReadBlock(void*, unsigned long)+0xc>
     return SDHC_RESULT_NOT_READY;
    3608:	movs	r0, #3
  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BRR | SDHC_IRQSTAT_AC12E);

  return result;
}
    360a:	pop	{r3, r4, r5, r6, r7, pc}
  // Check if this is ready
  if (sdCardDesc.status != 0)
     return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    360c:	ldrb	r3, [r3, #1]
    360e:	mov	r6, r0
    3610:	cbnz	r3, 3614 <SDHC_CardReadBlock(void*, unsigned long)+0x14>
    sector *= 512;
    3612:	lsls	r1, r1, #9

  SDHC_IRQSTAT = 0xffff;
    3614:	ldr	r5, [pc, #208]	; (36e8 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
static int SDHC_CMD17_ReadBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    3616:	ldr	r4, [pc, #212]	; (36ec <SDHC_CardReadBlock(void*, unsigned long)+0xec>)

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    3618:	ldr	r3, [pc, #212]	; (36f0 <SDHC_CardReadBlock(void*, unsigned long)+0xf0>)

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    361a:	ldr	r0, [pc, #216]	; (36f4 <SDHC_CardReadBlock(void*, unsigned long)+0xf4>)

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    sector *= 512;

  SDHC_IRQSTAT = 0xffff;
    361c:	movw	r7, #65535	; 0xffff
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    3620:	mov.w	r2, #66048	; 0x10200

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    sector *= 512;

  SDHC_IRQSTAT = 0xffff;
    3624:	str	r7, [r5, #0]
static int SDHC_CMD17_ReadBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    3626:	str	r1, [r4, #0]

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    3628:	str	r2, [r3, #0]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    362a:	bl	3528 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    362e:	cmp	r0, #0
    3630:	bne.n	360a <SDHC_CardReadBlock(void*, unsigned long)+0xa>
    3632:	ldr	r3, [pc, #196]	; (36f8 <SDHC_CardReadBlock(void*, unsigned long)+0xf8>)
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
		*pData++ = SDHC_DATPORT;
    3634:	ldr	r1, [pc, #196]	; (36fc <SDHC_CardReadBlock(void*, unsigned long)+0xfc>)
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    3636:	ldr	r3, [r3, #0]
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    3638:	adds	r4, #28
    363a:	add.w	r2, r6, #64	; 0x40
    363e:	add.w	r0, r6, #576	; 0x240
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
    3642:	ldr	r3, [r5, #0]
    3644:	ldr	r7, [pc, #160]	; (36e8 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    3646:	orr.w	r6, r3, #32
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    364a:	tst.w	r3, #7340032	; 0x700000
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    364e:	str	r6, [r5, #0]
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    3650:	bne.n	36d0 <SDHC_CardReadBlock(void*, unsigned long)+0xd0>
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    3652:	ldr	r3, [r4, #0]
    3654:	lsls	r6, r3, #20
    3656:	bpl.n	3652 <SDHC_CardReadBlock(void*, unsigned long)+0x52>
		*pData++ = SDHC_DATPORT;
    3658:	ldr	r3, [r1, #0]
    365a:	str.w	r3, [r2, #-64]
		*pData++ = SDHC_DATPORT;
    365e:	ldr	r3, [r1, #0]
    3660:	str.w	r3, [r2, #-60]
		*pData++ = SDHC_DATPORT;
    3664:	ldr	r3, [r1, #0]
    3666:	str.w	r3, [r2, #-56]
		*pData++ = SDHC_DATPORT;
    366a:	ldr	r3, [r1, #0]
    366c:	str.w	r3, [r2, #-52]
		*pData++ = SDHC_DATPORT;
    3670:	ldr	r3, [r1, #0]
    3672:	str.w	r3, [r2, #-48]
		*pData++ = SDHC_DATPORT;
    3676:	ldr	r3, [r1, #0]
    3678:	str.w	r3, [r2, #-44]
		*pData++ = SDHC_DATPORT;
    367c:	ldr	r3, [r1, #0]
    367e:	str.w	r3, [r2, #-40]
		*pData++ = SDHC_DATPORT;
    3682:	ldr	r3, [r1, #0]
    3684:	str.w	r3, [r2, #-36]
		*pData++ = SDHC_DATPORT;
    3688:	ldr	r3, [r1, #0]
    368a:	str.w	r3, [r2, #-32]
		*pData++ = SDHC_DATPORT;
    368e:	ldr	r3, [r1, #0]
    3690:	str.w	r3, [r2, #-28]
		*pData++ = SDHC_DATPORT;
    3694:	ldr	r3, [r1, #0]
    3696:	str.w	r3, [r2, #-24]
		*pData++ = SDHC_DATPORT;
    369a:	ldr	r3, [r1, #0]
    369c:	str.w	r3, [r2, #-20]
		*pData++ = SDHC_DATPORT;
    36a0:	ldr	r3, [r1, #0]
    36a2:	str.w	r3, [r2, #-16]
		*pData++ = SDHC_DATPORT;
    36a6:	ldr	r3, [r1, #0]
    36a8:	str.w	r3, [r2, #-12]
		*pData++ = SDHC_DATPORT;
    36ac:	ldr	r3, [r1, #0]
    36ae:	str.w	r3, [r2, #-8]
		*pData++ = SDHC_DATPORT;
    36b2:	ldr	r3, [r1, #0]
    36b4:	str.w	r3, [r2, #-4]
    36b8:	adds	r2, #64	; 0x40
static int SDHC_ReadBlock(uint32_t* pData)
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
    36ba:	cmp	r2, r0
    36bc:	bne.n	3642 <SDHC_CardReadBlock(void*, unsigned long)+0x42>
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
	}
	return SDHC_RESULT_OK;
    36be:	movs	r0, #0
  result = SDHC_CMD17_ReadBlock(sector);
  if(result != SDHC_RESULT_OK) return result;
  result = SDHC_ReadBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    36c0:	ldr	r1, [pc, #36]	; (36e8 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    36c2:	ldr	r3, [r1, #0]
    36c4:	ldr	r2, [pc, #32]	; (36e8 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    36c6:	lsls	r3, r3, #30
    36c8:	bpl.n	36c2 <SDHC_CardReadBlock(void*, unsigned long)+0xc2>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BRR | SDHC_IRQSTAT_AC12E);
    36ca:	ldr	r3, [pc, #52]	; (3700 <SDHC_CardReadBlock(void*, unsigned long)+0x100>)
    36cc:	str	r3, [r2, #0]

  return result;
    36ce:	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
    36d0:	orr.w	r3, r3, #7340032	; 0x700000
    36d4:	orr.w	r3, r3, #32
    36d8:	str	r3, [r7, #0]
			SDHC_CMD12_StopTransferWaitForBusy();
    36da:	bl	35bc <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    36de:	movs	r0, #1
    36e0:	b.n	36c0 <SDHC_CardReadBlock(void*, unsigned long)+0xc0>
    36e2:	nop
    36e4:	.word	0x2001c8dc
    36e8:	.word	0x400b1030
    36ec:	.word	0x400b1008
    36f0:	.word	0x400b1004
    36f4:	.word	0x113a0010
    36f8:	.word	0x400b1010
    36fc:	.word	0x400b1020
    3700:	.word	0x01000022

00003704 <SDHC_CardWriteBlock(void const*, unsigned long)>:
//
// RETURNS:     result of operation
//-----------------------------------------------------------------------------
#if 1
int SDHC_CardWriteBlock(const void * buff, uint32_t sector)
{
    3704:	push	{r3, r4, r5, r6, r7, lr}
  int result;
  const uint32_t *pData = (const uint32_t *)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;
    3706:	ldr	r3, [pc, #172]	; (37b4 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb0>)
    3708:	ldrb	r2, [r3, #0]
    370a:	cbz	r2, 3710 <SDHC_CardWriteBlock(void const*, unsigned long)+0xc>
    370c:	movs	r0, #3
  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);

  return result;
}
    370e:	pop	{r3, r4, r5, r6, r7, pc}

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    3710:	ldrb	r3, [r3, #1]
    3712:	mov	r4, r0
    3714:	cbnz	r3, 3718 <SDHC_CardWriteBlock(void const*, unsigned long)+0x14>
    sector *= 512;
    3716:	lsls	r1, r1, #9

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    3718:	ldr	r5, [pc, #156]	; (37b8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
static int SDHC_CMD24_WriteBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    371a:	ldr	r0, [pc, #160]	; (37bc <SDHC_CardWriteBlock(void const*, unsigned long)+0xb8>)
  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    sector *= 512;

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    371c:	ldr	r2, [r5, #0]
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    371e:	ldr	r3, [pc, #160]	; (37c0 <SDHC_CardWriteBlock(void const*, unsigned long)+0xbc>)
  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    sector *= 512;

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    3720:	str	r2, [r5, #0]
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    3722:	mov.w	r2, #66048	; 0x10200
static int SDHC_CMD24_WriteBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    3726:	str	r1, [r0, #0]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    3728:	ldr	r0, [pc, #152]	; (37c4 <SDHC_CardWriteBlock(void const*, unsigned long)+0xc0>)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    372a:	str	r2, [r3, #0]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    372c:	bl	3528 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    3730:	cmp	r0, #0
    3732:	bne.n	370e <SDHC_CardWriteBlock(void const*, unsigned long)+0xa>
    3734:	ldr	r3, [pc, #144]	; (37c8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xc4>)
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
			SDHC_DATPORT = *pData++;
    3736:	ldr	r6, [pc, #148]	; (37cc <SDHC_CardWriteBlock(void const*, unsigned long)+0xc8>)
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    3738:	ldr	r3, [r3, #0]
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
    373a:	mov	r1, r5
    373c:	add.w	r7, r4, #512	; 0x200
    3740:	ldr	r3, [r1, #0]
    3742:	ldr	r2, [pc, #116]	; (37b8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    3744:	lsls	r0, r3, #27
    3746:	bpl.n	3740 <SDHC_CardWriteBlock(void const*, unsigned long)+0x3c>
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    3748:	ldr	r3, [r5, #0]
    374a:	tst.w	r3, #7340032	; 0x700000
    374e:	bne.n	3786 <SDHC_CardWriteBlock(void const*, unsigned long)+0x82>
    3750:	add.w	r2, r4, #64	; 0x40
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
			SDHC_DATPORT = *pData++;
    3754:	ldr.w	r3, [r4], #4
    3758:	str	r3, [r6, #0]
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
    375a:	cmp	r2, r4
    375c:	bne.n	3754 <SDHC_CardWriteBlock(void const*, unsigned long)+0x50>
			SDHC_DATPORT = *pData++;
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;
    375e:	ldr	r3, [r1, #0]
    3760:	ldr.w	lr, [pc, #84]	; 37b8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>
    3764:	orr.w	r3, r3, #16
    3768:	str	r3, [r1, #0]

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    376a:	ldr	r3, [r1, #0]
    376c:	ands.w	r0, r3, #7340032	; 0x700000
    3770:	bne.n	379a <SDHC_CardWriteBlock(void const*, unsigned long)+0x96>
static int SDHC_WriteBlock(const uint32_t* pData)
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
    3772:	cmp	r7, r2
    3774:	bne.n	3740 <SDHC_CardWriteBlock(void const*, unsigned long)+0x3c>
  result = SDHC_CMD24_WriteBlock(sector);
  if (result != SDHC_RESULT_OK) return result;
  result = SDHC_WriteBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    3776:	ldr	r1, [pc, #64]	; (37b8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    3778:	ldr	r3, [r1, #0]
    377a:	ldr	r2, [pc, #60]	; (37b8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    377c:	lsls	r3, r3, #30
    377e:	bpl.n	3778 <SDHC_CardWriteBlock(void const*, unsigned long)+0x74>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);
    3780:	ldr	r3, [pc, #76]	; (37d0 <SDHC_CardWriteBlock(void const*, unsigned long)+0xcc>)
    3782:	str	r3, [r2, #0]

  return result;
    3784:	pop	{r3, r4, r5, r6, r7, pc}

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    3786:	ldr	r3, [r2, #0]
    3788:	orr.w	r3, r3, #7340032	; 0x700000
    378c:	orr.w	r3, r3, #16
    3790:	str	r3, [r2, #0]
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    3792:	bl	35bc <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    3796:	movs	r0, #1
    3798:	b.n	3776 <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    379a:	ldr.w	r3, [lr]
    379e:	orr.w	r3, r3, #7340032	; 0x700000
    37a2:	orr.w	r3, r3, #16
    37a6:	str.w	r3, [lr]
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    37aa:	bl	35bc <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    37ae:	movs	r0, #1
    37b0:	b.n	3776 <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
    37b2:	nop
    37b4:	.word	0x2001c8dc
    37b8:	.word	0x400b1030
    37bc:	.word	0x400b1008
    37c0:	.word	0x400b1004
    37c4:	.word	0x183a0000
    37c8:	.word	0x400b1010
    37cc:	.word	0x400b1020
    37d0:	.word	0x01000012

000037d4 <SdFile::sync() [clone .part.23] [clone .constprop.37]>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    37d4:	push	{r3, r4, r5, lr}
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    37d6:	ldrsb.w	r3, [r0, #5]
    37da:	cmp	r3, #0
    37dc:	blt.n	37e6 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x12>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    37de:	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    37e2:	b.w	3268 <SdVolume::cacheFlush()>
    37e6:	mov	r4, r0
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    37e8:	movs	r1, #1
    37ea:	ldr	r0, [r0, #16]
    37ec:	bl	32e8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    37f0:	cbz	r0, 3832 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5e>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    37f2:	ldrb	r5, [r4, #20]
    37f4:	ldr	r3, [pc, #64]	; (3838 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x64>)
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
    37f6:	adds.w	r5, r3, r5, lsl #5
    37fa:	beq.n	3832 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5e>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    37fc:	ldrb	r3, [r4, #6]
    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    37fe:	ldr	r2, [pc, #60]	; (383c <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x68>)
  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    3800:	cmp	r3, #1
    3802:	itt	ls
    3804:	ldrls	r3, [r4, #24]
    3806:	strls	r3, [r5, #28]

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    3808:	ldr	r3, [r4, #28]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    380a:	ldr	r2, [r2, #0]

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    380c:	strh	r3, [r5, #26]
    d->firstClusterHigh = firstCluster_ >> 16;
    380e:	lsrs	r3, r3, #16
    3810:	strh	r3, [r5, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    3812:	cbz	r2, 3822 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x4e>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    3814:	add.w	r1, r5, #22
    3818:	add.w	r0, r5, #24
    381c:	blx	r2
      d->lastAccessDate = d->lastWriteDate;
    381e:	ldrh	r3, [r5, #24]
    3820:	strh	r3, [r5, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    3822:	ldrb	r3, [r4, #5]
    3824:	and.w	r3, r3, #127	; 0x7f
    3828:	strb	r3, [r4, #5]
  }
  return SdVolume::cacheFlush();
}
    382a:	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    382e:	b.w	3268 <SdVolume::cacheFlush()>
}
    3832:	movs	r0, #0
    3834:	pop	{r3, r4, r5, pc}
    3836:	nop
    3838:	.word	0x2001c6d8
    383c:	.word	0x2001c8ec

00003840 <SdFile::addCluster()>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    3840:	push	{r4, lr}
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    3842:	add.w	r2, r0, #8
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    3846:	mov	r4, r0
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    3848:	movs	r1, #1
    384a:	ldr	r0, [r0, #32]
    384c:	bl	3438 <SdVolume::allocContiguous(unsigned long, unsigned long*)>
    3850:	cbz	r0, 3868 <SdFile::addCluster()+0x28>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    3852:	ldr	r3, [r4, #28]
    3854:	cbnz	r3, 3866 <SdFile::addCluster()+0x26>
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
    3856:	ldrb	r3, [r4, #5]
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    3858:	ldr	r2, [r4, #8]
    385a:	str	r2, [r4, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    385c:	orn	r3, r3, #127	; 0x7f
    3860:	strb	r3, [r4, #5]
    3862:	movs	r0, #1
    3864:	pop	{r4, pc}
  }
  return true;
    3866:	movs	r0, #1
}
    3868:	pop	{r4, pc}
    386a:	nop

0000386c <SdFile::seekSet(unsigned long)>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    386c:	push	{r3, r4, r5, r6, r7, lr}
    386e:	ldrb	r3, [r0, #6]
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    3870:	cbz	r3, 3878 <SdFile::seekSet(unsigned long)+0xc>
    3872:	ldr	r2, [r0, #24]
    3874:	cmp	r2, r1
    3876:	bcs.n	387c <SdFile::seekSet(unsigned long)+0x10>
    3878:	movs	r0, #0
    387a:	pop	{r3, r4, r5, r6, r7, pc}

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    387c:	cmp	r3, #2
    387e:	mov	r7, r1
    3880:	mov	r5, r0
    3882:	beq.n	38ba <SdFile::seekSet(unsigned long)+0x4e>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    3884:	cbz	r7, 38c8 <SdFile::seekSet(unsigned long)+0x5c>
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    3886:	ldr	r3, [r5, #32]
    3888:	ldr	r1, [r5, #12]
    388a:	ldrb	r4, [r3, #16]
    388c:	subs	r2, r1, #1
    388e:	add.w	r3, r4, #9
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    3892:	subs	r4, r7, #1
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    3894:	lsrs	r2, r3
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    3896:	lsrs	r4, r3

  if (nNew < nCur || curPosition_ == 0) {
    3898:	cmp	r2, r4
    389a:	bls.n	38c0 <SdFile::seekSet(unsigned long)+0x54>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    389c:	ldr	r3, [r5, #28]
    389e:	str	r3, [r5, #8]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    38a0:	add.w	r6, r5, #8
    38a4:	b.n	38b4 <SdFile::seekSet(unsigned long)+0x48>
    38a6:	ldr	r1, [r5, #8]
    38a8:	ldr	r0, [r5, #32]
    38aa:	bl	33c8 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    38ae:	subs	r4, #1
    38b0:	cmp	r0, #0
    38b2:	beq.n	3878 <SdFile::seekSet(unsigned long)+0xc>
    38b4:	mov	r2, r6
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    38b6:	cmp	r4, #0
    38b8:	bne.n	38a6 <SdFile::seekSet(unsigned long)+0x3a>
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    curPosition_ = 0;
    38ba:	str	r7, [r5, #12]
    return true;
    38bc:	movs	r0, #1
    38be:	pop	{r3, r4, r5, r6, r7, pc}
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);

  if (nNew < nCur || curPosition_ == 0) {
    38c0:	cmp	r1, #0
    38c2:	beq.n	389c <SdFile::seekSet(unsigned long)+0x30>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
    38c4:	subs	r4, r4, r2
    38c6:	b.n	38a0 <SdFile::seekSet(unsigned long)+0x34>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    38c8:	str	r7, [r5, #8]
    curPosition_ = 0;
    38ca:	str	r7, [r5, #12]
    return true;
    38cc:	movs	r0, #1
    38ce:	pop	{r3, r4, r5, r6, r7, pc}

000038d0 <SdFile::write(void const*, unsigned int)>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    38d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    38d4:	mov	fp, r1

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    38d6:	ldrb	r1, [r0, #6]
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    38d8:	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    38da:	cmp	r1, #1
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    38dc:	mov	r7, r0
    38de:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    38e0:	beq.n	38ee <SdFile::write(void const*, unsigned int)+0x1e>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    38e2:	movs	r3, #1
    38e4:	strb	r3, [r7, #4]

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    38e6:	movs	r0, #0
}
    38e8:	add	sp, #20
    38ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    38ee:	ldrb	r2, [r0, #5]
    38f0:	lsls	r1, r2, #30
    38f2:	bpl.n	38e2 <SdFile::write(void const*, unsigned int)+0x12>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    38f4:	lsls	r3, r2, #29
    38f6:	bpl.n	390a <SdFile::write(void const*, unsigned int)+0x3a>
    38f8:	ldr	r4, [r7, #12]
    38fa:	ldr	r1, [r7, #24]
    38fc:	cmp	r4, r1
    38fe:	beq.w	3a6a <SdFile::write(void const*, unsigned int)+0x19a>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    3902:	bl	386c <SdFile::seekSet(unsigned long)>
    if (!seekEnd()) goto writeErrorReturn;
    3906:	cmp	r0, #0
    3908:	beq.n	38e2 <SdFile::write(void const*, unsigned int)+0x12>
  }

  while (nToWrite > 0) {
    390a:	ldr	r3, [sp, #4]
    390c:	ldr	r4, [r7, #12]
    390e:	cmp	r3, #0
    3910:	beq.n	39a8 <SdFile::write(void const*, unsigned int)+0xd8>
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    3912:	ldr.w	r9, [pc, #420]	; 3ab8 <SdFile::write(void const*, unsigned int)+0x1e8>
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
    3916:	ldr.w	sl, [pc, #420]	; 3abc <SdFile::write(void const*, unsigned int)+0x1ec>
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    391a:	ldr.w	r8, [sp, #4]
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    391e:	ldr	r0, [r7, #32]
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    3920:	ldrb	r6, [r0, #4]
    3922:	subs	r6, #1
    3924:	and.w	r6, r6, r4, lsr #9
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    3928:	ands.w	r6, r6, #255	; 0xff
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    392c:	ubfx	r4, r4, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
    3930:	bne.n	39ba <SdFile::write(void const*, unsigned int)+0xea>
    3932:	cmp	r4, #0
    3934:	bne.n	39ba <SdFile::write(void const*, unsigned int)+0xea>
      // start of new cluster
      if (curCluster_ == 0) {
    3936:	ldr	r1, [r7, #8]
    3938:	cmp	r1, #0
    393a:	bne.n	3a24 <SdFile::write(void const*, unsigned int)+0x154>
        if (firstCluster_ == 0) {
    393c:	ldr	r2, [r7, #28]
    393e:	cmp	r2, #0
    3940:	beq.w	3a4a <SdFile::write(void const*, unsigned int)+0x17a>
        if (!vol_->fatGet(curCluster_, &next)) return false;
        if (vol_->isEOC(next)) {
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = next;
    3944:	str	r2, [r7, #8]
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    3946:	rsb	r5, r4, #512	; 0x200
    394a:	uxth	r5, r5

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    394c:	cmp	r5, r8
    394e:	bls.n	39c6 <SdFile::write(void const*, unsigned int)+0xf6>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    3950:	ldrb	r5, [r0, #16]
    3952:	ldr	r1, [r0, #20]
    3954:	subs	r2, #2
    3956:	lsls	r2, r5
    3958:	add	r6, r1
    395a:	add	r6, r2
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    395c:	uxth.w	r5, r8
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    3960:	cbnz	r4, 396a <SdFile::write(void const*, unsigned int)+0x9a>
    3962:	ldr	r0, [r7, #12]
    3964:	ldr	r2, [r7, #24]
    3966:	cmp	r0, r2
    3968:	bcs.n	3a0a <SdFile::write(void const*, unsigned int)+0x13a>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    396a:	mov	r0, r6
    396c:	movs	r1, #1
    396e:	bl	32e8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    3972:	cmp	r0, #0
    3974:	beq.n	38e2 <SdFile::write(void const*, unsigned int)+0x12>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    3976:	add	r4, r9
      uint8_t* end = dst + n;
    3978:	add.w	lr, r4, r5
      while (dst != end) *dst++ = *src++;
    397c:	cmp	r4, lr
    397e:	beq.n	399c <SdFile::write(void const*, unsigned int)+0xcc>
    3980:	add.w	r1, fp, #4294967295
    3984:	subs	r2, r4, #1
    3986:	add.w	r6, lr, #4294967295
    398a:	ldrb.w	r0, [r1, #1]!
    398e:	strb.w	r0, [r2, #1]!
    3992:	cmp	r6, r2
    3994:	bne.n	398a <SdFile::write(void const*, unsigned int)+0xba>
    3996:	rsb	r4, r4, lr
    399a:	add	fp, r4
    }
    nToWrite -= n;
    curPosition_ += n;
    399c:	ldr	r4, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    399e:	subs.w	r8, r8, r5
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
    39a2:	add	r4, r5
    39a4:	str	r4, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    39a6:	bne.n	391e <SdFile::write(void const*, unsigned int)+0x4e>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    39a8:	ldr	r3, [r7, #24]
    39aa:	cmp	r3, r4
    39ac:	bcs.n	3a74 <SdFile::write(void const*, unsigned int)+0x1a4>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
    39ae:	ldrb	r2, [r7, #5]
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    39b0:	str	r4, [r7, #24]
    flags_ |= F_FILE_DIR_DIRTY;
    39b2:	orr.w	r2, r2, #128	; 0x80
    39b6:	strb	r2, [r7, #5]
    39b8:	b.n	3a86 <SdFile::write(void const*, unsigned int)+0x1b6>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    39ba:	rsb	r5, r4, #512	; 0x200
    39be:	uxth	r5, r5

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    39c0:	cmp	r5, r8
    39c2:	ldr	r2, [r7, #8]
    39c4:	bhi.n	3950 <SdFile::write(void const*, unsigned int)+0x80>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    39c6:	ldrb	r1, [r0, #16]
    39c8:	ldr	r0, [r0, #20]
    39ca:	subs	r2, #2
    39cc:	lsls	r2, r1
    39ce:	add	r6, r0
    if (n == 512) {
    39d0:	cmp.w	r5, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    39d4:	add	r6, r2
    if (n == 512) {
    39d6:	bne.n	3960 <SdFile::write(void const*, unsigned int)+0x90>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    39d8:	ldr.w	r2, [sl]
    39dc:	cmp	r6, r2
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    39de:	itt	eq
    39e0:	moveq.w	r2, #4294967295
    39e4:	streq.w	r2, [sl]
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    39e8:	ldr	r2, [pc, #188]	; (3aa8 <SdFile::write(void const*, unsigned int)+0x1d8>)
    39ea:	ldr	r0, [r2, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    39ec:	ldrb	r2, [r0, #0]
    39ee:	cmp	r2, #254	; 0xfe
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    39f0:	mov	r1, r6
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    39f2:	beq.n	3a5c <SdFile::write(void const*, unsigned int)+0x18c>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    39f4:	mov	r2, fp
    39f6:	bl	3eec <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    39fa:	cmp	r0, #0
    39fc:	beq.w	38e2 <SdFile::write(void const*, unsigned int)+0x12>
      src += 512;
    3a00:	add.w	fp, fp, #512	; 0x200
    3a04:	mov.w	r5, #512	; 0x200
    3a08:	b.n	399c <SdFile::write(void const*, unsigned int)+0xcc>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    3a0a:	bl	3268 <SdVolume::cacheFlush()>
    3a0e:	cmp	r0, #0
    3a10:	beq.w	38e2 <SdFile::write(void const*, unsigned int)+0x12>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    3a14:	ldr	r1, [pc, #148]	; (3aac <SdFile::write(void const*, unsigned int)+0x1dc>)
        SdVolume::cacheBlockNumber_ = block;
    3a16:	str.w	r6, [sl]
    3a1a:	ldrb	r2, [r1, #0]
    3a1c:	orr.w	r2, r2, #1
    3a20:	strb	r2, [r1, #0]
    3a22:	b.n	3976 <SdFile::write(void const*, unsigned int)+0xa6>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    3a24:	add	r2, sp, #12
    3a26:	bl	33c8 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    3a2a:	cmp	r0, #0
    3a2c:	beq.w	38e8 <SdFile::write(void const*, unsigned int)+0x18>
        if (vol_->isEOC(next)) {
    3a30:	ldr	r0, [r7, #32]
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    3a32:	ldr	r3, [pc, #124]	; (3ab0 <SdFile::write(void const*, unsigned int)+0x1e0>)
    3a34:	ldrb.w	r5, [r0, #32]
    3a38:	ldr	r2, [sp, #12]
    3a3a:	movw	r1, #65528	; 0xfff8
    3a3e:	cmp	r5, #16
    3a40:	it	ne
    3a42:	movne	r1, r3
    3a44:	cmp	r2, r1
    3a46:	bcc.w	3944 <SdFile::write(void const*, unsigned int)+0x74>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    3a4a:	mov	r0, r7
    3a4c:	bl	3840 <SdFile::addCluster()>
    3a50:	cmp	r0, #0
    3a52:	beq.w	38e2 <SdFile::write(void const*, unsigned int)+0x12>
    3a56:	ldr	r0, [r7, #32]
    3a58:	ldr	r2, [r7, #8]
    3a5a:	b.n	3946 <SdFile::write(void const*, unsigned int)+0x76>
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    3a5c:	mov	r0, fp
    3a5e:	bl	3704 <SDHC_CardWriteBlock(void const*, unsigned long)>
    3a62:	clz	r0, r0
    3a66:	lsrs	r0, r0, #5
    3a68:	b.n	39fa <SdFile::write(void const*, unsigned int)+0x12a>
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    3a6a:	ldr	r3, [sp, #4]
    3a6c:	cmp	r3, #0
    3a6e:	bne.w	3912 <SdFile::write(void const*, unsigned int)+0x42>
    3a72:	b.n	3a86 <SdFile::write(void const*, unsigned int)+0x1b6>
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    3a74:	ldr	r3, [pc, #60]	; (3ab4 <SdFile::write(void const*, unsigned int)+0x1e4>)
    3a76:	ldrb	r2, [r7, #5]
    3a78:	ldr	r3, [r3, #0]
    3a7a:	cbz	r3, 3a86 <SdFile::write(void const*, unsigned int)+0x1b6>
    3a7c:	ldr	r3, [sp, #4]
    3a7e:	cbz	r3, 3a86 <SdFile::write(void const*, unsigned int)+0x1b6>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    3a80:	orr.w	r2, r2, #128	; 0x80
    3a84:	strb	r2, [r7, #5]
  }

  if (flags_ & O_SYNC) {
    3a86:	lsls	r2, r2, #28
    3a88:	bpl.n	3a9e <SdFile::write(void const*, unsigned int)+0x1ce>
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    3a8a:	ldrb	r3, [r7, #6]
    3a8c:	cmp	r3, #0
    3a8e:	beq.w	38e2 <SdFile::write(void const*, unsigned int)+0x12>
    3a92:	mov	r0, r7
    3a94:	bl	37d4 <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    3a98:	cmp	r0, #0
    3a9a:	beq.w	38e2 <SdFile::write(void const*, unsigned int)+0x12>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    3a9e:	ldr	r0, [sp, #4]
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    3aa0:	add	sp, #20
    3aa2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3aa6:	nop
    3aa8:	.word	0x2001c6d4
    3aac:	.word	0x2001c8d8
    3ab0:	.word	0x0ffffff8
    3ab4:	.word	0x2001c8ec
    3ab8:	.word	0x2001c6d8
    3abc:	.word	0x20016f14

00003ac0 <SdFile::write(unsigned char)>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    3ac0:	push	{lr}
    3ac2:	sub	sp, #12
    3ac4:	add	r3, sp, #8
  return write(&b, 1);
    3ac6:	movs	r2, #1
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    3ac8:	strb.w	r1, [r3, #-1]!
  return write(&b, 1);
    3acc:	mov	r1, r3
    3ace:	bl	38d0 <SdFile::write(void const*, unsigned int)>
}
    3ad2:	add	sp, #12
    3ad4:	ldr.w	pc, [sp], #4

00003ad8 <Sd2Card::chipSelectHigh()>:
}
//------------------------------------------------------------------------------
#ifdef SPI_HAS_TRANSACTION
static uint8_t chip_select_asserted = 0;
#endif
void Sd2Card::chipSelectHigh(void) {
    3ad8:	push	{r4, lr}
  digitalWrite(chipSelectPin_, HIGH);
    3ada:	movs	r1, #1
    3adc:	ldrb	r0, [r0, #0]
    3ade:	bl	883c <digitalWrite>
#ifdef SPI_HAS_TRANSACTION
  if (chip_select_asserted) {
    3ae2:	ldr	r2, [pc, #68]	; (3b28 <Sd2Card::chipSelectHigh()+0x50>)
    3ae4:	ldrb	r3, [r2, #0]
    3ae6:	cbz	r3, 3b1a <Sd2Card::chipSelectHigh()+0x42>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    3ae8:	ldr	r1, [pc, #64]	; (3b2c <Sd2Card::chipSelectHigh()+0x54>)
    3aea:	ldrb	r3, [r1, #11]
    chip_select_asserted = 0;
    3aec:	movs	r4, #0
    3aee:	mov	r0, r3
    3af0:	strb	r4, [r2, #0]
    3af2:	cbz	r3, 3b1a <Sd2Card::chipSelectHigh()+0x42>
			if (interruptMasksUsed & 0x01) {
    3af4:	lsls	r2, r3, #31
    3af6:	bpl.n	3b00 <Sd2Card::chipSelectHigh()+0x28>
				NVIC_ISER0 = interruptSave[0];
    3af8:	ldr	r2, [pc, #52]	; (3b30 <Sd2Card::chipSelectHigh()+0x58>)
    3afa:	ldr	r0, [r1, #28]
    3afc:	str	r0, [r2, #0]
    3afe:	mov	r0, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    3b00:	lsls	r4, r3, #30
    3b02:	bpl.n	3b0c <Sd2Card::chipSelectHigh()+0x34>
				NVIC_ISER1 = interruptSave[1];
    3b04:	ldr	r3, [pc, #44]	; (3b34 <Sd2Card::chipSelectHigh()+0x5c>)
    3b06:	ldr	r2, [r1, #32]
    3b08:	ldrb	r0, [r1, #11]
    3b0a:	str	r2, [r3, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    3b0c:	lsls	r2, r0, #29
    3b0e:	bmi.n	3b1c <Sd2Card::chipSelectHigh()+0x44>
				NVIC_ISER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    3b10:	lsls	r3, r0, #28
    3b12:	bpl.n	3b1a <Sd2Card::chipSelectHigh()+0x42>
				NVIC_ISER3 = interruptSave[3];
    3b14:	ldr	r3, [pc, #32]	; (3b38 <Sd2Card::chipSelectHigh()+0x60>)
    3b16:	ldr	r2, [r1, #40]	; 0x28
    3b18:	str	r2, [r3, #0]
    3b1a:	pop	{r4, pc}
				NVIC_ISER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				NVIC_ISER2 = interruptSave[2];
    3b1c:	ldr	r3, [pc, #28]	; (3b3c <Sd2Card::chipSelectHigh()+0x64>)
    3b1e:	ldr	r2, [r1, #36]	; 0x24
    3b20:	ldrb	r0, [r1, #11]
    3b22:	str	r2, [r3, #0]
    3b24:	b.n	3b10 <Sd2Card::chipSelectHigh()+0x38>
    3b26:	nop
    3b28:	.word	0x2001c8f4
    3b2c:	.word	0x20016d8c
    3b30:	.word	0xe000e100
    3b34:	.word	0xe000e104
    3b38:	.word	0xe000e10c
    3b3c:	.word	0xe000e108

00003b40 <Sd2Card::chipSelectLow()>:
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    3b40:	ldr	r3, [pc, #140]	; (3bd0 <Sd2Card::chipSelectLow()+0x90>)
    3b42:	ldrb	r2, [r3, #0]
    3b44:	cbz	r2, 3b4e <Sd2Card::chipSelectLow()+0xe>
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    3b46:	ldrb	r0, [r0, #0]
    3b48:	movs	r1, #0
    3b4a:	b.w	883c <digitalWrite>
    SPI.endTransaction();
  }
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
    3b4e:	push	{r4, r5, r6}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    3b50:	ldr	r2, [pc, #128]	; (3bd4 <Sd2Card::chipSelectLow()+0x94>)
    3b52:	ldr	r1, [pc, #132]	; (3bd8 <Sd2Card::chipSelectLow()+0x98>)
    3b54:	ldrb	r4, [r2, #11]
    3b56:	ldr	r1, [r1, #0]
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    3b58:	movs	r5, #1
    3b5a:	strb	r5, [r3, #0]
    3b5c:	cmp	r4, #0
    3b5e:	beq.n	3bae <Sd2Card::chipSelectLow()+0x6e>
			__disable_irq();
    3b60:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    3b62:	ldrb	r4, [r2, #11]
    3b64:	lsls	r6, r4, #31
    3b66:	mov	r3, r4
    3b68:	bpl.n	3b78 <Sd2Card::chipSelectLow()+0x38>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    3b6a:	ldr	r5, [pc, #112]	; (3bdc <Sd2Card::chipSelectLow()+0x9c>)
    3b6c:	ldr	r3, [r2, #12]
    3b6e:	ldr	r6, [r5, #0]
    3b70:	ands	r3, r6
    3b72:	str	r3, [r2, #28]
				NVIC_ICER0 = interruptSave[0];
    3b74:	str	r3, [r5, #0]
    3b76:	mov	r3, r4
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    3b78:	lsls	r5, r4, #30
    3b7a:	bpl.n	3b8a <Sd2Card::chipSelectLow()+0x4a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    3b7c:	ldr	r5, [pc, #96]	; (3be0 <Sd2Card::chipSelectLow()+0xa0>)
    3b7e:	ldr	r4, [r2, #16]
    3b80:	ldr	r6, [r5, #0]
    3b82:	ldrb	r3, [r2, #11]
    3b84:	ands	r4, r6
    3b86:	str	r4, [r2, #32]
				NVIC_ICER1 = interruptSave[1];
    3b88:	str	r4, [r5, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    3b8a:	lsls	r4, r3, #29
    3b8c:	bpl.n	3b9c <Sd2Card::chipSelectLow()+0x5c>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    3b8e:	ldr	r5, [pc, #84]	; (3be4 <Sd2Card::chipSelectLow()+0xa4>)
    3b90:	ldr	r4, [r2, #20]
    3b92:	ldr	r6, [r5, #0]
    3b94:	ldrb	r3, [r2, #11]
    3b96:	ands	r4, r6
    3b98:	str	r4, [r2, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    3b9a:	str	r4, [r5, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    3b9c:	lsls	r3, r3, #28
    3b9e:	bpl.n	3bac <Sd2Card::chipSelectLow()+0x6c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    3ba0:	ldr	r4, [pc, #68]	; (3be8 <Sd2Card::chipSelectLow()+0xa8>)
    3ba2:	ldr	r3, [r2, #24]
    3ba4:	ldr	r5, [r4, #0]
    3ba6:	ands	r3, r5
    3ba8:	str	r3, [r2, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    3baa:	str	r3, [r4, #0]
			}
			#endif
			__enable_irq();
    3bac:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    3bae:	ldr	r3, [r2, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    3bb0:	ldr	r2, [r3, #12]
    3bb2:	cmp	r2, r1
    3bb4:	beq.n	3bc6 <Sd2Card::chipSelectLow()+0x86>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    3bb6:	ldr	r4, [pc, #52]	; (3bec <Sd2Card::chipSelectLow()+0xac>)
    3bb8:	str	r4, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    3bba:	ldr	r2, [pc, #52]	; (3bf0 <Sd2Card::chipSelectLow()+0xb0>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    3bbc:	str	r1, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    3bbe:	orr.w	r4, r1, #1073741824	; 0x40000000
    3bc2:	str	r4, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    3bc4:	str	r2, [r3, #0]
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    3bc6:	ldrb	r0, [r0, #0]
    3bc8:	movs	r1, #0
}
    3bca:	pop	{r4, r5, r6}
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    3bcc:	b.w	883c <digitalWrite>
    3bd0:	.word	0x2001c8f4
    3bd4:	.word	0x20016d8c
    3bd8:	.word	0x2001c8f0
    3bdc:	.word	0xe000e180
    3be0:	.word	0xe000e184
    3be4:	.word	0xe000e188
    3be8:	.word	0xe000e18c
    3bec:	.word	0x003f4001
    3bf0:	.word	0x803f0000

00003bf4 <Sd2Card::waitNotBusy(unsigned int)>:
  return true;
#endif
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
    3bf4:	push	{r4, r5, r6, r7}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3bf6:	ldr	r0, [pc, #72]	; (3c40 <Sd2Card::waitNotBusy(unsigned int)+0x4c>)
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3bf8:	ldr	r2, [pc, #72]	; (3c44 <Sd2Card::waitNotBusy(unsigned int)+0x50>)
    3bfa:	ldr	r3, [r0, #0]
  return true;
#endif
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
    3bfc:	sub	sp, #8
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3bfe:	mov	r6, r2
    3c00:	str	r3, [sp, #0]
	return ret;
    3c02:	ldr	r7, [sp, #0]
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    3c04:	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    3c08:	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3c0a:	ldr	r3, [r2, #0]
    3c0c:	orr.w	r3, r3, #1024	; 0x400
    3c10:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    3c12:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    3c14:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3c16:	ldr	r3, [r2, #44]	; 0x2c
    3c18:	cmp	r3, #0
    3c1a:	bge.n	3c16 <Sd2Card::waitNotBusy(unsigned int)+0x22>
  return SPI0_POPR;
    3c1c:	ldr	r3, [r6, #56]	; 0x38
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    3c1e:	uxtb	r3, r3
    3c20:	cmp	r3, #255	; 0xff
    3c22:	beq.n	3c38 <Sd2Card::waitNotBusy(unsigned int)+0x44>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3c24:	ldr	r3, [r0, #0]
    3c26:	str	r3, [sp, #4]
	return ret;
    3c28:	ldr	r3, [sp, #4]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    3c2a:	subs	r3, r3, r7
    3c2c:	cmp	r3, r1
    3c2e:	bcc.n	3c0a <Sd2Card::waitNotBusy(unsigned int)+0x16>
  return false;
    3c30:	movs	r0, #0
}
    3c32:	add	sp, #8
    3c34:	pop	{r4, r5, r6, r7}
    3c36:	bx	lr
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    3c38:	movs	r0, #1
    d = millis() - t0;
  }
  while (d < timeoutMillis);
  return false;
}
    3c3a:	add	sp, #8
    3c3c:	pop	{r4, r5, r6, r7}
    3c3e:	bx	lr
    3c40:	.word	0x2001c95c
    3c44:	.word	0x4002c000

00003c48 <Sd2Card::cardCommand(unsigned char, unsigned long)>:


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    3c48:	push	{r3, r4, r5, r6, r7, lr}
    3c4a:	mov	r5, r1
  // wait up to 300 ms if busy
  waitNotBusy(300);
    3c4c:	mov.w	r1, #300	; 0x12c


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    3c50:	mov	r6, r2
    3c52:	mov	r4, r0
  // wait up to 300 ms if busy
  waitNotBusy(300);
    3c54:	bl	3bf4 <Sd2Card::waitNotBusy(unsigned int)>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3c58:	ldr	r3, [pc, #160]	; (3cfc <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
    3c5a:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    3c5c:	mov.w	r0, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3c60:	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    3c64:	orr.w	r1, r5, #64	; 0x40
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3c68:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    3c6a:	str	r0, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3c6c:	mov	r2, r3
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    3c6e:	str	r1, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3c70:	ldr	r3, [r2, #44]	; 0x2c
    3c72:	cmp	r3, #0
    3c74:	bge.n	3c70 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x28>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3c76:	ldr	r1, [pc, #132]	; (3cfc <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3c78:	movs	r0, #24
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    3c7a:	mov.w	r7, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3c7e:	ldr	r2, [r1, #0]
    3c80:	lsr.w	r3, r6, r0
    3c84:	orr.w	r2, r2, #1024	; 0x400
    3c88:	uxtb	r3, r3
    3c8a:	str	r2, [r1, #0]
  SPI0_SR = SPI_SR_TCF;
    3c8c:	str	r7, [r1, #44]	; 0x2c
  SPI0_PUSHR = b;
    3c8e:	str	r3, [r1, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3c90:	ldr	r3, [r1, #44]	; 0x2c
    3c92:	cmp	r3, #0
    3c94:	bge.n	3c90 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x48>
    3c96:	subs	r0, #8

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    3c98:	cmn.w	r0, #8
    3c9c:	bne.n	3c7e <Sd2Card::cardCommand(unsigned char, unsigned long)+0x36>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    3c9e:	cbz	r5, 3cf6 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xae>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    3ca0:	cmp	r5, #8
    3ca2:	ite	eq
    3ca4:	moveq	r1, #135	; 0x87
    3ca6:	movne	r1, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3ca8:	ldr	r3, [pc, #80]	; (3cfc <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
    3caa:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    3cac:	mov.w	r0, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3cb0:	orr.w	r2, r2, #1024	; 0x400
    3cb4:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    3cb6:	str	r0, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3cb8:	mov	r2, r3
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    3cba:	str	r1, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3cbc:	ldr	r3, [r2, #44]	; 0x2c
    3cbe:	cmp	r3, #0
    3cc0:	bge.n	3cbc <Sd2Card::cardCommand(unsigned char, unsigned long)+0x74>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3cc2:	ldr	r2, [pc, #56]	; (3cfc <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3cc4:	movs	r7, #0
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3cc6:	mov	r6, r2
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    3cc8:	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    3ccc:	movs	r1, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3cce:	ldr	r3, [r2, #0]
    3cd0:	orr.w	r3, r3, #1024	; 0x400
    3cd4:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    3cd6:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    3cd8:	str	r1, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3cda:	ldr	r3, [r2, #44]	; 0x2c
    3cdc:	cmp	r3, #0
    3cde:	bge.n	3cda <Sd2Card::cardCommand(unsigned char, unsigned long)+0x92>
  return SPI0_POPR;
    3ce0:	ldr	r3, [r6, #56]	; 0x38
    3ce2:	uxtb	r0, r3
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    3ce4:	lsls	r3, r3, #24
    3ce6:	strb	r0, [r4, #1]
    3ce8:	bmi.n	3cec <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa4>
  return status_;
}
    3cea:	pop	{r3, r4, r5, r6, r7, pc}
    3cec:	adds	r7, #1
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    3cee:	cmp.w	r7, #256	; 0x100
    3cf2:	bne.n	3cce <Sd2Card::cardCommand(unsigned char, unsigned long)+0x86>
  return status_;
}
    3cf4:	pop	{r3, r4, r5, r6, r7, pc}
    3cf6:	movs	r1, #149	; 0x95
    3cf8:	b.n	3ca8 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x60>
    3cfa:	nop
    3cfc:	.word	0x4002c000

00003d00 <Sd2Card::waitStartBlock()>:
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    3d00:	push	{r4, r5, r6, r7}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3d02:	ldr	r1, [pc, #84]	; (3d58 <Sd2Card::waitStartBlock()+0x58>)
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3d04:	ldr	r2, [pc, #84]	; (3d5c <Sd2Card::waitStartBlock()+0x5c>)
    3d06:	ldr	r3, [r1, #0]
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    3d08:	sub	sp, #8
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3d0a:	mov	r6, r2
    3d0c:	str	r3, [sp, #0]
	return ret;
    3d0e:	ldr	r7, [sp, #0]
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    3d10:	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    3d14:	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3d16:	ldr	r3, [r2, #0]
    3d18:	orr.w	r3, r3, #1024	; 0x400
    3d1c:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    3d1e:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    3d20:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3d22:	ldr	r3, [r2, #44]	; 0x2c
    3d24:	cmp	r3, #0
    3d26:	bge.n	3d22 <Sd2Card::waitStartBlock()+0x22>
  return SPI0_POPR;
    3d28:	ldr	r3, [r6, #56]	; 0x38
    3d2a:	uxtb	r3, r3
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    3d2c:	cmp	r3, #255	; 0xff
    3d2e:	strb	r3, [r0, #1]
    3d30:	bne.n	3d48 <Sd2Card::waitStartBlock()+0x48>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3d32:	ldr	r3, [r1, #0]
    3d34:	str	r3, [sp, #4]
	return ret;
    3d36:	ldr	r3, [sp, #4]
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
    3d38:	subs	r3, r3, r7
    3d3a:	cmp.w	r3, #300	; 0x12c
    3d3e:	bls.n	3d16 <Sd2Card::waitStartBlock()+0x16>
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    3d40:	movs	r0, #0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    3d42:	add	sp, #8
    3d44:	pop	{r4, r5, r6, r7}
    3d46:	bx	lr
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    3d48:	sub.w	r0, r3, #254	; 0xfe
    3d4c:	clz	r0, r0
    3d50:	lsrs	r0, r0, #5
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    3d52:	add	sp, #8
    3d54:	pop	{r4, r5, r6, r7}
    3d56:	bx	lr
    3d58:	.word	0x2001c95c
    3d5c:	.word	0x4002c000

00003d60 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>:

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    3d60:	push	{r3, r4, r5, r6, r7, lr}
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    3d62:	ldrb	r3, [r0, #2]
    3d64:	cmp	r3, #3

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    3d66:	mov	r6, r1
    3d68:	mov	r4, r0
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    3d6a:	it	ne
    3d6c:	lslne	r6, r1, #9

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    3d6e:	mov	r5, r2
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
  chipSelectLow();
    3d70:	bl	3b40 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD17, block)) {
    3d74:	mov	r2, r6
    3d76:	movs	r1, #17
    3d78:	mov	r0, r4
    3d7a:	bl	3c48 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    3d7e:	cbnz	r0, 3d88 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x28>
    goto fail; // SD_CARD_ERROR_CMD17
  }
  if (!waitStartBlock()) {
    3d80:	mov	r0, r4
    3d82:	bl	3d00 <Sd2Card::waitStartBlock()>
    3d86:	cbnz	r0, 3d92 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x32>
#endif
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    3d88:	mov	r0, r4
    3d8a:	bl	3ad8 <Sd2Card::chipSelectHigh()>
  return false;
    3d8e:	movs	r0, #0
}
    3d90:	pop	{r3, r4, r5, r6, r7, pc}
  return SPI0_POPR;
}
/** SPI receive multiple bytes */
static uint8_t spiRec(uint8_t* buf, size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    3d92:	ldr	r3, [pc, #128]	; (3e14 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    3d94:	ldr	r1, [pc, #128]	; (3e18 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb8>)
  return SPI0_POPR;
}
/** SPI receive multiple bytes */
static uint8_t spiRec(uint8_t* buf, size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    3d96:	ldr	r2, [pc, #132]	; (3e1c <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xbc>)
    3d98:	str	r2, [r3, #0]
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    3d9a:	mov	lr, r1
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    3d9c:	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    3d9e:	mov	r2, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    3da0:	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    3da2:	mov	r6, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    3da4:	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
    3da6:	add.w	r0, r5, #506	; 0x1fa
    3daa:	adds	r1, r5, #2
    3dac:	add.w	r7, r5, #508	; 0x1fc
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    3db0:	ldr	r3, [r2, #44]	; 0x2c
    3db2:	tst.w	r3, #240	; 0xf0
    3db6:	beq.n	3db0 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x50>
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    3db8:	str.w	lr, [r6, #52]	; 0x34
    uint16_t w = SPI0_POPR;
    3dbc:	ldr	r3, [r6, #56]	; 0x38
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
    3dbe:	strb.w	r3, [r1, #-1]
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    3dc2:	asrs	r3, r3, #8
    3dc4:	strb.w	r3, [r1, #-2]
    3dc8:	adds	r1, #2
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    3dca:	cmp	r7, r1
    3dcc:	bne.n	3db0 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x50>
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
    3dce:	add.w	r5, r5, #512	; 0x200
  while (buf < limit) {
    3dd2:	cmp	r0, r5
    3dd4:	bcs.n	3df2 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x92>
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    3dd6:	ldr	r2, [pc, #60]	; (3e14 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    3dd8:	mov	r6, r2
    3dda:	ldr	r3, [r2, #44]	; 0x2c
    3ddc:	tst.w	r3, #240	; 0xf0
    3de0:	beq.n	3dda <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x7a>
    uint16_t w = SPI0_POPR;
    3de2:	ldr	r3, [r6, #56]	; 0x38
    *buf++ = w >> 8;
    3de4:	asrs	r1, r3, #8
    3de6:	strb.w	r1, [r0], #2
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
  while (buf < limit) {
    3dea:	cmp	r0, r5
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
    3dec:	strb.w	r3, [r0, #-1]
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
  while (buf < limit) {
    3df0:	bcc.n	3dda <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x7a>
  }
  return 0;
}
static void spiRecIgnore(size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    3df2:	ldr	r3, [pc, #32]	; (3e14 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    3df4:	ldr	r1, [pc, #36]	; (3e1c <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xbc>)
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    3df6:	ldr	r2, [pc, #32]	; (3e18 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb8>)
  }
  return 0;
}
static void spiRecIgnore(size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    3df8:	str	r1, [r3, #0]
    SPI0_POPR;
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    3dfa:	mov	r1, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    3dfc:	str	r2, [r3, #52]	; 0x34
    SPI0_POPR;
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    3dfe:	ldr	r3, [r1, #44]	; 0x2c
    3e00:	ldr	r2, [pc, #16]	; (3e14 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    3e02:	tst.w	r3, #240	; 0xf0
    3e06:	beq.n	3dfe <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x9e>
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    3e08:	mov	r0, r4
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_POPR;
    3e0a:	ldr	r3, [r2, #56]	; 0x38
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    3e0c:	bl	3ad8 <Sd2Card::chipSelectHigh()>
  return true;
    3e10:	movs	r0, #1
    3e12:	pop	{r3, r4, r5, r6, r7, pc}
    3e14:	.word	0x4002c000
    3e18:	.word	0x9000ffff
    3e1c:	.word	0x801f0400

00003e20 <Sd2Card::writeData(unsigned char, unsigned char const*)>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    3e20:	push	{r4, r5, r6, r7}
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    3e22:	ldr	r6, [pc, #196]	; (3ee8 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    3e24:	ldr	r3, [r6, #0]
		SPI0_SR = SPI_SR_TCF;
    3e26:	mov.w	r7, #2147483648	; 0x80000000
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    3e2a:	orr.w	r3, r3, #1024	; 0x400
    3e2e:	str	r3, [r6, #0]
		SPI0_SR = SPI_SR_TCF;
    3e30:	mov	r5, r7
    3e32:	str	r7, [r6, #44]	; 0x2c
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    3e34:	mov	r4, r6
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
		SPI0_SR = SPI_SR_TCF;
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    3e36:	str	r1, [r6, #52]	; 0x34
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    3e38:	mov	r3, r6
    3e3a:	adds	r1, r2, #1
    3e3c:	addw	r7, r2, #513	; 0x201
    3e40:	ldr	r2, [r4, #44]	; 0x2c
    3e42:	cmp	r2, #0
    3e44:	bge.n	3e40 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x20>
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    3e46:	ldr	r2, [r3, #0]
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i];
    3e48:	ldrb.w	r6, [r1, #-1]
    3e4c:	orr.w	r2, r2, #1024	; 0x400
    3e50:	str	r2, [r3, #0]
		SPI0_SR = SPI_SR_TCF;
    3e52:	str	r5, [r3, #44]	; 0x2c
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    3e54:	str	r6, [r3, #52]	; 0x34
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    3e56:	ldr	r2, [r4, #44]	; 0x2c
    3e58:	cmp	r2, #0
    3e5a:	bge.n	3e56 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x36>
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    3e5c:	ldr	r2, [r3, #0]
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i+1];
    3e5e:	ldrb.w	r6, [r1], #2
    3e62:	orr.w	r2, r2, #1024	; 0x400

  // send data - optimized loop
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    3e66:	cmp	r7, r1
    3e68:	str	r2, [r3, #0]
		SPI0_SR = SPI_SR_TCF;
    3e6a:	str	r5, [r3, #44]	; 0x2c
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    3e6c:	str	r6, [r3, #52]	; 0x34
    3e6e:	bne.n	3e40 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x20>
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    3e70:	ldr	r1, [pc, #116]	; (3ee8 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    3e72:	ldr	r2, [r1, #44]	; 0x2c
    3e74:	ldr	r3, [pc, #112]	; (3ee8 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    3e76:	cmp	r2, #0
    3e78:	bge.n	3e72 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x52>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3e7a:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    3e7c:	mov.w	r5, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3e80:	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    3e84:	movs	r4, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3e86:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3e88:	mov	r1, r3
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    3e8a:	str	r5, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
    3e8c:	str	r4, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3e8e:	ldr	r3, [r1, #44]	; 0x2c
    3e90:	ldr	r2, [pc, #84]	; (3ee8 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    3e92:	cmp	r3, #0
    3e94:	bge.n	3e8e <Sd2Card::writeData(unsigned char, unsigned char const*)+0x6e>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3e96:	ldr	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    3e98:	mov.w	r5, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3e9c:	orr.w	r3, r3, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    3ea0:	movs	r4, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3ea2:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3ea4:	mov	r1, r2
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    3ea6:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = b;
    3ea8:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3eaa:	ldr	r3, [r1, #44]	; 0x2c
    3eac:	ldr	r2, [pc, #56]	; (3ee8 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    3eae:	cmp	r3, #0
    3eb0:	bge.n	3eaa <Sd2Card::writeData(unsigned char, unsigned char const*)+0x8a>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3eb2:	ldr	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    3eb4:	mov.w	r5, #2147483648	; 0x80000000
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3eb8:	orr.w	r3, r3, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
    3ebc:	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3ebe:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3ec0:	mov	r1, r2
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    3ec2:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    3ec4:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3ec6:	ldr	r3, [r1, #44]	; 0x2c
    3ec8:	ldr	r2, [pc, #28]	; (3ee8 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    3eca:	cmp	r3, #0
    3ecc:	bge.n	3ec6 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xa6>
  return SPI0_POPR;
    3ece:	ldr	r3, [r2, #56]	; 0x38
    3ed0:	uxtb	r3, r3
    3ed2:	and.w	r2, r3, #31
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
    3ed6:	strb	r3, [r0, #1]
    3ed8:	sub.w	r0, r2, #5
    3edc:	clz	r0, r0
    3ee0:	lsrs	r0, r0, #5
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    return false; // SD_CARD_ERROR_WRITE
  }
  return true;
}
    3ee2:	pop	{r4, r5, r6, r7}
    3ee4:	bx	lr
    3ee6:	nop
    3ee8:	.word	0x4002c000

00003eec <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_writeBlock(uint32_t blockNumber, const uint8_t* src) {
    3eec:	push	{r4, r5, r6, lr}
    3eee:	mov	r4, r0
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    3ef0:	cbz	r1, 3f10 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_BLOCK_ZERO
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    3ef2:	ldrb	r3, [r0, #2]
    3ef4:	cmp	r3, #3
    3ef6:	mov	r5, r1
    3ef8:	it	ne
    3efa:	lslne	r5, r1, #9
    3efc:	mov	r6, r2
  chipSelectLow();
    3efe:	bl	3b40 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD24, blockNumber)) {
    3f02:	mov	r2, r5
    3f04:	movs	r1, #24
    3f06:	mov	r0, r4
    3f08:	bl	3c48 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    3f0c:	mov	r5, r0
    3f0e:	cbz	r0, 3f1a <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x2e>
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    3f10:	mov	r0, r4
    3f12:	bl	3ad8 <Sd2Card::chipSelectHigh()>
  return false;
    3f16:	movs	r0, #0
}
    3f18:	pop	{r4, r5, r6, pc}
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  chipSelectLow();
  if (cardCommand(CMD24, blockNumber)) {
    goto fail; // SD_CARD_ERROR_CMD24
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    3f1a:	mov	r2, r6
    3f1c:	movs	r1, #254	; 0xfe
    3f1e:	mov	r0, r4
    3f20:	bl	3e20 <Sd2Card::writeData(unsigned char, unsigned char const*)>
    3f24:	cmp	r0, #0
    3f26:	beq.n	3f10 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    3f28:	mov.w	r1, #600	; 0x258
    3f2c:	mov	r0, r4
    3f2e:	bl	3bf4 <Sd2Card::waitNotBusy(unsigned int)>
    3f32:	cmp	r0, #0
    3f34:	beq.n	3f10 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    3f36:	mov	r2, r5
    3f38:	movs	r1, #13
    3f3a:	mov	r0, r4
    3f3c:	bl	3c48 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    3f40:	cmp	r0, #0
    3f42:	bne.n	3f10 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3f44:	ldr	r3, [pc, #44]	; (3f74 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x88>)
    3f46:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    3f48:	mov.w	r5, #2147483648	; 0x80000000
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3f4c:	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
    3f50:	movs	r0, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3f52:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3f54:	mov	r1, r3
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    3f56:	str	r5, [r3, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    3f58:	str	r0, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3f5a:	ldr	r3, [r1, #44]	; 0x2c
    3f5c:	ldr	r2, [pc, #20]	; (3f74 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x88>)
    3f5e:	cmp	r3, #0
    3f60:	bge.n	3f5a <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x6e>
  return SPI0_POPR;
    3f62:	ldr	r3, [r2, #56]	; 0x38
  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    3f64:	tst.w	r3, #255	; 0xff
    3f68:	bne.n	3f10 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_PROGRAMMING
  }
  chipSelectHigh();
    3f6a:	mov	r0, r4
    3f6c:	bl	3ad8 <Sd2Card::chipSelectHigh()>
  return true;
    3f70:	movs	r0, #1
    3f72:	pop	{r4, r5, r6, pc}
    3f74:	.word	0x4002c000

00003f78 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    3f78:	ldr	r3, [pc, #4]	; (3f80 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x8>)
    3f7a:	ldr	r2, [pc, #8]	; (3f84 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0xc>)
    3f7c:	str	r2, [r3, #0]
    3f7e:	bx	lr
    3f80:	.word	0x2001c8f0
    3f84:	.word	0x38011001

00003f88 <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
    3f88:	push	{r4, lr}
    3f8a:	mov	r4, r0
  bool rtn = sync();
    3f8c:	bl	4f84 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    3f90:	movs	r3, #0
    3f92:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    3f96:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    3f9a:	pop	{r4, pc}

00003f9c <ExFatFile::openRoot(ExFatVolume*)>:
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    3f9c:	ldrb.w	r2, [r0, #49]	; 0x31
    3fa0:	cbz	r2, 3fa6 <ExFatFile::openRoot(ExFatVolume*)+0xa>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    3fa2:	movs	r0, #0
    3fa4:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    3fa6:	push	{r3, r4, r5, lr}
    3fa8:	mov	r4, r0
    3faa:	mov	r5, r1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    3fac:	mov	r1, r2
    3fae:	movs	r2, #56	; 0x38
    3fb0:	bl	c0dc <memset>
  m_attributes = FILE_ATTR_ROOT;
    3fb4:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3fb6:	movs	r0, #1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    3fb8:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3fbc:	strb.w	r0, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    3fc0:	str	r5, [r4, #32]
    3fc2:	pop	{r3, r4, r5, pc}

00003fc4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    3fc4:	push	{r4, r5, r6, r7, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
    3fc6:	ldrb	r0, [r1, #0]
    3fc8:	cmp	r0, #32
    3fca:	bne.n	3fd4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x10>
    3fcc:	ldrb.w	r0, [r1, #1]!
    3fd0:	cmp	r0, #32
    3fd2:	beq.n	3fcc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8>
    path++;
  }
  fname->lfn = path;
    3fd4:	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
    3fd6:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
    3fd8:	cmp	r0, #0
    3fda:	beq.n	4080 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbc>
    3fdc:	cmp	r0, #47	; 0x2f
    3fde:	beq.n	4038 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    3fe0:	cmp	r0, #92	; 0x5c
    3fe2:	beq.n	4026 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    3fe4:	sub.w	r4, r0, #34	; 0x22
    3fe8:	uxtb	r4, r4
    3fea:	cmp	r4, #29
    3fec:	bls.n	402a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x66>
    3fee:	ldr.w	lr, [pc, #148]	; 4084 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>
    3ff2:	adds	r6, r1, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    3ff4:	movs	r4, #0
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    3ff6:	cmp	r0, #124	; 0x7c
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    3ff8:	sub.w	r5, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    3ffc:	mov	r7, r6
    3ffe:	beq.n	4026 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    4000:	cmp	r5, #94	; 0x5e
    4002:	bhi.n	4026 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    4004:	ldrb.w	r0, [r6], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    4008:	sub.w	r5, r0, #34	; 0x22
    400c:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    400e:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    4010:	cbz	r0, 4072 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xae>
    4012:	cmp	r0, #47	; 0x2f
    4014:	beq.n	403a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
    4016:	cmp	r0, #92	; 0x5c
    4018:	lsr.w	r7, lr, r5
    401c:	beq.n	4026 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    401e:	cmp	r5, #29
    4020:	bhi.n	3ff6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
    4022:	lsls	r5, r7, #31
    4024:	bpl.n	3ff6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    4026:	movs	r0, #0
    4028:	pop	{r4, r5, r6, r7, pc}
    402a:	ldr	r5, [pc, #88]	; (4084 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>)
    402c:	lsr.w	r4, r5, r4
    4030:	lsls	r6, r4, #31
    4032:	bpl.n	3fee <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2a>
    4034:	movs	r0, #0
    4036:	pop	{r4, r5, r6, r7, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    4038:	movs	r4, #0
    403a:	adds	r7, r1, r4
    403c:	mov	r6, r7
    403e:	mov	r5, r4
    4040:	movs	r0, #47	; 0x2f
    4042:	b.n	404a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x86>
    4044:	ldrb.w	r0, [r6, #1]!
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    4048:	adds	r5, #1
    404a:	cmp	r0, #32
    404c:	beq.n	4044 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
    404e:	cmp	r0, #47	; 0x2f
    4050:	beq.n	4044 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
  *ptr = &path[end];
    4052:	add	r1, r5
    4054:	str	r1, [r3, #0]

  // Back over spaces and dots.
  while (len) {
    4056:	cbz	r4, 406a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    4058:	mov	r1, r7
    c = path[len - 1];
    405a:	ldrb.w	r3, [r1, #-1]!
    if (c != '.' && c != ' ') {
    405e:	cmp	r3, #46	; 0x2e
    4060:	beq.n	4066 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa2>
    4062:	cmp	r3, #32
    4064:	bne.n	4078 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb4>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    4066:	subs	r4, #1
    4068:	bne.n	405a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
    406a:	mov	r0, r4
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
    406c:	str	r0, [r2, #0]
  return true;
    406e:	movs	r0, #1
    4070:	pop	{r4, r5, r6, r7, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    4072:	str	r7, [r3, #0]
    4074:	adds	r7, r1, r4
    4076:	b.n	4058 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x94>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    4078:	cmp	r4, #255	; 0xff
    407a:	ble.n	406a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    407c:	movs	r0, #0
    407e:	pop	{r4, r5, r6, r7, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    4080:	str	r1, [r3, #0]
    4082:	b.n	406c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa8>
    4084:	.word	0x35000101

00004088 <ExFatFile::read(void*, unsigned int)>:

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    4088:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    408c:	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    4090:	lsls	r5, r3, #31

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    4092:	sub	sp, #12
    4094:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    4096:	bpl.w	41f2 <ExFatFile::read(void*, unsigned int)+0x16a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    409a:	lsls	r0, r3, #25
    409c:	mov	r5, r1
    409e:	mov	r6, r2
    40a0:	bpl.w	4208 <ExFatFile::read(void*, unsigned int)+0x180>
    if ((m_curPosition + count) > m_validLength) {
    40a4:	ldrd	r0, r1, [r4]
    40a8:	ldrd	r2, r3, [r4, #16]
    40ac:	adds.w	r8, r0, r6
    40b0:	adc.w	r9, r1, #0
    40b4:	cmp	r3, r9
    40b6:	it	eq
    40b8:	cmpeq	r2, r8
    40ba:	bcc.w	4214 <ExFatFile::read(void*, unsigned int)+0x18c>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    40be:	cmp	r6, #0
    40c0:	beq.w	4218 <ExFatFile::read(void*, unsigned int)+0x190>
    40c4:	mov	r9, r4
    40c6:	ldrd	r2, r3, [r9], #24
    40ca:	mov	r8, r6
    40cc:	b.n	416e <ExFatFile::read(void*, unsigned int)+0xe6>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
    40ce:	orrs	r3, r2
    40d0:	bne.n	41aa <ExFatFile::read(void*, unsigned int)+0x122>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    40d2:	ldrb.w	r3, [r4, #49]	; 0x31
    40d6:	lsls	r2, r3, #25
    40d8:	ite	mi
    40da:	ldrmi.w	r1, [r0, #1068]	; 0x42c
    40de:	ldrpl	r1, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    40e0:	str	r1, [r4, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    40e2:	ldrb.w	ip, [r0, #1085]	; 0x43d
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    40e6:	ldr.w	r2, [r0, #1060]	; 0x424
    40ea:	subs	r1, #2
    40ec:	lsrs	r7, r7, #9
    40ee:	lsl.w	lr, r1, ip
    40f2:	adds	r1, r7, r2
    40f4:	add	r1, lr
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
    40f6:	cmp.w	sl, #0
    40fa:	bne.n	4182 <ExFatFile::read(void*, unsigned int)+0xfa>
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    40fc:	cmp.w	r8, #512	; 0x200
    4100:	bcc.n	4182 <ExFatFile::read(void*, unsigned int)+0xfa>
    4102:	ldr.w	r2, [r0, #532]	; 0x214
                          || sector == m_vol->dataCacheSector()) {
    4106:	cmp	r1, r2
    4108:	beq.n	4182 <ExFatFile::read(void*, unsigned int)+0xfa>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    410a:	cmp.w	r8, #1024	; 0x400
    410e:	bcc.n	41b8 <ExFatFile::read(void*, unsigned int)+0x130>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    4110:	movs	r3, #1
    4112:	lsl.w	ip, r3, ip
    4116:	rsb	r7, r7, ip
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    411a:	mov.w	r3, r8, lsr #9
    411e:	cmp	r7, r3
    4120:	it	cs
    4122:	movcs	r7, r3
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    4124:	cmp	r1, r2
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    4126:	mov.w	fp, r7, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    412a:	bhi.n	4144 <ExFatFile::read(void*, unsigned int)+0xbc>
    412c:	adds	r3, r7, r1
    412e:	cmp	r3, r2
    4130:	bls.n	4144 <ExFatFile::read(void*, unsigned int)+0xbc>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    4132:	add.w	r0, r0, #524	; 0x20c
    4136:	str	r1, [sp, #4]
    4138:	bl	4928 <FsCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->dataCacheSync()) {
    413c:	cmp	r0, #0
    413e:	beq.n	41f2 <ExFatFile::read(void*, unsigned int)+0x16a>
    4140:	ldr	r0, [r4, #32]
    4142:	ldr	r1, [sp, #4]
    4144:	ldr.w	r0, [r0, #1080]	; 0x438
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
    4148:	ldr	r2, [r0, #0]
    414a:	mov	r3, r7
    414c:	ldr	r7, [r2, #12]
    414e:	mov	r2, r5
    4150:	blx	r7
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    4152:	cmp	r0, #0
    4154:	beq.n	41f2 <ExFatFile::read(void*, unsigned int)+0x16a>
    4156:	mov	r0, fp
    4158:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    415a:	ldrd	r2, r3, [r4]
    415e:	adds	r2, r2, r0
    4160:	adcs	r3, r1
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    4162:	subs.w	r8, r8, fp
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    4166:	add	r5, fp
    m_curPosition += n;
    4168:	strd	r2, r3, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    416c:	beq.n	4218 <ExFatFile::read(void*, unsigned int)+0x190>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    416e:	ldr	r0, [r4, #32]
    4170:	ldr.w	r7, [r0, #1072]	; 0x430
    4174:	ands	r7, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
    4176:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    417a:	cmp	r7, #0
    417c:	beq.n	40ce <ExFatFile::read(void*, unsigned int)+0x46>
    417e:	ldr	r1, [r4, #24]
    4180:	b.n	40e2 <ExFatFile::read(void*, unsigned int)+0x5a>
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4182:	add.w	r0, r0, #524	; 0x20c
    4186:	movs	r2, #0
    4188:	bl	4868 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    418c:	cbz	r0, 41f2 <ExFatFile::read(void*, unsigned int)+0x16a>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    418e:	rsb	fp, sl, #512	; 0x200
    4192:	cmp	fp, r8
    4194:	it	cs
    4196:	movcs	fp, r8
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    4198:	add.w	r1, r0, sl
    419c:	mov	r2, fp
    419e:	mov	r0, r5
    41a0:	bl	81cc <memcpy>
    41a4:	mov	r0, fp
    41a6:	movs	r1, #0
    41a8:	b.n	415a <ExFatFile::read(void*, unsigned int)+0xd2>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    41aa:	ldrb.w	r3, [r4, #51]	; 0x33
    41ae:	lsls	r3, r3, #25
    41b0:	bpl.n	41d2 <ExFatFile::read(void*, unsigned int)+0x14a>
        m_curCluster++;
    41b2:	ldr	r1, [r4, #24]
    41b4:	adds	r1, #1
    41b6:	b.n	40e0 <ExFatFile::read(void*, unsigned int)+0x58>
    41b8:	ldr.w	r0, [r0, #1080]	; 0x438
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    41bc:	ldr	r3, [r0, #0]
    41be:	mov	r2, r5
    41c0:	ldr	r3, [r3, #8]
    41c2:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    41c4:	cbz	r0, 41f2 <ExFatFile::read(void*, unsigned int)+0x16a>
    41c6:	mov.w	r0, #512	; 0x200
    41ca:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    41cc:	mov.w	fp, #512	; 0x200
    41d0:	b.n	415a <ExFatFile::read(void*, unsigned int)+0xd2>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    41d2:	mov	r2, r9
    41d4:	ldr	r1, [r4, #24]
    41d6:	bl	4c3c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    41da:	sxtb	r0, r0
        if (fg < 0) {
    41dc:	cmp	r0, #0
    41de:	blt.n	41f2 <ExFatFile::read(void*, unsigned int)+0x16a>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    41e0:	beq.n	41e8 <ExFatFile::read(void*, unsigned int)+0x160>
    41e2:	ldr	r0, [r4, #32]
    41e4:	ldr	r1, [r4, #24]
    41e6:	b.n	40e2 <ExFatFile::read(void*, unsigned int)+0x5a>
          // EOF if directory.
          if (isDir()) {
    41e8:	ldrb.w	r3, [r4, #49]	; 0x31
    41ec:	tst.w	r3, #80	; 0x50
    41f0:	bne.n	421c <ExFatFile::read(void*, unsigned int)+0x194>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    41f2:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    41f6:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    41fa:	orr.w	r3, r3, #2
    41fe:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    4202:	add	sp, #12
    4204:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    4208:	ldrb.w	r3, [r4, #49]	; 0x31
    420c:	lsls	r1, r3, #28
    420e:	bmi.w	40a4 <ExFatFile::read(void*, unsigned int)+0x1c>
    4212:	b.n	40be <ExFatFile::read(void*, unsigned int)+0x36>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    4214:	subs	r6, r2, r0
    4216:	b.n	40be <ExFatFile::read(void*, unsigned int)+0x36>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    4218:	mov.w	r8, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    421c:	rsb	r0, r8, r6

fail:
  m_error |= READ_ERROR;
  return -1;
}
    4220:	add	sp, #12
    4222:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4226:	nop

00004228 <ExFatFile::peek()>:
  }
  fname->len = len;
  return true;
}
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
    4228:	push	{r4, r5, r6, r7, lr}
    422a:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    422c:	movs	r2, #1
    422e:	add.w	r1, sp, #7
    4232:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    4234:	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    4238:	ldr	r5, [r0, #24]
    423a:	bl	4088 <ExFatFile::read(void*, unsigned int)>
    423e:	cmp	r0, #1
    4240:	it	eq
    4242:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    4246:	str	r5, [r4, #24]
    4248:	it	ne
    424a:	movne.w	r0, #4294967295
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    424e:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    4252:	add	sp, #12
    4254:	pop	{r4, r5, r6, r7, pc}
    4256:	nop

00004258 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    4258:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    425c:	ldrb.w	lr, [r0, #49]	; 0x31
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    4260:	ldr	r5, [r0, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    4262:	sub	sp, #12
    4264:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    4266:	cmp.w	lr, #0
    426a:	beq.n	42a4 <ExFatFile::seekSet(unsigned long long)+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    426c:	ldrd	r0, r1, [r0]
    4270:	cmp	r1, r3
    4272:	it	eq
    4274:	cmpeq	r0, r2
    4276:	mov	r6, r2
    4278:	mov	r7, r3
    427a:	beq.n	42f4 <ExFatFile::seekSet(unsigned long long)+0x9c>
    return true;
  }
  if (pos == 0) {
    427c:	orrs.w	r3, r6, r7
    4280:	bne.n	4292 <ExFatFile::seekSet(unsigned long long)+0x3a>
    // set position to start of file
    m_curCluster = 0;
    4282:	movs	r3, #0
    4284:	str	r3, [r4, #24]
    }
  }

done:
  m_curPosition = pos;
  return true;
    4286:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    4288:	strd	r6, r7, [r4]
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    428c:	add	sp, #12
    428e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    4292:	tst.w	lr, #8
    4296:	beq.n	42ae <ExFatFile::seekSet(unsigned long long)+0x56>
    if (pos > m_validLength) {
    4298:	ldrd	r2, r3, [r4, #16]
    429c:	cmp	r3, r7
    429e:	it	eq
    42a0:	cmpeq	r2, r6
    42a2:	bcs.n	42ae <ExFatFile::seekSet(unsigned long long)+0x56>
done:
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
    42a4:	str	r5, [r4, #24]
  return false;
    42a6:	movs	r0, #0
}
    42a8:	add	sp, #12
    42aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    42ae:	ldr	r3, [r4, #32]
    42b0:	str	r3, [sp, #4]
    42b2:	ldrb.w	ip, [r3, #1085]	; 0x43d
  if (isContiguous()) {
    42b6:	ldrb.w	sl, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    42ba:	add.w	ip, ip, #9
    42be:	uxtb.w	ip, ip
    42c2:	adds.w	r2, r6, #4294967295
    42c6:	adc.w	r3, r7, #4294967295
    42ca:	rsb	r8, ip, #32
    42ce:	lsl.w	fp, r3, r8
    42d2:	lsr.w	r2, r2, ip
    42d6:	orr.w	r2, r2, fp
    42da:	sub.w	fp, ip, #32
    42de:	lsr.w	r3, r3, fp
  if (isContiguous()) {
    42e2:	tst.w	sl, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    42e6:	orr.w	r2, r2, r3
  if (isContiguous()) {
    42ea:	beq.n	42f8 <ExFatFile::seekSet(unsigned long long)+0xa0>
    m_curCluster = m_firstCluster + nNew;
    42ec:	ldr	r3, [r4, #28]
    42ee:	add	r2, r3
    42f0:	str	r2, [r4, #24]
    goto done;
    42f2:	b.n	4286 <ExFatFile::seekSet(unsigned long long)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    42f4:	movs	r0, #1
    42f6:	b.n	42a8 <ExFatFile::seekSet(unsigned long long)+0x50>
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    42f8:	adds.w	r9, r0, #4294967295
    42fc:	adc.w	sl, r1, #4294967295
    4300:	lsr.w	ip, r9, ip
    4304:	lsl.w	r8, sl, r8
    4308:	orr.w	ip, ip, r8
    430c:	lsr.w	fp, sl, fp
    4310:	orr.w	ip, ip, fp
  if (nNew < nCur || m_curPosition == 0) {
    4314:	cmp	r2, ip
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    4316:	mov	r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    4318:	bcs.n	434a <ExFatFile::seekSet(unsigned long long)+0xf2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    431a:	tst.w	lr, #64	; 0x40
    431e:	itet	ne
    4320:	ldrne	r3, [sp, #4]
    4322:	ldreq	r3, [r4, #28]
    4324:	ldrne.w	r3, [r3, #1068]	; 0x42c
    4328:	str	r3, [r4, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    432a:	mov	r8, r2
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    432c:	add.w	r9, r4, #24
    4330:	mov	r2, r9
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    4332:	cmp.w	r8, #0
    4336:	beq.n	4286 <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    4338:	ldr	r1, [r4, #24]
    433a:	ldr	r0, [r4, #32]
    433c:	bl	4c3c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    4340:	add.w	r8, r8, #4294967295
    4344:	cmp	r0, #0
    4346:	bne.n	4330 <ExFatFile::seekSet(unsigned long long)+0xd8>
    4348:	b.n	42a4 <ExFatFile::seekSet(unsigned long long)+0x4c>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
  if (nNew < nCur || m_curPosition == 0) {
    434a:	orrs.w	r3, r0, r1
    434e:	beq.n	431a <ExFatFile::seekSet(unsigned long long)+0xc2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    4350:	rsb	r2, ip, r2
    4354:	b.n	432a <ExFatFile::seekSet(unsigned long long)+0xd2>
    4356:	nop

00004358 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    4358:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    435c:	mov	r6, r1
    435e:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    4360:	ldrb.w	r1, [r0, #49]	; 0x31
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    4364:	str	r2, [sp, #0]
    4366:	mov	r5, r0
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    4368:	cbnz	r1, 4376 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    436a:	mov	sl, r3
    436c:	ldrb.w	r3, [r6, #49]	; 0x31
    4370:	tst.w	r3, #80	; 0x50
    4374:	bne.n	4386 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2e>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    4376:	movs	r0, #0
    4378:	strb.w	r0, [r5, #49]	; 0x31
  m_flags = 0;
    437c:	strb.w	r0, [r5, #51]	; 0x33
  return false;
}
    4380:	add	sp, #76	; 0x4c
    4382:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    4386:	ldr	r3, [sp, #112]	; 0x70
    4388:	and.w	r3, r3, #3
    438c:	cmp	r3, #1
    438e:	beq.n	439e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x46>
    4390:	cmp	r3, #2
    4392:	beq.w	45a8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x250>
    4396:	cmp	r3, #0
    4398:	bne.n	4376 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    439a:	movs	r3, #1
    439c:	b.n	43a0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
    439e:	movs	r3, #2
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    43a0:	ldr	r2, [sp, #112]	; 0x70
    43a2:	and.w	r2, r2, #8
    43a6:	orrs	r3, r2
    43a8:	str	r3, [sp, #4]
  if (name) {
    43aa:	ldr	r3, [sp, #0]
    43ac:	cmp	r3, #0
    43ae:	beq.w	45ac <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x254>
    nameHash = exFatHashName(name, nameLength, 0);
    43b2:	mov	r0, r3
    43b4:	movs	r2, #0
    43b6:	mov	r1, sl
    43b8:	bl	4d0c <exFatHashName(char const*, unsigned int, unsigned short)>
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    43bc:	ldrb.w	r3, [r6, #49]	; 0x31
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    43c0:	str	r0, [sp, #8]
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    43c2:	cbz	r3, 43d8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    43c4:	ldrd	r2, r3, [r6]
    43c8:	orrs	r3, r2
    43ca:	beq.n	43d8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    43cc:	movs	r2, #0
    43ce:	movs	r3, #0
    43d0:	strd	r2, r3, [r6]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    43d4:	movs	r1, #0
    43d6:	str	r1, [r6, #24]
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    43d8:	ldr	r2, [pc, #736]	; (46bc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x364>)
    43da:	add.w	r3, sl, #14
    43de:	smull	r1, r2, r2, r3
    43e2:	add	r2, r3
    43e4:	asrs	r3, r3, #31
    43e6:	rsb	r3, r3, r2, asr #3
    43ea:	uxtb	r3, r3
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
    43ec:	mov.w	r9, #0
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    43f0:	str	r3, [sp, #12]
    43f2:	adds	r3, #2
    43f4:	uxtb.w	fp, r3

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
    43f8:	mov	r4, r9
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
    43fa:	mov	r7, r9
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    43fc:	movs	r2, #32
    43fe:	add	r1, sp, #40	; 0x28
    4400:	mov	r0, r6
    4402:	bl	4088 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    4406:	cmp	r0, #0
    4408:	beq.n	4486 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      goto create;
    }
    if (n != 32) {
    440a:	cmp	r0, #32
    440c:	bne.n	4376 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    440e:	ldrb.w	r3, [sp, #40]	; 0x28
    4412:	lsls	r2, r3, #24
    4414:	bmi.n	44e4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18c>
      if (freeCount == 0) {
    4416:	cmp	r4, #0
    4418:	bne.n	44de <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x186>
        freePos.position = dir->curPosition() - 32;
    441a:	ldr	r2, [r6, #0]
        freePos.cluster = dir->curCluster();
    441c:	ldr	r1, [r6, #24]
    441e:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    4420:	subs	r2, #32
    4422:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
    4424:	adds	r4, #1
    4426:	uxtb	r4, r4
      }
      if (!buf[0]) {
    4428:	cbz	r3, 4486 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
    442a:	cmp	r3, #192	; 0xc0
    442c:	beq.w	4556 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fe>
    4430:	cmp	r3, #193	; 0xc1
    4432:	beq.n	44fa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a2>
    4434:	cmp	r3, #133	; 0x85
    4436:	bne.n	43fc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
    4438:	movs	r2, #56	; 0x38
    443a:	movs	r1, #0
    443c:	mov	r0, r5
    443e:	bl	c0dc <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    4442:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    4446:	ldrb.w	r2, [sp, #41]	; 0x29
    444a:	strb.w	r2, [r5, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    444e:	lsls	r0, r3, #27
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    4450:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
    4454:	it	pl
    4456:	orrpl.w	r2, r2, #8
    445a:	strb.w	r2, [r5, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    445e:	ldr	r3, [r6, #0]
    4460:	ldr	r1, [r6, #32]
    4462:	ldr	r2, [r6, #24]
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
    4464:	str	r2, [r5, #36]	; 0x24
        m_dirPos.position = dir->curPosition() - 32;
    4466:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
    4468:	str	r1, [r5, #32]

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    446a:	str	r3, [r5, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
    446c:	ldrb.w	r3, [r6, #51]	; 0x33
    4470:	ubfx	r3, r3, #6, #1
    4474:	strb.w	r3, [r5, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    4478:	movs	r2, #32
    447a:	add	r1, sp, #40	; 0x28
    447c:	mov	r0, r6
    447e:	bl	4088 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    4482:	cmp	r0, #0
    4484:	bne.n	440a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb2>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    4486:	ldr	r3, [sp, #112]	; 0x70
    4488:	lsls	r1, r3, #22
    448a:	bpl.w	4376 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    448e:	ldr	r3, [sp, #4]
    4490:	lsls	r2, r3, #30
    4492:	bpl.w	4376 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4496:	ldr	r3, [sp, #0]
    4498:	cmp	r3, #0
    449a:	beq.w	4376 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    449e:	cmp	r4, fp
    44a0:	bcc.n	44bc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x164>
    44a2:	b.n	45b2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
    44a4:	cmp	r0, #32
    44a6:	bne.w	4376 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    44aa:	cbnz	r4, 44b6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x15e>
      freePos.position = dir->curPosition() - 32;
    44ac:	ldr	r2, [r6, #0]
      freePos.cluster = dir->curCluster();
    44ae:	ldr	r1, [r6, #24]
    44b0:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    44b2:	subs	r2, #32
    44b4:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    44b6:	uxtb	r4, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    44b8:	cmp	fp, r4
    44ba:	bls.n	45b2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
    n = dir->read(buf, 32);
    44bc:	movs	r2, #32
    44be:	add	r1, sp, #40	; 0x28
    44c0:	mov	r0, r6
    44c2:	bl	4088 <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    44c6:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
    44c8:	cmp	r0, #0
    44ca:	bne.n	44a4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x14c>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    44cc:	mov	r0, r6
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    44ce:	ldr	r7, [r6, #24]
      if (!dir->addDirCluster()) {
    44d0:	bl	4fe4 <ExFatFile::addDirCluster()>
    44d4:	cmp	r0, #0
    44d6:	beq.w	4376 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    44da:	str	r7, [r6, #24]
      continue;
    44dc:	b.n	44b8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    44de:	cmp	r4, fp
    44e0:	bcs.n	4428 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd0>
    44e2:	b.n	4424 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xcc>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
    44e4:	cmp.w	r9, #0
    44e8:	bne.n	442a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd2>
      if (freeCount < freeNeed) {
        freeCount = 0;
    44ea:	cmp	r4, fp
    44ec:	it	cc
    44ee:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    44f0:	cmp	r3, #133	; 0x85
    44f2:	bne.n	43fc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        continue;
      }
      inSet = true;
    44f4:	mov.w	r9, #1
    44f8:	b.n	4438 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe0>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    44fa:	rsb	r8, r7, sl
    44fe:	uxtb.w	r8, r8
    4502:	cmp.w	r8, #15
    4506:	it	cs
    4508:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    450c:	mov	r3, r8
    450e:	mov	r2, r7
    4510:	ldr	r1, [sp, #0]
    4512:	add	r0, sp, #40	; 0x28
    4514:	bl	4d48 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
    4518:	cmp	r0, #0
    451a:	beq.n	4596 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x23e>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
    451c:	add	r7, r8
    451e:	uxtb	r7, r7

        if (nameOffset == nameLength) {
    4520:	cmp	sl, r7
    4522:	bne.w	43fc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    4526:	ldr	r3, [sp, #112]	; 0x70
    4528:	lsls	r3, r3, #20
    452a:	bmi.w	4376 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    452e:	ldr	r3, [sp, #112]	; 0x70
    4530:	tst.w	r3, #17408	; 0x4400
    4534:	bne.w	4678 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
    4538:	ldrb.w	r3, [r5, #51]	; 0x33
    453c:	lsls	r7, r3, #30
    453e:	bmi.w	4678 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    4542:	ldr	r3, [sp, #112]	; 0x70
    4544:	lsls	r3, r3, #21
    4546:	bmi.w	4376 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    454a:	ldr	r3, [sp, #112]	; 0x70
    454c:	lsls	r0, r3, #17
    454e:	bmi.w	46c0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x368>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
    4552:	movs	r0, #1
    4554:	b.n	4380 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    4556:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    455a:	ldr	r2, [sp, #4]
    455c:	strb.w	r2, [r5, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    4560:	lsls	r1, r3, #30
    4562:	bpl.n	456c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x214>
          m_flags |= FILE_FLAG_CONTIGUOUS;
    4564:	orr.w	r3, r2, #64	; 0x40
    4568:	strb.w	r3, [r5, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    456c:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    4570:	ldrd	r0, r1, [sp, #64]	; 0x40
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    4574:	strd	r2, r3, [r5, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
    4578:	ldr	r3, [sp, #60]	; 0x3c
    457a:	str	r3, [r5, #28]
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
    457c:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    457e:	strd	r0, r1, [r5, #8]
        if (!name) {
    4582:	cmp	r3, #0
    4584:	beq.n	4526 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1ce>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    4586:	ldrb.w	r3, [sp, #43]	; 0x2b
    458a:	cmp	r3, sl
    458c:	beq.n	459a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x242>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
    458e:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    4592:	mov	r7, r9
    4594:	b.n	43fc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
    4596:	mov	r9, r0
    4598:	b.n	43fc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    459a:	ldrh.w	r3, [sp, #44]	; 0x2c
    459e:	ldr	r2, [sp, #8]
    45a0:	cmp	r3, r2
    45a2:	bne.n	458e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x236>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    45a4:	movs	r7, #0
    45a6:	b.n	43fc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    45a8:	movs	r3, #3
    45aa:	b.n	43a0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint8_t modeFlags;
  uint16_t nameHash = 0;
    45ac:	ldr	r3, [sp, #0]
    45ae:	str	r3, [sp, #8]
    45b0:	b.n	43d8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    45b2:	ldrb.w	r3, [r6, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    45b6:	movs	r2, #56	; 0x38
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    45b8:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    45bc:	movs	r1, #0
    45be:	mov	r0, r5
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    45c0:	add.w	r8, sp, #28
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    45c4:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
    45c8:	bl	c0dc <memset>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    45cc:	ldr	r4, [sp, #12]
    45ce:	ldr	r3, [r6, #32]
    45d0:	str.w	sl, [sp, #12]

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    45d4:	ldmia.w	r8, {r0, r1, r2}
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    45d8:	add.w	r9, r4, #1
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    45dc:	movs	r4, #8
    45de:	strb.w	r4, [r5, #49]	; 0x31
    45e2:	add.w	r7, sl, #30
  m_dirPos = freePos;
    45e6:	add.w	r4, r5, #36	; 0x24
    45ea:	ldr.w	sl, [sp]
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    45ee:	str	r3, [r5, #32]
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    45f0:	uxtb.w	r9, r9

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    45f4:	stmia.w	r4, {r0, r1, r2}
    45f8:	uxtb	r7, r7
  for (uint8_t i = 0; i < freeNeed; i++) {
    45fa:	movs	r6, #0
    45fc:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    45fe:	movs	r2, #1
    4600:	mov	r1, r8
    4602:	bl	4bb0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    4606:	mov	r4, r0
    4608:	cmp	r0, #0
    460a:	beq.w	4376 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    460e:	ldrsb.w	r3, [r0]
    4612:	cmp	r3, #0
    4614:	blt.w	4376 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    4618:	movs	r2, #32
    461a:	movs	r1, #0
    461c:	bl	c0dc <memset>
    if (i == 0) {
    4620:	cmp	r6, #0
    4622:	beq.n	46f2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x39a>
        FsDateTime::callback(&date, &time, &ms10);
        dirFile->createTimeMs = ms10;
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
    4624:	cmp	r6, #1
    4626:	beq.n	46d2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x37a>
    4628:	rsb	r3, r6, r6, lsl #4
    462c:	cmp	r7, #15
    462e:	sub.w	r3, r3, #30

      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    4632:	mov.w	r2, #193	; 0xc1
    4636:	mov	r1, r7
    4638:	it	cs
    463a:	movcs	r1, #15
    463c:	uxtb	r3, r3
    463e:	strb	r2, [r4, #0]
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    4640:	cbz	r1, 4658 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    4642:	adds	r4, #2
    4644:	sxth	r1, r1
    4646:	add.w	r1, r4, r1, lsl #1
    464a:	add	r3, sl
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
    464c:	ldrb.w	r2, [r3], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4650:	strh.w	r2, [r4], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    4654:	cmp	r1, r4
    4656:	bne.n	464c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2f4>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    4658:	adds	r6, #1
    465a:	uxtb	r6, r6
    465c:	cmp	fp, r6
    465e:	bls.n	46b4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35c>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
    4660:	movs	r2, #32
    4662:	mov	r1, r8
    4664:	ldr	r0, [r5, #32]
    4666:	bl	4be4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    466a:	cmp	r0, #1
    466c:	bne.w	4376 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4670:	subs	r7, #15
    4672:	uxtb	r7, r7
    4674:	ldr	r0, [r5, #32]
    4676:	b.n	45fe <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    4678:	ldrb.w	r3, [r5, #49]	; 0x31
    467c:	tst.w	r3, #17
    4680:	bne.w	4376 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    4684:	ldr	r3, [sp, #112]	; 0x70
    4686:	lsls	r6, r3, #21
    4688:	bpl.w	454a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1f2>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    468c:	ldrb.w	r3, [r5, #51]	; 0x33
    4690:	lsls	r4, r3, #30
    4692:	bpl.w	4376 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    4696:	movs	r2, #0
    4698:	movs	r3, #0
    469a:	mov	r0, r5
    469c:	bl	4258 <ExFatFile::seekSet(unsigned long long)>
    46a0:	cmp	r0, #0
    46a2:	beq.w	4376 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    46a6:	mov	r0, r5
    46a8:	bl	515c <ExFatFile::truncate()>
    46ac:	cmp	r0, #0
    46ae:	beq.w	4376 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    46b2:	b.n	4552 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
    46b4:	mov	r0, r5
    46b6:	bl	4f84 <ExFatFile::sync()>
    46ba:	b.n	4380 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
    46bc:	.word	0x88888889
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    46c0:	ldrd	r2, r3, [r5, #16]
    46c4:	mov	r0, r5
    46c6:	bl	4258 <ExFatFile::seekSet(unsigned long long)>
    46ca:	cmp	r0, #0
    46cc:	bne.w	4552 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
    46d0:	b.n	4376 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    46d2:	movs	r3, #192	; 0xc0
    46d4:	strb	r3, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    46d6:	ldr	r3, [sp, #4]
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    46d8:	movs	r2, #3
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    46da:	orn	r3, r3, #63	; 0x3f
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    46de:	strb	r2, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    46e0:	strb.w	r3, [r5, #51]	; 0x33

      dirStream->nameLength = nameLength;
    46e4:	ldrb.w	r3, [sp, #12]
    46e8:	strb	r3, [r4, #3]
    46ea:	ldrh.w	r3, [sp, #8]
    46ee:	strh	r3, [r4, #4]
    46f0:	b.n	4658 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    46f2:	movs	r3, #133	; 0x85
    46f4:	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;
      if (FsDateTime::callback) {
    46f6:	ldr	r3, [pc, #48]	; (4728 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3d0>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    46f8:	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    46fc:	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    4700:	ldr	r3, [r3, #0]
    4702:	cmp	r3, #0
    4704:	beq.n	4658 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    4706:	add.w	r2, sp, #23
    470a:	add.w	r1, sp, #26
    470e:	add	r0, sp, #24
    4710:	blx	r3
        dirFile->createTimeMs = ms10;
    4712:	ldrb.w	r1, [sp, #23]
    4716:	ldrh.w	r2, [sp, #26]
    471a:	ldrh.w	r3, [sp, #24]
    471e:	strb	r1, [r4, #20]
    4720:	strh	r2, [r4, #8]
    4722:	strh	r3, [r4, #10]
    4724:	b.n	4658 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    4726:	nop
    4728:	.word	0x2001c8f8

0000472c <ExFatFile::open(ExFatFile*, char const*, int)>:
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    472c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4730:	mov	r6, r0
    4732:	sub	sp, #84	; 0x54
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    4734:	ldrb.w	r4, [r6, #49]	; 0x31
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    4738:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    473a:	movs	r0, #0
    473c:	strb.w	r0, [sp, #73]	; 0x49
    4740:	strb.w	r0, [sp, #74]	; 0x4a
    4744:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    4748:	cbnz	r4, 4758 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
    474a:	mov	r9, r3
    474c:	ldrb.w	r3, [r1, #49]	; 0x31
    4750:	tst.w	r3, #80	; 0x50
    4754:	mov	r5, r1
    4756:	bne.n	4760 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    4758:	movs	r0, #0
}
    475a:	add	sp, #84	; 0x54
    475c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    4760:	ldrb	r3, [r2, #0]
    4762:	cmp	r3, #47	; 0x2f
    4764:	mov	r4, r2
    4766:	beq.n	47ce <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    4768:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    476c:	mov	r1, r4
    476e:	add	r3, sp, #12
    4770:	add	r2, sp, #16
    4772:	mov	r0, r6
    4774:	bl	3fc4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4778:	cmp	r0, #0
    477a:	beq.n	4758 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    477c:	ldr	r3, [sp, #12]
    477e:	ldrb	r3, [r3, #0]
    4780:	cmp	r3, #0
    4782:	beq.n	47f8 <ExFatFile::open(ExFatFile*, char const*, int)+0xcc>
    4784:	ldrb.w	r3, [sp, #16]
    4788:	ldr	r2, [sp, #20]
    478a:	str.w	r8, [sp]
    478e:	mov	r1, r5
    4790:	mov	r0, r6
    4792:	bl	4358 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    4796:	cmp	r0, #0
    4798:	beq.n	4758 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    479a:	mov	r4, r6
    479c:	add	r7, sp, #24
    479e:	add.w	lr, r6, #48	; 0x30
    47a2:	ldr	r0, [r4, #0]
    47a4:	ldr	r1, [r4, #4]
    47a6:	ldr	r2, [r4, #8]
    47a8:	ldr	r3, [r4, #12]
    47aa:	mov	r5, r7
    47ac:	stmia	r5!, {r0, r1, r2, r3}
    47ae:	adds	r4, #16
    47b0:	cmp	r4, lr
    47b2:	mov	r7, r5
    47b4:	bne.n	47a2 <ExFatFile::open(ExFatFile*, char const*, int)+0x76>
    47b6:	ldr	r0, [r4, #0]
    47b8:	str	r0, [r5, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    47ba:	mov	r0, r6
    47bc:	bl	4f84 <ExFatFile::sync()>
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    47c0:	add	r5, sp, #24
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    47c2:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    47c6:	strb.w	r8, [r6, #51]	; 0x33
    47ca:	ldr	r4, [sp, #12]
    47cc:	b.n	476c <ExFatFile::open(ExFatFile*, char const*, int)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    47ce:	adds	r4, #1
    47d0:	str	r4, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    47d2:	ldrb	r1, [r4, #0]
    47d4:	cmp	r1, #47	; 0x2f
    47d6:	beq.n	47ce <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
      path++;
    }
    if (*path == 0) {
    47d8:	cbz	r1, 4810 <ExFatFile::open(ExFatFile*, char const*, int)+0xe4>
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    47da:	movs	r2, #56	; 0x38
    47dc:	add	r0, sp, #24
    47de:	movs	r1, #0
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    47e0:	ldr	r7, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    47e2:	bl	c0dc <memset>
  m_attributes = FILE_ATTR_ROOT;
    47e6:	movs	r2, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    47e8:	movs	r3, #1
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    47ea:	add	r5, sp, #24
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    47ec:	str	r7, [sp, #56]	; 0x38
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    47ee:	strb.w	r2, [sp, #73]	; 0x49
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    47f2:	strb.w	r3, [sp, #75]	; 0x4b
    47f6:	b.n	4768 <ExFatFile::open(ExFatFile*, char const*, int)+0x3c>
    47f8:	ldrb.w	r3, [sp, #16]
    47fc:	ldr	r2, [sp, #20]
    47fe:	str.w	r9, [sp]
    4802:	mov	r1, r5
    4804:	mov	r0, r6
    4806:	bl	4358 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    480a:	add	sp, #84	; 0x54
    480c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    4810:	movs	r2, #56	; 0x38
    4812:	mov	r0, r6
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    4814:	ldr	r4, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    4816:	bl	c0dc <memset>
  m_attributes = FILE_ATTR_ROOT;
    481a:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    481c:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    481e:	str	r4, [r6, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    4820:	strb.w	r3, [r6, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    4824:	strb.w	r0, [r6, #51]	; 0x33
    4828:	b.n	475a <ExFatFile::open(ExFatFile*, char const*, int)+0x2e>
    482a:	nop

0000482c <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    482c:	cbz	r1, 4836 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    482e:	add.w	r1, r1, #1088	; 0x440
    4832:	b.w	472c <ExFatFile::open(ExFatFile*, char const*, int)>
}
    4836:	mov	r0, r1
    4838:	bx	lr
    483a:	nop

0000483c <FsCache::sync() [clone .part.2]>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    483c:	push	{r4, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    483e:	add.w	r2, r0, #12

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    4842:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4844:	ldr	r0, [r0, #4]
    4846:	ldr	r1, [r4, #8]
    4848:	ldr	r3, [r0, #0]
    484a:	ldr	r3, [r3, #24]
    484c:	blx	r3
    484e:	cbz	r0, 4858 <FsCache::sync() [clone .part.2]+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    4850:	ldrb	r3, [r4, #0]
    4852:	bic.w	r3, r3, #1
    4856:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    4858:	pop	{r4, pc}
    485a:	nop

0000485c <FsCache::invalidate()>:
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    485c:	movs	r2, #0
  m_sector = 0XFFFFFFFF;
    485e:	mov.w	r3, #4294967295
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    4862:	strb	r2, [r0, #0]
  m_sector = 0XFFFFFFFF;
    4864:	str	r3, [r0, #8]
    4866:	bx	lr

00004868 <FsCache::get(unsigned long, unsigned char)>:
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    4868:	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    486a:	ldr	r5, [r0, #4]
    486c:	cbz	r5, 48ae <FsCache::get(unsigned long, unsigned char)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    486e:	ldr	r3, [r0, #8]
    4870:	cmp	r3, r1
    4872:	mov	r4, r0
    4874:	mov	r7, r2
    4876:	mov	r6, r1
    4878:	beq.n	4898 <FsCache::get(unsigned long, unsigned char)+0x30>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    487a:	ldrb	r3, [r0, #0]
    487c:	lsls	r2, r3, #31
    487e:	bmi.n	48a6 <FsCache::get(unsigned long, unsigned char)+0x3e>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    4880:	lsls	r3, r7, #30
    4882:	bpl.n	48b2 <FsCache::get(unsigned long, unsigned char)+0x4a>
    4884:	add.w	r5, r4, #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    4888:	and.w	r2, r7, #1
    488c:	movs	r3, #0
    488e:	orrs	r3, r2
    4890:	strb	r3, [r4, #0]
    4892:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    4894:	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
}
    4896:	pop	{r3, r4, r5, r6, r7, pc}
    4898:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    489c:	and.w	r2, r7, #1
    48a0:	orrs	r3, r2
    48a2:	strb	r3, [r4, #0]
  return m_cacheBuffer;

fail:
  return nullptr;
}
    48a4:	pop	{r3, r4, r5, r6, r7, pc}
    48a6:	bl	483c <FsCache::sync() [clone .part.2]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    48aa:	cmp	r0, #0
    48ac:	bne.n	4880 <FsCache::get(unsigned long, unsigned char)+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    48ae:	movs	r0, #0
    48b0:	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    48b2:	ldr	r0, [r4, #4]
    48b4:	ldr	r3, [r0, #0]
    48b6:	add.w	r5, r4, #12
    48ba:	ldr	r3, [r3, #8]
    48bc:	mov	r2, r5
    48be:	mov	r1, r6
    48c0:	blx	r3
    48c2:	cmp	r0, #0
    48c4:	bne.n	4888 <FsCache::get(unsigned long, unsigned char)+0x20>
    48c6:	b.n	48ae <FsCache::get(unsigned long, unsigned char)+0x46>

000048c8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>:
    }
  }
  return 1;
}
//-----------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    48c8:	push	{r3, r4, r5, lr}
    48ca:	mov	r4, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    48cc:	ldr.w	r1, [r0, #1052]	; 0x41c
    48d0:	mov	r5, r2
    48d2:	add.w	r1, r1, r4, lsr #7
    48d6:	add.w	r0, r0, #524	; 0x20c
    48da:	movs	r2, #0
    48dc:	bl	4868 <FsCache::get(unsigned long, unsigned char)>
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    48e0:	cbz	r0, 48f4 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x2c>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    48e2:	lsls	r4, r4, #2
    48e4:	ubfx	r4, r4, #0, #9
    48e8:	ldr	r3, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    48ea:	adds	r2, r3, #1
    48ec:	beq.n	48f8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x30>
    return 0;
  }
  *value = next;
    48ee:	str	r3, [r5, #0]
  return 1;
    48f0:	movs	r0, #1
    48f2:	pop	{r3, r4, r5, pc}
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    48f4:	movs	r0, #255	; 0xff
    48f6:	pop	{r3, r4, r5, pc}
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    48f8:	movs	r0, #0
  }
  *value = next;
  return 1;
}
    48fa:	pop	{r3, r4, r5, pc}

000048fc <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>:
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    48fc:	push	{r3, r4, r5, lr}
    48fe:	mov	r4, r1
    4900:	ldr.w	r1, [r0, #1052]	; 0x41c
    4904:	mov	r5, r2
    4906:	add.w	r1, r1, r4, lsr #7
    490a:	add.w	r0, r0, #524	; 0x20c
    490e:	movs	r2, #1
    4910:	bl	4868 <FsCache::get(unsigned long, unsigned char)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    4914:	mov	r3, r0
    4916:	cbz	r0, 4924 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]+0x28>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    4918:	lsls	r4, r4, #2
    491a:	ubfx	r4, r4, #0, #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    491e:	movs	r0, #1
    4920:	str	r5, [r3, r4]
    4922:	pop	{r3, r4, r5, pc}

 fail:
  return false;
}
    4924:	pop	{r3, r4, r5, pc}
    4926:	nop

00004928 <FsCache::sync()>:
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    4928:	ldrb	r3, [r0, #0]
    492a:	lsls	r3, r3, #31
    492c:	bmi.n	4932 <FsCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    492e:	movs	r0, #1
    4930:	bx	lr
    4932:	b.w	483c <FsCache::sync() [clone .part.2]>
    4936:	nop

00004938 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
 fail:
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    4938:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    493c:	mov	r8, r0
    493e:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    4940:	mov	fp, r1
    4942:	cmp	r1, #0
    4944:	beq.n	49d0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
    4946:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    4948:	ldr.w	r3, [r8, #1064]	; 0x428
    494c:	cmp	r7, r3
    494e:	bcs.n	49c8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x90>
    4950:	and.w	r5, r7, #7
    4954:	movs	r3, #1
    4956:	lsl.w	r5, r3, r5
    495a:	uxtb	r5, r5
    495c:	ubfx	sl, r7, #3, #9
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    4960:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    4962:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    4964:	ldr.w	r1, [r8, #1060]	; 0x424
    4968:	movs	r2, #0
    496a:	add.w	r1, r1, r4, lsr #12
    496e:	mov	r0, r8
    4970:	bl	4868 <FsCache::get(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    4974:	cbz	r0, 49a8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    4976:	ldrb.w	r1, [r0, sl]
    497a:	b.n	4992 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    497c:	cmp	r2, r9
    497e:	beq.n	49d6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9e>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4980:	cmp	r7, r4
    4982:	beq.n	49a6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    4984:	ldr.w	r2, [r8, #1064]	; 0x428
    4988:	cmp	r4, r2
    498a:	bcs.n	49bc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x84>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    498c:	ands.w	r5, r3, #255	; 0xff
    4990:	beq.n	49ac <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    4992:	adds	r4, #1
        if (!(mask & cache[i])) {
    4994:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    4996:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    499a:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    499e:	beq.n	497c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    49a0:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    49a2:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    49a4:	bne.n	4984 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    49a6:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    49a8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    49ac:	add.w	sl, sl, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    49b0:	cmp.w	sl, #512	; 0x200
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    49b4:	mov.w	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    49b8:	bne.n	4976 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    49ba:	b.n	49c0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    49bc:	movs	r6, #0
    49be:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    49c0:	mov.w	sl, #0
    49c4:	movs	r5, #1
    49c6:	b.n	4964 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    49c8:	movs	r7, #0
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    49ca:	mov	sl, r7
    49cc:	movs	r5, #1
    49ce:	b.n	4960 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    49d0:	ldr.w	r7, [r0, #1048]	; 0x418
    49d4:	b.n	4948 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    49d6:	cmp.w	fp, #0
    49da:	bne.n	49e6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xae>
    49dc:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    49e0:	it	eq
    49e2:	streq.w	r6, [r8, #1048]	; 0x418
            }
            return bgnAlloc + 2;
    49e6:	adds	r0, r6, #2
    49e8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000049ec <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    49ec:	push	{r3, r4, r5, r6, r7, lr}
    49ee:	mov	r4, r0
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    49f0:	movs	r3, #0
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
  m_sector = 0XFFFFFFFF;
    49f2:	mov.w	r6, #4294967295
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    49f6:	add.w	r7, r0, #524	; 0x20c
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
  m_blockDev = dev;
    49fa:	str.w	r1, [r0, #1080]	; 0x438
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this partition.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    49fe:	str	r1, [r0, #4]
    4a00:	str.w	r1, [r0, #528]	; 0x210

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    4a04:	mov	r5, r2
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4a06:	mov	r0, r7
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    4a08:	strb.w	r3, [r4, #1084]	; 0x43c
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    4a0c:	strb	r3, [r4, #0]
    4a0e:	strb.w	r3, [r4, #524]	; 0x20c
  m_sector = 0XFFFFFFFF;
    4a12:	str	r6, [r4, #8]
    4a14:	str.w	r6, [r4, #532]	; 0x214
    4a18:	mov	r2, r3
    4a1a:	mov	r1, r3
    4a1c:	bl	4868 <FsCache::get(unsigned long, unsigned char)>

  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    4a20:	cmp	r5, #4
    4a22:	bhi.n	4a3e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    4a24:	mov	r6, r0
    4a26:	cbz	r0, 4a3e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    4a28:	cbnz	r5, 4a42 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    4a2a:	movs	r2, #5
    4a2c:	ldr	r1, [pc, #152]	; (4ac8 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xdc>)
    4a2e:	adds	r0, r6, #3
    4a30:	bl	c89c <strncmp>
    4a34:	cbnz	r0, 4a3e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    4a36:	ldrb.w	r3, [r6, #108]	; 0x6c
    4a3a:	cmp	r3, #9
    4a3c:	beq.n	4a72 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x86>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    4a3e:	movs	r0, #0
    4a40:	pop	{r3, r4, r5, r6, r7, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    4a42:	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    4a44:	add.w	r3, r0, r3, lsl #4
    4a48:	ldrb.w	r2, [r3, #446]	; 0x1be
    4a4c:	ands.w	r2, r2, #127	; 0x7f
    4a50:	bne.n	4a3e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    4a52:	ldrb.w	r3, [r3, #450]	; 0x1c2
    4a56:	cmp	r3, #0
    4a58:	beq.n	4a3e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    4a5a:	add.w	r5, r0, r5, lsl #4
    4a5e:	mov	r0, r7
    4a60:	ldr.w	r5, [r5, #438]	; 0x1b6
    4a64:	mov	r1, r5
    4a66:	bl	4868 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    4a6a:	mov	r6, r0
    4a6c:	cmp	r0, #0
    4a6e:	bne.n	4a2a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x3e>
    4a70:	b.n	4a3e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    4a72:	ldr	r3, [r6, #80]	; 0x50
    4a74:	add	r3, r5
    4a76:	str.w	r3, [r4, #1052]	; 0x41c
    4a7a:	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    4a7c:	str.w	r3, [r4, #1056]	; 0x420
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    4a80:	ldr	r3, [r6, #88]	; 0x58
    4a82:	add	r5, r3
    4a84:	str.w	r5, [r4, #1060]	; 0x424
    4a88:	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    4a8a:	str.w	r3, [r4, #1064]	; 0x428
    4a8e:	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    4a90:	str.w	r3, [r4, #1068]	; 0x42c
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    4a94:	ldrb.w	r3, [r6, #109]	; 0x6d
    4a98:	strb.w	r3, [r4, #1085]	; 0x43d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4a9c:	movs	r5, #1
    4a9e:	adds	r3, #9
    4aa0:	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    4aa4:	subs	r2, r3, #1
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    4aa6:	str.w	r0, [r4, #1048]	; 0x418
  bitmapFind(0, 1);
    4aaa:	mov	r1, r0
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4aac:	str.w	r3, [r4, #1076]	; 0x434
  m_clusterMask = m_bytesPerCluster - 1;
    4ab0:	str.w	r2, [r4, #1072]	; 0x430
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    4ab4:	mov	r0, r4
    4ab6:	mov	r2, r5
    4ab8:	bl	4938 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    4abc:	movs	r3, #64	; 0x40
    4abe:	strb.w	r3, [r4, #1084]	; 0x43c
  return true;
    4ac2:	mov	r0, r5

 fail:
  return false;
}
    4ac4:	pop	{r3, r4, r5, r6, r7, pc}
    4ac6:	nop
    4ac8:	.word	0x000133fc

00004acc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4acc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    4ad0:	subs	r1, #2
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4ad2:	mov	r8, r0
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    4ad4:	ldr.w	r0, [r0, #1064]	; 0x428
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4ad8:	mov	r5, r2
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    4ada:	adds	r2, r1, r2
    4adc:	cmp	r2, r0
    4ade:	bhi.n	4b52 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    4ae0:	mov	sl, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    4ae2:	ldr.w	r3, [r8, #1048]	; 0x418
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    4ae6:	cmp.w	sl, #0
    4aea:	bne.n	4b58 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    4aec:	cmp	r1, r3
      m_bitmapStart = start;
    4aee:	it	cc
    4af0:	strcc.w	r1, [r8, #1048]	; 0x418
    }
  }
  mask = 1 << (start & 7);
    4af4:	and.w	r4, r1, #7
    4af8:	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    4afa:	ldr.w	r3, [r8, #1060]	; 0x424
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    4afe:	lsl.w	r4, r2, r4
    4b02:	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    4b04:	add.w	r9, r3, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
    4b08:	ubfx	r6, r1, #3, #9
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    4b0c:	movs	r2, #1
    4b0e:	mov	r1, r9
    4b10:	mov	r0, r8
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    4b12:	add	r9, r2
    4b14:	bl	4868 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    4b18:	cbz	r0, 4b52 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    4b1a:	adds	r7, r0, r6
    4b1c:	add.w	r0, r0, #512	; 0x200
    4b20:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    4b24:	tst	r2, r4
    4b26:	ite	ne
    4b28:	movne	r6, #1
    4b2a:	moveq	r6, #0
    4b2c:	cmp	r6, sl
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    4b2e:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    4b32:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    4b36:	beq.n	4b52 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    4b38:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    4b3a:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    4b3e:	beq.n	4b6c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa0>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    4b40:	ands.w	r4, r4, #255	; 0xff
    4b44:	bne.n	4b24 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    4b46:	cmp	r0, r7
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    4b48:	mov	r6, r4
    4b4a:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    4b4e:	bne.n	4b20 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    4b50:	b.n	4b0c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
    }
    i = 0;
  }

 fail:
  return false;
    4b52:	movs	r0, #0
    4b54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    4b58:	cmp	r1, r3
    4b5a:	bhi.n	4af4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    4b5c:	cmp	r2, r3
    4b5e:	bls.n	4af4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    4b60:	cmp	r2, r0
    4b62:	it	cs
    4b64:	movcs	r2, #0
    4b66:	str.w	r2, [r8, #1048]	; 0x418
    4b6a:	b.n	4af4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    4b6c:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    4b6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4b72:	nop

00004b74 <ExFatPartition::chainSize(unsigned long)>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    4b74:	push	{r4, r5, r6, lr}
    4b76:	sub	sp, #8
    4b78:	add	r6, sp, #8
    4b7a:	mov	r5, r0
    4b7c:	str.w	r1, [r6, #-4]!
  uint32_t n = 0;
    4b80:	movs	r4, #0
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4b82:	ldr.w	r3, [r5, #1064]	; 0x428
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    4b86:	ldr	r1, [sp, #4]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4b88:	adds	r3, #1
    4b8a:	cmp	r1, r3
    4b8c:	bls.n	4b94 <ExFatPartition::chainSize(unsigned long)+0x20>
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    4b8e:	movs	r0, #0
    n++;
  } while (status);
  return n;
}
    4b90:	add	sp, #8
    4b92:	pop	{r4, r5, r6, pc}
    4b94:	mov	r2, r6
    4b96:	mov	r0, r5
    4b98:	bl	48c8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    4b9c:	sxtb	r0, r0
    if (status < 0) return 0;
    4b9e:	cmp	r0, #0
    4ba0:	blt.n	4b8e <ExFatPartition::chainSize(unsigned long)+0x1a>
    n++;
    4ba2:	add.w	r4, r4, #1
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    4ba6:	bne.n	4b82 <ExFatPartition::chainSize(unsigned long)+0xe>
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    4ba8:	mov	r0, r4
  } while (status);
  return n;
}
    4baa:	add	sp, #8
    4bac:	pop	{r4, r5, r6, pc}
    4bae:	nop

00004bb0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    4bb0:	push	{r3, r4, r5, r6, r7, lr}
    4bb2:	mov	r6, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4bb4:	ldmia.w	r6, {r3, r5}
    4bb8:	ldr.w	r1, [r0, #1072]	; 0x430
    4bbc:	ldr.w	r4, [r0, #1060]	; 0x424
    4bc0:	ldrb.w	r7, [r0, #1085]	; 0x43d
    4bc4:	ands	r1, r5
    4bc6:	subs	r3, #2
    4bc8:	add.w	r1, r4, r1, lsr #9
    4bcc:	lsls	r3, r7
    4bce:	add	r1, r3
    4bd0:	add.w	r0, r0, #524	; 0x20c
    4bd4:	bl	4868 <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    4bd8:	cbz	r0, 4be2 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    4bda:	ldr	r3, [r6, #4]
    4bdc:	ubfx	r3, r3, #0, #9
    4be0:	add	r0, r3
}
    4be2:	pop	{r3, r4, r5, r6, r7, pc}

00004be4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4be4:	push	{r4, r5, r6, lr}
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4be6:	ldr	r4, [r1, #4]
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4be8:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    4bea:	adds	r3, r4, r2
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4bec:	ldr.w	r1, [r0, #1072]	; 0x430
  pos->position += offset;
    4bf0:	str	r3, [r5, #4]
  tmp >>= bytesPerClusterShift();
    4bf2:	ldrb.w	r3, [r0, #1085]	; 0x43d
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4bf6:	ands	r4, r1
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    4bf8:	adds	r3, #9
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4bfa:	add	r2, r4
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    4bfc:	uxtb	r3, r3
    4bfe:	lsr.w	r4, r2, r3
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4c02:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    4c04:	cbz	r4, 4c16 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    4c06:	ldrb	r3, [r5, #8]
    4c08:	cbz	r3, 4c1a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    4c0a:	ldr	r3, [r5, #0]
    4c0c:	adds	r3, #1
    4c0e:	str	r3, [r5, #0]
    4c10:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    4c12:	cmp	r4, #0
    4c14:	bne.n	4c06 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    4c16:	movs	r0, #1
    4c18:	pop	{r4, r5, r6, pc}
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4c1a:	ldr.w	r3, [r6, #1064]	; 0x428
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    4c1e:	ldr	r1, [r5, #0]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4c20:	adds	r3, #1
    4c22:	cmp	r1, r3
    4c24:	bls.n	4c2c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x48>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    4c26:	mov.w	r0, #4294967295
        return status;
      }
    }
  }
  return 1;
}
    4c2a:	pop	{r4, r5, r6, pc}
    4c2c:	mov	r2, r5
    4c2e:	mov	r0, r6
    4c30:	bl	48c8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    4c34:	sxtb	r0, r0
      if (status != 1) {
    4c36:	cmp	r0, #1
    4c38:	beq.n	4c10 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    4c3a:	pop	{r4, r5, r6, pc}

00004c3c <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4c3c:	ldr.w	r3, [r0, #1064]	; 0x428
    4c40:	adds	r3, #1
    4c42:	cmp	r3, r1
    4c44:	bcs.n	4c4a <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    4c46:	movs	r0, #255	; 0xff
    4c48:	bx	lr
    4c4a:	b.w	48c8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
    4c4e:	nop

00004c50 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4c50:	cmp	r1, #1
    4c52:	bls.n	4c70 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x20>
    4c54:	ldr.w	r3, [r0, #1064]	; 0x428
    4c58:	adds	r3, #1
    4c5a:	cmp	r1, r3
  }
  *value = next;
  return 1;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    4c5c:	push	{r4}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4c5e:	bls.n	4c68 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
}
    4c60:	movs	r0, #0
    4c62:	ldr.w	r4, [sp], #4
    4c66:	bx	lr
    4c68:	ldr.w	r4, [sp], #4
    4c6c:	b.w	48fc <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    4c70:	movs	r0, #0
    4c72:	bx	lr

00004c74 <ExFatPartition::freeChain(unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    4c74:	push	{r4, r5, r6, r7, lr}
    4c76:	mov	r4, r1
    4c78:	sub	sp, #12
    4c7a:	mov	r5, r0
  uint32_t next;
  uint32_t start = cluster;
    4c7c:	mov	r6, r1
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4c7e:	ldr.w	r3, [r5, #1064]	; 0x428
    4c82:	adds	r3, #1
    4c84:	cmp	r4, r3
    4c86:	bls.n	4c8e <ExFatPartition::freeChain(unsigned long)+0x1a>
  } while (status);

  return true;

 fail:
  return false;
    4c88:	movs	r0, #0
}
    4c8a:	add	sp, #12
    4c8c:	pop	{r4, r5, r6, r7, pc}
    4c8e:	add	r2, sp, #4
    4c90:	mov	r1, r4
    4c92:	mov	r0, r5
    4c94:	bl	48c8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    4c98:	sxtb	r7, r0
    if (status < 0) {
    4c9a:	cmp	r7, #0
    4c9c:	blt.n	4c88 <ExFatPartition::freeChain(unsigned long)+0x14>
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4c9e:	cmp	r4, #1
    4ca0:	bls.n	4c88 <ExFatPartition::freeChain(unsigned long)+0x14>
    4ca2:	ldr.w	r3, [r5, #1064]	; 0x428
    4ca6:	adds	r3, #1
    4ca8:	cmp	r4, r3
    4caa:	bhi.n	4c88 <ExFatPartition::freeChain(unsigned long)+0x14>
    4cac:	movs	r2, #0
    4cae:	mov	r1, r4
    4cb0:	mov	r0, r5
    4cb2:	bl	48fc <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    4cb6:	cmp	r0, #0
    4cb8:	beq.n	4c88 <ExFatPartition::freeChain(unsigned long)+0x14>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    4cba:	ldr	r3, [sp, #4]
    4cbc:	adds	r4, #1
    4cbe:	cmp	r4, r3
    4cc0:	bne.n	4cda <ExFatPartition::freeChain(unsigned long)+0x66>
    4cc2:	cmp	r7, #0
    4cc4:	bne.n	4c7e <ExFatPartition::freeChain(unsigned long)+0xa>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4cc6:	mov	r3, r7
    4cc8:	subs	r2, r4, r6
    4cca:	mov	r1, r6
    4ccc:	mov	r0, r5
    4cce:	bl	4acc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4cd2:	cmp	r0, #0
    4cd4:	beq.n	4c88 <ExFatPartition::freeChain(unsigned long)+0x14>

  return true;

 fail:
  return false;
}
    4cd6:	add	sp, #12
    4cd8:	pop	{r4, r5, r6, r7, pc}
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4cda:	subs	r2, r4, r6
    4cdc:	mov	r1, r6
    4cde:	movs	r3, #0
    4ce0:	mov	r0, r5
    4ce2:	bl	4acc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4ce6:	cmp	r0, #0
    4ce8:	beq.n	4c88 <ExFatPartition::freeChain(unsigned long)+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    4cea:	ldr	r4, [sp, #4]
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    4cec:	cmp	r7, #0
    4cee:	beq.n	4c8a <ExFatPartition::freeChain(unsigned long)+0x16>
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    4cf0:	mov	r6, r4
    4cf2:	b.n	4c7e <ExFatPartition::freeChain(unsigned long)+0xa>

00004cf4 <ExFatPartition::rootLength()>:
      }
    }
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    4cf4:	push	{r4, lr}
    4cf6:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    4cf8:	ldr.w	r1, [r0, #1068]	; 0x42c
    4cfc:	bl	4b74 <ExFatPartition::chainSize(unsigned long)>
  return nc << bytesPerClusterShift();
    4d00:	ldrb.w	r3, [r4, #1085]	; 0x43d
    4d04:	adds	r3, #9
    4d06:	uxtb	r3, r3
}
    4d08:	lsls	r0, r3
    4d0a:	pop	{r4, pc}

00004d0c <exFatHashName(char const*, unsigned int, unsigned short)>:
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    4d0c:	cbz	r1, 4d42 <exFatHashName(char const*, unsigned int, unsigned short)+0x36>
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    4d0e:	push	{r4}
    4d10:	add	r1, r0
    4d12:	lsls	r3, r2, #15
    4d14:	orr.w	r3, r3, r2, lsr #1
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    4d18:	ldrb.w	r2, [r0], #1
    if ('a' <= c && c <= 'z') {
    4d1c:	sub.w	r4, r2, #97	; 0x61
    4d20:	cmp	r4, #25
      c -= 'a' - 'A';
    4d22:	itt	ls
    4d24:	subls	r2, #32
    4d26:	uxtbls	r2, r2
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    4d28:	uxtah	r2, r2, r3
    4d2c:	uxth	r2, r2
    4d2e:	lsls	r3, r2, #15
    4d30:	orr.w	r2, r3, r2, lsr #1
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    4d34:	cmp	r1, r0
    4d36:	uxth	r2, r2
    4d38:	bne.n	4d12 <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    4d3a:	mov	r0, r2
    4d3c:	ldr.w	r4, [sp], #4
    4d40:	bx	lr
    4d42:	mov	r0, r2
    4d44:	bx	lr
    4d46:	nop

00004d48 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    4d48:	cbz	r3, 4d9c <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x54>
  }
  return hash;
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    4d4a:	push	{r4, r5, r6}
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    4d4c:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4d4e:	cmp	r4, #126	; 0x7e
    4d50:	bhi.n	4d90 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
    4d52:	add	r3, r2
    4d54:	adds	r5, r1, r3
    4d56:	add	r2, r1
    4d58:	adds	r0, #2
    4d5a:	ldrb.w	r3, [r2], #1
    4d5e:	uxtb	r4, r4
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    4d60:	sub.w	r1, r3, #97	; 0x61
    4d64:	cmp	r1, #25
    4d66:	sub.w	r1, r4, #97	; 0x61
    4d6a:	ite	ls
    4d6c:	movls	r6, #32
    4d6e:	movhi	r6, #0
    4d70:	cmp	r1, #25
    4d72:	ite	ls
    4d74:	movls	r1, #32
    4d76:	movhi	r1, #0
    4d78:	subs	r3, r3, r6
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4d7a:	subs	r4, r4, r1
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    4d7c:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4d7e:	uxtb	r4, r4
    4d80:	cmp	r4, r3
    4d82:	bne.n	4d90 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    4d84:	cmp	r2, r5
    4d86:	beq.n	4d96 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4e>
    4d88:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4d8c:	cmp	r4, #126	; 0x7e
    4d8e:	bls.n	4d5a <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    4d90:	movs	r0, #0
    }
  }
  return true;
}
    4d92:	pop	{r4, r5, r6}
    4d94:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    4d96:	movs	r0, #1
}
    4d98:	pop	{r4, r5, r6}
    4d9a:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    4d9c:	movs	r0, #1
}
    4d9e:	bx	lr

00004da0 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4da0:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    4da2:	push	{r3, r4, r5, r6, r7, lr}
    4da4:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4da6:	ldr	r0, [r0, #32]
    4da8:	cbz	r1, 4dac <ExFatFile::addCluster()+0xc>
    4daa:	adds	r1, #1
    4dac:	movs	r2, #1
    4dae:	bl	4938 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    4db2:	cmp	r0, #1
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4db4:	mov	r6, r0
  if (find < 2) {
    4db6:	bls.n	4e18 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    4db8:	movs	r3, #1
    4dba:	mov	r1, r0
    4dbc:	mov	r2, r3
    4dbe:	ldr	r0, [r4, #32]
    4dc0:	bl	4acc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4dc4:	mov	r7, r0
    4dc6:	cbz	r0, 4e18 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    4dc8:	ldr	r0, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4dca:	ldrb.w	r3, [r4, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    4dce:	cbz	r0, 4e1e <ExFatFile::addCluster()+0x7e>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    4dd0:	lsls	r2, r3, #25
    4dd2:	bpl.n	4dfc <ExFatFile::addCluster()+0x5c>
    if (find == (m_curCluster + 1)) {
    4dd4:	adds	r2, r0, #1
    4dd6:	cmp	r6, r2
    4dd8:	beq.n	4e26 <ExFatFile::addCluster()+0x86>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    4dda:	bic.w	r2, r3, #64	; 0x40
    4dde:	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4de2:	ldr	r3, [r4, #28]
    4de4:	b.n	4df2 <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    4de6:	ldr	r0, [r4, #32]
    4de8:	bl	4c50 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4dec:	cbz	r0, 4e18 <ExFatFile::addCluster()+0x78>
    4dee:	ldr	r0, [r4, #24]
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4df0:	mov	r3, r5
      if (!m_vol->fatPut(c, c + 1)) {
    4df2:	adds	r5, r3, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4df4:	cmp	r3, r0
      if (!m_vol->fatPut(c, c + 1)) {
    4df6:	mov	r1, r3
    4df8:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4dfa:	bcc.n	4de6 <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    4dfc:	mov.w	r2, #4294967295
    4e00:	mov	r1, r6
    4e02:	ldr	r0, [r4, #32]
    4e04:	bl	4c50 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4e08:	cbz	r0, 4e18 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    4e0a:	ldr	r1, [r4, #24]
    4e0c:	cbz	r1, 4e26 <ExFatFile::addCluster()+0x86>
    if (!m_vol->fatPut(m_curCluster, find)) {
    4e0e:	mov	r2, r6
    4e10:	ldr	r0, [r4, #32]
    4e12:	bl	4c50 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4e16:	cbnz	r0, 4e26 <ExFatFile::addCluster()+0x86>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    4e18:	movs	r7, #0
}
    4e1a:	mov	r0, r7
    4e1c:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4e1e:	orr.w	r3, r3, #64	; 0x40
    4e22:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    4e26:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    4e28:	mov	r0, r7
    4e2a:	pop	{r3, r4, r5, r6, r7, pc}

00004e2c <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4e2c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    4e30:	add.w	fp, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4e34:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    4e36:	ldmia.w	fp, {r0, r1, r2}
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4e3a:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    4e3c:	add.w	r8, sp, #12
    4e40:	stmia.w	r8, {r0, r1, r2}
    4e44:	movs	r7, #0
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    4e46:	mov	sl, r7
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    4e48:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    4e4a:	movs	r2, #0
    4e4c:	mov	r1, r8
    4e4e:	ldr	r0, [r6, #32]
    4e50:	bl	4bb0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    4e54:	uxtb.w	r9, r7
    if (!cache) {
    4e58:	mov	r5, r0
    4e5a:	cbz	r0, 4e6a <ExFatFile::syncDir()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    4e5c:	ldrb	r2, [r0, #0]
    4e5e:	cmp	r2, #192	; 0xc0
    4e60:	beq.n	4f08 <ExFatFile::syncDir()+0xdc>
    4e62:	cmp	r2, #193	; 0xc1
    4e64:	beq.n	4e7e <ExFatFile::syncDir()+0x52>
    4e66:	cmp	r2, #133	; 0x85
    4e68:	beq.n	4ebe <ExFatFile::syncDir()+0x92>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    4e6a:	ldrb.w	r3, [r6, #50]	; 0x32
    4e6e:	orr.w	r3, r3, #1
    4e72:	strb.w	r3, [r6, #50]	; 0x32
  return false;
    4e76:	movs	r0, #0
}
    4e78:	add	sp, #28
    4e7a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4e7e:	mov	r0, r2
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4e80:	movs	r1, #0
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4e82:	ldrb	r2, [r5, r1]
    4e84:	lsls	r3, r4, #15
    4e86:	orr.w	r4, r3, r4, lsr #1
    4e8a:	uxtah	r4, r2, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4e8e:	cmp	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4e90:	uxth	r4, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4e92:	add.w	r1, r1, #1
    4e96:	beq.n	4eb4 <ExFatFile::syncDir()+0x88>
    4e98:	cmp	r1, #31
    4e9a:	bls.n	4e82 <ExFatFile::syncDir()+0x56>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    4e9c:	cmp	sl, r9
    4e9e:	beq.n	4f44 <ExFatFile::syncDir()+0x118>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    4ea0:	movs	r2, #32
    4ea2:	mov	r1, r8
    4ea4:	ldr	r0, [r6, #32]
    4ea6:	bl	4be4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    4eaa:	cmp	r0, #1
    4eac:	add.w	r7, r7, #1
    4eb0:	beq.n	4e4a <ExFatFile::syncDir()+0x1e>
    4eb2:	b.n	4e6a <ExFatFile::syncDir()+0x3e>
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4eb4:	cmp	r0, #133	; 0x85
    4eb6:	ite	eq
    4eb8:	moveq	r1, #4
    4eba:	movne	r1, #2
    4ebc:	b.n	4e82 <ExFatFile::syncDir()+0x56>
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    4ebe:	ldr	r3, [pc, #192]	; (4f80 <ExFatFile::syncDir()+0x154>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4ec0:	ldrb.w	r1, [r6, #49]	; 0x31
    4ec4:	ldr	r3, [r3, #0]
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    4ec6:	ldrb.w	sl, [r0, #1]
    4eca:	and.w	r1, r1, #55	; 0x37
    4ece:	strh	r1, [r0, #4]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    4ed0:	cmp	r3, #0
    4ed2:	beq.n	4e7e <ExFatFile::syncDir()+0x52>
          m_vol->dataCacheDirty();
    4ed4:	ldr	r1, [r6, #32]
    invalidate();
    return m_cacheBuffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    4ed6:	ldrb.w	r2, [r1, #524]	; 0x20c
    4eda:	orr.w	r2, r2, #1
    4ede:	strb.w	r2, [r1, #524]	; 0x20c
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    4ee2:	add	r0, sp, #8
    4ee4:	add.w	r2, sp, #7
    4ee8:	add.w	r1, sp, #10
    4eec:	blx	r3
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    4eee:	ldrh.w	r2, [sp, #10]
          setLe16(df->modifyDate, date);
    4ef2:	ldrh.w	r3, [sp, #8]
        if (FsDateTime::callback) {
          m_vol->dataCacheDirty();
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    4ef6:	ldrb.w	r1, [sp, #7]
    4efa:	strb	r1, [r5, #21]
    4efc:	strh	r2, [r5, #12]
    4efe:	strh	r2, [r5, #16]
    4f00:	strh	r3, [r5, #14]
    4f02:	strh	r3, [r5, #18]
    4f04:	ldrb	r0, [r5, #0]
    4f06:	b.n	4e80 <ExFatFile::syncDir()+0x54>
        }
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    4f08:	ldrb.w	r3, [r6, #51]	; 0x33
    4f0c:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    4f10:	ldrb	r3, [r0, #1]
    4f12:	ite	ne
    4f14:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    4f18:	biceq.w	r3, r3, #2
    4f1c:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
    4f1e:	ldrd	r2, r3, [r6, #16]

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    4f22:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    4f26:	ldrd	r2, r3, [r6, #8]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    4f2a:	ldr	r1, [r6, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    4f2c:	str	r1, [r0, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    4f2e:	strd	r2, r3, [r0, #24]
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    4f32:	ldr	r2, [r6, #32]
    4f34:	ldrb.w	r3, [r2, #524]	; 0x20c
    4f38:	orr.w	r3, r3, #1
    4f3c:	strb.w	r3, [r2, #524]	; 0x20c
    4f40:	ldrb	r0, [r0, #0]
    4f42:	b.n	4e80 <ExFatFile::syncDir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    4f44:	mov	r1, fp
    4f46:	movs	r2, #1
    4f48:	ldr	r0, [r6, #32]
    4f4a:	bl	4bb0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    4f4e:	cmp	r0, #0
    4f50:	beq.n	4e6a <ExFatFile::syncDir()+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    4f52:	ldr	r5, [r6, #32]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4f54:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4f56:	mov	r0, r5
    4f58:	bl	4928 <FsCache::sync()>
    4f5c:	cmp	r0, #0
    4f5e:	beq.n	4e6a <ExFatFile::syncDir()+0x3e>
    4f60:	add.w	r0, r5, #524	; 0x20c
    4f64:	bl	4928 <FsCache::sync()>
    4f68:	cmp	r0, #0
    4f6a:	beq.w	4e6a <ExFatFile::syncDir()+0x3e>
    4f6e:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4f72:	ldr	r3, [r0, #0]
    4f74:	ldr	r3, [r3, #20]
    4f76:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4f78:	cmp	r0, #0
    4f7a:	beq.w	4e6a <ExFatFile::syncDir()+0x3e>
    4f7e:	b.n	4e78 <ExFatFile::syncDir()+0x4c>
    4f80:	.word	0x2001c8f8

00004f84 <ExFatFile::sync()>:
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    4f84:	ldrb.w	r2, [r0, #49]	; 0x31
    4f88:	cbz	r2, 4fb0 <ExFatFile::sync()+0x2c>

fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
    4f8a:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    4f8c:	ldrb.w	r2, [r0, #51]	; 0x33
    4f90:	lsls	r1, r2, #24
    4f92:	bmi.n	4fb4 <ExFatFile::sync()+0x30>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    4f94:	ldr	r5, [r0, #32]
    4f96:	mov	r4, r0
    4f98:	mov	r0, r5
    4f9a:	bl	4928 <FsCache::sync()>
    4f9e:	cbnz	r0, 4fc4 <ExFatFile::sync()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    4fa0:	ldrb.w	r3, [r4, #50]	; 0x32
    4fa4:	orr.w	r3, r3, #1
    4fa8:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    4fac:	movs	r0, #0
}
    4fae:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    4fb0:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    4fb2:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4fb4:	and.w	r2, r2, #127	; 0x7f
    4fb8:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    4fbc:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    4fc0:	b.w	4e2c <ExFatFile::syncDir()>
    4fc4:	add.w	r0, r5, #524	; 0x20c
    4fc8:	bl	4928 <FsCache::sync()>
    4fcc:	cmp	r0, #0
    4fce:	beq.n	4fa0 <ExFatFile::sync()+0x1c>
    4fd0:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4fd4:	ldr	r3, [r0, #0]
    4fd6:	ldr	r3, [r3, #20]
    4fd8:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4fda:	cmp	r0, #0
    4fdc:	beq.n	4fa0 <ExFatFile::sync()+0x1c>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    4fde:	movs	r0, #1
    4fe0:	pop	{r3, r4, r5, pc}
    4fe2:	nop

00004fe4 <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    4fe4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4fe8:	ldrb.w	r3, [r0, #49]	; 0x31
    4fec:	lsls	r1, r3, #25

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    4fee:	mov	r4, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    4ff0:	bmi.n	50ba <ExFatFile::addDirCluster()+0xd6>
    4ff2:	ldr	r0, [r0, #8]
    4ff4:	ldr	r3, [r4, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    4ff6:	ldr.w	r3, [r3, #1076]	; 0x434
    4ffa:	add	r0, r3
    4ffc:	cmp.w	r0, #67108864	; 0x4000000
    5000:	bcc.n	5008 <ExFatFile::addDirCluster()+0x24>
  }
  return sync();

 fail:
  return false;
}
    5002:	movs	r0, #0
    5004:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    5008:	mov	r0, r4
    500a:	bl	4da0 <ExFatFile::addCluster()>
    500e:	cmp	r0, #0
    5010:	beq.n	5002 <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    5012:	ldr	r6, [r4, #32]
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    5014:	ldrb.w	r3, [r6, #524]	; 0x20c
    5018:	lsls	r2, r3, #31

  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
    501a:	add.w	r5, r6, #524	; 0x20c
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    501e:	bmi.n	50c2 <ExFatFile::addDirCluster()+0xde>
      return nullptr;
    }
    invalidate();
    5020:	mov	r0, r5
    return m_cacheBuffer;
    5022:	add.w	r6, r6, #536	; 0x218
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    5026:	bl	485c <FsCache::invalidate()>
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    502a:	mov.w	r2, #512	; 0x200
    502e:	movs	r1, #0
    5030:	mov	r0, r6
    5032:	bl	c0dc <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    5036:	ldr	r2, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    5038:	ldr	r3, [r4, #24]
    503a:	ldrb.w	r0, [r2, #1085]	; 0x43d
    503e:	ldr.w	r1, [r2, #1060]	; 0x424
    5042:	sub.w	r8, r3, #2
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    5046:	movs	r7, #1
    5048:	lsl.w	r8, r8, r0
    504c:	lsls.w	r3, r7, r0
    5050:	add	r8, r1
    5052:	it	ne
    5054:	movne	r5, #0
    5056:	beq.n	507c <ExFatFile::addDirCluster()+0x98>
    5058:	ldr.w	r0, [r2, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    505c:	ldr	r3, [r0, #0]
    505e:	add.w	r1, r8, r5
    5062:	ldr	r3, [r3, #24]
    5064:	mov	r2, r6
    5066:	blx	r3
    5068:	adds	r5, #1
    if (!m_vol->writeSector(sector + i, cache)) {
    506a:	cmp	r0, #0
    506c:	beq.n	5002 <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    506e:	ldr	r2, [r4, #32]
    5070:	ldrb.w	r3, [r2, #1085]	; 0x43d
    5074:	lsl.w	r3, r7, r3
    5078:	cmp	r3, r5
    507a:	bhi.n	5058 <ExFatFile::addDirCluster()+0x74>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    507c:	ldrb.w	r3, [r4, #49]	; 0x31
    5080:	lsls	r3, r3, #25
    5082:	bmi.n	50b0 <ExFatFile::addDirCluster()+0xcc>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5084:	ldrb.w	r3, [r4, #51]	; 0x33
    5088:	orn	r3, r3, #127	; 0x7f
    508c:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    5090:	ldr.w	r6, [r2, #1076]	; 0x434
    5094:	ldrd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    5098:	ldrd	r0, r1, [r4, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    509c:	adds	r2, r2, r6
    509e:	mov.w	r7, #0
    50a2:	adcs	r3, r7
    m_validLength += m_vol->bytesPerCluster();
    50a4:	adds	r0, r0, r6
    50a6:	adcs	r1, r7
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    50a8:	strd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    50ac:	strd	r0, r1, [r4, #16]
  }
  return sync();
    50b0:	mov	r0, r4

 fail:
  return false;
}
    50b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    50b6:	b.w	4f84 <ExFatFile::sync()>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    50ba:	ldr	r0, [r0, #32]
    50bc:	bl	4cf4 <ExFatPartition::rootLength()>
    50c0:	b.n	4ff4 <ExFatFile::addDirCluster()+0x10>
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    50c2:	mov	r0, r5
    50c4:	bl	4928 <FsCache::sync()>
    50c8:	cmp	r0, #0
    50ca:	bne.n	5020 <ExFatFile::addDirCluster()+0x3c>
    50cc:	b.n	5002 <ExFatFile::addDirCluster()+0x1e>
    50ce:	nop

000050d0 <ExFatFile::preAllocate(unsigned long long)>:
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
  uint32_t find;
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    50d0:	orrs.w	r1, r2, r3
    50d4:	beq.n	50de <ExFatFile::preAllocate(unsigned long long)+0xe>
    50d6:	ldrb.w	r1, [r0, #51]	; 0x33
    50da:	lsls	r1, r1, #30
    50dc:	bmi.n	50e2 <ExFatFile::preAllocate(unsigned long long)+0x12>
  }
  return true;

 fail:
  return false;
}
    50de:	movs	r0, #0
    50e0:	bx	lr
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
  uint32_t find;
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    50e2:	ldr	r1, [r0, #28]
    50e4:	cmp	r1, #0
    50e6:	bne.n	50de <ExFatFile::preAllocate(unsigned long long)+0xe>

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
    50e8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    50ec:	mov	r6, r0
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
    50ee:	ldr	r0, [r0, #32]
    50f0:	mov	r5, r3
    50f2:	ldrb.w	r3, [r0, #1085]	; 0x43d
    50f6:	adds	r3, #9
    50f8:	adds.w	r8, r2, #4294967295
    50fc:	uxtb	r3, r3
    50fe:	adc.w	r9, r5, #4294967295
    5102:	rsb	r7, r3, #32
    5106:	lsl.w	r7, r9, r7
    510a:	mov	r4, r2
    510c:	lsr.w	r2, r8, r3
    5110:	subs	r3, #32
    5112:	orrs	r2, r7
    5114:	lsr.w	r3, r9, r3
    5118:	orrs	r2, r3
    511a:	adds	r7, r2, #1
  find = m_vol->bitmapFind(0, need);
    511c:	mov	r2, r7
    511e:	bl	4938 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    5122:	cmp	r0, #1
  if (!length || !isWritable() || m_firstCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
  find = m_vol->bitmapFind(0, need);
    5124:	mov	r8, r0
  if (find < 2) {
    5126:	bls.n	5136 <ExFatFile::preAllocate(unsigned long long)+0x66>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, need, 1)) {
    5128:	mov	r1, r0
    512a:	mov	r2, r7
    512c:	movs	r3, #1
    512e:	ldr	r0, [r6, #32]
    5130:	bl	4acc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    5134:	cbnz	r0, 513c <ExFatFile::preAllocate(unsigned long long)+0x6c>
  }
  return true;

 fail:
  return false;
}
    5136:	movs	r0, #0
    5138:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
    513c:	ldrb.w	r3, [r6, #51]	; 0x33
  if (!m_vol->bitmapModify(find, need, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
    5140:	str.w	r8, [r6, #28]
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
    5144:	orn	r3, r3, #63	; 0x3f
    5148:	strb.w	r3, [r6, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, need, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
    514c:	strd	r4, r5, [r6, #8]
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
  if (!sync()) {
    5150:	mov	r0, r6
  }
  return true;

 fail:
  return false;
}
    5152:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
  if (!sync()) {
    5156:	b.w	4f84 <ExFatFile::sync()>
    515a:	nop

0000515c <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    515c:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    5160:	lsls	r2, r3, #30
    5162:	bpl.n	5196 <ExFatFile::truncate()+0x3a>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    5164:	push	{r4, r5, r6, r7, lr}
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    5166:	ldr	r5, [r0, #28]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    5168:	sub	sp, #12
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    516a:	cbz	r5, 5190 <ExFatFile::truncate()+0x34>
      return true;
  }
  if (isContiguous()) {
    516c:	and.w	r3, r3, #64	; 0x40
    5170:	mov	r4, r0
    5172:	and.w	r0, r3, #255	; 0xff
    5176:	cbnz	r3, 519a <ExFatFile::truncate()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    5178:	ldr	r1, [r4, #24]
    517a:	cmp	r1, #0
    517c:	bne.n	5202 <ExFatFile::truncate()+0xa6>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    517e:	str	r5, [sp, #4]
      m_firstCluster = 0;
    5180:	str	r1, [r4, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    5182:	mov	r1, r5
    5184:	ldr	r0, [r4, #32]
    5186:	bl	4c74 <ExFatPartition::freeChain(unsigned long)>
    518a:	cbnz	r0, 51da <ExFatFile::truncate()+0x7e>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    518c:	movs	r0, #0
    518e:	b.n	5192 <ExFatFile::truncate()+0x36>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    5190:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    5192:	add	sp, #12
    5194:	pop	{r4, r5, r6, r7, pc}
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    5196:	movs	r0, #0
}
    5198:	bx	lr
    519a:	ldr	r0, [r4, #32]
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    519c:	ldr	r1, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    519e:	ldrb.w	r3, [r0, #1085]	; 0x43d
    51a2:	ldrd	r6, r7, [r4, #8]
    51a6:	adds	r3, #9
    51a8:	uxtb	r3, r3
    51aa:	adds.w	r6, r6, #4294967295
    51ae:	rsb	lr, r3, #32
    51b2:	adc.w	r7, r7, #4294967295
    51b6:	lsr.w	r2, r6, r3
    51ba:	lsl.w	lr, r7, lr
    51be:	subs	r3, #32
    51c0:	orr.w	r2, r2, lr
    51c4:	lsr.w	r3, r7, r3
    51c8:	orrs	r2, r3
    51ca:	adds	r2, #1
    if (m_curCluster) {
    51cc:	cbz	r1, 51fc <ExFatFile::truncate()+0xa0>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    51ce:	subs	r5, #1
    51d0:	subs	r5, r5, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    51d2:	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    51d4:	add	r2, r5
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    51d6:	str	r1, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    51d8:	cbnz	r2, 521e <ExFatFile::truncate()+0xc2>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    51da:	ldrd	r0, r1, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    51de:	ldrb.w	r3, [r4, #51]	; 0x33
    51e2:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    51e6:	strd	r0, r1, [r4, #8]
  m_validLength = m_curPosition;
    51ea:	strd	r0, r1, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    51ee:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    51f2:	mov	r0, r4
    51f4:	bl	4f84 <ExFatFile::sync()>

 fail:
  return false;
}
    51f8:	add	sp, #12
    51fa:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    51fc:	str	r5, [sp, #4]
      m_firstCluster = 0;
    51fe:	str	r1, [r4, #28]
    5200:	b.n	51d8 <ExFatFile::truncate()+0x7c>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    5202:	add	r2, sp, #8
    5204:	str.w	r0, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    5208:	ldr	r0, [r4, #32]
    520a:	bl	4c3c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    520e:	sxtb	r0, r0
      if (fg < 0) {
    5210:	cmp	r0, #0
    5212:	blt.n	518c <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    5214:	bne.n	522c <ExFatFile::truncate()+0xd0>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    5216:	ldr	r5, [sp, #4]
    5218:	cmp	r5, #0
    521a:	beq.n	51da <ExFatFile::truncate()+0x7e>
    521c:	b.n	5182 <ExFatFile::truncate()+0x26>
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    521e:	movs	r3, #0
    5220:	ldr	r1, [sp, #4]
    5222:	bl	4acc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    5226:	cmp	r0, #0
    5228:	bne.n	51da <ExFatFile::truncate()+0x7e>
    522a:	b.n	518c <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    522c:	mov.w	r2, #4294967295
    5230:	ldr	r1, [r4, #24]
    5232:	ldr	r0, [r4, #32]
    5234:	bl	4c50 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5238:	cmp	r0, #0
    523a:	bne.n	5216 <ExFatFile::truncate()+0xba>
    523c:	b.n	518c <ExFatFile::truncate()+0x30>
    523e:	nop

00005240 <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    5240:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5244:	ldrb.w	r3, [r0, #51]	; 0x33
    5248:	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    524a:	lsls	r4, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    524c:	mov	r6, r0
    524e:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    5250:	bmi.n	5268 <ExFatFile::write(void const*, unsigned int)+0x28>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    5252:	ldrb.w	r3, [r6, #50]	; 0x32
    5256:	orr.w	r3, r3, #1
    525a:	strb.w	r3, [r6, #50]	; 0x32
  return -1;
    525e:	mov.w	r0, #4294967295
}
    5262:	add	sp, #20
    5264:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    5268:	lsls	r2, r3, #28
    526a:	mov	sl, r1
    526c:	bmi.w	5494 <ExFatFile::write(void const*, unsigned int)+0x254>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    5270:	ldr	r3, [sp, #4]
    5272:	cmp	r3, #0
    5274:	beq.w	54bc <ExFatFile::write(void const*, unsigned int)+0x27c>
    5278:	mov	r1, r6
    527a:	ldrd	r2, r3, [r1], #24
    527e:	ldr.w	r8, [sp, #4]
    5282:	str	r1, [sp, #12]
    5284:	mov	fp, r2
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5286:	ldr	r0, [r6, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    5288:	ldr	r5, [r6, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    528a:	ldr.w	r4, [r0, #1072]	; 0x430
    528e:	mov	r3, fp
    5290:	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    5292:	ubfx	r9, r4, #0, #9
    if (clusterOffset == 0) {
    5296:	cbnz	r4, 52ec <ExFatFile::write(void const*, unsigned int)+0xac>
      // start of new cluster
      if (m_curCluster != 0) {
    5298:	cmp	r5, #0
    529a:	beq.w	541a <ExFatFile::write(void const*, unsigned int)+0x1da>
        int fg;

        if (isContiguous()) {
    529e:	ldrb.w	r3, [r6, #51]	; 0x33
    52a2:	lsls	r3, r3, #25
    52a4:	bpl.w	5462 <ExFatFile::write(void const*, unsigned int)+0x222>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    52a8:	ldrd	r2, r3, [r6, #8]
    52ac:	ldrb.w	r7, [r0, #1085]	; 0x43d
    52b0:	adds	r7, #9
    52b2:	uxtb	r7, r7
    52b4:	adds.w	r2, r2, #4294967295
    52b8:	adc.w	r3, r3, #4294967295
    52bc:	rsb	lr, r7, #32
    52c0:	lsl.w	lr, r3, lr
    52c4:	lsr.w	r1, r2, r7
    52c8:	subs	r7, #32
    52ca:	lsr.w	r7, r3, r7
    52ce:	orr.w	r1, r1, lr
    52d2:	ldr	r3, [r6, #28]
    52d4:	orrs	r1, r7
    52d6:	add	r3, r1
    52d8:	cmp	r5, r3
    52da:	bcc.w	5448 <ExFatFile::write(void const*, unsigned int)+0x208>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    52de:	mov	r0, r6
    52e0:	bl	4da0 <ExFatFile::addCluster()>
    52e4:	cmp	r0, #0
    52e6:	beq.n	5252 <ExFatFile::write(void const*, unsigned int)+0x12>
    52e8:	ldr	r0, [r6, #32]
    52ea:	ldr	r5, [r6, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    52ec:	ldr.w	r7, [r0, #1060]	; 0x424
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    52f0:	ldrb.w	lr, [r0, #1085]	; 0x43d
    52f4:	lsrs	r4, r4, #9
    52f6:	subs	r5, #2
    52f8:	adds	r1, r4, r7
    52fa:	lsl.w	r5, r5, lr
    52fe:	add	r1, r5

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    5300:	cmp.w	r9, #0
    5304:	bne.w	540c <ExFatFile::write(void const*, unsigned int)+0x1cc>
    5308:	cmp.w	r8, #512	; 0x200
    530c:	bcs.n	53be <ExFatFile::write(void const*, unsigned int)+0x17e>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    530e:	ldrd	r2, r3, [r6, #16]
    5312:	ldrd	r4, r5, [r6]
    5316:	cmp.w	r8, #512	; 0x200
    531a:	mov	r7, r8
    531c:	it	cs
    531e:	movcs.w	r7, #512	; 0x200
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    5322:	cmp	r5, r3
    5324:	it	eq
    5326:	cmpeq	r4, r2
    5328:	ite	cc
    532a:	movcc	r2, #1
    532c:	movcs	r2, #3
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    532e:	add.w	r0, r0, #524	; 0x20c
    5332:	bl	4868 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    5336:	cmp	r0, #0
    5338:	beq.n	5252 <ExFatFile::write(void const*, unsigned int)+0x12>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    533a:	add	r0, r9
    533c:	mov	r2, r7
    533e:	mov	r1, sl
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5340:	add	r9, r7
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    5342:	bl	81cc <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5346:	cmp.w	r9, #512	; 0x200
    534a:	beq.w	5472 <ExFatFile::write(void const*, unsigned int)+0x232>
    534e:	mov	r0, r7
    5350:	movs	r1, #0
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5352:	ldrd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5356:	ldrd	r4, r5, [r6, #16]
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    535a:	adds.w	fp, r2, r0
    535e:	adc.w	ip, r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5362:	cmp	r5, ip
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5364:	mov	r2, fp
    5366:	mov	r3, ip
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5368:	it	eq
    536a:	cmpeq	r4, fp
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    536c:	add	sl, r7
    toWrite -= n;
    536e:	rsb	r8, r7, r8
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5372:	strd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5376:	bcs.n	538c <ExFatFile::write(void const*, unsigned int)+0x14c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    5378:	ldrb.w	r1, [r6, #51]	; 0x33
      m_validLength = m_curPosition;
    537c:	mov	r4, ip
    537e:	mov	r3, fp
    5380:	strd	r3, r4, [r6, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    5384:	orn	r1, r1, #127	; 0x7f
    5388:	strb.w	r1, [r6, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    538c:	cmp.w	r8, #0
    5390:	bne.w	5286 <ExFatFile::write(void const*, unsigned int)+0x46>
    5394:	mov	r2, fp
    5396:	mov	r3, ip
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    5398:	ldrd	r0, r1, [r6, #8]
    539c:	cmp	r1, r3
    539e:	it	eq
    53a0:	cmpeq	r0, r2
    53a2:	bcc.n	54a4 <ExFatFile::write(void const*, unsigned int)+0x264>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    53a4:	ldr	r3, [pc, #284]	; (54c4 <ExFatFile::write(void const*, unsigned int)+0x284>)
    53a6:	ldr	r3, [r3, #0]
    53a8:	cmp	r3, #0
    53aa:	beq.w	54b8 <ExFatFile::write(void const*, unsigned int)+0x278>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    53ae:	ldrb.w	r3, [r6, #51]	; 0x33
    53b2:	ldr	r0, [sp, #4]
    53b4:	orn	r3, r3, #127	; 0x7f
    53b8:	strb.w	r3, [r6, #51]	; 0x33
    53bc:	b.n	5262 <ExFatFile::write(void const*, unsigned int)+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    53be:	cmp.w	r8, #1024	; 0x400
    53c2:	bcc.n	5422 <ExFatFile::write(void const*, unsigned int)+0x1e2>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    53c4:	movs	r3, #1
    53c6:	lsl.w	lr, r3, lr
    53ca:	rsb	lr, r4, lr
    53ce:	ldr.w	r3, [r0, #532]	; 0x214
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    53d2:	mov.w	r4, r8, lsr #9
    53d6:	cmp	r4, lr
    53d8:	it	cs
    53da:	movcs	r4, lr
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    53dc:	cmp	r1, r3
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    53de:	mov.w	r7, r4, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    53e2:	bhi.n	53f8 <ExFatFile::write(void const*, unsigned int)+0x1b8>
    53e4:	adds	r2, r4, r1
    53e6:	cmp	r2, r3
    53e8:	bls.n	53f8 <ExFatFile::write(void const*, unsigned int)+0x1b8>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    53ea:	add.w	r0, r0, #524	; 0x20c
    53ee:	str	r1, [sp, #8]
    53f0:	bl	485c <FsCache::invalidate()>
    53f4:	ldr	r0, [r6, #32]
    53f6:	ldr	r1, [sp, #8]
    53f8:	ldr.w	r0, [r0, #1080]	; 0x438
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t count) {
    return m_blockDev->writeSectors(sector, src, count);
    53fc:	ldr	r5, [r0, #0]
    53fe:	mov	r3, r4
    5400:	mov	r2, sl
    5402:	ldr	r4, [r5, #28]
    5404:	blx	r4
        // Invalidate cache if cache sector is in the range.
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, ns)) {
    5406:	cmp	r0, #0
    5408:	bne.n	534e <ExFatFile::write(void const*, unsigned int)+0x10e>
    540a:	b.n	5252 <ExFatFile::write(void const*, unsigned int)+0x12>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    540c:	rsb	r7, r9, #512	; 0x200
    5410:	cmp	r7, r8
    5412:	it	cs
    5414:	movcs	r7, r8
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    5416:	movs	r2, #1
    5418:	b.n	532e <ExFatFile::write(void const*, unsigned int)+0xee>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    541a:	ldr	r5, [r6, #28]
    541c:	cbz	r5, 544e <ExFatFile::write(void const*, unsigned int)+0x20e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    541e:	str	r5, [r6, #24]
    5420:	b.n	52ec <ExFatFile::write(void const*, unsigned int)+0xac>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
    5422:	ldr.w	r3, [r0, #532]	; 0x214
    5426:	cmp	r1, r3
    5428:	beq.n	5484 <ExFatFile::write(void const*, unsigned int)+0x244>
    542a:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    542e:	ldr	r3, [r0, #0]
    5430:	mov	r2, sl
    5432:	ldr	r3, [r3, #24]
    5434:	blx	r3
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    5436:	cmp	r0, #0
    5438:	beq.w	5252 <ExFatFile::write(void const*, unsigned int)+0x12>
    543c:	mov.w	r0, #512	; 0x200
    5440:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    5442:	mov.w	r7, #512	; 0x200
    5446:	b.n	5352 <ExFatFile::write(void const*, unsigned int)+0x112>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    5448:	adds	r5, #1
    544a:	str	r5, [r6, #24]
    544c:	b.n	52ec <ExFatFile::write(void const*, unsigned int)+0xac>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    544e:	mov	r0, r6
    5450:	bl	4da0 <ExFatFile::addCluster()>
    5454:	cmp	r0, #0
    5456:	beq.w	5252 <ExFatFile::write(void const*, unsigned int)+0x12>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    545a:	ldr	r5, [r6, #24]
    545c:	str	r5, [r6, #28]
    545e:	ldr	r0, [r6, #32]
    5460:	b.n	52ec <ExFatFile::write(void const*, unsigned int)+0xac>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5462:	mov	r1, r5
    5464:	ldr	r2, [sp, #12]
    5466:	bl	4c3c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    546a:	cmp	r0, #0
    546c:	bne.w	52e8 <ExFatFile::write(void const*, unsigned int)+0xa8>
    5470:	b.n	52de <ExFatFile::write(void const*, unsigned int)+0x9e>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    5472:	ldr	r0, [r6, #32]
    5474:	add.w	r0, r0, #524	; 0x20c
    5478:	bl	4928 <FsCache::sync()>
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    547c:	cmp	r0, #0
    547e:	bne.w	534e <ExFatFile::write(void const*, unsigned int)+0x10e>
    5482:	b.n	5252 <ExFatFile::write(void const*, unsigned int)+0x12>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    5484:	add.w	r0, r0, #524	; 0x20c
    5488:	str	r1, [sp, #8]
    548a:	bl	485c <FsCache::invalidate()>
    548e:	ldr	r0, [r6, #32]
    5490:	ldr	r1, [sp, #8]
    5492:	b.n	542a <ExFatFile::write(void const*, unsigned int)+0x1ea>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    5494:	ldrd	r2, r3, [r0, #16]
    5498:	bl	4258 <ExFatFile::seekSet(unsigned long long)>
    549c:	cmp	r0, #0
    549e:	beq.w	5252 <ExFatFile::write(void const*, unsigned int)+0x12>
    54a2:	b.n	5270 <ExFatFile::write(void const*, unsigned int)+0x30>
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    54a4:	ldrb.w	r1, [r6, #51]	; 0x33
    54a8:	ldr	r0, [sp, #4]
    54aa:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    54ae:	strd	r2, r3, [r6, #8]
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    54b2:	strb.w	r1, [r6, #51]	; 0x33
    54b6:	b.n	5262 <ExFatFile::write(void const*, unsigned int)+0x22>
    54b8:	ldr	r0, [sp, #4]
    54ba:	b.n	5262 <ExFatFile::write(void const*, unsigned int)+0x22>
    54bc:	ldrd	r2, r3, [r6]
    54c0:	b.n	5398 <ExFatFile::write(void const*, unsigned int)+0x158>
    54c2:	nop
    54c4:	.word	0x2001c8f8

000054c8 <FatFile::openRoot(FatVolume*) [clone .part.36]>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    54c8:	push	{r3, r4, r5, lr}
    54ca:	mov	r4, r0
    54cc:	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    54ce:	movs	r2, #36	; 0x24
    54d0:	movs	r1, #0
    54d2:	bl	c0dc <memset>

  m_vol = vol;
    54d6:	str	r5, [r4, #8]
  switch (vol->fatType()) {
    54d8:	ldrb	r3, [r5, #7]
    54da:	cmp	r3, #16
    54dc:	beq.n	54f0 <FatFile::openRoot(FatVolume*) [clone .part.36]+0x28>
    54de:	cmp	r3, #32
    54e0:	bne.n	54ec <FatFile::openRoot(FatVolume*) [clone .part.36]+0x24>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    54e2:	movs	r3, #64	; 0x40
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    54e4:	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    54e6:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    54e8:	strb	r0, [r4, #2]
    54ea:	pop	{r3, r4, r5, pc}
  return true;

fail:
  return false;
    54ec:	movs	r0, #0
}
    54ee:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    54f0:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    54f2:	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    54f4:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    54f6:	strb	r0, [r4, #2]
    54f8:	pop	{r3, r4, r5, pc}
    54fa:	nop

000054fc <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    54fc:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    54fe:	push	{r3, r4, r5, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    5500:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    5504:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    5506:	mov	r1, r5
    5508:	ldr	r0, [r0, #8]
    550a:	bl	5f40 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    550e:	cbz	r0, 5526 <FatFile::addCluster()+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    5510:	cbz	r5, 5528 <FatFile::addCluster()+0x2c>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    5512:	ldr	r3, [r4, #16]
    5514:	adds	r5, #1
    5516:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    5518:	ldrb	r3, [r4, #2]
    551a:	it	ne
    551c:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5520:	orn	r3, r3, #127	; 0x7f
    5524:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    5526:	pop	{r3, r4, r5, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    5528:	ldrb	r3, [r4, #2]
    552a:	orr.w	r3, r3, #64	; 0x40
    552e:	b.n	5520 <FatFile::addCluster()+0x24>

00005530 <FatFile::addDirCluster()>:
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    5530:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    5534:	ldrb	r3, [r0, #0]
    5536:	and.w	r3, r3, #32
    553a:	cbnz	r3, 5548 <FatFile::addDirCluster()+0x18>
    553c:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    5540:	ldr	r1, [r0, #20]
    5542:	ldr	r3, [pc, #124]	; (55c0 <FatFile::addDirCluster()+0x90>)
    5544:	cmp	r1, r3
    5546:	bls.n	5550 <FatFile::addDirCluster()+0x20>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    5548:	movs	r6, #0
}
    554a:	mov	r0, r6
    554c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5550:	mov	r5, r0
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    5552:	bl	54fc <FatFile::addCluster()>
    5556:	mov	r6, r0
    5558:	cmp	r0, #0
    555a:	beq.n	5548 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    555c:	ldr	r1, [r5, #16]
    555e:	ldr	r0, [r5, #8]
    5560:	bl	5e5c <FatPartition::clusterStartSector(unsigned long) const>
    5564:	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5566:	ldr	r0, [r5, #8]
    5568:	mov	r1, r7
    556a:	adds	r0, #36	; 0x24
    556c:	movs	r2, #5
    556e:	bl	5dec <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    5572:	mov	r8, r0
    5574:	cmp	r0, #0
    5576:	beq.n	5548 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    5578:	mov.w	r2, #512	; 0x200
    557c:	mov	r1, r4
    557e:	bl	c0dc <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    5582:	ldr	r3, [r5, #8]
    5584:	ldrb	r2, [r3, #4]
    5586:	cmp	r2, #1
    5588:	bls.n	55ac <FatFile::addDirCluster()+0x7c>
    558a:	movs	r4, #1
    558c:	b.n	5596 <FatFile::addDirCluster()+0x66>
    558e:	ldr	r3, [r5, #8]
    5590:	ldrb	r2, [r3, #4]
    5592:	cmp	r2, r4
    5594:	bls.n	55ac <FatFile::addDirCluster()+0x7c>
    5596:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5598:	ldr	r3, [r0, #0]
    559a:	adds	r1, r4, r7
    559c:	ldr	r3, [r3, #24]
    559e:	mov	r2, r8
    55a0:	blx	r3
    55a2:	adds	r4, #1
    55a4:	uxtb	r4, r4
    if (!m_vol->writeSector(sector + i, pc->data)) {
    55a6:	cmp	r0, #0
    55a8:	bne.n	558e <FatFile::addDirCluster()+0x5e>
    55aa:	b.n	5548 <FatFile::addDirCluster()+0x18>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    55ac:	ldrb	r3, [r3, #6]
    55ae:	ldr	r1, [r5, #20]
    55b0:	mov.w	r2, #512	; 0x200
    55b4:	lsl.w	r3, r2, r3
    55b8:	uxtah	r3, r1, r3
    55bc:	str	r3, [r5, #20]
    55be:	b.n	554a <FatFile::addDirCluster()+0x1a>
    55c0:	.word	0x001ffdff

000055c4 <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    55c4:	push	{r4, lr}
    55c6:	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    55c8:	ldr	r0, [r0, #8]
    55ca:	mov	r2, r1
    55cc:	adds	r0, #36	; 0x24
    55ce:	ldr	r1, [r4, #24]
    55d0:	bl	5dec <FatCache::read(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    55d4:	cbz	r0, 55e0 <FatFile::cacheDirEntry(unsigned char)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    55d6:	ldrh	r3, [r4, #4]
    55d8:	and.w	r3, r3, #15
    55dc:	add.w	r0, r0, r3, lsl #5

fail:
  return nullptr;
}
    55e0:	pop	{r4, pc}
    55e2:	nop

000055e4 <FatFile::sync() [clone .part.40]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    55e4:	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    55e6:	ldrsb.w	r3, [r0, #2]
    55ea:	cmp	r3, #0
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    55ec:	sub	sp, #8
    55ee:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    55f0:	blt.n	5626 <FatFile::sync() [clone .part.40]+0x42>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    55f2:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    55f4:	add.w	r0, r5, #36	; 0x24
    55f8:	bl	5e4c <FatCache::sync()>
    55fc:	cbnz	r0, 560c <FatFile::sync() [clone .part.40]+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    55fe:	ldrb	r3, [r4, #1]
    5600:	orr.w	r3, r3, #1
    5604:	strb	r3, [r4, #1]
  return false;
    5606:	movs	r0, #0
}
    5608:	add	sp, #8
    560a:	pop	{r4, r5, r6, pc}
    560c:	add.w	r0, r5, #560	; 0x230
    5610:	bl	5e4c <FatCache::sync()>
    5614:	cmp	r0, #0
    5616:	beq.n	55fe <FatFile::sync() [clone .part.40]+0x1a>
    5618:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    561a:	ldr	r3, [r0, #0]
    561c:	ldr	r3, [r3, #20]
    561e:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5620:	cmp	r0, #0
    5622:	beq.n	55fe <FatFile::sync() [clone .part.40]+0x1a>
    5624:	b.n	5608 <FatFile::sync() [clone .part.40]+0x24>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    5626:	movs	r1, #1
    5628:	bl	55c4 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    562c:	mov	r5, r0
    562e:	cmp	r0, #0
    5630:	beq.n	55fe <FatFile::sync() [clone .part.40]+0x1a>
    5632:	ldrb	r3, [r0, #0]
    5634:	cmp	r3, #229	; 0xe5
    5636:	beq.n	55fe <FatFile::sync() [clone .part.40]+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    5638:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    563a:	ldr	r2, [pc, #56]	; (5674 <FatFile::sync() [clone .part.40]+0x90>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    563c:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    563e:	itt	mi
    5640:	ldrmi	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5642:	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5644:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    5646:	ldr	r6, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5648:	strh	r3, [r0, #26]
    564a:	lsrs	r3, r3, #16
    564c:	strh	r3, [r0, #20]
    564e:	cbz	r6, 566a <FatFile::sync() [clone .part.40]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    5650:	add.w	r2, sp, #3
    5654:	add.w	r1, sp, #6
    5658:	add	r0, sp, #4
    565a:	blx	r6
      setLe16(dir->modifyDate, date);
    565c:	ldrh.w	r3, [sp, #4]
    5660:	ldrh.w	r2, [sp, #6]
    5664:	strh	r3, [r5, #24]
    5666:	strh	r3, [r5, #18]
    5668:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    566a:	ldrb	r3, [r4, #2]
    566c:	and.w	r3, r3, #127	; 0x7f
    5670:	strb	r3, [r4, #2]
    5672:	b.n	55f2 <FatFile::sync() [clone .part.40]+0xe>
    5674:	.word	0x2001c8f8

00005678 <FatFile::close()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    5678:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    567a:	ldrb	r3, [r0, #0]

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    567c:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    567e:	cbnz	r3, 568a <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5680:	movs	r3, #0
    5682:	strb	r3, [r4, #0]
  m_flags = 0;
    5684:	strb	r3, [r4, #2]
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    5686:	movs	r0, #1
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return rtn;
}
    5688:	pop	{r4, pc}
    568a:	bl	55e4 <FatFile::sync() [clone .part.40]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    568e:	movs	r3, #0
    5690:	strb	r3, [r4, #0]
  m_flags = 0;
    5692:	strb	r3, [r4, #2]
  return rtn;
}
    5694:	pop	{r4, pc}
    5696:	nop

00005698 <FatFile::preAllocate(unsigned long)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    5698:	cbnz	r1, 569e <FatFile::preAllocate(unsigned long)+0x6>
  m_flags |= FILE_FLAG_DIR_DIRTY;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
    569a:	movs	r0, #0
}
    569c:	bx	lr
  close();
fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
    569e:	push	{r3, r4, r5, lr}
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    56a0:	ldrb	r3, [r0, #2]
    56a2:	lsls	r3, r3, #30
    56a4:	bmi.n	56aa <FatFile::preAllocate(unsigned long)+0x12>
  m_flags |= FILE_FLAG_DIR_DIRTY;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
    56a6:	movs	r0, #0
    56a8:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    56aa:	ldr	r3, [r0, #32]
    56ac:	cmp	r3, #0
    56ae:	bne.n	56a6 <FatFile::preAllocate(unsigned long)+0xe>
    56b0:	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
    56b2:	ldr	r0, [r0, #8]
  // allocate clusters
  if (!m_vol->allocContiguous(need, &m_firstCluster)) {
    56b4:	ldrb	r3, [r0, #6]
    56b6:	adds	r3, #9
    56b8:	mov	r5, r1
    56ba:	uxtb	r3, r3
    56bc:	subs	r1, #1
    56be:	lsrs	r1, r3
    56c0:	adds	r1, #1
    56c2:	add.w	r2, r4, #32
    56c6:	bl	5fc4 <FatPartition::allocContiguous(unsigned long, unsigned long*)>
    56ca:	cmp	r0, #0
    56cc:	beq.n	56a6 <FatFile::preAllocate(unsigned long)+0xe>
  }
  m_fileSize = length;

#if USE_FAT_FILE_FLAG_CONTIGUOUS
  // Mark contiguous and insure sync() will update dir entry
  m_flags |= FILE_FLAG_PREALLOCATE | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    56ce:	ldrb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    56d0:	ldrb	r2, [r4, #0]
  // allocate clusters
  if (!m_vol->allocContiguous(need, &m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fileSize = length;
    56d2:	str	r5, [r4, #28]

#if USE_FAT_FILE_FLAG_CONTIGUOUS
  // Mark contiguous and insure sync() will update dir entry
  m_flags |= FILE_FLAG_PREALLOCATE | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    56d4:	orn	r3, r3, #31
    56d8:	strb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    56da:	cbnz	r2, 56de <FatFile::preAllocate(unsigned long)+0x46>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
}
    56dc:	pop	{r3, r4, r5, pc}
    56de:	mov	r0, r4
    56e0:	ldmia.w	sp!, {r3, r4, r5, lr}
    56e4:	b.w	55e4 <FatFile::sync() [clone .part.40]>

000056e8 <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    56e8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    56ec:	mov	r6, r0
    56ee:	sub	sp, #72	; 0x48
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    56f0:	ldrb	r5, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    56f2:	str	r2, [sp, #4]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    56f4:	movs	r0, #0
    56f6:	strb.w	r0, [sp, #36]	; 0x24
    56fa:	strb.w	r0, [sp, #37]	; 0x25
    56fe:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    5702:	cbnz	r5, 5710 <FatFile::open(FatFile*, char const*, int)+0x28>
    5704:	mov	r8, r3
    5706:	ldrb	r3, [r1, #0]
    5708:	tst.w	r3, #112	; 0x70
    570c:	mov	r4, r1
    570e:	bne.n	5718 <FatFile::open(FatFile*, char const*, int)+0x30>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    5710:	movs	r0, #0
}
    5712:	add	sp, #72	; 0x48
    5714:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    5718:	ldrb	r3, [r2, #0]
    571a:	cmp	r3, #47	; 0x2f
    571c:	mov	r0, r2
    571e:	beq.n	576c <FatFile::open(FatFile*, char const*, int)+0x84>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5720:	movs	r7, #0
    5722:	b.n	572c <FatFile::open(FatFile*, char const*, int)+0x44>
    5724:	ldr	r0, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5726:	strb	r7, [r6, #0]
  m_flags = 0;
    5728:	strb	r7, [r6, #2]
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    572a:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    572c:	add	r2, sp, #4
    572e:	add	r1, sp, #12
    5730:	bl	61e4 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5734:	add	r2, sp, #12
    5736:	mov	r1, r4
    5738:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    573a:	cmp	r0, #0
    573c:	beq.n	5710 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    573e:	ldr	r5, [sp, #4]
    5740:	ldrb	r5, [r5, #0]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5742:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    5744:	cbz	r5, 578a <FatFile::open(FatFile*, char const*, int)+0xa2>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5746:	bl	64e8 <FatFile::open(FatFile*, fname_t*, int)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    574a:	mov	r5, r6
    574c:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    574e:	cmp	r0, #0
    5750:	beq.n	5710 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5752:	ldmia	r5!, {r0, r1, r2, r3}
    5754:	stmia	r4!, {r0, r1, r2, r3}
    5756:	ldmia	r5!, {r0, r1, r2, r3}
    5758:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    575a:	ldrb	r3, [r6, #0]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    575c:	ldr	r2, [r5, #0]
    575e:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5760:	cmp	r3, #0
    5762:	beq.n	5724 <FatFile::open(FatFile*, char const*, int)+0x3c>
    5764:	mov	r0, r6
    5766:	bl	55e4 <FatFile::sync() [clone .part.40]>
    576a:	b.n	5724 <FatFile::open(FatFile*, char const*, int)+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    576c:	adds	r0, #1
    576e:	str	r0, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    5770:	ldrb	r3, [r0, #0]
    5772:	cmp	r3, #47	; 0x2f
    5774:	beq.n	576c <FatFile::open(FatFile*, char const*, int)+0x84>
      path++;
    }
    if (*path == 0) {
    5776:	cbz	r3, 579c <FatFile::open(FatFile*, char const*, int)+0xb4>
    5778:	ldr	r1, [r4, #8]
    577a:	add	r0, sp, #36	; 0x24
    577c:	bl	54c8 <FatFile::openRoot(FatVolume*) [clone .part.36]>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    5780:	cmp	r0, #0
    5782:	beq.n	5710 <FatFile::open(FatFile*, char const*, int)+0x28>
    5784:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    5786:	add	r4, sp, #36	; 0x24
    5788:	b.n	5720 <FatFile::open(FatFile*, char const*, int)+0x38>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    578a:	mov	r3, r8
    578c:	add	r2, sp, #12
    578e:	mov	r1, r4
    5790:	mov	r0, r6
    5792:	bl	64e8 <FatFile::open(FatFile*, fname_t*, int)>

fail:
  return false;
}
    5796:	add	sp, #72	; 0x48
    5798:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    579c:	ldr	r1, [r4, #8]
    579e:	mov	r0, r6
    57a0:	bl	54c8 <FatFile::openRoot(FatVolume*) [clone .part.36]>
    57a4:	b.n	5712 <FatFile::open(FatFile*, char const*, int)+0x2a>
    57a6:	nop

000057a8 <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    57a8:	cbz	r1, 57b2 <FatFile::open(FatVolume*, char const*, int)+0xa>
    57aa:	addw	r1, r1, #1084	; 0x43c
    57ae:	b.w	56e8 <FatFile::open(FatFile*, char const*, int)>
}
    57b2:	mov	r0, r1
    57b4:	bx	lr
    57b6:	nop

000057b8 <FatFile::openRoot(FatVolume*)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    57b8:	ldrb	r3, [r0, #0]
    57ba:	cbz	r3, 57c0 <FatFile::openRoot(FatVolume*)+0x8>
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
}
    57bc:	movs	r0, #0
    57be:	bx	lr
    57c0:	b.w	54c8 <FatFile::openRoot(FatVolume*) [clone .part.36]>

000057c4 <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    57c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    57c8:	ldrb	r3, [r0, #2]
    57ca:	lsls	r7, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    57cc:	sub	sp, #12
    57ce:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    57d0:	bpl.w	58f2 <FatFile::read(void*, unsigned int)+0x12e>
    57d4:	mov	r7, r1
    57d6:	ldrb	r1, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    57d8:	lsls	r6, r1, #28
    57da:	mov	r9, r2
    57dc:	bmi.w	5904 <FatFile::read(void*, unsigned int)+0x140>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    57e0:	lsls	r4, r1, #26
    57e2:	bpl.n	57f6 <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    57e4:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    57e6:	ldr	r3, [r0, #20]
    57e8:	ldrh	r2, [r2, #8]
    57ea:	rsb	r3, r3, r2, lsl #5
    57ee:	uxth	r3, r3
    57f0:	cmp	r9, r3
    57f2:	it	cs
    57f4:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    57f6:	cmp.w	r9, #0
    57fa:	beq.w	5950 <FatFile::read(void*, unsigned int)+0x18c>
    57fe:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5800:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    5802:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5804:	mov	r6, r9
    5806:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    580a:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    580e:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    5812:	bpl.n	5892 <FatFile::read(void*, unsigned int)+0xce>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    5814:	ldr	r1, [r2, #32]
    5816:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    581a:	cmp.w	fp, #0
    581e:	bne.n	58c6 <FatFile::read(void*, unsigned int)+0x102>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    5820:	cmp.w	r6, #512	; 0x200
    5824:	bcc.n	58c6 <FatFile::read(void*, unsigned int)+0x102>
    5826:	ldr	r3, [r2, #44]	; 0x2c
        || sector == m_vol->cacheSectorNumber()) {
    5828:	cmp	r1, r3
    582a:	beq.n	58c6 <FatFile::read(void*, unsigned int)+0x102>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    582c:	cmp.w	r6, #1024	; 0x400
    5830:	bcc.n	5916 <FatFile::read(void*, unsigned int)+0x152>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    5832:	ldrb	r0, [r5, #0]
    5834:	lsls	r0, r0, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    5836:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    583a:	bmi.n	5848 <FatFile::read(void*, unsigned int)+0x84>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    583c:	ldrb	r0, [r2, #4]
    583e:	rsb	r0, r8, r0
    5842:	cmp	fp, r0
    5844:	it	cs
    5846:	movcs	fp, r0
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    5848:	cmp	r1, r3
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    584a:	mov.w	r4, fp, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    584e:	bhi.n	5868 <FatFile::read(void*, unsigned int)+0xa4>
    5850:	add	r3, fp
    5852:	cmp	r1, r3
    5854:	bcs.n	5868 <FatFile::read(void*, unsigned int)+0xa4>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    5856:	add.w	r0, r2, #36	; 0x24
    585a:	str	r1, [sp, #4]
    585c:	bl	5e4c <FatCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->cacheSyncData()) {
    5860:	cmp	r0, #0
    5862:	beq.n	58f2 <FatFile::read(void*, unsigned int)+0x12e>
    5864:	ldr	r2, [r5, #8]
    5866:	ldr	r1, [sp, #4]
    5868:	ldr	r0, [r2, #0]
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
    586a:	ldr	r2, [r0, #0]
    586c:	mov	r3, fp
    586e:	ldr.w	fp, [r2, #12]
    5872:	mov	r2, r7
    5874:	blx	fp
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    5876:	cmp	r0, #0
    5878:	beq.n	58f2 <FatFile::read(void*, unsigned int)+0x12e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    587a:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    587c:	subs	r6, r6, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    587e:	add	r3, r4
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    5880:	add	r7, r4
    m_curPosition += n;
    5882:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5884:	beq.n	5950 <FatFile::read(void*, unsigned int)+0x18c>
    5886:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5888:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    588a:	lsls	r0, r1, #26
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    588c:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    5890:	bmi.n	5814 <FatFile::read(void*, unsigned int)+0x50>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    5892:	ldrb.w	r8, [r2, #5]
    5896:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    589a:	cmp.w	fp, #0
    589e:	bne.n	5912 <FatFile::read(void*, unsigned int)+0x14e>
    58a0:	cmp.w	r8, #0
    58a4:	bne.n	5912 <FatFile::read(void*, unsigned int)+0x14e>
        // start of new cluster
        if (m_curPosition == 0) {
    58a6:	cmp	r3, #0
    58a8:	bne.n	592a <FatFile::read(void*, unsigned int)+0x166>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    58aa:	lsls	r1, r1, #25
    58ac:	ite	mi
    58ae:	ldrmi	r1, [r2, #32]
    58b0:	ldrpl	r1, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    58b2:	str	r1, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    58b4:	mov	r0, r2
    58b6:	bl	5e5c <FatPartition::clusterStartSector(unsigned long) const>
    58ba:	ldr	r2, [r5, #8]
    58bc:	add.w	r1, r8, r0
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    58c0:	cmp.w	fp, #0
    58c4:	beq.n	5820 <FatFile::read(void*, unsigned int)+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    58c6:	add.w	r0, r2, #36	; 0x24
    58ca:	movs	r2, #0
    58cc:	bl	5dec <FatCache::read(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
    58d0:	cbz	r0, 58f2 <FatFile::read(void*, unsigned int)+0x12e>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    58d2:	rsb	r4, fp, #512	; 0x200
    58d6:	cmp	r4, r6
    58d8:	it	cs
    58da:	movcs	r4, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    58dc:	add.w	r1, r0, fp
    58e0:	mov	r2, r4
    58e2:	mov	r0, r7
    58e4:	bl	81cc <memcpy>
    58e8:	b.n	587a <FatFile::read(void*, unsigned int)+0xb6>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    58ea:	ldrb	r3, [r5, #0]
    58ec:	tst.w	r3, #112	; 0x70
    58f0:	bne.n	5952 <FatFile::read(void*, unsigned int)+0x18e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    58f2:	ldrb	r3, [r5, #1]
  return -1;
    58f4:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    58f8:	orr.w	r3, r3, #2
    58fc:	strb	r3, [r5, #1]
  return -1;
}
    58fe:	add	sp, #12
    5900:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    5904:	ldr	r3, [r0, #28]
    5906:	ldr	r2, [r0, #20]
    5908:	subs	r3, r3, r2
    590a:	cmp	r9, r3
    590c:	it	cs
    590e:	movcs	r9, r3
    5910:	b.n	57f6 <FatFile::read(void*, unsigned int)+0x32>
    5912:	ldr	r1, [r5, #16]
    5914:	b.n	58b4 <FatFile::read(void*, unsigned int)+0xf0>
    5916:	ldr	r0, [r2, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5918:	ldr	r3, [r0, #0]
    591a:	mov	r2, r7
    591c:	ldr	r3, [r3, #8]
    591e:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    5920:	cmp	r0, #0
    5922:	beq.n	58f2 <FatFile::read(void*, unsigned int)+0x12e>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    5924:	mov.w	r4, #512	; 0x200
    5928:	b.n	587a <FatFile::read(void*, unsigned int)+0xb6>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    592a:	lsls	r3, r1, #28
    592c:	bpl.n	593a <FatFile::read(void*, unsigned int)+0x176>
    592e:	ldrb	r3, [r5, #2]
    5930:	lsls	r4, r3, #25
    5932:	bpl.n	593a <FatFile::read(void*, unsigned int)+0x176>
          m_curCluster++;
    5934:	ldr	r1, [r5, #16]
    5936:	adds	r1, #1
    5938:	b.n	58b2 <FatFile::read(void*, unsigned int)+0xee>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    593a:	mov	r0, r2
    593c:	ldr	r1, [r5, #16]
    593e:	mov	r2, sl
    5940:	bl	5e68 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    5944:	cmp	r0, #0
    5946:	blt.n	58f2 <FatFile::read(void*, unsigned int)+0x12e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    5948:	beq.n	58ea <FatFile::read(void*, unsigned int)+0x126>
    594a:	ldr	r2, [r5, #8]
    594c:	ldr	r1, [r5, #16]
    594e:	b.n	58b4 <FatFile::read(void*, unsigned int)+0xf0>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    5950:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    5952:	rsb	r0, r6, r9

fail:
  m_error |= READ_ERROR;
  return -1;
}
    5956:	add	sp, #12
    5958:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000595c <FatFile::peek()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    595c:	push	{r4, r5, r6, lr}
    595e:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    5960:	movs	r2, #1
    5962:	add.w	r1, sp, #7
    5966:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    5968:	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    596a:	ldr	r5, [r0, #16]
    596c:	bl	57c4 <FatFile::read(void*, unsigned int)>
    5970:	cmp	r0, #1
    5972:	it	eq
    5974:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
    5978:	str	r6, [r4, #20]
    597a:	it	ne
    597c:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    5980:	str	r5, [r4, #16]
  return c;
}
    5982:	add	sp, #8
    5984:	pop	{r4, r5, r6, pc}
    5986:	nop

00005988 <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    5988:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    598a:	ldr	r3, [r0, #20]
    598c:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    5990:	sub	sp, #12
    5992:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    5994:	cbz	r5, 5998 <FatFile::readDirCache(bool)+0x10>
    5996:	cbnz	r1, 59bc <FatFile::readDirCache(bool)+0x34>
    int8_t n = read(&n, 1);
    5998:	movs	r2, #1
    599a:	add.w	r1, sp, #7
    599e:	mov	r0, r4
    59a0:	bl	57c4 <FatFile::read(void*, unsigned int)>
    59a4:	sxtb	r0, r0
    if  (n != 1) {
    59a6:	cmp	r0, #1
    59a8:	bne.n	59c2 <FatFile::readDirCache(bool)+0x3a>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    59aa:	ldr	r3, [r4, #20]
    59ac:	adds	r3, #31
    59ae:	str	r3, [r4, #20]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    59b0:	ldr	r0, [r4, #8]
    59b2:	adds	r0, #48	; 0x30
  } else {
    m_curPosition += 32;
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    59b4:	add.w	r0, r0, r5, lsl #5

fail:
  return nullptr;
}
    59b8:	add	sp, #12
    59ba:	pop	{r4, r5, pc}
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    59bc:	adds	r3, #32
    59be:	str	r3, [r0, #20]
    59c0:	b.n	59b0 <FatFile::readDirCache(bool)+0x28>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
    59c2:	movs	r0, #0
}
    59c4:	add	sp, #12
    59c6:	pop	{r4, r5, pc}

000059c8 <FatFile::seekSet(unsigned long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    59c8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59cc:	ldrb	r3, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    59ce:	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    59d0:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    59d2:	cbz	r3, 5a02 <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    59d4:	ldr	r2, [r0, #20]
    59d6:	cmp	r2, r1
    59d8:	mov	r6, r1
    59da:	beq.n	5a52 <FatFile::seekSet(unsigned long)+0x8a>
    return true;
  }
  if (pos == 0) {
    59dc:	cbnz	r1, 59f0 <FatFile::seekSet(unsigned long)+0x28>
    // set position to start of file
    m_curCluster = 0;
    59de:	str	r1, [r4, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    59e0:	ldrb	r3, [r4, #2]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    59e2:	str	r6, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    59e4:	bic.w	r3, r3, #32
    59e8:	strb	r3, [r4, #2]
  return true;
    59ea:	movs	r0, #1
    59ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    59f0:	lsls	r0, r3, #28
    59f2:	bmi.n	5a0a <FatFile::seekSet(unsigned long)+0x42>
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    59f4:	lsls	r1, r3, #26
    59f6:	bpl.n	5a10 <FatFile::seekSet(unsigned long)+0x48>
    59f8:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    59fa:	ldrh	r3, [r3, #8]
    59fc:	cmp.w	r6, r3, lsl #5
    5a00:	bls.n	59e0 <FatFile::seekSet(unsigned long)+0x18>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

fail:
  m_curCluster = tmp;
    5a02:	str	r7, [r4, #16]
  return false;
    5a04:	movs	r0, #0
    5a06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
    5a0a:	ldr	r1, [r4, #28]
    5a0c:	cmp	r6, r1
    5a0e:	bhi.n	5a02 <FatFile::seekSet(unsigned long)+0x3a>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    5a10:	ldr.w	lr, [r4, #8]
    5a14:	ldrb.w	r5, [lr, #6]
    5a18:	adds	r5, #9
    5a1a:	uxtb	r1, r5
    5a1c:	subs	r0, r2, #1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    5a1e:	subs	r5, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    5a20:	lsrs	r0, r1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    5a22:	lsrs	r5, r1

  if (nNew < nCur || m_curPosition == 0) {
    5a24:	cmp	r0, r5
    5a26:	bhi.n	5a2a <FatFile::seekSet(unsigned long)+0x62>
    5a28:	cbnz	r2, 5a58 <FatFile::seekSet(unsigned long)+0x90>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    5a2a:	lsls	r3, r3, #25
    5a2c:	ite	mi
    5a2e:	ldrmi.w	r3, [lr, #32]
    5a32:	ldrpl	r3, [r4, #32]
    5a34:	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5a36:	add.w	r8, r4, #16
    5a3a:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    5a3c:	cmp	r5, #0
    5a3e:	beq.n	59e0 <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5a40:	ldr	r1, [r4, #16]
    5a42:	ldr	r0, [r4, #8]
    5a44:	bl	5e68 <FatPartition::fatGet(unsigned long, unsigned long*)>
    5a48:	cmp	r0, #0
    5a4a:	add.w	r5, r5, #4294967295
    5a4e:	bgt.n	5a3a <FatFile::seekSet(unsigned long)+0x72>
    5a50:	b.n	5a02 <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    5a52:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    5a54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    5a58:	subs	r5, r5, r0
    5a5a:	b.n	5a36 <FatFile::seekSet(unsigned long)+0x6e>

00005a5c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    5a5c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a60:	mov	r5, r1
    5a62:	mov	r8, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    5a64:	movs	r1, #0
    5a66:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    5a68:	mov	r4, r0
    5a6a:	mov	r7, r3
    5a6c:	ldrb.w	r6, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    5a70:	bl	c0dc <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    5a74:	ldr	r0, [r5, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    5a76:	ldr	r3, [r5, #32]
    5a78:	str	r3, [r4, #12]
    5a7a:	add.w	r2, r0, #48	; 0x30
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    5a7e:	and.w	r3, r8, #15
    5a82:	add.w	r2, r2, r3, lsl #5
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    5a86:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
    5a88:	strh.w	r8, [r4, #4]
    5a8c:	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    5a8e:	lsls	r5, r1, #28
    5a90:	bmi.n	5ab8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    5a92:	and.w	r1, r1, #23
    5a96:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    5a98:	ldrb	r3, [r2, #11]
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    5a9a:	strb	r6, [r4, #3]
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    5a9c:	tst.w	r3, #24
    m_attributes |= FILE_ATTR_FILE;
    5aa0:	it	eq
    5aa2:	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    5aa6:	and.w	r3, r7, #3
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    5aaa:	it	eq
    5aac:	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    5aae:	cmp	r3, #1
    5ab0:	beq.n	5ac2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
    5ab2:	cmp	r3, #2
    5ab4:	beq.n	5b0a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    5ab6:	cbz	r3, 5b00 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    5ab8:	movs	r0, #0
    5aba:	strb	r0, [r4, #0]
  m_flags = 0;
    5abc:	strb	r0, [r4, #2]
  return false;
    5abe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    5ac2:	movs	r3, #2
    5ac4:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    5ac6:	ldrb	r1, [r4, #0]
    5ac8:	tst.w	r1, #17
    5acc:	bne.n	5ab8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    5ace:	sxtb	r1, r3
    5ad0:	and.w	r5, r7, #1024	; 0x400
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    5ad4:	and.w	r3, r7, #8
    5ad8:	orrs	r3, r1
    5ada:	uxtb	r3, r3
    5adc:	strb	r3, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    5ade:	ldrh.w	lr, [r2, #20]
    5ae2:	ldrh	r1, [r2, #26]
    5ae4:	ldr	r6, [r0, #44]	; 0x2c
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    5ae6:	str	r6, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    5ae8:	orr.w	r1, r1, lr, lsl #16

  if (oflag & O_TRUNC) {
    5aec:	cbz	r5, 5b10 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    5aee:	cbnz	r1, 5b26 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xca>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5af0:	orn	r3, r3, #127	; 0x7f
    5af4:	strb	r3, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    5af6:	lsls	r3, r7, #17
    5af8:	bmi.n	5b18 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    5afa:	movs	r0, #1
    5afc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    5b00:	ands.w	r5, r7, #1024	; 0x400
    5b04:	bne.n	5ab8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    5b06:	movs	r1, #1
    5b08:	b.n	5ad4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x78>
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    5b0a:	movs	r3, #3
    5b0c:	strb	r3, [r4, #2]
      break;
    5b0e:	b.n	5ac6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    5b10:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    5b12:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    5b14:	str	r3, [r4, #28]
    5b16:	b.n	5af6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9a>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    5b18:	ldr	r1, [r4, #28]
    5b1a:	mov	r0, r4
    5b1c:	bl	59c8 <FatFile::seekSet(unsigned long)>
    5b20:	cmp	r0, #0
    5b22:	bne.n	5afa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
    5b24:	b.n	5ab8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    5b26:	bl	606c <FatPartition::freeChain(unsigned long)>
    5b2a:	cmp	r0, #0
    5b2c:	beq.n	5ab8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    5b2e:	ldrb	r3, [r4, #2]
    5b30:	b.n	5af0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    5b32:	nop

00005b34 <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5b34:	ldrb	r3, [r0, #0]
    5b36:	cbz	r3, 5b3c <FatFile::sync()+0x8>
    5b38:	b.w	55e4 <FatFile::sync() [clone .part.40]>
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    5b3c:	movs	r0, #1
    5b3e:	bx	lr

00005b40 <FatFile::truncate()>:
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    5b40:	ldrb	r3, [r0, #2]
    5b42:	lsls	r3, r3, #30
    5b44:	bpl.n	5b7c <FatFile::truncate()+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    5b46:	ldr	r3, [r0, #32]
    5b48:	cbz	r3, 5b78 <FatFile::truncate()+0x38>

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    5b4a:	push	{r4, lr}
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    5b4c:	ldr	r1, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    5b4e:	sub	sp, #8
    5b50:	mov	r4, r0
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    5b52:	cbnz	r1, 5b92 <FatFile::truncate()+0x52>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    5b54:	str	r3, [sp, #4]
    m_firstCluster = 0;
    5b56:	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    5b58:	mov	r1, r3
    5b5a:	ldr	r0, [r4, #8]
    5b5c:	bl	606c <FatPartition::freeChain(unsigned long)>
    5b60:	cbz	r0, 5b8e <FatFile::truncate()+0x4e>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5b62:	ldrb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5b64:	ldrb	r2, [r4, #0]
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    5b66:	ldr	r1, [r4, #20]
    5b68:	str	r1, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5b6a:	orn	r3, r3, #127	; 0x7f
    5b6e:	strb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5b70:	cbnz	r2, 5bae <FatFile::truncate()+0x6e>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    5b72:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    5b74:	add	sp, #8
    5b76:	pop	{r4, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    5b78:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    5b7a:	bx	lr
    goto fail;
  }
  return true;

 fail:
  return false;
    5b7c:	movs	r0, #0
}
    5b7e:	bx	lr
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    5b80:	mvn.w	r2, #4026531840	; 0xf0000000
    5b84:	ldr	r1, [r4, #16]
    5b86:	ldr	r0, [r4, #8]
    5b88:	bl	5ed8 <FatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
      // current cluster is end of chain
      if (!m_vol->fatPutEOC(m_curCluster)) {
    5b8c:	cbnz	r0, 5ba6 <FatFile::truncate()+0x66>
    goto fail;
  }
  return true;

 fail:
  return false;
    5b8e:	movs	r0, #0
    5b90:	b.n	5b74 <FatFile::truncate()+0x34>
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    toFree = 0;
    5b92:	add	r2, sp, #8
    5b94:	movs	r3, #0
    5b96:	str.w	r3, [r2, #-4]!
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    5b9a:	ldr	r0, [r0, #8]
    5b9c:	bl	5e68 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    5ba0:	cmp	r0, #0
    5ba2:	blt.n	5b8e <FatFile::truncate()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
    5ba4:	bne.n	5b80 <FatFile::truncate()+0x40>
    }
  } else {
    toFree = m_firstCluster;
    m_firstCluster = 0;
  }
  if (toFree) {
    5ba6:	ldr	r3, [sp, #4]
    5ba8:	cmp	r3, #0
    5baa:	beq.n	5b62 <FatFile::truncate()+0x22>
    5bac:	b.n	5b58 <FatFile::truncate()+0x18>
    5bae:	mov	r0, r4
    5bb0:	bl	55e4 <FatFile::sync() [clone .part.40]>
    5bb4:	b.n	5b74 <FatFile::truncate()+0x34>
    5bb6:	nop

00005bb8 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    5bb8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5bbc:	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    5bbe:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    5bc0:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    5bc2:	bmi.n	5bd4 <FatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    5bc4:	ldrb	r3, [r4, #1]
    5bc6:	orr.w	r3, r3, #1
    5bca:	strb	r3, [r4, #1]
  return -1;
    5bcc:	mov.w	r0, #4294967295
    5bd0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5bd4:	mov	r9, r2
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    5bd6:	lsls	r2, r3, #28
    5bd8:	mov	r8, r1
    5bda:	bmi.w	5d5c <FatFile::write(void const*, unsigned int)+0x1a4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    5bde:	ldr	r2, [r4, #20]
    5be0:	mvns	r3, r2
    5be2:	cmp	r9, r3
    5be4:	bhi.n	5bc4 <FatFile::write(void const*, unsigned int)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    5be6:	cmp.w	r9, #0
    5bea:	beq.w	5d6a <FatFile::write(void const*, unsigned int)+0x1b2>
    5bee:	mov	r6, r9
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5bf0:	mov.w	sl, #0
    5bf4:	b.n	5c58 <FatFile::write(void const*, unsigned int)+0xa0>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    5bf6:	cmp	r1, #0
    5bf8:	beq.n	5cee <FatFile::write(void const*, unsigned int)+0x136>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    5bfa:	ldrb	r3, [r4, #2]
    5bfc:	lsls	r3, r3, #25
    5bfe:	bpl.n	5cfc <FatFile::write(void const*, unsigned int)+0x144>
    5c00:	ldr	r3, [r4, #28]
    5c02:	cmp	r3, r2
    5c04:	bls.n	5cfc <FatFile::write(void const*, unsigned int)+0x144>
          m_curCluster++;
    5c06:	adds	r1, #1
    5c08:	str	r1, [r4, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5c0a:	bl	5e5c <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    5c0e:	cmp.w	r6, #512	; 0x200
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5c12:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    5c14:	bcs.n	5c92 <FatFile::write(void const*, unsigned int)+0xda>
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    5c16:	ldr	r2, [r4, #20]
    5c18:	ldr	r3, [r4, #28]
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    5c1a:	ldr	r0, [r4, #8]
    5c1c:	cmp.w	r6, #512	; 0x200
    5c20:	mov	r5, r6
    5c22:	it	cs
    5c24:	movcs.w	r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    5c28:	cmp	r2, r3
    5c2a:	bcc.n	5d1e <FatFile::write(void const*, unsigned int)+0x166>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    5c2c:	movs	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5c2e:	adds	r0, #36	; 0x24
    5c30:	bl	5dec <FatCache::read(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    5c34:	cmp	r0, #0
    5c36:	beq.n	5bc4 <FatFile::write(void const*, unsigned int)+0xc>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    5c38:	add	r0, r7
    5c3a:	mov	r2, r5
    5c3c:	mov	r1, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5c3e:	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    5c40:	bl	81cc <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5c44:	cmp.w	r7, #512	; 0x200
    5c48:	beq.n	5d3a <FatFile::write(void const*, unsigned int)+0x182>
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5c4a:	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    5c4c:	subs	r6, r6, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5c4e:	add	r2, r5
    src += n;
    5c50:	add	r8, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5c52:	str	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    5c54:	beq.w	5d6a <FatFile::write(void const*, unsigned int)+0x1b2>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    5c58:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    5c5a:	ldr	r1, [r4, #16]
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    5c5c:	ldrb	r3, [r0, #5]
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    5c5e:	ands.w	r5, r3, r2, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    5c62:	ubfx	r7, r2, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    5c66:	bne.n	5c82 <FatFile::write(void const*, unsigned int)+0xca>
    5c68:	cmp	r7, #0
    5c6a:	beq.n	5bf6 <FatFile::write(void const*, unsigned int)+0x3e>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5c6c:	bl	5e5c <FatPartition::clusterStartSector(unsigned long) const>
    5c70:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    5c72:	rsb	r5, r7, #512	; 0x200
    5c76:	cmp	r5, r6
    5c78:	it	cs
    5c7a:	movcs	r5, r6
    5c7c:	ldr	r0, [r4, #8]
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
    5c7e:	movs	r2, #1
    5c80:	b.n	5c2e <FatFile::write(void const*, unsigned int)+0x76>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5c82:	bl	5e5c <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;
    5c86:	adds	r1, r5, r0

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    5c88:	cmp	r7, #0
    5c8a:	bne.n	5c72 <FatFile::write(void const*, unsigned int)+0xba>
    5c8c:	cmp.w	r6, #512	; 0x200
    5c90:	bcc.n	5c16 <FatFile::write(void const*, unsigned int)+0x5e>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    5c92:	cmp.w	r6, #1024	; 0x400
    5c96:	ldr	r2, [r4, #8]
    5c98:	bcc.n	5cd2 <FatFile::write(void const*, unsigned int)+0x11a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    5c9a:	ldrb	r3, [r2, #4]
    5c9c:	ldr	r7, [r2, #44]	; 0x2c
    5c9e:	subs	r3, r3, r5
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    5ca0:	lsrs	r0, r6, #9
    5ca2:	cmp	r3, r0
    5ca4:	it	cs
    5ca6:	movcs	r3, r0
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    5ca8:	cmp	r7, r1
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    5caa:	mov.w	r5, r3, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    5cae:	bcc.n	5cc2 <FatFile::write(void const*, unsigned int)+0x10a>
    5cb0:	add	r7, r3
    5cb2:	cmp	r7, r1
    5cb4:	bls.n	5cc2 <FatFile::write(void const*, unsigned int)+0x10a>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5cb6:	strb.w	sl, [r2, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    5cba:	mov.w	r0, #4294967295
    5cbe:	str	r0, [r2, #44]	; 0x2c
    5cc0:	ldr	r2, [r4, #8]
    5cc2:	ldr	r0, [r2, #0]
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    return m_blockDev->writeSectors(sector, src, ns);
    5cc4:	ldr	r2, [r0, #0]
    5cc6:	ldr	r7, [r2, #28]
    5cc8:	mov	r2, r8
    5cca:	blx	r7
        // Invalidate cache if cache sector is in the range.
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, nSector)) {
    5ccc:	cmp	r0, #0
    5cce:	bne.n	5c4a <FatFile::write(void const*, unsigned int)+0x92>
    5cd0:	b.n	5bc4 <FatFile::write(void const*, unsigned int)+0xc>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
    5cd2:	ldr	r3, [r2, #44]	; 0x2c
    5cd4:	cmp	r3, r1
    5cd6:	beq.n	5d2c <FatFile::write(void const*, unsigned int)+0x174>
    5cd8:	ldr	r0, [r2, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5cda:	ldr	r3, [r0, #0]
    5cdc:	mov	r2, r8
    5cde:	ldr	r3, [r3, #24]
    5ce0:	blx	r3
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    5ce2:	cmp	r0, #0
    5ce4:	beq.w	5bc4 <FatFile::write(void const*, unsigned int)+0xc>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    5ce8:	mov.w	r5, #512	; 0x200
    5cec:	b.n	5c4a <FatFile::write(void const*, unsigned int)+0x92>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    5cee:	ldr	r1, [r4, #32]
    5cf0:	cbz	r1, 5d48 <FatFile::write(void const*, unsigned int)+0x190>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    5cf2:	str	r1, [r4, #16]
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5cf4:	bl	5e5c <FatPartition::clusterStartSector(unsigned long) const>
    5cf8:	mov	r1, r0
    5cfa:	b.n	5c8c <FatFile::write(void const*, unsigned int)+0xd4>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5cfc:	add.w	r2, r4, #16
    5d00:	bl	5e68 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    5d04:	cmp	r0, #0
    5d06:	blt.w	5bc4 <FatFile::write(void const*, unsigned int)+0xc>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    5d0a:	bne.n	5d18 <FatFile::write(void const*, unsigned int)+0x160>
          // add cluster if at end of chain
          if (!addCluster()) {
    5d0c:	mov	r0, r4
    5d0e:	bl	54fc <FatFile::addCluster()>
    5d12:	cmp	r0, #0
    5d14:	beq.w	5bc4 <FatFile::write(void const*, unsigned int)+0xc>
    5d18:	ldr	r0, [r4, #8]
    5d1a:	ldr	r1, [r4, #16]
    5d1c:	b.n	5cf4 <FatFile::write(void const*, unsigned int)+0x13c>
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    5d1e:	ldrb	r3, [r4, #2]
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    5d20:	tst.w	r3, #32
    5d24:	ite	eq
    5d26:	moveq	r2, #1
    5d28:	movne	r2, #5
    5d2a:	b.n	5c2e <FatFile::write(void const*, unsigned int)+0x76>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5d2c:	strb.w	sl, [r2, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    5d30:	mov.w	r3, #4294967295
    5d34:	str	r3, [r2, #44]	; 0x2c
    5d36:	ldr	r2, [r4, #8]
    5d38:	b.n	5cd8 <FatFile::write(void const*, unsigned int)+0x120>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    5d3a:	ldr	r0, [r4, #8]
    5d3c:	adds	r0, #36	; 0x24
    5d3e:	bl	5e4c <FatCache::sync()>
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    5d42:	cmp	r0, #0
    5d44:	bne.n	5c4a <FatFile::write(void const*, unsigned int)+0x92>
    5d46:	b.n	5bc4 <FatFile::write(void const*, unsigned int)+0xc>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    5d48:	mov	r0, r4
    5d4a:	bl	54fc <FatFile::addCluster()>
    5d4e:	cmp	r0, #0
    5d50:	beq.w	5bc4 <FatFile::write(void const*, unsigned int)+0xc>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    5d54:	ldr	r1, [r4, #16]
    5d56:	str	r1, [r4, #32]
    5d58:	ldr	r0, [r4, #8]
    5d5a:	b.n	5cf4 <FatFile::write(void const*, unsigned int)+0x13c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    5d5c:	ldr	r1, [r0, #28]
    5d5e:	bl	59c8 <FatFile::seekSet(unsigned long)>
    5d62:	cmp	r0, #0
    5d64:	beq.w	5bc4 <FatFile::write(void const*, unsigned int)+0xc>
    5d68:	b.n	5bde <FatFile::write(void const*, unsigned int)+0x26>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    5d6a:	ldr	r3, [r4, #28]
    5d6c:	cmp	r3, r2
    5d6e:	bcc.n	5d84 <FatFile::write(void const*, unsigned int)+0x1cc>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    5d70:	ldr	r3, [pc, #40]	; (5d9c <FatFile::write(void const*, unsigned int)+0x1e4>)
    5d72:	ldr	r3, [r3, #0]
    5d74:	cbz	r3, 5d94 <FatFile::write(void const*, unsigned int)+0x1dc>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5d76:	ldrb	r3, [r4, #2]
    5d78:	orn	r3, r3, #127	; 0x7f
    5d7c:	strb	r3, [r4, #2]
    5d7e:	mov	r0, r9
    5d80:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5d84:	ldrb	r3, [r4, #2]
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    5d86:	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5d88:	orn	r3, r3, #127	; 0x7f
    5d8c:	strb	r3, [r4, #2]
    5d8e:	mov	r0, r9
    5d90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d94:	mov	r0, r9
    5d96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d9a:	nop
    5d9c:	.word	0x2001c8f8

00005da0 <FatCache::sync() [clone .part.8]>:
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    5da0:	push	{r3, r4, r5, r6, r7, lr}
    5da2:	ldr	r3, [r0, #4]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5da4:	ldr	r1, [r0, #8]
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5da6:	add.w	r6, r0, #12
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    5daa:	mov	r4, r0
    5dac:	ldr	r0, [r3, #0]
    5dae:	ldr	r3, [r0, #0]
    5db0:	mov	r2, r6
    5db2:	ldr	r3, [r3, #24]
    5db4:	blx	r3
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5db6:	cbz	r0, 5dca <FatCache::sync() [clone .part.8]+0x2a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5db8:	ldrb	r3, [r4, #0]
    5dba:	lsls	r2, r3, #30
    5dbc:	mov	r5, r0
    5dbe:	bmi.n	5dd0 <FatCache::sync() [clone .part.8]+0x30>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5dc0:	bic.w	r3, r3, #1
    5dc4:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    5dc6:	mov	r0, r5
    5dc8:	pop	{r3, r4, r5, r6, r7, pc}
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
    5dca:	movs	r5, #0
}
    5dcc:	mov	r0, r5
    5dce:	pop	{r3, r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    5dd0:	ldr	r3, [r4, #4]
    5dd2:	ldr	r1, [r4, #8]
    5dd4:	ldr	r0, [r3, #0]
    5dd6:	ldr	r7, [r3, #16]
    5dd8:	ldr	r3, [r0, #0]
    5dda:	mov	r2, r6
    5ddc:	add	r1, r7
    5dde:	ldr	r3, [r3, #24]
    5de0:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5de2:	cmp	r0, #0
    5de4:	beq.n	5dca <FatCache::sync() [clone .part.8]+0x2a>
    5de6:	ldrb	r3, [r4, #0]
    5de8:	b.n	5dc0 <FatCache::sync() [clone .part.8]+0x20>
    5dea:	nop

00005dec <FatCache::read(unsigned long, unsigned char)>:
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    5dec:	push	{r3, r4, r5, r6, r7, lr}
  if (m_lbn != sector) {
    5dee:	ldr	r3, [r0, #8]
    5df0:	cmp	r3, r1
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    5df2:	mov	r6, r0
    5df4:	mov	r4, r2
  if (m_lbn != sector) {
    5df6:	beq.n	5e18 <FatCache::read(unsigned long, unsigned char)+0x2c>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5df8:	ldrb	r3, [r0, #0]
    5dfa:	lsls	r2, r3, #31
    5dfc:	mov	r7, r1
    5dfe:	bmi.n	5e26 <FatCache::read(unsigned long, unsigned char)+0x3a>
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    5e00:	lsls	r3, r4, #29
    5e02:	bpl.n	5e32 <FatCache::read(unsigned long, unsigned char)+0x46>
    5e04:	add.w	r5, r6, #12
    5e08:	movs	r3, #0
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    5e0a:	and.w	r4, r4, #3
    5e0e:	orrs	r4, r3
    5e10:	strb	r4, [r6, #0]
    5e12:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5e14:	str	r7, [r6, #8]
  return &m_buffer;

fail:

  return nullptr;
}
    5e16:	pop	{r3, r4, r5, r6, r7, pc}
    5e18:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    5e1c:	and.w	r4, r4, #3
    5e20:	orrs	r4, r3
    5e22:	strb	r4, [r6, #0]
  return &m_buffer;

fail:

  return nullptr;
}
    5e24:	pop	{r3, r4, r5, r6, r7, pc}
    5e26:	bl	5da0 <FatCache::sync() [clone .part.8]>
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    if (!sync()) {
    5e2a:	cmp	r0, #0
    5e2c:	bne.n	5e00 <FatCache::read(unsigned long, unsigned char)+0x14>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    5e2e:	movs	r0, #0
    5e30:	pop	{r3, r4, r5, r6, r7, pc}
    5e32:	ldr	r3, [r6, #4]
    5e34:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5e36:	ldr	r3, [r0, #0]
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    5e38:	add.w	r5, r6, #12
    5e3c:	ldr	r3, [r3, #8]
    5e3e:	mov	r2, r5
    5e40:	mov	r1, r7
    5e42:	blx	r3
    5e44:	cmp	r0, #0
    5e46:	bne.n	5e08 <FatCache::read(unsigned long, unsigned char)+0x1c>
    5e48:	b.n	5e2e <FatCache::read(unsigned long, unsigned char)+0x42>
    5e4a:	nop

00005e4c <FatCache::sync()>:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5e4c:	ldrb	r3, [r0, #0]
    5e4e:	lsls	r3, r3, #31
    5e50:	bmi.n	5e56 <FatCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    5e52:	movs	r0, #1
    5e54:	bx	lr
    5e56:	b.w	5da0 <FatCache::sync() [clone .part.8]>
    5e5a:	nop

00005e5c <FatPartition::clusterStartSector(unsigned long) const>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5e5c:	ldrb	r3, [r0, #6]
    5e5e:	ldr	r0, [r0, #20]
    5e60:	subs	r1, #2
    5e62:	lsls	r1, r3
}
    5e64:	add	r0, r1
    5e66:	bx	lr

00005e68 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    5e68:	cmp	r1, #1
    5e6a:	bls.n	5ed0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
    5e6c:	ldr	r3, [r0, #28]
    5e6e:	cmp	r1, r3
    5e70:	bhi.n	5ed0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    5e72:	push	{r4, r5, r6, lr}
    5e74:	ldrb	r3, [r0, #7]
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    5e76:	cmp	r3, #32
    5e78:	mov	r6, r2
    5e7a:	mov	r5, r0
    5e7c:	mov	r4, r1
    5e7e:	beq.n	5eb2 <FatPartition::fatGet(unsigned long, unsigned long*)+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    5e80:	cmp	r3, #16
    5e82:	bne.n	5eac <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    5e84:	ldr	r3, [r0, #24]
    5e86:	ubfx	r1, r1, #8, #8
    5e8a:	add	r1, r3
    5e8c:	movs	r2, #2
    5e8e:	add.w	r0, r0, #560	; 0x230
    5e92:	bl	5dec <FatCache::read(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    5e96:	cbz	r0, 5eac <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    5e98:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    5e9a:	ldrh.w	r3, [r0, r1, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    5e9e:	ldr	r2, [r5, #28]
    5ea0:	cmp	r3, r2
    return 0;
  }
  *value = next;
  return 1;
    5ea2:	itte	ls
    5ea4:	movls	r0, #1
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
  }
  *value = next;
    5ea6:	strls	r3, [r6, #0]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    5ea8:	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
    5eaa:	pop	{r4, r5, r6, pc}
  }
  *value = next;
  return 1;

fail:
  return -1;
    5eac:	mov.w	r0, #4294967295
    5eb0:	pop	{r4, r5, r6, pc}
    5eb2:	ldr	r1, [r0, #24]
    5eb4:	movs	r2, #2
    5eb6:	add.w	r1, r1, r4, lsr #7
    5eba:	add.w	r0, r0, #560	; 0x230
    5ebe:	bl	5dec <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    5ec2:	cmp	r0, #0
    5ec4:	beq.n	5eac <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    5ec6:	and.w	r1, r4, #127	; 0x7f
    5eca:	ldr.w	r3, [r0, r1, lsl #2]
    5ece:	b.n	5e9e <FatPartition::fatGet(unsigned long, unsigned long*)+0x36>
  }
  *value = next;
  return 1;

fail:
  return -1;
    5ed0:	mov.w	r0, #4294967295
}
    5ed4:	bx	lr
    5ed6:	nop

00005ed8 <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    5ed8:	cmp	r1, #1
    5eda:	bls.n	5f18 <FatPartition::fatPut(unsigned long, unsigned long)+0x40>
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    5edc:	push	{r3, r4, r5, lr}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    5ede:	ldr	r3, [r0, #28]
    5ee0:	cmp	r1, r3
    5ee2:	bhi.n	5ef2 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    5ee4:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    5ee6:	cmp	r3, #32
    5ee8:	mov	r5, r2
    5eea:	mov	r4, r1
    5eec:	beq.n	5f1c <FatPartition::fatPut(unsigned long, unsigned long)+0x44>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    5eee:	cmp	r3, #16
    5ef0:	beq.n	5ef6 <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    5ef2:	movs	r0, #0
    5ef4:	pop	{r3, r4, r5, pc}
    5ef6:	ldr	r3, [r0, #24]
    5ef8:	ubfx	r1, r1, #8, #8
    5efc:	add	r1, r3
    5efe:	add.w	r0, r0, #560	; 0x230
    5f02:	movs	r2, #3
    5f04:	bl	5dec <FatCache::read(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    5f08:	mov	r3, r0
    5f0a:	cmp	r0, #0
    5f0c:	beq.n	5ef2 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5f0e:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    5f10:	movs	r0, #1
    5f12:	strh.w	r5, [r3, r1, lsl #1]
    goto fail;
  }

fail:
  return false;
}
    5f16:	pop	{r3, r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    5f18:	movs	r0, #0
}
    5f1a:	bx	lr
    5f1c:	ldr	r1, [r0, #24]
    5f1e:	movs	r2, #3
    5f20:	add.w	r0, r0, #560	; 0x230
    5f24:	add.w	r1, r1, r4, lsr #7
    5f28:	bl	5dec <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    5f2c:	mov	r3, r0
    5f2e:	cmp	r0, #0
    5f30:	beq.n	5ef2 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5f32:	and.w	r1, r4, #127	; 0x7f
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    5f36:	movs	r0, #1
    5f38:	str.w	r5, [r3, r1, lsl #2]
    5f3c:	pop	{r3, r4, r5, pc}
    5f3e:	nop

00005f40 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    5f40:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    5f44:	ldr	r4, [r0, #12]
    5f46:	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    5f48:	sub	sp, #8
    5f4a:	mov	r5, r0
    5f4c:	mov	r7, r1
    5f4e:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    5f50:	itte	cc
    5f52:	movcc	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    5f54:	movcc	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
    5f56:	movcs	r6, #1
    5f58:	ldr	r3, [r5, #28]
  }
  while (1) {
    find++;
    5f5a:	adds	r4, #1
    if (find > m_lastCluster) {
    5f5c:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    5f5e:	add	r2, sp, #4
    5f60:	mov	r0, r5
    5f62:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    5f64:	bls.n	5f7a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x3a>
      if (setStart) {
    5f66:	cbnz	r6, 5fb8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    5f68:	ldr	r4, [r5, #12]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    5f6a:	adds	r4, #1
    if (find > m_lastCluster) {
    5f6c:	cmp	r4, r3
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
      setStart = true;
    5f6e:	mov.w	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    5f72:	add	r2, sp, #4
    5f74:	mov	r0, r5
    5f76:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    5f78:	bhi.n	5f66 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    5f7a:	cmp	r7, r4
    5f7c:	beq.n	5fb8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    5f7e:	bl	5e68 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    5f82:	cmp	r0, #0
    5f84:	blt.n	5fb8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    5f86:	beq.n	5f58 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    5f88:	ldr	r3, [sp, #4]
    5f8a:	cmp	r3, #0
    5f8c:	bne.n	5f58 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
      break;
    }
  }
  if (setStart) {
    5f8e:	cbz	r6, 5f92 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x52>
    m_allocSearchStart = find;
    5f90:	str	r4, [r5, #12]
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    5f92:	mvn.w	r2, #4026531840	; 0xf0000000
    5f96:	mov	r1, r4
    5f98:	mov	r0, r5
    5f9a:	bl	5ed8 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    5f9e:	mov	r6, r0
    5fa0:	cbz	r0, 5fb8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    5fa2:	cbnz	r7, 5faa <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    5fa4:	str.w	r4, [r8]
  return true;
    5fa8:	b.n	5fba <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    5faa:	mov	r1, r7
    5fac:	mov	r0, r5
    5fae:	mov	r2, r4
    5fb0:	bl	5ed8 <FatPartition::fatPut(unsigned long, unsigned long)>
    5fb4:	cmp	r0, #0
    5fb6:	bne.n	5fa4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x64>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    5fb8:	movs	r6, #0
}
    5fba:	mov	r0, r6
    5fbc:	add	sp, #8
    5fbe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5fc2:	nop

00005fc4 <FatPartition::allocContiguous(unsigned long, unsigned long*)>:
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool FatPartition::allocContiguous(uint32_t count, uint32_t* firstCluster) {
    5fc4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  // start of group
  uint32_t bgnCluster;
  // end of group
  uint32_t endCluster;
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;
    5fc8:	ldr	r4, [r0, #12]

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    5fca:	ldr	r3, [r0, #28]
  // start of group
  uint32_t bgnCluster;
  // end of group
  uint32_t endCluster;
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;
    5fcc:	adds	r7, r4, #1

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    5fce:	cmp	r7, r3
fail:
  return false;
}
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool FatPartition::allocContiguous(uint32_t count, uint32_t* firstCluster) {
    5fd0:	sub	sp, #8
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    5fd2:	bhi.n	6022 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
    5fd4:	mov	sl, r2
    5fd6:	mov	r9, r1
    5fd8:	mov	r6, r0
    5fda:	adds	r4, #2
    5fdc:	mov.w	r8, #1
    5fe0:	b.n	5ff6 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x32>
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    5fe2:	subs	r2, r4, r7
    5fe4:	mov	r3, r4
    int8_t fg = fatGet(endCluster, &f);
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (f || fg == 0) {
    5fe6:	cbz	r0, 600c <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x48>
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    5fe8:	cmp	r2, r9
    5fea:	beq.n	602c <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x68>
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    5fec:	ldr	r2, [r6, #28]
    5fee:	cmp	r3, r2
    5ff0:	add.w	r4, r4, #1
    5ff4:	bhi.n	6022 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
    5ff6:	subs	r5, r4, #1
      // Can't find space.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(endCluster, &f);
    5ff8:	mov	r1, r5
    5ffa:	add	r2, sp, #4
    5ffc:	mov	r0, r6
    5ffe:	bl	5e68 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    6002:	cmp	r0, #0
    6004:	blt.n	6022 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (f || fg == 0) {
    6006:	ldr	r3, [sp, #4]
    6008:	cmp	r3, #0
    600a:	beq.n	5fe2 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x1e>
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    600c:	ldr	r2, [r6, #28]
      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    600e:	mov	r3, r4
      goto fail;
    }
    if (f || fg == 0) {
      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) {
        setStart = false;
    6010:	cmp	r7, r5
    6012:	it	ne
    6014:	movne.w	r8, #0
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    6018:	cmp	r3, r2
      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    601a:	mov	r7, r4
    601c:	add.w	r4, r4, #1
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    6020:	bls.n	5ff6 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x32>
  // return first cluster number to caller
  *firstCluster = bgnCluster;
  return true;

fail:
  return false;
    6022:	movs	r4, #0
}
    6024:	mov	r0, r4
    6026:	add	sp, #8
    6028:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      break;
    }
    endCluster++;
  }
  // Remember possible next free cluster.
  if (setStart) {
    602c:	cmp.w	r8, #0
    6030:	beq.n	6034 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x70>
    m_allocSearchStart = endCluster;
    6032:	str	r5, [r6, #12]
    6034:	mvn.w	r2, #4026531840	; 0xf0000000
    6038:	mov	r1, r5
    603a:	mov	r0, r6
    603c:	bl	5ed8 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) {
    6040:	mov	r4, r0
    6042:	cmp	r0, #0
    6044:	beq.n	6022 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // link clusters
  while (endCluster > bgnCluster) {
    6046:	cmp	r7, r5
    6048:	bcc.n	6050 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x8c>
    604a:	b.n	6066 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xa2>
    604c:	cmp	r5, r7
    604e:	bls.n	6066 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xa2>
    if (!fatPut(endCluster - 1, endCluster)) {
    6050:	add.w	r8, r5, #4294967295
    6054:	mov	r2, r5
    6056:	mov	r1, r8
    6058:	mov	r0, r6
    605a:	bl	5ed8 <FatPartition::fatPut(unsigned long, unsigned long)>
    605e:	mov	r5, r8
    6060:	cmp	r0, #0
    6062:	bne.n	604c <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x88>
    6064:	b.n	6022 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
  }
  // Maintain count of free clusters.
  updateFreeClusterCount(-count);

  // return first cluster number to caller
  *firstCluster = bgnCluster;
    6066:	str.w	r7, [sl]
  return true;
    606a:	b.n	6024 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x60>

0000606c <FatPartition::freeChain(unsigned long)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    606c:	push	{r4, r5, r6, lr}
    606e:	mov	r5, r0
    6070:	sub	sp, #8
    6072:	mov	r4, r1
    6074:	b.n	608c <FatPartition::freeChain(unsigned long)+0x20>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    6076:	bl	5ed8 <FatPartition::fatPut(unsigned long, unsigned long)>
    607a:	cbz	r0, 60a2 <FatPartition::freeChain(unsigned long)+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    607c:	ldr	r3, [r5, #12]
    607e:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    6080:	itt	cc
    6082:	addcc.w	r4, r4, #4294967295
    6086:	strcc	r4, [r5, #12]
    }
    cluster = next;
    6088:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    608a:	cbz	r6, 60a4 <FatPartition::freeChain(unsigned long)+0x38>
    fg = fatGet(cluster, &next);
    608c:	add	r2, sp, #4
    608e:	mov	r1, r4
    6090:	mov	r0, r5
    6092:	bl	5e68 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    6096:	subs	r6, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    6098:	mov	r1, r4
    609a:	mov.w	r2, #0
    609e:	mov	r0, r5
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    60a0:	bge.n	6076 <FatPartition::freeChain(unsigned long)+0xa>
  } while (fg);

  return true;

fail:
  return false;
    60a2:	movs	r0, #0
}
    60a4:	add	sp, #8
    60a6:	pop	{r4, r5, r6, pc}

000060a8 <FatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    60a8:	push	{r3, r4, r5, r6, r7, lr}
    60aa:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    60ac:	movs	r3, #0
  m_allocSearchStart = 1;
    60ae:	movs	r5, #1
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
    60b0:	mov.w	r0, #4294967295
    60b4:	str	r5, [r4, #12]
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    60b6:	str	r1, [r4, #0]
  }
  /** Initialize the cache.
   * \param[in] vol FatPartition that owns this FatCache.
   */
  void init(FatPartition *vol) {
    m_part = vol;
    60b8:	str	r4, [r4, #40]	; 0x28
    60ba:	str.w	r4, [r4, #564]	; 0x234
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    60be:	strb	r3, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    60c0:	strb.w	r3, [r4, #36]	; 0x24
    60c4:	strb.w	r3, [r4, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
    60c8:	str	r0, [r4, #44]	; 0x2c
    60ca:	str.w	r0, [r4, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    60ce:	mov	r5, r2
    60d0:	cbz	r2, 610a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    60d2:	cmp	r2, #4
    60d4:	bls.n	60da <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x32>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    60d6:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    60d8:	pop	{r3, r4, r5, r6, r7, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    60da:	add.w	r6, r4, #36	; 0x24
    60de:	mov	r2, r3
    60e0:	mov	r1, r3
    60e2:	mov	r0, r6
    60e4:	bl	5dec <FatCache::read(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;
    60e8:	add.w	r5, r5, #268435456	; 0x10000000
    60ec:	subs	r5, #1
    60ee:	lsls	r5, r5, #4
    60f0:	add.w	r3, r0, #446	; 0x1be
    60f4:	adds	r2, r3, r5

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    60f6:	cmp	r0, #0
    60f8:	beq.n	60d6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    60fa:	ldrb	r1, [r2, #4]
    60fc:	cmp	r1, #0
    60fe:	beq.n	60d6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    6100:	ldrb	r3, [r3, r5]
    6102:	lsls	r3, r3, #25
    6104:	bne.n	60d6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6106:	ldr	r5, [r2, #8]
    6108:	b.n	610e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x66>
    610a:	add.w	r6, r4, #36	; 0x24
    610e:	mov	r0, r6
    6110:	movs	r2, #0
    6112:	mov	r1, r5
    6114:	bl	5dec <FatCache::read(unsigned long, unsigned char)>
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    6118:	cmp	r0, #0
    611a:	beq.n	60d6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    611c:	ldrb	r3, [r0, #16]
    611e:	cmp	r3, #2
    6120:	bne.n	60d6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    6122:	ldrh.w	r3, [r0, #11]
    6126:	cmp.w	r3, #512	; 0x200
    612a:	bne.n	60d6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    612c:	ldrb	r6, [r0, #13]
    612e:	strb	r6, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6130:	subs	r3, r6, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    6132:	movs	r2, #0
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6134:	cmp	r6, #1
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6136:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    6138:	strb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    613a:	beq.n	615c <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb4>
    613c:	movs	r2, #1
    613e:	mov	r1, r2
    6140:	b.n	6144 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9c>
    6142:	mov	r2, r3
    6144:	lsls	r1, r1, #1
    6146:	uxtb	r1, r1
    6148:	adds	r3, r2, #1
    614a:	cmp	r6, r1
    614c:	uxtb	r3, r3
    614e:	beq.n	615a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb2>
    if (tmp == 0) {
    6150:	cmp	r3, #9
    6152:	bne.n	6142 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9a>
    6154:	strb	r2, [r4, #6]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    6156:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    6158:	pop	{r3, r4, r5, r6, r7, pc}
    615a:	strb	r2, [r4, #6]
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    615c:	ldrh	r1, [r0, #22]
    615e:	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    6160:	cbnz	r1, 6166 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xbe>
    6162:	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    6164:	str	r1, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    6166:	ldrh	r7, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6168:	ldrh.w	r3, [r0, #17]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    616c:	strh	r3, [r4, #8]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    616e:	add	r7, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6170:	lsls	r3, r3, #5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6172:	add.w	r6, r7, r1, lsl #1
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6176:	addw	r3, r3, #511	; 0x1ff
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    617a:	ldrh.w	r1, [r0, #19]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    617e:	str	r7, [r4, #24]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6180:	add.w	r3, r6, r3, asr #9

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6184:	str	r6, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    6186:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    6188:	cbnz	r1, 618c <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe4>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    618a:	ldr	r1, [r0, #32]
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    618c:	subs	r5, r5, r3
    618e:	add	r5, r1

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    6190:	lsr.w	r2, r5, r2
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    6194:	movw	r3, #4084	; 0xff4
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    6198:	adds	r1, r2, #1

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    619a:	cmp	r2, r3
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    619c:	str	r1, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    619e:	bls.n	61b6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x10e>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    61a0:	movw	r3, #65524	; 0xfff4
    61a4:	cmp	r2, r3
    61a6:	ittet	hi
    61a8:	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    61aa:	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    61ac:	movls	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    61ae:	movhi	r3, #32
    61b0:	strb	r3, [r4, #7]
  }
  return true;
    61b2:	movs	r0, #1
    61b4:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    61b6:	movs	r3, #12
    61b8:	strb	r3, [r4, #7]
    61ba:	b.n	60d6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>

000061bc <lfnGetChar(DirLfn_t*, unsigned char)>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    61bc:	cmp	r1, #4
    61be:	bls.n	61da <lfnGetChar(DirLfn_t*, unsigned char)+0x1e>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    61c0:	cmp	r1, #10
    61c2:	bls.n	61d2 <lfnGetChar(DirLfn_t*, unsigned char)+0x16>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    61c4:	cmp	r1, #12
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    61c6:	itte	ls
    61c8:	addls.w	r1, r0, r1, lsl #1
    61cc:	ldrhls	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  return 0;
    61ce:	movhi	r0, #0
}
    61d0:	bx	lr
    61d2:	add.w	r1, r0, r1, lsl #1
    61d6:	ldrh	r0, [r1, #4]
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    61d8:	bx	lr
    61da:	add.w	r1, r0, r1, lsl #1
    61de:	ldrh.w	r0, [r1, #1]
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    61e2:	bx	lr

000061e4 <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    61e4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    61e8:	ldrb	r3, [r0, #0]
    61ea:	cmp	r3, #32
    61ec:	bne.n	61f6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    61ee:	ldrb.w	r3, [r0, #1]!
    61f2:	cmp	r3, #32
    61f4:	beq.n	61ee <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    61f6:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    61f8:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    61fa:	cmp	r3, #0
    61fc:	beq.w	640e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x22a>
    6200:	cmp	r3, #47	; 0x2f
    6202:	beq.n	6264 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x80>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6204:	cmp	r3, #92	; 0x5c
    6206:	beq.n	624e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    6208:	sub.w	r4, r3, #34	; 0x22
    620c:	uxtb	r4, r4
    620e:	cmp	r4, #29
    6210:	bls.n	6254 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x70>
    6212:	ldr.w	lr, [pc, #536]	; 642c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>
    6216:	adds	r6, r0, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    6218:	movs	r4, #0
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    621a:	cmp	r3, #124	; 0x7c
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    621c:	sub.w	r5, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    6220:	mov	r7, r6
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    6222:	beq.n	624e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    6224:	cmp	r5, #94	; 0x5e
    6226:	bhi.n	624e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    6228:	ldrb.w	r3, [r6], #1
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    622c:	sub.w	r5, r3, #34	; 0x22
    6230:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    6232:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    6234:	cmp	r3, #0
    6236:	beq.w	63e0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fc>
    623a:	cmp	r3, #47	; 0x2f
    623c:	beq.n	6266 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x82>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    623e:	cmp	r3, #92	; 0x5c
    6240:	lsr.w	r7, lr, r5
    6244:	beq.n	624e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    6246:	cmp	r5, #29
    6248:	bhi.n	621a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    624a:	lsls	r7, r7, #31
    624c:	bpl.n	621a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    624e:	movs	r0, #0
    6250:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6254:	ldr	r5, [pc, #468]	; (642c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>)
    6256:	lsr.w	r4, r5, r4
    625a:	lsls	r4, r4, #31
    625c:	bpl.n	6212 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2e>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    625e:	movs	r0, #0
    6260:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    6264:	movs	r4, #0
    6266:	adds	r7, r0, r4
    6268:	mov	r6, r7
    626a:	mov	r5, r4
    626c:	movs	r3, #47	; 0x2f
    626e:	b.n	6276 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x92>
    6270:	ldrb.w	r3, [r6, #1]!
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    6274:	adds	r5, #1
    6276:	cmp	r3, #32
    6278:	beq.n	6270 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
    627a:	cmp	r3, #47	; 0x2f
    627c:	beq.n	6270 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
  *ptr = &path[end];
    627e:	add	r5, r0
    6280:	str	r5, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    6282:	cbz	r4, 6298 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb4>
    6284:	mov	r2, r7
    c = path[len - 1];
    6286:	ldrb.w	r3, [r2, #-1]!
    if (c != '.' && c != ' ') {
    628a:	cmp	r3, #46	; 0x2e
    628c:	beq.n	6294 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb0>
    628e:	cmp	r3, #32
    6290:	bne.w	63e6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x202>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    6294:	subs	r4, #1
    6296:	bne.n	6286 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa2>
    6298:	mov.w	r5, #4294967295
    629c:	mov	r3, r4
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
    629e:	str	r3, [r1, #4]
    62a0:	add.w	r6, r1, #23
    62a4:	add.w	r3, r1, #12
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    62a8:	movs	r2, #32
    62aa:	strb.w	r2, [r3, #1]!
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    62ae:	cmp	r3, r6
    62b0:	bne.n	62aa <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc6>
    62b2:	subs	r6, r0, #1
    62b4:	movs	r2, #0
    62b6:	b.n	62ba <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd6>
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    62b8:	adds	r2, #1
    62ba:	ldrb.w	r3, [r6, #1]!
    62be:	cmp	r3, #46	; 0x2e
    62c0:	beq.n	62b8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
    62c2:	cmp	r3, #32
    62c4:	beq.n	62b8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
  // Not 8.3 if leading dot or space.
  is83 = !si;
    62c6:	clz	ip, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    62ca:	adds	r6, r5, #1
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
    62cc:	mov.w	ip, ip, lsr #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    62d0:	beq.n	62ec <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    62d2:	ldrb	r7, [r0, r5]
    62d4:	cmp	r7, #46	; 0x2e
    62d6:	add.w	r6, r0, r5
    62da:	bne.n	62e6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x102>
    62dc:	b.n	62ec <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    62de:	ldrb.w	r7, [r6, #-1]!
    62e2:	cmp	r7, #46	; 0x2e
    62e4:	beq.n	62ec <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    62e6:	adds.w	r5, r5, #4294967295
    62ea:	bcs.n	62de <FatFile::parsePathName(char const*, fname_t*, char const**)+0xfa>
  for (; si < len; si++) {
    62ec:	cmp	r2, r4
    62ee:	mov.w	r9, #0
    62f2:	bge.w	6418 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x234>
    62f6:	mov	r6, r9
    62f8:	mov	sl, r9
    62fa:	movs	r7, #7
    62fc:	mov.w	r8, #8
    6300:	b.n	634e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16a>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    6302:	cmp	r3, #46	; 0x2e
    6304:	beq.n	6396 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b2>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    6306:	cmp	r3, #34	; 0x22
    6308:	beq.n	6322 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    630a:	cmp	r3, #124	; 0x7c
    630c:	beq.n	6322 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    630e:	sub.w	lr, r3, #42	; 0x2a
    6312:	cmp.w	lr, #5
    6316:	bls.n	63aa <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c6>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    6318:	sub.w	lr, r3, #58	; 0x3a
    631c:	cmp.w	lr, #5
    6320:	bhi.n	63d4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f0>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    6322:	cmp	r5, r2
    6324:	beq.n	639a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    6326:	cmp	r7, r6
    6328:	bcc.n	637e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    632a:	mov.w	ip, #0
      c = '_';
    632e:	movs	r3, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    6330:	add.w	lr, r6, #1
    6334:	add.w	fp, r1, r6
    6338:	uxtb.w	r6, lr
      if (i < 7) {
    633c:	cmp	r6, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    633e:	strb.w	r3, [fp, #13]
      if (i < 7) {
    6342:	bhi.n	6346 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
        fname->seqPos = i;
    6344:	strb	r6, [r1, #12]
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    6346:	adds	r2, #1
    6348:	cmp	r2, r4
    634a:	bge.n	635c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
    634c:	ldrb	r3, [r0, r2]
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    634e:	cmp	r3, #32
    6350:	bne.n	6302 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x11e>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    6352:	adds	r2, #1
    6354:	cmp	r2, r4
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
    6356:	mov.w	ip, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    635a:	blt.n	634c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x168>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    635c:	ldrb	r3, [r1, #13]
    635e:	cmp	r3, #32
    6360:	beq.w	624e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    6364:	cmp.w	ip, #0
    6368:	beq.n	63fa <FatFile::parsePathName(char const*, fname_t*, char const**)+0x216>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    636a:	tst.w	sl, r9
    636e:	it	ne
    6370:	movne.w	r9, #2
    6374:	strb.w	r9, [r1]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    6378:	movs	r0, #1
    637a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    637e:	cmp	r7, #10
    6380:	beq.n	63f2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    6382:	cmp	r5, r2
    6384:	blt.n	63f2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    6386:	mov	r2, r5
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    6388:	movs	r7, #10
      i = 8;    // Place for extension.
    638a:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    638c:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    6390:	mov.w	ip, #0
    6394:	b.n	6346 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    6396:	cmp	r5, r2
    6398:	bne.n	6352 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    639a:	cmp	r7, #10
    639c:	beq.n	63f2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    639e:	mov	r2, r5
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    63a0:	movs	r7, #10
      i = 8;    // Place for extension.
    63a2:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    63a4:	mov.w	r8, #16
    63a8:	b.n	6346 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    63aa:	cmp	r3, #45	; 0x2d
    63ac:	bne.n	6322 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    63ae:	sub.w	lr, r3, #33	; 0x21
    63b2:	cmp.w	lr, #93	; 0x5d
    63b6:	bhi.n	6322 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    63b8:	cmp	r5, r2
    63ba:	beq.n	639a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
    63bc:	cmp	r7, r6
    63be:	bcc.n	637e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    63c0:	sub.w	lr, r3, #97	; 0x61
    63c4:	cmp.w	lr, #25
    63c8:	bhi.n	641c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x238>
        c += 'A' - 'a';
    63ca:	subs	r3, #32
    63cc:	uxtb	r3, r3
        lc |= bit;
    63ce:	orr.w	r9, r8, r9
    63d2:	b.n	6330 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    63d4:	sub.w	lr, r3, #91	; 0x5b
    63d8:	cmp.w	lr, #2
    63dc:	bls.n	6322 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    63de:	b.n	63ae <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ca>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    63e0:	str	r7, [r2, #0]
    63e2:	adds	r7, r0, r4
    63e4:	b.n	6284 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa0>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    63e6:	cmp	r4, #255	; 0xff
    63e8:	bgt.w	624e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    63ec:	subs	r5, r4, #1
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    c = path[len - 1];
    63ee:	mov	r3, r4
    63f0:	b.n	629e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    63f2:	ldrb	r3, [r1, #13]
    63f4:	cmp	r3, #32
    63f6:	beq.w	624e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    63fa:	ldrb	r3, [r1, #12]
    63fc:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    63fe:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    6400:	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    6402:	movs	r2, #49	; 0x31
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    6404:	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    6406:	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    6408:	strb	r2, [r3, #14]
    640a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    640e:	str	r0, [r2, #0]
    6410:	mov	r4, r3
    6412:	mov.w	r5, #4294967295
    6416:	b.n	629e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    6418:	mov	sl, r9
    641a:	b.n	635c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    641c:	sub.w	lr, r3, #65	; 0x41
    6420:	cmp.w	lr, #25
        uc |= bit;
    6424:	it	ls
    6426:	orrls.w	sl, r8, sl
    642a:	b.n	6330 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    642c:	.word	0x35000101

00006430 <FatFile::lfnUniqueSfn(fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    6430:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    6434:	ldrb	r7, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    6436:	mov	r6, r1
    6438:	mov	r4, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    643a:	add.w	r5, r1, #13
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    643e:	mov.w	r8, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    6442:	mov.w	r9, #126	; 0x7e
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    6446:	ldr	r0, [r6, #4]
    6448:	ldr	r1, [r6, #8]
    644a:	add.w	r3, r8, r0
    644e:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    6450:	cbz	r0, 6464 <FatFile::lfnUniqueSfn(fname_t*)+0x34>
    6452:	add	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    6454:	ldrb.w	r2, [r1], #1
    6458:	add.w	r3, r3, r3, lsl #5
    645c:	eors	r3, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    645e:	cmp	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    6460:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    6462:	bne.n	6454 <FatFile::lfnUniqueSfn(fname_t*)+0x24>
    6464:	cmp	r7, #3
    6466:	it	cs
    6468:	movcs	r7, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    646a:	adds	r2, r7, #4
    646c:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
    646e:	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6472:	adds	r0, r6, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6474:	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6476:	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6478:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    647a:	ite	ls
    647c:	addls	r1, #48	; 0x30
    647e:	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6480:	cmp	r7, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
    6482:	mov.w	r3, r3, lsr #4
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    6486:	strb	r1, [r0, #13]
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6488:	bcc.n	646e <FatFile::lfnUniqueSfn(fname_t*)+0x3e>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    648a:	adds	r3, r6, r7
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    648c:	movs	r1, #0
    648e:	strb.w	r9, [r3, #13]
    6492:	mov	r0, r4
    6494:	bl	59c8 <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    6498:	movs	r1, #1
    649a:	mov	r0, r4
    649c:	bl	5988 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    64a0:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    64a2:	mov	r3, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    64a4:	mov	r1, r0
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    64a6:	cbz	r0, 64d4 <FatFile::lfnUniqueSfn(fname_t*)+0xa4>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    64a8:	ldrb.w	lr, [r3]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    64ac:	mov	r0, r5
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    64ae:	cmp.w	lr, #0
    64b2:	beq.n	64e0 <FatFile::lfnUniqueSfn(fname_t*)+0xb0>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    64b4:	ldrb	r3, [r3, #11]
    64b6:	lsls	r3, r3, #28
    64b8:	bmi.n	6498 <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    64ba:	bl	bfb0 <memcmp>
    64be:	cmp	r0, #0
    64c0:	bne.n	6498 <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    64c2:	add.w	r8, r8, #1
    64c6:	uxth.w	r8, r8
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    64ca:	cmp.w	r8, #100	; 0x64
    64ce:	bne.n	6446 <FatFile::lfnUniqueSfn(fname_t*)+0x16>
fail:
  return false;

done:
  return true;
}
    64d0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    64d4:	ldrb	r0, [r4, #1]
    64d6:	clz	r0, r0
    64da:	lsrs	r0, r0, #5
    64dc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

fail:
  return false;

done:
  return true;
    64e0:	movs	r0, #1
    64e2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    64e6:	nop

000064e8 <FatFile::open(FatFile*, fname_t*, int)>:
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    64e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    64ec:	ldrb	r4, [r1, #0]
    64ee:	tst.w	r4, #112	; 0x70
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    64f2:	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    64f4:	beq.n	64fa <FatFile::open(FatFile*, fname_t*, int)+0x12>
    64f6:	ldrb	r4, [r0, #0]
    64f8:	cbz	r4, 6502 <FatFile::open(FatFile*, fname_t*, int)+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
    64fa:	movs	r0, #0
}
    64fc:	add	sp, #52	; 0x34
    64fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    6502:	ldrb	r4, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;
    6504:	ldr.w	sl, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    6508:	lsls	r4, r4, #30
    650a:	bne.n	6592 <FatFile::open(FatFile*, fname_t*, int)+0xaa>
    650c:	mov.w	r8, #1
    6510:	mov	r6, r1
    6512:	mov	fp, r2
    6514:	str	r0, [sp, #36]	; 0x24
    6516:	movs	r1, #0
    6518:	mov	r0, r6
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint16_t freeIndex = 0;
    651a:	mov	r7, r1
    651c:	str	r3, [sp, #28]
    651e:	bl	59c8 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6522:	add.w	r3, fp, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    6526:	str	r7, [sp, #24]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    6528:	str	r7, [sp, #12]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    652a:	mov	r4, r7
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    652c:	mov	r9, r7
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    652e:	str	r7, [sp, #20]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6530:	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    6532:	movs	r1, #1
    6534:	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    6536:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache(true);
    6538:	bl	5988 <FatFile::readDirCache(bool)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    653c:	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache(true);
    if (!dir) {
    6540:	mov	r3, r0
    6542:	cmp	r0, #0
    6544:	beq.w	6660 <FatFile::open(FatFile*, fname_t*, int)+0x178>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    6548:	ldrb	r2, [r0, #0]
    654a:	cmp	r2, #229	; 0xe5
    654c:	beq.n	65c4 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    654e:	cmp	r2, #0
    6550:	beq.n	65c4 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    6552:	cmp	r4, r8
    6554:	it	cc
    6556:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    6558:	cmp	r2, #46	; 0x2e
    655a:	beq.n	65be <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    655c:	ldrb	r1, [r3, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    655e:	cmp	r1, #15
    6560:	beq.n	65e0 <FatFile::open(FatFile*, fname_t*, int)+0xf8>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    6562:	and.w	r1, r1, #8
    6566:	and.w	r2, r1, #255	; 0xff
    656a:	cbnz	r1, 65be <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (lfnOrd) {
    656c:	cmp.w	r9, #0
    6570:	bne.w	6838 <FatFile::open(FatFile*, fname_t*, int)+0x350>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6574:	mov	r0, r3
    6576:	movs	r2, #11
    6578:	ldr	r1, [sp, #16]
    657a:	bl	bfb0 <memcmp>
    657e:	cmp	r0, #0
    6580:	bne.n	6532 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    6582:	ldrb.w	r3, [fp]
    6586:	lsls	r0, r3, #31
    6588:	bpl.w	6860 <FatFile::open(FatFile*, fname_t*, int)+0x378>
          goto found;
        }
        fnameFound = true;
    658c:	movs	r3, #1
    658e:	str	r3, [sp, #20]
    6590:	b.n	6532 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    6592:	ldr	r5, [pc, #724]	; (6868 <FatFile::open(FatFile*, fname_t*, int)+0x380>)
    6594:	add.w	r4, sl, #12
    6598:	umull	r4, r8, r5, r4
    659c:	mov.w	r8, r8, lsr #2
    65a0:	add.w	r8, r8, #1
    65a4:	uxtb.w	r8, r8
    65a8:	b.n	6510 <FatFile::open(FatFile*, fname_t*, int)+0x28>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    65aa:	ldr	r1, [sp, #12]
    65ac:	subs	r1, #1
    65ae:	uxtb	r1, r1
    65b0:	cmp	r2, r1
    65b2:	str	r1, [sp, #12]
    65b4:	bne.n	65be <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    65b6:	ldrb	r2, [r3, #13]
    65b8:	ldr	r1, [sp, #24]
    65ba:	cmp	r1, r2
    65bc:	beq.n	65f6 <FatFile::open(FatFile*, fname_t*, int)+0x10e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    65be:	mov.w	r9, #0
    65c2:	b.n	6532 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    65c4:	cmp	r4, #0
    65c6:	it	eq
    65c8:	moveq	r7, r5
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    65ca:	cmp	r4, r8
        freeFound++;
    65cc:	itt	cc
    65ce:	addcc	r4, #1
    65d0:	uxtbcc	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    65d2:	cmp	r2, #0
    65d4:	beq.n	6668 <FatFile::open(FatFile*, fname_t*, int)+0x180>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    65d6:	cmp	r2, #229	; 0xe5
    65d8:	bne.n	6558 <FatFile::open(FatFile*, fname_t*, int)+0x70>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    65da:	mov.w	r9, #0
    65de:	b.n	6532 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    65e0:	cmp.w	r9, #0
    65e4:	bne.n	65aa <FatFile::open(FatFile*, fname_t*, int)+0xc2>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    65e6:	lsls	r5, r2, #25
    65e8:	bpl.n	6532 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    65ea:	and.w	r9, r2, #31
        checksum = ldir->checksum;
    65ee:	ldrb	r2, [r3, #13]
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    65f0:	str.w	r9, [sp, #12]
        checksum = ldir->checksum;
    65f4:	str	r2, [sp, #24]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    65f6:	ldr	r2, [sp, #12]
    65f8:	subs	r2, #1
    65fa:	add.w	r5, r2, r2, lsl #1
    65fe:	add.w	r5, r2, r5, lsl #2
      if (k >= len) {
    6602:	cmp	sl, r5
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    6604:	mov	r2, r5
      if (k >= len) {
    6606:	bls.n	65be <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    6608:	add.w	r1, r5, #13
    660c:	str.w	r9, [sp, #32]
    6610:	mov	r9, r1
    6612:	b.n	663c <FatFile::open(FatFile*, fname_t*, int)+0x154>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6614:	ldr.w	r0, [fp, #8]
    6618:	ldrb	r2, [r0, r2]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    661a:	cmp.w	ip, #25
    661e:	it	ls
    6620:	addls	r1, #32
    6622:	sub.w	r0, r2, #65	; 0x41
    6626:	it	ls
    6628:	uxtbls	r1, r1
    662a:	cmp	r0, #25
    662c:	itt	ls
    662e:	addls	r2, #32
    6630:	uxtbls	r2, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6632:	cmp	r2, r1
    6634:	bne.n	65be <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    6636:	cmp	lr, r9
    6638:	beq.n	66c0 <FatFile::open(FatFile*, fname_t*, int)+0x1d8>
    663a:	mov	r2, lr
        uint16_t u = lfnGetChar(ldir, i);
    663c:	subs	r1, r2, r5
    663e:	uxtb	r1, r1
    6640:	mov	r0, r3
    6642:	bl	61bc <lfnGetChar(DirLfn_t*, unsigned char)>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6646:	uxtb	r1, r0
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    6648:	cmp	sl, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    664a:	sub.w	ip, r1, #65	; 0x41
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    664e:	add.w	lr, r2, #1
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    6652:	beq.w	682a <FatFile::open(FatFile*, fname_t*, int)+0x342>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6656:	cmp	r0, #255	; 0xff
    6658:	bls.n	6614 <FatFile::open(FatFile*, fname_t*, int)+0x12c>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    665a:	mov.w	r9, #0
    665e:	b.n	6532 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    6660:	ldrb	r3, [r6, #1]
    6662:	cmp	r3, #0
    6664:	bne.w	64fa <FatFile::open(FatFile*, fname_t*, int)+0x12>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    6668:	ldr	r2, [sp, #28]
    666a:	mov	r3, r2
    666c:	lsls	r2, r3, #22
    666e:	bpl.w	64fa <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6672:	and.w	r3, r3, #3
    6676:	subs	r3, #1
    6678:	cmp	r3, #1
    667a:	bhi.w	64fa <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    667e:	cmp	r4, #0
    6680:	it	eq
    6682:	moveq	r7, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    6684:	cmp	r4, r8
    6686:	bcc.n	6690 <FatFile::open(FatFile*, fname_t*, int)+0x1a8>
    6688:	b.n	66c6 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    668a:	uxtb	r4, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    668c:	cmp	r8, r4
    668e:	bls.n	66c6 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    dir = dirFile->readDirCache();
    6690:	movs	r1, #0
    6692:	mov	r0, r6
    6694:	bl	5988 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    6698:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    669a:	cmp	r0, #0
    669c:	bne.n	668a <FatFile::open(FatFile*, fname_t*, int)+0x1a2>
      if (dirFile->getError()) {
    669e:	ldrb	r3, [r6, #1]
    66a0:	cbz	r3, 66ac <FatFile::open(FatFile*, fname_t*, int)+0x1c4>
    66a2:	b.n	64fa <FatFile::open(FatFile*, fname_t*, int)+0x12>
    66a4:	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    66a6:	ldrb	r3, [r3, #4]
    66a8:	cmp	r3, #1
    66aa:	bhi.n	66c6 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    66ac:	cmp	r8, r4
    66ae:	bls.n	66c6 <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    66b0:	mov	r0, r6
    66b2:	bl	5530 <FatFile::addDirCluster()>
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    66b6:	adds	r4, #16
    66b8:	uxtb	r4, r4
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    66ba:	cmp	r0, #0
    66bc:	bne.n	66a4 <FatFile::open(FatFile*, fname_t*, int)+0x1bc>
    66be:	b.n	64fa <FatFile::open(FatFile*, fname_t*, int)+0x12>
    66c0:	ldr.w	r9, [sp, #32]
    66c4:	b.n	6532 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    66c6:	ldr	r3, [sp, #20]
    66c8:	cbz	r3, 66d8 <FatFile::open(FatFile*, fname_t*, int)+0x1f0>
    if (!dirFile->lfnUniqueSfn(fname)) {
    66ca:	mov	r1, fp
    66cc:	mov	r0, r6
    66ce:	bl	6430 <FatFile::lfnUniqueSfn(fname_t*)>
    66d2:	cmp	r0, #0
    66d4:	beq.w	64fa <FatFile::open(FatFile*, fname_t*, int)+0x12>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    66d8:	lsls	r1, r7, #5
    66da:	mov	r0, r6
    66dc:	bl	59c8 <FatFile::seekSet(unsigned long)>
    66e0:	cmp	r0, #0
    66e2:	beq.w	64fa <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    66e6:	add.w	r8, r8, #4294967295
  for (order = lfnOrd ; order ; order--) {
    66ea:	ands.w	r9, r8, #255	; 0xff
    66ee:	beq.n	67a4 <FatFile::open(FatFile*, fname_t*, int)+0x2bc>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    66f0:	orr.w	r4, r9, #64	; 0x40
    66f4:	uxtb	r4, r4
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    66f6:	mov	r5, r9
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    66f8:	movs	r7, #0
    66fa:	movs	r1, #0
    66fc:	mov	r0, r6
    66fe:	bl	5988 <FatFile::readDirCache(bool)>
    if (!ldir) {
    6702:	cmp	r0, #0
    6704:	beq.w	64fa <FatFile::open(FatFile*, fname_t*, int)+0x12>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    6708:	ldr	r2, [r6, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    670a:	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    670e:	cmp	r9, r5
    6710:	orr.w	r3, r3, #1
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    6714:	mov.w	ip, #15
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6718:	ite	ne
    671a:	movne	r1, r5
    671c:	moveq	r1, r4
    671e:	strb.w	r3, [r2, #36]	; 0x24
    6722:	add.w	lr, fp, #12
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    6726:	strb.w	ip, [r0, #11]
    ldir->mustBeZero1 = 0;
    672a:	strb	r7, [r0, #12]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    672c:	strb	r1, [r0, #0]
    672e:	add.w	ip, fp, #23
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    6732:	movs	r3, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6734:	ldrb.w	r8, [lr, #1]!
    6738:	lsrs	r2, r3, #1
    673a:	orr.w	r3, r2, r3, lsl #7
    673e:	uxtab	r3, r8, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6742:	cmp	lr, ip
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6744:	uxtb	r3, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6746:	bne.n	6734 <FatFile::open(FatFile*, fname_t*, int)+0x24c>
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6748:	and.w	r1, r1, #31
    674c:	subs	r1, #1
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    674e:	strb	r3, [r0, #13]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6750:	add.w	r2, r1, r1, lsl #1
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    6754:	ldr.w	lr, [fp, #8]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    6758:	strh	r7, [r0, #26]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    675a:	add.w	r2, r1, r2, lsl #2
    675e:	adds	r0, #4
  for (uint8_t i = 0; i < 13; i++, k++) {
    6760:	movs	r3, #0
    6762:	b.n	6784 <FatFile::open(FatFile*, fname_t*, int)+0x29c>
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6764:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    6766:	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    676a:	bls.n	6796 <FatFile::open(FatFile*, fname_t*, int)+0x2ae>
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    676c:	cmp	r3, #10
    676e:	ite	ls
    6770:	strhls	r1, [r0, #0]
    6772:	strhhi	r1, [r0, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    6774:	adds	r3, #1
    6776:	uxtb	r3, r3
    6778:	cmp	r3, #13
    677a:	add.w	r2, r2, #1
    677e:	add.w	r0, r0, #2
    6782:	beq.n	679c <FatFile::open(FatFile*, fname_t*, int)+0x2b4>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    6784:	cmp	sl, r2
    6786:	bhi.n	6764 <FatFile::open(FatFile*, fname_t*, int)+0x27c>
    6788:	ite	ne
    678a:	movne.w	r1, #4294967295
    678e:	moveq	r1, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6790:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    6792:	uxth	r1, r1
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6794:	bhi.n	676c <FatFile::open(FatFile*, fname_t*, int)+0x284>
    6796:	strh.w	r1, [r0, #-3]
    679a:	b.n	6774 <FatFile::open(FatFile*, fname_t*, int)+0x28c>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    679c:	subs	r5, #1
    679e:	ands.w	r5, r5, #255	; 0xff
    67a2:	bne.n	66fa <FatFile::open(FatFile*, fname_t*, int)+0x212>
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
    67a4:	movs	r1, #0
    67a6:	mov	r0, r6
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    67a8:	ldr	r5, [r6, #20]
  dir = dirFile->readDirCache();
    67aa:	bl	5988 <FatFile::readDirCache(bool)>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    67ae:	ubfx	r5, r5, #5, #16
  dir = dirFile->readDirCache();
  if (!dir) {
    67b2:	mov	r4, r0
    67b4:	cmp	r0, #0
    67b6:	beq.w	64fa <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    67ba:	movs	r2, #32
    67bc:	movs	r1, #0
    67be:	bl	c0dc <memset>
  memcpy(dir->name, fname->sfn, 11);
    67c2:	mov	r3, fp

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // set timestamps
  if (FsDateTime::callback) {
    67c4:	ldr	r2, [pc, #164]	; (686c <FatFile::open(FatFile*, fname_t*, int)+0x384>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    67c6:	ldr.w	r1, [r3, #13]!
    67ca:	ldr	r0, [r3, #4]
    67cc:	str	r0, [r4, #4]
    67ce:	str	r1, [r4, #0]
    67d0:	ldrh	r1, [r3, #8]
    67d2:	ldrb	r3, [r3, #10]
    67d4:	strb	r3, [r4, #10]
    67d6:	strh	r1, [r4, #8]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    67d8:	ldrb.w	r3, [fp]

  // set timestamps
  if (FsDateTime::callback) {
    67dc:	ldr	r7, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    67de:	and.w	r3, r3, #24
    67e2:	strb	r3, [r4, #12]

  // set timestamps
  if (FsDateTime::callback) {
    67e4:	cbz	r7, 680a <FatFile::open(FatFile*, fname_t*, int)+0x322>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    67e6:	add.w	r2, sp, #43	; 0x2b
    67ea:	add.w	r1, sp, #46	; 0x2e
    67ee:	add	r0, sp, #44	; 0x2c
    67f0:	blx	r7
    dir->createTimeMs = ms10;
    setLe16(dir->createDate, date);
    67f2:	ldrh.w	r3, [sp, #44]	; 0x2c
    setLe16(dir->createTime, time);
    67f6:	ldrh.w	r2, [sp, #46]	; 0x2e

  // set timestamps
  if (FsDateTime::callback) {
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    dir->createTimeMs = ms10;
    67fa:	ldrb.w	r1, [sp, #43]	; 0x2b
    67fe:	strb	r1, [r4, #13]
    6800:	strh	r3, [r4, #16]
    6802:	strh	r3, [r4, #18]
    6804:	strh	r3, [r4, #24]
    6806:	strh	r2, [r4, #14]
    6808:	strh	r2, [r4, #22]
    setLe16(dir->accessDate, date);
    setLe16(dir->modifyDate, date);
    setLe16(dir->modifyTime, time);;
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    680a:	ldr	r2, [r6, #8]
    680c:	ldrb.w	r3, [r2, #36]	; 0x24
    6810:	orr.w	r3, r3, #1
    6814:	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    6818:	str.w	r9, [sp]
    681c:	ldr	r3, [sp, #28]
    681e:	ldr	r0, [sp, #36]	; 0x24
    6820:	mov	r2, r5
    6822:	mov	r1, r6
    6824:	bl	5a5c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    6828:	b.n	64fc <FatFile::open(FatFile*, fname_t*, int)+0x14>
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    682a:	cmp	r0, #0
    682c:	ldr.w	r9, [sp, #32]
    6830:	it	ne
    6832:	movne.w	r9, #0
    6836:	b.n	6532 <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    6838:	ldr	r1, [sp, #12]
    683a:	cmp	r1, #1
    683c:	bne.w	64fa <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6840:	subs	r4, r3, #1
    6842:	adds	r3, #10
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6844:	ldrb.w	r0, [r4, #1]!
    6848:	lsrs	r1, r2, #1
    684a:	orr.w	r2, r1, r2, lsl #7
    684e:	uxtab	r2, r0, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6852:	cmp	r4, r3
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6854:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6856:	bne.n	6844 <FatFile::open(FatFile*, fname_t*, int)+0x35c>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    6858:	ldr	r3, [sp, #24]
    685a:	cmp	r3, r2
    685c:	bne.w	64fa <FatFile::open(FatFile*, fname_t*, int)+0x12>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    6860:	ldr	r3, [sp, #28]
    6862:	lsls	r1, r3, #20
    6864:	bpl.n	6818 <FatFile::open(FatFile*, fname_t*, int)+0x330>
    6866:	b.n	64fa <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6868:	.word	0x4ec4ec4f
    686c:	.word	0x2001c8f8

00006870 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    6870:	push	{r4, lr}
    6872:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    6874:	ldr	r0, [r0, #56]	; 0x38
    6876:	cbz	r0, 6884 <FsBaseFile::close()+0x14>
    6878:	bl	5678 <FatFile::close()>
    687c:	cbz	r0, 6884 <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    687e:	movs	r3, #0
    6880:	str	r3, [r4, #56]	; 0x38
    return true;
    6882:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    6884:	ldr	r0, [r4, #60]	; 0x3c
    6886:	cbz	r0, 6894 <FsBaseFile::close()+0x24>
    6888:	bl	3f88 <ExFatFile::close()>
    688c:	cbz	r0, 6894 <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    688e:	movs	r3, #0
    6890:	str	r3, [r4, #60]	; 0x3c
    6892:	pop	{r4, pc}
    return true;
  }
  return false;
    6894:	movs	r0, #0
}
    6896:	pop	{r4, pc}

00006898 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    6898:	cbz	r1, 690e <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    689a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    689e:	mov	r4, r1
    68a0:	mov	r5, r0
    68a2:	mov	r8, r3
    68a4:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    68a6:	bl	6870 <FsBaseFile::close()>
  if (vol->m_fVol) {
    68aa:	ldr.w	r6, [r4, #1144]	; 0x478
    68ae:	cbz	r6, 68dc <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    m_fFile = new (m_fileMem) FatFile;
    68b0:	mov	r1, r5
    68b2:	movs	r0, #36	; 0x24
    68b4:	bl	69dc <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    68b8:	movs	r1, #0
    68ba:	strb	r1, [r0, #0]
    68bc:	strb	r1, [r0, #1]
    68be:	strb	r1, [r0, #2]
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    68c0:	ldr.w	r1, [r4, #1144]	; 0x478
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    68c4:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    68c6:	mov	r3, r8
    68c8:	mov	r2, r7
    68ca:	bl	57a8 <FatFile::open(FatVolume*, char const*, int)>
    68ce:	cbz	r0, 68d6 <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    68d0:	movs	r0, #1
    68d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    68d6:	str	r0, [r5, #56]	; 0x38
    return false;
    68d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    68dc:	ldr.w	r3, [r4, #1148]	; 0x47c
    68e0:	cbz	r3, 6912 <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    68e2:	mov	r1, r5
    68e4:	movs	r0, #56	; 0x38
    68e6:	bl	69dc <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    68ea:	strb.w	r6, [r0, #49]	; 0x31
    68ee:	strb.w	r6, [r0, #50]	; 0x32
    68f2:	strb.w	r6, [r0, #51]	; 0x33
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    68f6:	ldr.w	r1, [r4, #1148]	; 0x47c
      return true;
    }
    m_fFile = nullptr;
    return false;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    68fa:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    68fc:	mov	r3, r8
    68fe:	mov	r2, r7
    6900:	bl	482c <ExFatFile::open(ExFatVolume*, char const*, int)>
    6904:	cmp	r0, #0
    6906:	bne.n	68d0 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    6908:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    690a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    690e:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    6910:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    6912:	movs	r0, #0
    6914:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006918 <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    6918:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    691a:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    691c:	mov	r5, r0
  m_blockDev = blockDev;
    691e:	str.w	r1, [r0, #1152]	; 0x480
  m_fVol = nullptr;
    6922:	str.w	r6, [r0, #1144]	; 0x478
  m_xVol = new (m_volMem) ExFatVolume;
    6926:	mov	r1, r0
    6928:	mov.w	r0, #1144	; 0x478
    692c:	bl	69dc <operator new(unsigned int, unsigned long*)>
    6930:	mov	r4, r0
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    6932:	str	r6, [r0, #4]
    invalidate();
    6934:	bl	485c <FsCache::invalidate()>
    6938:	add.w	r0, r4, #524	; 0x20c
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    693c:	str.w	r6, [r4, #528]	; 0x210
    invalidate();
    6940:	bl	485c <FsCache::invalidate()>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() : m_fatType(0) {}
    6944:	strb.w	r6, [r4, #1084]	; 0x43c
    6948:	strb.w	r6, [r4, #1137]	; 0x471
    694c:	strb.w	r6, [r4, #1138]	; 0x472
    6950:	strb.w	r6, [r4, #1139]	; 0x473
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    6954:	ldr.w	r1, [r5, #1152]	; 0x480
    6958:	str.w	r4, [r5, #1148]	; 0x47c
    695c:	mov	r0, r4
    695e:	movs	r2, #1
    6960:	bl	49ec <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    6964:	cbnz	r0, 69a2 <FsVolume::begin(BlockDeviceInterface*)+0x8a>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    6966:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    6968:	mov	r1, r5
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    696a:	str.w	r6, [r5, #1148]	; 0x47c
  m_fVol = new (m_volMem) FatVolume;
    696e:	mov.w	r0, #1120	; 0x460
    6972:	bl	69dc <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() : m_fatType(0) {}
    6976:	strb	r6, [r0, #7]
    6978:	strb.w	r6, [r0, #1084]	; 0x43c
    697c:	strb.w	r6, [r0, #1085]	; 0x43d
    6980:	strb.w	r6, [r0, #1086]	; 0x43e
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    6984:	movs	r2, #1
    6986:	ldr.w	r1, [r5, #1152]	; 0x480
    698a:	str.w	r0, [r5, #1144]	; 0x478
    698e:	mov	r4, r0
    6990:	bl	60a8 <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    6994:	cbnz	r0, 69c0 <FsVolume::begin(BlockDeviceInterface*)+0xa8>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    6996:	ldr	r3, [pc, #64]	; (69d8 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
    6998:	movs	r0, #0
    699a:	str	r0, [r3, #0]
  m_fVol = nullptr;
    699c:	str.w	r0, [r5, #1144]	; 0x478
  return false;
    69a0:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    69a2:	add.w	r6, r4, #1088	; 0x440
    69a6:	mov	r0, r6
    69a8:	bl	3f88 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    69ac:	mov	r1, r4
    69ae:	mov	r0, r6
    69b0:	bl	3f9c <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    69b4:	cmp	r0, #0
    69b6:	beq.n	6966 <FsVolume::begin(BlockDeviceInterface*)+0x4e>

 done:
  m_cwv = this;
    69b8:	ldr	r3, [pc, #28]	; (69d8 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
  return true;
    69ba:	movs	r0, #1
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    69bc:	str	r5, [r3, #0]
  return true;
    69be:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    69c0:	addw	r6, r4, #1084	; 0x43c
    69c4:	mov	r0, r6
    69c6:	bl	5678 <FatFile::close()>
    return m_vwd.openRoot(this);
    69ca:	mov	r1, r4
    69cc:	mov	r0, r6
    69ce:	bl	57b8 <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    69d2:	cmp	r0, #0
    69d4:	bne.n	69b8 <FsVolume::begin(BlockDeviceInterface*)+0xa0>
    69d6:	b.n	6996 <FsVolume::begin(BlockDeviceInterface*)+0x7e>
    69d8:	.word	0x2001c8fc

000069dc <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    69dc:	mov	r0, r1
    69de:	bx	lr

000069e0 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    69e0:	ldrb	r0, [r0, #19]
    69e2:	bx	lr

000069e4 <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    69e4:	ldrb	r0, [r0, #21]
    69e6:	bx	lr

000069e8 <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    69e8:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    69ea:	ldr	r4, [r0, #0]
    69ec:	ldr	r4, [r4, #12]
    69ee:	movs	r3, #1
    69f0:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    69f2:	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    69f6:	bx	ip

000069f8 <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    69f8:	ldrb	r0, [r0, #22]
    69fa:	bx	lr

000069fc <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    69fc:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    69fe:	ldr	r4, [r0, #0]
    6a00:	ldr	r4, [r4, #28]
    6a02:	movs	r3, #1
    6a04:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return writeSingle(sector, src);
#endif  // ENABLE_DEDICATED_SPI
  }
    6a06:	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    6a0a:	bx	ip

00006a0c <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    6a0c:	bx	lr
    6a0e:	nop

00006a10 <SdSpiCard::~SdSpiCard()>:
    6a10:	push	{r4, lr}
    6a12:	movs	r1, #24
    6a14:	mov	r4, r0
    6a16:	bl	a1c0 <operator delete(void*, unsigned int)>
    6a1a:	mov	r0, r4
    6a1c:	pop	{r4, pc}
    6a1e:	nop

00006a20 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    6a20:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a24:	mov	r6, r1
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    6a26:	ldrb	r1, [r0, #16]
    6a28:	cmp	r1, #2
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    6a2a:	mov	r4, r0
    6a2c:	mov	r5, r2
    6a2e:	mov	r7, r3
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    6a30:	beq.n	6a42 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x22>
    if (!syncDevice()) {
    6a32:	ldr	r3, [r4, #0]
    6a34:	mov	r0, r4
    6a36:	ldr	r3, [r3, #20]
    6a38:	blx	r3
    6a3a:	cbnz	r0, 6a74 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
      return false;
    6a3c:	movs	r0, #0
    6a3e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    6a42:	ldr	r3, [r0, #12]
    6a44:	cmp	r3, r6
    6a46:	bne.n	6a32 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    6a48:	movs	r6, #0
    6a4a:	cbz	r7, 6a64 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    6a4c:	ldr	r3, [r4, #0]
    6a4e:	mov	r1, r5
    6a50:	ldr	r3, [r3, #68]	; 0x44
    6a52:	mov	r0, r4
    6a54:	blx	r3
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    6a56:	adds	r6, #1
    6a58:	add.w	r5, r5, #512	; 0x200
    if (!writeData(src)) {
    6a5c:	cmp	r0, #0
    6a5e:	beq.n	6a3c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    6a60:	cmp	r7, r6
    6a62:	bne.n	6a4c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    6a64:	ldr	r3, [r4, #12]
  return m_sharedSpi ? syncDevice() : true;
    6a66:	ldrb	r2, [r4, #17]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    6a68:	add	r7, r3
    6a6a:	str	r7, [r4, #12]
  return m_sharedSpi ? syncDevice() : true;
    6a6c:	cbnz	r2, 6a8a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6a>
    6a6e:	movs	r0, #1
    6a70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    6a74:	ldr	r3, [r4, #0]
    6a76:	mov	r1, r6
    6a78:	ldr	r3, [r3, #72]	; 0x48
    6a7a:	mov	r0, r4
    6a7c:	blx	r3
    6a7e:	cmp	r0, #0
    6a80:	beq.n	6a3c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    6a82:	movs	r3, #2
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    }
    m_curSector = sector;
    6a84:	str	r6, [r4, #12]
    m_curState = WRITE_STATE;
    6a86:	strb	r3, [r4, #16]
    6a88:	b.n	6a48 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x28>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    6a8a:	ldr	r3, [r4, #0]
    6a8c:	mov	r0, r4
    6a8e:	ldr	r3, [r3, #20]

 fail:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
    6a90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    6a94:	bx	r3
    6a96:	nop

00006a98 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    6a98:	push	{r4, lr}
    6a9a:	mov	r4, r0
  bool waitNotBusy(SdMillis_t timeoutMS);
  bool writeData(uint8_t token, const uint8_t* src);

#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
    6a9c:	adds	r0, #4
    6a9e:	bl	8048 <SdSpiArduinoDriver::activate()>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    6aa2:	ldrb	r0, [r4, #18]
    6aa4:	movs	r1, #0
    6aa6:	bl	81c8 <sdCsWrite(unsigned char, bool)>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    6aaa:	movs	r3, #1
    6aac:	strb	r3, [r4, #20]
    6aae:	pop	{r4, pc}

00006ab0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    6ab0:	push	{r3, r4, r5, lr}
    6ab2:	mov	r4, r0
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    6ab4:	movs	r1, #1
    6ab6:	ldrb	r0, [r0, #18]
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    6ab8:	adds	r5, r4, #4
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    6aba:	bl	81c8 <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    6abe:	mov	r0, r5
    6ac0:	movs	r1, #255	; 0xff
    6ac2:	bl	815c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
    6ac6:	mov	r0, r5
    6ac8:	bl	80d8 <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    6acc:	movs	r3, #0
    6ace:	strb	r3, [r4, #20]
    6ad0:	pop	{r3, r4, r5, pc}
    6ad2:	nop

00006ad4 <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    6ad4:	push	{r3, r4, r5, r6, r7, lr}
  bool rtn = true;
  bool spiActive = m_spiActive;
    6ad6:	ldrb	r7, [r0, #20]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    6ad8:	mov	r6, r0
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    6ada:	cbnz	r7, 6ae0 <SdSpiCard::isBusy()+0xc>
    6adc:	bl	6a98 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
    6ae0:	adds	r5, r6, #4
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    6ae2:	movs	r4, #8
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    6ae4:	mov	r0, r5
    6ae6:	bl	8120 <SdSpiArduinoDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    6aea:	cmp	r0, #255	; 0xff
    6aec:	add.w	r3, r4, #4294967295
    6af0:	beq.n	6b0e <SdSpiCard::isBusy()+0x3a>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    6af2:	ands.w	r4, r3, #255	; 0xff
    6af6:	bne.n	6ae4 <SdSpiCard::isBusy()+0x10>
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
  bool rtn = true;
    6af8:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    6afa:	cbnz	r7, 6b00 <SdSpiCard::isBusy()+0x2c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6afc:	ldrb	r3, [r6, #20]
    6afe:	cbnz	r3, 6b04 <SdSpiCard::isBusy()+0x30>
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    6b00:	mov	r0, r4
    6b02:	pop	{r3, r4, r5, r6, r7, pc}
    6b04:	mov	r0, r6
    6b06:	bl	6ab0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    6b0a:	mov	r0, r4
    6b0c:	pop	{r3, r4, r5, r6, r7, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    6b0e:	movs	r4, #0
    6b10:	b.n	6afa <SdSpiCard::isBusy()+0x26>
    6b12:	nop

00006b14 <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    6b14:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6b18:	ldr	r6, [pc, #116]	; (6b90 <SdSpiCard::readData(unsigned char*, unsigned int)+0x7c>)
    6b1a:	sub	sp, #12
    6b1c:	ldr	r3, [r6, #0]
    6b1e:	str	r3, [sp, #0]
	return ret;
    6b20:	ldr	r5, [sp, #0]
    6b22:	mov	r4, r0
    6b24:	mov	r8, r1
    6b26:	mov	r9, r2

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    6b28:	uxth	r5, r5
    6b2a:	adds	r7, r0, #4
    6b2c:	b.n	6b3e <SdSpiCard::readData(unsigned char*, unsigned int)+0x2a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6b2e:	ldr	r3, [r6, #0]
    6b30:	str	r3, [sp, #4]
	return ret;
    6b32:	ldr	r3, [sp, #4]
    6b34:	uxth	r3, r3
    6b36:	subs	r3, r3, r5
    6b38:	cmp.w	r3, #300	; 0x12c
    6b3c:	bgt.n	6b64 <SdSpiCard::readData(unsigned char*, unsigned int)+0x50>
    6b3e:	mov	r0, r7
    6b40:	bl	8120 <SdSpiArduinoDriver::receive()>
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    6b44:	cmp	r0, #255	; 0xff
    6b46:	strb	r0, [r4, #21]
    6b48:	beq.n	6b2e <SdSpiCard::readData(unsigned char*, unsigned int)+0x1a>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    6b4a:	cmp	r0, #254	; 0xfe
    6b4c:	beq.n	6b6a <SdSpiCard::readData(unsigned char*, unsigned int)+0x56>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6b4e:	movs	r3, #24
    6b50:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6b52:	ldrb	r0, [r4, #20]
    6b54:	cbz	r0, 6b5e <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    6b56:	mov	r0, r4
    6b58:	bl	6ab0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
  return false;
    6b5c:	movs	r0, #0
}
    6b5e:	add	sp, #12
    6b60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6b64:	movs	r3, #29
    6b66:	strb	r3, [r4, #19]
    6b68:	b.n	6b52 <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
    6b6a:	mov	r2, r9
    6b6c:	mov	r1, r8
    6b6e:	mov	r0, r7
    6b70:	bl	813c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    6b74:	strb	r0, [r4, #21]
    6b76:	cbz	r0, 6b7e <SdSpiCard::readData(unsigned char*, unsigned int)+0x6a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6b78:	movs	r3, #36	; 0x24
    6b7a:	strb	r3, [r4, #19]
    6b7c:	b.n	6b52 <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    6b7e:	mov	r0, r7
    6b80:	bl	8120 <SdSpiArduinoDriver::receive()>
    6b84:	mov	r0, r7
    6b86:	bl	8120 <SdSpiArduinoDriver::receive()>
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    6b8a:	movs	r0, #1
    6b8c:	b.n	6b5e <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    6b8e:	nop
    6b90:	.word	0x2001c95c

00006b94 <SdSpiCard::waitNotBusy(unsigned short)>:
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    6b94:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6b96:	ldr	r5, [pc, #52]	; (6bcc <SdSpiCard::waitNotBusy(unsigned short)+0x38>)
    6b98:	sub	sp, #12
    6b9a:	ldr	r3, [r5, #0]
    6b9c:	str	r3, [sp, #0]
	return ret;
    6b9e:	ldr	r4, [sp, #0]
    6ba0:	mov	r7, r1
    6ba2:	adds	r6, r0, #4
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    6ba4:	uxth	r4, r4
    6ba6:	b.n	6bb6 <SdSpiCard::waitNotBusy(unsigned short)+0x22>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6ba8:	ldr	r3, [r5, #0]
    6baa:	str	r3, [sp, #4]
	return ret;
    6bac:	ldr	r3, [sp, #4]
    6bae:	uxth	r3, r3
    6bb0:	subs	r3, r3, r4
    6bb2:	cmp	r3, r7
    6bb4:	bgt.n	6bc6 <SdSpiCard::waitNotBusy(unsigned short)+0x32>
    6bb6:	mov	r0, r6
    6bb8:	bl	8120 <SdSpiArduinoDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    6bbc:	cmp	r0, #255	; 0xff
    6bbe:	bne.n	6ba8 <SdSpiCard::waitNotBusy(unsigned short)+0x14>
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    }
  }
  return true;
    6bc0:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    6bc2:	add	sp, #12
    6bc4:	pop	{r4, r5, r6, r7, pc}
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    6bc6:	movs	r0, #0
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
    6bc8:	add	sp, #12
    6bca:	pop	{r4, r5, r6, r7, pc}
    6bcc:	.word	0x2001c95c

00006bd0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    6bd0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // select card
  if (!m_spiActive) {
    6bd4:	ldrb	r3, [r0, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    6bd6:	sub	sp, #8
    6bd8:	mov	r6, r0
    6bda:	mov	r8, r1
    6bdc:	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
    6bde:	cbnz	r3, 6be4 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x14>
    6be0:	bl	6a98 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    6be4:	cmp.w	r8, #0
    6be8:	bne.n	6c40 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x70>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    6bea:	adds	r4, r6, #4
    6bec:	mov	r0, r4
    6bee:	orr.w	r1, r8, #64	; 0x40
    6bf2:	bl	815c <SdSpiArduinoDriver::send(unsigned char)>
    6bf6:	add	r7, sp, #4
    6bf8:	add	r5, sp, #8
    6bfa:	ldrb.w	r1, [r5, #-1]!
    6bfe:	mov	r0, r4
    6c00:	bl	815c <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    6c04:	cmp	r5, r7
    6c06:	bne.n	6bfa <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2a>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    6c08:	cmp.w	r8, #0
    6c0c:	ite	eq
    6c0e:	moveq	r1, #149	; 0x95
    6c10:	movne	r1, #135	; 0x87
    6c12:	mov	r0, r4
    6c14:	bl	815c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    6c18:	mov	r0, r4
    6c1a:	bl	8120 <SdSpiArduinoDriver::receive()>
    6c1e:	movs	r5, #11
    6c20:	mov	r0, r4
    6c22:	bl	8120 <SdSpiArduinoDriver::receive()>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    6c26:	lsls	r3, r0, #24
    6c28:	strb	r0, [r6, #21]
    6c2a:	bmi.n	6c32 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  }
  return m_status;
}
    6c2c:	add	sp, #8
    6c2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6c32:	subs	r3, r5, #1

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    6c34:	ands.w	r5, r3, #255	; 0xff
    6c38:	bne.n	6c20 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
  }
  return m_status;
}
    6c3a:	add	sp, #8
    6c3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    6c40:	mov.w	r1, #300	; 0x12c
    6c44:	mov	r0, r6
    6c46:	bl	6b94 <SdSpiCard::waitNotBusy(unsigned short)>
    6c4a:	b.n	6bea <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>

00006c4c <SdSpiCard::readOCR(unsigned long*)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    6c4c:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    6c4e:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    6c50:	mov	r5, r0
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    6c52:	ldr	r3, [r3, #20]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    6c54:	mov	r6, r1
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    6c56:	blx	r3
  if (cardCommand(CMD58, 0)) {
    6c58:	mov	r0, r5
    6c5a:	movs	r2, #0
    6c5c:	movs	r1, #58	; 0x3a
    6c5e:	bl	6bd0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6c62:	cbnz	r0, 6c80 <SdSpiCard::readOCR(unsigned long*)+0x34>
    6c64:	adds	r7, r5, #4
    6c66:	adds	r4, r6, #4
    6c68:	mov	r0, r7
    6c6a:	bl	8120 <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    6c6e:	strb.w	r0, [r4, #-1]!
  syncDevice();
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    6c72:	cmp	r6, r4
    6c74:	bne.n	6c68 <SdSpiCard::readOCR(unsigned long*)+0x1c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6c76:	ldrb	r4, [r5, #20]
    6c78:	cbnz	r4, 6c96 <SdSpiCard::readOCR(unsigned long*)+0x4a>
    6c7a:	movs	r4, #1
  return true;

fail:
  spiStop();
  return false;
}
    6c7c:	mov	r0, r4
    6c7e:	pop	{r3, r4, r5, r6, r7, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6c80:	ldrb	r4, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6c82:	movs	r3, #18
    6c84:	strb	r3, [r5, #19]
    6c86:	cmp	r4, #0
    6c88:	beq.n	6c7c <SdSpiCard::readOCR(unsigned long*)+0x30>
    6c8a:	mov	r0, r5
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    6c8c:	movs	r4, #0
    6c8e:	bl	6ab0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
}
    6c92:	mov	r0, r4
    6c94:	pop	{r3, r4, r5, r6, r7, pc}
    6c96:	mov	r0, r5
    6c98:	bl	6ab0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    6c9c:	mov	r0, r4
    6c9e:	pop	{r3, r4, r5, r6, r7, pc}

00006ca0 <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    6ca0:	ldr	r3, [r0, #0]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    6ca2:	push	{r4, r5, r6, lr}
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    6ca4:	ldr	r3, [r3, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    6ca6:	mov	r4, r0
    6ca8:	mov	r5, r1
    6caa:	mov	r6, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    6cac:	blx	r3
  if (cardCommand(cmd, 0)) {
    6cae:	mov	r1, r5
    6cb0:	mov	r0, r4
    6cb2:	movs	r2, #0
    6cb4:	bl	6bd0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6cb8:	cbz	r0, 6ccc <SdSpiCard::readRegister(unsigned char, void*)+0x2c>
    6cba:	movs	r3, #27
    6cbc:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6cbe:	ldrb	r0, [r4, #20]
    6cc0:	cbz	r0, 6cca <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    6cc2:	mov	r0, r4
    6cc4:	bl	6ab0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    6cc8:	movs	r0, #0
}
    6cca:	pop	{r4, r5, r6, pc}
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    6ccc:	mov	r1, r6
    6cce:	movs	r2, #16
    6cd0:	mov	r0, r4
    6cd2:	bl	6b14 <SdSpiCard::readData(unsigned char*, unsigned int)>
    6cd6:	cmp	r0, #0
    6cd8:	beq.n	6cbe <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6cda:	ldrb	r5, [r4, #20]
    6cdc:	cmp	r5, #0
    6cde:	beq.n	6cca <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    6ce0:	mov	r0, r4
    6ce2:	bl	6ab0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    6ce6:	mov	r0, r5
    6ce8:	pop	{r4, r5, r6, pc}
    6cea:	nop

00006cec <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    6cec:	mov	r2, r1
    6cee:	movs	r1, #9
    6cf0:	b.w	6ca0 <SdSpiCard::readRegister(unsigned char, void*)>

00006cf4 <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    6cf4:	mov	r2, r1
    6cf6:	movs	r1, #10
    6cf8:	b.w	6ca0 <SdSpiCard::readRegister(unsigned char, void*)>

00006cfc <SdSpiCard::sectorCount()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    6cfc:	push	{r4, r5, lr}
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    6cfe:	ldr	r3, [r0, #0]
    6d00:	ldr	r2, [pc, #140]	; (6d90 <SdSpiCard::sectorCount()+0x94>)
    6d02:	ldr	r3, [r3, #52]	; 0x34
    6d04:	cmp	r3, r2
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    6d06:	sub	sp, #20
    6d08:	bne.n	6d6a <SdSpiCard::sectorCount()+0x6e>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    6d0a:	mov	r2, sp
    6d0c:	movs	r1, #9
    6d0e:	bl	6ca0 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    6d12:	cbz	r0, 6d24 <SdSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    6d14:	ldrb.w	r3, [sp]
    6d18:	ands.w	r3, r3, #192	; 0xc0
    6d1c:	beq.n	6d28 <SdSpiCard::sectorCount()+0x2c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    6d1e:	cmp	r3, #64	; 0x40
    6d20:	beq.n	6d70 <SdSpiCard::sectorCount()+0x74>
    6d22:	movs	r0, #0
}
    6d24:	add	sp, #20
    6d26:	pop	{r4, r5, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    6d28:	ldrb.w	r4, [sp, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    6d2c:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    6d30:	ldrb.w	r2, [sp, #7]
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    6d34:	ldrb.w	r0, [sp, #10]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    6d38:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    6d3c:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    6d40:	and.w	r4, r4, #3
    6d44:	lsls	r4, r4, #1
    6d46:	lsls	r2, r2, #2
    6d48:	and.w	r3, r3, #3
    6d4c:	orr.w	r0, r4, r0, lsr #7
    6d50:	and.w	r1, r1, #15
    6d54:	orr.w	r3, r2, r3, lsl #10
    6d58:	add	r0, r1
    6d5a:	orr.w	r3, r3, r5, lsr #6
    6d5e:	adds	r3, #1
    6d60:	subs	r0, #7
    6d62:	lsl.w	r0, r3, r0
    6d66:	add	sp, #20
    6d68:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    6d6a:	mov	r1, sp
    6d6c:	blx	r3
    6d6e:	b.n	6d12 <SdSpiCard::sectorCount()+0x16>
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    6d70:	ldrb.w	r3, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    6d74:	ldrb.w	r1, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    6d78:	ldrb.w	r0, [sp, #8]
    6d7c:	adds	r2, r3, #1
    6d7e:	and.w	r3, r1, #63	; 0x3f
    6d82:	add.w	r3, r2, r3, lsl #16
    6d86:	add.w	r0, r3, r0, lsl #8
    6d8a:	lsls	r0, r0, #10
}
    6d8c:	add	sp, #20
    6d8e:	pop	{r4, r5, pc}
    6d90:	.word	0x00006ced

00006d94 <SdSpiCard::readStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    6d94:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    6d96:	ldr	r3, [r0, #0]
    6d98:	ldr	r5, [pc, #68]	; (6de0 <SdSpiCard::readStart(unsigned long)+0x4c>)
    6d9a:	ldr	r3, [r3, #64]	; 0x40
    6d9c:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    6d9e:	sub	sp, #12
    6da0:	mov	r4, r0
    6da2:	mov	r2, r1
    6da4:	bne.n	6dd6 <SdSpiCard::readStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    6da6:	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    6da8:	cmp	r0, #3
    sector <<= 9;
    6daa:	it	ne
    6dac:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    6dae:	movs	r1, #18
    6db0:	mov	r0, r4
    6db2:	bl	6bd0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6db6:	cbz	r0, 6dd0 <SdSpiCard::readStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6db8:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6dba:	movs	r3, #12
    6dbc:	strb	r3, [r4, #19]
    6dbe:	cbnz	r0, 6dc4 <SdSpiCard::readStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    6dc0:	add	sp, #12
    6dc2:	pop	{r4, r5, pc}
    6dc4:	mov	r0, r4
    6dc6:	bl	6ab0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    6dca:	movs	r0, #0
    6dcc:	add	sp, #12
    6dce:	pop	{r4, r5, pc}
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
    6dd0:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    6dd2:	add	sp, #12
    6dd4:	pop	{r4, r5, pc}
    6dd6:	str	r1, [sp, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    6dd8:	blx	r3
    6dda:	ldr	r2, [sp, #4]
    6ddc:	b.n	6da8 <SdSpiCard::readStart(unsigned long)+0x14>
    6dde:	nop
    6de0:	.word	0x000069f9

00006de4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    6de4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6de8:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    6dea:	ldrb	r1, [r0, #16]
    6dec:	cmp	r1, #1
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    6dee:	mov	r6, r0
    6df0:	mov	r4, r2
    6df2:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    6df4:	beq.n	6e06 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!syncDevice()) {
    6df6:	ldr	r3, [r6, #0]
    6df8:	mov	r0, r6
    6dfa:	ldr	r3, [r3, #20]
    6dfc:	blx	r3
    6dfe:	cbnz	r0, 6e3a <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
      return false;
    6e00:	movs	r0, #0
    6e02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    6e06:	ldr	r3, [r0, #12]
    6e08:	cmp	r3, r5
    6e0a:	bne.n	6df6 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    6e0c:	movs	r5, #0
    6e0e:	cbz	r7, 6e2a <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readData(dst, 512)) {
    6e10:	mov	r1, r4
    6e12:	mov.w	r2, #512	; 0x200
    6e16:	mov	r0, r6
    6e18:	bl	6b14 <SdSpiCard::readData(unsigned char*, unsigned int)>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    6e1c:	adds	r5, #1
    6e1e:	add.w	r4, r4, #512	; 0x200
    if (!readData(dst, 512)) {
    6e22:	cmp	r0, #0
    6e24:	beq.n	6e00 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    6e26:	cmp	r7, r5
    6e28:	bne.n	6e10 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    6e2a:	ldr	r3, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    6e2c:	ldrb	r2, [r6, #17]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    6e2e:	add	r7, r3
    6e30:	str	r7, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    6e32:	cbnz	r2, 6e4e <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x6a>
    6e34:	movs	r0, #1
    6e36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!syncDevice()) {
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
    6e3a:	mov	r1, r5
    6e3c:	mov	r0, r6
    6e3e:	bl	6d94 <SdSpiCard::readStart(unsigned long)>
    6e42:	cmp	r0, #0
    6e44:	beq.n	6e00 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    6e46:	movs	r3, #1
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    6e48:	str	r5, [r6, #12]
    m_curState = READ_STATE;
    6e4a:	strb	r3, [r6, #16]
    6e4c:	b.n	6e0c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    6e4e:	ldr	r3, [r6, #0]
    6e50:	mov	r0, r6
    6e52:	ldr	r3, [r3, #20]
      return false;
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
    6e54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    6e58:	bx	r3
    6e5a:	nop

00006e5c <SdSpiCard::readStop()>:
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    6e5c:	push	{r3, r4, r5, lr}
  if (cardCommand(CMD12, 0)) {
    6e5e:	movs	r2, #0
    6e60:	movs	r1, #12
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    6e62:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    6e64:	bl	6bd0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6e68:	ldrb	r4, [r5, #20]
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    6e6a:	cbz	r0, 6e76 <SdSpiCard::readStop()+0x1a>
    6e6c:	movs	r3, #9
    6e6e:	strb	r3, [r5, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6e70:	cbnz	r4, 6e88 <SdSpiCard::readStop()+0x2c>
  return true;

fail:
  spiStop();
  return false;
}
    6e72:	mov	r0, r4
    6e74:	pop	{r3, r4, r5, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6e76:	cbnz	r4, 6e7e <SdSpiCard::readStop()+0x22>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    6e78:	movs	r4, #1

fail:
  spiStop();
  return false;
}
    6e7a:	mov	r0, r4
    6e7c:	pop	{r3, r4, r5, pc}
    6e7e:	mov	r0, r5
    6e80:	bl	6ab0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    6e84:	mov	r0, r4
    6e86:	pop	{r3, r4, r5, pc}
    6e88:	mov	r0, r5
    6e8a:	movs	r4, #0
    6e8c:	bl	6ab0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    6e90:	mov	r0, r4
    6e92:	pop	{r3, r4, r5, pc}

00006e94 <SdSpiCard::writeStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    6e94:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    6e96:	ldr	r3, [r0, #0]
    6e98:	ldr	r5, [pc, #68]	; (6ee0 <SdSpiCard::writeStart(unsigned long)+0x4c>)
    6e9a:	ldr	r3, [r3, #64]	; 0x40
    6e9c:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    6e9e:	sub	sp, #12
    6ea0:	mov	r4, r0
    6ea2:	mov	r2, r1
    6ea4:	bne.n	6ed6 <SdSpiCard::writeStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    6ea6:	ldrb	r0, [r0, #22]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    6ea8:	cmp	r0, #3
    sector <<= 9;
    6eaa:	it	ne
    6eac:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    6eae:	movs	r1, #25
    6eb0:	mov	r0, r4
    6eb2:	bl	6bd0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6eb6:	cbz	r0, 6ed0 <SdSpiCard::writeStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6eb8:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6eba:	movs	r3, #14
    6ebc:	strb	r3, [r4, #19]
    6ebe:	cbnz	r0, 6ec4 <SdSpiCard::writeStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    6ec0:	add	sp, #12
    6ec2:	pop	{r4, r5, pc}
    6ec4:	mov	r0, r4
    6ec6:	bl	6ab0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    6eca:	movs	r0, #0
    6ecc:	add	sp, #12
    6ece:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    6ed0:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    6ed2:	add	sp, #12
    6ed4:	pop	{r4, r5, pc}
    6ed6:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    6ed8:	blx	r3
    6eda:	ldr	r2, [sp, #4]
    6edc:	b.n	6ea8 <SdSpiCard::writeStart(unsigned long)+0x14>
    6ede:	nop
    6ee0:	.word	0x000069f9

00006ee4 <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    6ee4:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    6ee6:	ldr	r3, [r0, #0]
    6ee8:	ldr	r7, [pc, #172]	; (6f98 <SdSpiCard::erase(unsigned long, unsigned long)+0xb4>)
    6eea:	ldr	r3, [r3, #52]	; 0x34
    6eec:	cmp	r3, r7
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    6eee:	sub	sp, #20
    6ef0:	mov	r4, r0
    6ef2:	mov	r5, r1
    6ef4:	mov	r6, r2
    6ef6:	bne.n	6f54 <SdSpiCard::erase(unsigned long, unsigned long)+0x70>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    6ef8:	mov	r2, sp
    6efa:	movs	r1, #9
    6efc:	bl	6ca0 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  if (!readCSD(&csd)) {
    6f00:	cbz	r0, 6f28 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    6f02:	ldrb.w	r3, [sp, #10]
    6f06:	lsls	r2, r3, #25
    6f08:	bpl.n	6f38 <SdSpiCard::erase(unsigned long, unsigned long)+0x54>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    6f0a:	ldrb	r3, [r4, #22]
    6f0c:	cmp	r3, #3
    firstSector <<= 9;
    6f0e:	it	ne
    6f10:	lslne	r5, r5, #9
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
    6f12:	mov	r2, r5
    6f14:	mov.w	r1, #32
    6f18:	mov	r0, r4
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
    6f1a:	it	ne
    6f1c:	lslne	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    6f1e:	bl	6bd0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    6f22:	cbz	r0, 6f5a <SdSpiCard::erase(unsigned long, unsigned long)+0x76>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6f24:	movs	r3, #37	; 0x25
    6f26:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6f28:	ldrb	r0, [r4, #20]
    6f2a:	cbz	r0, 6f34 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    6f2c:	mov	r0, r4
    6f2e:	bl	6ab0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    6f32:	movs	r0, #0
}
    6f34:	add	sp, #20
    6f36:	pop	{r4, r5, r6, r7, pc}
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    6f38:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    6f3c:	ldrb.w	r1, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    6f40:	lsls	r3, r3, #1
    6f42:	adds	r2, r6, #1
    6f44:	orr.w	r3, r3, r1, lsr #7
    6f48:	orrs	r2, r5
    6f4a:	tst	r3, r2
    6f4c:	beq.n	6f0a <SdSpiCard::erase(unsigned long, unsigned long)+0x26>
    6f4e:	movs	r3, #38	; 0x26
    6f50:	strb	r3, [r4, #19]
    6f52:	b.n	6f28 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    6f54:	mov	r1, sp
    6f56:	blx	r3
    6f58:	b.n	6f00 <SdSpiCard::erase(unsigned long, unsigned long)+0x1c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    6f5a:	mov	r2, r6
    6f5c:	movs	r1, #33	; 0x21
    6f5e:	mov	r0, r4
    6f60:	bl	6bd0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6f64:	cmp	r0, #0
    6f66:	bne.n	6f24 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
      || cardCommand(CMD38, 0)) {
    6f68:	mov	r2, r0
    6f6a:	movs	r1, #38	; 0x26
    6f6c:	mov	r0, r4
    6f6e:	bl	6bd0 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6f72:	cmp	r0, #0
    6f74:	bne.n	6f24 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    6f76:	movw	r1, #10000	; 0x2710
    6f7a:	mov	r0, r4
    6f7c:	bl	6b94 <SdSpiCard::waitNotBusy(unsigned short)>
    6f80:	cbnz	r0, 6f88 <SdSpiCard::erase(unsigned long, unsigned long)+0xa4>
    6f82:	movs	r3, #39	; 0x27
    6f84:	strb	r3, [r4, #19]
    6f86:	b.n	6f28 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6f88:	ldrb	r5, [r4, #20]
    6f8a:	cmp	r5, #0
    6f8c:	beq.n	6f34 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    6f8e:	mov	r0, r4
    6f90:	bl	6ab0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;
    6f94:	mov	r0, r5
    6f96:	b.n	6f34 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    6f98:	.word	0x00006ced

00006f9c <SdSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    6f9c:	push	{r4, r5, r6, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    6f9e:	mov.w	r1, #600	; 0x258
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    6fa2:	mov	r5, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    6fa4:	bl	6b94 <SdSpiCard::waitNotBusy(unsigned short)>
    6fa8:	mov	r6, r0
    6faa:	cbnz	r0, 6fc4 <SdSpiCard::writeStop()+0x28>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6fac:	ldrb	r4, [r5, #20]
    6fae:	movs	r3, #30
    6fb0:	strb	r3, [r5, #19]
    6fb2:	cbnz	r4, 6fb8 <SdSpiCard::writeStop()+0x1c>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    6fb4:	mov	r0, r4
    6fb6:	pop	{r4, r5, r6, pc}
    6fb8:	mov	r0, r5
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    6fba:	mov	r4, r6
    6fbc:	bl	6ab0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
}
    6fc0:	mov	r0, r4
    6fc2:	pop	{r4, r5, r6, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    6fc4:	movs	r1, #253	; 0xfd
    6fc6:	adds	r0, r5, #4
    6fc8:	bl	815c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6fcc:	ldrb	r4, [r5, #20]
    6fce:	cbnz	r4, 6fd6 <SdSpiCard::writeStop()+0x3a>
    6fd0:	mov	r4, r6

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    6fd2:	mov	r0, r4
    6fd4:	pop	{r4, r5, r6, pc}
    6fd6:	mov	r0, r5
    6fd8:	bl	6ab0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    6fdc:	b.n	6fb4 <SdSpiCard::writeStop()+0x18>
    6fde:	nop

00006fe0 <SdSpiCard::syncDevice()>:
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    6fe0:	push	{r4, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    6fe2:	ldrb	r3, [r0, #16]
    6fe4:	cmp	r3, #1
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    6fe6:	mov	r4, r0
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    6fe8:	beq.n	6ff6 <SdSpiCard::syncDevice()+0x16>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    6fea:	cmp	r3, #2
    6fec:	beq.n	7002 <SdSpiCard::syncDevice()+0x22>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    6fee:	movs	r3, #0
    6ff0:	strb	r3, [r4, #16]
#endif  // ENABLE_DEDICATED_SPI
  return true;
    6ff2:	movs	r0, #1
    6ff4:	pop	{r4, pc}
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    if (!SdSpiCard::readStop()) {
    6ff6:	bl	6e5c <SdSpiCard::readStop()>
    6ffa:	cmp	r0, #0
    6ffc:	bne.n	6fee <SdSpiCard::syncDevice()+0xe>
      return false;
    6ffe:	movs	r0, #0
    7000:	pop	{r4, pc}
    }
  } else if (m_curState == WRITE_STATE) {
    if (!SdSpiCard::writeStop()) {
    7002:	bl	6f9c <SdSpiCard::writeStop()>
    7006:	cmp	r0, #0
    7008:	bne.n	6fee <SdSpiCard::syncDevice()+0xe>
    700a:	b.n	6ffe <SdSpiCard::syncDevice()+0x1e>

0000700c <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    700c:	push	{r4, r5, r6, lr}
    700e:	adds	r4, r0, #4
    7010:	mov	r6, r2
    7012:	mov	r5, r0
    7014:	mov	r0, r4
    7016:	bl	815c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver.send(buf, n);
    701a:	mov.w	r2, #512	; 0x200
    701e:	mov	r1, r6
    7020:	mov	r0, r4
    7022:	bl	8174 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    7026:	mov	r0, r4
    7028:	movs	r1, #255	; 0xff
    702a:	bl	815c <SdSpiArduinoDriver::send(unsigned char)>
    702e:	mov	r0, r4
    7030:	movs	r1, #255	; 0xff
    7032:	bl	815c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    7036:	mov	r0, r4
    7038:	bl	8120 <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    703c:	and.w	r3, r0, #31
    7040:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    7042:	strb	r0, [r5, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    7044:	beq.n	705a <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7046:	ldrb	r0, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7048:	movs	r3, #31
    704a:	strb	r3, [r5, #19]
    704c:	cbnz	r0, 7050 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

fail:
  spiStop();
  return false;
}
    704e:	pop	{r4, r5, r6, pc}
    7050:	mov	r0, r5
    7052:	bl	6ab0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  }
  return true;

fail:
  spiStop();
  return false;
    7056:	movs	r0, #0
    7058:	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    705a:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    705c:	pop	{r4, r5, r6, pc}
    705e:	nop

00007060 <SdSpiCard::writeData(unsigned char const*)>:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    7060:	push	{r3, r4, r5, lr}
    7062:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    7064:	mov.w	r1, #600	; 0x258
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    7068:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    706a:	bl	6b94 <SdSpiCard::waitNotBusy(unsigned short)>
    706e:	cbnz	r0, 7082 <SdSpiCard::writeData(unsigned char const*)+0x22>
    7070:	movs	r3, #35	; 0x23
    7072:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7074:	ldrb	r0, [r4, #20]
    7076:	cbz	r0, 7080 <SdSpiCard::writeData(unsigned char const*)+0x20>
    7078:	mov	r0, r4
    707a:	bl	6ab0 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  }
  return true;

fail:
  spiStop();
  return false;
    707e:	movs	r0, #0
}
    7080:	pop	{r3, r4, r5, pc}
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    7082:	mov	r2, r5
    7084:	movs	r1, #252	; 0xfc
    7086:	mov	r0, r4
    7088:	bl	700c <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    708c:	cmp	r0, #0
    708e:	beq.n	7074 <SdSpiCard::writeData(unsigned char const*)+0x14>
  return true;

fail:
  spiStop();
  return false;
}
    7090:	pop	{r3, r4, r5, pc}
    7092:	nop

00007094 <sdIrs()>:
#endif  // USE_DEBUG_MODE
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
    7094:	push	{r4}
  SDHC_IRQSIGEN = 0;
    7096:	ldr	r4, [pc, #28]	; (70b4 <sdIrs()+0x20>)
  m_irqstat = SDHC_IRQSTAT;
    7098:	ldr	r2, [pc, #28]	; (70b8 <sdIrs()+0x24>)
    709a:	ldr	r1, [pc, #32]	; (70bc <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    709c:	ldr	r0, [pc, #32]	; (70c0 <sdIrs()+0x2c>)
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    709e:	movs	r3, #0
    70a0:	str	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    70a2:	ldr	r4, [r2, #0]
    70a4:	str	r4, [r1, #0]
  SDHC_IRQSTAT = m_irqstat;
    70a6:	ldr	r1, [r1, #0]
    70a8:	str	r1, [r2, #0]
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
}
    70aa:	ldr.w	r4, [sp], #4
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    70ae:	strb	r3, [r0, #0]
}
    70b0:	bx	lr
    70b2:	nop
    70b4:	.word	0x400b1038
    70b8:	.word	0x400b1030
    70bc:	.word	0x2001c924
    70c0:	.word	0x2001c93c

000070c4 <isBusyCommandComplete()>:
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    70c4:	ldr	r3, [pc, #12]	; (70d4 <isBusyCommandComplete()+0x10>)
    70c6:	ldr	r0, [pc, #16]	; (70d8 <isBusyCommandComplete()+0x14>)
    70c8:	ldr	r3, [r3, #0]
    70ca:	ands	r0, r3
}
    70cc:	clz	r0, r0
    70d0:	lsrs	r0, r0, #5
    70d2:	bx	lr
    70d4:	.word	0x400b1030
    70d8:	.word	0x000f0001

000070dc <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    70dc:	ldr	r3, [pc, #8]	; (70e8 <isBusyCommandInhibit()+0xc>)
    70de:	ldr	r0, [r3, #0]
}
    70e0:	and.w	r0, r0, #1
    70e4:	bx	lr
    70e6:	nop
    70e8:	.word	0x400b1024

000070ec <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    70ec:	ldr	r3, [pc, #4]	; (70f4 <isBusyDMA()+0x8>)
    70ee:	ldrb	r0, [r3, #0]
}
    70f0:	bx	lr
    70f2:	nop
    70f4:	.word	0x2001c93c

000070f8 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    70f8:	ldr	r3, [pc, #12]	; (7108 <isBusyFifoRead()+0x10>)
    70fa:	ldr	r0, [r3, #0]
    70fc:	eor.w	r0, r0, #2048	; 0x800
}
    7100:	ubfx	r0, r0, #11, #1
    7104:	bx	lr
    7106:	nop
    7108:	.word	0x400b1024

0000710c <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    710c:	ldr	r3, [pc, #12]	; (711c <isBusyFifoWrite()+0x10>)
    710e:	ldr	r0, [r3, #0]
    7110:	eor.w	r0, r0, #1024	; 0x400
}
    7114:	ubfx	r0, r0, #10, #1
    7118:	bx	lr
    711a:	nop
    711c:	.word	0x400b1024

00007120 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    7120:	ldr	r3, [pc, #12]	; (7130 <isBusyTransferComplete()+0x10>)
    7122:	ldr	r0, [pc, #16]	; (7134 <isBusyTransferComplete()+0x14>)
    7124:	ldr	r3, [r3, #0]
    7126:	ands	r0, r3
}
    7128:	clz	r0, r0
    712c:	lsrs	r0, r0, #5
    712e:	bx	lr
    7130:	.word	0x400b1030
    7134:	.word	0x117f0002

00007138 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    7138:	mov.w	r2, #1000	; 0x3e8
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    713c:	ldr	r3, [pc, #176]	; (71f0 <setSdclk(unsigned long)+0xb8>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    713e:	mul.w	r0, r2, r0
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7142:	cmp	r0, r3
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    7144:	push	{r4, r5, r6, r7}
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7146:	bhi.n	71e0 <setSdclk(unsigned long)+0xa8>
    7148:	ldr	r5, [pc, #168]	; (71f4 <setSdclk(unsigned long)+0xbc>)
    714a:	movs	r2, #8
    714c:	movs	r1, #1
    sdclkfs <<= 1;
    714e:	lsls	r1, r1, #1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7150:	lsls	r3, r1, #4
    7152:	udiv	r3, r5, r3
    7156:	cmp	r0, r3
    7158:	ldr	r4, [pc, #152]	; (71f4 <setSdclk(unsigned long)+0xbc>)
    715a:	bcs.n	71d8 <setSdclk(unsigned long)+0xa0>
    715c:	subs	r2, #1
    715e:	bne.n	714e <setSdclk(unsigned long)+0x16>
    7160:	udiv	r4, r4, r1
    7164:	lsrs	r3, r1, #1
    7166:	lsls	r7, r3, #8
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    7168:	cmp	r0, r4
    716a:	bcs.n	71e8 <setSdclk(unsigned long)+0xb0>
    716c:	ldr	r6, [pc, #132]	; (71f4 <setSdclk(unsigned long)+0xbc>)
    716e:	lsls	r3, r1, #1
    7170:	movs	r2, #1
    7172:	b.n	7176 <setSdclk(unsigned long)+0x3e>
    7174:	mov	r3, r4
    7176:	udiv	r4, r6, r3
    717a:	cmp	r0, r4
    dvs++;
    717c:	add.w	r5, r2, #1
    7180:	add.w	r4, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    7184:	bcs.n	71d4 <setSdclk(unsigned long)+0x9c>
    7186:	cmp	r5, #16
    7188:	mov	r2, r5
    718a:	bne.n	7174 <setSdclk(unsigned long)+0x3c>
    718c:	movs	r2, #240	; 0xf0
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    718e:	ldr	r6, [pc, #104]	; (71f8 <setSdclk(unsigned long)+0xc0>)
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    7190:	ldr	r4, [pc, #104]	; (71fc <setSdclk(unsigned long)+0xc4>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    7192:	ldr	r0, [pc, #96]	; (71f4 <setSdclk(unsigned long)+0xbc>)

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    7194:	ldr	r1, [pc, #104]	; (7200 <setSdclk(unsigned long)+0xc8>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    7196:	mov.w	r5, #1000	; 0x3e8
    719a:	mul.w	r3, r5, r3
    719e:	udiv	r3, r0, r3
    71a2:	str	r3, [r6, #0]
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    71a4:	ldr	r3, [r4, #0]
    71a6:	bic.w	r3, r3, #8
    71aa:	str	r3, [r4, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    71ac:	ldr	r0, [r4, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    71ae:	bic.w	r3, r0, #1044480	; 0xff000
    71b2:	bic.w	r3, r3, #4080	; 0xff0
    71b6:	orr.w	r3, r3, #917504	; 0xe0000
    71ba:	orrs	r3, r7
    71bc:	orrs	r2, r3
    71be:	str	r2, [r4, #0]

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    71c0:	ldr	r3, [r1, #0]
    71c2:	lsls	r3, r3, #28
    71c4:	bpl.n	71c0 <setSdclk(unsigned long)+0x88>
  }

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    71c6:	ldr	r2, [pc, #52]	; (71fc <setSdclk(unsigned long)+0xc4>)
    71c8:	ldr	r3, [r2, #0]
    71ca:	orr.w	r3, r3, #8
    71ce:	str	r3, [r2, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    71d0:	pop	{r4, r5, r6, r7}
    71d2:	bx	lr
    71d4:	lsls	r2, r2, #4
    71d6:	b.n	718e <setSdclk(unsigned long)+0x56>
    71d8:	udiv	r4, r4, r1
    71dc:	lsls	r7, r1, #7
    71de:	b.n	7168 <setSdclk(unsigned long)+0x30>
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    71e0:	ldr	r4, [pc, #16]	; (71f4 <setSdclk(unsigned long)+0xbc>)
    71e2:	movs	r7, #0
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    71e4:	movs	r1, #1
    71e6:	b.n	7168 <setSdclk(unsigned long)+0x30>
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    71e8:	mov	r3, r1
    71ea:	movs	r2, #0
    71ec:	b.n	718e <setSdclk(unsigned long)+0x56>
    71ee:	nop
    71f0:	.word	0x005b8d7f
    71f4:	.word	0x05b8d800
    71f8:	.word	0x2001c940
    71fc:	.word	0x400b102c
    7200:	.word	0x400b1024

00007204 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    7204:	ldr	r3, [pc, #4]	; (720c <SdioCard::errorCode() const+0x8>)
}
    7206:	ldrb	r0, [r3, #0]
    7208:	bx	lr
    720a:	nop
    720c:	.word	0x20016f18

00007210 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    7210:	ldr	r3, [pc, #4]	; (7218 <SdioCard::errorData() const+0x8>)
    7212:	ldr	r0, [r3, #0]
}
    7214:	bx	lr
    7216:	nop
    7218:	.word	0x2001c924

0000721c <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    721c:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    721e:	ldr	r4, [pc, #20]	; (7234 <SdioCard::readCID(CID*)+0x18>)
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    7220:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    7222:	ldmia	r4!, {r0, r1, r2, r3}
    7224:	str	r0, [r5, #0]
    7226:	str	r1, [r5, #4]
    7228:	str	r2, [r5, #8]
    722a:	str	r3, [r5, #12]
  return true;
}
    722c:	movs	r0, #1
    722e:	pop	{r4, r5}
    7230:	bx	lr
    7232:	nop
    7234:	.word	0x2001c904

00007238 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    7238:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    723a:	ldr	r4, [pc, #20]	; (7250 <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    723c:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    723e:	ldmia	r4!, {r0, r1, r2, r3}
    7240:	str	r0, [r5, #0]
    7242:	str	r1, [r5, #4]
    7244:	str	r2, [r5, #8]
    7246:	str	r3, [r5, #12]
  return true;
}
    7248:	movs	r0, #1
    724a:	pop	{r4, r5}
    724c:	bx	lr
    724e:	nop
    7250:	.word	0x2001c92c

00007254 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    7254:	ldr	r3, [pc, #8]	; (7260 <SdioCard::readOCR(unsigned long*)+0xc>)
    7256:	ldr	r3, [r3, #0]
    7258:	str	r3, [r1, #0]
  return true;
}
    725a:	movs	r0, #1
    725c:	bx	lr
    725e:	nop
    7260:	.word	0x2001c91c

00007264 <SdioCard::~SdioCard()>:
    7264:	bx	lr
    7266:	nop

00007268 <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    7268:	push	{r3, r4, r5, r6, r7, lr}
    726a:	mov	r5, r0
  uint32_t m = micros();
    726c:	bl	8870 <micros>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7270:	ldr	r7, [pc, #24]	; (728c <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    7272:	mov	r6, r0
    7274:	b.n	7280 <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7276:	bl	8870 <micros>
    727a:	subs	r0, r0, r6
    727c:	cmp	r0, r7
    727e:	bhi.n	7288 <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    7280:	blx	r5
    7282:	mov	r4, r0
    7284:	cmp	r0, #0
    7286:	bne.n	7276 <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    7288:	mov	r0, r4
    728a:	pop	{r3, r4, r5, r6, r7, pc}
    728c:	.word	0x000f4240

00007290 <yieldTimeout(bool (*)())>:
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    7290:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    7294:	ldr.w	r8, [pc, #64]	; 72d8 <yieldTimeout(bool (*)())+0x48>
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7298:	ldr	r7, [pc, #56]	; (72d4 <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    729a:	str.w	r0, [r8]
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    729e:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
    72a0:	bl	8870 <micros>
    72a4:	mov	r6, r0
    72a6:	b.n	72b6 <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    72a8:	bl	8870 <micros>
    72ac:	subs	r0, r0, r6
    72ae:	cmp	r0, r7
    72b0:	bhi.n	72c8 <yieldTimeout(bool (*)())+0x38>
    72b2:	bl	9b98 <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    72b6:	blx	r5
    72b8:	mov	r4, r0
    72ba:	cmp	r0, #0
    72bc:	bne.n	72a8 <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    72be:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    72c2:	mov	r0, r4
    72c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    72c8:	movs	r3, #0
    72ca:	str.w	r3, [r8]
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    72ce:	mov	r0, r4
    72d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72d4:	.word	0x000f4240
    72d8:	.word	0x2001c914

000072dc <SdioCard::~SdioCard()>:
    72dc:	push	{r4, lr}
    72de:	movs	r1, #12
    72e0:	mov	r4, r0
    72e2:	bl	a1c0 <operator delete(void*, unsigned int)>
    72e6:	mov	r0, r4
    72e8:	pop	{r4, pc}
    72ea:	nop

000072ec <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    72ec:	ldr	r3, [pc, #20]	; (7304 <SdioCard::type() const+0x18>)
    72ee:	ldrb	r3, [r3, #0]
    72f0:	cbz	r3, 7300 <SdioCard::type() const+0x14>
    72f2:	ldr	r3, [pc, #20]	; (7308 <SdioCard::type() const+0x1c>)
    72f4:	ldrb	r3, [r3, #0]
    72f6:	cmp	r3, #0
    72f8:	ite	ne
    72fa:	movne	r0, #3
    72fc:	moveq	r0, #2
    72fe:	bx	lr
    7300:	movs	r0, #1
}
    7302:	bx	lr
    7304:	.word	0x2001c900
    7308:	.word	0x2001c918

0000730c <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    730c:	push	{r3, r4, r5, lr}
    730e:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    7310:	ldr	r0, [pc, #60]	; (7350 <cardCommand(unsigned long, unsigned long)+0x44>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    7312:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    7314:	bl	7268 <waitTimeout(bool (*)())>
    7318:	cbz	r0, 731e <cardCommand(unsigned long, unsigned long)+0x12>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    731a:	movs	r0, #0
    731c:	pop	{r3, r4, r5, pc}
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    731e:	ldr	r2, [pc, #52]	; (7354 <cardCommand(unsigned long, unsigned long)+0x48>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    7320:	ldr	r3, [pc, #52]	; (7358 <cardCommand(unsigned long, unsigned long)+0x4c>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    7322:	str	r5, [r2, #0]
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
  if (waitTimeout(isBusyCommandComplete)) {
    7324:	ldr	r0, [pc, #52]	; (735c <cardCommand(unsigned long, unsigned long)+0x50>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    7326:	str	r4, [r3, #0]
  if (waitTimeout(isBusyCommandComplete)) {
    7328:	bl	7268 <waitTimeout(bool (*)())>
    732c:	cmp	r0, #0
    732e:	bne.n	731a <cardCommand(unsigned long, unsigned long)+0xe>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    7330:	ldr	r2, [pc, #44]	; (7360 <cardCommand(unsigned long, unsigned long)+0x54>)
    7332:	ldr	r3, [pc, #48]	; (7364 <cardCommand(unsigned long, unsigned long)+0x58>)
    7334:	ldr	r1, [r2, #0]
    7336:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    7338:	ldr	r1, [r3, #0]
    733a:	str	r1, [r2, #0]

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    733c:	ldr	r2, [r3, #0]
    733e:	lsls	r2, r2, #31
    7340:	bpl.n	731a <cardCommand(unsigned long, unsigned long)+0xe>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    7342:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    7344:	tst.w	r3, #983040	; 0xf0000
    7348:	bne.n	731a <cardCommand(unsigned long, unsigned long)+0xe>
    734a:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    734c:	pop	{r3, r4, r5, pc}
    734e:	nop
    7350:	.word	0x000070dd
    7354:	.word	0x400b1008
    7358:	.word	0x400b100c
    735c:	.word	0x000070c5
    7360:	.word	0x400b1030
    7364:	.word	0x2001c924

00007368 <SdioCard::status()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
    7368:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    736a:	ldr	r3, [pc, #16]	; (737c <SdioCard::status()+0x14>)
    736c:	ldr	r0, [pc, #16]	; (7380 <SdioCard::status()+0x18>)
    736e:	ldr	r1, [r3, #0]
    7370:	bl	730c <cardCommand(unsigned long, unsigned long)>
    7374:	cbz	r0, 737a <SdioCard::status()+0x12>
    7376:	ldr	r3, [pc, #12]	; (7384 <SdioCard::status()+0x1c>)
    7378:	ldr	r0, [r3, #0]
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    737a:	pop	{r3, pc}
    737c:	.word	0x2001c920
    7380:	.word	0x0d1a0000
    7384:	.word	0x400b1010

00007388 <readReg16(unsigned long, void*)>:
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    7388:	push	{r4, r5, lr}
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    738a:	ldr	r3, [pc, #84]	; (73e0 <readReg16(unsigned long, void*)+0x58>)
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    738c:	sub	sp, #20
    738e:	mov	r5, r1
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    7390:	ldr	r1, [r3, #0]
    7392:	bl	730c <cardCommand(unsigned long, unsigned long)>
    7396:	cbz	r0, 73da <readReg16(unsigned long, void*)+0x52>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    7398:	ldr	r2, [pc, #72]	; (73e4 <readReg16(unsigned long, void*)+0x5c>)
    739a:	ldr	r3, [pc, #76]	; (73e8 <readReg16(unsigned long, void*)+0x60>)
    739c:	ldr	r2, [r2, #0]
    739e:	str	r2, [sp, #0]
    73a0:	ldr	r1, [r3, #0]
    73a2:	str	r1, [sp, #4]
    73a4:	ldr	r1, [r3, #4]
    73a6:	str	r1, [sp, #8]
    73a8:	adds	r3, #8
    73aa:	add.w	r4, r5, #15
    73ae:	ldr	r3, [r3, #0]
    73b0:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    73b2:	movs	r3, #0
    73b4:	b.n	73ba <readReg16(unsigned long, void*)+0x32>
    73b6:	ldr.w	r2, [r1, #-16]
    d[14 - i] = sr[i/4] >> 8*(i%4);
    73ba:	and.w	r1, r3, #3
    73be:	lsls	r1, r1, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    73c0:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    73c2:	lsrs	r2, r1
    73c4:	add.w	lr, sp, #16
    73c8:	bic.w	r1, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    73cc:	cmp	r3, #15
    73ce:	add	r1, lr
    d[14 - i] = sr[i/4] >> 8*(i%4);
    73d0:	strb.w	r2, [r4, #-1]!
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    73d4:	bne.n	73b6 <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    73d6:	movs	r3, #0
    73d8:	strb	r3, [r5, #15]
  return true;
}
    73da:	add	sp, #20
    73dc:	pop	{r4, r5, pc}
    73de:	nop
    73e0:	.word	0x2001c920
    73e4:	.word	0x400b1010
    73e8:	.word	0x400b1014

000073ec <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    73ec:	push	{r3, lr}
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    73ee:	ldr	r3, [pc, #28]	; (740c <isBusyCMD13()+0x20>)
    73f0:	ldr	r0, [pc, #28]	; (7410 <isBusyCMD13()+0x24>)
    73f2:	ldr	r1, [r3, #0]
    73f4:	bl	730c <cardCommand(unsigned long, unsigned long)>
    73f8:	cbz	r0, 7408 <isBusyCMD13()+0x1c>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    73fa:	ldr	r3, [pc, #24]	; (7414 <isBusyCMD13()+0x28>)
    73fc:	ldr	r0, [r3, #0]
    73fe:	eor.w	r0, r0, #256	; 0x100
    7402:	ubfx	r0, r0, #8, #1
    7406:	pop	{r3, pc}
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
    7408:	movs	r0, #1
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
    740a:	pop	{r3, pc}
    740c:	.word	0x2001c920
    7410:	.word	0x0d1a0000
    7414:	.word	0x400b1010

00007418 <SdioCard::isBusy()>:
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    7418:	ldr	r3, [pc, #16]	; (742c <SdioCard::isBusy()+0x14>)
    741a:	ldr	r3, [r3, #0]
    741c:	cbz	r3, 7420 <SdioCard::isBusy()+0x8>
    741e:	bx	r3
    7420:	ldr	r3, [pc, #12]	; (7430 <SdioCard::isBusy()+0x18>)
    7422:	ldrb	r0, [r3, #0]
    7424:	cbnz	r0, 7428 <SdioCard::isBusy()+0x10>
}
    7426:	bx	lr
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    7428:	b.w	73ec <isBusyCMD13()>
    742c:	.word	0x2001c914
    7430:	.word	0x2001c928

00007434 <waitDmaStatus() [clone .part.6]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    7434:	ldr	r3, [pc, #20]	; (744c <waitDmaStatus() [clone .part.6]+0x18>)
    7436:	ldr	r0, [r3, #0]
    7438:	ands.w	r0, r0, #2
    743c:	beq.n	744a <waitDmaStatus() [clone .part.6]+0x16>
    743e:	ldr	r3, [r3, #0]
    7440:	ldr	r0, [pc, #12]	; (7450 <waitDmaStatus() [clone .part.6]+0x1c>)
    7442:	ands	r0, r3
    7444:	clz	r0, r0
    7448:	lsrs	r0, r0, #5
}
    744a:	bx	lr
    744c:	.word	0x2001c924
    7450:	.word	0x117f0000

00007454 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    7454:	push	{r3, r4, r5, r6, r7, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    7456:	lsls	r4, r2, #30
    7458:	bne.n	745c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8>
    745a:	cbnz	r3, 746e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    745c:	ldr	r1, [pc, #124]	; (74dc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    745e:	ldr	r3, [pc, #128]	; (74e0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7460:	movs	r0, #36	; 0x24
  m_errorLine = line;
    7462:	mov.w	r2, #470	; 0x1d6
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7466:	strb	r0, [r1, #0]
  m_errorLine = line;
    7468:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    746a:	movs	r0, #0
    746c:	pop	{r3, r4, r5, r6, r7, pc}
    746e:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    7470:	ldr	r0, [pc, #112]	; (74e4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    7472:	mov	r4, r3
    7474:	mov	r7, r1
    7476:	mov	r5, r2
    7478:	bl	7290 <yieldTimeout(bool (*)())>
    747c:	cbnz	r0, 74c6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x72>
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    747e:	ldr	r1, [pc, #104]	; (74e8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    7480:	ldr	r2, [pc, #104]	; (74ec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    7482:	ldr.w	lr, [pc, #128]	; 7504 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb0>
    7486:	mov.w	ip, #1
    748a:	strb.w	ip, [lr]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    748e:	lsls	r3, r4, #16
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    7490:	str	r0, [r1, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    7492:	ldr	r4, [pc, #92]	; (74f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    7494:	str	r5, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    7496:	ldr	r2, [pc, #92]	; (74f4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7498:	ldr	r1, [pc, #92]	; (74f8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
    749a:	ldr	r0, [pc, #96]	; (74fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    749c:	orr.w	r3, r3, #512	; 0x200
    74a0:	str	r3, [r4, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    74a2:	ldrb	r3, [r2, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    74a4:	str	r0, [r1, #0]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    74a6:	cbnz	r3, 74d6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x82>
    74a8:	lsls	r1, r7, #9
    74aa:	mov	r0, r6
    74ac:	bl	730c <cardCommand(unsigned long, unsigned long)>
    74b0:	cmp	r0, #0
    74b2:	beq.n	746a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    74b4:	ldr	r0, [pc, #72]	; (7500 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
    74b6:	bl	7290 <yieldTimeout(bool (*)())>
    74ba:	cmp	r0, #0
    74bc:	bne.n	746a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    74be:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    74c2:	b.w	7434 <waitDmaStatus() [clone .part.6]>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    74c6:	ldr	r1, [pc, #20]	; (74dc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    74c8:	ldr	r3, [pc, #20]	; (74e0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    74ca:	movs	r0, #10
  m_errorLine = line;
    74cc:	movw	r2, #473	; 0x1d9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    74d0:	strb	r0, [r1, #0]
  m_errorLine = line;
    74d2:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    74d4:	b.n	746a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    74d6:	mov	r1, r7
    74d8:	b.n	74aa <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    74da:	nop
    74dc:	.word	0x20016f18
    74e0:	.word	0x2001c944
    74e4:	.word	0x000073ed
    74e8:	.word	0x2001c924
    74ec:	.word	0x400b1000
    74f0:	.word	0x400b1004
    74f4:	.word	0x2001c918
    74f8:	.word	0x400b1038
    74fc:	.word	0x117f0002
    7500:	.word	0x000070ed
    7504:	.word	0x2001c93c

00007508 <SdioCard::sectorCount()>:
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    7508:	push	{r4, r5, r6}
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    750a:	ldr	r1, [pc, #100]	; (7570 <SdioCard::sectorCount()+0x68>)
    750c:	ldrb	r3, [r1, #0]
    750e:	ands.w	r3, r3, #192	; 0xc0
    7512:	beq.n	7538 <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    7514:	cmp	r3, #64	; 0x40
    7516:	beq.n	751e <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    7518:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    751a:	pop	{r4, r5, r6}
    751c:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    751e:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    7520:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7522:	ldrb	r0, [r1, #8]
    7524:	adds	r2, r3, #1
    7526:	and.w	r3, r4, #63	; 0x3f
    752a:	add.w	r3, r2, r3, lsl #16
    752e:	add.w	r0, r3, r0, lsl #8
    7532:	lsls	r0, r0, #10
    7534:	pop	{r4, r5, r6}
    7536:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    7538:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    753a:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    753c:	ldrb	r2, [r1, #7]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    753e:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    7540:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    7542:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7544:	and.w	r1, r5, #3
    7548:	lsls	r1, r1, #1
    754a:	and.w	r3, r3, #3
    754e:	lsls	r2, r2, #2
    7550:	orr.w	r0, r1, r0, lsr #7
    7554:	orr.w	r3, r2, r3, lsl #10
    7558:	and.w	r1, r4, #15
    755c:	orr.w	r3, r3, r6, lsr #6
    7560:	add	r0, r1
    7562:	subs	r0, #7
    7564:	adds	r3, #1
    7566:	lsl.w	r0, r3, r0
    756a:	pop	{r4, r5, r6}
    756c:	bx	lr
    756e:	nop
    7570:	.word	0x2001c92c

00007574 <SdioCard::erase(unsigned long, unsigned long)>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    7574:	push	{r4, r5, r6, lr}
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    7576:	ldr	r6, [pc, #176]	; (7628 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    7578:	ldrb	r3, [r6, #10]
    757a:	and.w	r0, r3, #64	; 0x40
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    757e:	mov	r5, r2
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    7580:	cbnz	r0, 759a <SdioCard::erase(unsigned long, unsigned long)+0x26>
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7582:	and.w	r3, r3, #63	; 0x3f
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    7586:	ldrb	r2, [r6, #11]
    7588:	and.w	r4, r0, #255	; 0xff
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    758c:	lsls	r3, r3, #1
    758e:	adds	r0, r5, #1
    7590:	orr.w	r3, r3, r2, lsr #7
    7594:	orrs	r0, r1
    7596:	tst	r3, r0
    7598:	bne.n	75de <SdioCard::erase(unsigned long, unsigned long)+0x6a>
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    759a:	ldr	r3, [pc, #144]	; (762c <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    759c:	ldrb	r3, [r3, #0]
    759e:	cbnz	r3, 75a4 <SdioCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    75a0:	lsls	r1, r1, #9
    lastSector <<= 9;
    75a2:	lsls	r5, r5, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    75a4:	ldr	r0, [pc, #136]	; (7630 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    75a6:	bl	730c <cardCommand(unsigned long, unsigned long)>
    75aa:	mov	r4, r0
    75ac:	cbnz	r0, 75c0 <SdioCard::erase(unsigned long, unsigned long)+0x4c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    75ae:	ldr	r1, [pc, #132]	; (7634 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    75b0:	ldr	r3, [pc, #132]	; (7638 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    75b2:	movs	r0, #15
  m_errorLine = line;
    75b4:	mov.w	r2, #692	; 0x2b4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    75b8:	strb	r0, [r1, #0]
  m_errorLine = line;
    75ba:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    75bc:	mov	r0, r4
    75be:	pop	{r4, r5, r6, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    75c0:	mov	r1, r5
    75c2:	ldr	r0, [pc, #120]	; (763c <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    75c4:	bl	730c <cardCommand(unsigned long, unsigned long)>
    75c8:	mov	r4, r0
    75ca:	cbnz	r0, 75f0 <SdioCard::erase(unsigned long, unsigned long)+0x7c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    75cc:	ldr	r1, [pc, #100]	; (7634 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    75ce:	ldr	r3, [pc, #104]	; (7638 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    75d0:	movs	r0, #16
  m_errorLine = line;
    75d2:	movw	r2, #695	; 0x2b7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    75d6:	strb	r0, [r1, #0]
  m_errorLine = line;
    75d8:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    75da:	mov	r0, r4
    75dc:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    75de:	ldr	r1, [pc, #84]	; (7634 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    75e0:	ldr	r3, [pc, #84]	; (7638 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    75e2:	movs	r0, #38	; 0x26
  m_errorLine = line;
    75e4:	mov.w	r2, #684	; 0x2ac
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    75e8:	strb	r0, [r1, #0]
  m_errorLine = line;
    75ea:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    75ec:	mov	r0, r4
    75ee:	pop	{r4, r5, r6, pc}
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    75f0:	movs	r1, #0
    75f2:	ldr	r0, [pc, #76]	; (7640 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    75f4:	bl	730c <cardCommand(unsigned long, unsigned long)>
    75f8:	mov	r4, r0
    75fa:	cbnz	r0, 760c <SdioCard::erase(unsigned long, unsigned long)+0x98>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    75fc:	ldr	r1, [pc, #52]	; (7634 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    75fe:	ldr	r3, [pc, #56]	; (7638 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7600:	movs	r0, #17
  m_errorLine = line;
    7602:	movw	r2, #698	; 0x2ba
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7606:	strb	r0, [r1, #0]
  m_errorLine = line;
    7608:	str	r2, [r3, #0]
    760a:	b.n	75bc <SdioCard::erase(unsigned long, unsigned long)+0x48>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    760c:	ldr	r0, [pc, #52]	; (7644 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    760e:	bl	7268 <waitTimeout(bool (*)())>
    7612:	cmp	r0, #0
    7614:	beq.n	75bc <SdioCard::erase(unsigned long, unsigned long)+0x48>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7616:	ldr	r1, [pc, #28]	; (7634 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    7618:	ldr	r3, [pc, #28]	; (7638 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    761a:	movs	r0, #39	; 0x27
  m_errorLine = line;
    761c:	movw	r2, #701	; 0x2bd
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7620:	strb	r0, [r1, #0]
  m_errorLine = line;
    7622:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    7624:	movs	r4, #0
    7626:	b.n	75bc <SdioCard::erase(unsigned long, unsigned long)+0x48>
    7628:	.word	0x2001c92c
    762c:	.word	0x2001c918
    7630:	.word	0x201a0000
    7634:	.word	0x20016f18
    7638:	.word	0x2001c944
    763c:	.word	0x211a0000
    7640:	.word	0x261b0000
    7644:	.word	0x000073ed

00007648 <transferStop()>:
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
    7648:	push	{r4, r5, r6, lr}
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    764a:	movs	r1, #0
    764c:	ldr	r0, [pc, #84]	; (76a4 <transferStop()+0x5c>)
    764e:	bl	730c <cardCommand(unsigned long, unsigned long)>
    7652:	mov	r4, r0
    7654:	cbnz	r0, 7668 <transferStop()+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7656:	ldr	r1, [pc, #80]	; (76a8 <transferStop()+0x60>)
  m_errorLine = line;
    7658:	ldr	r3, [pc, #80]	; (76ac <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    765a:	movs	r0, #9
  m_errorLine = line;
    765c:	mov.w	r2, #540	; 0x21c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7660:	strb	r0, [r1, #0]
  m_errorLine = line;
    7662:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    7664:	mov	r0, r4
    7666:	pop	{r4, r5, r6, pc}
//------------------------------------------------------------------------------
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    7668:	ldr	r0, [pc, #68]	; (76b0 <transferStop()+0x68>)
    766a:	bl	7290 <yieldTimeout(bool (*)())>
    766e:	cbnz	r0, 768e <transferStop()+0x46>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    7670:	ldr	r0, [pc, #64]	; (76b4 <transferStop()+0x6c>)
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    7672:	ldr	r1, [pc, #68]	; (76b8 <transferStop()+0x70>)
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    7674:	ldr	r5, [pc, #68]	; (76bc <transferStop()+0x74>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    7676:	ldr	r6, [r0, #0]
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    7678:	ldr	r3, [r1, #0]
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    767a:	ldr	r2, [r5, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    767c:	bic.w	r3, r3, #65536	; 0x10000
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    7680:	orr.w	r2, r2, #67108864	; 0x4000000
    7684:	str	r2, [r5, #0]
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
    7686:	str	r6, [r0, #0]
  SDHC_PROCTL = proctl;
    7688:	str	r3, [r1, #0]
  return true;
}
    768a:	mov	r0, r4
    768c:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    768e:	ldr	r1, [pc, #24]	; (76a8 <transferStop()+0x60>)
  m_errorLine = line;
    7690:	ldr	r3, [pc, #24]	; (76ac <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7692:	movs	r0, #10
  m_errorLine = line;
    7694:	movw	r2, #543	; 0x21f
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7698:	strb	r0, [r1, #0]
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    769a:	movs	r4, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    769c:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    769e:	mov	r0, r4
    76a0:	pop	{r4, r5, r6, pc}
    76a2:	nop
    76a4:	.word	0x0cdb0000
    76a8:	.word	0x20016f18
    76ac:	.word	0x2001c944
    76b0:	.word	0x000073ed
    76b4:	.word	0x400b1034
    76b8:	.word	0x400b1028
    76bc:	.word	0x400b102c

000076c0 <SdioCard::readStop()>:
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    76c0:	b.w	7648 <transferStop()>

000076c4 <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    76c4:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    76c6:	ldr	r3, [pc, #160]	; (7768 <SdioCard::writeData(unsigned char const*)+0xa4>)
    76c8:	ldr	r3, [r3, #0]
    76ca:	lsls	r0, r3, #23
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    76cc:	mov	r5, r1
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    76ce:	bmi.n	76e2 <SdioCard::writeData(unsigned char const*)+0x1e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    76d0:	ldr	r3, [pc, #152]	; (776c <SdioCard::writeData(unsigned char const*)+0xa8>)
    76d2:	ldr	r2, [r3, #0]
    76d4:	bic.w	r2, r2, #65536	; 0x10000
    76d8:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    76da:	ldr	r2, [r3, #0]
    76dc:	orr.w	r2, r2, #131072	; 0x20000
    76e0:	str	r2, [r3, #0]
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    76e2:	ldr	r2, [pc, #136]	; (776c <SdioCard::writeData(unsigned char const*)+0xa8>)
  if (waitTimeout(isBusyFifoWrite)) {
    76e4:	ldr	r0, [pc, #136]	; (7770 <SdioCard::writeData(unsigned char const*)+0xac>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    76e6:	ldr	r3, [r2, #0]
    76e8:	orr.w	r3, r3, #65536	; 0x10000
    76ec:	str	r3, [r2, #0]
  if (waitTimeout(isBusyFifoWrite)) {
    76ee:	bl	7268 <waitTimeout(bool (*)())>
    76f2:	cmp	r0, #0
    76f4:	bne.n	7754 <SdioCard::writeData(unsigned char const*)+0x90>
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    76f6:	ldr	r4, [pc, #112]	; (7768 <SdioCard::writeData(unsigned char const*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    76f8:	ldr	r0, [pc, #120]	; (7774 <SdioCard::writeData(unsigned char const*)+0xb0>)
    76fa:	subs	r3, r5, #4
    76fc:	add.w	r5, r5, #508	; 0x1fc
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    7700:	ldr	r2, [r4, #0]
    7702:	lsls	r1, r2, #21
    7704:	bpl.n	7700 <SdioCard::writeData(unsigned char const*)+0x3c>
    7706:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    770a:	ldr.w	r2, [r3, #4]!
    770e:	str	r2, [r0, #0]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    7710:	cmp	r1, r3
    7712:	bne.n	770a <SdioCard::writeData(unsigned char const*)+0x46>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    7714:	cmp	r5, r1
    7716:	mov	r3, r1
    7718:	bne.n	7700 <SdioCard::writeData(unsigned char const*)+0x3c>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    771a:	ldr	r0, [pc, #92]	; (7778 <SdioCard::writeData(unsigned char const*)+0xb4>)
    771c:	bl	7268 <waitTimeout(bool (*)())>
    7720:	cbnz	r0, 7742 <SdioCard::writeData(unsigned char const*)+0x7e>
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    7722:	ldr	r2, [pc, #88]	; (777c <SdioCard::writeData(unsigned char const*)+0xb8>)
    7724:	ldr	r3, [pc, #88]	; (7780 <SdioCard::writeData(unsigned char const*)+0xbc>)
    7726:	ldr	r1, [r2, #0]
    7728:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    772a:	ldr	r1, [r3, #0]
    772c:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    772e:	ldr	r2, [r3, #0]
    7730:	lsls	r2, r2, #30
    7732:	bpl.n	7764 <SdioCard::writeData(unsigned char const*)+0xa0>
    7734:	ldr	r3, [r3, #0]
    7736:	ldr	r0, [pc, #76]	; (7784 <SdioCard::writeData(unsigned char const*)+0xc0>)
    7738:	ands	r0, r3
    773a:	clz	r0, r0
    773e:	lsrs	r0, r0, #5
    7740:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7742:	ldr	r1, [pc, #68]	; (7788 <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    7744:	ldr	r3, [pc, #68]	; (778c <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7746:	movs	r0, #35	; 0x23
  m_errorLine = line;
    7748:	movw	r2, #905	; 0x389
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    774c:	strb	r0, [r1, #0]
  m_errorLine = line;
    774e:	str	r2, [r3, #0]
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
    7750:	movs	r0, #0
    7752:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7754:	ldr	r1, [pc, #48]	; (7788 <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    7756:	ldr	r3, [pc, #52]	; (778c <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7758:	movs	r0, #32
  m_errorLine = line;
    775a:	movw	r2, #894	; 0x37e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    775e:	strb	r0, [r1, #0]
  m_errorLine = line;
    7760:	str	r2, [r3, #0]
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    7762:	movs	r0, #0
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    7764:	pop	{r3, r4, r5, pc}
    7766:	nop
    7768:	.word	0x400b1024
    776c:	.word	0x400b1028
    7770:	.word	0x0000710d
    7774:	.word	0x400b1020
    7778:	.word	0x00007121
    777c:	.word	0x400b1030
    7780:	.word	0x2001c924
    7784:	.word	0x117f0000
    7788:	.word	0x20016f18
    778c:	.word	0x2001c944

00007790 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    7790:	push	{r3, r4, r5, lr}
  if (yieldTimeout(isBusyCMD13)) {
    7792:	ldr	r0, [pc, #80]	; (77e4 <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    7794:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    7796:	bl	7290 <yieldTimeout(bool (*)())>
    779a:	cbnz	r0, 77d0 <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    779c:	ldr	r2, [pc, #72]	; (77e8 <SdioCard::writeStart(unsigned long)+0x58>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    779e:	ldr	r1, [pc, #76]	; (77ec <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    77a0:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    77a2:	ldr	r0, [pc, #76]	; (77f0 <SdioCard::writeStart(unsigned long)+0x60>)
    77a4:	ldr	r5, [pc, #76]	; (77f4 <SdioCard::writeStart(unsigned long)+0x64>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    77a6:	bic.w	r3, r3, #65536	; 0x10000
    77aa:	str	r3, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    77ac:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    77ae:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    77b0:	cbnz	r3, 77cc <SdioCard::writeStart(unsigned long)+0x3c>
    77b2:	lsls	r1, r4, #9
    77b4:	ldr	r0, [pc, #64]	; (77f8 <SdioCard::writeStart(unsigned long)+0x68>)
    77b6:	bl	730c <cardCommand(unsigned long, unsigned long)>
    77ba:	cbnz	r0, 77ca <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    77bc:	ldr	r1, [pc, #60]	; (77fc <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    77be:	ldr	r3, [pc, #64]	; (7800 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    77c0:	movs	r4, #14
  m_errorLine = line;
    77c2:	movw	r2, #990	; 0x3de
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    77c6:	strb	r4, [r1, #0]
  m_errorLine = line;
    77c8:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    77ca:	pop	{r3, r4, r5, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    77cc:	mov	r1, r4
    77ce:	b.n	77b4 <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    77d0:	ldr	r1, [pc, #40]	; (77fc <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    77d2:	ldr	r3, [pc, #44]	; (7800 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    77d4:	movs	r0, #10
  m_errorLine = line;
    77d6:	movw	r2, #978	; 0x3d2
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    77da:	strb	r0, [r1, #0]
  m_errorLine = line;
    77dc:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    77de:	movs	r0, #0
    77e0:	pop	{r3, r4, r5, pc}
    77e2:	nop
    77e4:	.word	0x000073ed
    77e8:	.word	0x400b1028
    77ec:	.word	0x2001c918
    77f0:	.word	0x400b1004
    77f4:	.word	0xffff0200
    77f8:	.word	0x193a0022
    77fc:	.word	0x20016f18
    7800:	.word	0x2001c944

00007804 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    7804:	push	{r3, r4, r5, r6, r7, lr}
    7806:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    7808:	ldrb	r0, [r0, #8]
    780a:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    780c:	mov	r4, r1
    780e:	mov	r5, r2
    7810:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    7812:	bmi.n	783c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    7814:	cbz	r3, 7838 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    7816:	add	r7, r1
    7818:	b.n	781e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    781a:	cmp	r4, r7
    781c:	beq.n	7838 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    781e:	ldr	r3, [r6, #0]
    7820:	mov	r2, r5
    7822:	mov	r1, r4
    7824:	ldr	r3, [r3, #8]
    7826:	mov	r0, r6
    7828:	blx	r3
    782a:	adds	r4, #1
    782c:	add.w	r5, r5, #512	; 0x200
    7830:	cmp	r0, #0
    7832:	bne.n	781a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    7834:	movs	r0, #0
    7836:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    7838:	movs	r0, #1
    783a:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    783c:	lsls	r0, r2, #30
    783e:	beq.n	7866 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    7840:	cmp	r3, #0
    7842:	beq.n	7838 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    7844:	add	r7, r1
    7846:	b.n	784c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    7848:	cmp	r7, r4
    784a:	beq.n	7838 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    784c:	ldr	r3, [r6, #0]
    784e:	mov	r2, r5
    7850:	mov	r1, r4
    7852:	ldr	r3, [r3, #8]
    7854:	mov	r0, r6
    7856:	blx	r3
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    7858:	adds	r4, #1
    785a:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    785e:	cmp	r0, #0
    7860:	bne.n	7848 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    7862:	movs	r0, #0
    7864:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    7866:	ldr	r0, [pc, #24]	; (7880 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    7868:	bl	7454 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    786c:	cmp	r0, #0
    786e:	bne.n	7838 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7870:	ldr	r1, [pc, #16]	; (7884 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
  m_errorLine = line;
    7872:	ldr	r3, [pc, #20]	; (7888 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7874:	movs	r4, #12
  m_errorLine = line;
    7876:	mov.w	r2, #820	; 0x334
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    787a:	strb	r4, [r1, #0]
  m_errorLine = line;
    787c:	str	r2, [r3, #0]
    787e:	pop	{r3, r4, r5, r6, r7, pc}
    7880:	.word	0x123a0037
    7884:	.word	0x20016f18
    7888:	.word	0x2001c944

0000788c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    788c:	push	{r3, r4, r5, r6, r7, lr}
    788e:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    7890:	ldrb	r0, [r0, #8]
    7892:	lsls	r0, r0, #31
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    7894:	mov	r4, r1
    7896:	mov	r5, r2
    7898:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    789a:	bmi.n	78c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    789c:	cbz	r3, 78c0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    789e:	add	r7, r1
    78a0:	b.n	78a6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    78a2:	cmp	r4, r7
    78a4:	beq.n	78c0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    78a6:	ldr	r3, [r6, #0]
    78a8:	mov	r2, r5
    78aa:	mov	r1, r4
    78ac:	ldr	r3, [r3, #24]
    78ae:	mov	r0, r6
    78b0:	blx	r3
    78b2:	adds	r4, #1
    78b4:	add.w	r5, r5, #512	; 0x200
    78b8:	cmp	r0, #0
    78ba:	bne.n	78a2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    78bc:	movs	r0, #0
    78be:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    78c0:	movs	r0, #1
    78c2:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    78c4:	lsls	r0, r2, #30
    78c6:	beq.n	78ee <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    78c8:	cmp	r3, #0
    78ca:	beq.n	78c0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    78cc:	add	r7, r1
    78ce:	b.n	78d4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    78d0:	cmp	r7, r4
    78d2:	beq.n	78c0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    78d4:	ldr	r3, [r6, #0]
    78d6:	mov	r2, r5
    78d8:	mov	r1, r4
    78da:	ldr	r3, [r3, #24]
    78dc:	mov	r0, r6
    78de:	blx	r3
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    78e0:	adds	r4, #1
    78e2:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    78e6:	cmp	r0, #0
    78e8:	bne.n	78d0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    78ea:	movs	r0, #0
    78ec:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    78ee:	ldr	r0, [pc, #24]	; (7908 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    78f0:	bl	7454 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    78f4:	cmp	r0, #0
    78f6:	bne.n	78c0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    78f8:	ldr	r1, [pc, #16]	; (790c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
  m_errorLine = line;
    78fa:	ldr	r3, [pc, #20]	; (7910 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    78fc:	movs	r4, #14
  m_errorLine = line;
    78fe:	mov.w	r2, #964	; 0x3c4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7902:	strb	r4, [r1, #0]
  m_errorLine = line;
    7904:	str	r2, [r3, #0]
    7906:	pop	{r3, r4, r5, r6, r7, pc}
    7908:	.word	0x193a0027
    790c:	.word	0x20016f18
    7910:	.word	0x2001c944

00007914 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    7914:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    7916:	ldrb	r3, [r0, #8]
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    7918:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    791a:	lsls	r2, r3, #31
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    791c:	sub.w	sp, sp, #512	; 0x200
    7920:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    7922:	bpl.n	7958 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    7924:	lsls	r3, r5, #30
    7926:	beq.n	7936 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    7928:	mov	r1, r5
    792a:	mov	r0, sp
    792c:	mov.w	r2, #512	; 0x200
    7930:	bl	81cc <memcpy>
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    7934:	mov	r5, sp
      memcpy(aligned, src, 512);
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    7936:	mov	r2, r5
    7938:	mov	r1, r6
    793a:	movs	r3, #1
    793c:	ldr	r0, [pc, #120]	; (79b8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>)
    793e:	bl	7454 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    7942:	cbnz	r0, 7952 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7944:	ldr	r1, [pc, #116]	; (79bc <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa8>)
  m_errorLine = line;
    7946:	ldr	r3, [pc, #120]	; (79c0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xac>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7948:	movs	r4, #13
  m_errorLine = line;
    794a:	movw	r2, #923	; 0x39b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    794e:	strb	r4, [r1, #0]
  m_errorLine = line;
    7950:	str	r2, [r3, #0]
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    7952:	add.w	sp, sp, #512	; 0x200
    7956:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    7958:	ldrb	r3, [r0, #9]
    795a:	cmp	r3, #2
    795c:	mov	r4, r0
    795e:	beq.n	7972 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
      if (!syncDevice()) {
    7960:	ldr	r3, [r4, #0]
    7962:	mov	r0, r4
    7964:	ldr	r3, [r3, #20]
    7966:	blx	r3
    7968:	cbnz	r0, 79a2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x8e>
        return false;
    796a:	movs	r0, #0
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    796c:	add.w	sp, sp, #512	; 0x200
    7970:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    7972:	ldr	r3, [r0, #4]
    7974:	cmp	r1, r3
    7976:	bne.n	7960 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
    7978:	ldr	r3, [r4, #0]
    797a:	mov	r1, r5
    797c:	ldr	r3, [r3, #68]	; 0x44
    797e:	mov	r0, r4
    7980:	blx	r3
    7982:	cmp	r0, #0
    7984:	beq.n	796a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
      return false;
    }
    m_curSector++;
    7986:	ldr	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    7988:	ldr	r2, [pc, #56]	; (79c4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb0>)
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
      return false;
    }
    m_curSector++;
    798a:	adds	r3, #1
    798c:	str	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    798e:	ldr	r3, [r2, #0]
    7990:	lsrs	r3, r3, #16
    7992:	lsls	r3, r3, #16
    7994:	cmp	r3, #0
    7996:	bne.n	7952 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
      if (!syncDevice()) {
    7998:	ldr	r3, [r4, #0]
    799a:	mov	r0, r4
    799c:	ldr	r3, [r3, #20]
    799e:	blx	r3
    79a0:	b.n	7952 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector )) {
    79a2:	ldr	r3, [r4, #0]
    79a4:	mov	r1, r6
    79a6:	ldr	r3, [r3, #72]	; 0x48
    79a8:	mov	r0, r4
    79aa:	blx	r3
    79ac:	cmp	r0, #0
    79ae:	beq.n	796a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    79b0:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    79b2:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    79b4:	strb	r3, [r4, #9]
    79b6:	b.n	7978 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x64>
    79b8:	.word	0x183a0001
    79bc:	.word	0x20016f18
    79c0:	.word	0x2001c944
    79c4:	.word	0x400b1004

000079c8 <SdioCard::syncDevice()>:
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    79c8:	ldrb	r3, [r0, #9]
    79ca:	cmp	r3, #1
    79cc:	beq.n	79e8 <SdioCard::syncDevice()+0x20>
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    79ce:	cmp	r3, #2
    79d0:	beq.n	79d6 <SdioCard::syncDevice()+0xe>
    if (!writeStop()) {
      return false;
    }
  }
  return true;
}
    79d2:	movs	r0, #1
    79d4:	bx	lr
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    79d6:	movs	r1, #0
    if (!writeStop()) {
    79d8:	ldr	r3, [r0, #0]
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    79da:	strb	r1, [r0, #9]
    if (!writeStop()) {
    79dc:	ldr	r3, [r3, #76]	; 0x4c
    79de:	ldr	r2, [pc, #20]	; (79f4 <SdioCard::syncDevice()+0x2c>)
    79e0:	cmp	r3, r2
    79e2:	bne.n	79f0 <SdioCard::syncDevice()+0x28>
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    79e4:	b.w	7648 <transferStop()>
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    79e8:	movs	r3, #0
    79ea:	strb	r3, [r0, #9]
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    79ec:	b.w	7648 <transferStop()>
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    if (!writeStop()) {
    79f0:	bx	r3
    79f2:	nop
    79f4:	.word	0x000076c1

000079f8 <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    79f8:	push	{r3, r4, r5, r6, r7, lr}
    79fa:	mov	r5, r0
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    79fc:	ldr	r0, [pc, #116]	; (7a74 <cardCMD6(unsigned long, unsigned char*)+0x7c>)

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    79fe:	mov	r4, r1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    7a00:	bl	7268 <waitTimeout(bool (*)())>
    7a04:	cbz	r0, 7a18 <cardCMD6(unsigned long, unsigned char*)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a06:	ldr	r1, [pc, #112]	; (7a78 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    7a08:	ldr	r3, [pc, #112]	; (7a7c <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a0a:	movs	r0, #10
  m_errorLine = line;
    7a0c:	movw	r2, #377	; 0x179
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a10:	strb	r0, [r1, #0]
  m_errorLine = line;
    7a12:	str	r2, [r3, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7a14:	movs	r0, #0
    7a16:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    7a18:	ldr	r2, [pc, #100]	; (7a80 <cardCMD6(unsigned long, unsigned char*)+0x88>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    7a1a:	ldr.w	lr, [pc, #132]	; 7aa0 <cardCMD6(unsigned long, unsigned char*)+0xa8>
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    7a1e:	ldr	r7, [pc, #100]	; (7a84 <cardCMD6(unsigned long, unsigned char*)+0x8c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    7a20:	ldr	r6, [pc, #100]	; (7a88 <cardCMD6(unsigned long, unsigned char*)+0x90>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7a22:	ldr	r3, [pc, #104]	; (7a8c <cardCMD6(unsigned long, unsigned char*)+0x94>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    7a24:	mov.w	ip, #1
    7a28:	strb.w	ip, [lr]
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    7a2c:	mov	r1, r5
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    7a2e:	str	r0, [r2, #0]
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    7a30:	ldr	r5, [pc, #92]	; (7a90 <cardCMD6(unsigned long, unsigned char*)+0x98>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7a32:	ldr	r2, [pc, #96]	; (7a94 <cardCMD6(unsigned long, unsigned char*)+0x9c>)
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    7a34:	str	r4, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    7a36:	ldr	r0, [pc, #96]	; (7a98 <cardCMD6(unsigned long, unsigned char*)+0xa0>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    7a38:	str	r5, [r6, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7a3a:	str	r2, [r3, #0]
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    7a3c:	bl	730c <cardCommand(unsigned long, unsigned long)>
    7a40:	cbnz	r0, 7a52 <cardCMD6(unsigned long, unsigned char*)+0x5a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a42:	ldr	r1, [pc, #52]	; (7a78 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    7a44:	ldr	r3, [pc, #52]	; (7a7c <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a46:	movs	r4, #4
  m_errorLine = line;
    7a48:	mov.w	r2, #384	; 0x180
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a4c:	strb	r4, [r1, #0]
  m_errorLine = line;
    7a4e:	str	r2, [r3, #0]
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
    7a50:	pop	{r3, r4, r5, r6, r7, pc}
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    7a52:	ldr	r0, [pc, #72]	; (7a9c <cardCMD6(unsigned long, unsigned char*)+0xa4>)
    7a54:	bl	7290 <yieldTimeout(bool (*)())>
    7a58:	cbnz	r0, 7a62 <cardCMD6(unsigned long, unsigned char*)+0x6a>
    7a5a:	bl	7434 <waitDmaStatus() [clone .part.6]>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    7a5e:	cbz	r0, 7a62 <cardCMD6(unsigned long, unsigned char*)+0x6a>
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
    7a60:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a62:	ldr	r1, [pc, #20]	; (7a78 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    7a64:	ldr	r3, [pc, #20]	; (7a7c <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a66:	movs	r0, #36	; 0x24
  m_errorLine = line;
    7a68:	movw	r2, #387	; 0x183
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a6c:	strb	r0, [r1, #0]
  m_errorLine = line;
    7a6e:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_DMA);
    7a70:	movs	r0, #0
    7a72:	pop	{r3, r4, r5, r6, r7, pc}
    7a74:	.word	0x000073ed
    7a78:	.word	0x20016f18
    7a7c:	.word	0x2001c944
    7a80:	.word	0x2001c924
    7a84:	.word	0x400b1000
    7a88:	.word	0x400b1004
    7a8c:	.word	0x400b1038
    7a90:	.word	0x00010040
    7a94:	.word	0x117f0002
    7a98:	.word	0x063a0011
    7a9c:	.word	0x000070ed
    7aa0:	.word	0x2001c93c

00007aa4 <SdioCard::begin(SdioConfig)>:
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    7aa4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    7aa8:	ldr	r5, [pc, #568]	; (7ce4 <SdioCard::begin(SdioConfig)+0x240>)
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    7aaa:	ldr	r4, [pc, #572]	; (7ce8 <SdioCard::begin(SdioConfig)+0x244>)
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    7aac:	ldr.w	r8, [pc, #684]	; 7d5c <SdioCard::begin(SdioConfig)+0x2b8>
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    7ab0:	ldr	r7, [pc, #568]	; (7cec <SdioCard::begin(SdioConfig)+0x248>)
  m_version2 = false;
    7ab2:	ldr	r6, [pc, #572]	; (7cf0 <SdioCard::begin(SdioConfig)+0x24c>)
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    7ab4:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    7ab6:	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    7ab8:	strb	r3, [r5, #0]
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    7aba:	strb	r3, [r0, #9]
  m_initDone = false;
    7abc:	strb.w	r3, [r8]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    7ac0:	strb	r3, [r7, #0]
  m_version2 = false;
    7ac2:	strb	r3, [r6, #0]
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    7ac4:	ldr	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    7ac6:	ldr	r2, [pc, #556]	; (7cf4 <SdioCard::begin(SdioConfig)+0x250>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    7ac8:	ldr	r0, [pc, #556]	; (7cf8 <SdioCard::begin(SdioConfig)+0x254>)
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    7aca:	ldr	r1, [pc, #560]	; (7cfc <SdioCard::begin(SdioConfig)+0x258>)
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    7acc:	ldr.w	lr, [pc, #656]	; 7d60 <SdioCard::begin(SdioConfig)+0x2bc>
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    7ad0:	orr.w	r3, r3, #201326592	; 0xc000000
    7ad4:	str	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    7ad6:	ldr	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    7ad8:	add.w	r4, r4, #260096	; 0x3f800
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    7adc:	orr.w	r3, r3, #131072	; 0x20000
    7ae0:	str	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    7ae2:	adds	r4, #12
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    7ae4:	add.w	r2, r2, #428032	; 0x68800
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    7ae8:	movw	r3, #259	; 0x103
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    7aec:	addw	r2, r2, #2044	; 0x7fc
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    7af0:	str	r3, [r0, #0]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    7af2:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    7af6:	str	r3, [r1, #0]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    7af8:	str	r3, [r4, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    7afa:	str	r3, [r0, #16]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    7afc:	str	r3, [r1, #12]
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    7afe:	ldr	r3, [r2, #0]
    7b00:	orr.w	r3, r3, #16777216	; 0x1000000
    7b04:	orr.w	r3, r3, #32768	; 0x8000
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    7b08:	sub	sp, #68	; 0x44
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    7b0a:	str	r3, [r2, #0]

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    7b0c:	ldr	r3, [r2, #0]
    7b0e:	ldr	r4, [pc, #496]	; (7d00 <SdioCard::begin(SdioConfig)+0x25c>)
    7b10:	lsls	r1, r3, #7
    7b12:	bmi.n	7b0c <SdioCard::begin(SdioConfig)+0x68>
  }

  // Set initial SCK rate.
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    7b14:	mov.w	r0, #400	; 0x190
    7b18:	bl	7138 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    7b1c:	ldr.w	ip, [pc, #472]	; 7cf8 <SdioCard::begin(SdioConfig)+0x254>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    7b20:	ldr.w	lr, [pc, #572]	; 7d60 <SdioCard::begin(SdioConfig)+0x2bc>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    7b24:	ldr	r1, [pc, #468]	; (7cfc <SdioCard::begin(SdioConfig)+0x258>)
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    7b26:	ldr	r2, [pc, #476]	; (7d04 <SdioCard::begin(SdioConfig)+0x260>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    7b28:	ldr	r0, [pc, #476]	; (7d08 <SdioCard::begin(SdioConfig)+0x264>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    7b2a:	movw	r3, #1091	; 0x443
    7b2e:	str.w	r3, [ip]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    7b32:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    7b36:	mov.w	lr, #1088	; 0x440
    7b3a:	str.w	lr, [r1]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    7b3e:	str	r3, [r2, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    7b40:	add.w	r2, r2, #409600	; 0x64000
    7b44:	adds	r2, #40	; 0x28

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    7b46:	str	r3, [r0, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    7b48:	ldr	r0, [pc, #448]	; (7d0c <SdioCard::begin(SdioConfig)+0x268>)
  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    7b4a:	str	r3, [r1, #12]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    7b4c:	str	r0, [r2, #0]

  attachInterruptVector(IRQ_SDHC, sdIrs);
    7b4e:	ldr	r1, [pc, #448]	; (7d10 <SdioCard::begin(SdioConfig)+0x26c>)
    7b50:	movs	r0, #81	; 0x51
    7b52:	bl	8808 <attachInterruptVector>
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    7b56:	ldr	r3, [pc, #444]	; (7d14 <SdioCard::begin(SdioConfig)+0x270>)

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    7b58:	ldr	r1, [pc, #444]	; (7d18 <SdioCard::begin(SdioConfig)+0x274>)
    7b5a:	movs	r0, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    7b5c:	mov.w	r2, #131072	; 0x20000

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    7b60:	strb	r0, [r1, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    7b62:	str	r2, [r3, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    7b64:	ldr	r3, [r4, #0]
    7b66:	orr.w	r3, r3, #134217728	; 0x8000000
    7b6a:	str	r3, [r4, #0]
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    7b6c:	ldr	r1, [r4, #0]
    7b6e:	ands.w	r1, r1, #134217728	; 0x8000000
    7b72:	bne.n	7b6c <SdioCard::begin(SdioConfig)+0xc8>
  m_highCapacity = false;
  m_version2 = false;

  // initialize controller.
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    7b74:	mov	r0, r1
    7b76:	bl	730c <cardCommand(unsigned long, unsigned long)>
    7b7a:	mov	r4, r0
    7b7c:	cmp	r0, #0
    7b7e:	beq.n	7c1e <SdioCard::begin(SdioConfig)+0x17a>
    7b80:	movs	r4, #3
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    7b82:	mov.w	r1, #426	; 0x1aa
    7b86:	ldr	r0, [pc, #404]	; (7d1c <SdioCard::begin(SdioConfig)+0x278>)
    7b88:	bl	730c <cardCommand(unsigned long, unsigned long)>
    7b8c:	cmp	r0, #0
    7b8e:	bne.n	7c4c <SdioCard::begin(SdioConfig)+0x1a8>
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    7b90:	subs	r4, #1
    7b92:	bne.n	7b82 <SdioCard::begin(SdioConfig)+0xde>
      }
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    7b94:	ldrb	r3, [r6, #0]
    7b96:	ldr	r6, [pc, #392]	; (7d20 <SdioCard::begin(SdioConfig)+0x27c>)
    7b98:	cmp	r3, #0
    7b9a:	it	eq
    7b9c:	moveq.w	r6, #3145728	; 0x300000
  int m = micros();
    7ba0:	bl	8870 <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    7ba4:	ldr	r4, [pc, #380]	; (7d24 <SdioCard::begin(SdioConfig)+0x280>)
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
    7ba6:	mov	r9, r0
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    7ba8:	movs	r1, #0
    7baa:	ldr	r0, [pc, #380]	; (7d28 <SdioCard::begin(SdioConfig)+0x284>)
    7bac:	bl	730c <cardCommand(unsigned long, unsigned long)>
    7bb0:	cbnz	r0, 7bc8 <SdioCard::begin(SdioConfig)+0x124>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7bb2:	ldr	r2, [pc, #376]	; (7d2c <SdioCard::begin(SdioConfig)+0x288>)
    7bb4:	movw	r1, #621	; 0x26d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7bb8:	movs	r3, #23
  m_errorLine = line;
    7bba:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7bbc:	strb	r3, [r5, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    7bbe:	movs	r4, #0

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    7bc0:	mov	r0, r4
    7bc2:	add	sp, #68	; 0x44
    7bc4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    7bc8:	mov	r1, r6
    7bca:	ldr	r0, [pc, #356]	; (7d30 <SdioCard::begin(SdioConfig)+0x28c>)
    7bcc:	bl	730c <cardCommand(unsigned long, unsigned long)>
    7bd0:	cmp	r0, #0
    7bd2:	beq.n	7bb2 <SdioCard::begin(SdioConfig)+0x10e>
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    7bd4:	bl	8870 <micros>
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    7bd8:	ldr	r3, [pc, #344]	; (7d34 <SdioCard::begin(SdioConfig)+0x290>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    7bda:	ldr	r2, [pc, #328]	; (7d24 <SdioCard::begin(SdioConfig)+0x280>)
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    7bdc:	rsb	r0, r9, r0
    7be0:	cmp	r0, r3
    7be2:	bhi.n	7bb2 <SdioCard::begin(SdioConfig)+0x10e>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    7be4:	ldr	r3, [r4, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    7be6:	cmp	r3, #0
    7be8:	bge.n	7ba8 <SdioCard::begin(SdioConfig)+0x104>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    7bea:	ldr	r3, [pc, #332]	; (7d38 <SdioCard::begin(SdioConfig)+0x294>)
    7bec:	ldr	r1, [r2, #0]
    7bee:	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    7bf0:	ldr	r3, [r2, #0]
    // Is high capacity.
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    7bf2:	ldr	r0, [pc, #328]	; (7d3c <SdioCard::begin(SdioConfig)+0x298>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    7bf4:	lsls	r2, r3, #1
    // Is high capacity.
    m_highCapacity = true;
    7bf6:	it	mi
    7bf8:	movmi	r3, #1
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    7bfa:	mov.w	r1, #0
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    // Is high capacity.
    m_highCapacity = true;
    7bfe:	it	mi
    7c00:	strbmi	r3, [r7, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    7c02:	bl	730c <cardCommand(unsigned long, unsigned long)>
    7c06:	mov	r4, r0
    7c08:	cbnz	r0, 7c32 <SdioCard::begin(SdioConfig)+0x18e>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7c0a:	ldr	r2, [pc, #288]	; (7d2c <SdioCard::begin(SdioConfig)+0x288>)
    7c0c:	movw	r1, #630	; 0x276
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c10:	movs	r3, #2

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    7c12:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7c14:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c16:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    7c18:	add	sp, #68	; 0x44
    7c1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7c1e:	ldr	r2, [pc, #268]	; (7d2c <SdioCard::begin(SdioConfig)+0x288>)
    7c20:	mov.w	r1, #604	; 0x25c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c24:	movs	r3, #1

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    7c26:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7c28:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c2a:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    7c2c:	add	sp, #68	; 0x44
    7c2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    7c32:	movs	r1, #0
    7c34:	ldr	r0, [pc, #264]	; (7d40 <SdioCard::begin(SdioConfig)+0x29c>)
    7c36:	bl	730c <cardCommand(unsigned long, unsigned long)>
    7c3a:	mov	r4, r0
    7c3c:	cbnz	r0, 7c6e <SdioCard::begin(SdioConfig)+0x1ca>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7c3e:	ldr	r2, [pc, #236]	; (7d2c <SdioCard::begin(SdioConfig)+0x288>)
    7c40:	movw	r1, #633	; 0x279
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c44:	movs	r3, #3
  m_errorLine = line;
    7c46:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c48:	strb	r3, [r5, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    7c4a:	b.n	7bc0 <SdioCard::begin(SdioConfig)+0x11c>
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    7c4c:	ldr	r3, [pc, #212]	; (7d24 <SdioCard::begin(SdioConfig)+0x280>)
    7c4e:	ldr	r3, [r3, #0]
    7c50:	cmp.w	r3, #426	; 0x1aa
    7c54:	beq.n	7c66 <SdioCard::begin(SdioConfig)+0x1c2>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7c56:	ldr	r2, [pc, #212]	; (7d2c <SdioCard::begin(SdioConfig)+0x288>)
    7c58:	movw	r1, #610	; 0x262
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c5c:	movs	r3, #6
  m_errorLine = line;
    7c5e:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c60:	strb	r3, [r5, #0]
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    7c62:	movs	r4, #0
    7c64:	b.n	7bc0 <SdioCard::begin(SdioConfig)+0x11c>
      }
      m_version2 = true;
    7c66:	movs	r3, #1
    7c68:	strb	r3, [r6, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    7c6a:	ldr	r6, [pc, #180]	; (7d20 <SdioCard::begin(SdioConfig)+0x27c>)
    7c6c:	b.n	7ba0 <SdioCard::begin(SdioConfig)+0xfc>
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    7c6e:	ldr	r3, [pc, #180]	; (7d24 <SdioCard::begin(SdioConfig)+0x280>)
    7c70:	ldr	r6, [pc, #208]	; (7d44 <SdioCard::begin(SdioConfig)+0x2a0>)
    7c72:	ldr	r3, [r3, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    7c74:	ldr	r1, [pc, #208]	; (7d48 <SdioCard::begin(SdioConfig)+0x2a4>)
    7c76:	ldr	r0, [pc, #212]	; (7d4c <SdioCard::begin(SdioConfig)+0x2a8>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    7c78:	lsrs	r3, r3, #16
    7c7a:	lsls	r3, r3, #16
    7c7c:	str	r3, [r6, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    7c7e:	bl	7388 <readReg16(unsigned long, void*)>
    7c82:	mov	r4, r0
    7c84:	cbnz	r0, 7c94 <SdioCard::begin(SdioConfig)+0x1f0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7c86:	ldr	r2, [pc, #164]	; (7d2c <SdioCard::begin(SdioConfig)+0x288>)
    7c88:	movw	r1, #638	; 0x27e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c8c:	movs	r3, #7
  m_errorLine = line;
    7c8e:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c90:	strb	r3, [r5, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    7c92:	b.n	7bc0 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    7c94:	ldr	r1, [pc, #184]	; (7d50 <SdioCard::begin(SdioConfig)+0x2ac>)
    7c96:	ldr	r0, [pc, #188]	; (7d54 <SdioCard::begin(SdioConfig)+0x2b0>)
    7c98:	bl	7388 <readReg16(unsigned long, void*)>
    7c9c:	mov	r4, r0
    7c9e:	cbnz	r0, 7cae <SdioCard::begin(SdioConfig)+0x20a>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7ca0:	ldr	r2, [pc, #136]	; (7d2c <SdioCard::begin(SdioConfig)+0x288>)
    7ca2:	movw	r1, #641	; 0x281
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ca6:	movs	r3, #8
  m_errorLine = line;
    7ca8:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7caa:	strb	r3, [r5, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    7cac:	b.n	7bc0 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    7cae:	ldr	r1, [r6, #0]
    7cb0:	ldr	r0, [pc, #164]	; (7d58 <SdioCard::begin(SdioConfig)+0x2b4>)
    7cb2:	bl	730c <cardCommand(unsigned long, unsigned long)>
    7cb6:	mov	r4, r0
    7cb8:	cbnz	r0, 7cc8 <SdioCard::begin(SdioConfig)+0x224>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7cba:	ldr	r2, [pc, #112]	; (7d2c <SdioCard::begin(SdioConfig)+0x288>)
    7cbc:	mov.w	r1, #644	; 0x284
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7cc0:	movs	r3, #5
  m_errorLine = line;
    7cc2:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7cc4:	strb	r3, [r5, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    7cc6:	b.n	7bc0 <SdioCard::begin(SdioConfig)+0x11c>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    7cc8:	ldr	r1, [r6, #0]
    7cca:	ldr	r0, [pc, #92]	; (7d28 <SdioCard::begin(SdioConfig)+0x284>)
    7ccc:	bl	730c <cardCommand(unsigned long, unsigned long)>
    7cd0:	cmp	r0, #0
    7cd2:	bne.n	7d64 <SdioCard::begin(SdioConfig)+0x2c0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7cd4:	ldr	r2, [pc, #84]	; (7d2c <SdioCard::begin(SdioConfig)+0x288>)
    7cd6:	mov.w	r1, #648	; 0x288
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7cda:	movs	r3, #20
  m_errorLine = line;
    7cdc:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7cde:	strb	r3, [r5, #0]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    7ce0:	movs	r4, #0
    7ce2:	b.n	7bc0 <SdioCard::begin(SdioConfig)+0x11c>
    7ce4:	.word	0x20016f18
    7ce8:	.word	0x4000d800
    7cec:	.word	0x2001c918
    7cf0:	.word	0x2001c900
    7cf4:	.word	0x40048030
    7cf8:	.word	0x4004d000
    7cfc:	.word	0x4004d008
    7d00:	.word	0x400b102c
    7d04:	.word	0x4004d00c
    7d08:	.word	0x4004d010
    7d0c:	.word	0x117f000b
    7d10:	.word	0x00007095
    7d14:	.word	0xe000e108
    7d18:	.word	0xe000e451
    7d1c:	.word	0x081a0000
    7d20:	.word	0x40300000
    7d24:	.word	0x400b1010
    7d28:	.word	0x371a0000
    7d2c:	.word	0x2001c944
    7d30:	.word	0x29020000
    7d34:	.word	0x000f4240
    7d38:	.word	0x2001c91c
    7d3c:	.word	0x02090000
    7d40:	.word	0x031a0000
    7d44:	.word	0x2001c920
    7d48:	.word	0x2001c92c
    7d4c:	.word	0x09090000
    7d50:	.word	0x2001c904
    7d54:	.word	0x0a090000
    7d58:	.word	0x071b0000
    7d5c:	.word	0x2001c928
    7d60:	.word	0x4004d004
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    7d64:	movs	r1, #2
    7d66:	ldr	r0, [pc, #168]	; (7e10 <SdioCard::begin(SdioConfig)+0x36c>)
    7d68:	bl	730c <cardCommand(unsigned long, unsigned long)>
    7d6c:	mov	r4, r0
    7d6e:	cmp	r0, #0
    7d70:	beq.n	7cd4 <SdioCard::begin(SdioConfig)+0x230>
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    7d72:	ldr	r3, [pc, #160]	; (7e14 <SdioCard::begin(SdioConfig)+0x370>)
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    7d74:	ldr	r0, [pc, #160]	; (7e18 <SdioCard::begin(SdioConfig)+0x374>)
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    7d76:	ldr	r2, [r3, #0]
    7d78:	bic.w	r2, r2, #6
    7d7c:	str	r2, [r3, #0]
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    7d7e:	ldr	r2, [r3, #0]

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    7d80:	mov.w	r5, #1048592	; 0x100010
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    7d84:	orr.w	r2, r2, #2
    7d88:	str	r2, [r3, #0]
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    7d8a:	mov	r1, sp
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    7d8c:	str	r5, [r0, #0]

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    7d8e:	mvn.w	r0, #4278190080	; 0xff000000
    7d92:	bl	79f8 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    7d96:	cbz	r0, 7da0 <SdioCard::begin(SdioConfig)+0x2fc>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    7d98:	ldrb.w	r3, [sp, #13]
    7d9c:	lsls	r3, r3, #30
    7d9e:	bmi.n	7df2 <SdioCard::begin(SdioConfig)+0x34e>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    kHzSdClk = 50000;
  } else {
    kHzSdClk = 25000;
    7da0:	movw	r0, #25000	; 0x61a8
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    7da4:	ldr.w	fp, [pc, #132]	; 7e2c <SdioCard::begin(SdioConfig)+0x388>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    7da8:	ldr.w	sl, [pc, #132]	; 7e30 <SdioCard::begin(SdioConfig)+0x38c>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    7dac:	ldr.w	r9, [pc, #132]	; 7e34 <SdioCard::begin(SdioConfig)+0x390>
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    7db0:	ldr	r7, [pc, #104]	; (7e1c <SdioCard::begin(SdioConfig)+0x378>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    7db2:	ldr	r6, [pc, #108]	; (7e20 <SdioCard::begin(SdioConfig)+0x37c>)
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    7db4:	ldr	r5, [pc, #108]	; (7e24 <SdioCard::begin(SdioConfig)+0x380>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    7db6:	movw	r3, #259	; 0x103
    7dba:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    7dbe:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    7dc2:	str.w	r3, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    7dc6:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    7dc8:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    7dca:	str	r3, [r5, #0]
  }
  // Disable GPIO.
  enableGPIO(false);

  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);
    7dcc:	bl	7138 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    7dd0:	movw	r3, #1091	; 0x443
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    7dd4:	mov.w	r1, #1088	; 0x440
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    7dd8:	movs	r2, #1
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    7dda:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    7dde:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    7de2:	str.w	r1, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    7de6:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    7de8:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    7dea:	str	r3, [r5, #0]
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    7dec:	strb.w	r2, [r8]
  return true;
    7df0:	b.n	7bc0 <SdioCard::begin(SdioConfig)+0x11c>

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    7df2:	mov	r1, sp
    7df4:	ldr	r0, [pc, #48]	; (7e28 <SdioCard::begin(SdioConfig)+0x384>)
    7df6:	bl	79f8 <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    7dfa:	cmp	r0, #0
    7dfc:	beq.n	7da0 <SdioCard::begin(SdioConfig)+0x2fc>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    7dfe:	ldrb.w	r3, [sp, #16]
    7e02:	and.w	r3, r3, #15
    7e06:	cmp	r3, #1
    7e08:	bne.n	7da0 <SdioCard::begin(SdioConfig)+0x2fc>
    kHzSdClk = 50000;
    7e0a:	movw	r0, #50000	; 0xc350
    7e0e:	b.n	7da4 <SdioCard::begin(SdioConfig)+0x300>
    7e10:	.word	0x061a0000
    7e14:	.word	0x400b1028
    7e18:	.word	0x400b1044
    7e1c:	.word	0x4004d00c
    7e20:	.word	0x4004d010
    7e24:	.word	0x4004d014
    7e28:	.word	0x80fffff1
    7e2c:	.word	0x4004d000
    7e30:	.word	0x4004d004
    7e34:	.word	0x4004d008

00007e38 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    7e38:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    7e3a:	ldr	r3, [pc, #160]	; (7edc <SdioCard::readData(unsigned char*)+0xa4>)
    7e3c:	ldr	r3, [r3, #0]
    7e3e:	lsls	r0, r3, #22
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    7e40:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    7e42:	bmi.n	7e62 <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7e44:	ldr	r3, [pc, #152]	; (7ee0 <SdioCard::readData(unsigned char*)+0xa8>)
    7e46:	ldr	r2, [r3, #0]
    7e48:	bic.w	r2, r2, #65536	; 0x10000
    7e4c:	str	r2, [r3, #0]
    noInterrupts();
    7e4e:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    7e50:	ldr	r2, [r3, #0]
    7e52:	orr.w	r2, r2, #131072	; 0x20000
    7e56:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    7e58:	ldr	r2, [r3, #0]
    7e5a:	orr.w	r2, r2, #65536	; 0x10000
    7e5e:	str	r2, [r3, #0]
    interrupts();
    7e60:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    7e62:	ldr	r0, [pc, #128]	; (7ee4 <SdioCard::readData(unsigned char*)+0xac>)
    7e64:	bl	7268 <waitTimeout(bool (*)())>
    7e68:	cmp	r0, #0
    7e6a:	bne.n	7eca <SdioCard::readData(unsigned char*)+0x92>
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    7e6c:	ldr	r4, [pc, #108]	; (7edc <SdioCard::readData(unsigned char*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    7e6e:	ldr	r0, [pc, #120]	; (7ee8 <SdioCard::readData(unsigned char*)+0xb0>)
    7e70:	subs	r3, r5, #4
    7e72:	add.w	r5, r5, #508	; 0x1fc
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    7e76:	ldr	r2, [r4, #0]
    7e78:	lsls	r1, r2, #20
    7e7a:	bpl.n	7e76 <SdioCard::readData(unsigned char*)+0x3e>
    7e7c:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    7e80:	ldr	r2, [r0, #0]
    7e82:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    7e86:	cmp	r1, r3
    7e88:	bne.n	7e80 <SdioCard::readData(unsigned char*)+0x48>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    7e8a:	cmp	r5, r1
    7e8c:	mov	r3, r1
    7e8e:	bne.n	7e76 <SdioCard::readData(unsigned char*)+0x3e>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    7e90:	ldr	r0, [pc, #88]	; (7eec <SdioCard::readData(unsigned char*)+0xb4>)
    7e92:	bl	7268 <waitTimeout(bool (*)())>
    7e96:	cbnz	r0, 7eb8 <SdioCard::readData(unsigned char*)+0x80>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    7e98:	ldr	r2, [pc, #84]	; (7ef0 <SdioCard::readData(unsigned char*)+0xb8>)
    7e9a:	ldr	r3, [pc, #88]	; (7ef4 <SdioCard::readData(unsigned char*)+0xbc>)
    7e9c:	ldr	r1, [r2, #0]
    7e9e:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    7ea0:	ldr	r1, [r3, #0]
    7ea2:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    7ea4:	ldr	r2, [r3, #0]
    7ea6:	lsls	r2, r2, #30
    7ea8:	bpl.n	7eda <SdioCard::readData(unsigned char*)+0xa2>
    7eaa:	ldr	r3, [r3, #0]
    7eac:	ldr	r0, [pc, #72]	; (7ef8 <SdioCard::readData(unsigned char*)+0xc0>)
    7eae:	ands	r0, r3
    7eb0:	clz	r0, r0
    7eb4:	lsrs	r0, r0, #5
    7eb6:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7eb8:	ldr	r1, [pc, #64]	; (7efc <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    7eba:	ldr	r3, [pc, #68]	; (7f00 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ebc:	movs	r0, #29
  m_errorLine = line;
    7ebe:	movw	r2, #759	; 0x2f7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ec2:	strb	r0, [r1, #0]
  m_errorLine = line;
    7ec4:	str	r2, [r3, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    7ec6:	movs	r0, #0
    7ec8:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7eca:	ldr	r1, [pc, #48]	; (7efc <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    7ecc:	ldr	r3, [pc, #48]	; (7f00 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ece:	movs	r0, #26
  m_errorLine = line;
    7ed0:	mov.w	r2, #748	; 0x2ec
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ed4:	strb	r0, [r1, #0]
  m_errorLine = line;
    7ed6:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    7ed8:	movs	r0, #0
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    7eda:	pop	{r3, r4, r5, pc}
    7edc:	.word	0x400b1024
    7ee0:	.word	0x400b1028
    7ee4:	.word	0x000070f9
    7ee8:	.word	0x400b1020
    7eec:	.word	0x00007121
    7ef0:	.word	0x400b1030
    7ef4:	.word	0x2001c924
    7ef8:	.word	0x117f0000
    7efc:	.word	0x20016f18
    7f00:	.word	0x2001c944

00007f04 <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    7f04:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    7f06:	ldr	r0, [pc, #80]	; (7f58 <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    7f08:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    7f0a:	bl	7290 <yieldTimeout(bool (*)())>
    7f0e:	cbnz	r0, 7f44 <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    7f10:	ldr	r2, [pc, #72]	; (7f5c <SdioCard::readStart(unsigned long)+0x58>)
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7f12:	ldr	r1, [pc, #76]	; (7f60 <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    7f14:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    7f16:	ldr	r0, [pc, #76]	; (7f64 <SdioCard::readStart(unsigned long)+0x60>)
    7f18:	ldr	r5, [pc, #76]	; (7f68 <SdioCard::readStart(unsigned long)+0x64>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    7f1a:	orr.w	r3, r3, #65536	; 0x10000
    7f1e:	str	r3, [r2, #0]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7f20:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    7f22:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7f24:	cbnz	r3, 7f40 <SdioCard::readStart(unsigned long)+0x3c>
    7f26:	lsls	r1, r4, #9
    7f28:	ldr	r0, [pc, #64]	; (7f6c <SdioCard::readStart(unsigned long)+0x68>)
    7f2a:	bl	730c <cardCommand(unsigned long, unsigned long)>
    7f2e:	cbnz	r0, 7f3e <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f30:	ldr	r1, [pc, #60]	; (7f70 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    7f32:	ldr	r3, [pc, #64]	; (7f74 <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f34:	movs	r4, #12
  m_errorLine = line;
    7f36:	mov.w	r2, #848	; 0x350
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f3a:	strb	r4, [r1, #0]
  m_errorLine = line;
    7f3c:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    7f3e:	pop	{r3, r4, r5, pc}
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7f40:	mov	r1, r4
    7f42:	b.n	7f28 <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f44:	ldr	r1, [pc, #40]	; (7f70 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    7f46:	ldr	r3, [pc, #44]	; (7f74 <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f48:	movs	r0, #10
  m_errorLine = line;
    7f4a:	mov.w	r2, #836	; 0x344
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f4e:	strb	r0, [r1, #0]
  m_errorLine = line;
    7f50:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7f52:	movs	r0, #0
    7f54:	pop	{r3, r4, r5, pc}
    7f56:	nop
    7f58:	.word	0x000073ed
    7f5c:	.word	0x400b1028
    7f60:	.word	0x2001c918
    7f64:	.word	0x400b1004
    7f68:	.word	0xffff0200
    7f6c:	.word	0x123a0032
    7f70:	.word	0x20016f18
    7f74:	.word	0x2001c944

00007f78 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    7f78:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    7f7a:	ldrb	r3, [r0, #8]
    7f7c:	lsls	r4, r3, #31
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    7f7e:	sub.w	sp, sp, #512	; 0x200
    7f82:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    7f84:	bpl.n	7fac <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    7f86:	lsls	r3, r2, #30
    7f88:	beq.n	7fca <SdioCard::readSector(unsigned long, unsigned char*)+0x52>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    7f8a:	mov	r2, sp
    7f8c:	movs	r3, #1
    7f8e:	ldr	r0, [pc, #168]	; (8038 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    7f90:	bl	7454 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    7f94:	cbz	r0, 7fd6 <SdioCard::readSector(unsigned long, unsigned char*)+0x5e>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    7f96:	mov	r1, sp
    7f98:	mov	r0, r5
    7f9a:	mov.w	r2, #512	; 0x200
    7f9e:	bl	81cc <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    7fa2:	movs	r5, #1
}
    7fa4:	mov	r0, r5
    7fa6:	add.w	sp, sp, #512	; 0x200
    7faa:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    7fac:	ldrb	r3, [r0, #9]
    7fae:	cmp	r3, #1
    7fb0:	mov	r4, r0
    7fb2:	mov	r6, r1
    7fb4:	beq.n	7fee <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
      if (!syncDevice()) {
    7fb6:	ldr	r3, [r4, #0]
    7fb8:	mov	r0, r4
    7fba:	ldr	r3, [r3, #20]
    7fbc:	blx	r3
    7fbe:	cbnz	r0, 8014 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
        return false;
    7fc0:	movs	r5, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    7fc2:	mov	r0, r5
    7fc4:	add.w	sp, sp, #512	; 0x200
    7fc8:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    7fca:	movs	r3, #1
    7fcc:	ldr	r0, [pc, #104]	; (8038 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    7fce:	bl	7454 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    7fd2:	cmp	r0, #0
    7fd4:	bne.n	7fa2 <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7fd6:	ldr	r1, [pc, #100]	; (803c <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>)
  m_errorLine = line;
    7fd8:	ldr	r3, [pc, #100]	; (8040 <SdioCard::readSector(unsigned long, unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7fda:	movs	r0, #11
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    7fdc:	movs	r5, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7fde:	movw	r2, #778	; 0x30a
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7fe2:	strb	r0, [r1, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    7fe4:	mov	r0, r5
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7fe6:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    7fe8:	add.w	sp, sp, #512	; 0x200
    7fec:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    7fee:	ldr	r3, [r0, #4]
    7ff0:	cmp	r1, r3
    7ff2:	bne.n	7fb6 <SdioCard::readSector(unsigned long, unsigned char*)+0x3e>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    }
    if (!readData(dst)) {
    7ff4:	mov	r1, r5
    7ff6:	mov	r0, r4
    7ff8:	bl	7e38 <SdioCard::readData(unsigned char*)>
    7ffc:	mov	r5, r0
    7ffe:	cmp	r0, #0
    8000:	beq.n	7fc0 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    8002:	ldr	r3, [pc, #64]	; (8044 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>)
    8004:	ldr	r3, [r3, #0]
    8006:	lsrs	r3, r3, #16
    8008:	lsls	r3, r3, #16
    800a:	cbz	r3, 8028 <SdioCard::readSector(unsigned long, unsigned char*)+0xb0>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    800c:	ldr	r3, [r4, #4]
    800e:	adds	r3, #1
    8010:	str	r3, [r4, #4]
    8012:	b.n	7fc2 <SdioCard::readSector(unsigned long, unsigned char*)+0x4a>
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    8014:	mov	r1, r6
    8016:	mov	r0, r4
    8018:	bl	7f04 <SdioCard::readStart(unsigned long)>
    801c:	cmp	r0, #0
    801e:	beq.n	7fc0 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    8020:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    8022:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    8024:	strb	r3, [r4, #9]
    8026:	b.n	7ff4 <SdioCard::readSector(unsigned long, unsigned char*)+0x7c>
    if (!readData(dst)) {
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
      if (!syncDevice()) {
    8028:	ldr	r3, [r4, #0]
    802a:	mov	r0, r4
    802c:	ldr	r3, [r3, #20]
    802e:	blx	r3
    8030:	cmp	r0, #0
    8032:	bne.n	800c <SdioCard::readSector(unsigned long, unsigned char*)+0x94>
    8034:	b.n	7fc0 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
    8036:	nop
    8038:	.word	0x113a0011
    803c:	.word	0x20016f18
    8040:	.word	0x2001c944
    8044:	.word	0x400b1004

00008048 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    8048:	push	{r4}
  m_spi->beginTransaction(m_spiSettings);
    804a:	ldr	r3, [r0, #0]
    804c:	ldr	r2, [r0, #4]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    804e:	ldrb	r1, [r3, #11]
    8050:	cbz	r1, 8092 <SdSpiArduinoDriver::activate()+0x4a>
			__disable_irq();
    8052:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    8054:	ldrb	r1, [r3, #11]
    8056:	lsls	r0, r1, #31
    8058:	bpl.n	8068 <SdSpiArduinoDriver::activate()+0x20>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    805a:	ldr	r0, [pc, #100]	; (80c0 <SdSpiArduinoDriver::activate()+0x78>)
    805c:	ldr	r1, [r3, #12]
    805e:	ldr	r4, [r0, #0]
    8060:	ands	r1, r4
    8062:	str	r1, [r3, #28]
				NVIC_ICER0 = interruptSave[0];
    8064:	str	r1, [r0, #0]
    8066:	ldrb	r1, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    8068:	lsls	r4, r1, #30
    806a:	bpl.n	807a <SdSpiArduinoDriver::activate()+0x32>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    806c:	ldr	r0, [pc, #84]	; (80c4 <SdSpiArduinoDriver::activate()+0x7c>)
    806e:	ldr	r1, [r3, #16]
    8070:	ldr	r4, [r0, #0]
    8072:	ands	r1, r4
    8074:	str	r1, [r3, #32]
				NVIC_ICER1 = interruptSave[1];
    8076:	str	r1, [r0, #0]
    8078:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    807a:	lsls	r0, r1, #29
    807c:	bpl.n	808c <SdSpiArduinoDriver::activate()+0x44>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    807e:	ldr	r0, [pc, #72]	; (80c8 <SdSpiArduinoDriver::activate()+0x80>)
    8080:	ldr	r1, [r3, #20]
    8082:	ldr	r4, [r0, #0]
    8084:	ands	r1, r4
    8086:	str	r1, [r3, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    8088:	str	r1, [r0, #0]
    808a:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    808c:	lsls	r1, r1, #28
    808e:	bmi.n	80b0 <SdSpiArduinoDriver::activate()+0x68>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    8090:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    8092:	ldr	r3, [r3, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    8094:	ldr	r1, [r3, #12]
    8096:	cmp	r1, r2
    8098:	beq.n	80aa <SdSpiArduinoDriver::activate()+0x62>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    809a:	ldr	r0, [pc, #48]	; (80cc <SdSpiArduinoDriver::activate()+0x84>)
    809c:	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    809e:	ldr	r1, [pc, #48]	; (80d0 <SdSpiArduinoDriver::activate()+0x88>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    80a0:	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    80a2:	orr.w	r0, r2, #1073741824	; 0x40000000
    80a6:	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    80a8:	str	r1, [r3, #0]
}
    80aa:	ldr.w	r4, [sp], #4
    80ae:	bx	lr
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    80b0:	ldr	r0, [pc, #32]	; (80d4 <SdSpiArduinoDriver::activate()+0x8c>)
    80b2:	ldr	r1, [r3, #24]
    80b4:	ldr	r4, [r0, #0]
    80b6:	ands	r1, r4
    80b8:	str	r1, [r3, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    80ba:	str	r1, [r0, #0]
    80bc:	b.n	8090 <SdSpiArduinoDriver::activate()+0x48>
    80be:	nop
    80c0:	.word	0xe000e180
    80c4:	.word	0xe000e184
    80c8:	.word	0xe000e188
    80cc:	.word	0x003f4001
    80d0:	.word	0x803f0000
    80d4:	.word	0xe000e18c

000080d8 <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    80d8:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    80da:	ldrb	r3, [r2, #11]
    80dc:	cbz	r3, 810c <SdSpiArduinoDriver::deactivate()+0x34>
			if (interruptMasksUsed & 0x01) {
    80de:	lsls	r1, r3, #31
    80e0:	bpl.n	80ea <SdSpiArduinoDriver::deactivate()+0x12>
				NVIC_ISER0 = interruptSave[0];
    80e2:	ldr	r3, [pc, #44]	; (8110 <SdSpiArduinoDriver::deactivate()+0x38>)
    80e4:	ldr	r1, [r2, #28]
    80e6:	str	r1, [r3, #0]
    80e8:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    80ea:	lsls	r0, r3, #30
    80ec:	bpl.n	80f6 <SdSpiArduinoDriver::deactivate()+0x1e>
				NVIC_ISER1 = interruptSave[1];
    80ee:	ldr	r3, [pc, #36]	; (8114 <SdSpiArduinoDriver::deactivate()+0x3c>)
    80f0:	ldr	r1, [r2, #32]
    80f2:	str	r1, [r3, #0]
    80f4:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    80f6:	lsls	r1, r3, #29
    80f8:	bpl.n	8102 <SdSpiArduinoDriver::deactivate()+0x2a>
				NVIC_ISER2 = interruptSave[2];
    80fa:	ldr	r3, [pc, #28]	; (8118 <SdSpiArduinoDriver::deactivate()+0x40>)
    80fc:	ldr	r1, [r2, #36]	; 0x24
    80fe:	str	r1, [r3, #0]
    8100:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    8102:	lsls	r3, r3, #28
    8104:	bpl.n	810c <SdSpiArduinoDriver::deactivate()+0x34>
				NVIC_ISER3 = interruptSave[3];
    8106:	ldr	r3, [pc, #20]	; (811c <SdSpiArduinoDriver::deactivate()+0x44>)
    8108:	ldr	r2, [r2, #40]	; 0x28
    810a:	str	r2, [r3, #0]
    810c:	bx	lr
    810e:	nop
    8110:	.word	0xe000e100
    8114:	.word	0xe000e104
    8118:	.word	0xe000e108
    811c:	.word	0xe000e10c

00008120 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
    8120:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    8122:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8124:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    8128:	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    812a:	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data;
    812c:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    812e:	ldr	r3, [r2, #44]	; 0x2c
    8130:	cmp	r3, #0
    8132:	bge.n	812e <SdSpiArduinoDriver::receive()+0xe>
		return port().POPR;
    8134:	ldr	r0, [r2, #56]	; 0x38
  return m_spi->transfer(0XFF);
}
    8136:	uxtb	r0, r0
    8138:	bx	lr
    813a:	nop

0000813c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    813c:	push	{r4, r5, r6, lr}
    813e:	mov	r5, r0
    8140:	mov	r4, r1
    8142:	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    8144:	mov	r0, r1
    8146:	movs	r1, #255	; 0xff
    8148:	bl	c0dc <memset>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    814c:	ldr	r0, [r5, #0]
    814e:	mov	r3, r6
    8150:	mov	r2, r4
    8152:	mov	r1, r4
    8154:	bl	2638 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    8158:	movs	r0, #0
    815a:	pop	{r4, r5, r6, pc}

0000815c <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
    815c:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    815e:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8160:	mov.w	r3, #2147483648	; 0x80000000
    8164:	str	r3, [r2, #44]	; 0x2c
		port().PUSHR = data;
    8166:	str	r1, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    8168:	ldr	r3, [r2, #44]	; 0x2c
    816a:	cmp	r3, #0
    816c:	bge.n	8168 <SdSpiArduinoDriver::send(unsigned char)+0xc>
		return port().POPR;
    816e:	ldr	r3, [r2, #56]	; 0x38
    8170:	bx	lr
    8172:	nop

00008174 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    8174:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    8176:	subs	r5, r2, #1
    8178:	cmp.w	r5, #512	; 0x200
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    817c:	sub.w	sp, sp, #516	; 0x204
    8180:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    8182:	bcc.n	81aa <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    8184:	cbz	r2, 81a4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
    8186:	ldr	r2, [r0, #0]
    8188:	ldr	r2, [r2, #0]
    818a:	adds	r0, r1, r3
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    818c:	mov.w	r4, #2147483648	; 0x80000000
    m_spi->transfer(buf[i]);
    8190:	ldrb.w	r3, [r1], #1
    8194:	str	r4, [r2, #44]	; 0x2c
		port().PUSHR = data;
    8196:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    8198:	ldr	r3, [r2, #44]	; 0x2c
    819a:	cmp	r3, #0
    819c:	bge.n	8198 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x24>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    819e:	cmp	r1, r0
		return port().POPR;
    81a0:	ldr	r3, [r2, #56]	; 0x38
    81a2:	bne.n	8190 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    81a4:	add.w	sp, sp, #516	; 0x204
    81a8:	pop	{r4, r5, pc}
    81aa:	mov	r5, r0
    81ac:	mov	r4, r2
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    81ae:	mov	r0, sp
    81b0:	bl	81cc <memcpy>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    81b4:	mov	r3, r4
    81b6:	mov	r2, sp
    81b8:	mov	r1, sp
    81ba:	ldr	r0, [r5, #0]
    81bc:	bl	2638 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    81c0:	add.w	sp, sp, #516	; 0x204
    81c4:	pop	{r4, r5, pc}
    81c6:	nop

000081c8 <sdCsWrite(unsigned char, bool)>:
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
__attribute__((weak))
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    81c8:	b.w	883c <digitalWrite>

000081cc <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    81cc:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    81ce:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    81d2:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    81d6:	bne.n	82b4 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    81d8:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    81da:	bcc.n	8260 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    81dc:	ldr.w	r3, [r1], #4
    81e0:	str.w	r3, [r0], #4
    81e4:	ldr.w	r3, [r1], #4
    81e8:	str.w	r3, [r0], #4
    81ec:	ldr.w	r3, [r1], #4
    81f0:	str.w	r3, [r0], #4
    81f4:	ldr.w	r3, [r1], #4
    81f8:	str.w	r3, [r0], #4
    81fc:	ldr.w	r3, [r1], #4
    8200:	str.w	r3, [r0], #4
    8204:	ldr.w	r3, [r1], #4
    8208:	str.w	r3, [r0], #4
    820c:	ldr.w	r3, [r1], #4
    8210:	str.w	r3, [r0], #4
    8214:	ldr.w	r3, [r1], #4
    8218:	str.w	r3, [r0], #4
    821c:	ldr.w	r3, [r1], #4
    8220:	str.w	r3, [r0], #4
    8224:	ldr.w	r3, [r1], #4
    8228:	str.w	r3, [r0], #4
    822c:	ldr.w	r3, [r1], #4
    8230:	str.w	r3, [r0], #4
    8234:	ldr.w	r3, [r1], #4
    8238:	str.w	r3, [r0], #4
    823c:	ldr.w	r3, [r1], #4
    8240:	str.w	r3, [r0], #4
    8244:	ldr.w	r3, [r1], #4
    8248:	str.w	r3, [r0], #4
    824c:	ldr.w	r3, [r1], #4
    8250:	str.w	r3, [r0], #4
    8254:	ldr.w	r3, [r1], #4
    8258:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    825c:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    825e:	bcs.n	81dc <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    8260:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    8262:	bcc.n	8288 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8264:	ldr.w	r3, [r1], #4
    8268:	str.w	r3, [r0], #4
    826c:	ldr.w	r3, [r1], #4
    8270:	str.w	r3, [r0], #4
    8274:	ldr.w	r3, [r1], #4
    8278:	str.w	r3, [r0], #4
    827c:	ldr.w	r3, [r1], #4
    8280:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    8284:	subs	r2, #16
	bhs	.Lmid_block_loop
    8286:	bcs.n	8264 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    8288:	adds	r2, #12
	blo	.Lcopy_less_than_4
    828a:	bcc.n	8298 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    828c:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    8290:	str.w	r3, [r0], #4
	subs	r2, #4
    8294:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    8296:	bcs.n	828c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    8298:	adds	r2, #4
	beq	.Ldone
    829a:	beq.n	82ae <memcpy+0xe2>

	lsls	r2, r2, #31
    829c:	lsls	r2, r2, #31
	itt ne
    829e:	itt	ne
	ldrbne  r3, [r1], #1
    82a0:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    82a4:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    82a8:	bcc.n	82ae <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    82aa:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    82ac:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    82ae:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    82b0:	bx	lr
    82b2:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    82b4:	cmp	r2, #8
	blo	.Lbyte_copy
    82b6:	bcc.n	82e0 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    82b8:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    82ba:	beq.n	81d8 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    82bc:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    82c0:	beq.n	81d8 <memcpy+0xc>

	rsb	r3, #4
    82c2:	rsb	r3, r3, #4
	subs	r2, r3
    82c6:	subs	r2, r2, r3

	lsls    r3, r3, #31
    82c8:	lsls	r3, r3, #31
	itt ne
    82ca:	itt	ne
	ldrbne  r3, [r1], #1
    82cc:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    82d0:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    82d4:	bcc.n	81d8 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    82d6:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    82da:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    82de:	b.n	81d8 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    82e0:	subs	r2, #4
	blo	.Lcopy_less_than_4
    82e2:	bcc.n	8298 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    82e4:	subs	r2, #1
	ldrb    r3, [r1], #1
    82e6:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    82ea:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    82ee:	bcs.n	82e4 <memcpy+0x118>

	ldrb	r3, [r1]
    82f0:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    82f2:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    82f4:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    82f6:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    82f8:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    82fa:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    82fc:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    82fe:	bx	lr

00008300 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    8300:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    8302:	ldr	r5, [pc, #60]	; (8340 <usb_serial_getchar+0x40>)
    8304:	ldr	r0, [r5, #0]
    8306:	cbz	r0, 8328 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    8308:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    830a:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    830c:	adds	r1, r0, r3
    830e:	adds	r3, #1
	if (i >= rx_packet->len) {
    8310:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    8312:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    8314:	bcs.n	831c <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    8316:	strh	r3, [r0, #2]
	}
	return c;
    8318:	mov	r0, r4
}
    831a:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    831c:	bl	8afc <usb_free>
		rx_packet = NULL;
    8320:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    8322:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    8324:	str	r3, [r5, #0]
    8326:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    8328:	ldr	r3, [pc, #24]	; (8344 <usb_serial_getchar+0x44>)
    832a:	ldrb	r3, [r3, #0]
    832c:	cbz	r3, 833a <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    832e:	movs	r0, #3
    8330:	bl	8b48 <usb_rx>
    8334:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    8336:	cmp	r0, #0
    8338:	bne.n	8308 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    833a:	mov.w	r0, #4294967295
    833e:	pop	{r3, r4, r5, pc}
    8340:	.word	0x2001c954
    8344:	.word	0x2001ca40

00008348 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    8348:	push	{r4, lr}
	if (!rx_packet) {
    834a:	ldr	r4, [pc, #36]	; (8370 <usb_serial_peekchar+0x28>)
    834c:	ldr	r0, [r4, #0]
    834e:	cbz	r0, 8358 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    8350:	ldrh	r3, [r0, #2]
    8352:	add	r0, r3
    8354:	ldrb	r0, [r0, #8]
}
    8356:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    8358:	ldr	r3, [pc, #24]	; (8374 <usb_serial_peekchar+0x2c>)
    835a:	ldrb	r3, [r3, #0]
    835c:	cbz	r3, 836a <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    835e:	movs	r0, #3
    8360:	bl	8b48 <usb_rx>
    8364:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    8366:	cmp	r0, #0
    8368:	bne.n	8350 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    836a:	mov.w	r0, #4294967295
    836e:	pop	{r4, pc}
    8370:	.word	0x2001c954
    8374:	.word	0x2001ca40

00008378 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    8378:	ldr	r3, [pc, #16]	; (838c <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    837a:	ldr	r2, [pc, #20]	; (8390 <usb_serial_available+0x18>)
    837c:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    837e:	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    8380:	cbz	r3, 838a <usb_serial_available+0x12>
    8382:	ldrh	r2, [r3, #0]
    8384:	ldrh	r3, [r3, #2]
    8386:	subs	r3, r2, r3
    8388:	add	r0, r3
	return count;
}
    838a:	bx	lr
    838c:	.word	0x2001c954
    8390:	.word	0x2001ce34

00008394 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    8394:	ldr	r3, [pc, #44]	; (83c4 <usb_serial_flush_input+0x30>)
    8396:	ldrb	r3, [r3, #0]
    8398:	cbz	r3, 83c2 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    839a:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    839c:	ldr	r4, [pc, #40]	; (83c8 <usb_serial_flush_input+0x34>)
    839e:	ldr	r0, [r4, #0]
    83a0:	cbz	r0, 83b6 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    83a2:	bl	8afc <usb_free>
		rx_packet = NULL;
    83a6:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    83a8:	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    83aa:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    83ac:	bl	8b48 <usb_rx>
		if (!rx) break;
    83b0:	cbz	r0, 83c0 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    83b2:	bl	8afc <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    83b6:	movs	r0, #3
    83b8:	bl	8b48 <usb_rx>
		if (!rx) break;
    83bc:	cmp	r0, #0
    83be:	bne.n	83b2 <usb_serial_flush_input+0x1e>
    83c0:	pop	{r4, pc}
    83c2:	bx	lr
    83c4:	.word	0x2001ca40
    83c8:	.word	0x2001c954

000083cc <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    83cc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    83d0:	ldr.w	r9, [pc, #248]	; 84cc <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    83d4:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    83d6:	movs	r2, #1
    83d8:	strb.w	r2, [r9]
	while (size > 0) {
    83dc:	str	r1, [sp, #4]
    83de:	cbz	r1, 843c <usb_serial_write+0x70>
    83e0:	ldr.w	r8, [pc, #236]	; 84d0 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    83e4:	ldr	r7, [pc, #216]	; (84c0 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    83e6:	ldr	r6, [sp, #4]
    83e8:	mov	fp, r0
		if (!tx_packet) {
    83ea:	ldr.w	r0, [r8]
    83ee:	cbz	r0, 845e <usb_serial_write+0x92>
    83f0:	ldr	r5, [pc, #208]	; (84c4 <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    83f2:	ldrh	r4, [r0, #2]
    83f4:	rsb	r1, r4, #64	; 0x40
    83f8:	cmp	r1, r6
    83fa:	it	cs
    83fc:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    83fe:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    8402:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    8404:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    8408:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    840a:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    840c:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    8410:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    8414:	cbz	r1, 842c <usb_serial_write+0x60>
    8416:	subs	r4, #1
    8418:	add	r2, r4
    841a:	add	r1, fp
    841c:	ldrb.w	r4, [fp], #1
    8420:	strb.w	r4, [r2, #1]!
    8424:	cmp	fp, r1
    8426:	bne.n	841c <usb_serial_write+0x50>
    8428:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    842c:	cmp.w	lr, #63	; 0x3f
    8430:	bhi.n	844a <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    8432:	ldr	r2, [pc, #148]	; (84c8 <usb_serial_write+0xfc>)
    8434:	movs	r1, #5
    8436:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    8438:	cmp	r6, #0
    843a:	bne.n	83ea <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    843c:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    843e:	movs	r3, #0
    8440:	strb.w	r3, [r9]
	return ret;
}
    8444:	add	sp, #12
    8446:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    844a:	movs	r2, #64	; 0x40
    844c:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    844e:	mov	r1, r0
    8450:	movs	r0, #4
    8452:	bl	8c78 <usb_tx>
			tx_packet = NULL;
    8456:	movs	r2, #0
    8458:	str.w	r2, [r8]
    845c:	b.n	8432 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    845e:	ldrb	r2, [r7, #0]
    8460:	cbz	r2, 84ae <usb_serial_write+0xe2>
    8462:	ldr	r5, [pc, #96]	; (84c4 <usb_serial_write+0xf8>)
    8464:	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    8468:	mov.w	sl, #1
    846c:	b.n	847e <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    846e:	subs	r4, #1
    8470:	beq.n	84a0 <usb_serial_write+0xd4>
    8472:	ldrb	r2, [r5, #0]
    8474:	cbnz	r2, 84a0 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    8476:	bl	9b98 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    847a:	ldrb	r2, [r7, #0]
    847c:	cbz	r2, 84ae <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    847e:	movs	r0, #4
    8480:	bl	8b84 <usb_tx_packet_count>
    8484:	cmp	r0, #7
    8486:	bhi.n	846e <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    8488:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    848c:	bl	8abc <usb_malloc>
    8490:	str.w	r0, [r8]
					if (tx_packet) break;
    8494:	cmp	r0, #0
    8496:	bne.n	83f2 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    8498:	ldr	r3, [pc, #48]	; (84cc <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    849a:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    849c:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    849e:	bne.n	8472 <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    84a0:	movs	r3, #1
					return -1;
    84a2:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    84a6:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    84a8:	add	sp, #12
    84aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    84ae:	movs	r3, #0
					return -1;
    84b0:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    84b4:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    84b8:	add	sp, #12
    84ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    84be:	nop
    84c0:	.word	0x2001ca40
    84c4:	.word	0x2001c950
    84c8:	.word	0x2001c948
    84cc:	.word	0x2001c949
    84d0:	.word	0x2001c94c

000084d4 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    84d4:	push	{lr}
    84d6:	sub	sp, #12
    84d8:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    84da:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    84dc:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    84e0:	mov	r0, r3
    84e2:	bl	83cc <usb_serial_write>
}
    84e6:	add	sp, #12
    84e8:	ldr.w	pc, [sp], #4

000084ec <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    84ec:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    84ee:	ldr	r5, [pc, #56]	; (8528 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    84f0:	ldr	r4, [pc, #56]	; (852c <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    84f2:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    84f4:	movs	r3, #1
    84f6:	strb	r3, [r4, #0]
	if (!tx_packet) {
    84f8:	cbz	r0, 8506 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    84fa:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    84fc:	movs	r3, #0
    84fe:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    8500:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    8504:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    8506:	ldr	r3, [pc, #40]	; (8530 <usb_serial_write_buffer_free+0x44>)
    8508:	ldrb	r3, [r3, #0]
    850a:	cbnz	r3, 8512 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    850c:	movs	r0, #0
    850e:	strb	r0, [r4, #0]
			return 0;
    8510:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    8512:	movs	r0, #4
    8514:	bl	8b84 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    8518:	cmp	r0, #7
    851a:	bhi.n	850c <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    851c:	bl	8abc <usb_malloc>
    8520:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    8522:	cmp	r0, #0
    8524:	bne.n	84fa <usb_serial_write_buffer_free+0xe>
    8526:	b.n	850c <usb_serial_write_buffer_free+0x20>
    8528:	.word	0x2001c94c
    852c:	.word	0x2001c949
    8530:	.word	0x2001ca40

00008534 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    8534:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    8536:	ldr	r3, [pc, #68]	; (857c <usb_serial_flush_output+0x48>)
    8538:	ldrb	r3, [r3, #0]
    853a:	cbz	r3, 8560 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    853c:	ldr	r6, [pc, #64]	; (8580 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    853e:	ldr	r5, [pc, #68]	; (8584 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    8540:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    8542:	movs	r7, #1
    8544:	strb	r7, [r5, #0]
	if (tx_packet) {
    8546:	cbz	r4, 8562 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    8548:	ldr	r2, [pc, #60]	; (8588 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    854a:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    854c:	movs	r7, #0
    854e:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    8550:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    8552:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    8554:	movs	r0, #4
    8556:	bl	8c78 <usb_tx>
		tx_packet = NULL;
    855a:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    855c:	movs	r3, #0
    855e:	strb	r3, [r5, #0]
    8560:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    8562:	bl	8abc <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    8566:	ldr	r3, [pc, #32]	; (8588 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    8568:	cbz	r0, 8576 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    856a:	mov	r1, r0
    856c:	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    856e:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    8570:	bl	8c78 <usb_tx>
    8574:	b.n	855c <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    8576:	strb	r7, [r3, #0]
    8578:	b.n	855c <usb_serial_flush_output+0x28>
    857a:	nop
    857c:	.word	0x2001ca40
    8580:	.word	0x2001c94c
    8584:	.word	0x2001c949
    8588:	.word	0x2001c948

0000858c <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    858c:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    858e:	ldr	r3, [pc, #56]	; (85c8 <usb_serial_flush_callback+0x3c>)
    8590:	ldrb	r3, [r3, #0]
    8592:	cbnz	r3, 85b2 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    8594:	ldr	r4, [pc, #52]	; (85cc <usb_serial_flush_callback+0x40>)
    8596:	ldr	r1, [r4, #0]
    8598:	cbz	r1, 85b4 <usb_serial_flush_callback+0x28>
    859a:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    859e:	ldrh	r3, [r1, #2]
    85a0:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    85a2:	movs	r0, #4
    85a4:	bl	8c78 <usb_tx>
		tx_packet = NULL;
    85a8:	str	r5, [r4, #0]
    85aa:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    85ac:	ldr	r3, [pc, #32]	; (85d0 <usb_serial_flush_callback+0x44>)
    85ae:	movs	r2, #1
    85b0:	strb	r2, [r3, #0]
    85b2:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    85b4:	bl	8abc <usb_malloc>
		if (tx) {
    85b8:	cmp	r0, #0
    85ba:	beq.n	85ac <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    85bc:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    85be:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    85c2:	movs	r0, #4
    85c4:	b.w	8c78 <usb_tx>
    85c8:	.word	0x2001c949
    85cc:	.word	0x2001c94c
    85d0:	.word	0x2001c948

000085d4 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    85d4:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    85d6:	ldr	r0, [pc, #164]	; (867c <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    85d8:	ldr	r2, [pc, #164]	; (8680 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    85da:	ldr	r3, [pc, #168]	; (8684 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    85dc:	ldr	r5, [pc, #168]	; (8688 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    85de:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    85e0:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    85e2:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    85e4:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    85e6:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    85e8:	ldr	r4, [pc, #160]	; (868c <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    85ea:	cmp	r3, #8
    85ec:	beq.n	8650 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    85ee:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    85f0:	ldr	r0, [pc, #156]	; (8690 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    85f2:	ldr	r1, [pc, #160]	; (8694 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    85f4:	beq.n	8666 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    85f6:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    85f8:	ite	eq
    85fa:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    85fc:	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    85fe:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    8600:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    8602:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    8604:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    8606:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    8608:	ldr	r3, [pc, #140]	; (8698 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    860a:	ldr	r1, [pc, #144]	; (869c <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    860c:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    860e:	ldr	r2, [pc, #144]	; (86a0 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    8610:	cbz	r3, 8642 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    8612:	movs	r3, #1
    8614:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    8616:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    8618:	ldr	r3, [pc, #136]	; (86a4 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    861a:	ldr	r1, [pc, #140]	; (86a8 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    861c:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    861e:	ldr	r2, [pc, #140]	; (86ac <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    8620:	cmp	r3, #1
    8622:	bls.n	8672 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    8624:	cmp	r3, #4
    8626:	bls.n	8648 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    8628:	cmp	r3, #8
    862a:	bls.n	866a <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    862c:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    862e:	ite	ls
    8630:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    8632:	movhi	r3, #135	; 0x87
    8634:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    8636:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    8638:	ldr	r3, [pc, #116]	; (86b0 <analog_init+0xdc>)
    863a:	movs	r2, #1
    863c:	strb	r2, [r3, #0]
}
    863e:	pop	{r4, r5}
    8640:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    8642:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    8644:	str	r3, [r2, #0]
    8646:	b.n	8618 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    8648:	movs	r3, #132	; 0x84
    864a:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    864c:	str	r3, [r2, #0]
    864e:	b.n	8638 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8650:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8654:	ldr	r1, [pc, #60]	; (8694 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8656:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8658:	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    865a:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    865c:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    865e:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    8660:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8662:	str	r3, [r1, #0]
    8664:	b.n	8608 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    8666:	movs	r2, #57	; 0x39
    8668:	b.n	865a <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    866a:	movs	r3, #133	; 0x85
    866c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    866e:	str	r3, [r2, #0]
    8670:	b.n	8638 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    8672:	movs	r3, #128	; 0x80
    8674:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    8676:	str	r3, [r2, #0]
    8678:	b.n	8638 <analog_init+0x64>
    867a:	nop
    867c:	.word	0x40074000
    8680:	.word	0x40074001
    8684:	.word	0x20016f19
    8688:	.word	0x4003b008
    868c:	.word	0x4003b00c
    8690:	.word	0x400bb008
    8694:	.word	0x400bb00c
    8698:	.word	0x2001c95a
    869c:	.word	0x4003b020
    86a0:	.word	0x400bb020
    86a4:	.word	0x20016f1a
    86a8:	.word	0x4003b024
    86ac:	.word	0x400bb024
    86b0:	.word	0x2001c959

000086b4 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    86b4:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    86b6:	ldr	r4, [pc, #64]	; (86f8 <fault_isr+0x44>)
    86b8:	b.n	86cc <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    86ba:	ldr	r3, [r4, #0]
    86bc:	lsls	r1, r3, #21
    86be:	bmi.n	86dc <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    86c0:	ldr	r3, [r4, #0]
    86c2:	lsls	r2, r3, #20
    86c4:	bmi.n	86e6 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    86c6:	ldr	r3, [r4, #0]
    86c8:	lsls	r3, r3, #19
    86ca:	bmi.n	86f0 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    86cc:	ldr	r3, [r4, #0]
    86ce:	lsls	r0, r3, #13
    86d0:	bpl.n	86ba <fault_isr+0x6>
    86d2:	bl	8cfc <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    86d6:	ldr	r3, [r4, #0]
    86d8:	lsls	r1, r3, #21
    86da:	bpl.n	86c0 <fault_isr+0xc>
    86dc:	bl	a500 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    86e0:	ldr	r3, [r4, #0]
    86e2:	lsls	r2, r3, #20
    86e4:	bpl.n	86c6 <fault_isr+0x12>
    86e6:	bl	a2dc <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    86ea:	ldr	r3, [r4, #0]
    86ec:	lsls	r3, r3, #19
    86ee:	bpl.n	86cc <fault_isr+0x18>
    86f0:	bl	a7f8 <uart2_status_isr>
    86f4:	b.n	86cc <fault_isr+0x18>
    86f6:	nop
    86f8:	.word	0x40048034

000086fc <unused_isr>:
	}
}

void unused_isr(void)
{
    86fc:	push	{r3, lr}
	fault_isr();
    86fe:	bl	86b4 <fault_isr>
    8702:	nop

00008704 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    8704:	ldr	r3, [pc, #4]	; (870c <startup_early_hook+0x8>)
    8706:	movs	r2, #16
    8708:	strh	r2, [r3, #0]
    870a:	bx	lr
    870c:	.word	0x40052000

00008710 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    8710:	bx	lr
    8712:	nop

00008714 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    8714:	ldr	r1, [pc, #36]	; (873c <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    8716:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    8718:	ldr	r3, [r1, #0]
	if (incr != 0) {
    871a:	cbz	r0, 872a <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    871c:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    871e:	add	r0, r3
    8720:	sub.w	r2, r2, #8192	; 0x2000
    8724:	cmp	r0, r2
    8726:	bcs.n	872e <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    8728:	str	r0, [r1, #0]
	}
	return prev;
    872a:	mov	r0, r3
}
    872c:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    872e:	bl	b89c <__errno>
    8732:	movs	r3, #12
    8734:	str	r3, [r0, #0]
			return (void *)-1;
    8736:	mov.w	r0, #4294967295
    873a:	pop	{r3, pc}
    873c:	.word	0x20016f1c

00008740 <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
    8740:	b.n	8740 <__cxa_pure_virtual>
    8742:	nop

00008744 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    8744:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    8746:	ldr	r3, [pc, #68]	; (878c <digitalWrite.part.1+0x48>)
    8748:	ldr.w	r2, [r3, r0, lsl #3]
    874c:	ldrb.w	r4, [r2, #640]	; 0x280
    8750:	cbz	r4, 8760 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    8752:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    8754:	cbz	r1, 8776 <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    8756:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    875a:	ldr.w	r4, [sp], #4
    875e:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    8760:	add.w	r3, r3, r0, lsl #3
    8764:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    8766:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    8768:	cbnz	r1, 8780 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    876a:	bic.w	r2, r2, #2
    876e:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    8770:	ldr.w	r4, [sp], #4
    8774:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    8776:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    877a:	ldr.w	r4, [sp], #4
    877e:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    8780:	orr.w	r2, r2, #3
    8784:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    8786:	ldr.w	r4, [sp], #4
    878a:	bx	lr
    878c:	.word	0x000134b4

00008790 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    8790:	ldr	r2, [pc, #112]	; (8804 <pinMode.part.2+0x74>)
    8792:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    8796:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    8798:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    879a:	beq.n	87c0 <pinMode.part.2+0x30>
    879c:	cmp	r1, #4
    879e:	beq.n	87d8 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    87a0:	ldr.w	r0, [r2, r0, lsl #3]
    87a4:	movs	r2, #0
    87a6:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    87aa:	cbz	r1, 87b8 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    87ac:	cmp	r1, #2
    87ae:	beq.n	87f2 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    87b0:	cmp	r1, #3
    87b2:	beq.n	87fa <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    87b4:	str	r2, [r3, #0]
    87b6:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    87b8:	mov.w	r2, #256	; 0x100
    87bc:	str	r2, [r3, #0]
    87be:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    87c0:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    87c4:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    87c8:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    87cc:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    87ce:	ldr	r2, [r3, #0]
    87d0:	bic.w	r2, r2, #32
    87d4:	str	r2, [r3, #0]
    87d6:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    87d8:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    87dc:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    87e0:	movs	r0, #1
    87e2:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    87e6:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    87e8:	ldr	r2, [r3, #0]
    87ea:	orr.w	r2, r2, #32
    87ee:	str	r2, [r3, #0]
    87f0:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    87f2:	movw	r2, #259	; 0x103
    87f6:	str	r2, [r3, #0]
    87f8:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    87fa:	mov.w	r2, #258	; 0x102
    87fe:	str	r2, [r3, #0]
    8800:	bx	lr
    8802:	nop
    8804:	.word	0x000134b4

00008808 <attachInterruptVector>:
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    8808:	adds	r0, #16
    880a:	ldr	r3, [pc, #8]	; (8814 <attachInterruptVector+0xc>)
    880c:	str.w	r1, [r3, r0, lsl #2]
    8810:	bx	lr
    8812:	nop
    8814:	.word	0x20016800

00008818 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    8818:	push	{r4, r5}
	RTC_SR = 0;
    881a:	ldr	r3, [pc, #20]	; (8830 <rtc_set+0x18>)
	RTC_TPR = 0;
    881c:	ldr	r5, [pc, #20]	; (8834 <rtc_set+0x1c>)
	RTC_TSR = t;
    881e:	ldr	r4, [pc, #24]	; (8838 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    8820:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    8822:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    8824:	str	r2, [r3, #0]
	RTC_TPR = 0;
    8826:	str	r2, [r5, #0]
	RTC_TSR = t;
    8828:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    882a:	str	r1, [r3, #0]
}
    882c:	pop	{r4, r5}
    882e:	bx	lr
    8830:	.word	0x4003d014
    8834:	.word	0x4003d004
    8838:	.word	0x4003d000

0000883c <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    883c:	cmp	r0, #63	; 0x3f
    883e:	bhi.n	8844 <digitalWrite+0x8>
    8840:	b.w	8744 <digitalWrite.part.1>
    8844:	bx	lr
    8846:	nop

00008848 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    8848:	cmp	r0, #63	; 0x3f
    884a:	bhi.n	885a <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    884c:	ldr	r3, [pc, #16]	; (8860 <digitalRead+0x18>)
    884e:	ldr.w	r3, [r3, r0, lsl #3]
    8852:	ldrb.w	r0, [r3, #512]	; 0x200
    8856:	uxtb	r0, r0
    8858:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    885a:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    885c:	bx	lr
    885e:	nop
    8860:	.word	0x000134b4

00008864 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    8864:	cmp	r0, #63	; 0x3f
    8866:	bhi.n	886c <pinMode+0x8>
    8868:	b.w	8790 <pinMode.part.2>
    886c:	bx	lr
    886e:	nop

00008870 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    8870:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    8872:	ldr	r1, [pc, #48]	; (88a4 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    8874:	ldr	r3, [pc, #48]	; (88a8 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    8876:	ldr	r2, [pc, #52]	; (88ac <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    8878:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    887a:	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    887c:	ldr	r2, [r2, #0]
	__enable_irq();
    887e:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    8880:	lsls	r2, r2, #5
    8882:	bpl.n	888a <micros+0x1a>
    8884:	cmp	r3, #50	; 0x32
    8886:	it	hi
    8888:	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    888a:	ldr	r1, [pc, #36]	; (88b0 <micros+0x40>)
    888c:	rsb	r3, r3, #95744	; 0x17600
    8890:	mov.w	r2, #1000	; 0x3e8
    8894:	adds	r3, #255	; 0xff
    8896:	umull	r1, r3, r1, r3
    889a:	mul.w	r0, r2, r0
}
    889e:	add.w	r0, r0, r3, lsr #6
    88a2:	bx	lr
    88a4:	.word	0x2001c95c
    88a8:	.word	0xe000e018
    88ac:	.word	0xe000ed04
    88b0:	.word	0xaaaaaaab

000088b4 <delay>:

void delay(uint32_t ms)
{
    88b4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    88b8:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    88ba:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    88bc:	ldr	r7, [pc, #128]	; (8940 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    88be:	ldr	r3, [pc, #132]	; (8944 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    88c0:	ldr	r2, [pc, #132]	; (8948 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    88c2:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    88c4:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    88c6:	ldr	r2, [r2, #0]
	__enable_irq();
    88c8:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    88ca:	lsls	r2, r2, #5
    88cc:	bpl.n	88d4 <delay+0x20>
    88ce:	cmp	r3, #50	; 0x32
    88d0:	it	hi
    88d2:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    88d4:	cbz	r5, 893c <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    88d6:	rsb	r3, r3, #95744	; 0x17600
    88da:	ldr	r6, [pc, #112]	; (894c <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    88dc:	ldr.w	r9, [pc, #100]	; 8944 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    88e0:	ldr.w	r8, [pc, #100]	; 8948 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    88e4:	adds	r3, #255	; 0xff
    88e6:	mov.w	r2, #1000	; 0x3e8
    88ea:	umull	r1, r3, r6, r3
    88ee:	mul.w	r4, r2, r4
    88f2:	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    88f6:	cpsid	i
	current = SYST_CVR;
    88f8:	ldr.w	r1, [r9]
	count = systick_millis_count;
    88fc:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    88fe:	ldr.w	lr, [r8]
	__enable_irq();
    8902:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    8904:	rsb	r3, r1, #95744	; 0x17600
    8908:	adds	r3, #255	; 0xff
    890a:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    890e:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    8912:	rsb	r3, r4, r3, lsr #6
    8916:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    891a:	beq.n	8922 <delay+0x6e>
    891c:	cmp	r1, #50	; 0x32
    891e:	it	hi
    8920:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    8922:	mla	r3, r0, r2, r3
    8926:	cmp.w	r3, #1000	; 0x3e8
    892a:	bcc.n	8936 <delay+0x82>
				ms--;
				if (ms == 0) return;
    892c:	subs	r5, #1
    892e:	beq.n	893c <delay+0x88>
				start += 1000;
    8930:	add.w	r4, r4, #1000	; 0x3e8
    8934:	b.n	88f6 <delay+0x42>
			}
			yield();
    8936:	bl	9b98 <yield>
		}
    893a:	b.n	88f6 <delay+0x42>
    893c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8940:	.word	0x2001c95c
    8944:	.word	0xe000e018
    8948:	.word	0xe000ed04
    894c:	.word	0xaaaaaaab

00008950 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    8950:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    8952:	ldr	r3, [pc, #312]	; (8a8c <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    8954:	ldr	r0, [pc, #312]	; (8a90 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    8956:	ldr.w	ip, [pc, #348]	; 8ab4 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    895a:	ldr	r4, [pc, #312]	; (8a94 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    895c:	ldr	r1, [pc, #312]	; (8a98 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    895e:	ldr.w	lr, [pc, #344]	; 8ab8 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    8962:	ldr	r6, [pc, #312]	; (8a9c <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    8964:	ldr	r5, [pc, #312]	; (8aa0 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    8966:	ldr	r7, [pc, #316]	; (8aa4 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    8968:	mov.w	r2, #134217728	; 0x8000000
    896c:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    896e:	mov.w	r2, #268435456	; 0x10000000
    8972:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    8974:	mov.w	r2, #536870912	; 0x20000000
    8978:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    897a:	mov.w	r2, #1073741824	; 0x40000000
    897e:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    8980:	mov.w	r2, #2147483648	; 0x80000000
    8984:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    8986:	movs	r2, #0
    8988:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    898a:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    898c:	movw	r0, #49151	; 0xbfff
    8990:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    8994:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    8998:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    899a:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    899e:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    89a0:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    89a2:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    89a4:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    89a8:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    89aa:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    89ae:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    89b0:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    89b4:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    89b6:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    89ba:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    89be:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    89c2:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    89c6:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    89ca:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    89cc:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    89d0:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    89d2:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    89d4:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    89d6:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    89da:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    89dc:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    89de:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    89e0:	ldr	r4, [pc, #196]	; (8aa8 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    89e2:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    89e4:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    89e6:	movs	r1, #9
    89e8:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    89ea:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    89ee:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    89f2:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    89f4:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    89f6:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    89f8:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    89fa:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    89fc:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    89fe:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    8a02:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    8a06:	add.w	r7, r7, #520192	; 0x7f000
    8a0a:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    8a0c:	addw	r4, r4, #2044	; 0x7fc
    8a10:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    8a12:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    8a14:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    8a16:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    8a18:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    8a1c:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    8a1e:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    8a22:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    8a26:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    8a28:	sub.w	r4, r4, #460800	; 0x70800
    8a2c:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    8a30:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    8a32:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    8a34:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    8a38:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    8a3a:	ldr	r0, [pc, #112]	; (8aac <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    8a3c:	orr.w	r1, r1, #512	; 0x200
    8a40:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    8a42:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    8a44:	ldr	r4, [pc, #104]	; (8ab0 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    8a46:	add.w	lr, lr, #65280	; 0xff00
    8a4a:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    8a4e:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    8a52:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    8a56:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    8a5a:	orr.w	r1, r1, #33554432	; 0x2000000
    8a5e:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    8a60:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    8a64:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    8a68:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    8a6a:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    8a6c:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    8a6e:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    8a70:	str	r2, [r4, #0]
#endif
	analog_init();
    8a72:	bl	85d4 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    8a76:	movs	r0, #25
    8a78:	bl	88b4 <delay>
	usb_init();
    8a7c:	bl	97c8 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    8a80:	movw	r0, #275	; 0x113
}
    8a84:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    8a88:	b.w	88b4 <delay>
    8a8c:	.word	0xe000e104
    8a90:	.word	0x40038004
    8a94:	.word	0x40038014
    8a98:	.word	0x4003801c
    8a9c:	.word	0x40038024
    8aa0:	.word	0x4003802c
    8aa4:	.word	0x40038034
    8aa8:	.word	0x40038000
    8aac:	.word	0x40048004
    8ab0:	.word	0x400c9000
    8ab4:	.word	0x40038008
    8ab8:	.word	0x4003800c

00008abc <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    8abc:	cpsid	i
	avail = usb_buffer_available;
    8abe:	ldr	r0, [pc, #52]	; (8af4 <usb_malloc+0x38>)
    8ac0:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    8ac2:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    8ac6:	cmp	r3, #11
    8ac8:	bgt.n	8aec <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    8aca:	mov.w	r1, #2147483648	; 0x80000000
    8ace:	lsrs	r1, r3
    8ad0:	bic.w	r2, r2, r1
    8ad4:	str	r2, [r0, #0]
	__enable_irq();
    8ad6:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    8ad8:	ldr	r0, [pc, #28]	; (8af8 <usb_malloc+0x3c>)
    8ada:	add.w	r3, r3, r3, lsl #3
    8ade:	lsls	r3, r3, #3
    8ae0:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    8ae2:	movs	r1, #0
    8ae4:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    8ae6:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    8ae8:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    8aea:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    8aec:	cpsie	i
		return NULL;
    8aee:	movs	r0, #0
    8af0:	bx	lr
    8af2:	nop
    8af4:	.word	0x20016f20
    8af8:	.word	0x200169d0

00008afc <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    8afc:	ldr	r3, [pc, #52]	; (8b34 <usb_free+0x38>)
    8afe:	ldr	r2, [pc, #56]	; (8b38 <usb_free+0x3c>)
    8b00:	subs	r3, r0, r3
    8b02:	umull	r2, r3, r2, r3
    8b06:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    8b08:	cmp	r3, #11
    8b0a:	bhi.n	8b26 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    8b0c:	ldr	r2, [pc, #44]	; (8b3c <usb_free+0x40>)
    8b0e:	ldrb	r2, [r2, #0]
    8b10:	cbnz	r2, 8b28 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    8b12:	cpsid	i
	usb_buffer_available |= mask;
    8b14:	ldr	r0, [pc, #40]	; (8b40 <usb_free+0x44>)
    8b16:	mov.w	r1, #2147483648	; 0x80000000
    8b1a:	ldr	r2, [r0, #0]
    8b1c:	lsr.w	r3, r1, r3
    8b20:	orrs	r2, r3
    8b22:	str	r2, [r0, #0]
	__enable_irq();
    8b24:	cpsie	i
    8b26:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    8b28:	ldr	r2, [pc, #24]	; (8b44 <usb_free+0x48>)
    8b2a:	ldrb	r2, [r2, #0]
    8b2c:	cmp	r2, #0
    8b2e:	beq.n	8b12 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    8b30:	b.w	8bb0 <usb_rx_memory>
    8b34:	.word	0x200169d0
    8b38:	.word	0x38e38e39
    8b3c:	.word	0x2001ca35
    8b40:	.word	0x20016f20
    8b44:	.word	0x2001ca40

00008b48 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    8b48:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    8b4a:	cmp	r3, #3
    8b4c:	bhi.n	8b78 <usb_rx+0x30>
	__disable_irq();
    8b4e:	cpsid	i
	ret = rx_first[endpoint];
    8b50:	ldr	r1, [pc, #40]	; (8b7c <usb_rx+0x34>)
    8b52:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    8b56:	cbz	r0, 8b74 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    8b58:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    8b5a:	ldr	r4, [pc, #36]	; (8b80 <usb_rx+0x38>)
    8b5c:	ldrh	r5, [r0, #0]
    8b5e:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    8b62:	ldr	r6, [r0, #4]
    8b64:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    8b68:	subs	r2, r2, r5
    8b6a:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    8b6e:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    8b70:	pop	{r4, r5, r6}
    8b72:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    8b74:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    8b76:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    8b78:	movs	r0, #0
    8b7a:	bx	lr
    8b7c:	.word	0x2001c9b8
    8b80:	.word	0x2001ce34

00008b84 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    8b84:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    8b86:	cmp	r0, #3
    8b88:	bhi.n	8ba2 <usb_tx_packet_count+0x1e>
	__disable_irq();
    8b8a:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    8b8c:	ldr	r3, [pc, #28]	; (8bac <usb_tx_packet_count+0x28>)
    8b8e:	ldr.w	r3, [r3, r0, lsl #2]
    8b92:	cbz	r3, 8ba6 <usb_tx_packet_count+0x22>
    8b94:	movs	r0, #0
    8b96:	ldr	r3, [r3, #4]
    8b98:	adds	r0, #1
    8b9a:	cmp	r3, #0
    8b9c:	bne.n	8b96 <usb_tx_packet_count+0x12>
	__enable_irq();
    8b9e:	cpsie	i
	return count;
    8ba0:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    8ba2:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    8ba4:	bx	lr
// https://forum.pjrc.com/threads/58663?p=223513&viewfull=1#post223513
//
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    8ba6:	mov	r0, r3
    8ba8:	b.n	8b9e <usb_tx_packet_count+0x1a>
    8baa:	nop
    8bac:	.word	0x2001ca0c

00008bb0 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    8bb0:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    8bb2:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    8bb4:	ldr	r2, [pc, #172]	; (8c64 <usb_rx_memory+0xb4>)
    8bb6:	ldrb	r3, [r2, #0]
    8bb8:	lsls	r5, r3, #28
    8bba:	bpl.n	8bca <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    8bbc:	ldr	r3, [pc, #168]	; (8c68 <usb_rx_memory+0xb8>)
    8bbe:	ldr	r1, [r3, #32]
    8bc0:	cmp	r1, #0
    8bc2:	beq.n	8c32 <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    8bc4:	ldr	r1, [r3, #40]	; 0x28
    8bc6:	cmp	r1, #0
    8bc8:	beq.n	8c4e <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    8bca:	ldrb	r3, [r2, #1]
    8bcc:	lsls	r4, r3, #28
    8bce:	bpl.n	8bde <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    8bd0:	ldr	r3, [pc, #148]	; (8c68 <usb_rx_memory+0xb8>)
    8bd2:	ldr	r1, [r3, #64]	; 0x40
    8bd4:	cmp	r1, #0
    8bd6:	beq.n	8c56 <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    8bd8:	ldr	r1, [r3, #72]	; 0x48
    8bda:	cmp	r1, #0
    8bdc:	beq.n	8c52 <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    8bde:	ldrb	r3, [r2, #2]
    8be0:	lsls	r1, r3, #28
    8be2:	bpl.n	8bf0 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    8be4:	ldr	r3, [pc, #128]	; (8c68 <usb_rx_memory+0xb8>)
    8be6:	ldr	r1, [r3, #96]	; 0x60
    8be8:	cmp	r1, #0
    8bea:	beq.n	8c5a <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    8bec:	ldr	r1, [r3, #104]	; 0x68
    8bee:	cbz	r1, 8c14 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    8bf0:	ldrb	r3, [r2, #3]
    8bf2:	lsls	r3, r3, #28
    8bf4:	bpl.n	8c06 <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    8bf6:	ldr	r3, [pc, #112]	; (8c68 <usb_rx_memory+0xb8>)
    8bf8:	ldr.w	r2, [r3, #128]	; 0x80
    8bfc:	cbz	r2, 8c5e <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    8bfe:	ldr.w	r2, [r3, #136]	; 0x88
    8c02:	movs	r1, #17
    8c04:	cbz	r2, 8c16 <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    8c06:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    8c08:	ldr	r3, [pc, #96]	; (8c6c <usb_rx_memory+0xbc>)
    8c0a:	movs	r2, #0
    8c0c:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    8c0e:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    8c10:	b.w	8afc <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    8c14:	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    8c16:	ldr	r4, [pc, #84]	; (8c6c <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    8c18:	ldr	r5, [pc, #84]	; (8c70 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    8c1a:	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    8c1c:	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    8c20:	add.w	r3, r3, r1, lsl #3
    8c24:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    8c26:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    8c28:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    8c2a:	strb	r2, [r4, #0]
				__enable_irq();
    8c2c:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    8c2e:	pop	{r4, r5}
    8c30:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    8c32:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    8c34:	ldr	r4, [pc, #52]	; (8c6c <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    8c36:	ldr	r5, [pc, #60]	; (8c74 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    8c38:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    8c3a:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    8c3e:	add.w	r3, r3, r2, lsl #3
    8c42:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    8c44:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    8c46:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    8c48:	strb	r2, [r4, #0]
				__enable_irq();
    8c4a:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    8c4c:	b.n	8c2e <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    8c4e:	movs	r1, #5
    8c50:	b.n	8c16 <usb_rx_memory+0x66>
    8c52:	movs	r1, #9
    8c54:	b.n	8c16 <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    8c56:	movs	r2, #8
    8c58:	b.n	8c34 <usb_rx_memory+0x84>
    8c5a:	movs	r2, #12
    8c5c:	b.n	8c34 <usb_rx_memory+0x84>
    8c5e:	movs	r2, #16
    8c60:	b.n	8c34 <usb_rx_memory+0x84>
    8c62:	nop
    8c64:	.word	0x000136e0
    8c68:	.word	0x1fff0000
    8c6c:	.word	0x2001ca35
    8c70:	.word	0x004000c8
    8c74:	.word	0x00400088

00008c78 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    8c78:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    8c7a:	cmp	r3, #3
    8c7c:	bhi.n	8cba <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    8c7e:	ldr	r2, [pc, #108]	; (8cec <usb_tx+0x74>)
    8c80:	lsls	r0, r0, #5
    8c82:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    8c86:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    8c88:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    8c8a:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    8c8c:	ldr	r4, [pc, #96]	; (8cf0 <usb_tx+0x78>)
    8c8e:	ldrb	r2, [r4, r3]
    8c90:	cmp	r2, #3
    8c92:	bhi.n	8ccc <usb_tx+0x54>
    8c94:	tbb	[pc, r2]
    8c98:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    8c9c:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    8c9e:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    8ca0:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    8ca2:	tst.w	r0, #8
    8ca6:	ite	ne
    8ca8:	movne	r3, #200	; 0xc8
    8caa:	moveq	r3, #136	; 0x88
    8cac:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    8cb0:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    8cb2:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    8cb4:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    8cb6:	cpsie	i
}
    8cb8:	pop	{r4, r5}
    8cba:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    8cbc:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    8cbe:	movs	r2, #2
		break;
    8cc0:	b.n	8c9e <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    8cc2:	movs	r2, #5
    8cc4:	b.n	8c9e <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    8cc6:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    8cc8:	movs	r2, #4
		break;
    8cca:	b.n	8c9e <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    8ccc:	ldr	r2, [pc, #36]	; (8cf4 <usb_tx+0x7c>)
    8cce:	ldr.w	r0, [r2, r3, lsl #2]
    8cd2:	cbz	r0, 8ce4 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    8cd4:	ldr	r2, [pc, #32]	; (8cf8 <usb_tx+0x80>)
    8cd6:	ldr.w	r0, [r2, r3, lsl #2]
    8cda:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    8cdc:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    8ce0:	cpsie	i
		return;
    8ce2:	b.n	8cb8 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    8ce4:	str.w	r1, [r2, r3, lsl #2]
    8ce8:	ldr	r2, [pc, #12]	; (8cf8 <usb_tx+0x80>)
    8cea:	b.n	8cdc <usb_tx+0x64>
    8cec:	.word	0x1fff0000
    8cf0:	.word	0x2001ca44
    8cf4:	.word	0x2001ca0c
    8cf8:	.word	0x2001ca1c

00008cfc <usb_isr>:
}



void usb_isr(void)
{
    8cfc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    8d00:	ldr.w	fp, [pc, #792]	; 901c <usb_isr+0x320>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    8d04:	ldr.w	sl, [pc, #792]	; 9020 <usb_isr+0x324>
}



void usb_isr(void)
{
    8d08:	sub	sp, #28
    8d0a:	b.n	8d96 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    8d0c:	ldr	r7, [pc, #696]	; (8fc8 <usb_isr+0x2cc>)
    8d0e:	mov.w	r8, r3, lsr #2
    8d12:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    8d16:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    8d18:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    8d1c:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    8d20:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    8d22:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    8d26:	and.w	r4, r3, #255	; 0xff
    8d2a:	cmp	r3, #0
    8d2c:	bne.w	8f38 <usb_isr+0x23c>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    8d30:	ldr.w	r3, [r7, r8, lsl #3]
    8d34:	lsrs	r3, r3, #16
    8d36:	uxth	r1, r3
    8d38:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    8d3c:	cmp	r3, #0
    8d3e:	beq.w	8f26 <usb_isr+0x22a>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    8d42:	ldr	r3, [pc, #648]	; (8fcc <usb_isr+0x2d0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    8d44:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    8d48:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    8d4c:	ldr.w	r2, [r3, r6, lsl #2]
    8d50:	cmp	r2, #0
    8d52:	beq.w	9032 <usb_isr+0x336>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    8d56:	ldr	r5, [pc, #632]	; (8fd0 <usb_isr+0x2d4>)
    8d58:	ldr.w	r3, [r5, r6, lsl #2]
    8d5c:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    8d5e:	ldr	r4, [pc, #628]	; (8fd4 <usb_isr+0x2d8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    8d60:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    8d64:	ldrh.w	r3, [r4, r6, lsl #1]
    8d68:	add	r1, r3
    8d6a:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    8d6e:	bl	8abc <usb_malloc>
					if (packet) {
    8d72:	cmp	r0, #0
    8d74:	beq.w	9024 <usb_isr+0x328>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    8d78:	ldr	r2, [pc, #604]	; (8fd8 <usb_isr+0x2dc>)
    8d7a:	ldr	r3, [pc, #608]	; (8fdc <usb_isr+0x2e0>)
    8d7c:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    8d80:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    8d84:	it	ne
    8d86:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    8d88:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    8d8c:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    8d90:	movs	r3, #8
    8d92:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    8d96:	ldrb.w	r4, [fp]
    8d9a:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    8d9c:	lsls	r1, r4, #29
    8d9e:	bpl.n	8dd8 <usb_isr+0xdc>
		if (usb_configuration) {
    8da0:	ldr	r3, [pc, #572]	; (8fe0 <usb_isr+0x2e4>)
    8da2:	ldrb	r3, [r3, #0]
    8da4:	cbz	r3, 8dd2 <usb_isr+0xd6>
			t = usb_reboot_timer;
    8da6:	ldr	r1, [pc, #572]	; (8fe4 <usb_isr+0x2e8>)
    8da8:	ldrb	r2, [r1, #0]
			if (t) {
    8daa:	and.w	r3, r2, #255	; 0xff
    8dae:	cbz	r2, 8dbc <usb_isr+0xc0>
				usb_reboot_timer = --t;
    8db0:	subs	r3, #1
    8db2:	uxtb	r3, r3
    8db4:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    8db6:	cmp	r3, #0
    8db8:	beq.w	979a <usb_isr+0xa9e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    8dbc:	ldr	r1, [pc, #552]	; (8fe8 <usb_isr+0x2ec>)
    8dbe:	ldrb	r2, [r1, #0]
			if (t) {
    8dc0:	and.w	r3, r2, #255	; 0xff
    8dc4:	cbz	r2, 8dd2 <usb_isr+0xd6>
				usb_cdc_transmit_flush_timer = --t;
    8dc6:	subs	r3, #1
    8dc8:	uxtb	r3, r3
    8dca:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    8dcc:	cmp	r3, #0
    8dce:	beq.w	8fc0 <usb_isr+0x2c4>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    8dd2:	movs	r3, #4
    8dd4:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    8dd8:	and.w	r3, r4, #8
    8ddc:	and.w	r2, r3, #255	; 0xff
    8de0:	cmp	r3, #0
    8de2:	beq.w	8f92 <usb_isr+0x296>
		uint8_t endpoint;
		stat = USB0_STAT;
    8de6:	ldrb.w	r3, [sl]
    8dea:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    8dec:	lsrs	r6, r3, #4
    8dee:	bne.n	8d0c <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    8df0:	lsrs	r4, r3, #2
    8df2:	ldr.w	r9, [pc, #468]	; 8fc8 <usb_isr+0x2cc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    8df6:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    8dfa:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    8dfe:	ubfx	r2, r2, #2, #4
    8e02:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    8e04:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    8e06:	cmp	r2, #12
    8e08:	bhi.n	8f08 <usb_isr+0x20c>
    8e0a:	tbb	[pc, r2]
    8e0e:	.short	0x8181
    8e10:	.word	0x7d7d7d7d
    8e14:	.word	0x7d477d7d
    8e18:	.short	0x7d7d
    8e1a:	.byte	0x07
    8e1b:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    8e1c:	ldr	r0, [r1, #0]
    8e1e:	ldr	r5, [pc, #460]	; (8fec <usb_isr+0x2f0>)
		setup.word2 = *(uint32_t *)(buf + 4);
    8e20:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    8e22:	ldr	r7, [pc, #460]	; (8ff0 <usb_isr+0x2f4>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    8e24:	ldr	r6, [pc, #460]	; (8ff4 <usb_isr+0x2f8>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    8e26:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    8e28:	uxth	r1, r0
    8e2a:	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    8e2e:	ldr	r3, [pc, #424]	; (8fd8 <usb_isr+0x2dc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    8e30:	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    8e32:	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    8e36:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    8e38:	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    8e3a:	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    8e3e:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    8e40:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    8e44:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    8e48:	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    8e4c:	ldr	r4, [pc, #376]	; (8fc8 <usb_isr+0x2cc>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    8e4e:	bhi.w	903a <usb_isr+0x33e>
    8e52:	cmp.w	r1, #1664	; 0x680
    8e56:	bcs.w	954a <usb_isr+0x84e>
    8e5a:	cmp.w	r1, #258	; 0x102
    8e5e:	beq.w	9526 <usb_isr+0x82a>
    8e62:	bhi.w	9374 <usb_isr+0x678>
    8e66:	cmp	r1, #128	; 0x80
    8e68:	beq.w	9444 <usb_isr+0x748>
    8e6c:	cmp	r1, #130	; 0x82
    8e6e:	bne.w	94ae <usb_isr+0x7b2>
    8e72:	ldrh	r1, [r5, #4]
    8e74:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    8e78:	cmp	r1, #4
    8e7a:	bhi.w	94ae <usb_isr+0x7b2>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    8e7e:	ldr	r0, [pc, #376]	; (8ff8 <usb_isr+0x2fc>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    8e80:	ldr	r4, [pc, #376]	; (8ffc <usb_isr+0x300>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    8e82:	lsls	r1, r1, #2
    8e84:	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    8e86:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    8e88:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    8e8a:	ldrb	r2, [r0, #0]
    8e8c:	lsls	r3, r2, #30
    8e8e:	bpl.w	9584 <usb_isr+0x888>
    8e92:	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    8e96:	mov.w	lr, #2
    8e9a:	b.n	944e <usb_isr+0x752>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    8e9c:	ldr	r7, [pc, #336]	; (8ff0 <usb_isr+0x2f4>)
    8e9e:	ldr	r2, [r7, #0]
		if (data) {
    8ea0:	cbz	r2, 8ef4 <usb_isr+0x1f8>
			size = ep0_tx_len;
    8ea2:	ldr	r3, [pc, #348]	; (9000 <usb_isr+0x304>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8ea4:	ldr	r6, [pc, #332]	; (8ff4 <usb_isr+0x2f8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8ea6:	ldr	r1, [pc, #348]	; (9004 <usb_isr+0x308>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    8ea8:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8eaa:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8eac:	ldrb	r5, [r1, #0]
    8eae:	cmp	r0, #64	; 0x40
    8eb0:	mov	lr, r0
    8eb2:	orr.w	r8, r5, #2
    8eb6:	it	cs
    8eb8:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8ebc:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    8ebe:	eor.w	r4, r4, #1
    8ec2:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    8ec4:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8ec8:	ite	eq
    8eca:	moveq	r4, #136	; 0x88
    8ecc:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8ece:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    8ed2:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    8ed4:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8ed8:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8edc:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    8ede:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8ee0:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    8ee4:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    8ee6:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    8ee8:	cbnz	r0, 8ef2 <usb_isr+0x1f6>
    8eea:	cmp.w	lr, #64	; 0x40
    8eee:	it	ne
    8ef0:	movne	r2, #0
    8ef2:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    8ef4:	ldr	r3, [pc, #244]	; (8fec <usb_isr+0x2f0>)
    8ef6:	ldrh	r2, [r3, #0]
    8ef8:	cmp.w	r2, #1280	; 0x500
    8efc:	bne.n	8f08 <usb_isr+0x20c>
			setup.bRequest = 0;
    8efe:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    8f00:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    8f02:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    8f04:	ldr	r3, [pc, #256]	; (9008 <usb_isr+0x30c>)
    8f06:	strb	r2, [r3, #0]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    8f08:	ldr	r2, [pc, #256]	; (900c <usb_isr+0x310>)
    8f0a:	movs	r3, #1
    8f0c:	strb	r3, [r2, #0]
    8f0e:	b.n	8d90 <usb_isr+0x94>
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    8f10:	ldr	r2, [pc, #216]	; (8fec <usb_isr+0x2f0>)
    8f12:	ldrh	r5, [r2, #0]
    8f14:	movw	r0, #8225	; 0x2021
    8f18:	cmp	r5, r0
    8f1a:	beq.w	931c <usb_isr+0x620>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    8f1e:	ldr	r2, [pc, #184]	; (8fd8 <usb_isr+0x2dc>)
    8f20:	str.w	r2, [r9, r4, lsl #3]
    8f24:	b.n	8f08 <usb_isr+0x20c>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    8f26:	ldr	r2, [pc, #176]	; (8fd8 <usb_isr+0x2dc>)
    8f28:	ldr	r3, [pc, #176]	; (8fdc <usb_isr+0x2e0>)
    8f2a:	tst.w	r9, #8
    8f2e:	it	ne
    8f30:	movne	r3, r2
    8f32:	str.w	r3, [r7, r8, lsl #3]
    8f36:	b.n	8d90 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    8f38:	bl	8afc <usb_free>
				packet = tx_first[endpoint];
    8f3c:	ldr	r2, [pc, #208]	; (9010 <usb_isr+0x314>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    8f3e:	ldr	r1, [pc, #212]	; (9014 <usb_isr+0x318>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    8f40:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    8f44:	cmp	r3, #0
    8f46:	beq.w	92b6 <usb_isr+0x5ba>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    8f4a:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    8f4c:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    8f4e:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    8f52:	add.w	r2, r3, #8
    8f56:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    8f5a:	cmp	r4, #3
    8f5c:	bhi.n	8f6a <usb_isr+0x26e>
    8f5e:	tbb	[pc, r4]
    8f62:	.short	0x0f12
    8f64:	.short	0x0215
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    8f66:	movs	r2, #4
    8f68:	strb	r2, [r1, r6]
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    8f6a:	ldrh	r2, [r3, #0]
    8f6c:	tst.w	r9, #8
    8f70:	ite	eq
    8f72:	moveq	r3, #136	; 0x88
    8f74:	movne	r3, #200	; 0xc8
    8f76:	orr.w	r3, r3, r2, lsl #16
    8f7a:	str.w	r3, [r7, r8, lsl #3]
    8f7e:	b.n	8d90 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    8f80:	movs	r2, #2
    8f82:	strb	r2, [r1, r6]
						break;
    8f84:	b.n	8f6a <usb_isr+0x26e>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    8f86:	movs	r2, #3
    8f88:	strb	r2, [r1, r6]
						break;
    8f8a:	b.n	8f6a <usb_isr+0x26e>
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    8f8c:	movs	r2, #5
    8f8e:	strb	r2, [r1, r6]
						break;
    8f90:	b.n	8f6a <usb_isr+0x26e>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    8f92:	lsls	r0, r4, #31
    8f94:	bmi.w	93cc <usb_isr+0x6d0>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    8f98:	lsls	r1, r4, #24
    8f9a:	bmi.w	9430 <usb_isr+0x734>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    8f9e:	lsls	r2, r4, #30
    8fa0:	bpl.n	8fb0 <usb_isr+0x2b4>
		uint8_t err = USB0_ERRSTAT;
    8fa2:	ldr	r2, [pc, #116]	; (9018 <usb_isr+0x31c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    8fa4:	ldr	r1, [pc, #116]	; (901c <usb_isr+0x320>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    8fa6:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    8fa8:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    8faa:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    8fac:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    8fae:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    8fb0:	lsls	r3, r4, #27
    8fb2:	bpl.n	8fba <usb_isr+0x2be>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    8fb4:	ldr	r3, [pc, #100]	; (901c <usb_isr+0x320>)
    8fb6:	movs	r2, #16
    8fb8:	strb	r2, [r3, #0]
	}

}
    8fba:	add	sp, #28
    8fbc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    8fc0:	bl	858c <usb_serial_flush_callback>
    8fc4:	b.n	8dd2 <usb_isr+0xd6>
    8fc6:	nop
    8fc8:	.word	0x1fff0000
    8fcc:	.word	0x2001c9b8
    8fd0:	.word	0x2001c964
    8fd4:	.word	0x2001ce34
    8fd8:	.word	0x004000c8
    8fdc:	.word	0x00400088
    8fe0:	.word	0x2001ca40
    8fe4:	.word	0x2001c9c9
    8fe8:	.word	0x2001c948
    8fec:	.word	0x2001ca2c
    8ff0:	.word	0x2001c960
    8ff4:	.word	0x2001c9c8
    8ff8:	.word	0x400720c0
    8ffc:	.word	0x2001ca38
    9000:	.word	0x2001c974
    9004:	.word	0x2001ca34
    9008:	.word	0x40072098
    900c:	.word	0x40072094
    9010:	.word	0x2001ca0c
    9014:	.word	0x2001ca44
    9018:	.word	0x40072088
    901c:	.word	0x40072080
    9020:	.word	0x40072090
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    9024:	ldr	r2, [pc, #684]	; (92d4 <usb_isr+0x5d8>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    9026:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    902a:	ldrb	r3, [r2, #0]
    902c:	adds	r3, #1
    902e:	strb	r3, [r2, #0]
    9030:	b.n	8d90 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    9032:	str.w	r0, [r3, r6, lsl #2]
    9036:	ldr	r5, [pc, #672]	; (92d8 <usb_isr+0x5dc>)
    9038:	b.n	8d5e <usb_isr+0x62>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    903a:	movw	r0, #8225	; 0x2021
    903e:	cmp	r1, r0
    9040:	beq.w	92ae <usb_isr+0x5b2>
    9044:	bhi.w	93a6 <usb_isr+0x6aa>
    9048:	cmp.w	r1, #2176	; 0x880
    904c:	beq.w	9486 <usb_isr+0x78a>
    9050:	cmp.w	r1, #2304	; 0x900
    9054:	bne.w	94ae <usb_isr+0x7b2>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    9058:	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    905a:	ldr	r1, [pc, #640]	; (92dc <usb_isr+0x5e0>)
    905c:	ldrb	r0, [r5, #2]
    905e:	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    9060:	lsls	r2, r2, #24
    9062:	bmi.w	96f0 <usb_isr+0x9f4>
    9066:	ldr.w	r2, [r9, #40]	; 0x28
    906a:	ldr	r1, [pc, #628]	; (92e0 <usb_isr+0x5e4>)
    906c:	lsls	r3, r2, #24
    906e:	bmi.w	96e6 <usb_isr+0x9ea>
    9072:	ldr.w	r2, [r9, #48]	; 0x30
    9076:	ldr	r1, [pc, #616]	; (92e0 <usb_isr+0x5e4>)
    9078:	lsls	r5, r2, #24
    907a:	bmi.w	96dc <usb_isr+0x9e0>
    907e:	ldr.w	r2, [r9, #56]	; 0x38
    9082:	ldr	r1, [pc, #604]	; (92e0 <usb_isr+0x5e4>)
    9084:	lsls	r4, r2, #24
    9086:	bmi.w	96d2 <usb_isr+0x9d6>
    908a:	ldr.w	r2, [r9, #64]	; 0x40
    908e:	ldr	r1, [pc, #592]	; (92e0 <usb_isr+0x5e4>)
    9090:	lsls	r0, r2, #24
    9092:	bmi.w	96c8 <usb_isr+0x9cc>
    9096:	ldr.w	r2, [r9, #72]	; 0x48
    909a:	ldr	r1, [pc, #580]	; (92e0 <usb_isr+0x5e4>)
    909c:	lsls	r2, r2, #24
    909e:	bmi.w	96be <usb_isr+0x9c2>
    90a2:	ldr.w	r2, [r9, #80]	; 0x50
    90a6:	ldr	r1, [pc, #568]	; (92e0 <usb_isr+0x5e4>)
    90a8:	lsls	r3, r2, #24
    90aa:	bmi.w	96b4 <usb_isr+0x9b8>
    90ae:	ldr.w	r2, [r9, #88]	; 0x58
    90b2:	ldr	r1, [pc, #556]	; (92e0 <usb_isr+0x5e4>)
    90b4:	lsls	r5, r2, #24
    90b6:	bmi.w	96aa <usb_isr+0x9ae>
    90ba:	ldr.w	r2, [r9, #96]	; 0x60
    90be:	ldr	r1, [pc, #544]	; (92e0 <usb_isr+0x5e4>)
    90c0:	lsls	r4, r2, #24
    90c2:	bmi.w	9718 <usb_isr+0xa1c>
    90c6:	ldr.w	r2, [r9, #104]	; 0x68
    90ca:	ldr	r1, [pc, #532]	; (92e0 <usb_isr+0x5e4>)
    90cc:	lsls	r0, r2, #24
    90ce:	bmi.w	970e <usb_isr+0xa12>
    90d2:	ldr.w	r2, [r9, #112]	; 0x70
    90d6:	ldr	r1, [pc, #520]	; (92e0 <usb_isr+0x5e4>)
    90d8:	lsls	r2, r2, #24
    90da:	bmi.w	9704 <usb_isr+0xa08>
    90de:	ldr.w	r2, [r9, #120]	; 0x78
    90e2:	ldr	r1, [pc, #508]	; (92e0 <usb_isr+0x5e4>)
    90e4:	lsls	r3, r2, #24
    90e6:	bmi.w	96fa <usb_isr+0x9fe>
    90ea:	ldr.w	r2, [r9, #128]	; 0x80
    90ee:	ldr	r1, [pc, #496]	; (92e0 <usb_isr+0x5e4>)
    90f0:	lsls	r5, r2, #24
    90f2:	bmi.w	972e <usb_isr+0xa32>
    90f6:	ldr.w	r2, [r9, #136]	; 0x88
    90fa:	ldr	r1, [pc, #484]	; (92e0 <usb_isr+0x5e4>)
    90fc:	lsls	r4, r2, #24
    90fe:	bmi.w	9722 <usb_isr+0xa26>
    9102:	ldr.w	r2, [r9, #144]	; 0x90
    9106:	ldr	r1, [pc, #472]	; (92e0 <usb_isr+0x5e4>)
    9108:	lsls	r0, r2, #24
    910a:	bmi.w	969e <usb_isr+0x9a2>
    910e:	ldr.w	r2, [r9, #152]	; 0x98
    9112:	ldr	r1, [pc, #460]	; (92e0 <usb_isr+0x5e4>)
    9114:	lsls	r2, r2, #24
    9116:	bmi.w	9692 <usb_isr+0x996>
    911a:	ldr	r0, [pc, #456]	; (92e4 <usb_isr+0x5e8>)
    911c:	ldr	r2, [pc, #456]	; (92e8 <usb_isr+0x5ec>)
    911e:	ldr	r1, [pc, #460]	; (92ec <usb_isr+0x5f0>)
    9120:	str	r0, [sp, #4]
    9122:	ldr	r0, [pc, #460]	; (92f0 <usb_isr+0x5f4>)
    9124:	ldr	r5, [pc, #432]	; (92d8 <usb_isr+0x5dc>)
    9126:	ldr	r4, [pc, #460]	; (92f4 <usb_isr+0x5f8>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9128:	str	r7, [sp, #16]
}



void usb_isr(void)
{
    912a:	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    912c:	str	r6, [sp, #20]
    912e:	str	r5, [sp, #8]
    9130:	mov	r8, r0
    9132:	mov	r7, r2
    9134:	mov	r6, r1
    9136:	mov	r5, r3
    9138:	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    913a:	ldr	r0, [r7, #0]
			while (p) {
    913c:	cbz	r0, 914a <usb_isr+0x44e>
				n = p->next;
    913e:	ldr	r4, [r0, #4]
				usb_free(p);
    9140:	bl	8afc <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    9144:	mov	r0, r4
    9146:	cmp	r4, #0
    9148:	bne.n	913e <usb_isr+0x442>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    914a:	movs	r3, #0
    914c:	str	r3, [r7, #0]
			rx_last[i] = NULL;
    914e:	ldr	r3, [sp, #8]
			p = tx_first[i];
    9150:	ldr	r0, [r6, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    9152:	mov	r2, r3
    9154:	movs	r3, #0
    9156:	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    915a:	cbz	r0, 9168 <usb_isr+0x46c>
				n = p->next;
    915c:	ldr	r4, [r0, #4]
				usb_free(p);
    915e:	bl	8afc <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    9162:	mov	r0, r4
    9164:	cmp	r4, #0
    9166:	bne.n	915c <usb_isr+0x460>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    9168:	movs	r2, #0
    916a:	str	r2, [r6, #0]
			tx_last[i] = NULL;
    916c:	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    916e:	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    9172:	mov	r1, r2
    9174:	movs	r2, #0
    9176:	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    917a:	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    917c:	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    917e:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    9180:	mov.w	r1, #0
    9184:	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    9188:	cmp	r3, #3
    918a:	bhi.n	91a0 <usb_isr+0x4a4>
    918c:	tbh	[pc, r3, lsl #1]
    9190:	.word	0x0004014b
    9194:	.word	0x0004014b
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9198:	mov.w	r3, #1
    919c:	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    91a0:	adds	r5, #1
    91a2:	cmp	r5, #4
    91a4:	add.w	r7, r7, #4
    91a8:	add.w	r6, r6, #4
    91ac:	add.w	r8, r8, #1
    91b0:	bne.n	913a <usb_isr+0x43e>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    91b2:	ldr	r4, [pc, #324]	; (92f8 <usb_isr+0x5fc>)
			*reg = epconf;
    91b4:	ldr	r3, [pc, #324]	; (92fc <usb_isr+0x600>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    91b6:	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    91b8:	ldr	r5, [pc, #280]	; (92d4 <usb_isr+0x5d8>)
    91ba:	ldr	r7, [sp, #16]
    91bc:	ldr	r6, [sp, #20]
    91be:	movs	r1, #0
    91c0:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    91c2:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    91c4:	lsls	r3, r2, #28
    91c6:	bmi.w	9668 <usb_isr+0x96c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    91ca:	ldrb	r2, [r4, #1]
			*reg = epconf;
    91cc:	ldr	r1, [pc, #304]	; (9300 <usb_isr+0x604>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    91ce:	ldr.w	r8, [pc, #272]	; 92e0 <usb_isr+0x5e4>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    91d2:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    91d4:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    91d6:	mov.w	r1, #0
    91da:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    91de:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    91e2:	bmi.w	963c <usb_isr+0x940>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    91e6:	ldr	r1, [pc, #284]	; (9304 <usb_isr+0x608>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    91e8:	ldrb	r2, [r4, #2]
			*reg = epconf;
    91ea:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    91ec:	movs	r1, #0
    91ee:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    91f2:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    91f6:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    91f8:	ldr.w	r8, [pc, #228]	; 92e0 <usb_isr+0x5e4>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    91fc:	bmi.w	95b8 <usb_isr+0x8bc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9200:	ldrb	r2, [r4, #3]
			*reg = epconf;
    9202:	ldr	r1, [pc, #260]	; (9308 <usb_isr+0x60c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9204:	ldr	r4, [pc, #216]	; (92e0 <usb_isr+0x5e4>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    9206:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9208:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    920a:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    920c:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    9210:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9214:	bmi.w	958a <usb_isr+0x88e>
    9218:	ldrb	r3, [r6, #0]
    921a:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    921c:	movs	r1, #0
    921e:	eor.w	r2, r3, #1
    9222:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    9226:	str.w	r1, [r9, #152]	; 0x98
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    922a:	movs	r0, #0
    922c:	str	r0, [sp, #8]
    922e:	mov	r8, r0
    9230:	mov	ip, r0
    9232:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9234:	ldr	r1, [pc, #212]	; (930c <usb_isr+0x610>)
    9236:	ldrb	r5, [r1, #0]
    9238:	orr.w	lr, r5, #2
    923c:	add.w	r3, r9, lr, lsl #3
    9240:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9242:	ldr	r3, [sp, #4]
    9244:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9246:	ldr	r3, [sp, #12]
    9248:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    924a:	ite	eq
    924c:	moveq	r4, #136	; 0x88
    924e:	movne	r4, #200	; 0xc8
    9250:	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9254:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9258:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    925c:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    925e:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9260:	ldr.w	lr, [pc, #124]	; 92e0 <usb_isr+0x5e4>
	ep0_tx_data_toggle ^= 1;
    9264:	ldr	r3, [pc, #168]	; (9310 <usb_isr+0x614>)
	ep0_tx_bdt_bank ^= 1;
    9266:	ldr.w	r8, [pc, #164]	; 930c <usb_isr+0x610>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    926a:	cmp	r0, #0
    926c:	bne.w	94bc <usb_isr+0x7c0>
    9270:	cmp.w	ip, #64	; 0x40
    9274:	bne.n	92ae <usb_isr+0x5b2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9276:	orr.w	ip, r4, #2
    927a:	add.w	r3, r9, ip, lsl #3
    927e:	ldr	r4, [sp, #8]
    9280:	ldr.w	lr, [pc, #92]	; 92e0 <usb_isr+0x5e4>
    9284:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9286:	cmp	r2, #0
    9288:	bne.w	94e8 <usb_isr+0x7ec>
    928c:	lsls	r2, r0, #16
    928e:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    9292:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9296:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    929a:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    929c:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    929e:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    92a0:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    92a2:	cmp	r0, #64	; 0x40
    92a4:	bne.n	92ae <usb_isr+0x5b2>
    92a6:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    92a8:	ldr	r2, [pc, #104]	; (9314 <usb_isr+0x618>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    92aa:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    92ac:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    92ae:	ldr	r2, [pc, #104]	; (9318 <usb_isr+0x61c>)
    92b0:	movs	r3, #1
    92b2:	strb	r3, [r2, #0]
    92b4:	b.n	8f08 <usb_isr+0x20c>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    92b6:	ldrb	r3, [r1, r6]
    92b8:	cmp	r3, #3
    92ba:	bhi.w	9518 <usb_isr+0x81c>
    92be:	add	r2, pc, #4	; (adr r2, 92c4 <usb_isr+0x5c8>)
    92c0:	ldr.w	pc, [r2, r3, lsl #2]
    92c4:	.word	0x00008d91
    92c8:	.word	0x00008d91
    92cc:	.word	0x0000941b
    92d0:	.word	0x00009421
    92d4:	.word	0x2001ca35
    92d8:	.word	0x2001c964
    92dc:	.word	0x2001ca40
    92e0:	.word	0x1fff0000
    92e4:	.word	0x2001ca1c
    92e8:	.word	0x2001c9b8
    92ec:	.word	0x2001ca0c
    92f0:	.word	0x2001ca44
    92f4:	.word	0x2001ce34
    92f8:	.word	0x000136e0
    92fc:	.word	0x400720c4
    9300:	.word	0x400720c8
    9304:	.word	0x400720cc
    9308:	.word	0x400720d0
    930c:	.word	0x2001ca34
    9310:	.word	0x2001c9c8
    9314:	.word	0x2001c974
    9318:	.word	0x40072094
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint32_t *line_coding = NULL;
			switch (setup.wIndex) {
    931c:	ldrh	r2, [r2, #4]
    931e:	cbnz	r2, 9346 <usb_isr+0x64a>
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    9320:	ldr	r2, [pc, #708]	; (95e8 <usb_isr+0x8ec>)
    9322:	ldrb	r5, [r1, #0]
    9324:	ldrb	r0, [r1, #1]
    9326:	strb	r5, [r2, #0]
    9328:	strb	r0, [r2, #1]
    932a:	ldrb	r5, [r1, #2]
    932c:	ldrb	r0, [r1, #3]
    932e:	strb	r5, [r2, #2]
    9330:	strb	r0, [r2, #3]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    9332:	ldr	r0, [r2, #0]
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    9334:	ldrb	r5, [r1, #4]
    9336:	strb	r5, [r2, #4]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    9338:	cmp	r0, #134	; 0x86
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    933a:	ldrb	r5, [r1, #5]
    933c:	ldrb	r1, [r1, #6]
    933e:	strb	r5, [r2, #5]
    9340:	strb	r1, [r2, #6]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    9342:	beq.w	9490 <usb_isr+0x794>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9346:	ldr	r1, [pc, #676]	; (95ec <usb_isr+0x8f0>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9348:	ldr	r6, [pc, #676]	; (95f0 <usb_isr+0x8f4>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    934a:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    934c:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    934e:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9352:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9354:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9358:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    935a:	ite	eq
    935c:	moveq	r1, #136	; 0x88
    935e:	movne	r1, #200	; 0xc8
    9360:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9364:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    9368:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    936c:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    936e:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9370:	str	r1, [r2, #4]
    9372:	b.n	8f1e <usb_isr+0x222>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9374:	movw	r2, #770	; 0x302
    9378:	cmp	r1, r2
    937a:	bne.w	9498 <usb_isr+0x79c>
    937e:	ldrh	r1, [r5, #4]
    9380:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    9384:	cmp	r1, #4
    9386:	bhi.w	94ae <usb_isr+0x7b2>
    938a:	ldrh	r2, [r5, #2]
    938c:	cmp	r2, #0
    938e:	bne.w	94ae <usb_isr+0x7b2>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    9392:	ldr	r0, [pc, #608]	; (95f4 <usb_isr+0x8f8>)
    9394:	str.w	lr, [sp, #4]
    9398:	lsls	r1, r1, #2
    939a:	add	r0, r1
    939c:	ldrb	r1, [r0, #0]
    939e:	orr.w	r1, r1, #2
    93a2:	strb	r1, [r0, #0]
    93a4:	b.n	922a <usb_isr+0x52e>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    93a6:	movw	r0, #8737	; 0x2221
    93aa:	cmp	r1, r0
    93ac:	bne.n	94a6 <usb_isr+0x7aa>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    93ae:	ldrh	r1, [r5, #4]
    93b0:	cmp	r1, #0
    93b2:	bne.w	957e <usb_isr+0x882>
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    93b6:	ldr	r3, [pc, #576]	; (95f8 <usb_isr+0x8fc>)
    93b8:	ldr	r2, [pc, #576]	; (95fc <usb_isr+0x900>)
			usb_cdc_line_rtsdtr = setup.wValue;
    93ba:	ldr	r0, [pc, #580]	; (9600 <usb_isr+0x904>)
    93bc:	ldrb	r4, [r5, #2]
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    93be:	ldr	r5, [r3, #0]
    93c0:	str	r5, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    93c2:	str.w	lr, [sp, #4]
    93c6:	mov	r2, r1
    93c8:	strb	r4, [r0, #0]
    93ca:	b.n	922a <usb_isr+0x52e>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    93cc:	ldr	r3, [pc, #564]	; (9604 <usb_isr+0x908>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    93ce:	ldr	r0, [pc, #568]	; (9608 <usb_isr+0x90c>)
		ep0_tx_bdt_bank = 0;
    93d0:	ldr	r1, [pc, #536]	; (95ec <usb_isr+0x8f0>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    93d2:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    93d4:	mov.w	lr, #2
    93d8:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    93dc:	ldr	r7, [pc, #532]	; (95f4 <usb_isr+0x8f8>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    93de:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    93e0:	ldr	r1, [pc, #552]	; (960c <usb_isr+0x910>)
    93e2:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    93e4:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    93e6:	ldr	r6, [pc, #552]	; (9610 <usb_isr+0x914>)
		USB0_ISTAT = 0xFF;
    93e8:	ldr	r5, [pc, #552]	; (9614 <usb_isr+0x918>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    93ea:	ldr	r4, [pc, #556]	; (9618 <usb_isr+0x91c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    93ec:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    93ee:	movs	r1, #13
    93f0:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    93f2:	movs	r1, #255	; 0xff
    93f4:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    93f6:	ldr.w	lr, [pc, #576]	; 9638 <usb_isr+0x93c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    93fa:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    93fc:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    93fe:	ldr	r5, [pc, #540]	; (961c <usb_isr+0x920>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    9400:	ldr	r2, [pc, #540]	; (9620 <usb_isr+0x924>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    9402:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    9406:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    9408:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    940a:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    940e:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    9410:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    9412:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    9414:	add	sp, #28
    9416:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    941a:	movs	r3, #0
    941c:	strb	r3, [r1, r6]
						break;
    941e:	b.n	8d90 <usb_isr+0x94>
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9420:	movs	r3, #1
    9422:	strb	r3, [r1, r6]
						break;
    9424:	b.n	8d90 <usb_isr+0x94>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    9426:	mov.w	r3, #0
    942a:	strb.w	r3, [r8]
    942e:	b.n	91a0 <usb_isr+0x4a4>
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9430:	ldr	r1, [pc, #448]	; (95f4 <usb_isr+0x8f8>)
		USB0_ISTAT = USB_ISTAT_STALL;
    9432:	ldr	r3, [pc, #480]	; (9614 <usb_isr+0x918>)
    9434:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9436:	movs	r0, #13
    9438:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    943a:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    943c:	lsls	r2, r4, #30
    943e:	bpl.w	8fb0 <usb_isr+0x2b4>
    9442:	b.n	8fa2 <usb_isr+0x2a6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    9444:	ldr	r4, [pc, #476]	; (9624 <usb_isr+0x928>)
		reply_buffer[1] = 0;
		datalen = 2;
    9446:	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    944a:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    944c:	strb	r2, [r4, #1]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    944e:	ldrh	r2, [r5, #6]
    9450:	cmp	r2, lr
    9452:	bcs.w	979c <usb_isr+0xaa0>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9456:	ldr	r1, [pc, #404]	; (95ec <usb_isr+0x8f0>)
    9458:	ldrb	r5, [r1, #0]
    945a:	cmp	r2, #64	; 0x40
    945c:	mov	ip, r2
    945e:	orr.w	lr, r5, #2
    9462:	it	cs
    9464:	movcs.w	ip, #64	; 0x40
    9468:	add.w	r3, r4, ip
    946c:	add.w	r0, r9, lr, lsl #3
    9470:	str	r3, [sp, #8]
    9472:	movs	r3, #1
    9474:	str	r4, [r0, #4]
    9476:	mov.w	r8, ip, lsl #16
    947a:	rsb	r0, ip, r2
    947e:	str	r3, [sp, #4]
    9480:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9482:	movs	r4, #200	; 0xc8
    9484:	b.n	9250 <usb_isr+0x554>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    9486:	ldr	r2, [pc, #416]	; (9628 <usb_isr+0x92c>)
    9488:	ldr	r4, [pc, #408]	; (9624 <usb_isr+0x928>)
    948a:	ldrb	r2, [r2, #0]
    948c:	strb	r2, [r4, #0]
    948e:	b.n	944e <usb_isr+0x752>
					//serial_phex(*buf);
					*dst++ = *buf++;
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    9490:	ldr	r2, [pc, #408]	; (962c <usb_isr+0x930>)
    9492:	movs	r1, #15
    9494:	strb	r1, [r2, #0]
    9496:	b.n	9346 <usb_isr+0x64a>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9498:	cmp.w	r1, #1280	; 0x500
    949c:	bne.n	94ae <usb_isr+0x7b2>
    949e:	movs	r3, #1
    94a0:	movs	r2, #0
    94a2:	str	r3, [sp, #4]
    94a4:	b.n	922a <usb_isr+0x52e>
    94a6:	movw	r2, #8993	; 0x2321
    94aa:	cmp	r1, r2
    94ac:	beq.n	949e <usb_isr+0x7a2>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    94ae:	ldr	r2, [pc, #324]	; (95f4 <usb_isr+0x8f8>)
    94b0:	movs	r3, #15
    94b2:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    94b4:	ldr	r2, [pc, #336]	; (9608 <usb_isr+0x90c>)
    94b6:	movs	r3, #1
    94b8:	strb	r3, [r2, #0]
    94ba:	b.n	8f08 <usb_isr+0x20c>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    94bc:	cmp	r0, #64	; 0x40
    94be:	bls.w	9276 <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    94c2:	orr.w	r4, r4, #2
    94c6:	add.w	r1, lr, r4, lsl #3
    94ca:	ldr	r6, [sp, #8]
    94cc:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    94ce:	cbz	r2, 9500 <usb_isr+0x804>
	ep0_tx_data_toggle ^= 1;
    94d0:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    94d4:	ldr	r2, [pc, #344]	; (9630 <usb_isr+0x934>)
	ep0_tx_data_toggle ^= 1;
    94d6:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    94d8:	mov	r3, r6
    94da:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    94dc:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    94e0:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    94e2:	str.w	r2, [lr, r4, lsl #3]
    94e6:	b.n	92a8 <usb_isr+0x5ac>
	ep0_tx_data_toggle ^= 1;
    94e8:	ldrb.w	r3, [sp, #4]
    94ec:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    94ee:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    94f0:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    94f2:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    94f4:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    94f8:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    94fa:	str.w	r2, [lr, ip, lsl #3]
    94fe:	b.n	92a2 <usb_isr+0x5a6>
	ep0_tx_data_toggle ^= 1;
    9500:	ldrb.w	r1, [sp, #4]
    9504:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9506:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9508:	ldr	r2, [pc, #256]	; (960c <usb_isr+0x910>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    950a:	strb.w	r5, [r8]
    950e:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9510:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9512:	str.w	r2, [lr, r4, lsl #3]
    9516:	b.n	92a8 <usb_isr+0x5ac>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    9518:	tst.w	r9, #8
    951c:	ite	eq
    951e:	moveq	r3, #2
    9520:	movne	r3, #3
    9522:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    9524:	b.n	8d90 <usb_isr+0x94>
    9526:	ldrh	r1, [r5, #4]
    9528:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    952c:	cmp	r1, #4
    952e:	bhi.n	94ae <usb_isr+0x7b2>
    9530:	ldrh	r2, [r5, #2]
    9532:	cmp	r2, #0
    9534:	bne.n	94ae <usb_isr+0x7b2>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    9536:	ldr	r0, [pc, #188]	; (95f4 <usb_isr+0x8f8>)
    9538:	str.w	lr, [sp, #4]
    953c:	lsls	r1, r1, #2
    953e:	add	r0, r1
    9540:	ldrb	r1, [r0, #0]
    9542:	bic.w	r1, r1, #2
    9546:	strb	r1, [r0, #0]
    9548:	b.n	922a <usb_isr+0x52e>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    954a:	ldr	r2, [pc, #232]	; (9634 <usb_isr+0x938>)
    954c:	ldr	r4, [r2, #4]
    954e:	cmp	r4, #0
    9550:	beq.n	94ae <usb_isr+0x7b2>
    9552:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9554:	ldrh.w	lr, [r5, #4]
    9558:	b.n	9562 <usb_isr+0x866>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    955a:	adds	r2, #12
			if (list->addr == NULL) break;
    955c:	ldr	r4, [r2, #4]
    955e:	cmp	r4, #0
    9560:	beq.n	94ae <usb_isr+0x7b2>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9562:	ldrh	r3, [r2, #0]
    9564:	cmp	r3, r0
    9566:	bne.n	955a <usb_isr+0x85e>
    9568:	ldrh	r3, [r2, #2]
    956a:	cmp	r3, lr
    956c:	bne.n	955a <usb_isr+0x85e>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    956e:	lsrs	r0, r0, #8
    9570:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    9572:	ite	eq
    9574:	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    9578:	ldrhne.w	lr, [r2, #8]
    957c:	b.n	944e <usb_isr+0x752>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    957e:	str.w	lr, [sp, #4]
    9582:	b.n	922a <usb_isr+0x52e>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    9584:	mov.w	lr, #2
    9588:	b.n	944e <usb_isr+0x752>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    958a:	bl	8abc <usb_malloc>
				if (p) {
    958e:	cmp	r0, #0
    9590:	beq.w	9776 <usb_isr+0xa7a>
					table[index(i, RX, EVEN)].addr = p->buf;
    9594:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9596:	ldr	r2, [pc, #116]	; (960c <usb_isr+0x910>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    9598:	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    959c:	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    95a0:	bl	8abc <usb_malloc>
				if (p) {
    95a4:	cmp	r0, #0
    95a6:	beq.w	976a <usb_isr+0xa6e>
					table[index(i, RX, ODD)].addr = p->buf;
    95aa:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    95ac:	ldr	r2, [pc, #128]	; (9630 <usb_isr+0x934>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    95ae:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    95b2:	str.w	r2, [r9, #136]	; 0x88
    95b6:	b.n	9218 <usb_isr+0x51c>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    95b8:	bl	8abc <usb_malloc>
				if (p) {
    95bc:	cmp	r0, #0
    95be:	beq.w	978e <usb_isr+0xa92>
					table[index(i, RX, EVEN)].addr = p->buf;
    95c2:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    95c4:	ldr	r2, [pc, #68]	; (960c <usb_isr+0x910>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    95c6:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    95ca:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    95ce:	bl	8abc <usb_malloc>
				if (p) {
    95d2:	cmp	r0, #0
    95d4:	beq.w	9782 <usb_isr+0xa86>
					table[index(i, RX, ODD)].addr = p->buf;
    95d8:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    95da:	ldr	r2, [pc, #84]	; (9630 <usb_isr+0x934>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    95dc:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    95e0:	str.w	r2, [r9, #104]	; 0x68
    95e4:	b.n	9200 <usb_isr+0x504>
    95e6:	nop
    95e8:	.word	0x2001ce28
    95ec:	.word	0x2001ca34
    95f0:	.word	0x2001c9c8
    95f4:	.word	0x400720c0
    95f8:	.word	0x2001c95c
    95fc:	.word	0x2001ce30
    9600:	.word	0x2001c958
    9604:	.word	0x1fff0000
    9608:	.word	0x40072094
    960c:	.word	0x00400088
    9610:	.word	0x40072088
    9614:	.word	0x40072080
    9618:	.word	0x40072098
    961c:	.word	0x2001c978
    9620:	.word	0x2001c9cc
    9624:	.word	0x2001ca38
    9628:	.word	0x2001ca40
    962c:	.word	0x2001c9c9
    9630:	.word	0x004000c8
    9634:	.word	0x000136e4
    9638:	.word	0x4007208c
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    963c:	bl	8abc <usb_malloc>
				if (p) {
    9640:	cmp	r0, #0
    9642:	beq.w	975e <usb_isr+0xa62>
					table[index(i, RX, EVEN)].addr = p->buf;
    9646:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9648:	ldr	r2, [pc, #372]	; (97c0 <usb_isr+0xac4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    964a:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    964e:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    9652:	bl	8abc <usb_malloc>
				if (p) {
    9656:	cmp	r0, #0
    9658:	beq.n	9752 <usb_isr+0xa56>
					table[index(i, RX, ODD)].addr = p->buf;
    965a:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    965c:	ldr	r2, [pc, #356]	; (97c4 <usb_isr+0xac8>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    965e:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9662:	str.w	r2, [r9, #72]	; 0x48
    9666:	b.n	91e6 <usb_isr+0x4ea>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    9668:	bl	8abc <usb_malloc>
				if (p) {
    966c:	cmp	r0, #0
    966e:	beq.n	9746 <usb_isr+0xa4a>
					table[index(i, RX, EVEN)].addr = p->buf;
    9670:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9672:	ldr	r2, [pc, #332]	; (97c0 <usb_isr+0xac4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    9674:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9678:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    967c:	bl	8abc <usb_malloc>
				if (p) {
    9680:	cmp	r0, #0
    9682:	beq.n	973a <usb_isr+0xa3e>
					table[index(i, RX, ODD)].addr = p->buf;
    9684:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9686:	ldr	r2, [pc, #316]	; (97c4 <usb_isr+0xac8>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    9688:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    968c:	str.w	r2, [r9, #40]	; 0x28
    9690:	b.n	91ca <usb_isr+0x4ce>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    9692:	ldr.w	r0, [r1, #156]	; 0x9c
    9696:	subs	r0, #8
    9698:	bl	8afc <usb_free>
    969c:	b.n	911a <usb_isr+0x41e>
    969e:	ldr.w	r0, [r1, #148]	; 0x94
    96a2:	subs	r0, #8
    96a4:	bl	8afc <usb_free>
    96a8:	b.n	910e <usb_isr+0x412>
    96aa:	ldr	r0, [r1, #92]	; 0x5c
    96ac:	subs	r0, #8
    96ae:	bl	8afc <usb_free>
    96b2:	b.n	90ba <usb_isr+0x3be>
    96b4:	ldr	r0, [r1, #84]	; 0x54
    96b6:	subs	r0, #8
    96b8:	bl	8afc <usb_free>
    96bc:	b.n	90ae <usb_isr+0x3b2>
    96be:	ldr	r0, [r1, #76]	; 0x4c
    96c0:	subs	r0, #8
    96c2:	bl	8afc <usb_free>
    96c6:	b.n	90a2 <usb_isr+0x3a6>
    96c8:	ldr	r0, [r1, #68]	; 0x44
    96ca:	subs	r0, #8
    96cc:	bl	8afc <usb_free>
    96d0:	b.n	9096 <usb_isr+0x39a>
    96d2:	ldr	r0, [r1, #60]	; 0x3c
    96d4:	subs	r0, #8
    96d6:	bl	8afc <usb_free>
    96da:	b.n	908a <usb_isr+0x38e>
    96dc:	ldr	r0, [r1, #52]	; 0x34
    96de:	subs	r0, #8
    96e0:	bl	8afc <usb_free>
    96e4:	b.n	907e <usb_isr+0x382>
    96e6:	ldr	r0, [r1, #44]	; 0x2c
    96e8:	subs	r0, #8
    96ea:	bl	8afc <usb_free>
    96ee:	b.n	9072 <usb_isr+0x376>
    96f0:	ldr	r0, [r4, #36]	; 0x24
    96f2:	subs	r0, #8
    96f4:	bl	8afc <usb_free>
    96f8:	b.n	9066 <usb_isr+0x36a>
    96fa:	ldr	r0, [r1, #124]	; 0x7c
    96fc:	subs	r0, #8
    96fe:	bl	8afc <usb_free>
    9702:	b.n	90ea <usb_isr+0x3ee>
    9704:	ldr	r0, [r1, #116]	; 0x74
    9706:	subs	r0, #8
    9708:	bl	8afc <usb_free>
    970c:	b.n	90de <usb_isr+0x3e2>
    970e:	ldr	r0, [r1, #108]	; 0x6c
    9710:	subs	r0, #8
    9712:	bl	8afc <usb_free>
    9716:	b.n	90d2 <usb_isr+0x3d6>
    9718:	ldr	r0, [r1, #100]	; 0x64
    971a:	subs	r0, #8
    971c:	bl	8afc <usb_free>
    9720:	b.n	90c6 <usb_isr+0x3ca>
    9722:	ldr.w	r0, [r1, #140]	; 0x8c
    9726:	subs	r0, #8
    9728:	bl	8afc <usb_free>
    972c:	b.n	9102 <usb_isr+0x406>
    972e:	ldr.w	r0, [r1, #132]	; 0x84
    9732:	subs	r0, #8
    9734:	bl	8afc <usb_free>
    9738:	b.n	90f6 <usb_isr+0x3fa>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    973a:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    973c:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    9740:	adds	r2, #1
    9742:	strb	r2, [r5, #0]
    9744:	b.n	91ca <usb_isr+0x4ce>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    9746:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    9748:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    974c:	adds	r2, #1
    974e:	strb	r2, [r5, #0]
    9750:	b.n	967c <usb_isr+0x980>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    9752:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    9754:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    9758:	adds	r2, #1
    975a:	strb	r2, [r5, #0]
    975c:	b.n	91e6 <usb_isr+0x4ea>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    975e:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    9760:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    9764:	adds	r2, #1
    9766:	strb	r2, [r5, #0]
    9768:	b.n	9652 <usb_isr+0x956>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    976a:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    976c:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    9770:	adds	r2, #1
    9772:	strb	r2, [r5, #0]
    9774:	b.n	9218 <usb_isr+0x51c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    9776:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    9778:	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    977c:	adds	r2, #1
    977e:	strb	r2, [r5, #0]
    9780:	b.n	95a0 <usb_isr+0x8a4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    9782:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    9784:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    9788:	adds	r2, #1
    978a:	strb	r2, [r5, #0]
    978c:	b.n	9200 <usb_isr+0x504>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    978e:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    9790:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    9794:	adds	r2, #1
    9796:	strb	r2, [r5, #0]
    9798:	b.n	95ce <usb_isr+0x8d2>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    979a:	bkpt	0x0000
    979c:	cmp.w	lr, #64	; 0x40
    97a0:	mov	ip, lr
    97a2:	it	cs
    97a4:	movcs.w	ip, #64	; 0x40
    97a8:	add.w	r3, r4, ip
    97ac:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    97ae:	movs	r3, #1
    97b0:	rsb	r0, ip, lr
    97b4:	mov.w	r8, ip, lsl #16
    97b8:	movs	r2, #0
    97ba:	str	r3, [sp, #4]
    97bc:	b.n	9234 <usb_isr+0x538>
    97be:	nop
    97c0:	.word	0x00400088
    97c4:	.word	0x004000c8

000097c8 <usb_init>:
}



void usb_init(void)
{
    97c8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    97cc:	bl	a710 <usb_init_serialnumber>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    97d0:	ldr	r4, [pc, #188]	; (9890 <usb_init+0xc8>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    97d2:	ldr	r3, [pc, #192]	; (9894 <usb_init+0xcc>)

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    97d4:	ldr	r0, [pc, #192]	; (9898 <usb_init+0xd0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    97d6:	ldr.w	r8, [pc, #216]	; 98b0 <usb_init+0xe8>
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    97da:	ldr	r7, [pc, #192]	; (989c <usb_init+0xd4>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    97dc:	ldr	r5, [pc, #192]	; (98a0 <usb_init+0xd8>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    97de:	ldr	r6, [pc, #196]	; (98a4 <usb_init+0xdc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    97e0:	ldr.w	ip, [pc, #208]	; 98b4 <usb_init+0xec>
	USB0_ERRSTAT = 0xFF;
    97e4:	ldr.w	lr, [pc, #208]	; 98b8 <usb_init+0xf0>
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    97e8:	movs	r2, #0
    97ea:	str	r2, [r3, #0]
		table[i].addr = 0;
    97ec:	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    97ee:	str	r2, [r3, #8]
		table[i].addr = 0;
    97f0:	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    97f2:	str	r2, [r3, #16]
		table[i].addr = 0;
    97f4:	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    97f6:	str	r2, [r3, #24]
		table[i].addr = 0;
    97f8:	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    97fa:	str	r2, [r3, #32]
		table[i].addr = 0;
    97fc:	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    97fe:	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    9800:	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9802:	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    9804:	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9806:	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    9808:	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    980a:	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    980c:	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    980e:	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    9810:	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9812:	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    9814:	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9816:	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    9818:	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    981a:	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    981c:	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    981e:	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    9820:	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9822:	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    9824:	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9826:	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    9828:	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    982a:	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    982e:	ldr	r1, [r4, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    9830:	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    9834:	orr.w	r1, r1, #262144	; 0x40000
    9838:	str	r1, [r4, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    983a:	ldr	r1, [r0, #0]
    983c:	orr.w	r1, r1, #50331648	; 0x3000000
    9840:	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    9842:	ubfx	r1, r3, #8, #8
    9846:	strb.w	r1, [r8]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    984a:	add.w	r4, r4, #172032	; 0x2a000
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    984e:	ubfx	r1, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    9852:	lsrs	r3, r3, #24
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    9854:	strb	r1, [r7, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    9856:	adds	r4, #204	; 0xcc
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    9858:	strb	r3, [r5, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    985a:	add.w	r0, r0, #2684354560	; 0xa0000000
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    985e:	movs	r3, #255	; 0xff
    9860:	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    9864:	ldr	r5, [pc, #64]	; (98a8 <usb_init+0xe0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    9866:	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    986a:	addw	r0, r0, #2308	; 0x904
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    986e:	strb	r3, [r6, #0]
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    9870:	ldr	r1, [pc, #56]	; (98ac <usb_init+0xe4>)
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    9872:	movs	r3, #1
    9874:	strb.w	r3, [r8, #-8]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    9878:	movs	r6, #112	; 0x70

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    987a:	strb	r2, [r4, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    987c:	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    9880:	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    9882:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    9886:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    9888:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    988a:	strb	r2, [r1, #0]
    988c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9890:	.word	0x40048034
    9894:	.word	0x1fff0000
    9898:	.word	0x4000d800
    989c:	.word	0x400720b0
    98a0:	.word	0x400720b4
    98a4:	.word	0x40072010
    98a8:	.word	0xe000e435
    98ac:	.word	0x40072108
    98b0:	.word	0x4007209c
    98b4:	.word	0x40072080
    98b8:	.word	0x40072088

000098bc <DMAChannel::begin(bool)>:
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    98bc:	push	{r4, r5, r6, r7, lr}
	uint32_t ch = 0;

	__disable_irq();
    98be:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    98c0:	cbnz	r1, 98ea <DMAChannel::begin(bool)+0x2e>
    98c2:	ldr	r2, [r0, #0]
    98c4:	cbz	r2, 98ea <DMAChannel::begin(bool)+0x2e>
    98c6:	ldrb	r3, [r0, #4]
    98c8:	cmp	r3, #15
    98ca:	bhi.n	98ea <DMAChannel::begin(bool)+0x2e>
	  && (dma_channel_allocated_mask & (1 << channel))
    98cc:	ldr	r4, [pc, #160]	; (9970 <DMAChannel::begin(bool)+0xb4>)
    98ce:	ldrh	r1, [r4, #0]
    98d0:	asr.w	r5, r1, r3
    98d4:	lsls	r5, r5, #31
    98d6:	bpl.n	98ee <DMAChannel::begin(bool)+0x32>
	  && (uint32_t)TCD == (uint32_t)(0x40009000 + channel * 32)) {
    98d8:	add.w	r3, r3, #33554432	; 0x2000000
    98dc:	add.w	r3, r3, #1152	; 0x480
    98e0:	cmp.w	r2, r3, lsl #5
    98e4:	bne.n	98ee <DMAChannel::begin(bool)+0x32>
		// DMA channel already allocated
		__enable_irq();
    98e6:	cpsie	i
		return;
    98e8:	pop	{r4, r5, r6, r7, pc}
    98ea:	ldr	r4, [pc, #132]	; (9970 <DMAChannel::begin(bool)+0xb4>)
    98ec:	ldrh	r1, [r4, #0]
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    98ee:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    98f0:	asr.w	r2, r1, r3
    98f4:	ands.w	r2, r2, #1
    98f8:	beq.n	990a <DMAChannel::begin(bool)+0x4e>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    98fa:	adds	r3, #1
    98fc:	cmp	r3, #16
    98fe:	bne.n	98f0 <DMAChannel::begin(bool)+0x34>
			__enable_irq();
    9900:	cpsie	i
			TCD = (TCD_t *)0;
    9902:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    9904:	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    9906:	str	r2, [r0, #0]
    9908:	pop	{r4, r5, r6, r7, pc}
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    990a:	movs	r5, #1
    990c:	lsls	r5, r3
    990e:	orrs	r1, r5
    9910:	strh	r1, [r4, #0]
			__enable_irq();
    9912:	cpsie	i
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    9914:	ldr	r6, [pc, #92]	; (9974 <DMAChannel::begin(bool)+0xb8>)
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    9916:	ldr	r5, [pc, #96]	; (9978 <DMAChannel::begin(bool)+0xbc>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    9918:	ldr	r7, [pc, #96]	; (997c <DMAChannel::begin(bool)+0xc0>)
#endif
	DMA_CERQ = ch;
    991a:	ldr.w	lr, [pc, #104]	; 9984 <DMAChannel::begin(bool)+0xc8>
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    991e:	uxtb	r1, r3
    9920:	strb	r1, [r0, #4]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    9922:	ldr	r4, [r6, #0]
    9924:	orr.w	r4, r4, #2
    9928:	str	r4, [r6, #0]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    992a:	ldr	r4, [r5, #0]
    992c:	orr.w	r4, r4, #2
    9930:	str	r4, [r5, #0]
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    9932:	sub.w	r6, r6, #262144	; 0x40000
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    9936:	movw	r4, #1154	; 0x482
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
    993a:	sub.w	r5, r5, #262144	; 0x40000
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    993e:	add.w	r3, r3, #33554432	; 0x2000000
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    9942:	str	r4, [r7, #0]
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    9944:	add.w	r3, r3, #1152	; 0x480
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    9948:	subs	r6, #34	; 0x22
	DMA_CEEI = ch;
    994a:	subs	r5, #36	; 0x24
	DMA_CINT = ch;
    994c:	ldr	r4, [pc, #48]	; (9980 <DMAChannel::begin(bool)+0xc4>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
    994e:	strb.w	r1, [lr]
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    9952:	lsls	r3, r3, #5
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    9954:	strb	r1, [r6, #0]
	DMA_CEEI = ch;
    9956:	strb	r1, [r5, #0]
	DMA_CINT = ch;
    9958:	strb	r1, [r4, #0]
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    995a:	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    995c:	str	r2, [r3, #0]
	*p++ = 0;
    995e:	str	r2, [r3, #4]
	*p++ = 0;
    9960:	str	r2, [r3, #8]
	*p++ = 0;
    9962:	str	r2, [r3, #12]
	*p++ = 0;
    9964:	str	r2, [r3, #16]
	*p++ = 0;
    9966:	str	r2, [r3, #20]
	*p++ = 0;
    9968:	str	r2, [r3, #24]
	*p++ = 0;
    996a:	str	r2, [r3, #28]
    996c:	pop	{r4, r5, r6, r7, pc}
    996e:	nop
    9970:	.word	0x2001ca48
    9974:	.word	0x40048040
    9978:	.word	0x4004803c
    997c:	.word	0x40008000
    9980:	.word	0x4000801f
    9984:	.word	0x4000801a

00009988 <DMAChannel::release()>:
}

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    9988:	ldrb	r3, [r0, #4]
    998a:	cmp	r3, #15
    998c:	bhi.n	99b4 <DMAChannel::release()+0x2c>
	DMA_CERQ = channel;
    998e:	ldr	r2, [pc, #40]	; (99b8 <DMAChannel::release()+0x30>)
	*p++ = 0;
	*p++ = 0;
}

void DMAChannel::release(void)
{
    9990:	push	{r4}
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
    9992:	strb	r3, [r2, #0]
	__disable_irq();
    9994:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    9996:	ldr	r1, [pc, #36]	; (99bc <DMAChannel::release()+0x34>)
    9998:	ldrb	r4, [r0, #4]
    999a:	ldrh	r2, [r1, #0]
    999c:	movs	r3, #1
    999e:	lsls	r3, r4
    99a0:	bic.w	r3, r2, r3
    99a4:	strh	r3, [r1, #0]
	__enable_irq();
    99a6:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    99a8:	movs	r2, #16
	TCD = (TCD_t *)0;
    99aa:	movs	r3, #0
}
    99ac:	ldr.w	r4, [sp], #4
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
    99b0:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    99b2:	str	r3, [r0, #0]
}
    99b4:	bx	lr
    99b6:	nop
    99b8:	.word	0x4000801a
    99bc:	.word	0x2001ca48

000099c0 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    99c0:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    99c2:	mrs	r2, PRIMASK
		__disable_irq();
    99c6:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    99c8:	ldrb	r3, [r0, #29]
    99ca:	cbnz	r3, 99da <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    99cc:	ldrb	r1, [r0, #28]
    99ce:	cmp	r1, #1
    99d0:	beq.n	99e4 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    99d2:	cmp	r1, #3
    99d4:	beq.n	99f8 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    99d6:	movs	r3, #1
    99d8:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    99da:	cbnz	r2, 99de <EventResponder::triggerEventNotImmediate()+0x1e>
    99dc:	cpsie	i
	}
	enableInterrupts(irq);
}
    99de:	ldr.w	r4, [sp], #4
    99e2:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    99e4:	ldr	r4, [pc, #68]	; (9a2c <EventResponder::triggerEventNotImmediate()+0x6c>)
    99e6:	ldr	r1, [r4, #0]
    99e8:	cbz	r1, 9a14 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    99ea:	ldr	r1, [pc, #68]	; (9a30 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    99ec:	str	r3, [r0, #20]
				_prev = lastYield;
    99ee:	ldr	r3, [r1, #0]
    99f0:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    99f2:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    99f4:	str	r0, [r3, #20]
    99f6:	b.n	99d6 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    99f8:	ldr	r4, [pc, #56]	; (9a34 <EventResponder::triggerEventNotImmediate()+0x74>)
    99fa:	ldr	r1, [r4, #0]
    99fc:	cbz	r1, 9a20 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    99fe:	ldr	r1, [pc, #56]	; (9a38 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    9a00:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    9a02:	ldr	r3, [r1, #0]
    9a04:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    9a06:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    9a08:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    9a0a:	ldr	r3, [pc, #48]	; (9a3c <EventResponder::triggerEventNotImmediate()+0x7c>)
    9a0c:	mov.w	r1, #268435456	; 0x10000000
    9a10:	str	r1, [r3, #0]
    9a12:	b.n	99d6 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    9a14:	ldr	r3, [pc, #24]	; (9a30 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    9a16:	str	r1, [r0, #20]
				_prev = nullptr;
    9a18:	str	r1, [r0, #24]
				firstYield = this;
    9a1a:	str	r0, [r4, #0]
				lastYield = this;
    9a1c:	str	r0, [r3, #0]
    9a1e:	b.n	99d6 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    9a20:	ldr	r3, [pc, #20]	; (9a38 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    9a22:	str	r1, [r0, #20]
				_prev = nullptr;
    9a24:	str	r1, [r0, #24]
				firstInterrupt = this;
    9a26:	str	r0, [r4, #0]
				lastInterrupt = this;
    9a28:	str	r0, [r3, #0]
    9a2a:	b.n	9a0a <EventResponder::triggerEventNotImmediate()+0x4a>
    9a2c:	.word	0x2001ca5c
    9a30:	.word	0x2001ca58
    9a34:	.word	0x2001ca4c
    9a38:	.word	0x2001ca50
    9a3c:	.word	0xe000ed04

00009a40 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    9a40:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9a42:	mrs	r2, PRIMASK
		__disable_irq();
    9a46:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    9a48:	ldr	r4, [pc, #48]	; (9a7c <EventResponder::runFromInterrupt()+0x3c>)
    9a4a:	ldr	r0, [r4, #0]
		if (first) {
    9a4c:	cbz	r0, 9a70 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    9a4e:	ldr	r6, [pc, #48]	; (9a80 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    9a50:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    9a52:	ldr	r3, [r0, #20]
    9a54:	str	r3, [r4, #0]
			if (firstInterrupt) {
    9a56:	cbz	r3, 9a76 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    9a58:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9a5a:	cbnz	r2, 9a5e <EventResponder::runFromInterrupt()+0x1e>
    9a5c:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    9a5e:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    9a60:	ldr	r3, [r0, #8]
    9a62:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9a64:	mrs	r2, PRIMASK
		__disable_irq();
    9a68:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    9a6a:	ldr	r0, [r4, #0]
		if (first) {
    9a6c:	cmp	r0, #0
    9a6e:	bne.n	9a52 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9a70:	cbnz	r2, 9a74 <EventResponder::runFromInterrupt()+0x34>
    9a72:	cpsie	i
    9a74:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    9a76:	str	r3, [r6, #0]
    9a78:	b.n	9a5a <EventResponder::runFromInterrupt()+0x1a>
    9a7a:	nop
    9a7c:	.word	0x2001ca4c
    9a80:	.word	0x2001ca50

00009a84 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    9a84:	b.w	9a40 <EventResponder::runFromInterrupt()>

00009a88 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    9a88:	ldr	r2, [pc, #96]	; (9aec <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    9a8a:	push	{r4, r5}
	if (listActive == nullptr) {
    9a8c:	ldr	r4, [r2, #0]
    9a8e:	cmp	r4, #0
    9a90:	beq.n	9ae2 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    9a92:	ldr	r3, [r0, #0]
    9a94:	ldr	r1, [r4, #0]
    9a96:	cmp	r3, r1
    9a98:	bcs.n	9ab8 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    9a9a:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    9a9c:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    9a9e:	str	r4, [r0, #8]
		_prev = nullptr;
    9aa0:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    9aa2:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    9aa4:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    9aa6:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    9aa8:	movs	r3, #2
    9aaa:	strb	r3, [r0, #20]
}
    9aac:	pop	{r4, r5}
    9aae:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    9ab0:	ldr	r1, [r2, #0]
    9ab2:	cmp	r3, r1
    9ab4:	mov	r4, r2
    9ab6:	bcc.n	9aca <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    9ab8:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    9aba:	subs	r3, r3, r1
    9abc:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    9abe:	cmp	r2, #0
    9ac0:	bne.n	9ab0 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    9ac2:	str	r2, [r0, #8]
		_prev = timer;
    9ac4:	str	r4, [r0, #12]
		timer->_next = this;
    9ac6:	str	r0, [r4, #8]
    9ac8:	b.n	9aa8 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    9aca:	ldr	r2, [r2, #12]
    9acc:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    9ace:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    9ad0:	str	r0, [r4, #12]
				_prev->_next = this;
    9ad2:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    9ad4:	subs	r3, r1, r3
				_state = TimerActive;
    9ad6:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    9ad8:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    9ada:	str	r3, [r4, #0]
				_state = TimerActive;
    9adc:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    9ade:	pop	{r4, r5}
    9ae0:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    9ae2:	str	r4, [r0, #8]
		_prev = nullptr;
    9ae4:	str	r4, [r0, #12]
		listActive = this;
    9ae6:	str	r0, [r2, #0]
    9ae8:	b.n	9aa8 <MillisTimer::addToActiveList()+0x20>
    9aea:	nop
    9aec:	.word	0x2001ca54

00009af0 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    9af0:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    9af2:	ldr	r6, [pc, #136]	; (9b7c <MillisTimer::runFromTimer()+0x8c>)
    9af4:	ldr	r4, [r6, #0]
	while (timer) {
    9af6:	cbz	r4, 9b44 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    9af8:	ldr	r3, [r4, #0]
    9afa:	cmp	r3, #0
    9afc:	bne.n	9b74 <MillisTimer::runFromTimer()+0x84>
    9afe:	ldr	r7, [pc, #128]	; (9b80 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    9b00:	mov	r5, r3
    9b02:	b.n	9b0e <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    9b04:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    9b06:	cbz	r4, 9b44 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    9b08:	ldr	r3, [r4, #0]
    9b0a:	cmp	r3, #0
    9b0c:	bne.n	9b74 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    9b0e:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    9b10:	cbz	r3, 9b14 <MillisTimer::runFromTimer()+0x24>
    9b12:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    9b14:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    9b16:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    9b18:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    9b1a:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    9b1c:	ldr	r3, [r3, #0]
    9b1e:	cmp	r3, r7
    9b20:	bne.n	9b66 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    9b22:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    9b24:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    9b26:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    9b28:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    9b2a:	beq.n	9b6e <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    9b2c:	bl	99c0 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    9b30:	ldr	r3, [r4, #4]
    9b32:	cmp	r3, #0
    9b34:	beq.n	9b04 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    9b36:	str	r3, [r4, #0]
				timer->addToActiveList();
    9b38:	mov	r0, r4
    9b3a:	bl	9a88 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    9b3e:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    9b40:	cmp	r4, #0
    9b42:	bne.n	9b08 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9b44:	mrs	r3, PRIMASK
		__disable_irq();
    9b48:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    9b4a:	ldr	r2, [pc, #56]	; (9b84 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    9b4c:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    9b4e:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    9b50:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    9b52:	cbnz	r3, 9b56 <MillisTimer::runFromTimer()+0x66>
    9b54:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    9b56:	cbz	r0, 9b64 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    9b58:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    9b5a:	bl	9a88 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    9b5e:	mov	r0, r4
    9b60:	cmp	r0, #0
    9b62:	bne.n	9b58 <MillisTimer::runFromTimer()+0x68>
    9b64:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    9b66:	mov	r2, r4
    9b68:	movs	r1, #0
    9b6a:	blx	r3
    9b6c:	b.n	9b30 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    9b6e:	ldr	r3, [r0, #8]
    9b70:	blx	r3
    9b72:	b.n	9b30 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    9b74:	subs	r3, #1
    9b76:	str	r3, [r4, #0]
			break;
    9b78:	b.n	9b44 <MillisTimer::runFromTimer()+0x54>
    9b7a:	nop
    9b7c:	.word	0x2001ca54
    9b80:	.word	0x000022f1
    9b84:	.word	0x2001ca64

00009b88 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    9b88:	ldr	r2, [pc, #8]	; (9b94 <systick_isr+0xc>)
    9b8a:	ldr	r3, [r2, #0]
    9b8c:	adds	r3, #1
    9b8e:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    9b90:	b.w	9af0 <MillisTimer::runFromTimer()>
    9b94:	.word	0x2001c95c

00009b98 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    9b98:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    9b9a:	ldr	r4, [pc, #176]	; (9c4c <yield+0xb4>)
    9b9c:	ldrb	r3, [r4, #0]
    9b9e:	cbz	r3, 9ba2 <yield+0xa>
    9ba0:	pop	{r3, r4, r5, pc}
	running = 1;
    9ba2:	movs	r3, #1
    9ba4:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    9ba6:	bl	8378 <usb_serial_available>
	if (Serial.available()) serialEvent();
    9baa:	cmp	r0, #0
    9bac:	bne.n	9c34 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    9bae:	bl	a4e0 <serial_available>
	if (SerialUSB1.available()) serialEventUSB1();
#endif
#ifdef USB_TRIPLE_SERIAL
	if (SerialUSB2.available()) serialEventUSB2();
#endif
	if (Serial1.available()) serialEvent1();
    9bb2:	cmp	r0, #0
    9bb4:	bne.n	9c2e <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    9bb6:	bl	a2bc <serial2_available>
	if (Serial2.available()) serialEvent2();
    9bba:	cmp	r0, #0
    9bbc:	bne.n	9c28 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    9bbe:	bl	a7d8 <serial3_available>
	if (Serial3.available()) serialEvent3();
    9bc2:	cbnz	r0, 9c22 <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    9bc4:	bl	a3e8 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    9bc8:	cbnz	r0, 9c1c <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    9bca:	bl	a1c4 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    9bce:	cbnz	r0, 9c16 <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    9bd0:	bl	a60c <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    9bd4:	cbnz	r0, 9c10 <yield+0x78>
#endif
	running = 0;
    9bd6:	movs	r3, #0
    9bd8:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    9bda:	mrs	r3, IPSR
		if (ipsr != 0) return;
    9bde:	cmp	r3, #0
    9be0:	bne.n	9ba0 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9be2:	mrs	r1, PRIMASK
		__disable_irq();
    9be6:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    9be8:	ldr	r3, [pc, #100]	; (9c50 <yield+0xb8>)
    9bea:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    9bec:	cbz	r0, 9c3a <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    9bee:	ldr	r4, [pc, #100]	; (9c54 <yield+0xbc>)
    9bf0:	ldrb	r2, [r4, #0]
    9bf2:	cbnz	r2, 9c3a <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    9bf4:	ldr	r5, [r0, #20]
    9bf6:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    9bf8:	movs	r3, #1
    9bfa:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    9bfc:	cbz	r5, 9c42 <yield+0xaa>
			firstYield->_prev = nullptr;
    9bfe:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9c00:	cbnz	r1, 9c04 <yield+0x6c>
    9c02:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    9c04:	movs	r5, #0
    9c06:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    9c08:	ldr	r3, [r0, #8]
    9c0a:	blx	r3
		runningFromYield = false;
    9c0c:	strb	r5, [r4, #0]
    9c0e:	b.n	9ba0 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    9c10:	bl	a1b8 <serialEvent6()>
    9c14:	b.n	9bd6 <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    9c16:	bl	9c5c <serialEvent5()>
    9c1a:	b.n	9bd0 <yield+0x38>
#endif
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    9c1c:	bl	9d88 <serialEvent4()>
    9c20:	b.n	9bca <yield+0x32>
#ifdef USB_TRIPLE_SERIAL
	if (SerialUSB2.available()) serialEventUSB2();
#endif
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    9c22:	bl	a8d0 <serialEvent3()>
    9c26:	b.n	9bc4 <yield+0x2c>
#endif
#ifdef USB_TRIPLE_SERIAL
	if (SerialUSB2.available()) serialEventUSB2();
#endif
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    9c28:	bl	9d84 <serialEvent2()>
    9c2c:	b.n	9bbe <yield+0x26>
	if (SerialUSB1.available()) serialEventUSB1();
#endif
#ifdef USB_TRIPLE_SERIAL
	if (SerialUSB2.available()) serialEventUSB2();
#endif
	if (Serial1.available()) serialEvent1();
    9c2e:	bl	9d9c <serialEvent1()>
    9c32:	b.n	9bb6 <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    9c34:	bl	9c88 <serialEvent()>
    9c38:	b.n	9bae <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9c3a:	cmp	r1, #0
    9c3c:	bne.n	9ba0 <yield+0x8>
    9c3e:	cpsie	i
    9c40:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    9c42:	ldr	r3, [pc, #20]	; (9c58 <yield+0xc0>)
    9c44:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9c46:	cmp	r1, #0
    9c48:	bne.n	9c04 <yield+0x6c>
    9c4a:	b.n	9c02 <yield+0x6a>
    9c4c:	.word	0x2001ca68
    9c50:	.word	0x2001ca5c
    9c54:	.word	0x2001ca60
    9c58:	.word	0x2001ca58

00009c5c <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    9c5c:	bx	lr
    9c5e:	nop

00009c60 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    9c60:	b.w	8394 <usb_serial_flush_input>

00009c64 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    9c64:	b.w	8348 <usb_serial_peekchar>

00009c68 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    9c68:	b.w	8300 <usb_serial_getchar>

00009c6c <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    9c6c:	b.w	8378 <usb_serial_available>

00009c70 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    9c70:	b.w	8534 <usb_serial_flush_output>

00009c74 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    9c74:	b.w	84ec <usb_serial_write_buffer_free>

00009c78 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9c78:	mov	r0, r1
    9c7a:	mov	r1, r2
    9c7c:	b.w	83cc <usb_serial_write>

00009c80 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9c80:	mov	r0, r1
    9c82:	b.w	84d4 <usb_serial_putchar>
    9c86:	nop

00009c88 <serialEvent()>:
    9c88:	bx	lr
    9c8a:	nop

00009c8c <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    9c8c:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    9c8e:	mov	r6, r1
    9c90:	cbz	r1, 9cb0 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    9c92:	cbz	r2, 9cb4 <Print::write(unsigned char const*, unsigned int)+0x28>
    9c94:	mov	r7, r0
    9c96:	mov	r4, r2
    9c98:	movs	r5, #0
    9c9a:	ldr	r3, [r7, #0]
    9c9c:	ldrb.w	r1, [r6], #1
    9ca0:	ldr	r3, [r3, #0]
    9ca2:	mov	r0, r7
    9ca4:	blx	r3
    9ca6:	subs	r4, #1
    9ca8:	add	r5, r0
    9caa:	bne.n	9c9a <Print::write(unsigned char const*, unsigned int)+0xe>
    9cac:	mov	r0, r5
    9cae:	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    9cb0:	mov	r0, r1
    9cb2:	pop	{r3, r4, r5, r6, r7, pc}
    9cb4:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    9cb6:	pop	{r3, r4, r5, r6, r7, pc}

00009cb8 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    9cb8:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    9cba:	ldr	r2, [pc, #24]	; (9cd4 <Print::println()+0x1c>)
	return write(buf, 2);
    9cbc:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    9cbe:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    9cc0:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    9cc2:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    9cc4:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    9cc6:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    9cca:	movs	r2, #2
    9ccc:	blx	r3
}
    9cce:	add	sp, #12
    9cd0:	ldr.w	pc, [sp], #4
    9cd4:	.word	0x000136dc

00009cd8 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    9cd8:	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    9cda:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    9cdc:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    9cde:	ldr	r3, [r3, #4]
    9ce0:	blx	r3
	return len;
}
    9ce2:	mov	r0, r4
    9ce4:	pop	{r4, pc}
    9ce6:	nop

00009ce8 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    9ce8:	push	{r1, r2, r3}
    9cea:	push	{lr}
    9cec:	sub	sp, #8
    9cee:	add	r2, sp, #12
    9cf0:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    9cf4:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    9cf6:	bl	ff88 <vdprintf>
#endif
}
    9cfa:	add	sp, #8
    9cfc:	ldr.w	lr, [sp], #4
    9d00:	add	sp, #12
    9d02:	bx	lr

00009d04 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    9d04:	push	{r4, r5, r6, r7, lr}
    9d06:	mov	r7, r0
    9d08:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    9d0a:	cmp	r2, #0
    9d0c:	beq.n	9d76 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    9d0e:	cmp	r2, #1
    9d10:	it	eq
    9d12:	moveq	r2, #10
	}


	if (n == 0) {
    9d14:	cbz	r1, 9d6c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    9d16:	movs	r4, #33	; 0x21
    9d18:	b.n	9d1c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    9d1a:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    9d1c:	udiv	r5, r1, r2
    9d20:	mls	r1, r2, r5, r1
    9d24:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9d26:	cmp	r1, #9
    9d28:	add.w	r1, r0, #48	; 0x30
    9d2c:	it	ls
    9d2e:	uxtbls	r0, r1
    9d30:	add	r1, sp, #40	; 0x28
    9d32:	it	hi
    9d34:	addhi	r0, #55	; 0x37
    9d36:	add	r1, r4
    9d38:	it	hi
    9d3a:	uxtbhi	r0, r0
    9d3c:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    9d40:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    9d42:	mov	r1, r5
    9d44:	cmp	r5, #0
    9d46:	bne.n	9d1a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    9d48:	cbz	r3, 9d58 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    9d4a:	subs	r4, #1
    9d4c:	uxtb	r4, r4
		buf[i] = '-';
    9d4e:	add	r3, sp, #40	; 0x28
    9d50:	add	r3, r4
    9d52:	movs	r2, #45	; 0x2d
    9d54:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    9d58:	ldr	r3, [r7, #0]
    9d5a:	add	r2, sp, #4
    9d5c:	adds	r1, r2, r4
    9d5e:	ldr	r3, [r3, #4]
    9d60:	mov	r0, r7
    9d62:	rsb	r2, r4, #34	; 0x22
    9d66:	blx	r3
}
    9d68:	add	sp, #44	; 0x2c
    9d6a:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    9d6c:	movs	r2, #48	; 0x30
    9d6e:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    9d72:	movs	r4, #33	; 0x21
    9d74:	b.n	9d48 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    9d76:	ldr	r3, [r0, #0]
    9d78:	uxtb	r1, r1
    9d7a:	ldr	r3, [r3, #0]
    9d7c:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    9d7e:	add	sp, #44	; 0x2c
    9d80:	pop	{r4, r5, r6, r7, pc}
    9d82:	nop

00009d84 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    9d84:	bx	lr
    9d86:	nop

00009d88 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    9d88:	bx	lr
    9d8a:	nop

00009d8c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    9d8c:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    9d8e:	bl	19b8 <setup>
	while (1) {
		loop();
    9d92:	bl	1d14 <loop>
		yield();
    9d96:	bl	9b98 <yield>
    9d9a:	b.n	9d92 <main+0x6>

00009d9c <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    9d9c:	bx	lr
    9d9e:	nop

00009da0 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:


// Set up the pool of audio data blocks
// placing them all onto the free list
void AudioStream::initialize_memory(audio_block_t *data, unsigned int num)
{
    9da0:	cmp.w	r1, #896	; 0x380
    9da4:	push	{r4, r5, r6, r7}
    9da6:	it	cs
    9da8:	movcs.w	r1, #896	; 0x380
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
    9dac:	cpsid	i
	memory_pool = data;
    9dae:	ldr	r2, [pc, #76]	; (9dfc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5c>)
	memory_pool_first_mask = 0;
    9db0:	ldr	r4, [pc, #76]	; (9e00 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x60>)
    9db2:	ldr	r3, [pc, #80]	; (9e04 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x64>)

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
    9db4:	str	r0, [r2, #0]
	memory_pool_first_mask = 0;
    9db6:	movs	r2, #0
    9db8:	strh	r2, [r4, #0]
    9dba:	add.w	r4, r3, #112	; 0x70
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
    9dbe:	str.w	r2, [r3, #4]!
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
    9dc2:	cmp	r3, r4
    9dc4:	bne.n	9dbe <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x1e>
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    9dc6:	cbz	r1, 9df6 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x56>
    9dc8:	ldr	r6, [pc, #60]	; (9e08 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x68>)
    9dca:	movs	r3, #0
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    9dcc:	movs	r7, #1
    9dce:	lsrs	r5, r3, #5
    9dd0:	and.w	r4, r3, #31
    9dd4:	ldr.w	r2, [r6, r5, lsl #2]
    9dd8:	lsl.w	r4, r7, r4
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    9ddc:	adds	r3, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    9dde:	orrs	r2, r4
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    9de0:	cmp	r3, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    9de2:	str.w	r2, [r6, r5, lsl #2]
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    9de6:	bne.n	9dce <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x2e>
    9de8:	movs	r3, #0
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
    9dea:	strh	r3, [r0, #2]
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
    9dec:	adds	r3, #1
    9dee:	cmp	r3, r1
    9df0:	add.w	r0, r0, #260	; 0x104
    9df4:	bne.n	9dea <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x4a>
		data[i].memory_pool_index = i;
	}
	__enable_irq();
    9df6:	cpsie	i

}
    9df8:	pop	{r4, r5, r6, r7}
    9dfa:	bx	lr
    9dfc:	.word	0x2001ca74
    9e00:	.word	0x2001caee
    9e04:	.word	0x2001ca78
    9e08:	.word	0x2001ca7c

00009e0c <AudioStream::allocate()>:

// Allocate 1 audio data block.  If successful
// the caller is the only owner of this new block
audio_block_t * AudioStream::allocate(void)
{
    9e0c:	push	{r4, r5, r6, r7}
	audio_block_t *block;
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
    9e0e:	cpsid	i
	index = memory_pool_first_mask;
    9e10:	ldr	r7, [pc, #140]	; (9ea0 <AudioStream::allocate()+0x94>)
	p += index;
    9e12:	ldr	r6, [pc, #144]	; (9ea4 <AudioStream::allocate()+0x98>)
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
    9e14:	ldrh	r4, [r7, #0]
	p += index;
	while (1) {
		if (p >= end) {
    9e16:	add.w	r3, r6, #112	; 0x70

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
    9e1a:	add.w	r0, r6, r4, lsl #2
	while (1) {
		if (p >= end) {
    9e1e:	cmp	r0, r3
    9e20:	bcs.n	9e48 <AudioStream::allocate()+0x3c>
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    9e22:	ldr.w	r1, [r6, r4, lsl #2]
		if (avail) break;
    9e26:	cbnz	r1, 9e50 <AudioStream::allocate()+0x44>
    9e28:	adds	r2, r0, #4
    9e2a:	add.w	r5, r6, #115	; 0x73
    9e2e:	adds	r3, r4, #1
    9e30:	subs	r5, r5, r2
    9e32:	add.w	r5, r3, r5, lsr #2
    9e36:	b.n	9e40 <AudioStream::allocate()+0x34>
		if (p >= end) {
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    9e38:	ldr.w	r1, [r2], #4
		if (avail) break;
    9e3c:	cbnz	r1, 9e50 <AudioStream::allocate()+0x44>
    9e3e:	adds	r3, #1
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    9e40:	cmp	r3, r5
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
		if (avail) break;
		index++;
    9e42:	mov	r4, r3
		p++;
    9e44:	mov	r0, r2
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    9e46:	bne.n	9e38 <AudioStream::allocate()+0x2c>
			__enable_irq();
    9e48:	cpsie	i
			//Serial.println("alloc:null");
			return NULL;
    9e4a:	movs	r0, #0
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    9e4c:	pop	{r4, r5, r6, r7}
    9e4e:	bx	lr
		avail = *p;
		if (avail) break;
		index++;
		p++;
	}
	n = __builtin_clz(avail);
    9e50:	clz	r3, r1
	avail &= ~(0x80000000 >> n);
    9e54:	mov.w	r2, #2147483648	; 0x80000000
    9e58:	lsrs	r2, r3
    9e5a:	bic.w	r1, r1, r2
	*p = avail;
    9e5e:	str	r1, [r0, #0]
	if (!avail) index++;
    9e60:	cbnz	r1, 9e64 <AudioStream::allocate()+0x58>
    9e62:	adds	r4, #1
	memory_pool_first_mask = index;
	used = memory_used + 1;
    9e64:	ldr	r1, [pc, #64]	; (9ea8 <AudioStream::allocate()+0x9c>)
	}
	n = __builtin_clz(avail);
	avail &= ~(0x80000000 >> n);
	*p = avail;
	if (!avail) index++;
	memory_pool_first_mask = index;
    9e66:	strh	r4, [r7, #0]
	used = memory_used + 1;
    9e68:	ldrh	r2, [r1, #0]
    9e6a:	adds	r2, #1
	memory_used = used;
    9e6c:	uxth	r4, r2
    9e6e:	strh	r4, [r1, #0]
	__enable_irq();
    9e70:	cpsie	i
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    9e72:	subs	r0, r0, r6
    9e74:	asrs	r0, r0, #2
    9e76:	rsb	r0, r3, r0, lsl #5
    9e7a:	add.w	r0, r0, r0, lsl #6
    9e7e:	lsls	r3, r0, #2
    9e80:	ldr	r0, [pc, #40]	; (9eac <AudioStream::allocate()+0xa0>)
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    9e82:	ldr	r1, [pc, #44]	; (9eb0 <AudioStream::allocate()+0xa4>)
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    9e84:	ldr	r0, [r0, #0]
    9e86:	add.w	r3, r3, #8032	; 0x1f60
    9e8a:	adds	r3, #28
	block->ref_count = 1;
    9e8c:	movs	r5, #1
    9e8e:	strb	r5, [r0, r3]
	if (used > memory_used_max) memory_used_max = used;
    9e90:	ldrh	r5, [r1, #0]
    9e92:	cmp	r2, r5
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    9e94:	add	r0, r3
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    9e96:	it	hi
    9e98:	strhhi	r4, [r1, #0]
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    9e9a:	pop	{r4, r5, r6, r7}
    9e9c:	bx	lr
    9e9e:	nop
    9ea0:	.word	0x2001caee
    9ea4:	.word	0x2001ca7c
    9ea8:	.word	0x2001caf0
    9eac:	.word	0x2001ca74
    9eb0:	.word	0x2001ca70

00009eb4 <AudioStream::release(audio_block_struct*)>:
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    9eb4:	ldrh	r2, [r0, #2]
	uint32_t index = block->memory_pool_index >> 5;

	__disable_irq();
    9eb6:	cpsid	i
	if (block->ref_count > 1) {
    9eb8:	ldrb	r3, [r0, #0]
    9eba:	cmp	r3, #1
    9ebc:	bls.n	9ec6 <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
    9ebe:	subs	r3, #1
    9ec0:	strb	r3, [r0, #0]
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
	}
	__enable_irq();
    9ec2:	cpsie	i
    9ec4:	bx	lr
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
	uint32_t index = block->memory_pool_index >> 5;
    9ec6:	asrs	r3, r2, #5

// Release ownership of a data block.  If no
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
    9ec8:	push	{r4, r5, r6}
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    9eca:	ldr	r4, [pc, #48]	; (9efc <AudioStream::release(audio_block_struct*)+0x48>)
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    9ecc:	ldr	r5, [pc, #48]	; (9f00 <AudioStream::release(audio_block_struct*)+0x4c>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    9ece:	ldr.w	r1, [r4, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    9ed2:	ldrh	r6, [r5, #0]
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    9ed4:	mvns	r2, r2
    9ed6:	mov.w	r0, #2147483648	; 0x80000000
    9eda:	and.w	r2, r2, #31
    9ede:	lsr.w	r2, r0, r2
    9ee2:	orrs	r1, r2
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
    9ee4:	ldr	r2, [pc, #28]	; (9f04 <AudioStream::release(audio_block_struct*)+0x50>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    9ee6:	str.w	r1, [r4, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    9eea:	cmp	r3, r6
    9eec:	it	cc
    9eee:	strhcc	r3, [r5, #0]
		memory_used--;
    9ef0:	ldrh	r3, [r2, #0]
    9ef2:	subs	r3, #1
    9ef4:	strh	r3, [r2, #0]
	}
	__enable_irq();
    9ef6:	cpsie	i
}
    9ef8:	pop	{r4, r5, r6}
    9efa:	bx	lr
    9efc:	.word	0x2001ca7c
    9f00:	.word	0x2001caee
    9f04:	.word	0x2001caf0

00009f08 <AudioStream::transmit(audio_block_struct*, unsigned char)>:
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    9f08:	ldr	r3, [r0, #12]
    9f0a:	cbz	r3, 9f3a <AudioStream::transmit(audio_block_struct*, unsigned char)+0x32>
// owned by this object.  Normally, a block must be released
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
    9f0c:	push	{r4, r5}
    9f0e:	b.n	9f14 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    9f10:	ldr	r3, [r3, #12]
    9f12:	cbz	r3, 9f38 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
    9f14:	ldrb	r0, [r3, #8]
    9f16:	cmp	r0, r2
    9f18:	bne.n	9f10 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
			if (c->dst.inputQueue[c->dest_index] == NULL) {
    9f1a:	ldr	r0, [r3, #4]
    9f1c:	ldrb	r4, [r3, #9]
    9f1e:	ldr	r0, [r0, #16]
    9f20:	ldr.w	r5, [r0, r4, lsl #2]
    9f24:	cmp	r5, #0
    9f26:	bne.n	9f10 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
				c->dst.inputQueue[c->dest_index] = block;
    9f28:	str.w	r1, [r0, r4, lsl #2]
				block->ref_count++;
    9f2c:	ldrb	r0, [r1, #0]
    9f2e:	adds	r0, #1
    9f30:	strb	r0, [r1, #0]
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    9f32:	ldr	r3, [r3, #12]
    9f34:	cmp	r3, #0
    9f36:	bne.n	9f14 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
				c->dst.inputQueue[c->dest_index] = block;
				block->ref_count++;
			}
		}
	}
}
    9f38:	pop	{r4, r5}
    9f3a:	bx	lr

00009f3c <AudioStream::receiveReadOnly(unsigned int)>:
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    9f3c:	ldrb	r3, [r0, #9]
    9f3e:	cmp	r3, r1
    9f40:	bls.n	9f50 <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
    9f42:	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    9f44:	movs	r2, #0
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
    9f46:	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    9f4a:	str.w	r2, [r3, r1, lsl #2]
	return in;
    9f4e:	bx	lr
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    9f50:	movs	r0, #0
	in = inputQueue[index];
	inputQueue[index] = NULL;
	return in;
}
    9f52:	bx	lr

00009f54 <AudioConnection::connect()>:

void AudioConnection::connect(void)
{
	AudioConnection *p;

	if (isConnected) return;
    9f54:	ldrb	r3, [r0, #16]
    9f56:	cbnz	r3, 9fa2 <AudioConnection::connect()+0x4e>
	if (dest_index > dst.num_inputs) return;
    9f58:	ldr	r3, [r0, #4]
    9f5a:	ldrb	r2, [r0, #9]
    9f5c:	ldrb	r3, [r3, #9]
    9f5e:	cmp	r2, r3
    9f60:	bhi.n	9fa2 <AudioConnection::connect()+0x4e>
	return in;
}


void AudioConnection::connect(void)
{
    9f62:	push	{r4, r5}
	AudioConnection *p;

	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
    9f64:	cpsid	i
	p = src.destination_list;
    9f66:	ldr	r4, [r0, #0]
    9f68:	ldr	r3, [r4, #12]
	if (p == NULL) {
    9f6a:	cbz	r3, 9fb8 <AudioConnection::connect()+0x64>
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    9f6c:	ldr	r2, [r3, #12]
    9f6e:	cbz	r2, 9f7e <AudioConnection::connect()+0x2a>
			if (&p->src == &this->src && &p->dst == &this->dst
    9f70:	ldr	r1, [r3, #0]
    9f72:	cmp	r4, r1
    9f74:	beq.n	9fa4 <AudioConnection::connect()+0x50>
	return in;
}


void AudioConnection::connect(void)
{
    9f76:	mov	r3, r2
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    9f78:	ldr	r2, [r3, #12]
    9f7a:	cmp	r2, #0
    9f7c:	bne.n	9f70 <AudioConnection::connect()+0x1c>
				__enable_irq();
				return;
			}
			p = p->next_dest;
		}
		p->next_dest = this;
    9f7e:	str	r0, [r3, #12]
	}
	this->next_dest = NULL;
    9f80:	movs	r3, #0
    9f82:	str	r3, [r0, #12]
	src.numConnections++;
    9f84:	ldrb	r3, [r4, #10]
    9f86:	adds	r3, #1
    9f88:	strb	r3, [r4, #10]
	src.active = true;
    9f8a:	ldr	r2, [r0, #0]

	dst.numConnections++;
    9f8c:	ldr	r1, [r0, #4]
		}
		p->next_dest = this;
	}
	this->next_dest = NULL;
	src.numConnections++;
	src.active = true;
    9f8e:	movs	r3, #1
    9f90:	strb	r3, [r2, #8]

	dst.numConnections++;
    9f92:	ldrb	r2, [r1, #10]
    9f94:	add	r2, r3
    9f96:	strb	r2, [r1, #10]
	dst.active = true;
    9f98:	ldr	r2, [r0, #4]
    9f9a:	strb	r3, [r2, #8]

	isConnected = true;
    9f9c:	strb	r3, [r0, #16]

	__enable_irq();
    9f9e:	cpsie	i
}
    9fa0:	pop	{r4, r5}
    9fa2:	bx	lr
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
			if (&p->src == &this->src && &p->dst == &this->dst
    9fa4:	ldr	r5, [r3, #4]
    9fa6:	ldr	r1, [r0, #4]
    9fa8:	cmp	r5, r1
    9faa:	bne.n	9f76 <AudioConnection::connect()+0x22>
				&& p->src_index == this->src_index && p->dest_index == this->dest_index) {
    9fac:	ldrh	r1, [r3, #8]
    9fae:	ldrh	r3, [r0, #8]
    9fb0:	cmp	r1, r3
    9fb2:	beq.n	9f9e <AudioConnection::connect()+0x4a>
	return in;
}


void AudioConnection::connect(void)
{
    9fb4:	mov	r3, r2
    9fb6:	b.n	9f78 <AudioConnection::connect()+0x24>
	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
    9fb8:	str	r0, [r4, #12]
    9fba:	b.n	9f80 <AudioConnection::connect()+0x2c>

00009fbc <AudioConnection::disconnect()>:

void AudioConnection::disconnect(void)
{
	AudioConnection *p;

	if (!isConnected) return;
    9fbc:	ldrb	r3, [r0, #16]

	__enable_irq();
}

void AudioConnection::disconnect(void)
{
    9fbe:	push	{r4, lr}
	AudioConnection *p;

	if (!isConnected) return;
    9fc0:	cmp	r3, #0
    9fc2:	beq.n	a02a <AudioConnection::disconnect()+0x6e>
	if (dest_index > dst.num_inputs) return;
    9fc4:	ldr	r3, [r0, #4]
    9fc6:	ldrb	r2, [r0, #9]
    9fc8:	ldrb	r3, [r3, #9]
    9fca:	cmp	r2, r3
    9fcc:	bhi.n	a02a <AudioConnection::disconnect()+0x6e>
	__disable_irq();
    9fce:	cpsid	i
	// Remove destination from source list
	p = src.destination_list;
    9fd0:	ldr	r2, [r0, #0]
    9fd2:	ldr	r3, [r2, #12]
	if (p == NULL) {
    9fd4:	cbz	r3, a028 <AudioConnection::disconnect()+0x6c>
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
    9fd6:	cmp	r0, r3
    9fd8:	bne.n	9fe0 <AudioConnection::disconnect()+0x24>
    9fda:	b.n	a030 <AudioConnection::disconnect()+0x74>
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
			if (p == this) {
    9fdc:	cmp	r0, r3
    9fde:	beq.n	9fe6 <AudioConnection::disconnect()+0x2a>
				} else {
					p = NULL;
					break;
				}
			}
			p = p->next_dest;
    9fe0:	ldr	r3, [r3, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
    9fe2:	cmp	r3, #0
    9fe4:	bne.n	9fdc <AudioConnection::disconnect()+0x20>
			p = p->next_dest;
		}
	}
//>>> PAH release the audio buffer properly
	//Remove possible pending src block from destination
	if(dst.inputQueue[dest_index] != NULL) {
    9fe6:	ldr	r3, [r0, #4]
    9fe8:	ldrb	r1, [r0, #9]
    9fea:	ldr	r3, [r3, #16]
    9fec:	mov	r4, r0
    9fee:	ldr.w	r0, [r3, r1, lsl #2]
    9ff2:	cbz	r0, a008 <AudioConnection::disconnect()+0x4c>
		AudioStream::release(dst.inputQueue[dest_index]);
    9ff4:	bl	9eb4 <AudioStream::release(audio_block_struct*)>
		// release() re-enables the IRQ. Need it to be disabled a little longer
		__disable_irq();
    9ff8:	cpsid	i
		dst.inputQueue[dest_index] = NULL;
    9ffa:	ldr	r3, [r4, #4]
    9ffc:	ldrb	r2, [r4, #9]
    9ffe:	ldr	r3, [r3, #16]
    a000:	movs	r1, #0
    a002:	str.w	r1, [r3, r2, lsl #2]
    a006:	ldr	r2, [r4, #0]
	}

	//Check if the disconnected AudioStream objects should still be active
	src.numConnections--;
    a008:	ldrb	r3, [r2, #10]
    a00a:	subs	r3, #1
    a00c:	strb	r3, [r2, #10]
	if (src.numConnections == 0) {
    a00e:	ldr	r3, [r4, #0]
    a010:	ldrb	r2, [r3, #10]
    a012:	cbnz	r2, a016 <AudioConnection::disconnect()+0x5a>
		src.active = false;
    a014:	strb	r2, [r3, #8]
	}

	dst.numConnections--;
    a016:	ldr	r2, [r4, #4]
    a018:	ldrb	r3, [r2, #10]
    a01a:	subs	r3, #1
    a01c:	strb	r3, [r2, #10]
	if (dst.numConnections == 0) {
    a01e:	ldr	r3, [r4, #4]
    a020:	ldrb	r2, [r3, #10]
    a022:	cbz	r2, a02c <AudioConnection::disconnect()+0x70>
		dst.active = false;
	}

	isConnected = false;
    a024:	movs	r3, #0
    a026:	strb	r3, [r4, #16]

	__enable_irq();
    a028:	cpsie	i
    a02a:	pop	{r4, pc}
		src.active = false;
	}

	dst.numConnections--;
	if (dst.numConnections == 0) {
		dst.active = false;
    a02c:	strb	r2, [r3, #8]
    a02e:	b.n	a024 <AudioConnection::disconnect()+0x68>
	if (p == NULL) {
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
		if (p->next_dest) {
    a030:	ldr	r3, [r0, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
    a032:	str	r3, [r2, #12]
    a034:	b.n	9fe6 <AudioConnection::disconnect()+0x2a>
    a036:	nop

0000a038 <AudioStream::update_setup()>:
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    a038:	ldr	r3, [pc, #32]	; (a05c <AudioStream::update_setup()+0x24>)
    a03a:	ldrb	r2, [r3, #0]
    a03c:	cbnz	r2, a056 <AudioStream::update_setup()+0x1e>
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    a03e:	ldr	r0, [pc, #32]	; (a060 <AudioStream::update_setup()+0x28>)
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    a040:	ldr	r1, [pc, #32]	; (a064 <AudioStream::update_setup()+0x2c>)
// input and output based on interrupts, must check this variable in
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
    a042:	push	{r4}
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    a044:	movs	r4, #208	; 0xd0
    a046:	strb	r4, [r0, #0]
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    a048:	movs	r2, #1
	update_scheduled = true;
	return true;
    a04a:	mov	r0, r2

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    a04c:	str	r2, [r1, #0]
	update_scheduled = true;
    a04e:	strb	r2, [r3, #0]
	return true;
}
    a050:	ldr.w	r4, [sp], #4
    a054:	bx	lr
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    a056:	movs	r0, #0
    a058:	bx	lr
    a05a:	nop
    a05c:	.word	0x2001ca78
    a060:	.word	0xe000e440
    a064:	.word	0xe000e108

0000a068 <software_isr>:

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    a068:	ldr	r1, [pc, #104]	; (a0d4 <software_isr+0x6c>)
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    a06a:	ldr	r2, [pc, #108]	; (a0d8 <software_isr+0x70>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    a06c:	ldr	r0, [pc, #108]	; (a0dc <software_isr+0x74>)
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    a06e:	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    a070:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    a072:	ldr	r5, [pc, #108]	; (a0e0 <software_isr+0x78>)
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    a074:	ldr	r4, [r0, #0]

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    a076:	orr.w	r3, r3, #16777216	; 0x1000000
    a07a:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    a07c:	ldr	r3, [r2, #0]
    a07e:	orr.w	r3, r3, #1
    a082:	str	r3, [r2, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    a084:	ldr	r6, [r5, #0]
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    a086:	cbnz	r4, a08e <software_isr+0x26>
    a088:	b.n	a0b6 <software_isr+0x4e>
    a08a:	ldr	r4, [r4, #20]
    a08c:	cbz	r4, a0b6 <software_isr+0x4e>
		if (p->active) {
    a08e:	ldrb	r3, [r4, #8]
    a090:	cmp	r3, #0
    a092:	beq.n	a08a <software_isr+0x22>
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    a094:	ldr	r3, [r4, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
    a096:	ldr	r7, [r5, #0]
			p->update();
    a098:	ldr	r3, [r3, #0]
    a09a:	mov	r0, r4
    a09c:	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    a09e:	ldr	r3, [r5, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    a0a0:	ldrh	r1, [r4, #6]
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    a0a2:	subs	r3, r3, r7
    a0a4:	lsrs	r3, r3, #4
			p->cpu_cycles = cycles;
    a0a6:	uxth	r2, r3
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    a0a8:	cmp	r3, r1
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
			p->cpu_cycles = cycles;
    a0aa:	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    a0ac:	it	hi
    a0ae:	strhhi	r2, [r4, #6]

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    a0b0:	ldr	r4, [r4, #20]
    a0b2:	cmp	r4, #0
    a0b4:	bne.n	a08e <software_isr+0x26>
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    a0b6:	ldr	r3, [pc, #40]	; (a0e0 <software_isr+0x78>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    a0b8:	ldr	r2, [pc, #40]	; (a0e4 <software_isr+0x7c>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    a0ba:	ldr	r3, [r3, #0]
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    a0bc:	ldrh	r0, [r2, #0]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
	AudioStream::cpu_cycles_total = totalcycles;
    a0be:	ldr	r4, [pc, #40]	; (a0e8 <software_isr+0x80>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    a0c0:	subs	r3, r3, r6
    a0c2:	lsrs	r3, r3, #4
	AudioStream::cpu_cycles_total = totalcycles;
    a0c4:	uxth	r1, r3
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    a0c6:	cmp	r3, r0
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
	AudioStream::cpu_cycles_total = totalcycles;
    a0c8:	strh	r1, [r4, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    a0ca:	bls.n	a0d0 <software_isr+0x68>
		AudioStream::cpu_cycles_total_max = totalcycles;
    a0cc:	strh	r1, [r2, #0]
    a0ce:	pop	{r3, r4, r5, r6, r7, pc}
    a0d0:	pop	{r3, r4, r5, r6, r7, pc}
    a0d2:	nop
    a0d4:	.word	0xe000edfc
    a0d8:	.word	0xe0001000
    a0dc:	.word	0x2001ca6c
    a0e0:	.word	0xe0001004
    a0e4:	.word	0x2001caec
    a0e8:	.word	0x2001caf2

0000a0ec <Stream::timedPeek()>:
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
{
    a0ec:	push	{r4, r5, r6, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    a0ee:	ldr	r5, [pc, #56]	; (a128 <Stream::timedPeek()+0x3c>)
    a0f0:	sub	sp, #8
    a0f2:	ldr	r3, [r5, #0]
    a0f4:	str	r3, [sp, #0]
	return ret;
    a0f6:	ldr	r6, [sp, #0]
    a0f8:	mov	r4, r0
    a0fa:	b.n	a10e <Stream::timedPeek()+0x22>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    a0fc:	bl	9b98 <yield>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    a100:	ldr	r3, [r5, #0]
    a102:	str	r3, [sp, #4]
	return ret;
    a104:	ldr	r3, [sp, #4]
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  unsigned long startMillis = millis();
  do {
    a106:	ldr	r2, [r4, #8]
    a108:	subs	r3, r3, r6
    a10a:	cmp	r3, r2
    a10c:	bcs.n	a11e <Stream::timedPeek()+0x32>
    c = peek();
    a10e:	ldr	r3, [r4, #0]
    a110:	mov	r0, r4
    a112:	ldr	r3, [r3, #24]
    a114:	blx	r3
    if (c >= 0) return c;
    a116:	cmp	r0, #0
    a118:	blt.n	a0fc <Stream::timedPeek()+0x10>
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
}
    a11a:	add	sp, #8
    a11c:	pop	{r4, r5, r6, pc}
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
    a11e:	mov.w	r0, #4294967295
}
    a122:	add	sp, #8
    a124:	pop	{r4, r5, r6, pc}
    a126:	nop
    a128:	.word	0x2001c95c

0000a12c <Stream::peekNextDigit()>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
    a12c:	push	{r4, lr}
    a12e:	mov	r4, r0
    a130:	b.n	a140 <Stream::peekNextDigit()+0x14>
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    if (c == '-') return c;
    a132:	cmp	r3, #45	; 0x2d
    a134:	beq.n	a150 <Stream::peekNextDigit()+0x24>
    if (c >= '0' && c <= '9') return c;
    a136:	cmp	r2, #9
    a138:	bls.n	a150 <Stream::peekNextDigit()+0x24>
    read();  // discard non-numeric
    a13a:	ldr	r3, [r4, #0]
    a13c:	ldr	r3, [r3, #20]
    a13e:	blx	r3
// discards non-numeric characters
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    c = timedPeek();
    a140:	mov	r0, r4
    a142:	bl	a0ec <Stream::timedPeek()>
    if (c < 0) return c;  // timeout
    a146:	subs	r3, r0, #0
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    a148:	sub.w	r2, r3, #48	; 0x30
    read();  // discard non-numeric
    a14c:	mov	r0, r4
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    a14e:	bge.n	a132 <Stream::peekNextDigit()+0x6>
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    read();  // discard non-numeric
  }
}
    a150:	mov	r0, r3
    a152:	pop	{r4, pc}

0000a154 <Stream::parseInt(char)>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
    a154:	push	{r3, r4, r5, r6, r7, lr}
    a156:	mov	r5, r1
    a158:	mov	r4, r0
  boolean isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit();
    a15a:	bl	a12c <Stream::peekNextDigit()>
  // ignore non numeric leading characters
  if(c < 0)
    a15e:	cmp	r0, #0
    a160:	blt.n	a1aa <Stream::parseInt(char)+0x56>
    a162:	movs	r6, #0
    a164:	mov	r7, r6
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    a166:	cmp	r0, r5
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    a168:	sub.w	r2, r0, #48	; 0x30
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    a16c:	beq.n	a182 <Stream::parseInt(char)+0x2e>
      ; // ignore this charactor
    else if(c == '-')
    a16e:	cmp	r0, #45	; 0x2d
    a170:	beq.n	a1a2 <Stream::parseInt(char)+0x4e>
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
      value = value * 10 + c - '0';
    a172:	add.w	r3, r6, r6, lsl #2
  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    a176:	cmp	r2, #9
      value = value * 10 + c - '0';
    a178:	add.w	r0, r0, r3, lsl #1
  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    a17c:	bhi.n	a182 <Stream::parseInt(char)+0x2e>
      value = value * 10 + c - '0';
    a17e:	sub.w	r6, r0, #48	; 0x30
    read();  // consume the character we got with peek
    a182:	ldr	r3, [r4, #0]
    a184:	mov	r0, r4
    a186:	ldr	r3, [r3, #20]
    a188:	blx	r3
    c = timedPeek();
    a18a:	mov	r0, r4
    a18c:	bl	a0ec <Stream::timedPeek()>
  }
  while( (c >= '0' && c <= '9') || c == skipChar );
    a190:	sub.w	r3, r0, #48	; 0x30
    a194:	cmp	r3, #9
    a196:	bls.n	a166 <Stream::parseInt(char)+0x12>
    a198:	cmp	r0, r5
    a19a:	beq.n	a166 <Stream::parseInt(char)+0x12>

  if(isNegative)
    a19c:	cbz	r7, a1a6 <Stream::parseInt(char)+0x52>
    value = -value;
    a19e:	negs	r0, r6
    a1a0:	pop	{r3, r4, r5, r6, r7, pc}

  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    a1a2:	movs	r7, #1
    a1a4:	b.n	a182 <Stream::parseInt(char)+0x2e>
    a1a6:	mov	r0, r6
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
    a1a8:	pop	{r3, r4, r5, r6, r7, pc}
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    a1aa:	movs	r0, #0
    a1ac:	pop	{r3, r4, r5, r6, r7, pc}
    a1ae:	nop

0000a1b0 <Stream::parseInt()>:
// returns the first valid (long) integer value from the current position.
// initial characters that are not digits (or the minus sign) are skipped
// function is terminated by the first character that is not a digit.
long Stream::parseInt()
{
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    a1b0:	movs	r1, #1
    a1b2:	b.w	a154 <Stream::parseInt(char)>
    a1b6:	nop

0000a1b8 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    a1b8:	bx	lr
    a1ba:	nop

0000a1bc <operator new[](unsigned int)>:
  return malloc(size);
}

void * operator new[](size_t size)
{
  return malloc(size);
    a1bc:	b.w	b948 <malloc>

0000a1c0 <operator delete(void*, unsigned int)>:
    a1c0:	b.w	b958 <free>

0000a1c4 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a1c4:	ldr	r2, [pc, #20]	; (a1dc <serial5_available+0x18>)
	tail = rx_buffer_tail;
    a1c6:	ldr	r3, [pc, #24]	; (a1e0 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a1c8:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    a1ca:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a1cc:	uxtb	r0, r0
	tail = rx_buffer_tail;
    a1ce:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    a1d0:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    a1d2:	it	cc
    a1d4:	addcc	r0, #64	; 0x40
    a1d6:	subs	r0, r0, r3
}
    a1d8:	bx	lr
    a1da:	nop
    a1dc:	.word	0x2001caf8
    a1e0:	.word	0x2001caf9

0000a1e4 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    a1e4:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    a1e6:	ldr	r3, [pc, #172]	; (a294 <uart4_status_isr+0xb0>)
    a1e8:	ldrb	r2, [r3, #4]
    a1ea:	lsls	r4, r2, #26
    a1ec:	bpl.n	a22e <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    a1ee:	ldr	r0, [pc, #168]	; (a298 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    a1f0:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    a1f2:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a1f4:	ldr	r1, [pc, #164]	; (a29c <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    a1f6:	adds	r3, #1
    a1f8:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a1fa:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    a1fc:	it	gt
    a1fe:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a200:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    a202:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a204:	beq.n	a20e <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    a206:	ldr	r4, [pc, #152]	; (a2a0 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    a208:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    a20a:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    a20c:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    a20e:	ldr	r2, [pc, #148]	; (a2a4 <uart4_status_isr+0xc0>)
    a210:	ldr	r1, [r2, #0]
    a212:	cbz	r1, a22e <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    a214:	ldr	r2, [pc, #144]	; (a2a8 <uart4_status_isr+0xc4>)
    a216:	ldrb	r2, [r2, #0]
    a218:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    a21a:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    a21c:	itet	cc
    a21e:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    a222:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    a224:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    a226:	cmp	r3, #39	; 0x27
    a228:	itt	gt
    a22a:	movgt	r3, #1
    a22c:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    a22e:	ldr	r2, [pc, #100]	; (a294 <uart4_status_isr+0xb0>)
    a230:	ldrb	r3, [r2, #3]
    a232:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    a234:	lsls	r0, r3, #24
    a236:	bmi.n	a25c <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    a238:	lsls	r2, r3, #25
    a23a:	bpl.n	a258 <uart4_status_isr+0x74>
    a23c:	ldr	r3, [pc, #84]	; (a294 <uart4_status_isr+0xb0>)
    a23e:	ldrb	r3, [r3, #4]
    a240:	lsls	r3, r3, #25
    a242:	bpl.n	a258 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a244:	ldr	r3, [pc, #100]	; (a2ac <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    a246:	ldr	r1, [pc, #104]	; (a2b0 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    a248:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    a24a:	movs	r2, #0
    a24c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a24e:	cbz	r3, a252 <uart4_status_isr+0x6e>
    a250:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    a252:	ldr	r3, [pc, #64]	; (a294 <uart4_status_isr+0xb0>)
    a254:	movs	r2, #44	; 0x2c
    a256:	strb	r2, [r3, #3]
	}
}
    a258:	pop	{r4, r5}
    a25a:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    a25c:	ldrb	r1, [r2, #4]
    a25e:	lsls	r1, r1, #24
    a260:	bpl.n	a238 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    a262:	ldr	r1, [pc, #80]	; (a2b4 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    a264:	ldr	r0, [pc, #64]	; (a2a8 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a266:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    a268:	ldrb	r1, [r0, #0]
    a26a:	uxtb	r1, r1
		if (head == tail) {
    a26c:	cmp	r4, r1
    a26e:	beq.n	a28c <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    a270:	adds	r2, r1, #1
    a272:	cmp	r2, #39	; 0x27
    a274:	itt	hi
    a276:	movhi	r1, #0
    a278:	movhi	r2, r1
			n = tx_buffer[tail];
    a27a:	ldr	r5, [pc, #60]	; (a2b8 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    a27c:	ldr	r4, [pc, #20]	; (a294 <uart4_status_isr+0xb0>)
    a27e:	it	ls
    a280:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    a282:	ldrb	r2, [r5, r2]
    a284:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    a286:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    a288:	strb	r1, [r0, #0]
    a28a:	b.n	a238 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    a28c:	movs	r1, #108	; 0x6c
    a28e:	strb	r1, [r2, #3]
    a290:	b.n	a238 <uart4_status_isr+0x54>
    a292:	nop
    a294:	.word	0x400ea000
    a298:	.word	0x2001caf8
    a29c:	.word	0x2001caf9
    a2a0:	.word	0x2001cb24
    a2a4:	.word	0x2001caf4
    a2a8:	.word	0x2001cb65
    a2ac:	.word	0x2001cb68
    a2b0:	.word	0x2001cb64
    a2b4:	.word	0x2001cb6c
    a2b8:	.word	0x2001cafc

0000a2bc <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a2bc:	ldr	r2, [pc, #20]	; (a2d4 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    a2be:	ldr	r3, [pc, #24]	; (a2d8 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a2c0:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    a2c2:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a2c4:	uxtb	r0, r0
	tail = rx_buffer_tail;
    a2c6:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    a2c8:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    a2ca:	it	cc
    a2cc:	addcc	r0, #64	; 0x40
    a2ce:	subs	r0, r0, r3
}
    a2d0:	bx	lr
    a2d2:	nop
    a2d4:	.word	0x2001cbe0
    a2d8:	.word	0x2001cb75

0000a2dc <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    a2dc:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    a2de:	ldr	r3, [pc, #224]	; (a3c0 <uart1_status_isr+0xe4>)
    a2e0:	ldrb	r2, [r3, #4]
    a2e2:	tst.w	r2, #48	; 0x30
    a2e6:	beq.n	a342 <uart1_status_isr+0x66>
		__disable_irq();
    a2e8:	cpsid	i
		avail = UART1_RCFIFO;
    a2ea:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    a2ec:	and.w	r2, r1, #255	; 0xff
    a2f0:	cmp	r1, #0
    a2f2:	beq.n	a370 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    a2f4:	cpsie	i
			head = rx_buffer_head;
    a2f6:	ldr	r7, [pc, #204]	; (a3c4 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    a2f8:	ldr	r1, [pc, #204]	; (a3c8 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    a2fa:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    a2fc:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    a2fe:	ldr	r6, [pc, #204]	; (a3cc <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    a300:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    a302:	uxtb	r0, r0
			tail = rx_buffer_tail;
    a304:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    a306:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    a308:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    a30a:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    a30c:	it	cs
    a30e:	movcs	r3, #0
				if (newhead != tail) {
    a310:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    a312:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    a316:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    a318:	itt	ne
    a31a:	strbne	r1, [r6, r3]
    a31c:	movne	r0, r3
				}
			} while (--avail > 0);
    a31e:	ands.w	r2, r2, #255	; 0xff
    a322:	bne.n	a306 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    a324:	ldr	r3, [pc, #168]	; (a3d0 <uart1_status_isr+0xf4>)
    a326:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    a328:	uxtb	r2, r0
    a32a:	strb	r2, [r7, #0]
			if (rts_pin) {
    a32c:	cbz	r3, a342 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    a32e:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    a330:	itet	cc
    a332:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    a336:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    a338:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    a33a:	cmp	r0, #39	; 0x27
    a33c:	itt	gt
    a33e:	movgt	r2, #1
    a340:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    a342:	ldr	r1, [pc, #124]	; (a3c0 <uart1_status_isr+0xe4>)
    a344:	ldrb	r2, [r1, #3]
    a346:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    a348:	lsls	r5, r2, #24
    a34a:	bmi.n	a37a <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    a34c:	lsls	r2, r2, #25
    a34e:	bpl.n	a36c <uart1_status_isr+0x90>
    a350:	ldr	r3, [pc, #108]	; (a3c0 <uart1_status_isr+0xe4>)
    a352:	ldrb	r3, [r3, #4]
    a354:	lsls	r3, r3, #25
    a356:	bpl.n	a36c <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a358:	ldr	r3, [pc, #120]	; (a3d4 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    a35a:	ldr	r1, [pc, #124]	; (a3d8 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    a35c:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    a35e:	movs	r2, #0
    a360:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a362:	cbz	r3, a366 <uart1_status_isr+0x8a>
    a364:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    a366:	ldr	r3, [pc, #88]	; (a3c0 <uart1_status_isr+0xe4>)
    a368:	movs	r2, #60	; 0x3c
    a36a:	strb	r2, [r3, #3]
	}
}
    a36c:	pop	{r4, r5, r6, r7}
    a36e:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    a370:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    a372:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    a374:	strb	r2, [r3, #17]
			__enable_irq();
    a376:	cpsie	i
    a378:	b.n	a342 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    a37a:	ldrb	r3, [r1, #4]
    a37c:	lsls	r4, r3, #24
    a37e:	bpl.n	a34c <uart1_status_isr+0x70>
		head = tx_buffer_head;
    a380:	ldr	r3, [pc, #88]	; (a3dc <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    a382:	ldr	r6, [pc, #92]	; (a3e0 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a384:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    a386:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a388:	uxtb	r4, r4
		tail = tx_buffer_tail;
    a38a:	uxtb	r3, r3
		do {
			if (tail == head) break;
    a38c:	cmp	r4, r3
    a38e:	beq.n	a3ae <uart1_status_isr+0xd2>
    a390:	ldr	r5, [pc, #80]	; (a3e4 <uart1_status_isr+0x108>)
    a392:	b.n	a398 <uart1_status_isr+0xbc>
    a394:	cmp	r3, r4
    a396:	beq.n	a3ae <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    a398:	adds	r3, #1
    a39a:	cmp	r3, #40	; 0x28
    a39c:	it	cs
    a39e:	movcs	r3, #0
			avail = UART1_S1;
    a3a0:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    a3a2:	ldrb	r0, [r5, r3]
    a3a4:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    a3a6:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    a3a8:	ldrb	r0, [r1, #20]
    a3aa:	cmp	r0, #7
    a3ac:	bls.n	a394 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    a3ae:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    a3b0:	ldr	r1, [pc, #12]	; (a3c0 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    a3b2:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    a3b4:	ldrb	r3, [r1, #4]
    a3b6:	lsls	r0, r3, #24
    a3b8:	itt	mi
    a3ba:	movmi	r3, #124	; 0x7c
    a3bc:	strbmi	r3, [r1, #3]
    a3be:	b.n	a34c <uart1_status_isr+0x70>
    a3c0:	.word	0x4006b000
    a3c4:	.word	0x2001cbe0
    a3c8:	.word	0x2001cb75
    a3cc:	.word	0x2001cba0
    a3d0:	.word	0x2001cb70
    a3d4:	.word	0x2001cbe4
    a3d8:	.word	0x2001cb74
    a3dc:	.word	0x2001cbe8
    a3e0:	.word	0x2001cbe1
    a3e4:	.word	0x2001cb78

0000a3e8 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a3e8:	ldr	r2, [pc, #20]	; (a400 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    a3ea:	ldr	r3, [pc, #24]	; (a404 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a3ec:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    a3ee:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a3f0:	uxtb	r0, r0
	tail = rx_buffer_tail;
    a3f2:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    a3f4:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    a3f6:	it	cc
    a3f8:	addcc	r0, #64	; 0x40
    a3fa:	subs	r0, r0, r3
}
    a3fc:	bx	lr
    a3fe:	nop
    a400:	.word	0x2001cbf0
    a404:	.word	0x2001cbf1

0000a408 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    a408:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    a40a:	ldr	r3, [pc, #172]	; (a4b8 <uart3_status_isr+0xb0>)
    a40c:	ldrb	r2, [r3, #4]
    a40e:	lsls	r4, r2, #26
    a410:	bpl.n	a452 <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    a412:	ldr	r0, [pc, #168]	; (a4bc <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    a414:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    a416:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a418:	ldr	r1, [pc, #164]	; (a4c0 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    a41a:	adds	r3, #1
    a41c:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a41e:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    a420:	it	gt
    a422:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a424:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    a426:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a428:	beq.n	a432 <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    a42a:	ldr	r4, [pc, #152]	; (a4c4 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    a42c:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    a42e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    a430:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    a432:	ldr	r2, [pc, #148]	; (a4c8 <uart3_status_isr+0xc0>)
    a434:	ldr	r1, [r2, #0]
    a436:	cbz	r1, a452 <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    a438:	ldr	r2, [pc, #144]	; (a4cc <uart3_status_isr+0xc4>)
    a43a:	ldrb	r2, [r2, #0]
    a43c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    a43e:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    a440:	itet	cc
    a442:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    a446:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    a448:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    a44a:	cmp	r3, #39	; 0x27
    a44c:	itt	gt
    a44e:	movgt	r3, #1
    a450:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    a452:	ldr	r2, [pc, #100]	; (a4b8 <uart3_status_isr+0xb0>)
    a454:	ldrb	r3, [r2, #3]
    a456:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    a458:	lsls	r0, r3, #24
    a45a:	bmi.n	a480 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    a45c:	lsls	r2, r3, #25
    a45e:	bpl.n	a47c <uart3_status_isr+0x74>
    a460:	ldr	r3, [pc, #84]	; (a4b8 <uart3_status_isr+0xb0>)
    a462:	ldrb	r3, [r3, #4]
    a464:	lsls	r3, r3, #25
    a466:	bpl.n	a47c <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a468:	ldr	r3, [pc, #100]	; (a4d0 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    a46a:	ldr	r1, [pc, #104]	; (a4d4 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    a46c:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    a46e:	movs	r2, #0
    a470:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a472:	cbz	r3, a476 <uart3_status_isr+0x6e>
    a474:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    a476:	ldr	r3, [pc, #64]	; (a4b8 <uart3_status_isr+0xb0>)
    a478:	movs	r2, #44	; 0x2c
    a47a:	strb	r2, [r3, #3]
	}
}
    a47c:	pop	{r4, r5}
    a47e:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    a480:	ldrb	r1, [r2, #4]
    a482:	lsls	r1, r1, #24
    a484:	bpl.n	a45c <uart3_status_isr+0x54>
		head = tx_buffer_head;
    a486:	ldr	r1, [pc, #80]	; (a4d8 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    a488:	ldr	r0, [pc, #64]	; (a4cc <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a48a:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    a48c:	ldrb	r1, [r0, #0]
    a48e:	uxtb	r1, r1
		if (head == tail) {
    a490:	cmp	r4, r1
    a492:	beq.n	a4b0 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    a494:	adds	r2, r1, #1
    a496:	cmp	r2, #39	; 0x27
    a498:	itt	hi
    a49a:	movhi	r1, #0
    a49c:	movhi	r2, r1
			n = tx_buffer[tail];
    a49e:	ldr	r5, [pc, #60]	; (a4dc <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    a4a0:	ldr	r4, [pc, #20]	; (a4b8 <uart3_status_isr+0xb0>)
    a4a2:	it	ls
    a4a4:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    a4a6:	ldrb	r2, [r5, r2]
    a4a8:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    a4aa:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    a4ac:	strb	r1, [r0, #0]
    a4ae:	b.n	a45c <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    a4b0:	movs	r1, #108	; 0x6c
    a4b2:	strb	r1, [r2, #3]
    a4b4:	b.n	a45c <uart3_status_isr+0x54>
    a4b6:	nop
    a4b8:	.word	0x4006d000
    a4bc:	.word	0x2001cbf0
    a4c0:	.word	0x2001cbf1
    a4c4:	.word	0x2001cc1c
    a4c8:	.word	0x2001cbec
    a4cc:	.word	0x2001cc5d
    a4d0:	.word	0x2001cc60
    a4d4:	.word	0x2001cc5c
    a4d8:	.word	0x2001cc64
    a4dc:	.word	0x2001cbf4

0000a4e0 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a4e0:	ldr	r2, [pc, #20]	; (a4f8 <serial_available+0x18>)
	tail = rx_buffer_tail;
    a4e2:	ldr	r3, [pc, #24]	; (a4fc <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a4e4:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    a4e6:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a4e8:	uxtb	r0, r0
	tail = rx_buffer_tail;
    a4ea:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    a4ec:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    a4ee:	it	cc
    a4f0:	addcc	r0, #64	; 0x40
    a4f2:	subs	r0, r0, r3
}
    a4f4:	bx	lr
    a4f6:	nop
    a4f8:	.word	0x2001cc6c
    a4fc:	.word	0x2001cc6d

0000a500 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    a500:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    a502:	ldr	r3, [pc, #224]	; (a5e4 <uart0_status_isr+0xe4>)
    a504:	ldrb	r2, [r3, #4]
    a506:	tst.w	r2, #48	; 0x30
    a50a:	beq.n	a566 <uart0_status_isr+0x66>
		__disable_irq();
    a50c:	cpsid	i
		avail = UART0_RCFIFO;
    a50e:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    a510:	and.w	r2, r1, #255	; 0xff
    a514:	cmp	r1, #0
    a516:	beq.n	a594 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    a518:	cpsie	i
			head = rx_buffer_head;
    a51a:	ldr	r7, [pc, #204]	; (a5e8 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    a51c:	ldr	r1, [pc, #204]	; (a5ec <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    a51e:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    a520:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    a522:	ldr	r6, [pc, #204]	; (a5f0 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    a524:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    a526:	uxtb	r0, r0
			tail = rx_buffer_tail;
    a528:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    a52a:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    a52c:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    a52e:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    a530:	it	cs
    a532:	movcs	r3, #0
				if (newhead != tail) {
    a534:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    a536:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    a53a:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    a53c:	itt	ne
    a53e:	strbne	r1, [r6, r3]
    a540:	movne	r0, r3
				}
			} while (--avail > 0);
    a542:	ands.w	r2, r2, #255	; 0xff
    a546:	bne.n	a52a <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    a548:	ldr	r3, [pc, #168]	; (a5f4 <uart0_status_isr+0xf4>)
    a54a:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    a54c:	uxtb	r2, r0
    a54e:	strb	r2, [r7, #0]
			if (rts_pin) {
    a550:	cbz	r3, a566 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    a552:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    a554:	itet	cc
    a556:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    a55a:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    a55c:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    a55e:	cmp	r0, #39	; 0x27
    a560:	itt	gt
    a562:	movgt	r2, #1
    a564:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    a566:	ldr	r1, [pc, #124]	; (a5e4 <uart0_status_isr+0xe4>)
    a568:	ldrb	r2, [r1, #3]
    a56a:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    a56c:	lsls	r5, r2, #24
    a56e:	bmi.n	a59e <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    a570:	lsls	r2, r2, #25
    a572:	bpl.n	a590 <uart0_status_isr+0x90>
    a574:	ldr	r3, [pc, #108]	; (a5e4 <uart0_status_isr+0xe4>)
    a576:	ldrb	r3, [r3, #4]
    a578:	lsls	r3, r3, #25
    a57a:	bpl.n	a590 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a57c:	ldr	r3, [pc, #120]	; (a5f8 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    a57e:	ldr	r1, [pc, #124]	; (a5fc <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    a580:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    a582:	movs	r2, #0
    a584:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a586:	cbz	r3, a58a <uart0_status_isr+0x8a>
    a588:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    a58a:	ldr	r3, [pc, #88]	; (a5e4 <uart0_status_isr+0xe4>)
    a58c:	movs	r2, #60	; 0x3c
    a58e:	strb	r2, [r3, #3]
	}
}
    a590:	pop	{r4, r5, r6, r7}
    a592:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    a594:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    a596:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    a598:	strb	r2, [r3, #17]
			__enable_irq();
    a59a:	cpsie	i
    a59c:	b.n	a566 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    a59e:	ldrb	r3, [r1, #4]
    a5a0:	lsls	r4, r3, #24
    a5a2:	bpl.n	a570 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    a5a4:	ldr	r3, [pc, #88]	; (a600 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    a5a6:	ldr	r6, [pc, #92]	; (a604 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a5a8:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    a5aa:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a5ac:	uxtb	r4, r4
		tail = tx_buffer_tail;
    a5ae:	uxtb	r3, r3
		do {
			if (tail == head) break;
    a5b0:	cmp	r4, r3
    a5b2:	beq.n	a5d2 <uart0_status_isr+0xd2>
    a5b4:	ldr	r5, [pc, #80]	; (a608 <uart0_status_isr+0x108>)
    a5b6:	b.n	a5bc <uart0_status_isr+0xbc>
    a5b8:	cmp	r3, r4
    a5ba:	beq.n	a5d2 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    a5bc:	adds	r3, #1
    a5be:	cmp	r3, #64	; 0x40
    a5c0:	it	cs
    a5c2:	movcs	r3, #0
			avail = UART0_S1;
    a5c4:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    a5c6:	ldrb	r0, [r5, r3]
    a5c8:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    a5ca:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    a5cc:	ldrb	r0, [r1, #20]
    a5ce:	cmp	r0, #7
    a5d0:	bls.n	a5b8 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    a5d2:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    a5d4:	ldr	r1, [pc, #12]	; (a5e4 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    a5d6:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    a5d8:	ldrb	r3, [r1, #4]
    a5da:	lsls	r0, r3, #24
    a5dc:	itt	mi
    a5de:	movmi	r3, #124	; 0x7c
    a5e0:	strbmi	r3, [r1, #3]
    a5e2:	b.n	a570 <uart0_status_isr+0x70>
    a5e4:	.word	0x4006a000
    a5e8:	.word	0x2001cc6c
    a5ec:	.word	0x2001cc6d
    a5f0:	.word	0x2001ccb0
    a5f4:	.word	0x2001cc68
    a5f8:	.word	0x2001ccf4
    a5fc:	.word	0x2001ccf0
    a600:	.word	0x2001ccf8
    a604:	.word	0x2001ccf1
    a608:	.word	0x2001cc70

0000a60c <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a60c:	ldr	r2, [pc, #20]	; (a624 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    a60e:	ldr	r3, [pc, #24]	; (a628 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a610:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    a612:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a614:	uxtb	r0, r0
	tail = rx_buffer_tail;
    a616:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    a618:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    a61a:	it	cc
    a61c:	addcc	r0, #64	; 0x40
    a61e:	subs	r0, r0, r3
}
    a620:	bx	lr
    a622:	nop
    a624:	.word	0x2001cd00
    a628:	.word	0x2001cd01

0000a62c <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    a62c:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    a62e:	ldr	r3, [pc, #176]	; (a6e0 <lpuart0_status_isr+0xb4>)
    a630:	ldr	r2, [r3, #4]
    a632:	lsls	r4, r2, #10
    a634:	bpl.n	a676 <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    a636:	ldr	r0, [pc, #172]	; (a6e4 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    a638:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    a63a:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a63c:	ldr	r1, [pc, #168]	; (a6e8 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    a63e:	adds	r3, #1
    a640:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a642:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    a644:	it	gt
    a646:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a648:	cmp	r3, r1
    a64a:	beq.n	a656 <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    a64c:	ldr	r4, [pc, #156]	; (a6ec <lpuart0_status_isr+0xc0>)
    a64e:	uxtb	r2, r2
			rx_buffer_head = head;
    a650:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    a652:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    a654:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    a656:	ldr	r2, [pc, #152]	; (a6f0 <lpuart0_status_isr+0xc4>)
    a658:	ldr	r1, [r2, #0]
    a65a:	cbz	r1, a676 <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    a65c:	ldr	r2, [pc, #148]	; (a6f4 <lpuart0_status_isr+0xc8>)
    a65e:	ldrb	r2, [r2, #0]
    a660:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    a662:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    a664:	itet	cc
    a666:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    a66a:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    a66c:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    a66e:	cmp	r3, #39	; 0x27
    a670:	itt	gt
    a672:	movgt	r3, #1
    a674:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    a676:	ldr	r2, [pc, #104]	; (a6e0 <lpuart0_status_isr+0xb4>)
    a678:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    a67a:	lsls	r0, r3, #8
    a67c:	bpl.n	a684 <lpuart0_status_isr+0x58>
    a67e:	ldr	r2, [r2, #4]
    a680:	lsls	r1, r2, #8
    a682:	bmi.n	a6a8 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    a684:	lsls	r2, r3, #9
    a686:	bpl.n	a6a4 <lpuart0_status_isr+0x78>
    a688:	ldr	r3, [pc, #84]	; (a6e0 <lpuart0_status_isr+0xb4>)
    a68a:	ldr	r3, [r3, #4]
    a68c:	lsls	r3, r3, #9
    a68e:	bpl.n	a6a4 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a690:	ldr	r3, [pc, #100]	; (a6f8 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    a692:	ldr	r1, [pc, #104]	; (a6fc <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    a694:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    a696:	movs	r2, #0
    a698:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a69a:	cbz	r3, a69e <lpuart0_status_isr+0x72>
    a69c:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    a69e:	ldr	r3, [pc, #96]	; (a700 <lpuart0_status_isr+0xd4>)
    a6a0:	movs	r2, #0
    a6a2:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    a6a4:	pop	{r4, r5}
    a6a6:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    a6a8:	ldr	r2, [pc, #88]	; (a704 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    a6aa:	ldr	r1, [pc, #72]	; (a6f4 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    a6ac:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    a6ae:	ldrb	r2, [r1, #0]
    a6b0:	uxtb	r2, r2
		if (head == tail) {
    a6b2:	cmp	r0, r2
    a6b4:	beq.n	a6d2 <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    a6b6:	adds	r2, #1
    a6b8:	cmp	r2, #39	; 0x27
    a6ba:	itt	hi
    a6bc:	movhi	r0, #0
    a6be:	movhi	r2, r0
			n = tx_buffer[tail];
    a6c0:	ldr	r5, [pc, #68]	; (a708 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    a6c2:	ldr	r4, [pc, #28]	; (a6e0 <lpuart0_status_isr+0xb4>)
    a6c4:	it	ls
    a6c6:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    a6c8:	ldrb	r2, [r5, r2]
    a6ca:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    a6cc:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    a6ce:	strb	r0, [r1, #0]
    a6d0:	b.n	a684 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    a6d2:	ldr	r0, [pc, #56]	; (a70c <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    a6d4:	ldr	r2, [pc, #40]	; (a700 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    a6d6:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    a6d8:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    a6da:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    a6dc:	str	r1, [r2, #0]
    a6de:	b.n	a684 <lpuart0_status_isr+0x58>
    a6e0:	.word	0x400c4000
    a6e4:	.word	0x2001cd00
    a6e8:	.word	0x2001cd01
    a6ec:	.word	0x2001cd2c
    a6f0:	.word	0x2001ccfc
    a6f4:	.word	0x2001cd6d
    a6f8:	.word	0x2001cd70
    a6fc:	.word	0x2001cd6c
    a700:	.word	0x43880158
    a704:	.word	0x2001cd74
    a708:	.word	0x2001cd04
    a70c:	.word	0x4388015c

0000a710 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    a710:	cpsid	i
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    a712:	ldr	r2, [pc, #96]	; (a774 <usb_init_serialnumber+0x64>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    a714:	ldr	r3, [pc, #96]	; (a778 <usb_init_serialnumber+0x68>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    a716:	ldr	r1, [pc, #100]	; (a77c <usb_init_serialnumber+0x6c>)
    a718:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    a71a:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    a71c:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    a71e:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    a720:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    a722:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    a724:	ldrb	r3, [r2, #0]
    a726:	lsls	r3, r3, #24
    a728:	bpl.n	a724 <usb_init_serialnumber+0x14>
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    a72a:	push	{r4, lr}
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    a72c:	ldr	r3, [pc, #80]	; (a780 <usb_init_serialnumber+0x70>)
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    a72e:	sub	sp, #16
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    a730:	ldr	r0, [r3, #0]
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    a732:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    a734:	ldr	r3, [pc, #76]	; (a784 <usb_init_serialnumber+0x74>)
    a736:	ldr	r4, [pc, #80]	; (a788 <usb_init_serialnumber+0x78>)
    a738:	cmp	r0, r3
    a73a:	it	ls
    a73c:	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    a740:	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    a742:	it	ls
    a744:	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    a746:	movs	r2, #10
    a748:	bl	a78c <ultoa>
    a74c:	add	r1, sp, #4
    a74e:	mov	r0, r4
	for (i=0; i<10; i++) {
    a750:	movs	r3, #0
		char c = buf[i];
    a752:	ldrb.w	r2, [r1], #1
    a756:	adds	r3, #1
		if (!c) break;
    a758:	cbz	r2, a76a <usb_init_serialnumber+0x5a>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    a75a:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    a75c:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    a760:	bne.n	a752 <usb_init_serialnumber+0x42>
    a762:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    a764:	strb	r3, [r4, #0]
}
    a766:	add	sp, #16
    a768:	pop	{r4, pc}
    a76a:	lsls	r3, r3, #1
    a76c:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    a76e:	strb	r3, [r4, #0]
}
    a770:	add	sp, #16
    a772:	pop	{r4, pc}
    a774:	.word	0x40020004
    a778:	.word	0x40020000
    a77c:	.word	0x41070000
    a780:	.word	0x4002000c
    a784:	.word	0x0098967f
    a788:	.word	0x20016fc0

0000a78c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    a78c:	push	{r4, r5, r6, r7}
    a78e:	subs	r5, r1, #1
    a790:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    a792:	movs	r4, #0
    a794:	b.n	a798 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    a796:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    a798:	udiv	r3, r0, r2
    a79c:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a7a0:	cmp	r0, #9
    a7a2:	add.w	r7, r0, #48	; 0x30
    a7a6:	itet	hi
    a7a8:	addhi	r0, #55	; 0x37
    a7aa:	uxtbls	r0, r7
    a7ac:	uxtbhi	r0, r0
    a7ae:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    a7b2:	mov	r0, r3
    a7b4:	cmp	r3, #0
    a7b6:	bne.n	a796 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    a7b8:	adds	r2, r1, r4
    a7ba:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    a7bc:	cbz	r4, a7d2 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    a7be:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    a7c0:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    a7c4:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    a7c6:	adds	r3, #1
    a7c8:	subs	r0, r4, r3
    a7ca:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    a7cc:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    a7d0:	blt.n	a7be <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    a7d2:	mov	r0, r1
    a7d4:	pop	{r4, r5, r6, r7}
    a7d6:	bx	lr

0000a7d8 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a7d8:	ldr	r2, [pc, #20]	; (a7f0 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    a7da:	ldr	r3, [pc, #24]	; (a7f4 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a7dc:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    a7de:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a7e0:	uxtb	r0, r0
	tail = rx_buffer_tail;
    a7e2:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    a7e4:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    a7e6:	it	cc
    a7e8:	addcc	r0, #64	; 0x40
    a7ea:	subs	r0, r0, r3
}
    a7ec:	bx	lr
    a7ee:	nop
    a7f0:	.word	0x2001cd7c
    a7f4:	.word	0x2001cd7d

0000a7f8 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    a7f8:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    a7fa:	ldr	r3, [pc, #172]	; (a8a8 <uart2_status_isr+0xb0>)
    a7fc:	ldrb	r2, [r3, #4]
    a7fe:	lsls	r4, r2, #26
    a800:	bpl.n	a842 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    a802:	ldr	r0, [pc, #168]	; (a8ac <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    a804:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    a806:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a808:	ldr	r1, [pc, #164]	; (a8b0 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    a80a:	adds	r3, #1
    a80c:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a80e:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    a810:	it	gt
    a812:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a814:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    a816:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a818:	beq.n	a822 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    a81a:	ldr	r4, [pc, #152]	; (a8b4 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    a81c:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    a81e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    a820:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    a822:	ldr	r2, [pc, #148]	; (a8b8 <uart2_status_isr+0xc0>)
    a824:	ldr	r1, [r2, #0]
    a826:	cbz	r1, a842 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    a828:	ldr	r2, [pc, #144]	; (a8bc <uart2_status_isr+0xc4>)
    a82a:	ldrb	r2, [r2, #0]
    a82c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    a82e:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    a830:	itet	cc
    a832:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    a836:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    a838:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    a83a:	cmp	r3, #39	; 0x27
    a83c:	itt	gt
    a83e:	movgt	r3, #1
    a840:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    a842:	ldr	r2, [pc, #100]	; (a8a8 <uart2_status_isr+0xb0>)
    a844:	ldrb	r3, [r2, #3]
    a846:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    a848:	lsls	r0, r3, #24
    a84a:	bmi.n	a870 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    a84c:	lsls	r2, r3, #25
    a84e:	bpl.n	a86c <uart2_status_isr+0x74>
    a850:	ldr	r3, [pc, #84]	; (a8a8 <uart2_status_isr+0xb0>)
    a852:	ldrb	r3, [r3, #4]
    a854:	lsls	r3, r3, #25
    a856:	bpl.n	a86c <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a858:	ldr	r3, [pc, #100]	; (a8c0 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    a85a:	ldr	r1, [pc, #104]	; (a8c4 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    a85c:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    a85e:	movs	r2, #0
    a860:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a862:	cbz	r3, a866 <uart2_status_isr+0x6e>
    a864:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    a866:	ldr	r3, [pc, #64]	; (a8a8 <uart2_status_isr+0xb0>)
    a868:	movs	r2, #44	; 0x2c
    a86a:	strb	r2, [r3, #3]
	}
}
    a86c:	pop	{r4, r5}
    a86e:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    a870:	ldrb	r1, [r2, #4]
    a872:	lsls	r1, r1, #24
    a874:	bpl.n	a84c <uart2_status_isr+0x54>
		head = tx_buffer_head;
    a876:	ldr	r1, [pc, #80]	; (a8c8 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    a878:	ldr	r0, [pc, #64]	; (a8bc <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a87a:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    a87c:	ldrb	r1, [r0, #0]
    a87e:	uxtb	r1, r1
		if (head == tail) {
    a880:	cmp	r4, r1
    a882:	beq.n	a8a0 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    a884:	adds	r2, r1, #1
    a886:	cmp	r2, #39	; 0x27
    a888:	itt	hi
    a88a:	movhi	r1, #0
    a88c:	movhi	r2, r1
			n = tx_buffer[tail];
    a88e:	ldr	r5, [pc, #60]	; (a8cc <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    a890:	ldr	r4, [pc, #20]	; (a8a8 <uart2_status_isr+0xb0>)
    a892:	it	ls
    a894:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    a896:	ldrb	r2, [r5, r2]
    a898:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    a89a:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    a89c:	strb	r1, [r0, #0]
    a89e:	b.n	a84c <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    a8a0:	movs	r1, #108	; 0x6c
    a8a2:	strb	r1, [r2, #3]
    a8a4:	b.n	a84c <uart2_status_isr+0x54>
    a8a6:	nop
    a8a8:	.word	0x4006c000
    a8ac:	.word	0x2001cd7c
    a8b0:	.word	0x2001cd7d
    a8b4:	.word	0x2001cda8
    a8b8:	.word	0x2001cd78
    a8bc:	.word	0x2001cde9
    a8c0:	.word	0x2001cdec
    a8c4:	.word	0x2001cde8
    a8c8:	.word	0x2001cdf0
    a8cc:	.word	0x2001cd80

0000a8d0 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    a8d0:	bx	lr
    a8d2:	nop

0000a8d4 <nanf>:
    a8d4:	vldr	s0, [pc, #4]	; a8dc <nanf+0x8>
    a8d8:	bx	lr
    a8da:	nop
    a8dc:	.word	0x7fc00000

0000a8e0 <__aeabi_atexit>:
    a8e0:	mov	r3, r1
    a8e2:	mov	r1, r0
    a8e4:	mov	r0, r3
    a8e6:	b.w	b890 <__cxa_atexit>
    a8ea:	nop

0000a8ec <__aeabi_drsub>:
    a8ec:	eor.w	r1, r1, #2147483648	; 0x80000000
    a8f0:	b.n	a8f8 <__adddf3>
    a8f2:	nop

0000a8f4 <__aeabi_dsub>:
    a8f4:	eor.w	r3, r3, #2147483648	; 0x80000000

0000a8f8 <__adddf3>:
    a8f8:	push	{r4, r5, lr}
    a8fa:	mov.w	r4, r1, lsl #1
    a8fe:	mov.w	r5, r3, lsl #1
    a902:	teq	r4, r5
    a906:	it	eq
    a908:	teqeq	r0, r2
    a90c:	itttt	ne
    a90e:	orrsne.w	ip, r4, r0
    a912:	orrsne.w	ip, r5, r2
    a916:	mvnsne.w	ip, r4, asr #21
    a91a:	mvnsne.w	ip, r5, asr #21
    a91e:	beq.w	aae6 <__adddf3+0x1ee>
    a922:	mov.w	r4, r4, lsr #21
    a926:	rsbs	r5, r4, r5, lsr #21
    a92a:	it	lt
    a92c:	neglt	r5, r5
    a92e:	ble.n	a94a <__adddf3+0x52>
    a930:	add	r4, r5
    a932:	eor.w	r2, r0, r2
    a936:	eor.w	r3, r1, r3
    a93a:	eor.w	r0, r2, r0
    a93e:	eor.w	r1, r3, r1
    a942:	eor.w	r2, r0, r2
    a946:	eor.w	r3, r1, r3
    a94a:	cmp	r5, #54	; 0x36
    a94c:	it	hi
    a94e:	pophi	{r4, r5, pc}
    a950:	tst.w	r1, #2147483648	; 0x80000000
    a954:	mov.w	r1, r1, lsl #12
    a958:	mov.w	ip, #1048576	; 0x100000
    a95c:	orr.w	r1, ip, r1, lsr #12
    a960:	beq.n	a968 <__adddf3+0x70>
    a962:	negs	r0, r0
    a964:	sbc.w	r1, r1, r1, lsl #1
    a968:	tst.w	r3, #2147483648	; 0x80000000
    a96c:	mov.w	r3, r3, lsl #12
    a970:	orr.w	r3, ip, r3, lsr #12
    a974:	beq.n	a97c <__adddf3+0x84>
    a976:	negs	r2, r2
    a978:	sbc.w	r3, r3, r3, lsl #1
    a97c:	teq	r4, r5
    a980:	beq.w	aad2 <__adddf3+0x1da>
    a984:	sub.w	r4, r4, #1
    a988:	rsbs	lr, r5, #32
    a98c:	blt.n	a9aa <__adddf3+0xb2>
    a98e:	lsl.w	ip, r2, lr
    a992:	lsr.w	r2, r2, r5
    a996:	adds	r0, r0, r2
    a998:	adc.w	r1, r1, #0
    a99c:	lsl.w	r2, r3, lr
    a9a0:	adds	r0, r0, r2
    a9a2:	asr.w	r3, r3, r5
    a9a6:	adcs	r1, r3
    a9a8:	b.n	a9c8 <__adddf3+0xd0>
    a9aa:	sub.w	r5, r5, #32
    a9ae:	add.w	lr, lr, #32
    a9b2:	cmp	r2, #1
    a9b4:	lsl.w	ip, r3, lr
    a9b8:	it	cs
    a9ba:	orrcs.w	ip, ip, #2
    a9be:	asr.w	r3, r3, r5
    a9c2:	adds	r0, r0, r3
    a9c4:	adcs.w	r1, r1, r3, asr #31
    a9c8:	and.w	r5, r1, #2147483648	; 0x80000000
    a9cc:	bpl.n	a9de <__adddf3+0xe6>
    a9ce:	mov.w	lr, #0
    a9d2:	rsbs	ip, ip, #0
    a9d6:	sbcs.w	r0, lr, r0
    a9da:	sbc.w	r1, lr, r1
    a9de:	cmp.w	r1, #1048576	; 0x100000
    a9e2:	bcc.n	aa1c <__adddf3+0x124>
    a9e4:	cmp.w	r1, #2097152	; 0x200000
    a9e8:	bcc.n	aa04 <__adddf3+0x10c>
    a9ea:	lsrs	r1, r1, #1
    a9ec:	movs.w	r0, r0, rrx
    a9f0:	mov.w	ip, ip, rrx
    a9f4:	add.w	r4, r4, #1
    a9f8:	mov.w	r2, r4, lsl #21
    a9fc:	cmn.w	r2, #4194304	; 0x400000
    aa00:	bcs.w	ab38 <__adddf3+0x240>
    aa04:	cmp.w	ip, #2147483648	; 0x80000000
    aa08:	it	eq
    aa0a:	movseq.w	ip, r0, lsr #1
    aa0e:	adcs.w	r0, r0, #0
    aa12:	adc.w	r1, r1, r4, lsl #20
    aa16:	orr.w	r1, r1, r5
    aa1a:	pop	{r4, r5, pc}
    aa1c:	movs.w	ip, ip, lsl #1
    aa20:	adcs	r0, r0
    aa22:	adc.w	r1, r1, r1
    aa26:	tst.w	r1, #1048576	; 0x100000
    aa2a:	sub.w	r4, r4, #1
    aa2e:	bne.n	aa04 <__adddf3+0x10c>
    aa30:	teq	r1, #0
    aa34:	itt	eq
    aa36:	moveq	r1, r0
    aa38:	moveq	r0, #0
    aa3a:	clz	r3, r1
    aa3e:	it	eq
    aa40:	addeq	r3, #32
    aa42:	sub.w	r3, r3, #11
    aa46:	subs.w	r2, r3, #32
    aa4a:	bge.n	aa66 <__adddf3+0x16e>
    aa4c:	adds	r2, #12
    aa4e:	ble.n	aa62 <__adddf3+0x16a>
    aa50:	add.w	ip, r2, #20
    aa54:	rsb	r2, r2, #12
    aa58:	lsl.w	r0, r1, ip
    aa5c:	lsr.w	r1, r1, r2
    aa60:	b.n	aa7c <__adddf3+0x184>
    aa62:	add.w	r2, r2, #20
    aa66:	it	le
    aa68:	rsble	ip, r2, #32
    aa6c:	lsl.w	r1, r1, r2
    aa70:	lsr.w	ip, r0, ip
    aa74:	itt	le
    aa76:	orrle.w	r1, r1, ip
    aa7a:	lslle	r0, r2
    aa7c:	subs	r4, r4, r3
    aa7e:	ittt	ge
    aa80:	addge.w	r1, r1, r4, lsl #20
    aa84:	orrge	r1, r5
    aa86:	popge	{r4, r5, pc}
    aa88:	mvn.w	r4, r4
    aa8c:	subs	r4, #31
    aa8e:	bge.n	aaca <__adddf3+0x1d2>
    aa90:	adds	r4, #12
    aa92:	bgt.n	aab2 <__adddf3+0x1ba>
    aa94:	add.w	r4, r4, #20
    aa98:	rsb	r2, r4, #32
    aa9c:	lsr.w	r0, r0, r4
    aaa0:	lsl.w	r3, r1, r2
    aaa4:	orr.w	r0, r0, r3
    aaa8:	lsr.w	r3, r1, r4
    aaac:	orr.w	r1, r5, r3
    aab0:	pop	{r4, r5, pc}
    aab2:	rsb	r4, r4, #12
    aab6:	rsb	r2, r4, #32
    aaba:	lsr.w	r0, r0, r2
    aabe:	lsl.w	r3, r1, r4
    aac2:	orr.w	r0, r0, r3
    aac6:	mov	r1, r5
    aac8:	pop	{r4, r5, pc}
    aaca:	lsr.w	r0, r1, r4
    aace:	mov	r1, r5
    aad0:	pop	{r4, r5, pc}
    aad2:	teq	r4, #0
    aad6:	eor.w	r3, r3, #1048576	; 0x100000
    aada:	itte	eq
    aadc:	eoreq.w	r1, r1, #1048576	; 0x100000
    aae0:	addeq	r4, #1
    aae2:	subne	r5, #1
    aae4:	b.n	a984 <__adddf3+0x8c>
    aae6:	mvns.w	ip, r4, asr #21
    aaea:	it	ne
    aaec:	mvnsne.w	ip, r5, asr #21
    aaf0:	beq.n	ab46 <__adddf3+0x24e>
    aaf2:	teq	r4, r5
    aaf6:	it	eq
    aaf8:	teqeq	r0, r2
    aafc:	beq.n	ab0a <__adddf3+0x212>
    aafe:	orrs.w	ip, r4, r0
    ab02:	itt	eq
    ab04:	moveq	r1, r3
    ab06:	moveq	r0, r2
    ab08:	pop	{r4, r5, pc}
    ab0a:	teq	r1, r3
    ab0e:	ittt	ne
    ab10:	movne	r1, #0
    ab12:	movne	r0, #0
    ab14:	popne	{r4, r5, pc}
    ab16:	movs.w	ip, r4, lsr #21
    ab1a:	bne.n	ab28 <__adddf3+0x230>
    ab1c:	lsls	r0, r0, #1
    ab1e:	adcs	r1, r1
    ab20:	it	cs
    ab22:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    ab26:	pop	{r4, r5, pc}
    ab28:	adds.w	r4, r4, #4194304	; 0x400000
    ab2c:	itt	cc
    ab2e:	addcc.w	r1, r1, #1048576	; 0x100000
    ab32:	popcc	{r4, r5, pc}
    ab34:	and.w	r5, r1, #2147483648	; 0x80000000
    ab38:	orr.w	r1, r5, #2130706432	; 0x7f000000
    ab3c:	orr.w	r1, r1, #15728640	; 0xf00000
    ab40:	mov.w	r0, #0
    ab44:	pop	{r4, r5, pc}
    ab46:	mvns.w	ip, r4, asr #21
    ab4a:	itte	ne
    ab4c:	movne	r1, r3
    ab4e:	movne	r0, r2
    ab50:	mvnseq.w	ip, r5, asr #21
    ab54:	itt	ne
    ab56:	movne	r3, r1
    ab58:	movne	r2, r0
    ab5a:	orrs.w	r4, r0, r1, lsl #12
    ab5e:	itte	eq
    ab60:	orrseq.w	r5, r2, r3, lsl #12
    ab64:	teqeq	r1, r3
    ab68:	orrne.w	r1, r1, #524288	; 0x80000
    ab6c:	pop	{r4, r5, pc}
    ab6e:	nop

0000ab70 <__aeabi_ui2d>:
    ab70:	teq	r0, #0
    ab74:	itt	eq
    ab76:	moveq	r1, #0
    ab78:	bxeq	lr
    ab7a:	push	{r4, r5, lr}
    ab7c:	mov.w	r4, #1024	; 0x400
    ab80:	add.w	r4, r4, #50	; 0x32
    ab84:	mov.w	r5, #0
    ab88:	mov.w	r1, #0
    ab8c:	b.n	aa30 <__adddf3+0x138>
    ab8e:	nop

0000ab90 <__aeabi_i2d>:
    ab90:	teq	r0, #0
    ab94:	itt	eq
    ab96:	moveq	r1, #0
    ab98:	bxeq	lr
    ab9a:	push	{r4, r5, lr}
    ab9c:	mov.w	r4, #1024	; 0x400
    aba0:	add.w	r4, r4, #50	; 0x32
    aba4:	ands.w	r5, r0, #2147483648	; 0x80000000
    aba8:	it	mi
    abaa:	negmi	r0, r0
    abac:	mov.w	r1, #0
    abb0:	b.n	aa30 <__adddf3+0x138>
    abb2:	nop

0000abb4 <__aeabi_f2d>:
    abb4:	lsls	r2, r0, #1
    abb6:	mov.w	r1, r2, asr #3
    abba:	mov.w	r1, r1, rrx
    abbe:	mov.w	r0, r2, lsl #28
    abc2:	itttt	ne
    abc4:	andsne.w	r3, r2, #4278190080	; 0xff000000
    abc8:	teqne	r3, #4278190080	; 0xff000000
    abcc:	eorne.w	r1, r1, #939524096	; 0x38000000
    abd0:	bxne	lr
    abd2:	teq	r2, #0
    abd6:	ite	ne
    abd8:	teqne	r3, #4278190080	; 0xff000000
    abdc:	bxeq	lr
    abde:	push	{r4, r5, lr}
    abe0:	mov.w	r4, #896	; 0x380
    abe4:	and.w	r5, r1, #2147483648	; 0x80000000
    abe8:	bic.w	r1, r1, #2147483648	; 0x80000000
    abec:	b.n	aa30 <__adddf3+0x138>
    abee:	nop

0000abf0 <__aeabi_ul2d>:
    abf0:	orrs.w	r2, r0, r1
    abf4:	it	eq
    abf6:	bxeq	lr
    abf8:	push	{r4, r5, lr}
    abfa:	mov.w	r5, #0
    abfe:	b.n	ac16 <__aeabi_l2d+0x16>

0000ac00 <__aeabi_l2d>:
    ac00:	orrs.w	r2, r0, r1
    ac04:	it	eq
    ac06:	bxeq	lr
    ac08:	push	{r4, r5, lr}
    ac0a:	ands.w	r5, r1, #2147483648	; 0x80000000
    ac0e:	bpl.n	ac16 <__aeabi_l2d+0x16>
    ac10:	negs	r0, r0
    ac12:	sbc.w	r1, r1, r1, lsl #1
    ac16:	mov.w	r4, #1024	; 0x400
    ac1a:	add.w	r4, r4, #50	; 0x32
    ac1e:	movs.w	ip, r1, lsr #22
    ac22:	beq.w	a9de <__adddf3+0xe6>
    ac26:	mov.w	r2, #3
    ac2a:	movs.w	ip, ip, lsr #3
    ac2e:	it	ne
    ac30:	addne	r2, #3
    ac32:	movs.w	ip, ip, lsr #3
    ac36:	it	ne
    ac38:	addne	r2, #3
    ac3a:	add.w	r2, r2, ip, lsr #3
    ac3e:	rsb	r3, r2, #32
    ac42:	lsl.w	ip, r0, r3
    ac46:	lsr.w	r0, r0, r2
    ac4a:	lsl.w	lr, r1, r3
    ac4e:	orr.w	r0, r0, lr
    ac52:	lsr.w	r1, r1, r2
    ac56:	add	r4, r2
    ac58:	b.n	a9de <__adddf3+0xe6>
    ac5a:	nop

0000ac5c <__aeabi_dmul>:
    ac5c:	push	{r4, r5, r6, lr}
    ac5e:	mov.w	ip, #255	; 0xff
    ac62:	orr.w	ip, ip, #1792	; 0x700
    ac66:	ands.w	r4, ip, r1, lsr #20
    ac6a:	ittte	ne
    ac6c:	andsne.w	r5, ip, r3, lsr #20
    ac70:	teqne	r4, ip
    ac74:	teqne	r5, ip
    ac78:	bleq	ae38 <__aeabi_dmul+0x1dc>
    ac7c:	add	r4, r5
    ac7e:	eor.w	r6, r1, r3
    ac82:	bic.w	r1, r1, ip, lsl #21
    ac86:	bic.w	r3, r3, ip, lsl #21
    ac8a:	orrs.w	r5, r0, r1, lsl #12
    ac8e:	it	ne
    ac90:	orrsne.w	r5, r2, r3, lsl #12
    ac94:	orr.w	r1, r1, #1048576	; 0x100000
    ac98:	orr.w	r3, r3, #1048576	; 0x100000
    ac9c:	beq.n	ad10 <__aeabi_dmul+0xb4>
    ac9e:	umull	ip, lr, r0, r2
    aca2:	mov.w	r5, #0
    aca6:	umlal	lr, r5, r1, r2
    acaa:	and.w	r2, r6, #2147483648	; 0x80000000
    acae:	umlal	lr, r5, r0, r3
    acb2:	mov.w	r6, #0
    acb6:	umlal	r5, r6, r1, r3
    acba:	teq	ip, #0
    acbe:	it	ne
    acc0:	orrne.w	lr, lr, #1
    acc4:	sub.w	r4, r4, #255	; 0xff
    acc8:	cmp.w	r6, #512	; 0x200
    accc:	sbc.w	r4, r4, #768	; 0x300
    acd0:	bcs.n	acdc <__aeabi_dmul+0x80>
    acd2:	movs.w	lr, lr, lsl #1
    acd6:	adcs	r5, r5
    acd8:	adc.w	r6, r6, r6
    acdc:	orr.w	r1, r2, r6, lsl #11
    ace0:	orr.w	r1, r1, r5, lsr #21
    ace4:	mov.w	r0, r5, lsl #11
    ace8:	orr.w	r0, r0, lr, lsr #21
    acec:	mov.w	lr, lr, lsl #11
    acf0:	subs.w	ip, r4, #253	; 0xfd
    acf4:	it	hi
    acf6:	cmphi.w	ip, #1792	; 0x700
    acfa:	bhi.n	ad3a <__aeabi_dmul+0xde>
    acfc:	cmp.w	lr, #2147483648	; 0x80000000
    ad00:	it	eq
    ad02:	movseq.w	lr, r0, lsr #1
    ad06:	adcs.w	r0, r0, #0
    ad0a:	adc.w	r1, r1, r4, lsl #20
    ad0e:	pop	{r4, r5, r6, pc}
    ad10:	and.w	r6, r6, #2147483648	; 0x80000000
    ad14:	orr.w	r1, r6, r1
    ad18:	orr.w	r0, r0, r2
    ad1c:	eor.w	r1, r1, r3
    ad20:	subs.w	r4, r4, ip, lsr #1
    ad24:	ittt	gt
    ad26:	rsbsgt	r5, r4, ip
    ad2a:	orrgt.w	r1, r1, r4, lsl #20
    ad2e:	popgt	{r4, r5, r6, pc}
    ad30:	orr.w	r1, r1, #1048576	; 0x100000
    ad34:	mov.w	lr, #0
    ad38:	subs	r4, #1
    ad3a:	bgt.w	ae94 <__aeabi_dmul+0x238>
    ad3e:	cmn.w	r4, #54	; 0x36
    ad42:	ittt	le
    ad44:	movle	r0, #0
    ad46:	andle.w	r1, r1, #2147483648	; 0x80000000
    ad4a:	pople	{r4, r5, r6, pc}
    ad4c:	rsb	r4, r4, #0
    ad50:	subs	r4, #32
    ad52:	bge.n	adc0 <__aeabi_dmul+0x164>
    ad54:	adds	r4, #12
    ad56:	bgt.n	ad90 <__aeabi_dmul+0x134>
    ad58:	add.w	r4, r4, #20
    ad5c:	rsb	r5, r4, #32
    ad60:	lsl.w	r3, r0, r5
    ad64:	lsr.w	r0, r0, r4
    ad68:	lsl.w	r2, r1, r5
    ad6c:	orr.w	r0, r0, r2
    ad70:	and.w	r2, r1, #2147483648	; 0x80000000
    ad74:	bic.w	r1, r1, #2147483648	; 0x80000000
    ad78:	adds.w	r0, r0, r3, lsr #31
    ad7c:	lsr.w	r6, r1, r4
    ad80:	adc.w	r1, r2, r6
    ad84:	orrs.w	lr, lr, r3, lsl #1
    ad88:	it	eq
    ad8a:	biceq.w	r0, r0, r3, lsr #31
    ad8e:	pop	{r4, r5, r6, pc}
    ad90:	rsb	r4, r4, #12
    ad94:	rsb	r5, r4, #32
    ad98:	lsl.w	r3, r0, r4
    ad9c:	lsr.w	r0, r0, r5
    ada0:	lsl.w	r2, r1, r4
    ada4:	orr.w	r0, r0, r2
    ada8:	and.w	r1, r1, #2147483648	; 0x80000000
    adac:	adds.w	r0, r0, r3, lsr #31
    adb0:	adc.w	r1, r1, #0
    adb4:	orrs.w	lr, lr, r3, lsl #1
    adb8:	it	eq
    adba:	biceq.w	r0, r0, r3, lsr #31
    adbe:	pop	{r4, r5, r6, pc}
    adc0:	rsb	r5, r4, #32
    adc4:	lsl.w	r2, r0, r5
    adc8:	orr.w	lr, lr, r2
    adcc:	lsr.w	r3, r0, r4
    add0:	lsl.w	r2, r1, r5
    add4:	orr.w	r3, r3, r2
    add8:	lsr.w	r0, r1, r4
    addc:	and.w	r1, r1, #2147483648	; 0x80000000
    ade0:	lsr.w	r2, r1, r4
    ade4:	bic.w	r0, r0, r2
    ade8:	add.w	r0, r0, r3, lsr #31
    adec:	orrs.w	lr, lr, r3, lsl #1
    adf0:	it	eq
    adf2:	biceq.w	r0, r0, r3, lsr #31
    adf6:	pop	{r4, r5, r6, pc}
    adf8:	teq	r4, #0
    adfc:	bne.n	ae1e <__aeabi_dmul+0x1c2>
    adfe:	and.w	r6, r1, #2147483648	; 0x80000000
    ae02:	lsls	r0, r0, #1
    ae04:	adc.w	r1, r1, r1
    ae08:	tst.w	r1, #1048576	; 0x100000
    ae0c:	it	eq
    ae0e:	subeq	r4, #1
    ae10:	beq.n	ae02 <__aeabi_dmul+0x1a6>
    ae12:	orr.w	r1, r1, r6
    ae16:	teq	r5, #0
    ae1a:	it	ne
    ae1c:	bxne	lr
    ae1e:	and.w	r6, r3, #2147483648	; 0x80000000
    ae22:	lsls	r2, r2, #1
    ae24:	adc.w	r3, r3, r3
    ae28:	tst.w	r3, #1048576	; 0x100000
    ae2c:	it	eq
    ae2e:	subeq	r5, #1
    ae30:	beq.n	ae22 <__aeabi_dmul+0x1c6>
    ae32:	orr.w	r3, r3, r6
    ae36:	bx	lr
    ae38:	teq	r4, ip
    ae3c:	and.w	r5, ip, r3, lsr #20
    ae40:	it	ne
    ae42:	teqne	r5, ip
    ae46:	beq.n	ae62 <__aeabi_dmul+0x206>
    ae48:	orrs.w	r6, r0, r1, lsl #1
    ae4c:	it	ne
    ae4e:	orrsne.w	r6, r2, r3, lsl #1
    ae52:	bne.n	adf8 <__aeabi_dmul+0x19c>
    ae54:	eor.w	r1, r1, r3
    ae58:	and.w	r1, r1, #2147483648	; 0x80000000
    ae5c:	mov.w	r0, #0
    ae60:	pop	{r4, r5, r6, pc}
    ae62:	orrs.w	r6, r0, r1, lsl #1
    ae66:	itte	eq
    ae68:	moveq	r0, r2
    ae6a:	moveq	r1, r3
    ae6c:	orrsne.w	r6, r2, r3, lsl #1
    ae70:	beq.n	aea6 <__aeabi_dmul+0x24a>
    ae72:	teq	r4, ip
    ae76:	bne.n	ae7e <__aeabi_dmul+0x222>
    ae78:	orrs.w	r6, r0, r1, lsl #12
    ae7c:	bne.n	aea6 <__aeabi_dmul+0x24a>
    ae7e:	teq	r5, ip
    ae82:	bne.n	ae90 <__aeabi_dmul+0x234>
    ae84:	orrs.w	r6, r2, r3, lsl #12
    ae88:	itt	ne
    ae8a:	movne	r0, r2
    ae8c:	movne	r1, r3
    ae8e:	bne.n	aea6 <__aeabi_dmul+0x24a>
    ae90:	eor.w	r1, r1, r3
    ae94:	and.w	r1, r1, #2147483648	; 0x80000000
    ae98:	orr.w	r1, r1, #2130706432	; 0x7f000000
    ae9c:	orr.w	r1, r1, #15728640	; 0xf00000
    aea0:	mov.w	r0, #0
    aea4:	pop	{r4, r5, r6, pc}
    aea6:	orr.w	r1, r1, #2130706432	; 0x7f000000
    aeaa:	orr.w	r1, r1, #16252928	; 0xf80000
    aeae:	pop	{r4, r5, r6, pc}

0000aeb0 <__aeabi_ddiv>:
    aeb0:	push	{r4, r5, r6, lr}
    aeb2:	mov.w	ip, #255	; 0xff
    aeb6:	orr.w	ip, ip, #1792	; 0x700
    aeba:	ands.w	r4, ip, r1, lsr #20
    aebe:	ittte	ne
    aec0:	andsne.w	r5, ip, r3, lsr #20
    aec4:	teqne	r4, ip
    aec8:	teqne	r5, ip
    aecc:	bleq	b01e <__aeabi_ddiv+0x16e>
    aed0:	sub.w	r4, r4, r5
    aed4:	eor.w	lr, r1, r3
    aed8:	orrs.w	r5, r2, r3, lsl #12
    aedc:	mov.w	r1, r1, lsl #12
    aee0:	beq.w	aff4 <__aeabi_ddiv+0x144>
    aee4:	mov.w	r3, r3, lsl #12
    aee8:	mov.w	r5, #268435456	; 0x10000000
    aeec:	orr.w	r3, r5, r3, lsr #4
    aef0:	orr.w	r3, r3, r2, lsr #24
    aef4:	mov.w	r2, r2, lsl #8
    aef8:	orr.w	r5, r5, r1, lsr #4
    aefc:	orr.w	r5, r5, r0, lsr #24
    af00:	mov.w	r6, r0, lsl #8
    af04:	and.w	r1, lr, #2147483648	; 0x80000000
    af08:	cmp	r5, r3
    af0a:	it	eq
    af0c:	cmpeq	r6, r2
    af0e:	adc.w	r4, r4, #253	; 0xfd
    af12:	add.w	r4, r4, #768	; 0x300
    af16:	bcs.n	af1e <__aeabi_ddiv+0x6e>
    af18:	lsrs	r3, r3, #1
    af1a:	mov.w	r2, r2, rrx
    af1e:	subs	r6, r6, r2
    af20:	sbc.w	r5, r5, r3
    af24:	lsrs	r3, r3, #1
    af26:	mov.w	r2, r2, rrx
    af2a:	mov.w	r0, #1048576	; 0x100000
    af2e:	mov.w	ip, #524288	; 0x80000
    af32:	subs.w	lr, r6, r2
    af36:	sbcs.w	lr, r5, r3
    af3a:	ittt	cs
    af3c:	subcs	r6, r6, r2
    af3e:	movcs	r5, lr
    af40:	orrcs.w	r0, r0, ip
    af44:	lsrs	r3, r3, #1
    af46:	mov.w	r2, r2, rrx
    af4a:	subs.w	lr, r6, r2
    af4e:	sbcs.w	lr, r5, r3
    af52:	ittt	cs
    af54:	subcs	r6, r6, r2
    af56:	movcs	r5, lr
    af58:	orrcs.w	r0, r0, ip, lsr #1
    af5c:	lsrs	r3, r3, #1
    af5e:	mov.w	r2, r2, rrx
    af62:	subs.w	lr, r6, r2
    af66:	sbcs.w	lr, r5, r3
    af6a:	ittt	cs
    af6c:	subcs	r6, r6, r2
    af6e:	movcs	r5, lr
    af70:	orrcs.w	r0, r0, ip, lsr #2
    af74:	lsrs	r3, r3, #1
    af76:	mov.w	r2, r2, rrx
    af7a:	subs.w	lr, r6, r2
    af7e:	sbcs.w	lr, r5, r3
    af82:	ittt	cs
    af84:	subcs	r6, r6, r2
    af86:	movcs	r5, lr
    af88:	orrcs.w	r0, r0, ip, lsr #3
    af8c:	orrs.w	lr, r5, r6
    af90:	beq.n	afc4 <__aeabi_ddiv+0x114>
    af92:	mov.w	r5, r5, lsl #4
    af96:	orr.w	r5, r5, r6, lsr #28
    af9a:	mov.w	r6, r6, lsl #4
    af9e:	mov.w	r3, r3, lsl #3
    afa2:	orr.w	r3, r3, r2, lsr #29
    afa6:	mov.w	r2, r2, lsl #3
    afaa:	movs.w	ip, ip, lsr #4
    afae:	bne.n	af32 <__aeabi_ddiv+0x82>
    afb0:	tst.w	r1, #1048576	; 0x100000
    afb4:	bne.n	afce <__aeabi_ddiv+0x11e>
    afb6:	orr.w	r1, r1, r0
    afba:	mov.w	r0, #0
    afbe:	mov.w	ip, #2147483648	; 0x80000000
    afc2:	b.n	af32 <__aeabi_ddiv+0x82>
    afc4:	tst.w	r1, #1048576	; 0x100000
    afc8:	itt	eq
    afca:	orreq	r1, r0
    afcc:	moveq	r0, #0
    afce:	subs.w	ip, r4, #253	; 0xfd
    afd2:	it	hi
    afd4:	cmphi.w	ip, #1792	; 0x700
    afd8:	bhi.w	ad3a <__aeabi_dmul+0xde>
    afdc:	subs.w	ip, r5, r3
    afe0:	itt	eq
    afe2:	subseq.w	ip, r6, r2
    afe6:	movseq.w	ip, r0, lsr #1
    afea:	adcs.w	r0, r0, #0
    afee:	adc.w	r1, r1, r4, lsl #20
    aff2:	pop	{r4, r5, r6, pc}
    aff4:	and.w	lr, lr, #2147483648	; 0x80000000
    aff8:	orr.w	r1, lr, r1, lsr #12
    affc:	adds.w	r4, r4, ip, lsr #1
    b000:	ittt	gt
    b002:	rsbsgt	r5, r4, ip
    b006:	orrgt.w	r1, r1, r4, lsl #20
    b00a:	popgt	{r4, r5, r6, pc}
    b00c:	orr.w	r1, r1, #1048576	; 0x100000
    b010:	mov.w	lr, #0
    b014:	subs	r4, #1
    b016:	b.n	ad3a <__aeabi_dmul+0xde>
    b018:	orr.w	lr, r5, r6
    b01c:	b.n	ad3a <__aeabi_dmul+0xde>
    b01e:	and.w	r5, ip, r3, lsr #20
    b022:	teq	r4, ip
    b026:	it	eq
    b028:	teqeq	r5, ip
    b02c:	beq.w	aea6 <__aeabi_dmul+0x24a>
    b030:	teq	r4, ip
    b034:	bne.n	b04c <__aeabi_ddiv+0x19c>
    b036:	orrs.w	r4, r0, r1, lsl #12
    b03a:	bne.w	aea6 <__aeabi_dmul+0x24a>
    b03e:	teq	r5, ip
    b042:	bne.w	ae90 <__aeabi_dmul+0x234>
    b046:	mov	r0, r2
    b048:	mov	r1, r3
    b04a:	b.n	aea6 <__aeabi_dmul+0x24a>
    b04c:	teq	r5, ip
    b050:	bne.n	b060 <__aeabi_ddiv+0x1b0>
    b052:	orrs.w	r5, r2, r3, lsl #12
    b056:	beq.w	ae54 <__aeabi_dmul+0x1f8>
    b05a:	mov	r0, r2
    b05c:	mov	r1, r3
    b05e:	b.n	aea6 <__aeabi_dmul+0x24a>
    b060:	orrs.w	r6, r0, r1, lsl #1
    b064:	it	ne
    b066:	orrsne.w	r6, r2, r3, lsl #1
    b06a:	bne.w	adf8 <__aeabi_dmul+0x19c>
    b06e:	orrs.w	r4, r0, r1, lsl #1
    b072:	bne.w	ae90 <__aeabi_dmul+0x234>
    b076:	orrs.w	r5, r2, r3, lsl #1
    b07a:	bne.w	ae54 <__aeabi_dmul+0x1f8>
    b07e:	b.n	aea6 <__aeabi_dmul+0x24a>

0000b080 <__gedf2>:
    b080:	mov.w	ip, #4294967295
    b084:	b.n	b094 <__cmpdf2+0x4>
    b086:	nop

0000b088 <__ledf2>:
    b088:	mov.w	ip, #1
    b08c:	b.n	b094 <__cmpdf2+0x4>
    b08e:	nop

0000b090 <__cmpdf2>:
    b090:	mov.w	ip, #1
    b094:	str.w	ip, [sp, #-4]!
    b098:	mov.w	ip, r1, lsl #1
    b09c:	mvns.w	ip, ip, asr #21
    b0a0:	mov.w	ip, r3, lsl #1
    b0a4:	it	ne
    b0a6:	mvnsne.w	ip, ip, asr #21
    b0aa:	beq.n	b0e4 <__cmpdf2+0x54>
    b0ac:	add	sp, #4
    b0ae:	orrs.w	ip, r0, r1, lsl #1
    b0b2:	ite	eq
    b0b4:	orrseq.w	ip, r2, r3, lsl #1
    b0b8:	teqne	r1, r3
    b0bc:	ittt	eq
    b0be:	teqeq	r0, r2
    b0c2:	moveq	r0, #0
    b0c4:	bxeq	lr
    b0c6:	cmn.w	r0, #0
    b0ca:	teq	r1, r3
    b0ce:	it	pl
    b0d0:	cmppl	r1, r3
    b0d2:	it	eq
    b0d4:	cmpeq	r0, r2
    b0d6:	ite	cs
    b0d8:	asrcs	r0, r3, #31
    b0da:	mvncc.w	r0, r3, asr #31
    b0de:	orr.w	r0, r0, #1
    b0e2:	bx	lr
    b0e4:	mov.w	ip, r1, lsl #1
    b0e8:	mvns.w	ip, ip, asr #21
    b0ec:	bne.n	b0f4 <__cmpdf2+0x64>
    b0ee:	orrs.w	ip, r0, r1, lsl #12
    b0f2:	bne.n	b104 <__cmpdf2+0x74>
    b0f4:	mov.w	ip, r3, lsl #1
    b0f8:	mvns.w	ip, ip, asr #21
    b0fc:	bne.n	b0ac <__cmpdf2+0x1c>
    b0fe:	orrs.w	ip, r2, r3, lsl #12
    b102:	beq.n	b0ac <__cmpdf2+0x1c>
    b104:	ldr.w	r0, [sp], #4
    b108:	bx	lr
    b10a:	nop

0000b10c <__aeabi_cdrcmple>:
    b10c:	mov	ip, r0
    b10e:	mov	r0, r2
    b110:	mov	r2, ip
    b112:	mov	ip, r1
    b114:	mov	r1, r3
    b116:	mov	r3, ip
    b118:	b.n	b11c <__aeabi_cdcmpeq>
    b11a:	nop

0000b11c <__aeabi_cdcmpeq>:
    b11c:	push	{r0, lr}
    b11e:	bl	b090 <__cmpdf2>
    b122:	cmp	r0, #0
    b124:	it	mi
    b126:	cmnmi.w	r0, #0
    b12a:	pop	{r0, pc}

0000b12c <__aeabi_dcmpeq>:
    b12c:	str.w	lr, [sp, #-8]!
    b130:	bl	b11c <__aeabi_cdcmpeq>
    b134:	ite	eq
    b136:	moveq	r0, #1
    b138:	movne	r0, #0
    b13a:	ldr.w	pc, [sp], #8
    b13e:	nop

0000b140 <__aeabi_dcmplt>:
    b140:	str.w	lr, [sp, #-8]!
    b144:	bl	b11c <__aeabi_cdcmpeq>
    b148:	ite	cc
    b14a:	movcc	r0, #1
    b14c:	movcs	r0, #0
    b14e:	ldr.w	pc, [sp], #8
    b152:	nop

0000b154 <__aeabi_dcmple>:
    b154:	str.w	lr, [sp, #-8]!
    b158:	bl	b11c <__aeabi_cdcmpeq>
    b15c:	ite	ls
    b15e:	movls	r0, #1
    b160:	movhi	r0, #0
    b162:	ldr.w	pc, [sp], #8
    b166:	nop

0000b168 <__aeabi_dcmpge>:
    b168:	str.w	lr, [sp, #-8]!
    b16c:	bl	b10c <__aeabi_cdrcmple>
    b170:	ite	ls
    b172:	movls	r0, #1
    b174:	movhi	r0, #0
    b176:	ldr.w	pc, [sp], #8
    b17a:	nop

0000b17c <__aeabi_dcmpgt>:
    b17c:	str.w	lr, [sp, #-8]!
    b180:	bl	b10c <__aeabi_cdrcmple>
    b184:	ite	cc
    b186:	movcc	r0, #1
    b188:	movcs	r0, #0
    b18a:	ldr.w	pc, [sp], #8
    b18e:	nop

0000b190 <__aeabi_dcmpun>:
    b190:	mov.w	ip, r1, lsl #1
    b194:	mvns.w	ip, ip, asr #21
    b198:	bne.n	b1a0 <__aeabi_dcmpun+0x10>
    b19a:	orrs.w	ip, r0, r1, lsl #12
    b19e:	bne.n	b1b6 <__aeabi_dcmpun+0x26>
    b1a0:	mov.w	ip, r3, lsl #1
    b1a4:	mvns.w	ip, ip, asr #21
    b1a8:	bne.n	b1b0 <__aeabi_dcmpun+0x20>
    b1aa:	orrs.w	ip, r2, r3, lsl #12
    b1ae:	bne.n	b1b6 <__aeabi_dcmpun+0x26>
    b1b0:	mov.w	r0, #0
    b1b4:	bx	lr
    b1b6:	mov.w	r0, #1
    b1ba:	bx	lr

0000b1bc <__aeabi_d2iz>:
    b1bc:	mov.w	r2, r1, lsl #1
    b1c0:	adds.w	r2, r2, #2097152	; 0x200000
    b1c4:	bcs.n	b1f2 <__aeabi_d2iz+0x36>
    b1c6:	bpl.n	b1ec <__aeabi_d2iz+0x30>
    b1c8:	mvn.w	r3, #992	; 0x3e0
    b1cc:	subs.w	r2, r3, r2, asr #21
    b1d0:	bls.n	b1f8 <__aeabi_d2iz+0x3c>
    b1d2:	mov.w	r3, r1, lsl #11
    b1d6:	orr.w	r3, r3, #2147483648	; 0x80000000
    b1da:	orr.w	r3, r3, r0, lsr #21
    b1de:	tst.w	r1, #2147483648	; 0x80000000
    b1e2:	lsr.w	r0, r3, r2
    b1e6:	it	ne
    b1e8:	negne	r0, r0
    b1ea:	bx	lr
    b1ec:	mov.w	r0, #0
    b1f0:	bx	lr
    b1f2:	orrs.w	r0, r0, r1, lsl #12
    b1f6:	bne.n	b204 <__aeabi_d2iz+0x48>
    b1f8:	ands.w	r0, r1, #2147483648	; 0x80000000
    b1fc:	it	eq
    b1fe:	mvneq.w	r0, #2147483648	; 0x80000000
    b202:	bx	lr
    b204:	mov.w	r0, #0
    b208:	bx	lr
    b20a:	nop

0000b20c <__aeabi_d2uiz>:
    b20c:	lsls	r2, r1, #1
    b20e:	bcs.n	b234 <__aeabi_d2uiz+0x28>
    b210:	adds.w	r2, r2, #2097152	; 0x200000
    b214:	bcs.n	b23a <__aeabi_d2uiz+0x2e>
    b216:	bpl.n	b234 <__aeabi_d2uiz+0x28>
    b218:	mvn.w	r3, #992	; 0x3e0
    b21c:	subs.w	r2, r3, r2, asr #21
    b220:	bmi.n	b240 <__aeabi_d2uiz+0x34>
    b222:	mov.w	r3, r1, lsl #11
    b226:	orr.w	r3, r3, #2147483648	; 0x80000000
    b22a:	orr.w	r3, r3, r0, lsr #21
    b22e:	lsr.w	r0, r3, r2
    b232:	bx	lr
    b234:	mov.w	r0, #0
    b238:	bx	lr
    b23a:	orrs.w	r0, r0, r1, lsl #12
    b23e:	bne.n	b246 <__aeabi_d2uiz+0x3a>
    b240:	mov.w	r0, #4294967295
    b244:	bx	lr
    b246:	mov.w	r0, #0
    b24a:	bx	lr

0000b24c <__aeabi_d2f>:
    b24c:	mov.w	r2, r1, lsl #1
    b250:	subs.w	r3, r2, #1879048192	; 0x70000000
    b254:	itt	cs
    b256:	subscs.w	ip, r3, #2097152	; 0x200000
    b25a:	rsbscs	ip, ip, #532676608	; 0x1fc00000
    b25e:	bls.n	b27c <__aeabi_d2f+0x30>
    b260:	and.w	ip, r1, #2147483648	; 0x80000000
    b264:	mov.w	r2, r0, lsl #3
    b268:	orr.w	r0, ip, r0, lsr #29
    b26c:	cmp.w	r2, #2147483648	; 0x80000000
    b270:	adc.w	r0, r0, r3, lsl #2
    b274:	it	eq
    b276:	biceq.w	r0, r0, #1
    b27a:	bx	lr
    b27c:	tst.w	r1, #1073741824	; 0x40000000
    b280:	bne.n	b2c6 <__aeabi_d2f+0x7a>
    b282:	adds.w	r2, r3, #48234496	; 0x2e00000
    b286:	itt	lt
    b288:	andlt.w	r0, r1, #2147483648	; 0x80000000
    b28c:	bxlt	lr
    b28e:	orr.w	r1, r1, #1048576	; 0x100000
    b292:	mov.w	r2, r2, lsr #21
    b296:	rsb	r2, r2, #24
    b29a:	rsb	ip, r2, #32
    b29e:	lsls.w	r3, r0, ip
    b2a2:	lsr.w	r0, r0, r2
    b2a6:	it	ne
    b2a8:	orrne.w	r0, r0, #1
    b2ac:	mov.w	r3, r1, lsl #11
    b2b0:	mov.w	r3, r3, lsr #11
    b2b4:	lsl.w	ip, r3, ip
    b2b8:	orr.w	r0, r0, ip
    b2bc:	lsr.w	r3, r3, r2
    b2c0:	mov.w	r3, r3, lsl #1
    b2c4:	b.n	b260 <__aeabi_d2f+0x14>
    b2c6:	mvns.w	r3, r2, asr #21
    b2ca:	bne.n	b2dc <__aeabi_d2f+0x90>
    b2cc:	orrs.w	r3, r0, r1, lsl #12
    b2d0:	ittt	ne
    b2d2:	movne.w	r0, #2130706432	; 0x7f000000
    b2d6:	orrne.w	r0, r0, #12582912	; 0xc00000
    b2da:	bxne	lr
    b2dc:	and.w	r0, r1, #2147483648	; 0x80000000
    b2e0:	orr.w	r0, r0, #2130706432	; 0x7f000000
    b2e4:	orr.w	r0, r0, #8388608	; 0x800000
    b2e8:	bx	lr
    b2ea:	nop

0000b2ec <__aeabi_frsub>:
    b2ec:	eor.w	r0, r0, #2147483648	; 0x80000000
    b2f0:	b.n	b2f8 <__addsf3>
    b2f2:	nop

0000b2f4 <__aeabi_fsub>:
    b2f4:	eor.w	r1, r1, #2147483648	; 0x80000000

0000b2f8 <__addsf3>:
    b2f8:	lsls	r2, r0, #1
    b2fa:	itttt	ne
    b2fc:	movsne.w	r3, r1, lsl #1
    b300:	teqne	r2, r3
    b304:	mvnsne.w	ip, r2, asr #24
    b308:	mvnsne.w	ip, r3, asr #24
    b30c:	beq.n	b3e4 <__addsf3+0xec>
    b30e:	mov.w	r2, r2, lsr #24
    b312:	rsbs	r3, r2, r3, lsr #24
    b316:	itttt	gt
    b318:	addgt	r2, r2, r3
    b31a:	eorgt	r1, r0
    b31c:	eorgt	r0, r1
    b31e:	eorgt	r1, r0
    b320:	it	lt
    b322:	neglt	r3, r3
    b324:	cmp	r3, #25
    b326:	it	hi
    b328:	bxhi	lr
    b32a:	tst.w	r0, #2147483648	; 0x80000000
    b32e:	orr.w	r0, r0, #8388608	; 0x800000
    b332:	bic.w	r0, r0, #4278190080	; 0xff000000
    b336:	it	ne
    b338:	negne	r0, r0
    b33a:	tst.w	r1, #2147483648	; 0x80000000
    b33e:	orr.w	r1, r1, #8388608	; 0x800000
    b342:	bic.w	r1, r1, #4278190080	; 0xff000000
    b346:	it	ne
    b348:	negne	r1, r1
    b34a:	teq	r2, r3
    b34e:	beq.n	b3d0 <__addsf3+0xd8>
    b350:	sub.w	r2, r2, #1
    b354:	asr.w	ip, r1, r3
    b358:	adds.w	r0, r0, ip
    b35c:	rsb	r3, r3, #32
    b360:	lsl.w	r1, r1, r3
    b364:	and.w	r3, r0, #2147483648	; 0x80000000
    b368:	bpl.n	b370 <__addsf3+0x78>
    b36a:	negs	r1, r1
    b36c:	sbc.w	r0, r0, r0, lsl #1
    b370:	cmp.w	r0, #8388608	; 0x800000
    b374:	bcc.n	b39e <__addsf3+0xa6>
    b376:	cmp.w	r0, #16777216	; 0x1000000
    b37a:	bcc.n	b38a <__addsf3+0x92>
    b37c:	lsrs	r0, r0, #1
    b37e:	mov.w	r1, r1, rrx
    b382:	add.w	r2, r2, #1
    b386:	cmp	r2, #254	; 0xfe
    b388:	bcs.n	b42e <__addsf3+0x136>
    b38a:	cmp.w	r1, #2147483648	; 0x80000000
    b38e:	adc.w	r0, r0, r2, lsl #23
    b392:	it	eq
    b394:	biceq.w	r0, r0, #1
    b398:	orr.w	r0, r0, r3
    b39c:	bx	lr
    b39e:	lsls	r1, r1, #1
    b3a0:	adc.w	r0, r0, r0
    b3a4:	tst.w	r0, #8388608	; 0x800000
    b3a8:	sub.w	r2, r2, #1
    b3ac:	bne.n	b38a <__addsf3+0x92>
    b3ae:	clz	ip, r0
    b3b2:	sub.w	ip, ip, #8
    b3b6:	subs.w	r2, r2, ip
    b3ba:	lsl.w	r0, r0, ip
    b3be:	itet	ge
    b3c0:	addge.w	r0, r0, r2, lsl #23
    b3c4:	neglt	r2, r2
    b3c6:	orrge	r0, r3
    b3c8:	itt	lt
    b3ca:	lsrlt	r0, r2
    b3cc:	orrlt	r0, r3
    b3ce:	bx	lr
    b3d0:	teq	r2, #0
    b3d4:	eor.w	r1, r1, #8388608	; 0x800000
    b3d8:	itte	eq
    b3da:	eoreq.w	r0, r0, #8388608	; 0x800000
    b3de:	addeq	r2, #1
    b3e0:	subne	r3, #1
    b3e2:	b.n	b350 <__addsf3+0x58>
    b3e4:	mov.w	r3, r1, lsl #1
    b3e8:	mvns.w	ip, r2, asr #24
    b3ec:	it	ne
    b3ee:	mvnsne.w	ip, r3, asr #24
    b3f2:	beq.n	b438 <__addsf3+0x140>
    b3f4:	teq	r2, r3
    b3f8:	beq.n	b404 <__addsf3+0x10c>
    b3fa:	teq	r2, #0
    b3fe:	it	eq
    b400:	moveq	r0, r1
    b402:	bx	lr
    b404:	teq	r0, r1
    b408:	itt	ne
    b40a:	movne	r0, #0
    b40c:	bxne	lr
    b40e:	tst.w	r2, #4278190080	; 0xff000000
    b412:	bne.n	b41e <__addsf3+0x126>
    b414:	lsls	r0, r0, #1
    b416:	it	cs
    b418:	orrcs.w	r0, r0, #2147483648	; 0x80000000
    b41c:	bx	lr
    b41e:	adds.w	r2, r2, #33554432	; 0x2000000
    b422:	itt	cc
    b424:	addcc.w	r0, r0, #8388608	; 0x800000
    b428:	bxcc	lr
    b42a:	and.w	r3, r0, #2147483648	; 0x80000000
    b42e:	orr.w	r0, r3, #2130706432	; 0x7f000000
    b432:	orr.w	r0, r0, #8388608	; 0x800000
    b436:	bx	lr
    b438:	mvns.w	r2, r2, asr #24
    b43c:	itet	ne
    b43e:	movne	r0, r1
    b440:	mvnseq.w	r3, r3, asr #24
    b444:	movne	r1, r0
    b446:	lsls	r2, r0, #9
    b448:	itte	eq
    b44a:	movseq.w	r3, r1, lsl #9
    b44e:	teqeq	r0, r1
    b452:	orrne.w	r0, r0, #4194304	; 0x400000
    b456:	bx	lr

0000b458 <__aeabi_ui2f>:
    b458:	mov.w	r3, #0
    b45c:	b.n	b468 <__aeabi_i2f+0x8>
    b45e:	nop

0000b460 <__aeabi_i2f>:
    b460:	ands.w	r3, r0, #2147483648	; 0x80000000
    b464:	it	mi
    b466:	negmi	r0, r0
    b468:	movs.w	ip, r0
    b46c:	it	eq
    b46e:	bxeq	lr
    b470:	orr.w	r3, r3, #1258291200	; 0x4b000000
    b474:	mov	r1, r0
    b476:	mov.w	r0, #0
    b47a:	b.n	b4b6 <__aeabi_l2f+0x2a>

0000b47c <__aeabi_ul2f>:
    b47c:	orrs.w	r2, r0, r1
    b480:	it	eq
    b482:	bxeq	lr
    b484:	mov.w	r3, #0
    b488:	b.n	b4a0 <__aeabi_l2f+0x14>
    b48a:	nop

0000b48c <__aeabi_l2f>:
    b48c:	orrs.w	r2, r0, r1
    b490:	it	eq
    b492:	bxeq	lr
    b494:	ands.w	r3, r1, #2147483648	; 0x80000000
    b498:	bpl.n	b4a0 <__aeabi_l2f+0x14>
    b49a:	negs	r0, r0
    b49c:	sbc.w	r1, r1, r1, lsl #1
    b4a0:	movs.w	ip, r1
    b4a4:	ittt	eq
    b4a6:	moveq	ip, r0
    b4a8:	moveq	r1, r0
    b4aa:	moveq	r0, #0
    b4ac:	orr.w	r3, r3, #1526726656	; 0x5b000000
    b4b0:	it	eq
    b4b2:	subeq.w	r3, r3, #268435456	; 0x10000000
    b4b6:	sub.w	r3, r3, #8388608	; 0x800000
    b4ba:	clz	r2, ip
    b4be:	subs	r2, #8
    b4c0:	sub.w	r3, r3, r2, lsl #23
    b4c4:	blt.n	b4e8 <__aeabi_l2f+0x5c>
    b4c6:	lsl.w	ip, r1, r2
    b4ca:	add	r3, ip
    b4cc:	lsl.w	ip, r0, r2
    b4d0:	rsb	r2, r2, #32
    b4d4:	cmp.w	ip, #2147483648	; 0x80000000
    b4d8:	lsr.w	r2, r0, r2
    b4dc:	adc.w	r0, r3, r2
    b4e0:	it	eq
    b4e2:	biceq.w	r0, r0, #1
    b4e6:	bx	lr
    b4e8:	add.w	r2, r2, #32
    b4ec:	lsl.w	ip, r1, r2
    b4f0:	rsb	r2, r2, #32
    b4f4:	orrs.w	r0, r0, ip, lsl #1
    b4f8:	lsr.w	r2, r1, r2
    b4fc:	adc.w	r0, r3, r2
    b500:	it	eq
    b502:	biceq.w	r0, r0, ip, lsr #31
    b506:	bx	lr

0000b508 <__aeabi_uldivmod>:
    b508:	cbnz	r3, b520 <__aeabi_uldivmod+0x18>
    b50a:	cbnz	r2, b520 <__aeabi_uldivmod+0x18>
    b50c:	cmp	r1, #0
    b50e:	it	eq
    b510:	cmpeq	r0, #0
    b512:	itt	ne
    b514:	movne.w	r1, #4294967295
    b518:	movne.w	r0, #4294967295
    b51c:	b.w	b88c <__aeabi_idiv0>
    b520:	sub.w	ip, sp, #8
    b524:	strd	ip, lr, [sp, #-16]!
    b528:	bl	b5a8 <__udivmoddi4>
    b52c:	ldr.w	lr, [sp, #4]
    b530:	ldrd	r2, r3, [sp, #8]
    b534:	add	sp, #16
    b536:	bx	lr

0000b538 <__aeabi_f2lz>:
    b538:	vmov	s15, r0
    b53c:	vcmpe.f32	s15, #0.0
    b540:	vmrs	APSR_nzcv, fpscr
    b544:	bmi.n	b54a <__aeabi_f2lz+0x12>
    b546:	b.w	b55c <__aeabi_f2ulz>
    b54a:	push	{r3, lr}
    b54c:	eor.w	r0, r0, #2147483648	; 0x80000000
    b550:	bl	b55c <__aeabi_f2ulz>
    b554:	negs	r0, r0
    b556:	sbc.w	r1, r1, r1, lsl #1
    b55a:	pop	{r3, pc}

0000b55c <__aeabi_f2ulz>:
    b55c:	push	{r4, r6, r7, lr}
    b55e:	bl	abb4 <__aeabi_f2d>
    b562:	movs	r2, #0
    b564:	ldr	r3, [pc, #56]	; (b5a0 <__aeabi_f2ulz+0x44>)
    b566:	mov	r6, r0
    b568:	mov	r7, r1
    b56a:	bl	ac5c <__aeabi_dmul>
    b56e:	bl	b20c <__aeabi_d2uiz>
    b572:	mov	r4, r0
    b574:	bl	ab70 <__aeabi_ui2d>
    b578:	movs	r2, #0
    b57a:	ldr	r3, [pc, #40]	; (b5a4 <__aeabi_f2ulz+0x48>)
    b57c:	bl	ac5c <__aeabi_dmul>
    b580:	mov	r2, r0
    b582:	mov	r3, r1
    b584:	mov	r0, r6
    b586:	mov	r1, r7
    b588:	bl	a8f4 <__aeabi_dsub>
    b58c:	bl	b20c <__aeabi_d2uiz>
    b590:	mov	r3, r4
    b592:	movs	r2, #0
    b594:	orr.w	r2, r2, r0
    b598:	mov	r0, r2
    b59a:	mov	r1, r3
    b59c:	pop	{r4, r6, r7, pc}
    b59e:	nop
    b5a0:	.word	0x3df00000
    b5a4:	.word	0x41f00000

0000b5a8 <__udivmoddi4>:
    b5a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b5ac:	mov	ip, r1
    b5ae:	mov	r6, r1
    b5b0:	mov	r4, r0
    b5b2:	ldr	r5, [sp, #32]
    b5b4:	cmp	r3, #0
    b5b6:	bne.n	b65a <__udivmoddi4+0xb2>
    b5b8:	cmp	r2, r1
    b5ba:	mov	r7, r2
    b5bc:	bls.n	b698 <__udivmoddi4+0xf0>
    b5be:	clz	lr, r2
    b5c2:	cmp.w	lr, #0
    b5c6:	beq.n	b5e0 <__udivmoddi4+0x38>
    b5c8:	rsb	r4, lr, #32
    b5cc:	lsr.w	r4, r0, r4
    b5d0:	lsl.w	r6, r1, lr
    b5d4:	orr.w	ip, r4, r6
    b5d8:	lsl.w	r7, r2, lr
    b5dc:	lsl.w	r4, r0, lr
    b5e0:	mov.w	r9, r7, lsr #16
    b5e4:	lsrs	r2, r4, #16
    b5e6:	udiv	r0, ip, r9
    b5ea:	uxth.w	r8, r7
    b5ee:	mls	r6, r9, r0, ip
    b5f2:	orr.w	r6, r2, r6, lsl #16
    b5f6:	mul.w	r3, r0, r8
    b5fa:	cmp	r3, r6
    b5fc:	bls.n	b612 <__udivmoddi4+0x6a>
    b5fe:	adds	r6, r6, r7
    b600:	add.w	r2, r0, #4294967295
    b604:	bcs.w	b84c <__udivmoddi4+0x2a4>
    b608:	cmp	r3, r6
    b60a:	bls.w	b84c <__udivmoddi4+0x2a4>
    b60e:	subs	r0, #2
    b610:	add	r6, r7
    b612:	subs	r6, r6, r3
    b614:	uxth	r2, r4
    b616:	udiv	r3, r6, r9
    b61a:	mls	r6, r9, r3, r6
    b61e:	orr.w	r4, r2, r6, lsl #16
    b622:	mul.w	r8, r3, r8
    b626:	cmp	r8, r4
    b628:	bls.n	b63e <__udivmoddi4+0x96>
    b62a:	adds	r4, r4, r7
    b62c:	add.w	r2, r3, #4294967295
    b630:	bcs.w	b848 <__udivmoddi4+0x2a0>
    b634:	cmp	r8, r4
    b636:	bls.w	b848 <__udivmoddi4+0x2a0>
    b63a:	subs	r3, #2
    b63c:	add	r4, r7
    b63e:	rsb	r4, r8, r4
    b642:	orr.w	r0, r3, r0, lsl #16
    b646:	movs	r1, #0
    b648:	cmp	r5, #0
    b64a:	beq.n	b712 <__udivmoddi4+0x16a>
    b64c:	lsr.w	r4, r4, lr
    b650:	movs	r3, #0
    b652:	str	r4, [r5, #0]
    b654:	str	r3, [r5, #4]
    b656:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b65a:	cmp	r3, r1
    b65c:	bls.n	b66e <__udivmoddi4+0xc6>
    b65e:	cmp	r5, #0
    b660:	beq.n	b70e <__udivmoddi4+0x166>
    b662:	movs	r1, #0
    b664:	stmia.w	r5, {r0, r6}
    b668:	mov	r0, r1
    b66a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b66e:	clz	r1, r3
    b672:	cmp	r1, #0
    b674:	bne.w	b798 <__udivmoddi4+0x1f0>
    b678:	cmp	r3, r6
    b67a:	bcc.n	b682 <__udivmoddi4+0xda>
    b67c:	cmp	r2, r0
    b67e:	bhi.w	b872 <__udivmoddi4+0x2ca>
    b682:	subs	r4, r0, r2
    b684:	sbc.w	r6, r6, r3
    b688:	movs	r0, #1
    b68a:	mov	ip, r6
    b68c:	cmp	r5, #0
    b68e:	beq.n	b712 <__udivmoddi4+0x16a>
    b690:	stmia.w	r5, {r4, ip}
    b694:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b698:	cbnz	r2, b6a0 <__udivmoddi4+0xf8>
    b69a:	movs	r7, #1
    b69c:	udiv	r7, r7, r2
    b6a0:	clz	lr, r7
    b6a4:	cmp.w	lr, #0
    b6a8:	bne.n	b716 <__udivmoddi4+0x16e>
    b6aa:	subs	r3, r6, r7
    b6ac:	mov.w	r8, r7, lsr #16
    b6b0:	uxth.w	ip, r7
    b6b4:	movs	r1, #1
    b6b6:	udiv	r0, r3, r8
    b6ba:	lsrs	r2, r4, #16
    b6bc:	mls	r6, r8, r0, r3
    b6c0:	orr.w	r6, r2, r6, lsl #16
    b6c4:	mul.w	r3, ip, r0
    b6c8:	cmp	r3, r6
    b6ca:	bls.n	b6dc <__udivmoddi4+0x134>
    b6cc:	adds	r6, r6, r7
    b6ce:	add.w	r2, r0, #4294967295
    b6d2:	bcs.n	b6da <__udivmoddi4+0x132>
    b6d4:	cmp	r3, r6
    b6d6:	bhi.w	b876 <__udivmoddi4+0x2ce>
    b6da:	mov	r0, r2
    b6dc:	subs	r6, r6, r3
    b6de:	uxth	r2, r4
    b6e0:	udiv	r3, r6, r8
    b6e4:	mls	r6, r8, r3, r6
    b6e8:	orr.w	r4, r2, r6, lsl #16
    b6ec:	mul.w	ip, ip, r3
    b6f0:	cmp	ip, r4
    b6f2:	bls.n	b704 <__udivmoddi4+0x15c>
    b6f4:	adds	r4, r4, r7
    b6f6:	add.w	r2, r3, #4294967295
    b6fa:	bcs.n	b702 <__udivmoddi4+0x15a>
    b6fc:	cmp	ip, r4
    b6fe:	bhi.w	b86c <__udivmoddi4+0x2c4>
    b702:	mov	r3, r2
    b704:	rsb	r4, ip, r4
    b708:	orr.w	r0, r3, r0, lsl #16
    b70c:	b.n	b648 <__udivmoddi4+0xa0>
    b70e:	mov	r1, r5
    b710:	mov	r0, r5
    b712:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b716:	rsb	r1, lr, #32
    b71a:	lsl.w	r3, r6, lr
    b71e:	lsl.w	r7, r7, lr
    b722:	lsr.w	r9, r0, r1
    b726:	mov.w	r8, r7, lsr #16
    b72a:	lsrs	r6, r1
    b72c:	orr.w	r9, r9, r3
    b730:	udiv	sl, r6, r8
    b734:	mov.w	r4, r9, lsr #16
    b738:	mls	r6, r8, sl, r6
    b73c:	uxth.w	ip, r7
    b740:	orr.w	r3, r4, r6, lsl #16
    b744:	mul.w	r2, sl, ip
    b748:	cmp	r2, r3
    b74a:	lsl.w	r4, r0, lr
    b74e:	bls.n	b766 <__udivmoddi4+0x1be>
    b750:	adds	r3, r3, r7
    b752:	add.w	r1, sl, #4294967295
    b756:	bcs.w	b868 <__udivmoddi4+0x2c0>
    b75a:	cmp	r2, r3
    b75c:	bls.w	b868 <__udivmoddi4+0x2c0>
    b760:	sub.w	sl, sl, #2
    b764:	add	r3, r7
    b766:	subs	r3, r3, r2
    b768:	uxth.w	r9, r9
    b76c:	udiv	r1, r3, r8
    b770:	mls	r3, r8, r1, r3
    b774:	orr.w	r3, r9, r3, lsl #16
    b778:	mul.w	r6, r1, ip
    b77c:	cmp	r6, r3
    b77e:	bls.n	b790 <__udivmoddi4+0x1e8>
    b780:	adds	r3, r3, r7
    b782:	add.w	r2, r1, #4294967295
    b786:	bcs.n	b860 <__udivmoddi4+0x2b8>
    b788:	cmp	r6, r3
    b78a:	bls.n	b860 <__udivmoddi4+0x2b8>
    b78c:	subs	r1, #2
    b78e:	add	r3, r7
    b790:	subs	r3, r3, r6
    b792:	orr.w	r1, r1, sl, lsl #16
    b796:	b.n	b6b6 <__udivmoddi4+0x10e>
    b798:	rsb	lr, r1, #32
    b79c:	lsr.w	r4, r2, lr
    b7a0:	lsls	r3, r1
    b7a2:	orrs	r3, r4
    b7a4:	lsr.w	r7, r0, lr
    b7a8:	lsl.w	r4, r6, r1
    b7ac:	mov.w	ip, r3, lsr #16
    b7b0:	lsr.w	r6, r6, lr
    b7b4:	orrs	r4, r7
    b7b6:	udiv	r9, r6, ip
    b7ba:	lsrs	r7, r4, #16
    b7bc:	mls	r6, ip, r9, r6
    b7c0:	uxth.w	r8, r3
    b7c4:	orr.w	r6, r7, r6, lsl #16
    b7c8:	mul.w	r7, r9, r8
    b7cc:	cmp	r7, r6
    b7ce:	lsl.w	r2, r2, r1
    b7d2:	lsl.w	sl, r0, r1
    b7d6:	bls.n	b7ea <__udivmoddi4+0x242>
    b7d8:	adds	r6, r6, r3
    b7da:	add.w	r0, r9, #4294967295
    b7de:	bcs.n	b864 <__udivmoddi4+0x2bc>
    b7e0:	cmp	r7, r6
    b7e2:	bls.n	b864 <__udivmoddi4+0x2bc>
    b7e4:	sub.w	r9, r9, #2
    b7e8:	add	r6, r3
    b7ea:	subs	r6, r6, r7
    b7ec:	uxth	r0, r4
    b7ee:	udiv	r4, r6, ip
    b7f2:	mls	r6, ip, r4, r6
    b7f6:	orr.w	r7, r0, r6, lsl #16
    b7fa:	mul.w	r8, r4, r8
    b7fe:	cmp	r8, r7
    b800:	bls.n	b812 <__udivmoddi4+0x26a>
    b802:	adds	r7, r7, r3
    b804:	add.w	r0, r4, #4294967295
    b808:	bcs.n	b85c <__udivmoddi4+0x2b4>
    b80a:	cmp	r8, r7
    b80c:	bls.n	b85c <__udivmoddi4+0x2b4>
    b80e:	subs	r4, #2
    b810:	add	r7, r3
    b812:	orr.w	r0, r4, r9, lsl #16
    b816:	rsb	r7, r8, r7
    b81a:	umull	r8, r9, r0, r2
    b81e:	cmp	r7, r9
    b820:	mov	r4, r8
    b822:	mov	r6, r9
    b824:	bcc.n	b850 <__udivmoddi4+0x2a8>
    b826:	beq.n	b87c <__udivmoddi4+0x2d4>
    b828:	cbz	r5, b884 <__udivmoddi4+0x2dc>
    b82a:	subs.w	r3, sl, r4
    b82e:	sbc.w	r7, r7, r6
    b832:	lsl.w	lr, r7, lr
    b836:	lsrs	r3, r1
    b838:	lsrs	r7, r1
    b83a:	orr.w	r3, lr, r3
    b83e:	stmia.w	r5, {r3, r7}
    b842:	movs	r1, #0
    b844:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b848:	mov	r3, r2
    b84a:	b.n	b63e <__udivmoddi4+0x96>
    b84c:	mov	r0, r2
    b84e:	b.n	b612 <__udivmoddi4+0x6a>
    b850:	subs.w	r4, r8, r2
    b854:	sbc.w	r6, r9, r3
    b858:	subs	r0, #1
    b85a:	b.n	b828 <__udivmoddi4+0x280>
    b85c:	mov	r4, r0
    b85e:	b.n	b812 <__udivmoddi4+0x26a>
    b860:	mov	r1, r2
    b862:	b.n	b790 <__udivmoddi4+0x1e8>
    b864:	mov	r9, r0
    b866:	b.n	b7ea <__udivmoddi4+0x242>
    b868:	mov	sl, r1
    b86a:	b.n	b766 <__udivmoddi4+0x1be>
    b86c:	subs	r3, #2
    b86e:	add	r4, r7
    b870:	b.n	b704 <__udivmoddi4+0x15c>
    b872:	mov	r0, r1
    b874:	b.n	b68c <__udivmoddi4+0xe4>
    b876:	subs	r0, #2
    b878:	add	r6, r7
    b87a:	b.n	b6dc <__udivmoddi4+0x134>
    b87c:	cmp	sl, r8
    b87e:	bcc.n	b850 <__udivmoddi4+0x2a8>
    b880:	mov	r6, r7
    b882:	b.n	b828 <__udivmoddi4+0x280>
    b884:	mov	r1, r5
    b886:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b88a:	nop

0000b88c <__aeabi_idiv0>:
    b88c:	bx	lr
    b88e:	nop

0000b890 <__cxa_atexit>:
    b890:	mov	r3, r2
    b892:	mov	r2, r1
    b894:	mov	r1, r0
    b896:	movs	r0, #2
    b898:	b.w	ffe8 <__register_exitproc>

0000b89c <__errno>:
    b89c:	ldr	r3, [pc, #4]	; (b8a4 <__errno+0x8>)
    b89e:	ldr	r0, [r3, #0]
    b8a0:	bx	lr
    b8a2:	nop
    b8a4:	.word	0x20017400

0000b8a8 <__libc_init_array>:
    b8a8:	push	{r4, r5, r6, lr}
    b8aa:	ldr	r6, [pc, #60]	; (b8e8 <__libc_init_array+0x40>)
    b8ac:	ldr	r5, [pc, #60]	; (b8ec <__libc_init_array+0x44>)
    b8ae:	subs	r6, r6, r5
    b8b0:	asrs	r6, r6, #2
    b8b2:	it	ne
    b8b4:	movne	r4, #0
    b8b6:	beq.n	b8c4 <__libc_init_array+0x1c>
    b8b8:	adds	r4, #1
    b8ba:	ldr.w	r3, [r5], #4
    b8be:	blx	r3
    b8c0:	cmp	r6, r4
    b8c2:	bne.n	b8b8 <__libc_init_array+0x10>
    b8c4:	ldr	r6, [pc, #40]	; (b8f0 <__libc_init_array+0x48>)
    b8c6:	ldr	r5, [pc, #44]	; (b8f4 <__libc_init_array+0x4c>)
    b8c8:	subs	r6, r6, r5
    b8ca:	bl	13b54 <_init>
    b8ce:	asrs	r6, r6, #2
    b8d0:	it	ne
    b8d2:	movne	r4, #0
    b8d4:	beq.n	b8e4 <__libc_init_array+0x3c>
    b8d6:	adds	r4, #1
    b8d8:	ldr.w	r3, [r5], #4
    b8dc:	blx	r3
    b8de:	cmp	r6, r4
    b8e0:	bne.n	b8d6 <__libc_init_array+0x2e>
    b8e2:	pop	{r4, r5, r6, pc}
    b8e4:	pop	{r4, r5, r6, pc}
    b8e6:	nop
    b8e8:	.word	0x00013b60
    b8ec:	.word	0x00013b60
    b8f0:	.word	0x00013bb8
    b8f4:	.word	0x00013b60

0000b8f8 <__get_current_locale>:
    b8f8:	ldr	r2, [pc, #12]	; (b908 <__get_current_locale+0x10>)
    b8fa:	ldr	r3, [pc, #16]	; (b90c <__get_current_locale+0x14>)
    b8fc:	ldr	r2, [r2, #0]
    b8fe:	ldr	r0, [r2, #52]	; 0x34
    b900:	cmp	r0, #0
    b902:	it	eq
    b904:	moveq	r0, r3
    b906:	bx	lr
    b908:	.word	0x20017400
    b90c:	.word	0x20017404

0000b910 <__locale_mb_cur_max>:
    b910:	ldr	r3, [pc, #16]	; (b924 <__locale_mb_cur_max+0x14>)
    b912:	ldr	r2, [pc, #20]	; (b928 <__locale_mb_cur_max+0x18>)
    b914:	ldr	r3, [r3, #0]
    b916:	ldr	r3, [r3, #52]	; 0x34
    b918:	cmp	r3, #0
    b91a:	it	eq
    b91c:	moveq	r3, r2
    b91e:	ldrb.w	r0, [r3, #296]	; 0x128
    b922:	bx	lr
    b924:	.word	0x20017400
    b928:	.word	0x20017404

0000b92c <__locale_ctype_ptr_l>:
    b92c:	ldr.w	r0, [r0, #236]	; 0xec
    b930:	bx	lr
    b932:	nop

0000b934 <__locale_ctype_ptr>:
    b934:	push	{r3, lr}
    b936:	ldr	r3, [pc, #12]	; (b944 <__locale_ctype_ptr+0x10>)
    b938:	ldr	r0, [r3, #0]
    b93a:	bl	b8f8 <__get_current_locale>
    b93e:	ldr.w	r0, [r0, #236]	; 0xec
    b942:	pop	{r3, pc}
    b944:	.word	0x20017400

0000b948 <malloc>:
    b948:	ldr	r3, [pc, #8]	; (b954 <malloc+0xc>)
    b94a:	mov	r1, r0
    b94c:	ldr	r0, [r3, #0]
    b94e:	b.w	b968 <_malloc_r>
    b952:	nop
    b954:	.word	0x20017400

0000b958 <free>:
    b958:	ldr	r3, [pc, #8]	; (b964 <free+0xc>)
    b95a:	mov	r1, r0
    b95c:	ldr	r0, [r3, #0]
    b95e:	b.w	110d0 <_free_r>
    b962:	nop
    b964:	.word	0x20017400

0000b968 <_malloc_r>:
    b968:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b96c:	add.w	r5, r1, #11
    b970:	cmp	r5, #22
    b972:	sub	sp, #12
    b974:	mov	r6, r0
    b976:	bls.w	bab8 <_malloc_r+0x150>
    b97a:	bics.w	r5, r5, #7
    b97e:	bmi.w	bb00 <_malloc_r+0x198>
    b982:	cmp	r1, r5
    b984:	bhi.w	bb00 <_malloc_r+0x198>
    b988:	bl	c178 <__malloc_lock>
    b98c:	cmp.w	r5, #504	; 0x1f8
    b990:	bcc.w	becc <_malloc_r+0x564>
    b994:	lsrs	r3, r5, #9
    b996:	beq.w	bb0e <_malloc_r+0x1a6>
    b99a:	cmp	r3, #4
    b99c:	bhi.w	bca6 <_malloc_r+0x33e>
    b9a0:	lsrs	r0, r5, #6
    b9a2:	add.w	lr, r0, #57	; 0x39
    b9a6:	mov.w	r3, lr, lsl #1
    b9aa:	adds	r0, #56	; 0x38
    b9ac:	ldr	r7, [pc, #784]	; (bcc0 <_malloc_r+0x358>)
    b9ae:	add.w	r3, r7, r3, lsl #2
    b9b2:	sub.w	r1, r3, #8
    b9b6:	ldr	r4, [r3, #4]
    b9b8:	cmp	r1, r4
    b9ba:	bne.n	b9cc <_malloc_r+0x64>
    b9bc:	b.n	bb18 <_malloc_r+0x1b0>
    b9be:	cmp	r2, #0
    b9c0:	bge.w	bb1c <_malloc_r+0x1b4>
    b9c4:	ldr	r4, [r4, #12]
    b9c6:	cmp	r1, r4
    b9c8:	beq.w	bb18 <_malloc_r+0x1b0>
    b9cc:	ldr	r3, [r4, #4]
    b9ce:	bic.w	r3, r3, #3
    b9d2:	subs	r2, r3, r5
    b9d4:	cmp	r2, #15
    b9d6:	ble.n	b9be <_malloc_r+0x56>
    b9d8:	ldr	r1, [pc, #740]	; (bcc0 <_malloc_r+0x358>)
    b9da:	ldr	r4, [r7, #16]
    b9dc:	add.w	lr, r1, #8
    b9e0:	cmp	r4, lr
    b9e2:	beq.w	bd4c <_malloc_r+0x3e4>
    b9e6:	ldr	r3, [r4, #4]
    b9e8:	bic.w	r3, r3, #3
    b9ec:	subs	r2, r3, r5
    b9ee:	cmp	r2, #15
    b9f0:	bgt.w	bd26 <_malloc_r+0x3be>
    b9f4:	cmp	r2, #0
    b9f6:	str.w	lr, [r1, #20]
    b9fa:	str.w	lr, [r1, #16]
    b9fe:	bge.w	bb3e <_malloc_r+0x1d6>
    ba02:	cmp.w	r3, #512	; 0x200
    ba06:	bcs.w	bcd8 <_malloc_r+0x370>
    ba0a:	lsrs	r3, r3, #3
    ba0c:	add.w	ip, r3, #1
    ba10:	movs	r2, #1
    ba12:	asrs	r3, r3, #2
    ba14:	lsl.w	r3, r2, r3
    ba18:	ldr	r2, [r1, #4]
    ba1a:	ldr.w	r8, [r1, ip, lsl #3]
    ba1e:	str.w	r8, [r4, #8]
    ba22:	add.w	r9, r1, ip, lsl #3
    ba26:	orrs	r2, r3
    ba28:	sub.w	r3, r9, #8
    ba2c:	str	r3, [r4, #12]
    ba2e:	str	r2, [r1, #4]
    ba30:	str.w	r4, [r1, ip, lsl #3]
    ba34:	str.w	r4, [r8, #12]
    ba38:	asrs	r3, r0, #2
    ba3a:	movs	r4, #1
    ba3c:	lsls	r4, r3
    ba3e:	cmp	r4, r2
    ba40:	bhi.w	bb58 <_malloc_r+0x1f0>
    ba44:	tst	r4, r2
    ba46:	bne.n	ba56 <_malloc_r+0xee>
    ba48:	bic.w	r0, r0, #3
    ba4c:	lsls	r4, r4, #1
    ba4e:	tst	r4, r2
    ba50:	add.w	r0, r0, #4
    ba54:	beq.n	ba4c <_malloc_r+0xe4>
    ba56:	add.w	r9, r7, r0, lsl #3
    ba5a:	mov	ip, r9
    ba5c:	mov	r8, r0
    ba5e:	ldr.w	r1, [ip, #12]
    ba62:	cmp	ip, r1
    ba64:	bne.n	ba76 <_malloc_r+0x10e>
    ba66:	b.n	bd50 <_malloc_r+0x3e8>
    ba68:	cmp	r2, #0
    ba6a:	bge.w	bd70 <_malloc_r+0x408>
    ba6e:	ldr	r1, [r1, #12]
    ba70:	cmp	ip, r1
    ba72:	beq.w	bd50 <_malloc_r+0x3e8>
    ba76:	ldr	r3, [r1, #4]
    ba78:	bic.w	r3, r3, #3
    ba7c:	subs	r2, r3, r5
    ba7e:	cmp	r2, #15
    ba80:	ble.n	ba68 <_malloc_r+0x100>
    ba82:	mov	r4, r1
    ba84:	ldr.w	ip, [r1, #12]
    ba88:	ldr.w	r8, [r4, #8]!
    ba8c:	adds	r3, r1, r5
    ba8e:	orr.w	r5, r5, #1
    ba92:	str	r5, [r1, #4]
    ba94:	orr.w	r1, r2, #1
    ba98:	str.w	ip, [r8, #12]
    ba9c:	mov	r0, r6
    ba9e:	str.w	r8, [ip, #8]
    baa2:	str	r3, [r7, #20]
    baa4:	str	r3, [r7, #16]
    baa6:	str.w	lr, [r3, #12]
    baaa:	str.w	lr, [r3, #8]
    baae:	str	r1, [r3, #4]
    bab0:	str	r2, [r3, r2]
    bab2:	bl	c17c <__malloc_unlock>
    bab6:	b.n	baf8 <_malloc_r+0x190>
    bab8:	cmp	r1, #16
    baba:	bhi.n	bb00 <_malloc_r+0x198>
    babc:	bl	c178 <__malloc_lock>
    bac0:	movs	r5, #16
    bac2:	movs	r3, #6
    bac4:	movs	r0, #2
    bac6:	ldr	r7, [pc, #504]	; (bcc0 <_malloc_r+0x358>)
    bac8:	add.w	r3, r7, r3, lsl #2
    bacc:	sub.w	r2, r3, #8
    bad0:	ldr	r4, [r3, #4]
    bad2:	cmp	r4, r2
    bad4:	beq.w	bd62 <_malloc_r+0x3fa>
    bad8:	ldr	r3, [r4, #4]
    bada:	ldr	r1, [r4, #12]
    badc:	ldr	r5, [r4, #8]
    bade:	bic.w	r3, r3, #3
    bae2:	add	r3, r4
    bae4:	mov	r0, r6
    bae6:	ldr	r2, [r3, #4]
    bae8:	str	r1, [r5, #12]
    baea:	orr.w	r2, r2, #1
    baee:	str	r5, [r1, #8]
    baf0:	str	r2, [r3, #4]
    baf2:	bl	c17c <__malloc_unlock>
    baf6:	adds	r4, #8
    baf8:	mov	r0, r4
    bafa:	add	sp, #12
    bafc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb00:	movs	r4, #0
    bb02:	movs	r3, #12
    bb04:	mov	r0, r4
    bb06:	str	r3, [r6, #0]
    bb08:	add	sp, #12
    bb0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb0e:	movs	r3, #128	; 0x80
    bb10:	mov.w	lr, #64	; 0x40
    bb14:	movs	r0, #63	; 0x3f
    bb16:	b.n	b9ac <_malloc_r+0x44>
    bb18:	mov	r0, lr
    bb1a:	b.n	b9d8 <_malloc_r+0x70>
    bb1c:	add	r3, r4
    bb1e:	ldr	r1, [r4, #12]
    bb20:	ldr	r2, [r3, #4]
    bb22:	ldr	r5, [r4, #8]
    bb24:	orr.w	r2, r2, #1
    bb28:	str	r1, [r5, #12]
    bb2a:	mov	r0, r6
    bb2c:	str	r5, [r1, #8]
    bb2e:	str	r2, [r3, #4]
    bb30:	bl	c17c <__malloc_unlock>
    bb34:	adds	r4, #8
    bb36:	mov	r0, r4
    bb38:	add	sp, #12
    bb3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb3e:	add	r3, r4
    bb40:	mov	r0, r6
    bb42:	ldr	r2, [r3, #4]
    bb44:	orr.w	r2, r2, #1
    bb48:	str	r2, [r3, #4]
    bb4a:	bl	c17c <__malloc_unlock>
    bb4e:	adds	r4, #8
    bb50:	mov	r0, r4
    bb52:	add	sp, #12
    bb54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb58:	ldr	r4, [r7, #8]
    bb5a:	ldr	r3, [r4, #4]
    bb5c:	bic.w	r8, r3, #3
    bb60:	cmp	r8, r5
    bb62:	bcc.n	bb6e <_malloc_r+0x206>
    bb64:	rsb	r3, r5, r8
    bb68:	cmp	r3, #15
    bb6a:	bgt.w	bc86 <_malloc_r+0x31e>
    bb6e:	ldr	r3, [pc, #340]	; (bcc4 <_malloc_r+0x35c>)
    bb70:	ldr.w	r9, [pc, #352]	; bcd4 <_malloc_r+0x36c>
    bb74:	ldr	r2, [r3, #0]
    bb76:	ldr.w	r3, [r9]
    bb7a:	adds	r3, #1
    bb7c:	add	r2, r5
    bb7e:	add.w	sl, r4, r8
    bb82:	beq.w	be46 <_malloc_r+0x4de>
    bb86:	add.w	r2, r2, #4096	; 0x1000
    bb8a:	adds	r2, #15
    bb8c:	bic.w	r2, r2, #4080	; 0xff0
    bb90:	bic.w	r2, r2, #15
    bb94:	mov	r1, r2
    bb96:	mov	r0, r6
    bb98:	str	r2, [sp, #4]
    bb9a:	bl	c560 <_sbrk_r>
    bb9e:	cmp.w	r0, #4294967295
    bba2:	mov	fp, r0
    bba4:	ldr	r2, [sp, #4]
    bba6:	beq.w	be5a <_malloc_r+0x4f2>
    bbaa:	cmp	sl, r0
    bbac:	bhi.w	bda8 <_malloc_r+0x440>
    bbb0:	ldr	r3, [pc, #276]	; (bcc8 <_malloc_r+0x360>)
    bbb2:	ldr	r1, [r3, #0]
    bbb4:	cmp	sl, fp
    bbb6:	add	r1, r2
    bbb8:	str	r1, [r3, #0]
    bbba:	beq.w	be64 <_malloc_r+0x4fc>
    bbbe:	ldr.w	r0, [r9]
    bbc2:	ldr.w	lr, [pc, #272]	; bcd4 <_malloc_r+0x36c>
    bbc6:	adds	r0, #1
    bbc8:	ittet	ne
    bbca:	rsbne	sl, sl, fp
    bbce:	addne	r1, sl
    bbd0:	streq.w	fp, [lr]
    bbd4:	strne	r1, [r3, #0]
    bbd6:	ands.w	r1, fp, #7
    bbda:	beq.w	be0c <_malloc_r+0x4a4>
    bbde:	rsb	r0, r1, #8
    bbe2:	rsb	r1, r1, #4096	; 0x1000
    bbe6:	add	fp, r0
    bbe8:	adds	r1, #8
    bbea:	add	r2, fp
    bbec:	ubfx	r2, r2, #0, #12
    bbf0:	rsb	r9, r2, r1
    bbf4:	mov	r1, r9
    bbf6:	mov	r0, r6
    bbf8:	str	r3, [sp, #4]
    bbfa:	bl	c560 <_sbrk_r>
    bbfe:	adds	r3, r0, #1
    bc00:	ldr	r3, [sp, #4]
    bc02:	beq.w	be84 <_malloc_r+0x51c>
    bc06:	rsb	r2, fp, r0
    bc0a:	add	r2, r9
    bc0c:	orr.w	r2, r2, #1
    bc10:	ldr	r1, [r3, #0]
    bc12:	str.w	fp, [r7, #8]
    bc16:	add	r1, r9
    bc18:	cmp	r4, r7
    bc1a:	str.w	r2, [fp, #4]
    bc1e:	str	r1, [r3, #0]
    bc20:	ldr.w	r9, [pc, #164]	; bcc8 <_malloc_r+0x360>
    bc24:	beq.n	bc54 <_malloc_r+0x2ec>
    bc26:	cmp.w	r8, #15
    bc2a:	bls.w	be28 <_malloc_r+0x4c0>
    bc2e:	ldr	r2, [r4, #4]
    bc30:	sub.w	r3, r8, #12
    bc34:	bic.w	r3, r3, #7
    bc38:	adds	r0, r4, r3
    bc3a:	and.w	r2, r2, #1
    bc3e:	mov.w	lr, #5
    bc42:	orrs	r2, r3
    bc44:	cmp	r3, #15
    bc46:	str	r2, [r4, #4]
    bc48:	str.w	lr, [r0, #4]
    bc4c:	str.w	lr, [r0, #8]
    bc50:	bhi.w	be8c <_malloc_r+0x524>
    bc54:	ldr	r3, [pc, #116]	; (bccc <_malloc_r+0x364>)
    bc56:	ldr	r4, [r7, #8]
    bc58:	ldr	r2, [r3, #0]
    bc5a:	cmp	r1, r2
    bc5c:	it	hi
    bc5e:	strhi	r1, [r3, #0]
    bc60:	ldr	r3, [pc, #108]	; (bcd0 <_malloc_r+0x368>)
    bc62:	ldr	r2, [r3, #0]
    bc64:	cmp	r1, r2
    bc66:	ldr	r2, [r4, #4]
    bc68:	it	hi
    bc6a:	strhi	r1, [r3, #0]
    bc6c:	bic.w	r2, r2, #3
    bc70:	cmp	r5, r2
    bc72:	sub.w	r3, r2, r5
    bc76:	bhi.n	bc7c <_malloc_r+0x314>
    bc78:	cmp	r3, #15
    bc7a:	bgt.n	bc86 <_malloc_r+0x31e>
    bc7c:	mov	r0, r6
    bc7e:	bl	c17c <__malloc_unlock>
    bc82:	movs	r4, #0
    bc84:	b.n	baf8 <_malloc_r+0x190>
    bc86:	adds	r2, r4, r5
    bc88:	orr.w	r3, r3, #1
    bc8c:	orr.w	r5, r5, #1
    bc90:	str	r5, [r4, #4]
    bc92:	mov	r0, r6
    bc94:	str	r2, [r7, #8]
    bc96:	str	r3, [r2, #4]
    bc98:	bl	c17c <__malloc_unlock>
    bc9c:	adds	r4, #8
    bc9e:	mov	r0, r4
    bca0:	add	sp, #12
    bca2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bca6:	cmp	r3, #20
    bca8:	bls.n	bd8e <_malloc_r+0x426>
    bcaa:	cmp	r3, #84	; 0x54
    bcac:	bhi.w	bdf8 <_malloc_r+0x490>
    bcb0:	lsrs	r0, r5, #12
    bcb2:	add.w	lr, r0, #111	; 0x6f
    bcb6:	mov.w	r3, lr, lsl #1
    bcba:	adds	r0, #110	; 0x6e
    bcbc:	b.n	b9ac <_malloc_r+0x44>
    bcbe:	nop
    bcc0:	.word	0x20017570
    bcc4:	.word	0x2001cdfc
    bcc8:	.word	0x2001ce00
    bccc:	.word	0x2001cdf8
    bcd0:	.word	0x2001cdf4
    bcd4:	.word	0x2001797c
    bcd8:	lsrs	r2, r3, #9
    bcda:	cmp	r2, #4
    bcdc:	bls.n	bd9c <_malloc_r+0x434>
    bcde:	cmp	r2, #20
    bce0:	bhi.w	be4a <_malloc_r+0x4e2>
    bce4:	add.w	r1, r2, #92	; 0x5c
    bce8:	lsls	r1, r1, #1
    bcea:	adds	r2, #91	; 0x5b
    bcec:	add.w	ip, r7, r1, lsl #2
    bcf0:	ldr.w	r1, [r7, r1, lsl #2]
    bcf4:	ldr.w	r8, [pc, #476]	; bed4 <_malloc_r+0x56c>
    bcf8:	sub.w	ip, ip, #8
    bcfc:	cmp	ip, r1
    bcfe:	beq.w	be12 <_malloc_r+0x4aa>
    bd02:	ldr	r2, [r1, #4]
    bd04:	bic.w	r2, r2, #3
    bd08:	cmp	r3, r2
    bd0a:	bcs.n	bd12 <_malloc_r+0x3aa>
    bd0c:	ldr	r1, [r1, #8]
    bd0e:	cmp	ip, r1
    bd10:	bne.n	bd02 <_malloc_r+0x39a>
    bd12:	ldr.w	ip, [r1, #12]
    bd16:	ldr	r2, [r7, #4]
    bd18:	str.w	ip, [r4, #12]
    bd1c:	str	r1, [r4, #8]
    bd1e:	str.w	r4, [ip, #8]
    bd22:	str	r4, [r1, #12]
    bd24:	b.n	ba38 <_malloc_r+0xd0>
    bd26:	adds	r3, r4, r5
    bd28:	orr.w	r7, r2, #1
    bd2c:	orr.w	r5, r5, #1
    bd30:	str	r5, [r4, #4]
    bd32:	mov	r0, r6
    bd34:	str	r3, [r1, #20]
    bd36:	str	r3, [r1, #16]
    bd38:	str.w	lr, [r3, #12]
    bd3c:	str.w	lr, [r3, #8]
    bd40:	str	r7, [r3, #4]
    bd42:	str	r2, [r3, r2]
    bd44:	adds	r4, #8
    bd46:	bl	c17c <__malloc_unlock>
    bd4a:	b.n	baf8 <_malloc_r+0x190>
    bd4c:	ldr	r2, [r1, #4]
    bd4e:	b.n	ba38 <_malloc_r+0xd0>
    bd50:	add.w	r8, r8, #1
    bd54:	tst.w	r8, #3
    bd58:	add.w	ip, ip, #8
    bd5c:	bne.w	ba5e <_malloc_r+0xf6>
    bd60:	b.n	bdc4 <_malloc_r+0x45c>
    bd62:	ldr	r4, [r3, #12]
    bd64:	cmp	r3, r4
    bd66:	it	eq
    bd68:	addeq	r0, #2
    bd6a:	beq.w	b9d8 <_malloc_r+0x70>
    bd6e:	b.n	bad8 <_malloc_r+0x170>
    bd70:	add	r3, r1
    bd72:	mov	r4, r1
    bd74:	ldr	r2, [r3, #4]
    bd76:	ldr	r1, [r1, #12]
    bd78:	ldr.w	r5, [r4, #8]!
    bd7c:	orr.w	r2, r2, #1
    bd80:	str	r2, [r3, #4]
    bd82:	mov	r0, r6
    bd84:	str	r1, [r5, #12]
    bd86:	str	r5, [r1, #8]
    bd88:	bl	c17c <__malloc_unlock>
    bd8c:	b.n	baf8 <_malloc_r+0x190>
    bd8e:	add.w	lr, r3, #92	; 0x5c
    bd92:	add.w	r0, r3, #91	; 0x5b
    bd96:	mov.w	r3, lr, lsl #1
    bd9a:	b.n	b9ac <_malloc_r+0x44>
    bd9c:	lsrs	r2, r3, #6
    bd9e:	add.w	r1, r2, #57	; 0x39
    bda2:	lsls	r1, r1, #1
    bda4:	adds	r2, #56	; 0x38
    bda6:	b.n	bcec <_malloc_r+0x384>
    bda8:	cmp	r4, r7
    bdaa:	ldr	r3, [pc, #296]	; (bed4 <_malloc_r+0x56c>)
    bdac:	beq.w	bbb0 <_malloc_r+0x248>
    bdb0:	ldr	r4, [r3, #8]
    bdb2:	ldr	r2, [r4, #4]
    bdb4:	bic.w	r2, r2, #3
    bdb8:	b.n	bc70 <_malloc_r+0x308>
    bdba:	ldr.w	r3, [r9], #-8
    bdbe:	cmp	r9, r3
    bdc0:	bne.w	bec8 <_malloc_r+0x560>
    bdc4:	tst.w	r0, #3
    bdc8:	add.w	r0, r0, #4294967295
    bdcc:	bne.n	bdba <_malloc_r+0x452>
    bdce:	ldr	r3, [r7, #4]
    bdd0:	bic.w	r3, r3, r4
    bdd4:	str	r3, [r7, #4]
    bdd6:	lsls	r4, r4, #1
    bdd8:	cmp	r4, r3
    bdda:	bhi.w	bb58 <_malloc_r+0x1f0>
    bdde:	cmp	r4, #0
    bde0:	beq.w	bb58 <_malloc_r+0x1f0>
    bde4:	tst	r4, r3
    bde6:	mov	r0, r8
    bde8:	bne.w	ba56 <_malloc_r+0xee>
    bdec:	lsls	r4, r4, #1
    bdee:	tst	r4, r3
    bdf0:	add.w	r0, r0, #4
    bdf4:	beq.n	bdec <_malloc_r+0x484>
    bdf6:	b.n	ba56 <_malloc_r+0xee>
    bdf8:	cmp.w	r3, #340	; 0x154
    bdfc:	bhi.n	be30 <_malloc_r+0x4c8>
    bdfe:	lsrs	r0, r5, #15
    be00:	add.w	lr, r0, #120	; 0x78
    be04:	mov.w	r3, lr, lsl #1
    be08:	adds	r0, #119	; 0x77
    be0a:	b.n	b9ac <_malloc_r+0x44>
    be0c:	mov.w	r1, #4096	; 0x1000
    be10:	b.n	bbea <_malloc_r+0x282>
    be12:	movs	r1, #1
    be14:	ldr.w	r3, [r8, #4]
    be18:	asrs	r2, r2, #2
    be1a:	lsl.w	r2, r1, r2
    be1e:	orrs	r2, r3
    be20:	str.w	r2, [r8, #4]
    be24:	mov	r1, ip
    be26:	b.n	bd18 <_malloc_r+0x3b0>
    be28:	movs	r3, #1
    be2a:	str.w	r3, [fp, #4]
    be2e:	b.n	bc7c <_malloc_r+0x314>
    be30:	movw	r2, #1364	; 0x554
    be34:	cmp	r3, r2
    be36:	bhi.n	be7a <_malloc_r+0x512>
    be38:	lsrs	r0, r5, #18
    be3a:	add.w	lr, r0, #125	; 0x7d
    be3e:	mov.w	r3, lr, lsl #1
    be42:	adds	r0, #124	; 0x7c
    be44:	b.n	b9ac <_malloc_r+0x44>
    be46:	adds	r2, #16
    be48:	b.n	bb94 <_malloc_r+0x22c>
    be4a:	cmp	r2, #84	; 0x54
    be4c:	bhi.n	be9c <_malloc_r+0x534>
    be4e:	lsrs	r2, r3, #12
    be50:	add.w	r1, r2, #111	; 0x6f
    be54:	lsls	r1, r1, #1
    be56:	adds	r2, #110	; 0x6e
    be58:	b.n	bcec <_malloc_r+0x384>
    be5a:	ldr	r4, [r7, #8]
    be5c:	ldr	r2, [r4, #4]
    be5e:	bic.w	r2, r2, #3
    be62:	b.n	bc70 <_malloc_r+0x308>
    be64:	ubfx	r0, sl, #0, #12
    be68:	cmp	r0, #0
    be6a:	bne.w	bbbe <_malloc_r+0x256>
    be6e:	add	r2, r8
    be70:	ldr	r3, [r7, #8]
    be72:	orr.w	r2, r2, #1
    be76:	str	r2, [r3, #4]
    be78:	b.n	bc54 <_malloc_r+0x2ec>
    be7a:	movs	r3, #254	; 0xfe
    be7c:	mov.w	lr, #127	; 0x7f
    be80:	movs	r0, #126	; 0x7e
    be82:	b.n	b9ac <_malloc_r+0x44>
    be84:	movs	r2, #1
    be86:	mov.w	r9, #0
    be8a:	b.n	bc10 <_malloc_r+0x2a8>
    be8c:	add.w	r1, r4, #8
    be90:	mov	r0, r6
    be92:	bl	110d0 <_free_r>
    be96:	ldr.w	r1, [r9]
    be9a:	b.n	bc54 <_malloc_r+0x2ec>
    be9c:	cmp.w	r2, #340	; 0x154
    bea0:	bhi.n	beae <_malloc_r+0x546>
    bea2:	lsrs	r2, r3, #15
    bea4:	add.w	r1, r2, #120	; 0x78
    bea8:	lsls	r1, r1, #1
    beaa:	adds	r2, #119	; 0x77
    beac:	b.n	bcec <_malloc_r+0x384>
    beae:	movw	r1, #1364	; 0x554
    beb2:	cmp	r2, r1
    beb4:	bhi.n	bec2 <_malloc_r+0x55a>
    beb6:	lsrs	r2, r3, #18
    beb8:	add.w	r1, r2, #125	; 0x7d
    bebc:	lsls	r1, r1, #1
    bebe:	adds	r2, #124	; 0x7c
    bec0:	b.n	bcec <_malloc_r+0x384>
    bec2:	movs	r1, #254	; 0xfe
    bec4:	movs	r2, #126	; 0x7e
    bec6:	b.n	bcec <_malloc_r+0x384>
    bec8:	ldr	r3, [r7, #4]
    beca:	b.n	bdd6 <_malloc_r+0x46e>
    becc:	lsrs	r0, r5, #3
    bece:	adds	r3, r0, #1
    bed0:	lsls	r3, r3, #1
    bed2:	b.n	bac6 <_malloc_r+0x15e>
    bed4:	.word	0x20017570

0000bed8 <__ascii_mbtowc>:
    bed8:	sub	sp, #8
    beda:	cbz	r1, bef0 <__ascii_mbtowc+0x18>
    bedc:	cbz	r2, bef6 <__ascii_mbtowc+0x1e>
    bede:	cbz	r3, befc <__ascii_mbtowc+0x24>
    bee0:	ldrb	r3, [r2, #0]
    bee2:	str	r3, [r1, #0]
    bee4:	ldrb	r2, [r2, #0]
    bee6:	adds	r0, r2, #0
    bee8:	it	ne
    beea:	movne	r0, #1
    beec:	add	sp, #8
    beee:	bx	lr
    bef0:	add	r1, sp, #4
    bef2:	cmp	r2, #0
    bef4:	bne.n	bede <__ascii_mbtowc+0x6>
    bef6:	mov	r0, r2
    bef8:	add	sp, #8
    befa:	bx	lr
    befc:	mvn.w	r0, #1
    bf00:	b.n	beec <__ascii_mbtowc+0x14>
    bf02:	nop
    bf04:			; <UNDEFINED> instruction: 0xffffffff
    bf08:			; <UNDEFINED> instruction: 0xffffffff
    bf0c:			; <UNDEFINED> instruction: 0xffffffff

0000bf10 <memchr>:
    bf10:	and.w	r1, r1, #255	; 0xff
    bf14:	cmp	r2, #16
    bf16:	blt.n	bf70 <memchr+0x60>
    bf18:	tst.w	r0, #7
    bf1c:	beq.n	bf30 <memchr+0x20>
    bf1e:	ldrb.w	r3, [r0], #1
    bf22:	subs	r2, #1
    bf24:	cmp	r3, r1
    bf26:	beq.n	bf84 <memchr+0x74>
    bf28:	tst.w	r0, #7
    bf2c:	cbz	r2, bf80 <memchr+0x70>
    bf2e:	bne.n	bf1e <memchr+0xe>
    bf30:	push	{r4, r5, r6, r7}
    bf32:	orr.w	r1, r1, r1, lsl #8
    bf36:	orr.w	r1, r1, r1, lsl #16
    bf3a:	bic.w	r4, r2, #7
    bf3e:	mvns.w	r7, #0
    bf42:	movs	r3, #0
    bf44:	ldrd	r5, r6, [r0], #8
    bf48:	subs	r4, #8
    bf4a:	eor.w	r5, r5, r1
    bf4e:	eor.w	r6, r6, r1
    bf52:	uadd8	r5, r5, r7
    bf56:	sel	r5, r3, r7
    bf5a:	uadd8	r6, r6, r7
    bf5e:	sel	r6, r5, r7
    bf62:	cbnz	r6, bf88 <memchr+0x78>
    bf64:	bne.n	bf44 <memchr+0x34>
    bf66:	pop	{r4, r5, r6, r7}
    bf68:	and.w	r1, r1, #255	; 0xff
    bf6c:	and.w	r2, r2, #7
    bf70:	cbz	r2, bf80 <memchr+0x70>
    bf72:	ldrb.w	r3, [r0], #1
    bf76:	subs	r2, #1
    bf78:	eor.w	r3, r3, r1
    bf7c:	cbz	r3, bf84 <memchr+0x74>
    bf7e:	bne.n	bf72 <memchr+0x62>
    bf80:	movs	r0, #0
    bf82:	bx	lr
    bf84:	subs	r0, #1
    bf86:	bx	lr
    bf88:	cmp	r5, #0
    bf8a:	itte	eq
    bf8c:	moveq	r5, r6
    bf8e:	subeq	r0, #3
    bf90:	subne	r0, #7
    bf92:	tst.w	r5, #1
    bf96:	bne.n	bfa8 <memchr+0x98>
    bf98:	adds	r0, #1
    bf9a:	tst.w	r5, #256	; 0x100
    bf9e:	ittt	eq
    bfa0:	addeq	r0, #1
    bfa2:	tsteq.w	r5, #98304	; 0x18000
    bfa6:	addeq	r0, #1
    bfa8:	pop	{r4, r5, r6, r7}
    bfaa:	subs	r0, #1
    bfac:	bx	lr
    bfae:	nop

0000bfb0 <memcmp>:
    bfb0:	cmp	r2, #3
    bfb2:	push	{r4, r5, r6}
    bfb4:	bls.n	c004 <memcmp+0x54>
    bfb6:	orr.w	r3, r0, r1
    bfba:	lsls	r3, r3, #30
    bfbc:	beq.n	bfe2 <memcmp+0x32>
    bfbe:	ldrb	r4, [r0, #0]
    bfc0:	ldrb	r5, [r1, #0]
    bfc2:	cmp	r4, r5
    bfc4:	bne.n	c00c <memcmp+0x5c>
    bfc6:	add	r2, r0
    bfc8:	adds	r3, r0, #1
    bfca:	b.n	bfd8 <memcmp+0x28>
    bfcc:	ldrb.w	r4, [r3], #1
    bfd0:	ldrb.w	r5, [r1, #1]!
    bfd4:	cmp	r4, r5
    bfd6:	bne.n	c00c <memcmp+0x5c>
    bfd8:	cmp	r3, r2
    bfda:	bne.n	bfcc <memcmp+0x1c>
    bfdc:	movs	r0, #0
    bfde:	pop	{r4, r5, r6}
    bfe0:	bx	lr
    bfe2:	mov	r4, r1
    bfe4:	mov	r3, r0
    bfe6:	ldr	r6, [r3, #0]
    bfe8:	ldr	r5, [r4, #0]
    bfea:	cmp	r6, r5
    bfec:	mov	r0, r3
    bfee:	mov	r1, r4
    bff0:	add.w	r3, r3, #4
    bff4:	add.w	r4, r4, #4
    bff8:	bne.n	bfbe <memcmp+0xe>
    bffa:	subs	r2, #4
    bffc:	cmp	r2, #3
    bffe:	mov	r0, r3
    c000:	mov	r1, r4
    c002:	bhi.n	bfe6 <memcmp+0x36>
    c004:	cmp	r2, #0
    c006:	bne.n	bfbe <memcmp+0xe>
    c008:	mov	r0, r2
    c00a:	b.n	bfde <memcmp+0x2e>
    c00c:	subs	r0, r4, r5
    c00e:	pop	{r4, r5, r6}
    c010:	bx	lr
    c012:	nop

0000c014 <memmove>:
    c014:	cmp	r0, r1
    c016:	push	{r4, r5, r6, r7, lr}
    c018:	bls.n	c036 <memmove+0x22>
    c01a:	adds	r3, r1, r2
    c01c:	cmp	r0, r3
    c01e:	bcs.n	c036 <memmove+0x22>
    c020:	adds	r1, r0, r2
    c022:	cmp	r2, #0
    c024:	beq.n	c0ca <memmove+0xb6>
    c026:	subs	r2, r3, r2
    c028:	ldrb.w	r4, [r3, #-1]!
    c02c:	strb.w	r4, [r1, #-1]!
    c030:	cmp	r3, r2
    c032:	bne.n	c028 <memmove+0x14>
    c034:	pop	{r4, r5, r6, r7, pc}
    c036:	cmp	r2, #15
    c038:	bls.n	c0cc <memmove+0xb8>
    c03a:	orr.w	r3, r1, r0
    c03e:	lsls	r3, r3, #30
    c040:	bne.n	c0d0 <memmove+0xbc>
    c042:	add.w	r4, r0, #16
    c046:	add.w	r3, r1, #16
    c04a:	mov	r5, r2
    c04c:	ldr.w	r6, [r3, #-16]
    c050:	str.w	r6, [r4, #-16]
    c054:	ldr.w	r6, [r3, #-12]
    c058:	str.w	r6, [r4, #-12]
    c05c:	ldr.w	r6, [r3, #-8]
    c060:	str.w	r6, [r4, #-8]
    c064:	subs	r5, #16
    c066:	ldr.w	r6, [r3, #-4]
    c06a:	str.w	r6, [r4, #-4]
    c06e:	cmp	r5, #15
    c070:	add.w	r3, r3, #16
    c074:	add.w	r4, r4, #16
    c078:	bhi.n	c04c <memmove+0x38>
    c07a:	sub.w	r3, r2, #16
    c07e:	bic.w	r3, r3, #15
    c082:	and.w	lr, r2, #15
    c086:	adds	r3, #16
    c088:	cmp.w	lr, #3
    c08c:	add	r1, r3
    c08e:	add	r3, r0
    c090:	bls.n	c0d6 <memmove+0xc2>
    c092:	subs	r6, r3, #4
    c094:	mov	r5, r1
    c096:	mov	r4, lr
    c098:	subs	r4, #4
    c09a:	ldr.w	r7, [r5], #4
    c09e:	str.w	r7, [r6, #4]!
    c0a2:	cmp	r4, #3
    c0a4:	bhi.n	c098 <memmove+0x84>
    c0a6:	sub.w	r4, lr, #4
    c0aa:	bic.w	r4, r4, #3
    c0ae:	adds	r4, #4
    c0b0:	add	r3, r4
    c0b2:	add	r1, r4
    c0b4:	and.w	r2, r2, #3
    c0b8:	cbz	r2, c0d4 <memmove+0xc0>
    c0ba:	subs	r3, #1
    c0bc:	add	r2, r1
    c0be:	ldrb.w	r4, [r1], #1
    c0c2:	strb.w	r4, [r3, #1]!
    c0c6:	cmp	r2, r1
    c0c8:	bne.n	c0be <memmove+0xaa>
    c0ca:	pop	{r4, r5, r6, r7, pc}
    c0cc:	mov	r3, r0
    c0ce:	b.n	c0b8 <memmove+0xa4>
    c0d0:	mov	r3, r0
    c0d2:	b.n	c0ba <memmove+0xa6>
    c0d4:	pop	{r4, r5, r6, r7, pc}
    c0d6:	mov	r2, lr
    c0d8:	b.n	c0b8 <memmove+0xa4>
    c0da:	nop

0000c0dc <memset>:
    c0dc:	push	{r4, r5, r6}
    c0de:	lsls	r4, r0, #30
    c0e0:	beq.n	c170 <memset+0x94>
    c0e2:	subs	r4, r2, #1
    c0e4:	cmp	r2, #0
    c0e6:	beq.n	c16c <memset+0x90>
    c0e8:	uxtb	r5, r1
    c0ea:	mov	r3, r0
    c0ec:	b.n	c0f4 <memset+0x18>
    c0ee:	subs	r2, r4, #1
    c0f0:	cbz	r4, c16c <memset+0x90>
    c0f2:	mov	r4, r2
    c0f4:	strb.w	r5, [r3], #1
    c0f8:	lsls	r2, r3, #30
    c0fa:	bne.n	c0ee <memset+0x12>
    c0fc:	cmp	r4, #3
    c0fe:	bls.n	c15e <memset+0x82>
    c100:	uxtb	r5, r1
    c102:	orr.w	r5, r5, r5, lsl #8
    c106:	cmp	r4, #15
    c108:	orr.w	r5, r5, r5, lsl #16
    c10c:	bls.n	c142 <memset+0x66>
    c10e:	add.w	r2, r3, #16
    c112:	mov	r6, r4
    c114:	subs	r6, #16
    c116:	cmp	r6, #15
    c118:	str.w	r5, [r2, #-16]
    c11c:	str.w	r5, [r2, #-12]
    c120:	str.w	r5, [r2, #-8]
    c124:	str.w	r5, [r2, #-4]
    c128:	add.w	r2, r2, #16
    c12c:	bhi.n	c114 <memset+0x38>
    c12e:	sub.w	r2, r4, #16
    c132:	bic.w	r2, r2, #15
    c136:	and.w	r4, r4, #15
    c13a:	adds	r2, #16
    c13c:	cmp	r4, #3
    c13e:	add	r3, r2
    c140:	bls.n	c15e <memset+0x82>
    c142:	mov	r6, r3
    c144:	mov	r2, r4
    c146:	subs	r2, #4
    c148:	cmp	r2, #3
    c14a:	str.w	r5, [r6], #4
    c14e:	bhi.n	c146 <memset+0x6a>
    c150:	subs	r2, r4, #4
    c152:	bic.w	r2, r2, #3
    c156:	adds	r2, #4
    c158:	add	r3, r2
    c15a:	and.w	r4, r4, #3
    c15e:	cbz	r4, c16c <memset+0x90>
    c160:	uxtb	r1, r1
    c162:	add	r4, r3
    c164:	strb.w	r1, [r3], #1
    c168:	cmp	r3, r4
    c16a:	bne.n	c164 <memset+0x88>
    c16c:	pop	{r4, r5, r6}
    c16e:	bx	lr
    c170:	mov	r4, r2
    c172:	mov	r3, r0
    c174:	b.n	c0fc <memset+0x20>
    c176:	nop

0000c178 <__malloc_lock>:
    c178:	bx	lr
    c17a:	nop

0000c17c <__malloc_unlock>:
    c17c:	bx	lr
    c17e:	nop

0000c180 <_realloc_r>:
    c180:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c184:	mov	r7, r2
    c186:	sub	sp, #12
    c188:	cmp	r1, #0
    c18a:	beq.w	c310 <_realloc_r+0x190>
    c18e:	mov	r6, r1
    c190:	mov	r9, r0
    c192:	add.w	r5, r7, #11
    c196:	bl	c178 <__malloc_lock>
    c19a:	ldr.w	lr, [r6, #-4]
    c19e:	cmp	r5, #22
    c1a0:	bic.w	r4, lr, #3
    c1a4:	sub.w	r8, r6, #8
    c1a8:	bhi.n	c22c <_realloc_r+0xac>
    c1aa:	movs	r2, #16
    c1ac:	mov	r5, r2
    c1ae:	cmp	r7, r5
    c1b0:	bhi.n	c236 <_realloc_r+0xb6>
    c1b2:	cmp	r4, r2
    c1b4:	bge.n	c2a2 <_realloc_r+0x122>
    c1b6:	ldr	r3, [pc, #804]	; (c4dc <_realloc_r+0x35c>)
    c1b8:	ldr	r1, [r3, #8]
    c1ba:	add.w	r0, r8, r4
    c1be:	cmp	r0, r1
    c1c0:	ldr	r1, [r0, #4]
    c1c2:	beq.w	c378 <_realloc_r+0x1f8>
    c1c6:	bic.w	r3, r1, #1
    c1ca:	add	r3, r0
    c1cc:	ldr	r3, [r3, #4]
    c1ce:	lsls	r3, r3, #31
    c1d0:	bpl.n	c2ce <_realloc_r+0x14e>
    c1d2:	tst.w	lr, #1
    c1d6:	beq.n	c244 <_realloc_r+0xc4>
    c1d8:	mov	r1, r7
    c1da:	mov	r0, r9
    c1dc:	bl	b968 <_malloc_r>
    c1e0:	mov	r7, r0
    c1e2:	cbz	r0, c21e <_realloc_r+0x9e>
    c1e4:	ldr.w	r3, [r6, #-4]
    c1e8:	bic.w	r3, r3, #1
    c1ec:	add	r3, r8
    c1ee:	sub.w	r2, r0, #8
    c1f2:	cmp	r2, r3
    c1f4:	beq.w	c480 <_realloc_r+0x300>
    c1f8:	subs	r2, r4, #4
    c1fa:	cmp	r2, #36	; 0x24
    c1fc:	bhi.w	c462 <_realloc_r+0x2e2>
    c200:	cmp	r2, #19
    c202:	bhi.w	c40e <_realloc_r+0x28e>
    c206:	mov	r3, r0
    c208:	mov	r2, r6
    c20a:	ldr	r1, [r2, #0]
    c20c:	str	r1, [r3, #0]
    c20e:	ldr	r1, [r2, #4]
    c210:	str	r1, [r3, #4]
    c212:	ldr	r2, [r2, #8]
    c214:	str	r2, [r3, #8]
    c216:	mov	r1, r6
    c218:	mov	r0, r9
    c21a:	bl	110d0 <_free_r>
    c21e:	mov	r0, r9
    c220:	bl	c17c <__malloc_unlock>
    c224:	mov	r0, r7
    c226:	add	sp, #12
    c228:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c22c:	bic.w	r5, r5, #7
    c230:	cmp	r5, #0
    c232:	mov	r2, r5
    c234:	bge.n	c1ae <_realloc_r+0x2e>
    c236:	movs	r3, #12
    c238:	movs	r0, #0
    c23a:	str.w	r3, [r9]
    c23e:	add	sp, #12
    c240:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c244:	ldr.w	r3, [r6, #-8]
    c248:	rsb	sl, r3, r8
    c24c:	ldr.w	r3, [sl, #4]
    c250:	bic.w	ip, r3, #3
    c254:	add.w	r3, r4, ip
    c258:	cmp	r3, r2
    c25a:	blt.n	c1d8 <_realloc_r+0x58>
    c25c:	mov	r7, sl
    c25e:	ldr.w	r1, [sl, #12]
    c262:	ldr.w	r0, [r7, #8]!
    c266:	subs	r2, r4, #4
    c268:	cmp	r2, #36	; 0x24
    c26a:	str	r1, [r0, #12]
    c26c:	str	r0, [r1, #8]
    c26e:	bhi.w	c4a0 <_realloc_r+0x320>
    c272:	cmp	r2, #19
    c274:	bls.w	c49c <_realloc_r+0x31c>
    c278:	ldr	r1, [r6, #0]
    c27a:	str.w	r1, [sl, #8]
    c27e:	ldr	r1, [r6, #4]
    c280:	str.w	r1, [sl, #12]
    c284:	cmp	r2, #27
    c286:	bhi.w	c4e0 <_realloc_r+0x360>
    c28a:	adds	r6, #8
    c28c:	add.w	r2, sl, #16
    c290:	ldr	r1, [r6, #0]
    c292:	str	r1, [r2, #0]
    c294:	ldr	r1, [r6, #4]
    c296:	str	r1, [r2, #4]
    c298:	ldr	r1, [r6, #8]
    c29a:	str	r1, [r2, #8]
    c29c:	mov	r6, r7
    c29e:	mov	r4, r3
    c2a0:	mov	r8, sl
    c2a2:	subs	r3, r4, r5
    c2a4:	cmp	r3, #15
    c2a6:	bhi.n	c2e4 <_realloc_r+0x164>
    c2a8:	ldr.w	r3, [r8, #4]
    c2ac:	and.w	r3, r3, #1
    c2b0:	orrs	r3, r4
    c2b2:	add	r4, r8
    c2b4:	str.w	r3, [r8, #4]
    c2b8:	ldr	r3, [r4, #4]
    c2ba:	orr.w	r3, r3, #1
    c2be:	str	r3, [r4, #4]
    c2c0:	mov	r0, r9
    c2c2:	bl	c17c <__malloc_unlock>
    c2c6:	mov	r0, r6
    c2c8:	add	sp, #12
    c2ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c2ce:	bic.w	r1, r1, #3
    c2d2:	add	r1, r4
    c2d4:	cmp	r1, r2
    c2d6:	blt.n	c31c <_realloc_r+0x19c>
    c2d8:	ldr	r3, [r0, #12]
    c2da:	ldr	r2, [r0, #8]
    c2dc:	mov	r4, r1
    c2de:	str	r3, [r2, #12]
    c2e0:	str	r2, [r3, #8]
    c2e2:	b.n	c2a2 <_realloc_r+0x122>
    c2e4:	ldr.w	r2, [r8, #4]
    c2e8:	add.w	r1, r8, r5
    c2ec:	and.w	r2, r2, #1
    c2f0:	orrs	r5, r2
    c2f2:	orr.w	r2, r3, #1
    c2f6:	add	r3, r1
    c2f8:	str.w	r5, [r8, #4]
    c2fc:	str	r2, [r1, #4]
    c2fe:	ldr	r2, [r3, #4]
    c300:	orr.w	r2, r2, #1
    c304:	adds	r1, #8
    c306:	str	r2, [r3, #4]
    c308:	mov	r0, r9
    c30a:	bl	110d0 <_free_r>
    c30e:	b.n	c2c0 <_realloc_r+0x140>
    c310:	mov	r1, r2
    c312:	add	sp, #12
    c314:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c318:	b.w	b968 <_malloc_r>
    c31c:	tst.w	lr, #1
    c320:	bne.w	c1d8 <_realloc_r+0x58>
    c324:	ldr.w	r3, [r6, #-8]
    c328:	rsb	sl, r3, r8
    c32c:	ldr.w	r3, [sl, #4]
    c330:	bic.w	ip, r3, #3
    c334:	add.w	lr, r1, ip
    c338:	cmp	lr, r2
    c33a:	blt.n	c254 <_realloc_r+0xd4>
    c33c:	ldr	r3, [r0, #12]
    c33e:	ldr	r2, [r0, #8]
    c340:	mov	r7, sl
    c342:	str	r3, [r2, #12]
    c344:	str	r2, [r3, #8]
    c346:	ldr.w	r1, [r7, #8]!
    c34a:	ldr.w	r3, [sl, #12]
    c34e:	str	r3, [r1, #12]
    c350:	subs	r2, r4, #4
    c352:	cmp	r2, #36	; 0x24
    c354:	str	r1, [r3, #8]
    c356:	bhi.w	c48c <_realloc_r+0x30c>
    c35a:	cmp	r2, #19
    c35c:	bls.n	c424 <_realloc_r+0x2a4>
    c35e:	ldr	r3, [r6, #0]
    c360:	str.w	r3, [sl, #8]
    c364:	ldr	r3, [r6, #4]
    c366:	str.w	r3, [sl, #12]
    c36a:	cmp	r2, #27
    c36c:	bhi.w	c4b0 <_realloc_r+0x330>
    c370:	adds	r6, #8
    c372:	add.w	r3, sl, #16
    c376:	b.n	c426 <_realloc_r+0x2a6>
    c378:	bic.w	fp, r1, #3
    c37c:	add	fp, r4
    c37e:	add.w	r0, r5, #16
    c382:	cmp	fp, r0
    c384:	bge.n	c43a <_realloc_r+0x2ba>
    c386:	tst.w	lr, #1
    c38a:	bne.w	c1d8 <_realloc_r+0x58>
    c38e:	ldr.w	r1, [r6, #-8]
    c392:	rsb	sl, r1, r8
    c396:	ldr.w	r1, [sl, #4]
    c39a:	bic.w	ip, r1, #3
    c39e:	add	fp, ip
    c3a0:	cmp	r0, fp
    c3a2:	bgt.w	c254 <_realloc_r+0xd4>
    c3a6:	mov	r7, sl
    c3a8:	ldr.w	r1, [sl, #12]
    c3ac:	ldr.w	r0, [r7, #8]!
    c3b0:	subs	r2, r4, #4
    c3b2:	cmp	r2, #36	; 0x24
    c3b4:	str	r1, [r0, #12]
    c3b6:	str	r0, [r1, #8]
    c3b8:	bhi.w	c524 <_realloc_r+0x3a4>
    c3bc:	cmp	r2, #19
    c3be:	bls.w	c50c <_realloc_r+0x38c>
    c3c2:	ldr	r1, [r6, #0]
    c3c4:	str.w	r1, [sl, #8]
    c3c8:	ldr	r1, [r6, #4]
    c3ca:	str.w	r1, [sl, #12]
    c3ce:	cmp	r2, #27
    c3d0:	bhi.w	c532 <_realloc_r+0x3b2>
    c3d4:	adds	r6, #8
    c3d6:	add.w	r2, sl, #16
    c3da:	ldr	r1, [r6, #0]
    c3dc:	str	r1, [r2, #0]
    c3de:	ldr	r1, [r6, #4]
    c3e0:	str	r1, [r2, #4]
    c3e2:	ldr	r1, [r6, #8]
    c3e4:	str	r1, [r2, #8]
    c3e6:	add.w	r1, sl, r5
    c3ea:	rsb	r2, r5, fp
    c3ee:	orr.w	r2, r2, #1
    c3f2:	str	r1, [r3, #8]
    c3f4:	str	r2, [r1, #4]
    c3f6:	ldr.w	r3, [sl, #4]
    c3fa:	and.w	r3, r3, #1
    c3fe:	orrs	r5, r3
    c400:	mov	r0, r9
    c402:	str.w	r5, [sl, #4]
    c406:	bl	c17c <__malloc_unlock>
    c40a:	mov	r0, r7
    c40c:	b.n	c2c8 <_realloc_r+0x148>
    c40e:	ldr	r3, [r6, #0]
    c410:	str	r3, [r0, #0]
    c412:	ldr	r3, [r6, #4]
    c414:	str	r3, [r0, #4]
    c416:	cmp	r2, #27
    c418:	bhi.n	c46a <_realloc_r+0x2ea>
    c41a:	add.w	r3, r0, #8
    c41e:	add.w	r2, r6, #8
    c422:	b.n	c20a <_realloc_r+0x8a>
    c424:	mov	r3, r7
    c426:	ldr	r2, [r6, #0]
    c428:	str	r2, [r3, #0]
    c42a:	ldr	r2, [r6, #4]
    c42c:	str	r2, [r3, #4]
    c42e:	ldr	r2, [r6, #8]
    c430:	str	r2, [r3, #8]
    c432:	mov	r6, r7
    c434:	mov	r4, lr
    c436:	mov	r8, sl
    c438:	b.n	c2a2 <_realloc_r+0x122>
    c43a:	add.w	r1, r8, r5
    c43e:	rsb	fp, r5, fp
    c442:	orr.w	r2, fp, #1
    c446:	str	r1, [r3, #8]
    c448:	str	r2, [r1, #4]
    c44a:	ldr.w	r3, [r6, #-4]
    c44e:	and.w	r3, r3, #1
    c452:	orrs	r5, r3
    c454:	mov	r0, r9
    c456:	str.w	r5, [r6, #-4]
    c45a:	bl	c17c <__malloc_unlock>
    c45e:	mov	r0, r6
    c460:	b.n	c2c8 <_realloc_r+0x148>
    c462:	mov	r1, r6
    c464:	bl	c014 <memmove>
    c468:	b.n	c216 <_realloc_r+0x96>
    c46a:	ldr	r3, [r6, #8]
    c46c:	str	r3, [r0, #8]
    c46e:	ldr	r3, [r6, #12]
    c470:	str	r3, [r0, #12]
    c472:	cmp	r2, #36	; 0x24
    c474:	beq.n	c4c8 <_realloc_r+0x348>
    c476:	add.w	r3, r0, #16
    c47a:	add.w	r2, r6, #16
    c47e:	b.n	c20a <_realloc_r+0x8a>
    c480:	ldr.w	r3, [r0, #-4]
    c484:	bic.w	r3, r3, #3
    c488:	add	r4, r3
    c48a:	b.n	c2a2 <_realloc_r+0x122>
    c48c:	mov	r1, r6
    c48e:	mov	r0, r7
    c490:	mov	r4, lr
    c492:	mov	r8, sl
    c494:	bl	c014 <memmove>
    c498:	mov	r6, r7
    c49a:	b.n	c2a2 <_realloc_r+0x122>
    c49c:	mov	r2, r7
    c49e:	b.n	c290 <_realloc_r+0x110>
    c4a0:	mov	r1, r6
    c4a2:	mov	r0, r7
    c4a4:	mov	r4, r3
    c4a6:	mov	r8, sl
    c4a8:	bl	c014 <memmove>
    c4ac:	mov	r6, r7
    c4ae:	b.n	c2a2 <_realloc_r+0x122>
    c4b0:	ldr	r3, [r6, #8]
    c4b2:	str.w	r3, [sl, #16]
    c4b6:	ldr	r3, [r6, #12]
    c4b8:	str.w	r3, [sl, #20]
    c4bc:	cmp	r2, #36	; 0x24
    c4be:	beq.n	c4f8 <_realloc_r+0x378>
    c4c0:	adds	r6, #16
    c4c2:	add.w	r3, sl, #24
    c4c6:	b.n	c426 <_realloc_r+0x2a6>
    c4c8:	ldr	r3, [r6, #16]
    c4ca:	str	r3, [r0, #16]
    c4cc:	ldr	r3, [r6, #20]
    c4ce:	str	r3, [r0, #20]
    c4d0:	add.w	r2, r6, #24
    c4d4:	add.w	r3, r0, #24
    c4d8:	b.n	c20a <_realloc_r+0x8a>
    c4da:	nop
    c4dc:	.word	0x20017570
    c4e0:	ldr	r1, [r6, #8]
    c4e2:	str.w	r1, [sl, #16]
    c4e6:	ldr	r1, [r6, #12]
    c4e8:	str.w	r1, [sl, #20]
    c4ec:	cmp	r2, #36	; 0x24
    c4ee:	beq.n	c510 <_realloc_r+0x390>
    c4f0:	adds	r6, #16
    c4f2:	add.w	r2, sl, #24
    c4f6:	b.n	c290 <_realloc_r+0x110>
    c4f8:	ldr	r3, [r6, #16]
    c4fa:	str.w	r3, [sl, #24]
    c4fe:	ldr	r3, [r6, #20]
    c500:	str.w	r3, [sl, #28]
    c504:	adds	r6, #24
    c506:	add.w	r3, sl, #32
    c50a:	b.n	c426 <_realloc_r+0x2a6>
    c50c:	mov	r2, r7
    c50e:	b.n	c3da <_realloc_r+0x25a>
    c510:	ldr	r2, [r6, #16]
    c512:	str.w	r2, [sl, #24]
    c516:	ldr	r2, [r6, #20]
    c518:	str.w	r2, [sl, #28]
    c51c:	adds	r6, #24
    c51e:	add.w	r2, sl, #32
    c522:	b.n	c290 <_realloc_r+0x110>
    c524:	mov	r1, r6
    c526:	mov	r0, r7
    c528:	str	r3, [sp, #4]
    c52a:	bl	c014 <memmove>
    c52e:	ldr	r3, [sp, #4]
    c530:	b.n	c3e6 <_realloc_r+0x266>
    c532:	ldr	r1, [r6, #8]
    c534:	str.w	r1, [sl, #16]
    c538:	ldr	r1, [r6, #12]
    c53a:	str.w	r1, [sl, #20]
    c53e:	cmp	r2, #36	; 0x24
    c540:	beq.n	c54a <_realloc_r+0x3ca>
    c542:	adds	r6, #16
    c544:	add.w	r2, sl, #24
    c548:	b.n	c3da <_realloc_r+0x25a>
    c54a:	ldr	r2, [r6, #16]
    c54c:	str.w	r2, [sl, #24]
    c550:	ldr	r2, [r6, #20]
    c552:	str.w	r2, [sl, #28]
    c556:	adds	r6, #24
    c558:	add.w	r2, sl, #32
    c55c:	b.n	c3da <_realloc_r+0x25a>
    c55e:	nop

0000c560 <_sbrk_r>:
    c560:	push	{r3, r4, r5, lr}
    c562:	ldr	r4, [pc, #28]	; (c580 <_sbrk_r+0x20>)
    c564:	movs	r3, #0
    c566:	mov	r5, r0
    c568:	mov	r0, r1
    c56a:	str	r3, [r4, #0]
    c56c:	bl	8714 <_sbrk>
    c570:	adds	r3, r0, #1
    c572:	beq.n	c576 <_sbrk_r+0x16>
    c574:	pop	{r3, r4, r5, pc}
    c576:	ldr	r3, [r4, #0]
    c578:	cmp	r3, #0
    c57a:	beq.n	c574 <_sbrk_r+0x14>
    c57c:	str	r3, [r5, #0]
    c57e:	pop	{r3, r4, r5, pc}
    c580:	.word	0x2001ce3c

0000c584 <sprintf>:
    c584:	push	{r1, r2, r3}
    c586:	push	{r4, r5, r6, r7, lr}
    c588:	sub	sp, #112	; 0x70
    c58a:	add	r3, sp, #132	; 0x84
    c58c:	ldr	r1, [pc, #60]	; (c5cc <sprintf+0x48>)
    c58e:	ldr.w	r2, [r3], #4
    c592:	str	r3, [sp, #4]
    c594:	mov	r5, r0
    c596:	mvn.w	r4, #2147483648	; 0x80000000
    c59a:	ldr	r0, [r1, #0]
    c59c:	str	r5, [sp, #8]
    c59e:	mov.w	r7, #520	; 0x208
    c5a2:	movw	r6, #65535	; 0xffff
    c5a6:	add	r1, sp, #8
    c5a8:	str	r5, [sp, #24]
    c5aa:	strh.w	r7, [sp, #20]
    c5ae:	str	r4, [sp, #16]
    c5b0:	str	r4, [sp, #28]
    c5b2:	strh.w	r6, [sp, #22]
    c5b6:	bl	d9d0 <_svfprintf_r>
    c5ba:	ldr	r3, [sp, #8]
    c5bc:	movs	r2, #0
    c5be:	strb	r2, [r3, #0]
    c5c0:	add	sp, #112	; 0x70
    c5c2:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    c5c6:	add	sp, #12
    c5c8:	bx	lr
    c5ca:	nop
    c5cc:	.word	0x20017400

0000c5d0 <sscanf>:
    c5d0:	push	{r1, r2, r3}
    c5d2:	push	{r4, r5, r6, r7, lr}
    c5d4:	sub	sp, #112	; 0x70
    c5d6:	add	r4, sp, #132	; 0x84
    c5d8:	mov.w	r2, #516	; 0x204
    c5dc:	ldr.w	r6, [r4], #4
    c5e0:	strh.w	r2, [sp, #20]
    c5e4:	str	r0, [sp, #8]
    c5e6:	str	r0, [sp, #24]
    c5e8:	bl	c7c0 <strlen>
    c5ec:	ldr	r3, [pc, #48]	; (c620 <sscanf+0x50>)
    c5ee:	str	r4, [sp, #4]
    c5f0:	mov	r5, r0
    c5f2:	mov	r2, r6
    c5f4:	ldr	r7, [pc, #44]	; (c624 <sscanf+0x54>)
    c5f6:	ldr	r0, [r3, #0]
    c5f8:	str	r5, [sp, #12]
    c5fa:	mov	r3, r4
    c5fc:	movw	r6, #65535	; 0xffff
    c600:	movs	r4, #0
    c602:	add	r1, sp, #8
    c604:	str	r5, [sp, #28]
    c606:	str	r7, [sp, #40]	; 0x28
    c608:	str	r4, [sp, #56]	; 0x38
    c60a:	str	r4, [sp, #76]	; 0x4c
    c60c:	strh.w	r6, [sp, #22]
    c610:	bl	f0b4 <__ssvfscanf_r>
    c614:	add	sp, #112	; 0x70
    c616:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    c61a:	add	sp, #12
    c61c:	bx	lr
    c61e:	nop
    c620:	.word	0x20017400
    c624:	.word	0x0000c629

0000c628 <__seofread>:
    c628:	movs	r0, #0
    c62a:	bx	lr

0000c62c <strchr>:
    c62c:	push	{r4, r5, r6}
    c62e:	ands.w	r4, r1, #255	; 0xff
    c632:	beq.n	c69e <strchr+0x72>
    c634:	lsls	r5, r0, #30
    c636:	beq.n	c658 <strchr+0x2c>
    c638:	ldrb	r3, [r0, #0]
    c63a:	cmp	r3, #0
    c63c:	beq.n	c6f4 <strchr+0xc8>
    c63e:	cmp	r4, r3
    c640:	beq.n	c69a <strchr+0x6e>
    c642:	adds	r3, r0, #1
    c644:	b.n	c652 <strchr+0x26>
    c646:	ldrb.w	r2, [r3], #1
    c64a:	cmp	r2, #0
    c64c:	beq.n	c6ee <strchr+0xc2>
    c64e:	cmp	r4, r2
    c650:	beq.n	c69a <strchr+0x6e>
    c652:	lsls	r2, r3, #30
    c654:	mov	r0, r3
    c656:	bne.n	c646 <strchr+0x1a>
    c658:	lsls	r6, r1, #8
    c65a:	and.w	r6, r6, #65280	; 0xff00
    c65e:	orrs	r6, r4
    c660:	ldr	r3, [r0, #0]
    c662:	orr.w	r6, r6, r6, lsl #16
    c666:	b.n	c66c <strchr+0x40>
    c668:	ldr.w	r3, [r0, #4]!
    c66c:	eor.w	r5, r6, r3
    c670:	sub.w	r2, r5, #16843009	; 0x1010101
    c674:	sub.w	r1, r3, #16843009	; 0x1010101
    c678:	bic.w	r2, r2, r5
    c67c:	bic.w	r3, r1, r3
    c680:	orrs	r3, r2
    c682:	tst.w	r3, #2155905152	; 0x80808080
    c686:	beq.n	c668 <strchr+0x3c>
    c688:	ldrb	r3, [r0, #0]
    c68a:	cbnz	r3, c696 <strchr+0x6a>
    c68c:	b.n	c6f4 <strchr+0xc8>
    c68e:	ldrb.w	r3, [r0, #1]!
    c692:	cmp	r3, #0
    c694:	beq.n	c6f4 <strchr+0xc8>
    c696:	cmp	r4, r3
    c698:	bne.n	c68e <strchr+0x62>
    c69a:	pop	{r4, r5, r6}
    c69c:	bx	lr
    c69e:	lsls	r4, r0, #30
    c6a0:	beq.n	c6ba <strchr+0x8e>
    c6a2:	ldrb	r3, [r0, #0]
    c6a4:	cmp	r3, #0
    c6a6:	beq.n	c69a <strchr+0x6e>
    c6a8:	adds	r3, r0, #1
    c6aa:	b.n	c6b4 <strchr+0x88>
    c6ac:	ldrb	r2, [r0, #0]
    c6ae:	adds	r3, #1
    c6b0:	cmp	r2, #0
    c6b2:	beq.n	c69a <strchr+0x6e>
    c6b4:	lsls	r1, r3, #30
    c6b6:	mov	r0, r3
    c6b8:	bne.n	c6ac <strchr+0x80>
    c6ba:	ldr	r2, [r0, #0]
    c6bc:	sub.w	r3, r2, #16843009	; 0x1010101
    c6c0:	bic.w	r3, r3, r2
    c6c4:	tst.w	r3, #2155905152	; 0x80808080
    c6c8:	bne.n	c6dc <strchr+0xb0>
    c6ca:	ldr.w	r2, [r0, #4]!
    c6ce:	sub.w	r3, r2, #16843009	; 0x1010101
    c6d2:	bic.w	r3, r3, r2
    c6d6:	tst.w	r3, #2155905152	; 0x80808080
    c6da:	beq.n	c6ca <strchr+0x9e>
    c6dc:	ldrb	r3, [r0, #0]
    c6de:	cmp	r3, #0
    c6e0:	beq.n	c69a <strchr+0x6e>
    c6e2:	ldrb.w	r3, [r0, #1]!
    c6e6:	cmp	r3, #0
    c6e8:	bne.n	c6e2 <strchr+0xb6>
    c6ea:	pop	{r4, r5, r6}
    c6ec:	bx	lr
    c6ee:	mov	r0, r2
    c6f0:	pop	{r4, r5, r6}
    c6f2:	bx	lr
    c6f4:	mov	r0, r3
    c6f6:	pop	{r4, r5, r6}
    c6f8:	bx	lr
    c6fa:	nop

0000c6fc <strcpy>:
    c6fc:	eor.w	r2, r0, r1
    c700:	mov	ip, r0
    c702:	tst.w	r2, #3
    c706:	bne.n	c7a8 <strcpy+0xac>
    c708:	tst.w	r1, #3
    c70c:	bne.n	c774 <strcpy+0x78>
    c70e:	str.w	r4, [sp, #-4]!
    c712:	tst.w	r1, #4
    c716:	ldr.w	r3, [r1], #4
    c71a:	beq.n	c734 <strcpy+0x38>
    c71c:	sub.w	r2, r3, #16843009	; 0x1010101
    c720:	bics	r2, r3
    c722:	tst.w	r2, #2155905152	; 0x80808080
    c726:	itt	eq
    c728:	streq.w	r3, [ip], #4
    c72c:	ldreq.w	r3, [r1], #4
    c730:	bne.n	c760 <strcpy+0x64>
    c732:	nop
    c734:	ldr.w	r4, [r1], #4
    c738:	sub.w	r2, r3, #16843009	; 0x1010101
    c73c:	bics	r2, r3
    c73e:	tst.w	r2, #2155905152	; 0x80808080
    c742:	sub.w	r2, r4, #16843009	; 0x1010101
    c746:	bne.n	c760 <strcpy+0x64>
    c748:	str.w	r3, [ip], #4
    c74c:	bics	r2, r4
    c74e:	tst.w	r2, #2155905152	; 0x80808080
    c752:	itt	eq
    c754:	ldreq.w	r3, [r1], #4
    c758:	streq.w	r4, [ip], #4
    c75c:	beq.n	c734 <strcpy+0x38>
    c75e:	mov	r3, r4
    c760:	strb.w	r3, [ip], #1
    c764:	tst.w	r3, #255	; 0xff
    c768:	mov.w	r3, r3, ror #8
    c76c:	bne.n	c760 <strcpy+0x64>
    c76e:	ldr.w	r4, [sp], #4
    c772:	bx	lr
    c774:	tst.w	r1, #1
    c778:	beq.n	c788 <strcpy+0x8c>
    c77a:	ldrb.w	r2, [r1], #1
    c77e:	strb.w	r2, [ip], #1
    c782:	cmp	r2, #0
    c784:	it	eq
    c786:	bxeq	lr
    c788:	tst.w	r1, #2
    c78c:	beq.n	c70e <strcpy+0x12>
    c78e:	ldrh.w	r2, [r1], #2
    c792:	tst.w	r2, #255	; 0xff
    c796:	itet	ne
    c798:	strhne.w	r2, [ip], #2
    c79c:	strbeq.w	r2, [ip]
    c7a0:	tstne.w	r2, #65280	; 0xff00
    c7a4:	bne.n	c70e <strcpy+0x12>
    c7a6:	bx	lr
    c7a8:	ldrb.w	r2, [r1], #1
    c7ac:	strb.w	r2, [ip], #1
    c7b0:	cmp	r2, #0
    c7b2:	bne.n	c7a8 <strcpy+0xac>
    c7b4:	bx	lr
    c7b6:	nop
    c7b8:			; <UNDEFINED> instruction: 0xffffffff
    c7bc:			; <UNDEFINED> instruction: 0xffffffff

0000c7c0 <strlen>:
    c7c0:	pld	[r0]
    c7c4:	strd	r4, r5, [sp, #-8]!
    c7c8:	bic.w	r1, r0, #7
    c7cc:	mvn.w	ip, #0
    c7d0:	ands.w	r4, r0, #7
    c7d4:	pld	[r1, #32]
    c7d8:	bne.w	c86e <strlen+0xae>
    c7dc:	mov.w	r4, #0
    c7e0:	mvn.w	r0, #7
    c7e4:	ldrd	r2, r3, [r1]
    c7e8:	pld	[r1, #64]	; 0x40
    c7ec:	add.w	r0, r0, #8
    c7f0:	uadd8	r2, r2, ip
    c7f4:	sel	r2, r4, ip
    c7f8:	uadd8	r3, r3, ip
    c7fc:	sel	r3, r2, ip
    c800:	cbnz	r3, c856 <strlen+0x96>
    c802:	ldrd	r2, r3, [r1, #8]
    c806:	uadd8	r2, r2, ip
    c80a:	add.w	r0, r0, #8
    c80e:	sel	r2, r4, ip
    c812:	uadd8	r3, r3, ip
    c816:	sel	r3, r2, ip
    c81a:	cbnz	r3, c856 <strlen+0x96>
    c81c:	ldrd	r2, r3, [r1, #16]
    c820:	uadd8	r2, r2, ip
    c824:	add.w	r0, r0, #8
    c828:	sel	r2, r4, ip
    c82c:	uadd8	r3, r3, ip
    c830:	sel	r3, r2, ip
    c834:	cbnz	r3, c856 <strlen+0x96>
    c836:	ldrd	r2, r3, [r1, #24]
    c83a:	add.w	r1, r1, #32
    c83e:	uadd8	r2, r2, ip
    c842:	add.w	r0, r0, #8
    c846:	sel	r2, r4, ip
    c84a:	uadd8	r3, r3, ip
    c84e:	sel	r3, r2, ip
    c852:	cmp	r3, #0
    c854:	beq.n	c7e4 <strlen+0x24>
    c856:	cmp	r2, #0
    c858:	itt	eq
    c85a:	addeq	r0, #4
    c85c:	moveq	r2, r3
    c85e:	rev	r2, r2
    c860:	clz	r2, r2
    c864:	ldrd	r4, r5, [sp], #8
    c868:	add.w	r0, r0, r2, lsr #3
    c86c:	bx	lr
    c86e:	ldrd	r2, r3, [r1]
    c872:	and.w	r5, r4, #3
    c876:	rsb	r0, r4, #0
    c87a:	mov.w	r5, r5, lsl #3
    c87e:	tst.w	r4, #4
    c882:	pld	[r1, #64]	; 0x40
    c886:	lsl.w	r5, ip, r5
    c88a:	orn	r2, r2, r5
    c88e:	itt	ne
    c890:	ornne	r3, r3, r5
    c894:	movne	r2, ip
    c896:	mov.w	r4, #0
    c89a:	b.n	c7f0 <strlen+0x30>

0000c89c <strncmp>:
    c89c:	cmp	r2, #0
    c89e:	beq.n	c924 <strncmp+0x88>
    c8a0:	orr.w	r3, r0, r1
    c8a4:	ands.w	r3, r3, #3
    c8a8:	push	{r4, r5, r6, r7}
    c8aa:	bne.n	c8f8 <strncmp+0x5c>
    c8ac:	cmp	r2, #3
    c8ae:	bls.n	c8f8 <strncmp+0x5c>
    c8b0:	ldr	r4, [r0, #0]
    c8b2:	ldr	r5, [r1, #0]
    c8b4:	cmp	r4, r5
    c8b6:	bne.n	c8f8 <strncmp+0x5c>
    c8b8:	subs	r2, #4
    c8ba:	beq.n	c928 <strncmp+0x8c>
    c8bc:	sub.w	r5, r4, #16843009	; 0x1010101
    c8c0:	bic.w	r4, r5, r4
    c8c4:	tst.w	r4, #2155905152	; 0x80808080
    c8c8:	bne.n	c92e <strncmp+0x92>
    c8ca:	adds	r7, r0, #4
    c8cc:	adds	r5, r1, #4
    c8ce:	b.n	c8ec <strncmp+0x50>
    c8d0:	ldr.w	r3, [r7], #4
    c8d4:	ldr	r6, [r1, #0]
    c8d6:	sub.w	r4, r3, #16843009	; 0x1010101
    c8da:	cmp	r3, r6
    c8dc:	bic.w	r4, r4, r3
    c8e0:	bne.n	c8f8 <strncmp+0x5c>
    c8e2:	subs	r2, #4
    c8e4:	beq.n	c928 <strncmp+0x8c>
    c8e6:	tst.w	r4, #2155905152	; 0x80808080
    c8ea:	bne.n	c934 <strncmp+0x98>
    c8ec:	cmp	r2, #3
    c8ee:	mov	r1, r5
    c8f0:	mov	r0, r7
    c8f2:	add.w	r5, r5, #4
    c8f6:	bhi.n	c8d0 <strncmp+0x34>
    c8f8:	ldrb	r3, [r0, #0]
    c8fa:	ldrb	r4, [r1, #0]
    c8fc:	cmp	r4, r3
    c8fe:	add.w	r2, r2, #4294967295
    c902:	bne.n	c91e <strncmp+0x82>
    c904:	cbz	r2, c928 <strncmp+0x8c>
    c906:	cbnz	r4, c90e <strncmp+0x72>
    c908:	b.n	c938 <strncmp+0x9c>
    c90a:	cbz	r2, c928 <strncmp+0x8c>
    c90c:	cbz	r3, c92e <strncmp+0x92>
    c90e:	ldrb.w	r3, [r0, #1]!
    c912:	ldrb.w	r4, [r1, #1]!
    c916:	cmp	r3, r4
    c918:	add.w	r2, r2, #4294967295
    c91c:	beq.n	c90a <strncmp+0x6e>
    c91e:	subs	r0, r3, r4
    c920:	pop	{r4, r5, r6, r7}
    c922:	bx	lr
    c924:	mov	r0, r2
    c926:	bx	lr
    c928:	mov	r0, r2
    c92a:	pop	{r4, r5, r6, r7}
    c92c:	bx	lr
    c92e:	mov	r0, r3
    c930:	pop	{r4, r5, r6, r7}
    c932:	bx	lr
    c934:	movs	r0, #0
    c936:	b.n	c920 <strncmp+0x84>
    c938:	mov	r0, r4
    c93a:	b.n	c920 <strncmp+0x84>

0000c93c <sulp>:
    c93c:	push	{r4, r5, r6, lr}
    c93e:	mov	r4, r0
    c940:	mov	r5, r1
    c942:	vmov	d0, r4, r5
    c946:	mov	r6, r2
    c948:	bl	120a0 <__ulp>
    c94c:	vmov	r0, r1, d0
    c950:	cbz	r6, c972 <sulp+0x36>
    c952:	ubfx	r3, r5, #20, #11
    c956:	rsb	r3, r3, #107	; 0x6b
    c95a:	cmp	r3, #0
    c95c:	ble.n	c972 <sulp+0x36>
    c95e:	lsls	r3, r3, #20
    c960:	add.w	r5, r3, #1069547520	; 0x3fc00000
    c964:	movs	r4, #0
    c966:	add.w	r5, r5, #3145728	; 0x300000
    c96a:	mov	r2, r4
    c96c:	mov	r3, r5
    c96e:	bl	ac5c <__aeabi_dmul>
    c972:	pop	{r4, r5, r6, pc}
    c974:			; <UNDEFINED> instruction: 0xffffffff

0000c978 <_strtod_l>:
    c978:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c97c:	mov	r5, r3
    c97e:	sub	sp, #132	; 0x84
    c980:	movs	r3, #0
    c982:	mov	fp, r0
    c984:	mov	r0, r5
    c986:	mov	r6, r1
    c988:	str	r2, [sp, #24]
    c98a:	str	r3, [sp, #112]	; 0x70
    c98c:	bl	11a24 <__localeconv_l>
    c990:	movs	r4, #0
    c992:	movs	r3, #0
    c994:	mov	sl, r0
    c996:	ldr	r0, [r0, #0]
    c998:	strd	r3, r4, [sp, #16]
    c99c:	bl	c7c0 <strlen>
    c9a0:	str	r6, [sp, #108]	; 0x6c
    c9a2:	mov	r9, r0
    c9a4:	mov	r2, r6
    c9a6:	mov	r4, r2
    c9a8:	ldrb.w	r7, [r2], #1
    c9ac:	cmp	r7, #45	; 0x2d
    c9ae:	bhi.w	cb10 <_strtod_l+0x198>
    c9b2:	tbb	[pc, r7]
    c9b6:	.short	0xad17
    c9b8:	.word	0xadadadad
    c9bc:	.word	0x81adadad
    c9c0:	.word	0x81818181
    c9c4:	.word	0xadadadad
    c9c8:	.word	0xadadadad
    c9cc:	.word	0xadadadad
    c9d0:	.word	0xadadadad
    c9d4:	.word	0xad81adad
    c9d8:	.word	0xadadadad
    c9dc:	.word	0xadadadad
    c9e0:	.word	0x7ead2bad
    c9e4:	ldr	r3, [sp, #24]
    c9e6:	mov.w	r8, #0
    c9ea:	mov.w	r9, #0
    c9ee:	cbz	r3, ca02 <_strtod_l+0x8a>
    c9f0:	movs	r3, #0
    c9f2:	str	r3, [sp, #28]
    c9f4:	ldr	r3, [sp, #24]
    c9f6:	str	r6, [r3, #0]
    c9f8:	ldr	r3, [sp, #28]
    c9fa:	cbz	r3, ca02 <_strtod_l+0x8a>
    c9fc:	add.w	r3, r9, #2147483648	; 0x80000000
    ca00:	mov	r9, r3
    ca02:	vmov	d0, r8, r9
    ca06:	add	sp, #132	; 0x84
    ca08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ca0c:	movs	r3, #0
    ca0e:	str	r3, [sp, #28]
    ca10:	adds	r2, r4, #1
    ca12:	str	r2, [sp, #108]	; 0x6c
    ca14:	ldrb	r7, [r4, #1]
    ca16:	cmp	r7, #0
    ca18:	beq.n	c9e4 <_strtod_l+0x6c>
    ca1a:	cmp	r7, #48	; 0x30
    ca1c:	mov	r4, r2
    ca1e:	beq.n	cb18 <_strtod_l+0x1a0>
    ca20:	movs	r3, #0
    ca22:	str	r4, [sp, #32]
    ca24:	str	r3, [sp, #40]	; 0x28
    ca26:	sub.w	r3, r7, #48	; 0x30
    ca2a:	cmp	r3, #9
    ca2c:	bhi.w	d23e <_strtod_l+0x8c6>
    ca30:	mov.w	r8, #0
    ca34:	mov	r0, r4
    ca36:	mov	r5, r8
    ca38:	mov	r4, r8
    ca3a:	cmp	r4, #8
    ca3c:	it	gt
    ca3e:	addgt.w	r8, r8, r8, lsl #2
    ca42:	add.w	r3, r5, r5, lsl #2
    ca46:	add.w	r0, r0, #1
    ca4a:	add.w	r3, r7, r3, lsl #1
    ca4e:	str	r0, [sp, #108]	; 0x6c
    ca50:	itt	gt
    ca52:	addgt.w	r7, r7, r8, lsl #1
    ca56:	subgt.w	r8, r7, #48	; 0x30
    ca5a:	ldrb	r7, [r0, #0]
    ca5c:	it	le
    ca5e:	suble.w	r5, r3, #48	; 0x30
    ca62:	sub.w	r3, r7, #48	; 0x30
    ca66:	cmp	r3, #9
    ca68:	add.w	r4, r4, #1
    ca6c:	bls.n	ca3a <_strtod_l+0xc2>
    ca6e:	ldr.w	r1, [sl]
    ca72:	mov	r2, r9
    ca74:	bl	c89c <strncmp>
    ca78:	cbz	r0, cabc <_strtod_l+0x144>
    ca7a:	movs	r0, #0
    ca7c:	mov	r3, r7
    ca7e:	mov	r9, r0
    ca80:	mov	r7, r0
    ca82:	mov	sl, r4
    ca84:	cmp	r3, #101	; 0x65
    ca86:	beq.w	cbee <_strtod_l+0x276>
    ca8a:	cmp	r3, #69	; 0x45
    ca8c:	beq.w	cbee <_strtod_l+0x276>
    ca90:	movs	r2, #0
    ca92:	cmp	r4, #0
    ca94:	bne.n	cb3c <_strtod_l+0x1c4>
    ca96:	cbnz	r0, caa0 <_strtod_l+0x128>
    ca98:	ldr	r2, [sp, #40]	; 0x28
    ca9a:	cmp	r2, #0
    ca9c:	beq.w	d042 <_strtod_l+0x6ca>
    caa0:	mov.w	r8, #0
    caa4:	mov.w	r9, #0
    caa8:	ldr	r3, [sp, #24]
    caaa:	cmp	r3, #0
    caac:	beq.n	c9f8 <_strtod_l+0x80>
    caae:	ldr	r6, [sp, #108]	; 0x6c
    cab0:	b.n	c9f4 <_strtod_l+0x7c>
    cab2:	movs	r3, #1
    cab4:	str	r3, [sp, #28]
    cab6:	b.n	ca10 <_strtod_l+0x98>
    cab8:	str	r2, [sp, #108]	; 0x6c
    caba:	b.n	c9a6 <_strtod_l+0x2e>
    cabc:	ldr	r3, [sp, #108]	; 0x6c
    cabe:	add.w	r2, r3, r9
    cac2:	str	r2, [sp, #108]	; 0x6c
    cac4:	ldrb.w	r3, [r3, r9]
    cac8:	mov	r7, r0
    caca:	mov	sl, r4
    cacc:	sub.w	r2, r3, #48	; 0x30
    cad0:	cmp	r2, #9
    cad2:	bhi.w	cfc8 <_strtod_l+0x650>
    cad6:	adds	r1, r0, #1
    cad8:	mov	r3, r2
    cada:	cmp	r2, #0
    cadc:	beq.w	d81e <_strtod_l+0xea6>
    cae0:	cmp	r1, #1
    cae2:	add	r7, r1
    cae4:	it	ne
    cae6:	addne	r0, r0, r4
    cae8:	bne.n	caf6 <_strtod_l+0x17e>
    caea:	b.w	d816 <_strtod_l+0xe9e>
    caee:	lsls	r5, r1, #1
    caf0:	cmp	r4, r0
    caf2:	beq.w	d46c <_strtod_l+0xaf4>
    caf6:	adds	r4, #1
    caf8:	subs	r1, r4, #1
    cafa:	cmp	r1, #8
    cafc:	add.w	r1, r5, r5, lsl #2
    cb00:	ble.n	caee <_strtod_l+0x176>
    cb02:	cmp	r4, #16
    cb04:	itt	le
    cb06:	addle.w	r8, r8, r8, lsl #2
    cb0a:	movle.w	r8, r8, lsl #1
    cb0e:	b.n	caf0 <_strtod_l+0x178>
    cb10:	movs	r3, #0
    cb12:	cmp	r7, #48	; 0x30
    cb14:	str	r3, [sp, #28]
    cb16:	bne.n	ca20 <_strtod_l+0xa8>
    cb18:	ldrb	r3, [r4, #1]
    cb1a:	cmp	r3, #88	; 0x58
    cb1c:	beq.w	d206 <_strtod_l+0x88e>
    cb20:	cmp	r3, #120	; 0x78
    cb22:	beq.w	d206 <_strtod_l+0x88e>
    cb26:	adds	r4, #1
    cb28:	str	r4, [sp, #108]	; 0x6c
    cb2a:	ldrb	r7, [r4, #0]
    cb2c:	cmp	r7, #48	; 0x30
    cb2e:	beq.n	cb26 <_strtod_l+0x1ae>
    cb30:	cmp	r7, #0
    cb32:	beq.n	caa0 <_strtod_l+0x128>
    cb34:	movs	r3, #1
    cb36:	str	r4, [sp, #32]
    cb38:	str	r3, [sp, #40]	; 0x28
    cb3a:	b.n	ca26 <_strtod_l+0xae>
    cb3c:	cmp	r4, #16
    cb3e:	sub.w	r3, r2, r7
    cb42:	mov	r0, r5
    cb44:	mov	r9, r4
    cb46:	str	r3, [sp, #44]	; 0x2c
    cb48:	it	ge
    cb4a:	movge.w	r9, #16
    cb4e:	bl	ab70 <__aeabi_ui2d>
    cb52:	cmp.w	sl, #0
    cb56:	it	eq
    cb58:	moveq	sl, r4
    cb5a:	cmp.w	r9, #9
    cb5e:	strd	r0, r1, [sp, #16]
    cb62:	ble.n	cb8c <_strtod_l+0x214>
    cb64:	ldr	r3, [pc, #292]	; (cc8c <_strtod_l+0x314>)
    cb66:	add.w	r3, r3, r9, lsl #3
    cb6a:	ldrd	r2, r3, [r3, #-72]	; 0x48
    cb6e:	bl	ac5c <__aeabi_dmul>
    cb72:	mov	r6, r0
    cb74:	mov	r0, r8
    cb76:	mov	r7, r1
    cb78:	bl	ab70 <__aeabi_ui2d>
    cb7c:	mov	r2, r0
    cb7e:	mov	r3, r1
    cb80:	mov	r0, r6
    cb82:	mov	r1, r7
    cb84:	bl	a8f8 <__adddf3>
    cb88:	strd	r0, r1, [sp, #16]
    cb8c:	cmp	r4, #15
    cb8e:	bgt.w	cc9c <_strtod_l+0x324>
    cb92:	ldr	r3, [sp, #44]	; 0x2c
    cb94:	cmp	r3, #0
    cb96:	beq.n	cbe8 <_strtod_l+0x270>
    cb98:	ble.w	d5d4 <_strtod_l+0xc5c>
    cb9c:	ldr	r3, [sp, #44]	; 0x2c
    cb9e:	cmp	r3, #22
    cba0:	bgt.w	d4a0 <_strtod_l+0xb28>
    cba4:	ldr	r7, [pc, #228]	; (cc8c <_strtod_l+0x314>)
    cba6:	add.w	r7, r7, r3, lsl #3
    cbaa:	ldrd	r0, r1, [r7]
    cbae:	ldrd	r2, r3, [sp, #16]
    cbb2:	bl	ac5c <__aeabi_dmul>
    cbb6:	mov	r8, r0
    cbb8:	mov	r9, r1
    cbba:	b.n	caa8 <_strtod_l+0x130>
    cbbc:	add	r0, sp, #108	; 0x6c
    cbbe:	ldr	r1, [pc, #208]	; (cc90 <_strtod_l+0x318>)
    cbc0:	bl	11858 <__match>
    cbc4:	cmp	r0, #0
    cbc6:	beq.w	c9e4 <_strtod_l+0x6c>
    cbca:	ldr	r3, [sp, #108]	; 0x6c
    cbcc:	ldr	r1, [pc, #196]	; (cc94 <_strtod_l+0x31c>)
    cbce:	subs	r3, #1
    cbd0:	add	r0, sp, #108	; 0x6c
    cbd2:	str	r3, [sp, #108]	; 0x6c
    cbd4:	bl	11858 <__match>
    cbd8:	cbnz	r0, cbe0 <_strtod_l+0x268>
    cbda:	ldr	r3, [sp, #108]	; 0x6c
    cbdc:	adds	r3, #1
    cbde:	str	r3, [sp, #108]	; 0x6c
    cbe0:	ldr	r3, [pc, #180]	; (cc98 <_strtod_l+0x320>)
    cbe2:	str	r3, [sp, #20]
    cbe4:	movs	r3, #0
    cbe6:	str	r3, [sp, #16]
    cbe8:	ldrd	r8, r9, [sp, #16]
    cbec:	b.n	caa8 <_strtod_l+0x130>
    cbee:	cmp	r4, #0
    cbf0:	beq.w	cf88 <_strtod_l+0x610>
    cbf4:	ldr	r6, [sp, #108]	; 0x6c
    cbf6:	adds	r3, r6, #1
    cbf8:	str	r3, [sp, #108]	; 0x6c
    cbfa:	ldrb	r3, [r6, #1]
    cbfc:	cmp	r3, #43	; 0x2b
    cbfe:	beq.w	d1bc <_strtod_l+0x844>
    cc02:	cmp	r3, #45	; 0x2d
    cc04:	beq.w	d032 <_strtod_l+0x6ba>
    cc08:	mov.w	ip, #0
    cc0c:	sub.w	r2, r3, #48	; 0x30
    cc10:	cmp	r2, #9
    cc12:	bhi.w	d1b6 <_strtod_l+0x83e>
    cc16:	cmp	r3, #48	; 0x30
    cc18:	bne.n	cc26 <_strtod_l+0x2ae>
    cc1a:	ldr	r2, [sp, #108]	; 0x6c
    cc1c:	adds	r2, #1
    cc1e:	str	r2, [sp, #108]	; 0x6c
    cc20:	ldrb	r3, [r2, #0]
    cc22:	cmp	r3, #48	; 0x30
    cc24:	beq.n	cc1c <_strtod_l+0x2a4>
    cc26:	sub.w	r2, r3, #49	; 0x31
    cc2a:	cmp	r2, #8
    cc2c:	bhi.w	ca90 <_strtod_l+0x118>
    cc30:	ldr	r2, [sp, #108]	; 0x6c
    cc32:	str	r2, [sp, #48]	; 0x30
    cc34:	adds	r1, r2, #1
    cc36:	subs	r3, #48	; 0x30
    cc38:	str	r1, [sp, #108]	; 0x6c
    cc3a:	str	r3, [sp, #44]	; 0x2c
    cc3c:	ldrb	r3, [r2, #1]
    cc3e:	sub.w	lr, r3, #48	; 0x30
    cc42:	cmp.w	lr, #9
    cc46:	bhi.n	cc68 <_strtod_l+0x2f0>
    cc48:	ldr	r2, [sp, #44]	; 0x2c
    cc4a:	adds	r1, #1
    cc4c:	str	r1, [sp, #108]	; 0x6c
    cc4e:	add.w	r2, r2, r2, lsl #2
    cc52:	add.w	r2, r3, r2, lsl #1
    cc56:	ldrb	r3, [r1, #0]
    cc58:	sub.w	lr, r3, #48	; 0x30
    cc5c:	cmp.w	lr, #9
    cc60:	sub.w	r2, r2, #48	; 0x30
    cc64:	bls.n	cc4a <_strtod_l+0x2d2>
    cc66:	str	r2, [sp, #44]	; 0x2c
    cc68:	ldr	r2, [sp, #48]	; 0x30
    cc6a:	subs	r1, r1, r2
    cc6c:	cmp	r1, #8
    cc6e:	bgt.w	d48e <_strtod_l+0xb16>
    cc72:	ldr	r2, [sp, #44]	; 0x2c
    cc74:	movw	r1, #19999	; 0x4e1f
    cc78:	cmp	r2, r1
    cc7a:	it	ge
    cc7c:	movge	r2, r1
    cc7e:	cmp.w	ip, #0
    cc82:	beq.w	ca92 <_strtod_l+0x11a>
    cc86:	negs	r2, r2
    cc88:	b.n	ca92 <_strtod_l+0x11a>
    cc8a:	nop
    cc8c:	.word	0x00013a58
    cc90:	.word	0x00013760
    cc94:	.word	0x00013764
    cc98:	.word	0x7ff00000
    cc9c:	ldr	r3, [sp, #44]	; 0x2c
    cc9e:	rsb	r9, r9, r4
    cca2:	add	r9, r3
    cca4:	cmp.w	r9, #0
    cca8:	ble.w	d3ba <_strtod_l+0xa42>
    ccac:	ands.w	r1, r9, #15
    ccb0:	beq.n	ccc8 <_strtod_l+0x350>
    ccb2:	ldr	r3, [pc, #756]	; (cfa8 <_strtod_l+0x630>)
    ccb4:	add.w	r1, r3, r1, lsl #3
    ccb8:	ldrd	r0, r1, [r1]
    ccbc:	ldrd	r2, r3, [sp, #16]
    ccc0:	bl	ac5c <__aeabi_dmul>
    ccc4:	strd	r0, r1, [sp, #16]
    ccc8:	bics.w	r6, r9, #15
    cccc:	bne.w	d0f0 <_strtod_l+0x778>
    ccd0:	movs	r3, #0
    ccd2:	str	r3, [sp, #40]	; 0x28
    ccd4:	str	r5, [sp, #0]
    ccd6:	mov	r3, r4
    ccd8:	mov	r2, sl
    ccda:	ldr	r1, [sp, #32]
    ccdc:	mov	r0, fp
    ccde:	bl	11b80 <__s2b>
    cce2:	str	r0, [sp, #72]	; 0x48
    cce4:	cmp	r0, #0
    cce6:	beq.w	d336 <_strtod_l+0x9be>
    ccea:	ldr	r2, [sp, #44]	; 0x2c
    ccec:	movs	r7, #0
    ccee:	cmp	r2, #0
    ccf0:	rsb	r3, r2, #0
    ccf4:	it	ge
    ccf6:	movge	r3, r7
    ccf8:	str	r3, [sp, #48]	; 0x30
    ccfa:	bic.w	r3, r2, r2, asr #31
    ccfe:	str	r3, [sp, #44]	; 0x2c
    cd00:	mov	sl, r7
    cd02:	ldr	r4, [sp, #72]	; 0x48
    cd04:	mov	r0, fp
    cd06:	ldr	r1, [r4, #4]
    cd08:	bl	11aa0 <_Balloc>
    cd0c:	mov	r6, r0
    cd0e:	cmp	r0, #0
    cd10:	beq.w	d1c8 <_strtod_l+0x850>
    cd14:	ldr	r2, [r4, #16]
    cd16:	vldr	d7, [sp, #16]
    cd1a:	adds	r2, #2
    cd1c:	lsls	r2, r2, #2
    cd1e:	add.w	r1, r4, #12
    cd22:	adds	r0, #12
    cd24:	vstr	d7, [sp, #32]
    cd28:	bl	81cc <memcpy>
    cd2c:	vldr	d0, [sp, #32]
    cd30:	add	r2, sp, #120	; 0x78
    cd32:	add	r1, sp, #116	; 0x74
    cd34:	mov	r0, fp
    cd36:	bl	121c4 <__d2b>
    cd3a:	str	r0, [sp, #112]	; 0x70
    cd3c:	cmp	r0, #0
    cd3e:	beq.w	d1ca <_strtod_l+0x852>
    cd42:	movs	r1, #1
    cd44:	mov	r0, fp
    cd46:	bl	11cb4 <__i2b>
    cd4a:	mov	sl, r0
    cd4c:	cmp	r0, #0
    cd4e:	beq.w	d1c8 <_strtod_l+0x850>
    cd52:	ldr	r2, [sp, #116]	; 0x74
    cd54:	cmp	r2, #0
    cd56:	blt.w	cfc0 <_strtod_l+0x648>
    cd5a:	ldr	r3, [sp, #48]	; 0x30
    cd5c:	ldr	r4, [sp, #44]	; 0x2c
    cd5e:	adds	r5, r3, r2
    cd60:	ldr	r0, [sp, #40]	; 0x28
    cd62:	ldr	r3, [sp, #120]	; 0x78
    cd64:	ldr	r1, [pc, #580]	; (cfac <_strtod_l+0x634>)
    cd66:	subs	r2, r2, r0
    cd68:	add	r2, r3
    cd6a:	subs	r2, #1
    cd6c:	cmp	r2, r1
    cd6e:	rsb	r3, r3, #54	; 0x36
    cd72:	bge.w	cf52 <_strtod_l+0x5da>
    cd76:	subs	r1, r1, r2
    cd78:	cmp	r1, #31
    cd7a:	sub.w	r3, r3, r1
    cd7e:	bgt.w	cfce <_strtod_l+0x656>
    cd82:	movs	r2, #1
    cd84:	lsls	r2, r1
    cd86:	str	r2, [sp, #56]	; 0x38
    cd88:	movs	r2, #0
    cd8a:	str	r2, [sp, #76]	; 0x4c
    cd8c:	add.w	r9, r5, r3
    cd90:	add	r4, r3
    cd92:	ldr	r3, [sp, #40]	; 0x28
    cd94:	cmp	r5, r9
    cd96:	mov	r2, r5
    cd98:	add	r4, r3
    cd9a:	it	ge
    cd9c:	movge	r2, r9
    cd9e:	cmp	r2, r4
    cda0:	it	ge
    cda2:	movge	r2, r4
    cda4:	cmp	r2, #0
    cda6:	ble.n	cdb0 <_strtod_l+0x438>
    cda8:	rsb	r9, r2, r9
    cdac:	subs	r4, r4, r2
    cdae:	subs	r5, r5, r2
    cdb0:	ldr	r3, [sp, #48]	; 0x30
    cdb2:	cbz	r3, cde4 <_strtod_l+0x46c>
    cdb4:	mov	r1, sl
    cdb6:	mov	r2, r3
    cdb8:	mov	r0, fp
    cdba:	bl	11df8 <__pow5mult>
    cdbe:	mov	sl, r0
    cdc0:	cmp	r0, #0
    cdc2:	beq.w	d1c8 <_strtod_l+0x850>
    cdc6:	mov	r1, r0
    cdc8:	ldr	r2, [sp, #112]	; 0x70
    cdca:	mov	r0, fp
    cdcc:	bl	11cc8 <__multiply>
    cdd0:	cmp	r0, #0
    cdd2:	beq.w	d1c8 <_strtod_l+0x850>
    cdd6:	str	r0, [sp, #52]	; 0x34
    cdd8:	ldr	r1, [sp, #112]	; 0x70
    cdda:	mov	r0, fp
    cddc:	bl	11aec <_Bfree>
    cde0:	ldr	r2, [sp, #52]	; 0x34
    cde2:	str	r2, [sp, #112]	; 0x70
    cde4:	cmp.w	r9, #0
    cde8:	ble.n	cdfc <_strtod_l+0x484>
    cdea:	mov	r2, r9
    cdec:	ldr	r1, [sp, #112]	; 0x70
    cdee:	mov	r0, fp
    cdf0:	bl	11e98 <__lshift>
    cdf4:	str	r0, [sp, #112]	; 0x70
    cdf6:	cmp	r0, #0
    cdf8:	beq.w	d1ca <_strtod_l+0x852>
    cdfc:	ldr	r3, [sp, #44]	; 0x2c
    cdfe:	cbz	r3, ce12 <_strtod_l+0x49a>
    ce00:	mov	r1, r6
    ce02:	ldr	r2, [sp, #44]	; 0x2c
    ce04:	mov	r0, fp
    ce06:	bl	11df8 <__pow5mult>
    ce0a:	mov	r6, r0
    ce0c:	cmp	r0, #0
    ce0e:	beq.w	d1c8 <_strtod_l+0x850>
    ce12:	cmp	r4, #0
    ce14:	ble.n	ce28 <_strtod_l+0x4b0>
    ce16:	mov	r1, r6
    ce18:	mov	r2, r4
    ce1a:	mov	r0, fp
    ce1c:	bl	11e98 <__lshift>
    ce20:	mov	r6, r0
    ce22:	cmp	r0, #0
    ce24:	beq.w	d1c8 <_strtod_l+0x850>
    ce28:	cmp	r5, #0
    ce2a:	ble.n	ce3e <_strtod_l+0x4c6>
    ce2c:	mov	r1, sl
    ce2e:	mov	r2, r5
    ce30:	mov	r0, fp
    ce32:	bl	11e98 <__lshift>
    ce36:	mov	sl, r0
    ce38:	cmp	r0, #0
    ce3a:	beq.w	d1c8 <_strtod_l+0x850>
    ce3e:	mov	r2, r6
    ce40:	ldr	r1, [sp, #112]	; 0x70
    ce42:	mov	r0, fp
    ce44:	bl	11f8c <__mdiff>
    ce48:	mov	r7, r0
    ce4a:	cmp	r0, #0
    ce4c:	beq.w	d1c8 <_strtod_l+0x850>
    ce50:	movs	r3, #0
    ce52:	ldr	r2, [r0, #12]
    ce54:	str	r3, [r0, #12]
    ce56:	mov	r1, sl
    ce58:	str	r2, [sp, #52]	; 0x34
    ce5a:	bl	11f48 <__mcmp>
    ce5e:	cmp	r0, #0
    ce60:	blt.w	d67e <_strtod_l+0xd06>
    ce64:	beq.w	d5f8 <_strtod_l+0xc80>
    ce68:	mov	r1, sl
    ce6a:	mov	r0, r7
    ce6c:	bl	12280 <__ratio>
    ce70:	vmov	r4, r5, d0
    ce74:	movs	r2, #0
    ce76:	mov.w	r3, #1073741824	; 0x40000000
    ce7a:	vmov	r0, s0
    ce7e:	mov	r1, r5
    ce80:	bl	b154 <__aeabi_dcmple>
    ce84:	cmp	r0, #0
    ce86:	beq.n	cf5c <_strtod_l+0x5e4>
    ce88:	ldr	r3, [sp, #52]	; 0x34
    ce8a:	cmp	r3, #0
    ce8c:	beq.w	cfde <_strtod_l+0x666>
    ce90:	vldr	d7, [pc, #260]	; cf98 <_strtod_l+0x620>
    ce94:	ldr	r3, [sp, #20]
    ce96:	ldr	r5, [pc, #280]	; (cfb0 <_strtod_l+0x638>)
    ce98:	vstr	d7, [sp, #56]	; 0x38
    ce9c:	movs	r4, #0
    ce9e:	mov	r8, r3
    cea0:	ldr.w	r9, [pc, #276]	; cfb8 <_strtod_l+0x640>
    cea4:	ldr	r3, [pc, #268]	; (cfb4 <_strtod_l+0x63c>)
    cea6:	and.w	r9, r8, r9
    ceaa:	cmp	r9, r3
    ceac:	beq.w	d2dc <_strtod_l+0x964>
    ceb0:	ldr	r3, [sp, #40]	; 0x28
    ceb2:	cbz	r3, cf00 <_strtod_l+0x588>
    ceb4:	cmp.w	r9, #111149056	; 0x6a00000
    ceb8:	bhi.n	cf00 <_strtod_l+0x588>
    ceba:	add	r3, pc, #228	; (adr r3, cfa0 <_strtod_l+0x628>)
    cebc:	ldrd	r2, r3, [r3]
    cec0:	ldrd	r0, r1, [sp, #56]	; 0x38
    cec4:	bl	b154 <__aeabi_dcmple>
    cec8:	cbz	r0, cef8 <_strtod_l+0x580>
    ceca:	ldrd	r0, r1, [sp, #56]	; 0x38
    cece:	bl	b20c <__aeabi_d2uiz>
    ced2:	cmp	r0, #0
    ced4:	beq.w	d558 <_strtod_l+0xbe0>
    ced8:	bl	ab70 <__aeabi_ui2d>
    cedc:	strd	r0, r1, [sp, #56]	; 0x38
    cee0:	ldr	r3, [sp, #52]	; 0x34
    cee2:	cmp	r3, #0
    cee4:	bne.w	d54e <_strtod_l+0xbd6>
    cee8:	ldrd	r1, r2, [sp, #56]	; 0x38
    ceec:	add.w	r3, r2, #2147483648	; 0x80000000
    cef0:	str	r1, [sp, #80]	; 0x50
    cef2:	str	r3, [sp, #84]	; 0x54
    cef4:	ldrd	r4, r5, [sp, #80]	; 0x50
    cef8:	add.w	r3, r5, #112197632	; 0x6b00000
    cefc:	rsb	r5, r9, r3
    cf00:	vldr	d0, [sp, #32]
    cf04:	bl	120a0 <__ulp>
    cf08:	mov	r0, r4
    cf0a:	vmov	r2, r3, d0
    cf0e:	mov	r1, r5
    cf10:	bl	ac5c <__aeabi_dmul>
    cf14:	ldrd	r2, r3, [sp, #32]
    cf18:	bl	a8f8 <__adddf3>
    cf1c:	strd	r0, r1, [sp, #16]
    cf20:	mov	r4, r1
    cf22:	ldr	r3, [sp, #40]	; 0x28
    cf24:	cbnz	r3, cf30 <_strtod_l+0x5b8>
    cf26:	ldr	r3, [pc, #144]	; (cfb8 <_strtod_l+0x640>)
    cf28:	ands	r3, r4
    cf2a:	cmp	r9, r3
    cf2c:	beq.w	d34c <_strtod_l+0x9d4>
    cf30:	ldr	r1, [sp, #112]	; 0x70
    cf32:	mov	r0, fp
    cf34:	bl	11aec <_Bfree>
    cf38:	mov	r1, r6
    cf3a:	mov	r0, fp
    cf3c:	bl	11aec <_Bfree>
    cf40:	mov	r1, sl
    cf42:	mov	r0, fp
    cf44:	bl	11aec <_Bfree>
    cf48:	mov	r1, r7
    cf4a:	mov	r0, fp
    cf4c:	bl	11aec <_Bfree>
    cf50:	b.n	cd02 <_strtod_l+0x38a>
    cf52:	movs	r2, #0
    cf54:	str	r2, [sp, #76]	; 0x4c
    cf56:	movs	r2, #1
    cf58:	str	r2, [sp, #56]	; 0x38
    cf5a:	b.n	cd8c <_strtod_l+0x414>
    cf5c:	ldr	r3, [pc, #92]	; (cfbc <_strtod_l+0x644>)
    cf5e:	mov	r0, r4
    cf60:	mov	r1, r5
    cf62:	movs	r2, #0
    cf64:	bl	ac5c <__aeabi_dmul>
    cf68:	ldr	r3, [sp, #52]	; 0x34
    cf6a:	strd	r0, r1, [sp, #56]	; 0x38
    cf6e:	cmp	r3, #0
    cf70:	bne.n	d028 <_strtod_l+0x6b0>
    cf72:	add.w	r3, r1, #2147483648	; 0x80000000
    cf76:	str	r0, [sp, #64]	; 0x40
    cf78:	str	r3, [sp, #68]	; 0x44
    cf7a:	ldr	r3, [sp, #20]
    cf7c:	ldrd	r4, r5, [sp, #64]	; 0x40
    cf80:	mov	r8, r3
    cf82:	b.n	cea0 <_strtod_l+0x528>
    cf84:	mov.w	r9, #1
    cf88:	cmp	r0, #0
    cf8a:	bne.n	d03e <_strtod_l+0x6c6>
    cf8c:	ldr	r3, [sp, #40]	; 0x28
    cf8e:	cmp	r3, #0
    cf90:	beq.w	c9e4 <_strtod_l+0x6c>
    cf94:	mov	r4, r0
    cf96:	b.n	cbf4 <_strtod_l+0x27c>
    cf98:	.word	0x00000000
    cf9c:	.word	0x3ff00000
    cfa0:	.word	0xffc00000
    cfa4:	.word	0x41dfffff
    cfa8:	.word	0x00013a58
    cfac:	.word	0xfffffc02
    cfb0:	.word	0x3ff00000
    cfb4:	.word	0x7fe00000
    cfb8:	.word	0x7ff00000
    cfbc:	.word	0x3fe00000
    cfc0:	ldr	r3, [sp, #44]	; 0x2c
    cfc2:	ldr	r5, [sp, #48]	; 0x30
    cfc4:	subs	r4, r3, r2
    cfc6:	b.n	cd60 <_strtod_l+0x3e8>
    cfc8:	mov.w	r9, #1
    cfcc:	b.n	ca84 <_strtod_l+0x10c>
    cfce:	ldr	r1, [pc, #736]	; (d2b0 <_strtod_l+0x938>)
    cfd0:	subs	r1, r1, r2
    cfd2:	movs	r2, #1
    cfd4:	lsl.w	r1, r2, r1
    cfd8:	str	r1, [sp, #76]	; 0x4c
    cfda:	str	r2, [sp, #56]	; 0x38
    cfdc:	b.n	cd8c <_strtod_l+0x414>
    cfde:	ldrd	r1, r2, [sp, #16]
    cfe2:	cmp	r1, #0
    cfe4:	bne.w	d17a <_strtod_l+0x802>
    cfe8:	ubfx	r3, r2, #0, #20
    cfec:	mov	r8, r2
    cfee:	cmp	r3, #0
    cff0:	bne.w	d186 <_strtod_l+0x80e>
    cff4:	movs	r2, #0
    cff6:	ldr	r3, [pc, #700]	; (d2b4 <_strtod_l+0x93c>)
    cff8:	mov	r0, r4
    cffa:	mov	r1, r5
    cffc:	bl	b140 <__aeabi_dcmplt>
    d000:	cmp	r0, #0
    d002:	bne.w	d702 <_strtod_l+0xd8a>
    d006:	movs	r2, #0
    d008:	ldr	r3, [pc, #684]	; (d2b8 <_strtod_l+0x940>)
    d00a:	mov	r0, r4
    d00c:	mov	r1, r5
    d00e:	bl	ac5c <__aeabi_dmul>
    d012:	mov	r2, r1
    d014:	mov	r1, r0
    d016:	strd	r1, r2, [sp, #56]	; 0x38
    d01a:	add.w	r3, r2, #2147483648	; 0x80000000
    d01e:	str	r0, [sp, #96]	; 0x60
    d020:	str	r3, [sp, #100]	; 0x64
    d022:	ldrd	r4, r5, [sp, #96]	; 0x60
    d026:	b.n	cea0 <_strtod_l+0x528>
    d028:	vldr	d7, [sp, #56]	; 0x38
    d02c:	vstr	d7, [sp, #64]	; 0x40
    d030:	b.n	cf7a <_strtod_l+0x602>
    d032:	mov.w	ip, #1
    d036:	adds	r3, r6, #2
    d038:	str	r3, [sp, #108]	; 0x6c
    d03a:	ldrb	r3, [r6, #2]
    d03c:	b.n	cc0c <_strtod_l+0x294>
    d03e:	movs	r4, #0
    d040:	b.n	cbf4 <_strtod_l+0x27c>
    d042:	cmp.w	r9, #0
    d046:	bne.w	c9e4 <_strtod_l+0x6c>
    d04a:	subs	r3, #73	; 0x49
    d04c:	cmp	r3, #37	; 0x25
    d04e:	bhi.w	c9e4 <_strtod_l+0x6c>
    d052:	add	r2, pc, #4	; (adr r2, d058 <_strtod_l+0x6e0>)
    d054:	ldr.w	pc, [r2, r3, lsl #2]
    d058:	.word	0x0000cbbd
    d05c:	.word	0x0000c9e5
    d060:	.word	0x0000c9e5
    d064:	.word	0x0000c9e5
    d068:	.word	0x0000c9e5
    d06c:	.word	0x0000d195
    d070:	.word	0x0000c9e5
    d074:	.word	0x0000c9e5
    d078:	.word	0x0000c9e5
    d07c:	.word	0x0000c9e5
    d080:	.word	0x0000c9e5
    d084:	.word	0x0000c9e5
    d088:	.word	0x0000c9e5
    d08c:	.word	0x0000c9e5
    d090:	.word	0x0000c9e5
    d094:	.word	0x0000c9e5
    d098:	.word	0x0000c9e5
    d09c:	.word	0x0000c9e5
    d0a0:	.word	0x0000c9e5
    d0a4:	.word	0x0000c9e5
    d0a8:	.word	0x0000c9e5
    d0ac:	.word	0x0000c9e5
    d0b0:	.word	0x0000c9e5
    d0b4:	.word	0x0000c9e5
    d0b8:	.word	0x0000c9e5
    d0bc:	.word	0x0000c9e5
    d0c0:	.word	0x0000c9e5
    d0c4:	.word	0x0000c9e5
    d0c8:	.word	0x0000c9e5
    d0cc:	.word	0x0000c9e5
    d0d0:	.word	0x0000c9e5
    d0d4:	.word	0x0000c9e5
    d0d8:	.word	0x0000cbbd
    d0dc:	.word	0x0000c9e5
    d0e0:	.word	0x0000c9e5
    d0e4:	.word	0x0000c9e5
    d0e8:	.word	0x0000c9e5
    d0ec:	.word	0x0000d195
    d0f0:	cmp.w	r6, #308	; 0x134
    d0f4:	bgt.w	d336 <_strtod_l+0x9be>
    d0f8:	asrs	r6, r6, #4
    d0fa:	cmp	r6, #1
    d0fc:	ldr.w	r9, [pc, #472]	; d2d8 <_strtod_l+0x960>
    d100:	ble.w	d736 <_strtod_l+0xdbe>
    d104:	ldrd	r0, r1, [sp, #16]
    d108:	movs	r3, #0
    d10a:	mov	r7, r9
    d10c:	mov	r8, r3
    d10e:	tst.w	r6, #1
    d112:	add.w	r8, r8, #1
    d116:	mov.w	r6, r6, asr #1
    d11a:	beq.n	d126 <_strtod_l+0x7ae>
    d11c:	ldrd	r2, r3, [r7]
    d120:	bl	ac5c <__aeabi_dmul>
    d124:	movs	r3, #1
    d126:	cmp	r6, #1
    d128:	add.w	r7, r7, #8
    d12c:	bne.n	d10e <_strtod_l+0x796>
    d12e:	cmp	r3, #0
    d130:	bne.w	d7fa <_strtod_l+0xe82>
    d134:	ldr	r3, [sp, #20]
    d136:	sub.w	r3, r3, #55574528	; 0x3500000
    d13a:	str	r3, [sp, #20]
    d13c:	add.w	r8, r9, r8, lsl #3
    d140:	ldrd	r2, r3, [sp, #16]
    d144:	ldrd	r0, r1, [r8]
    d148:	bl	ac5c <__aeabi_dmul>
    d14c:	bic.w	r3, r1, #2147483648	; 0x80000000
    d150:	lsrs	r3, r3, #20
    d152:	ldr	r2, [pc, #360]	; (d2bc <_strtod_l+0x944>)
    d154:	lsls	r3, r3, #20
    d156:	cmp	r3, r2
    d158:	strd	r0, r1, [sp, #16]
    d15c:	bhi.w	d336 <_strtod_l+0x9be>
    d160:	sub.w	r2, r2, #1048576	; 0x100000
    d164:	cmp	r3, r2
    d166:	bls.w	d6f8 <_strtod_l+0xd80>
    d16a:	ldr	r3, [pc, #340]	; (d2c0 <_strtod_l+0x948>)
    d16c:	str	r3, [sp, #20]
    d16e:	movs	r3, #0
    d170:	str	r3, [sp, #40]	; 0x28
    d172:	mov.w	r3, #4294967295
    d176:	str	r3, [sp, #16]
    d178:	b.n	ccd4 <_strtod_l+0x35c>
    d17a:	ldrd	r1, r2, [sp, #16]
    d17e:	cmp	r1, #1
    d180:	beq.w	d562 <_strtod_l+0xbea>
    d184:	mov	r8, r2
    d186:	vldr	d7, [pc, #288]	; d2a8 <_strtod_l+0x930>
    d18a:	movs	r4, #0
    d18c:	ldr	r5, [pc, #308]	; (d2c4 <_strtod_l+0x94c>)
    d18e:	vstr	d7, [sp, #56]	; 0x38
    d192:	b.n	cea0 <_strtod_l+0x528>
    d194:	add	r0, sp, #108	; 0x6c
    d196:	ldr	r1, [pc, #304]	; (d2c8 <_strtod_l+0x950>)
    d198:	bl	11858 <__match>
    d19c:	cmp	r0, #0
    d19e:	beq.w	c9e4 <_strtod_l+0x6c>
    d1a2:	ldr	r3, [sp, #108]	; 0x6c
    d1a4:	ldrb	r3, [r3, #0]
    d1a6:	cmp	r3, #40	; 0x28
    d1a8:	beq.w	d7b0 <_strtod_l+0xe38>
    d1ac:	ldr	r3, [pc, #284]	; (d2cc <_strtod_l+0x954>)
    d1ae:	str	r3, [sp, #20]
    d1b0:	movs	r3, #0
    d1b2:	str	r3, [sp, #16]
    d1b4:	b.n	cbe8 <_strtod_l+0x270>
    d1b6:	str	r6, [sp, #108]	; 0x6c
    d1b8:	movs	r2, #0
    d1ba:	b.n	ca92 <_strtod_l+0x11a>
    d1bc:	mov.w	ip, #0
    d1c0:	b.n	d036 <_strtod_l+0x6be>
    d1c2:	adds	r3, #1
    d1c4:	bne.w	d796 <_strtod_l+0xe1e>
    d1c8:	ldr	r0, [sp, #112]	; 0x70
    d1ca:	ldr	r3, [pc, #260]	; (d2d0 <_strtod_l+0x958>)
    d1cc:	str	r3, [sp, #20]
    d1ce:	movs	r2, #0
    d1d0:	str	r2, [sp, #16]
    d1d2:	ldrd	r8, r9, [sp, #16]
    d1d6:	movs	r3, #34	; 0x22
    d1d8:	str.w	r3, [fp]
    d1dc:	mov	r1, r0
    d1de:	mov	r0, fp
    d1e0:	bl	11aec <_Bfree>
    d1e4:	mov	r1, r6
    d1e6:	mov	r0, fp
    d1e8:	bl	11aec <_Bfree>
    d1ec:	mov	r1, sl
    d1ee:	mov	r0, fp
    d1f0:	bl	11aec <_Bfree>
    d1f4:	ldr	r1, [sp, #72]	; 0x48
    d1f6:	mov	r0, fp
    d1f8:	bl	11aec <_Bfree>
    d1fc:	mov	r1, r7
    d1fe:	mov	r0, fp
    d200:	bl	11aec <_Bfree>
    d204:	b.n	caa8 <_strtod_l+0x130>
    d206:	ldr	r2, [sp, #28]
    d208:	str	r5, [sp, #8]
    d20a:	add	r3, sp, #112	; 0x70
    d20c:	str	r2, [sp, #4]
    d20e:	str	r3, [sp, #0]
    d210:	ldr	r2, [pc, #192]	; (d2d4 <_strtod_l+0x95c>)
    d212:	add	r3, sp, #116	; 0x74
    d214:	add	r1, sp, #108	; 0x6c
    d216:	mov	r0, fp
    d218:	bl	11348 <__gethex>
    d21c:	ands.w	r6, r0, #7
    d220:	mov	r5, r0
    d222:	beq.w	caa0 <_strtod_l+0x128>
    d226:	cmp	r6, #6
    d228:	bne.w	d4d8 <_strtod_l+0xb60>
    d22c:	adds	r4, #1
    d22e:	movs	r3, #0
    d230:	str	r4, [sp, #108]	; 0x6c
    d232:	mov.w	r8, #0
    d236:	mov.w	r9, #0
    d23a:	str	r3, [sp, #28]
    d23c:	b.n	caa8 <_strtod_l+0x130>
    d23e:	ldr.w	r1, [sl]
    d242:	mov	r0, r4
    d244:	mov	r2, r9
    d246:	bl	c89c <strncmp>
    d24a:	cbz	r0, d260 <_strtod_l+0x8e8>
    d24c:	mov.w	sl, #0
    d250:	mov	r3, r7
    d252:	mov	r8, sl
    d254:	mov	r5, sl
    d256:	mov	r0, sl
    d258:	mov	r7, sl
    d25a:	mov	r4, sl
    d25c:	mov	r9, sl
    d25e:	b.n	ca84 <_strtod_l+0x10c>
    d260:	ldr	r3, [sp, #108]	; 0x6c
    d262:	add.w	r2, r3, r9
    d266:	str	r2, [sp, #108]	; 0x6c
    d268:	ldrb.w	r3, [r3, r9]
    d26c:	cmp	r3, #48	; 0x30
    d26e:	bne.n	d27e <_strtod_l+0x906>
    d270:	adds	r2, #1
    d272:	str	r2, [sp, #108]	; 0x6c
    d274:	ldrb	r3, [r2, #0]
    d276:	cmp	r3, #48	; 0x30
    d278:	add.w	r0, r0, #1
    d27c:	beq.n	d270 <_strtod_l+0x8f8>
    d27e:	sub.w	r2, r3, #49	; 0x31
    d282:	cmp	r2, #8
    d284:	bls.w	d580 <_strtod_l+0xc08>
    d288:	mov.w	sl, #0
    d28c:	cmp	r3, #101	; 0x65
    d28e:	mov	r8, sl
    d290:	mov	r5, sl
    d292:	mov	r7, sl
    d294:	beq.w	cf84 <_strtod_l+0x60c>
    d298:	mov	r4, sl
    d29a:	mov.w	r9, #1
    d29e:	b.w	ca8a <_strtod_l+0x112>
    d2a2:	nop
    d2a4:	nop.w
    d2a8:	.word	0x00000000
    d2ac:	.word	0x3ff00000
    d2b0:	.word	0xfffffbe2
    d2b4:	.word	0x3ff00000
    d2b8:	.word	0x3fe00000
    d2bc:	.word	0x7ca00000
    d2c0:	.word	0x7fefffff
    d2c4:	.word	0xbff00000
    d2c8:	.word	0x0001376c
    d2cc:	.word	0xfff80000
    d2d0:	.word	0x7ff00000
    d2d4:	.word	0x0001374c
    d2d8:	.word	0x00013b20
    d2dc:	sub.w	r3, r8, #55574528	; 0x3500000
    d2e0:	str	r3, [sp, #20]
    d2e2:	vldr	d7, [sp, #16]
    d2e6:	vmov.f32	s0, s14
    d2ea:	vmov.f32	s1, s15
    d2ee:	bl	120a0 <__ulp>
    d2f2:	mov	r0, r4
    d2f4:	vmov	r2, r3, d0
    d2f8:	mov	r1, r5
    d2fa:	bl	ac5c <__aeabi_dmul>
    d2fe:	ldrd	r2, r3, [sp, #16]
    d302:	bl	a8f8 <__adddf3>
    d306:	bic.w	r3, r1, #2147483648	; 0x80000000
    d30a:	strd	r0, r1, [sp, #16]
    d30e:	lsrs	r3, r3, #20
    d310:	ldr	r2, [pc, #684]	; (d5c0 <_strtod_l+0xc48>)
    d312:	ldrd	r0, r1, [sp, #32]
    d316:	lsls	r3, r3, #20
    d318:	cmp	r3, r2
    d31a:	strd	r0, r1, [sp, #88]	; 0x58
    d31e:	bls.w	d496 <_strtod_l+0xb1e>
    d322:	ldr	r3, [pc, #672]	; (d5c4 <_strtod_l+0xc4c>)
    d324:	cmp	r1, r3
    d326:	beq.w	d6ee <_strtod_l+0xd76>
    d32a:	ldr	r3, [pc, #664]	; (d5c4 <_strtod_l+0xc4c>)
    d32c:	str	r3, [sp, #20]
    d32e:	mov.w	r3, #4294967295
    d332:	str	r3, [sp, #16]
    d334:	b.n	cf30 <_strtod_l+0x5b8>
    d336:	ldr	r3, [pc, #656]	; (d5c8 <_strtod_l+0xc50>)
    d338:	str	r3, [sp, #20]
    d33a:	movs	r2, #0
    d33c:	movs	r3, #34	; 0x22
    d33e:	str	r2, [sp, #16]
    d340:	ldrd	r8, r9, [sp, #16]
    d344:	str.w	r3, [fp]
    d348:	b.w	caa8 <_strtod_l+0x130>
    d34c:	ldrd	r8, r9, [sp, #56]	; 0x38
    d350:	mov	r1, r9
    d352:	mov	r0, r8
    d354:	bl	b1bc <__aeabi_d2iz>
    d358:	bl	ab90 <__aeabi_i2d>
    d35c:	mov	r3, r1
    d35e:	mov	r2, r0
    d360:	mov	r1, r9
    d362:	mov	r0, r8
    d364:	bl	a8f4 <__aeabi_dsub>
    d368:	ldr	r3, [sp, #52]	; 0x34
    d36a:	mov	r8, r0
    d36c:	mov	r9, r1
    d36e:	cbnz	r3, d392 <_strtod_l+0xa1a>
    d370:	ldr	r3, [sp, #16]
    d372:	cbnz	r3, d392 <_strtod_l+0xa1a>
    d374:	ubfx	r4, r4, #0, #20
    d378:	cbnz	r4, d392 <_strtod_l+0xa1a>
    d37a:	add	r3, pc, #548	; (adr r3, d5a0 <_strtod_l+0xc28>)
    d37c:	ldrd	r2, r3, [r3]
    d380:	bl	b140 <__aeabi_dcmplt>
    d384:	cmp	r0, #0
    d386:	beq.w	cf30 <_strtod_l+0x5b8>
    d38a:	ldrd	r8, r9, [sp, #16]
    d38e:	ldr	r0, [sp, #112]	; 0x70
    d390:	b.n	d1dc <_strtod_l+0x864>
    d392:	add	r3, pc, #532	; (adr r3, d5a8 <_strtod_l+0xc30>)
    d394:	ldrd	r2, r3, [r3]
    d398:	mov	r0, r8
    d39a:	mov	r1, r9
    d39c:	bl	b140 <__aeabi_dcmplt>
    d3a0:	cmp	r0, #0
    d3a2:	bne.n	d38a <_strtod_l+0xa12>
    d3a4:	mov	r0, r8
    d3a6:	mov	r1, r9
    d3a8:	add	r3, pc, #516	; (adr r3, d5b0 <_strtod_l+0xc38>)
    d3aa:	ldrd	r2, r3, [r3]
    d3ae:	bl	b17c <__aeabi_dcmpgt>
    d3b2:	cmp	r0, #0
    d3b4:	beq.w	cf30 <_strtod_l+0x5b8>
    d3b8:	b.n	d38a <_strtod_l+0xa12>
    d3ba:	beq.w	ccd0 <_strtod_l+0x358>
    d3be:	rsb	r6, r9, #0
    d3c2:	ands.w	r2, r6, #15
    d3c6:	beq.n	d3de <_strtod_l+0xa66>
    d3c8:	ldr	r3, [pc, #512]	; (d5cc <_strtod_l+0xc54>)
    d3ca:	add.w	r3, r3, r2, lsl #3
    d3ce:	ldrd	r0, r1, [sp, #16]
    d3d2:	ldrd	r2, r3, [r3]
    d3d6:	bl	aeb0 <__aeabi_ddiv>
    d3da:	strd	r0, r1, [sp, #16]
    d3de:	asrs	r6, r6, #4
    d3e0:	beq.w	ccd0 <_strtod_l+0x358>
    d3e4:	cmp	r6, #31
    d3e6:	bgt.n	d45a <_strtod_l+0xae2>
    d3e8:	ands.w	r3, r6, #16
    d3ec:	beq.w	d760 <_strtod_l+0xde8>
    d3f0:	movs	r3, #106	; 0x6a
    d3f2:	cmp	r6, #0
    d3f4:	str	r3, [sp, #40]	; 0x28
    d3f6:	ble.n	d420 <_strtod_l+0xaa8>
    d3f8:	ldrd	r0, r1, [sp, #16]
    d3fc:	ldr	r7, [pc, #464]	; (d5d0 <_strtod_l+0xc58>)
    d3fe:	movs	r3, #0
    d400:	lsls	r2, r6, #31
    d402:	bpl.n	d40e <_strtod_l+0xa96>
    d404:	ldrd	r2, r3, [r7]
    d408:	bl	ac5c <__aeabi_dmul>
    d40c:	movs	r3, #1
    d40e:	asrs	r6, r6, #1
    d410:	add.w	r7, r7, #8
    d414:	bne.n	d400 <_strtod_l+0xa88>
    d416:	cmp	r3, #0
    d418:	bne.w	d800 <_strtod_l+0xe88>
    d41c:	ldr	r3, [sp, #40]	; 0x28
    d41e:	cbz	r3, d448 <_strtod_l+0xad0>
    d420:	ldrd	r1, r2, [sp, #16]
    d424:	ubfx	r3, r2, #20, #11
    d428:	rsb	r3, r3, #107	; 0x6b
    d42c:	cmp	r3, #0
    d42e:	mov	r1, r2
    d430:	ble.n	d448 <_strtod_l+0xad0>
    d432:	cmp	r3, #31
    d434:	ble.w	d7ea <_strtod_l+0xe72>
    d438:	movs	r2, #0
    d43a:	cmp	r3, #52	; 0x34
    d43c:	str	r2, [sp, #16]
    d43e:	ble.w	d806 <_strtod_l+0xe8e>
    d442:	mov.w	r3, #57671680	; 0x3700000
    d446:	str	r3, [sp, #20]
    d448:	movs	r2, #0
    d44a:	movs	r3, #0
    d44c:	ldrd	r0, r1, [sp, #16]
    d450:	bl	b12c <__aeabi_dcmpeq>
    d454:	cmp	r0, #0
    d456:	beq.w	ccd4 <_strtod_l+0x35c>
    d45a:	movs	r3, #34	; 0x22
    d45c:	str.w	r3, [fp]
    d460:	mov.w	r8, #0
    d464:	mov.w	r9, #0
    d468:	b.w	caa8 <_strtod_l+0x130>
    d46c:	ldr	r1, [sp, #108]	; 0x6c
    d46e:	adds	r4, #1
    d470:	cmp	r0, #8
    d472:	ble.w	d592 <_strtod_l+0xc1a>
    d476:	cmp	r4, #16
    d478:	itt	le
    d47a:	addle.w	r8, r8, r8, lsl #2
    d47e:	addle.w	r8, r2, r8, lsl #1
    d482:	movs	r0, #0
    d484:	adds	r3, r1, #1
    d486:	str	r3, [sp, #108]	; 0x6c
    d488:	ldrb	r3, [r1, #1]
    d48a:	b.w	cacc <_strtod_l+0x154>
    d48e:	movw	r2, #19999	; 0x4e1f
    d492:	b.w	cc7e <_strtod_l+0x306>
    d496:	ldr	r3, [sp, #20]
    d498:	add.w	r4, r3, #55574528	; 0x3500000
    d49c:	str	r4, [sp, #20]
    d49e:	b.n	cf22 <_strtod_l+0x5aa>
    d4a0:	ldr	r6, [sp, #44]	; 0x2c
    d4a2:	rsb	r3, r4, #37	; 0x25
    d4a6:	cmp	r6, r3
    d4a8:	bgt.w	cc9c <_strtod_l+0x324>
    d4ac:	ldr	r5, [pc, #284]	; (d5cc <_strtod_l+0xc54>)
    d4ae:	rsb	r4, r4, #15
    d4b2:	add.w	r1, r5, r4, lsl #3
    d4b6:	subs	r4, r6, r4
    d4b8:	ldrd	r2, r3, [sp, #16]
    d4bc:	ldrd	r0, r1, [r1]
    d4c0:	add.w	r5, r5, r4, lsl #3
    d4c4:	bl	ac5c <__aeabi_dmul>
    d4c8:	ldrd	r2, r3, [r5]
    d4cc:	bl	ac5c <__aeabi_dmul>
    d4d0:	mov	r8, r0
    d4d2:	mov	r9, r1
    d4d4:	b.w	caa8 <_strtod_l+0x130>
    d4d8:	ldr	r2, [sp, #112]	; 0x70
    d4da:	cbz	r2, d4ec <_strtod_l+0xb74>
    d4dc:	movs	r1, #53	; 0x35
    d4de:	add	r0, sp, #120	; 0x78
    d4e0:	bl	122e0 <__copybits>
    d4e4:	mov	r0, fp
    d4e6:	ldr	r1, [sp, #112]	; 0x70
    d4e8:	bl	11aec <_Bfree>
    d4ec:	cmp	r6, #6
    d4ee:	bhi.n	d508 <_strtod_l+0xb90>
    d4f0:	tbb	[pc, r6]
    d4f4:	.word	0x1318211d
    d4f8:	.short	0x2104
    d4fa:	.byte	0x1d
    d4fb:	.byte	0x00
    d4fc:	mvn.w	r3, #2147483648	; 0x80000000
    d500:	str	r3, [sp, #20]
    d502:	mov.w	r3, #4294967295
    d506:	str	r3, [sp, #16]
    d508:	lsls	r1, r5, #28
    d50a:	bpl.w	cbe8 <_strtod_l+0x270>
    d50e:	ldr	r3, [sp, #20]
    d510:	orr.w	r3, r3, #2147483648	; 0x80000000
    d514:	str	r3, [sp, #20]
    d516:	b.w	cbe8 <_strtod_l+0x270>
    d51a:	ldr	r3, [pc, #172]	; (d5c8 <_strtod_l+0xc50>)
    d51c:	str	r3, [sp, #20]
    d51e:	movs	r3, #0
    d520:	str	r3, [sp, #16]
    d522:	b.n	d508 <_strtod_l+0xb90>
    d524:	ldr	r3, [sp, #120]	; 0x78
    d526:	str	r3, [sp, #16]
    d528:	ldr	r3, [sp, #124]	; 0x7c
    d52a:	str	r3, [sp, #20]
    d52c:	b.n	d508 <_strtod_l+0xb90>
    d52e:	movs	r3, #0
    d530:	str	r3, [sp, #20]
    d532:	str	r3, [sp, #16]
    d534:	b.n	d508 <_strtod_l+0xb90>
    d536:	ldr	r2, [sp, #116]	; 0x74
    d538:	ldr	r3, [sp, #124]	; 0x7c
    d53a:	ldr	r1, [sp, #120]	; 0x78
    d53c:	str	r1, [sp, #16]
    d53e:	addw	r2, r2, #1075	; 0x433
    d542:	bic.w	r3, r3, #1048576	; 0x100000
    d546:	orr.w	r3, r3, r2, lsl #20
    d54a:	str	r3, [sp, #20]
    d54c:	b.n	d508 <_strtod_l+0xb90>
    d54e:	vldr	d7, [sp, #56]	; 0x38
    d552:	vstr	d7, [sp, #80]	; 0x50
    d556:	b.n	cef4 <_strtod_l+0x57c>
    d558:	vldr	d7, [pc, #92]	; d5b8 <_strtod_l+0xc40>
    d55c:	vstr	d7, [sp, #56]	; 0x38
    d560:	b.n	cee0 <_strtod_l+0x568>
    d562:	ldrd	r1, r2, [sp, #16]
    d566:	mov	r8, r2
    d568:	cmp	r2, #0
    d56a:	bne.w	d186 <_strtod_l+0x80e>
    d56e:	movs	r3, #34	; 0x22
    d570:	str.w	r3, [fp]
    d574:	ldr	r0, [sp, #112]	; 0x70
    d576:	mov.w	r8, #0
    d57a:	mov.w	r9, #0
    d57e:	b.n	d1dc <_strtod_l+0x864>
    d580:	ldr	r2, [sp, #108]	; 0x6c
    d582:	str	r2, [sp, #32]
    d584:	movs	r5, #0
    d586:	subs	r3, #48	; 0x30
    d588:	adds	r7, r0, #1
    d58a:	mov	r1, r2
    d58c:	mov	sl, r5
    d58e:	mov	r8, r5
    d590:	movs	r4, #1
    d592:	add.w	r5, r5, r5, lsl #2
    d596:	add.w	r5, r3, r5, lsl #1
    d59a:	movs	r0, #0
    d59c:	b.n	d484 <_strtod_l+0xb0c>
    d59e:	nop
    d5a0:	.word	0x94a03595
    d5a4:	.word	0x3fcfffff
    d5a8:	.word	0x94a03595
    d5ac:	.word	0x3fdfffff
    d5b0:	.word	0x35afe535
    d5b4:	.word	0x3fe00000
    d5b8:	.word	0x00000000
    d5bc:	.word	0x3ff00000
    d5c0:	.word	0x7c9fffff
    d5c4:	.word	0x7fefffff
    d5c8:	.word	0x7ff00000
    d5cc:	.word	0x00013a58
    d5d0:	.word	0x00013788
    d5d4:	ldr	r1, [sp, #44]	; 0x2c
    d5d6:	cmn.w	r1, #22
    d5da:	blt.w	cc9c <_strtod_l+0x324>
    d5de:	ldr	r2, [pc, #600]	; (d838 <_strtod_l+0xec0>)
    d5e0:	sub.w	r2, r2, r1, lsl #3
    d5e4:	ldrd	r2, r3, [r2]
    d5e8:	ldrd	r0, r1, [sp, #16]
    d5ec:	bl	aeb0 <__aeabi_ddiv>
    d5f0:	mov	r8, r0
    d5f2:	mov	r9, r1
    d5f4:	b.w	caa8 <_strtod_l+0x130>
    d5f8:	ldr	r3, [sp, #52]	; 0x34
    d5fa:	ldrd	r8, r9, [sp, #32]
    d5fe:	cmp	r3, #0
    d600:	beq.w	d714 <_strtod_l+0xd9c>
    d604:	ldrd	r4, r5, [sp, #16]
    d608:	ldr	r3, [pc, #560]	; (d83c <_strtod_l+0xec4>)
    d60a:	ubfx	r1, r5, #0, #20
    d60e:	cmp	r1, r3
    d610:	mov	r2, r5
    d612:	beq.w	d76a <_strtod_l+0xdf2>
    d616:	ldr	r3, [sp, #76]	; 0x4c
    d618:	cmp	r3, #0
    d61a:	beq.w	d72c <_strtod_l+0xdb4>
    d61e:	ldr	r2, [sp, #20]
    d620:	tst	r3, r2
    d622:	beq.n	d646 <_strtod_l+0xcce>
    d624:	ldr	r3, [sp, #52]	; 0x34
    d626:	ldr	r2, [sp, #40]	; 0x28
    d628:	ldrd	r0, r1, [sp, #16]
    d62c:	cmp	r3, #0
    d62e:	beq.w	d73c <_strtod_l+0xdc4>
    d632:	bl	c93c <sulp>
    d636:	mov	r2, r0
    d638:	mov	r3, r1
    d63a:	mov	r0, r8
    d63c:	mov	r1, r9
    d63e:	bl	a8f8 <__adddf3>
    d642:	mov	r8, r0
    d644:	mov	r9, r1
    d646:	ldr	r3, [sp, #40]	; 0x28
    d648:	cbz	r3, d67a <_strtod_l+0xd02>
    d64a:	ldr	r3, [pc, #500]	; (d840 <_strtod_l+0xec8>)
    d64c:	str	r3, [sp, #92]	; 0x5c
    d64e:	movs	r3, #0
    d650:	str	r3, [sp, #88]	; 0x58
    d652:	ldrd	r2, r3, [sp, #88]	; 0x58
    d656:	mov	r0, r8
    d658:	mov	r1, r9
    d65a:	bl	ac5c <__aeabi_dmul>
    d65e:	mov	r3, r0
    d660:	mov	r4, r1
    d662:	mov	r8, r0
    d664:	mov	r9, r1
    d666:	strd	r3, r4, [sp, #16]
    d66a:	cbnz	r1, d67a <_strtod_l+0xd02>
    d66c:	ldr	r3, [sp, #16]
    d66e:	cbnz	r3, d67a <_strtod_l+0xd02>
    d670:	movs	r3, #34	; 0x22
    d672:	ldr	r0, [sp, #112]	; 0x70
    d674:	str.w	r3, [fp]
    d678:	b.n	d1dc <_strtod_l+0x864>
    d67a:	ldr	r0, [sp, #112]	; 0x70
    d67c:	b.n	d1dc <_strtod_l+0x864>
    d67e:	ldr	r3, [sp, #52]	; 0x34
    d680:	ldrd	r8, r9, [sp, #32]
    d684:	cmp	r3, #0
    d686:	bne.n	d646 <_strtod_l+0xcce>
    d688:	ldrd	r1, r2, [sp, #16]
    d68c:	cmp	r1, #0
    d68e:	bne.n	d646 <_strtod_l+0xcce>
    d690:	ubfx	r3, r2, #0, #20
    d694:	mov	r4, r2
    d696:	cmp	r3, #0
    d698:	bne.n	d646 <_strtod_l+0xcce>
    d69a:	bic.w	r3, r2, #2147483648	; 0x80000000
    d69e:	lsrs	r3, r3, #20
    d6a0:	lsls	r3, r3, #20
    d6a2:	cmp.w	r3, #112197632	; 0x6b00000
    d6a6:	bls.n	d646 <_strtod_l+0xcce>
    d6a8:	ldr	r3, [r7, #20]
    d6aa:	cbnz	r3, d6b2 <_strtod_l+0xd3a>
    d6ac:	ldr	r3, [r7, #16]
    d6ae:	cmp	r3, #1
    d6b0:	ble.n	d646 <_strtod_l+0xcce>
    d6b2:	mov	r1, r7
    d6b4:	movs	r2, #1
    d6b6:	mov	r0, fp
    d6b8:	bl	11e98 <__lshift>
    d6bc:	mov	r1, sl
    d6be:	mov	r7, r0
    d6c0:	bl	11f48 <__mcmp>
    d6c4:	cmp	r0, #0
    d6c6:	ble.n	d646 <_strtod_l+0xcce>
    d6c8:	ldr	r3, [sp, #40]	; 0x28
    d6ca:	cmp	r3, #0
    d6cc:	bne.w	d7d4 <_strtod_l+0xe5c>
    d6d0:	ldr	r3, [pc, #368]	; (d844 <_strtod_l+0xecc>)
    d6d2:	ands	r3, r4
    d6d4:	sub.w	r3, r3, #1048576	; 0x100000
    d6d8:	mvn.w	r3, r3, lsr #20
    d6dc:	mvn.w	r3, r3, lsl #20
    d6e0:	str	r3, [sp, #20]
    d6e2:	mov.w	r3, #4294967295
    d6e6:	str	r3, [sp, #16]
    d6e8:	ldrd	r8, r9, [sp, #16]
    d6ec:	b.n	d646 <_strtod_l+0xcce>
    d6ee:	ldr	r3, [sp, #88]	; 0x58
    d6f0:	adds	r3, #1
    d6f2:	bne.w	d32a <_strtod_l+0x9b2>
    d6f6:	b.n	d1c8 <_strtod_l+0x850>
    d6f8:	add.w	r3, r1, #55574528	; 0x3500000
    d6fc:	str	r3, [sp, #20]
    d6fe:	b.w	ccd0 <_strtod_l+0x358>
    d702:	vldr	d7, [pc, #292]	; d828 <_strtod_l+0xeb0>
    d706:	vstr	d7, [sp, #96]	; 0x60
    d70a:	vldr	d7, [pc, #292]	; d830 <_strtod_l+0xeb8>
    d70e:	vstr	d7, [sp, #56]	; 0x38
    d712:	b.n	d022 <_strtod_l+0x6aa>
    d714:	ldrd	r1, r2, [sp, #16]
    d718:	ubfx	r3, r2, #0, #20
    d71c:	mov	r4, r2
    d71e:	cmp	r3, #0
    d720:	bne.w	d616 <_strtod_l+0xc9e>
    d724:	cmp	r1, #0
    d726:	bne.w	d616 <_strtod_l+0xc9e>
    d72a:	b.n	d6c8 <_strtod_l+0xd50>
    d72c:	ldr	r3, [sp, #56]	; 0x38
    d72e:	ldr	r2, [sp, #16]
    d730:	tst	r3, r2
    d732:	beq.n	d646 <_strtod_l+0xcce>
    d734:	b.n	d624 <_strtod_l+0xcac>
    d736:	mov.w	r8, #0
    d73a:	b.n	d134 <_strtod_l+0x7bc>
    d73c:	bl	c93c <sulp>
    d740:	mov	r2, r0
    d742:	mov	r3, r1
    d744:	mov	r0, r8
    d746:	mov	r1, r9
    d748:	bl	a8f4 <__aeabi_dsub>
    d74c:	movs	r2, #0
    d74e:	movs	r3, #0
    d750:	mov	r8, r0
    d752:	mov	r9, r1
    d754:	bl	b12c <__aeabi_dcmpeq>
    d758:	cmp	r0, #0
    d75a:	bne.w	d56e <_strtod_l+0xbf6>
    d75e:	b.n	d646 <_strtod_l+0xcce>
    d760:	cmp	r6, #0
    d762:	str	r3, [sp, #40]	; 0x28
    d764:	bgt.w	d3f8 <_strtod_l+0xa80>
    d768:	b.n	d448 <_strtod_l+0xad0>
    d76a:	ldr	r3, [sp, #40]	; 0x28
    d76c:	ldr	r1, [sp, #16]
    d76e:	cbz	r3, d7aa <_strtod_l+0xe32>
    d770:	ldr	r3, [pc, #208]	; (d844 <_strtod_l+0xecc>)
    d772:	ands	r3, r5
    d774:	cmp.w	r3, #111149056	; 0x6a00000
    d778:	bhi.n	d7aa <_strtod_l+0xe32>
    d77a:	lsrs	r3, r3, #20
    d77c:	rsb	r3, r3, #107	; 0x6b
    d780:	mov.w	r0, #4294967295
    d784:	lsl.w	r3, r0, r3
    d788:	cmp	r3, r1
    d78a:	bne.w	d616 <_strtod_l+0xc9e>
    d78e:	ldr	r1, [pc, #184]	; (d848 <_strtod_l+0xed0>)
    d790:	cmp	r2, r1
    d792:	beq.w	d1c2 <_strtod_l+0x84a>
    d796:	ldr	r3, [pc, #172]	; (d844 <_strtod_l+0xecc>)
    d798:	ands	r3, r2
    d79a:	add.w	r3, r3, #1048576	; 0x100000
    d79e:	str	r3, [sp, #20]
    d7a0:	movs	r3, #0
    d7a2:	str	r3, [sp, #16]
    d7a4:	ldrd	r8, r9, [sp, #16]
    d7a8:	b.n	d646 <_strtod_l+0xcce>
    d7aa:	mov.w	r3, #4294967295
    d7ae:	b.n	d788 <_strtod_l+0xe10>
    d7b0:	add	r0, sp, #108	; 0x6c
    d7b2:	add	r2, sp, #120	; 0x78
    d7b4:	ldr	r1, [pc, #148]	; (d84c <_strtod_l+0xed4>)
    d7b6:	bl	11888 <__hexnan>
    d7ba:	cmp	r0, #5
    d7bc:	bne.w	d1ac <_strtod_l+0x834>
    d7c0:	ldr	r3, [sp, #124]	; 0x7c
    d7c2:	orr.w	r3, r3, #2139095040	; 0x7f800000
    d7c6:	orr.w	r3, r3, #7340032	; 0x700000
    d7ca:	str	r3, [sp, #20]
    d7cc:	ldr	r3, [sp, #120]	; 0x78
    d7ce:	str	r3, [sp, #16]
    d7d0:	b.w	cbe8 <_strtod_l+0x270>
    d7d4:	ldr	r3, [pc, #108]	; (d844 <_strtod_l+0xecc>)
    d7d6:	ands	r3, r4
    d7d8:	cmp.w	r3, #112197632	; 0x6b00000
    d7dc:	bgt.w	d6d4 <_strtod_l+0xd5c>
    d7e0:	cmp.w	r3, #57671680	; 0x3700000
    d7e4:	bgt.w	d64a <_strtod_l+0xcd2>
    d7e8:	b.n	d56e <_strtod_l+0xbf6>
    d7ea:	mov.w	r2, #4294967295
    d7ee:	lsl.w	r3, r2, r3
    d7f2:	ldr	r2, [sp, #16]
    d7f4:	ands	r2, r3
    d7f6:	str	r2, [sp, #16]
    d7f8:	b.n	d448 <_strtod_l+0xad0>
    d7fa:	strd	r0, r1, [sp, #16]
    d7fe:	b.n	d134 <_strtod_l+0x7bc>
    d800:	strd	r0, r1, [sp, #16]
    d804:	b.n	d41c <_strtod_l+0xaa4>
    d806:	subs	r3, #32
    d808:	mov.w	r2, #4294967295
    d80c:	lsl.w	r3, r2, r3
    d810:	ands	r3, r1
    d812:	str	r3, [sp, #20]
    d814:	b.n	d448 <_strtod_l+0xad0>
    d816:	mov	r0, r4
    d818:	ldr	r1, [sp, #108]	; 0x6c
    d81a:	adds	r4, #1
    d81c:	b.n	d470 <_strtod_l+0xaf8>
    d81e:	mov	r0, r1
    d820:	ldr	r1, [sp, #108]	; 0x6c
    d822:	b.n	d484 <_strtod_l+0xb0c>
    d824:	nop.w
    d828:	.word	0x00000000
    d82c:	.word	0xbfe00000
    d830:	.word	0x00000000
    d834:	.word	0x3fe00000
    d838:	.word	0x00013a58
    d83c:	.word	0x000fffff
    d840:	.word	0x39500000
    d844:	.word	0x7ff00000
    d848:	.word	0x7fefffff
    d84c:	.word	0x00013770

0000d850 <_strtod_r>:
    d850:	ldr	r3, [pc, #20]	; (d868 <_strtod_r+0x18>)
    d852:	ldr	r3, [r3, #0]
    d854:	push	{r4}
    d856:	ldr	r3, [r3, #52]	; 0x34
    d858:	ldr	r4, [pc, #16]	; (d86c <_strtod_r+0x1c>)
    d85a:	cmp	r3, #0
    d85c:	it	eq
    d85e:	moveq	r3, r4
    d860:	ldr.w	r4, [sp], #4
    d864:	b.w	c978 <_strtod_l>
    d868:	.word	0x20017400
    d86c:	.word	0x20017404

0000d870 <_strtol_l.isra.0>:
    d870:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d874:	ldr.w	r9, [sp, #40]	; 0x28
    d878:	mov	r7, r1
    d87a:	mov	r8, r0
    d87c:	mov	r6, r2
    d87e:	mov	r5, r3
    d880:	mov	fp, r1
    d882:	b.n	d886 <_strtol_l.isra.0+0x16>
    d884:	mov	fp, r4
    d886:	mov	r4, fp
    d888:	mov	r0, r9
    d88a:	ldrb.w	sl, [r4], #1
    d88e:	bl	b92c <__locale_ctype_ptr_l>
    d892:	add	r0, sl
    d894:	ldrb	r1, [r0, #1]
    d896:	and.w	r1, r1, #8
    d89a:	and.w	ip, r1, #255	; 0xff
    d89e:	cmp	r1, #0
    d8a0:	bne.n	d884 <_strtol_l.isra.0+0x14>
    d8a2:	mov	r2, sl
    d8a4:	cmp	r2, #45	; 0x2d
    d8a6:	beq.n	d96c <_strtol_l.isra.0+0xfc>
    d8a8:	cmp	r2, #43	; 0x2b
    d8aa:	itt	eq
    d8ac:	ldrbeq.w	r2, [fp, #1]
    d8b0:	addeq.w	r4, fp, #2
    d8b4:	cmp	r5, #0
    d8b6:	beq.n	d940 <_strtol_l.isra.0+0xd0>
    d8b8:	cmp	r5, #16
    d8ba:	beq.n	d988 <_strtol_l.isra.0+0x118>
    d8bc:	mov	r9, r5
    d8be:	cmp.w	ip, #0
    d8c2:	ite	eq
    d8c4:	mvneq.w	sl, #2147483648	; 0x80000000
    d8c8:	movne.w	sl, #2147483648	; 0x80000000
    d8cc:	movs	r1, #0
    d8ce:	udiv	lr, sl, r9
    d8d2:	mov	r0, r1
    d8d4:	mls	sl, r9, lr, sl
    d8d8:	b.n	d8e6 <_strtol_l.isra.0+0x76>
    d8da:	beq.n	d930 <_strtol_l.isra.0+0xc0>
    d8dc:	mla	r0, r9, r0, r3
    d8e0:	movs	r1, #1
    d8e2:	ldrb.w	r2, [r4], #1
    d8e6:	sub.w	r3, r2, #48	; 0x30
    d8ea:	cmp	r3, #9
    d8ec:	bls.n	d8fa <_strtol_l.isra.0+0x8a>
    d8ee:	sub.w	r3, r2, #65	; 0x41
    d8f2:	cmp	r3, #25
    d8f4:	bhi.n	d90c <_strtol_l.isra.0+0x9c>
    d8f6:	sub.w	r3, r2, #55	; 0x37
    d8fa:	cmp	r5, r3
    d8fc:	ble.n	d91c <_strtol_l.isra.0+0xac>
    d8fe:	adds	r2, r1, #1
    d900:	beq.n	d8e2 <_strtol_l.isra.0+0x72>
    d902:	cmp	lr, r0
    d904:	bcs.n	d8da <_strtol_l.isra.0+0x6a>
    d906:	mov.w	r1, #4294967295
    d90a:	b.n	d8e2 <_strtol_l.isra.0+0x72>
    d90c:	sub.w	r3, r2, #97	; 0x61
    d910:	cmp	r3, #25
    d912:	bhi.n	d91c <_strtol_l.isra.0+0xac>
    d914:	sub.w	r3, r2, #87	; 0x57
    d918:	cmp	r5, r3
    d91a:	bgt.n	d8fe <_strtol_l.isra.0+0x8e>
    d91c:	adds	r3, r1, #1
    d91e:	beq.n	d94c <_strtol_l.isra.0+0xdc>
    d920:	cmp.w	ip, #0
    d924:	bne.n	d948 <_strtol_l.isra.0+0xd8>
    d926:	cbz	r6, d93c <_strtol_l.isra.0+0xcc>
    d928:	cbnz	r1, d964 <_strtol_l.isra.0+0xf4>
    d92a:	str	r7, [r6, #0]
    d92c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d930:	cmp	sl, r3
    d932:	bge.n	d8dc <_strtol_l.isra.0+0x6c>
    d934:	mov	r0, lr
    d936:	mov.w	r1, #4294967295
    d93a:	b.n	d8e2 <_strtol_l.isra.0+0x72>
    d93c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d940:	cmp	r2, #48	; 0x30
    d942:	beq.n	d97a <_strtol_l.isra.0+0x10a>
    d944:	movs	r5, #10
    d946:	b.n	d8bc <_strtol_l.isra.0+0x4c>
    d948:	negs	r0, r0
    d94a:	b.n	d926 <_strtol_l.isra.0+0xb6>
    d94c:	cmp.w	ip, #0
    d950:	mov.w	r3, #34	; 0x22
    d954:	ite	eq
    d956:	mvneq.w	r0, #2147483648	; 0x80000000
    d95a:	movne.w	r0, #2147483648	; 0x80000000
    d95e:	str.w	r3, [r8]
    d962:	cbz	r6, d9a2 <_strtol_l.isra.0+0x132>
    d964:	subs	r7, r4, #1
    d966:	str	r7, [r6, #0]
    d968:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d96c:	add.w	r4, fp, #2
    d970:	ldrb.w	r2, [fp, #1]
    d974:	mov.w	ip, #1
    d978:	b.n	d8b4 <_strtol_l.isra.0+0x44>
    d97a:	ldrb	r3, [r4, #0]
    d97c:	and.w	r3, r3, #223	; 0xdf
    d980:	cmp	r3, #88	; 0x58
    d982:	beq.n	d996 <_strtol_l.isra.0+0x126>
    d984:	movs	r5, #8
    d986:	b.n	d8bc <_strtol_l.isra.0+0x4c>
    d988:	cmp	r2, #48	; 0x30
    d98a:	bne.n	d8bc <_strtol_l.isra.0+0x4c>
    d98c:	ldrb	r3, [r4, #0]
    d98e:	and.w	r3, r3, #223	; 0xdf
    d992:	cmp	r3, #88	; 0x58
    d994:	bne.n	d8bc <_strtol_l.isra.0+0x4c>
    d996:	mov.w	r9, #16
    d99a:	ldrb	r2, [r4, #1]
    d99c:	mov	r5, r9
    d99e:	adds	r4, #2
    d9a0:	b.n	d8be <_strtol_l.isra.0+0x4e>
    d9a2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d9a6:	nop

0000d9a8 <_strtol_r>:
    d9a8:	push	{r4, r5, lr}
    d9aa:	ldr	r4, [pc, #24]	; (d9c4 <_strtol_r+0x1c>)
    d9ac:	ldr	r5, [pc, #24]	; (d9c8 <_strtol_r+0x20>)
    d9ae:	ldr	r4, [r4, #0]
    d9b0:	ldr	r4, [r4, #52]	; 0x34
    d9b2:	sub	sp, #12
    d9b4:	cmp	r4, #0
    d9b6:	it	eq
    d9b8:	moveq	r4, r5
    d9ba:	str	r4, [sp, #0]
    d9bc:	bl	d870 <_strtol_l.isra.0>
    d9c0:	add	sp, #12
    d9c2:	pop	{r4, r5, pc}
    d9c4:	.word	0x20017400
    d9c8:	.word	0x20017404
    d9cc:	.word	0xffffffff

0000d9d0 <_svfprintf_r>:
    d9d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d9d4:	sub	sp, #260	; 0x104
    d9d6:	mov	r4, r1
    d9d8:	str	r1, [sp, #20]
    d9da:	mov	r5, r2
    d9dc:	str	r3, [sp, #40]	; 0x28
    d9de:	str	r0, [sp, #24]
    d9e0:	bl	11a28 <_localeconv_r>
    d9e4:	ldr	r3, [r0, #0]
    d9e6:	str	r3, [sp, #76]	; 0x4c
    d9e8:	mov	r0, r3
    d9ea:	bl	c7c0 <strlen>
    d9ee:	ldrh	r3, [r4, #12]
    d9f0:	str	r0, [sp, #72]	; 0x48
    d9f2:	lsls	r6, r3, #24
    d9f4:	bpl.n	d9fe <_svfprintf_r+0x2e>
    d9f6:	ldr	r3, [r4, #16]
    d9f8:	cmp	r3, #0
    d9fa:	beq.w	ec60 <_svfprintf_r+0x1290>
    d9fe:	vldr	d7, [pc, #664]	; dc98 <_svfprintf_r+0x2c8>
    da02:	movs	r3, #0
    da04:	vstr	d7, [sp, #64]	; 0x40
    da08:	str	r3, [sp, #56]	; 0x38
    da0a:	str	r3, [sp, #148]	; 0x94
    da0c:	str	r3, [sp, #144]	; 0x90
    da0e:	str	r3, [sp, #84]	; 0x54
    da10:	str	r3, [sp, #28]
    da12:	ldr.w	sl, [pc, #656]	; dca4 <_svfprintf_r+0x2d4>
    da16:	add	r3, sp, #192	; 0xc0
    da18:	str	r3, [sp, #140]	; 0x8c
    da1a:	mov	r9, r3
    da1c:	mov	r8, r5
    da1e:	ldrb.w	r3, [r8]
    da22:	mov	r4, r8
    da24:	cbz	r3, da62 <_svfprintf_r+0x92>
    da26:	cmp	r3, #37	; 0x25
    da28:	bne.n	da30 <_svfprintf_r+0x60>
    da2a:	b.n	da62 <_svfprintf_r+0x92>
    da2c:	cmp	r3, #37	; 0x25
    da2e:	beq.n	da38 <_svfprintf_r+0x68>
    da30:	ldrb.w	r3, [r4, #1]!
    da34:	cmp	r3, #0
    da36:	bne.n	da2c <_svfprintf_r+0x5c>
    da38:	rsb	r5, r8, r4
    da3c:	cbz	r5, da62 <_svfprintf_r+0x92>
    da3e:	ldr	r3, [sp, #144]	; 0x90
    da40:	ldr	r2, [sp, #148]	; 0x94
    da42:	str.w	r8, [r9]
    da46:	adds	r3, #1
    da48:	add	r2, r5
    da4a:	cmp	r3, #7
    da4c:	str.w	r5, [r9, #4]
    da50:	str	r2, [sp, #148]	; 0x94
    da52:	str	r3, [sp, #144]	; 0x90
    da54:	bgt.w	dba4 <_svfprintf_r+0x1d4>
    da58:	add.w	r9, r9, #8
    da5c:	ldr	r3, [sp, #28]
    da5e:	add	r3, r5
    da60:	str	r3, [sp, #28]
    da62:	ldrb	r3, [r4, #0]
    da64:	cmp	r3, #0
    da66:	beq.w	dbb6 <_svfprintf_r+0x1e6>
    da6a:	movs	r3, #0
    da6c:	mov	r2, r3
    da6e:	strb.w	r3, [sp, #111]	; 0x6f
    da72:	mov	r1, r3
    da74:	str	r3, [sp, #32]
    da76:	str	r3, [sp, #12]
    da78:	mov.w	fp, #4294967295
    da7c:	ldrb	r3, [r4, #1]
    da7e:	add.w	r8, r4, #1
    da82:	mov	r5, fp
    da84:	add.w	r8, r8, #1
    da88:	sub.w	r0, r3, #32
    da8c:	cmp	r0, #88	; 0x58
    da8e:	bhi.w	e2fa <_svfprintf_r+0x92a>
    da92:	tbh	[pc, r0, lsl #1]
    da96:	.short	0x03a0
    da98:	.word	0x04320432
    da9c:	.word	0x043203a8
    daa0:	.word	0x04320432
    daa4:	.word	0x04320432
    daa8:	.word	0x03af0432
    daac:	.word	0x043203bd
    dab0:	.word	0x00e2005d
    dab4:	.word	0x01090432
    dab8:	.word	0x01100110
    dabc:	.word	0x01100110
    dac0:	.word	0x01100110
    dac4:	.word	0x01100110
    dac8:	.word	0x04320110
    dacc:	.word	0x04320432
    dad0:	.word	0x04320432
    dad4:	.word	0x04320432
    dad8:	.word	0x04320432
    dadc:	.word	0x01200432
    dae0:	.word	0x04320286
    dae4:	.word	0x04320286
    dae8:	.word	0x04320432
    daec:	.word	0x02d40432
    daf0:	.word	0x04320432
    daf4:	.word	0x043202e5
    daf8:	.word	0x04320432
    dafc:	.word	0x04320432
    db00:	.word	0x0432030f
    db04:	.word	0x033d0432
    db08:	.word	0x04320432
    db0c:	.word	0x04320432
    db10:	.word	0x04320432
    db14:	.word	0x04320432
    db18:	.word	0x04320432
    db1c:	.word	0x0391037e
    db20:	.word	0x02860286
    db24:	.word	0x03990286
    db28:	.word	0x04320391
    db2c:	.word	0x04070432
    db30:	.word	0x04120432
    db34:	.word	0x006400a3
    db38:	.word	0x043203c2
    db3c:	.word	0x043203c9
    db40:	.word	0x043203ea
    db44:	.word	0x03f20432
    db48:	ldr	r0, [sp, #32]
    db4a:	str	r3, [sp, #40]	; 0x28
    db4c:	negs	r0, r0
    db4e:	str	r0, [sp, #32]
    db50:	ldr	r3, [sp, #12]
    db52:	orr.w	r3, r3, #4
    db56:	str	r3, [sp, #12]
    db58:	ldrb.w	r3, [r8]
    db5c:	b.n	da84 <_svfprintf_r+0xb4>
    db5e:	ldr	r0, [sp, #40]	; 0x28
    db60:	mov	fp, r5
    db62:	movs	r1, #0
    db64:	ldr	r4, [r0, #0]
    db66:	strb.w	r1, [sp, #111]	; 0x6f
    db6a:	adds	r7, r0, #4
    db6c:	ldr	r0, [sp, #12]
    db6e:	movs	r3, #48	; 0x30
    db70:	movs	r2, #120	; 0x78
    db72:	cmp	fp, r1
    db74:	strb.w	r3, [sp, #112]	; 0x70
    db78:	mov.w	r5, #0
    db7c:	strb.w	r2, [sp, #113]	; 0x71
    db80:	orr.w	r3, r0, #2
    db84:	blt.w	e334 <_svfprintf_r+0x964>
    db88:	bic.w	r3, r0, #128	; 0x80
    db8c:	orr.w	r3, r3, #2
    db90:	str	r3, [sp, #12]
    db92:	orrs.w	r3, r4, r5
    db96:	str	r7, [sp, #40]	; 0x28
    db98:	beq.w	e2e0 <_svfprintf_r+0x910>
    db9c:	mov	r7, r1
    db9e:	str	r2, [sp, #52]	; 0x34
    dba0:	ldr	r0, [pc, #252]	; (dca0 <_svfprintf_r+0x2d0>)
    dba2:	b.n	e172 <_svfprintf_r+0x7a2>
    dba4:	add	r2, sp, #140	; 0x8c
    dba6:	ldr	r1, [sp, #20]
    dba8:	ldr	r0, [sp, #24]
    dbaa:	bl	12968 <__ssprint_r>
    dbae:	cbnz	r0, dbc4 <_svfprintf_r+0x1f4>
    dbb0:	add.w	r9, sp, #192	; 0xc0
    dbb4:	b.n	da5c <_svfprintf_r+0x8c>
    dbb6:	ldr	r3, [sp, #148]	; 0x94
    dbb8:	cbz	r3, dbc4 <_svfprintf_r+0x1f4>
    dbba:	ldr	r0, [sp, #24]
    dbbc:	ldr	r1, [sp, #20]
    dbbe:	add	r2, sp, #140	; 0x8c
    dbc0:	bl	12968 <__ssprint_r>
    dbc4:	ldr	r3, [sp, #20]
    dbc6:	ldrh	r3, [r3, #12]
    dbc8:	tst.w	r3, #64	; 0x40
    dbcc:	ldr	r3, [sp, #28]
    dbce:	it	ne
    dbd0:	movne.w	r3, #4294967295
    dbd4:	mov	r0, r3
    dbd6:	add	sp, #260	; 0x104
    dbd8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dbdc:	str	r3, [sp, #52]	; 0x34
    dbde:	mov	fp, r5
    dbe0:	cmp	r2, #0
    dbe2:	bne.w	f04c <_svfprintf_r+0x167c>
    dbe6:	ldr	r2, [sp, #12]
    dbe8:	ands.w	r3, r2, #32
    dbec:	beq.w	e07c <_svfprintf_r+0x6ac>
    dbf0:	ldr	r7, [sp, #40]	; 0x28
    dbf2:	adds	r7, #7
    dbf4:	bic.w	r3, r7, #7
    dbf8:	movs	r7, #0
    dbfa:	add.w	r1, r3, #8
    dbfe:	cmp	fp, r7
    dc00:	str	r1, [sp, #40]	; 0x28
    dc02:	ldrd	r4, r5, [r3]
    dc06:	strb.w	r7, [sp, #111]	; 0x6f
    dc0a:	blt.w	ead2 <_svfprintf_r+0x1102>
    dc0e:	bic.w	r3, r2, #128	; 0x80
    dc12:	str	r3, [sp, #12]
    dc14:	orrs.w	r3, r4, r5
    dc18:	beq.w	e324 <_svfprintf_r+0x954>
    dc1c:	add	r6, sp, #192	; 0xc0
    dc1e:	lsrs	r2, r4, #3
    dc20:	orr.w	r2, r2, r5, lsl #29
    dc24:	lsrs	r1, r5, #3
    dc26:	and.w	r3, r4, #7
    dc2a:	mov	r5, r1
    dc2c:	mov	r4, r2
    dc2e:	adds	r3, #48	; 0x30
    dc30:	orrs.w	r2, r4, r5
    dc34:	strb.w	r3, [r6, #-1]!
    dc38:	bne.n	dc1e <_svfprintf_r+0x24e>
    dc3a:	ldr	r2, [sp, #12]
    dc3c:	lsls	r1, r2, #31
    dc3e:	bpl.w	dd60 <_svfprintf_r+0x390>
    dc42:	cmp	r3, #48	; 0x30
    dc44:	beq.w	dd60 <_svfprintf_r+0x390>
    dc48:	movs	r2, #48	; 0x30
    dc4a:	subs	r3, r6, #1
    dc4c:	strb.w	r2, [r6, #-1]
    dc50:	add	r2, sp, #192	; 0xc0
    dc52:	subs	r2, r2, r3
    dc54:	str	r2, [sp, #36]	; 0x24
    dc56:	mov	r6, r3
    dc58:	b.n	dd66 <_svfprintf_r+0x396>
    dc5a:	ldrb.w	r3, [r8]
    dc5e:	cmp	r3, #42	; 0x2a
    dc60:	add.w	r4, r8, #1
    dc64:	beq.w	f030 <_svfprintf_r+0x1660>
    dc68:	sub.w	r0, r3, #48	; 0x30
    dc6c:	cmp	r0, #9
    dc6e:	it	ls
    dc70:	movls	r5, #0
    dc72:	bhi.w	ef82 <_svfprintf_r+0x15b2>
    dc76:	ldrb.w	r3, [r4], #1
    dc7a:	add.w	r5, r5, r5, lsl #2
    dc7e:	add.w	r5, r0, r5, lsl #1
    dc82:	sub.w	r0, r3, #48	; 0x30
    dc86:	cmp	r0, #9
    dc88:	bls.n	dc76 <_svfprintf_r+0x2a6>
    dc8a:	orr.w	r5, r5, r5, asr #31
    dc8e:	mov	r8, r4
    dc90:	b.n	da88 <_svfprintf_r+0xb8>
    dc92:	nop
    dc94:	nop.w
	...
    dca0:	.word	0x000137e4
    dca4:	.word	0x000137b0
    dca8:	ldr	r3, [sp, #12]
    dcaa:	orr.w	r3, r3, #128	; 0x80
    dcae:	str	r3, [sp, #12]
    dcb0:	ldrb.w	r3, [r8]
    dcb4:	b.n	da84 <_svfprintf_r+0xb4>
    dcb6:	sub.w	r0, r3, #48	; 0x30
    dcba:	movs	r3, #0
    dcbc:	mov	r4, r3
    dcbe:	ldrb.w	r3, [r8], #1
    dcc2:	add.w	r4, r4, r4, lsl #2
    dcc6:	add.w	r4, r0, r4, lsl #1
    dcca:	sub.w	r0, r3, #48	; 0x30
    dcce:	cmp	r0, #9
    dcd0:	bls.n	dcbe <_svfprintf_r+0x2ee>
    dcd2:	str	r4, [sp, #32]
    dcd4:	b.n	da88 <_svfprintf_r+0xb8>
    dcd6:	str	r3, [sp, #52]	; 0x34
    dcd8:	mov	fp, r5
    dcda:	cmp	r2, #0
    dcdc:	bne.w	f068 <_svfprintf_r+0x1698>
    dce0:	ldr	r3, [sp, #12]
    dce2:	orr.w	r3, r3, #16
    dce6:	str	r3, [sp, #12]
    dce8:	ldr	r3, [sp, #12]
    dcea:	lsls	r4, r3, #26
    dcec:	bpl.w	e75e <_svfprintf_r+0xd8e>
    dcf0:	ldr	r7, [sp, #40]	; 0x28
    dcf2:	adds	r7, #7
    dcf4:	bic.w	r7, r7, #7
    dcf8:	ldrd	r2, r3, [r7]
    dcfc:	add.w	r1, r7, #8
    dd00:	str	r1, [sp, #40]	; 0x28
    dd02:	mov	r4, r2
    dd04:	mov	r5, r3
    dd06:	cmp	r2, #0
    dd08:	sbcs.w	r3, r3, #0
    dd0c:	blt.w	e7d4 <_svfprintf_r+0xe04>
    dd10:	cmp.w	fp, #0
    dd14:	ldrb.w	r7, [sp, #111]	; 0x6f
    dd18:	blt.w	e79a <_svfprintf_r+0xdca>
    dd1c:	ldr	r3, [sp, #12]
    dd1e:	bic.w	r3, r3, #128	; 0x80
    dd22:	str	r3, [sp, #12]
    dd24:	orrs.w	r3, r4, r5
    dd28:	beq.w	e0fc <_svfprintf_r+0x72c>
    dd2c:	cmp	r5, #0
    dd2e:	it	eq
    dd30:	cmpeq	r4, #10
    dd32:	bcc.w	e106 <_svfprintf_r+0x736>
    dd36:	add	r6, sp, #192	; 0xc0
    dd38:	mov	r0, r4
    dd3a:	mov	r1, r5
    dd3c:	movs	r2, #10
    dd3e:	movs	r3, #0
    dd40:	bl	b508 <__aeabi_uldivmod>
    dd44:	adds	r2, #48	; 0x30
    dd46:	strb.w	r2, [r6, #-1]!
    dd4a:	mov	r0, r4
    dd4c:	mov	r1, r5
    dd4e:	movs	r3, #0
    dd50:	movs	r2, #10
    dd52:	bl	b508 <__aeabi_uldivmod>
    dd56:	mov	r4, r0
    dd58:	mov	r5, r1
    dd5a:	orrs.w	r3, r4, r5
    dd5e:	bne.n	dd38 <_svfprintf_r+0x368>
    dd60:	add	r3, sp, #192	; 0xc0
    dd62:	subs	r3, r3, r6
    dd64:	str	r3, [sp, #36]	; 0x24
    dd66:	ldr	r3, [sp, #36]	; 0x24
    dd68:	cmp	r3, fp
    dd6a:	it	lt
    dd6c:	movlt	r3, fp
    dd6e:	str	r3, [sp, #16]
    dd70:	movs	r3, #0
    dd72:	str	r3, [sp, #60]	; 0x3c
    dd74:	cbz	r7, dd7c <_svfprintf_r+0x3ac>
    dd76:	ldr	r3, [sp, #16]
    dd78:	adds	r3, #1
    dd7a:	str	r3, [sp, #16]
    dd7c:	ldr	r3, [sp, #12]
    dd7e:	ands.w	r3, r3, #2
    dd82:	str	r3, [sp, #44]	; 0x2c
    dd84:	beq.n	dd8c <_svfprintf_r+0x3bc>
    dd86:	ldr	r3, [sp, #16]
    dd88:	adds	r3, #2
    dd8a:	str	r3, [sp, #16]
    dd8c:	ldr	r3, [sp, #12]
    dd8e:	ands.w	r3, r3, #132	; 0x84
    dd92:	str	r3, [sp, #48]	; 0x30
    dd94:	bne.w	e34e <_svfprintf_r+0x97e>
    dd98:	ldr	r3, [sp, #32]
    dd9a:	ldr	r2, [sp, #16]
    dd9c:	subs	r5, r3, r2
    dd9e:	cmp	r5, #0
    dda0:	ble.w	e34e <_svfprintf_r+0x97e>
    dda4:	cmp	r5, #16
    dda6:	ldr	r1, [sp, #148]	; 0x94
    dda8:	ldr	r2, [sp, #144]	; 0x90
    ddaa:	ldr	r7, [pc, #672]	; (e04c <_svfprintf_r+0x67c>)
    ddac:	ble.n	ddfe <_svfprintf_r+0x42e>
    ddae:	str	r6, [sp, #80]	; 0x50
    ddb0:	mov	r0, r9
    ddb2:	movs	r4, #16
    ddb4:	mov	r9, r7
    ddb6:	ldr	r6, [sp, #20]
    ddb8:	mov	r7, r5
    ddba:	ldr	r5, [sp, #24]
    ddbc:	b.n	ddc8 <_svfprintf_r+0x3f8>
    ddbe:	subs	r7, #16
    ddc0:	cmp	r7, #16
    ddc2:	add.w	r0, r0, #8
    ddc6:	ble.n	ddf6 <_svfprintf_r+0x426>
    ddc8:	adds	r2, #1
    ddca:	ldr	r3, [pc, #640]	; (e04c <_svfprintf_r+0x67c>)
    ddcc:	str	r2, [sp, #144]	; 0x90
    ddce:	adds	r1, #16
    ddd0:	cmp	r2, #7
    ddd2:	str	r1, [sp, #148]	; 0x94
    ddd4:	stmia.w	r0, {r3, r4}
    ddd8:	ble.n	ddbe <_svfprintf_r+0x3ee>
    ddda:	add	r2, sp, #140	; 0x8c
    dddc:	mov	r1, r6
    ddde:	mov	r0, r5
    dde0:	bl	12968 <__ssprint_r>
    dde4:	cmp	r0, #0
    dde6:	bne.w	dbc4 <_svfprintf_r+0x1f4>
    ddea:	subs	r7, #16
    ddec:	cmp	r7, #16
    ddee:	ldr	r1, [sp, #148]	; 0x94
    ddf0:	ldr	r2, [sp, #144]	; 0x90
    ddf2:	add	r0, sp, #192	; 0xc0
    ddf4:	bgt.n	ddc8 <_svfprintf_r+0x3f8>
    ddf6:	ldr	r6, [sp, #80]	; 0x50
    ddf8:	mov	r5, r7
    ddfa:	mov	r7, r9
    ddfc:	mov	r9, r0
    ddfe:	adds	r2, #1
    de00:	adds	r4, r5, r1
    de02:	cmp	r2, #7
    de04:	str	r4, [sp, #148]	; 0x94
    de06:	str	r2, [sp, #144]	; 0x90
    de08:	str.w	r7, [r9]
    de0c:	str.w	r5, [r9, #4]
    de10:	bgt.w	e66e <_svfprintf_r+0xc9e>
    de14:	ldrb.w	r7, [sp, #111]	; 0x6f
    de18:	add.w	r9, r9, #8
    de1c:	cbz	r7, de3c <_svfprintf_r+0x46c>
    de1e:	ldr	r3, [sp, #144]	; 0x90
    de20:	adds	r3, #1
    de22:	adds	r4, #1
    de24:	add.w	r1, sp, #111	; 0x6f
    de28:	movs	r2, #1
    de2a:	cmp	r3, #7
    de2c:	str	r4, [sp, #148]	; 0x94
    de2e:	str	r3, [sp, #144]	; 0x90
    de30:	stmia.w	r9, {r1, r2}
    de34:	bgt.w	e582 <_svfprintf_r+0xbb2>
    de38:	add.w	r9, r9, #8
    de3c:	ldr	r3, [sp, #44]	; 0x2c
    de3e:	cbz	r3, de5c <_svfprintf_r+0x48c>
    de40:	ldr	r3, [sp, #144]	; 0x90
    de42:	adds	r3, #1
    de44:	adds	r4, #2
    de46:	add	r1, sp, #112	; 0x70
    de48:	movs	r2, #2
    de4a:	cmp	r3, #7
    de4c:	str	r4, [sp, #148]	; 0x94
    de4e:	str	r3, [sp, #144]	; 0x90
    de50:	stmia.w	r9, {r1, r2}
    de54:	bgt.w	e59a <_svfprintf_r+0xbca>
    de58:	add.w	r9, r9, #8
    de5c:	ldr	r3, [sp, #48]	; 0x30
    de5e:	cmp	r3, #128	; 0x80
    de60:	beq.w	e426 <_svfprintf_r+0xa56>
    de64:	ldr	r3, [sp, #36]	; 0x24
    de66:	rsb	r7, r3, fp
    de6a:	cmp	r7, #0
    de6c:	ble.n	ded6 <_svfprintf_r+0x506>
    de6e:	ldr	r2, [pc, #480]	; (e050 <_svfprintf_r+0x680>)
    de70:	ldr	r3, [sp, #144]	; 0x90
    de72:	str	r2, [sp, #44]	; 0x2c
    de74:	cmp	r7, #16
    de76:	ble.n	debe <_svfprintf_r+0x4ee>
    de78:	mov	r2, r4
    de7a:	mov.w	fp, #16
    de7e:	ldr	r5, [sp, #24]
    de80:	ldr	r4, [sp, #20]
    de82:	b.n	de8e <_svfprintf_r+0x4be>
    de84:	subs	r7, #16
    de86:	cmp	r7, #16
    de88:	add.w	r9, r9, #8
    de8c:	ble.n	debc <_svfprintf_r+0x4ec>
    de8e:	adds	r3, #1
    de90:	adds	r2, #16
    de92:	cmp	r3, #7
    de94:	str	r2, [sp, #148]	; 0x94
    de96:	str	r3, [sp, #144]	; 0x90
    de98:	stmia.w	r9, {sl, fp}
    de9c:	ble.n	de84 <_svfprintf_r+0x4b4>
    de9e:	add	r2, sp, #140	; 0x8c
    dea0:	mov	r1, r4
    dea2:	mov	r0, r5
    dea4:	bl	12968 <__ssprint_r>
    dea8:	cmp	r0, #0
    deaa:	bne.w	dbc4 <_svfprintf_r+0x1f4>
    deae:	subs	r7, #16
    deb0:	cmp	r7, #16
    deb2:	ldr	r2, [sp, #148]	; 0x94
    deb4:	ldr	r3, [sp, #144]	; 0x90
    deb6:	add.w	r9, sp, #192	; 0xc0
    deba:	bgt.n	de8e <_svfprintf_r+0x4be>
    debc:	mov	r4, r2
    debe:	adds	r3, #1
    dec0:	ldr	r2, [sp, #44]	; 0x2c
    dec2:	str	r3, [sp, #144]	; 0x90
    dec4:	add	r4, r7
    dec6:	cmp	r3, #7
    dec8:	str	r4, [sp, #148]	; 0x94
    deca:	stmia.w	r9, {r2, r7}
    dece:	bgt.w	e56a <_svfprintf_r+0xb9a>
    ded2:	add.w	r9, r9, #8
    ded6:	ldr	r3, [sp, #12]
    ded8:	lsls	r2, r3, #23
    deda:	bmi.w	e352 <_svfprintf_r+0x982>
    dede:	ldr	r3, [sp, #144]	; 0x90
    dee0:	ldr	r1, [sp, #36]	; 0x24
    dee2:	str.w	r6, [r9]
    dee6:	adds	r3, #1
    dee8:	add	r4, r1
    deea:	cmp	r3, #7
    deec:	str	r4, [sp, #148]	; 0x94
    deee:	str.w	r1, [r9, #4]
    def2:	str	r3, [sp, #144]	; 0x90
    def4:	bgt.w	e53e <_svfprintf_r+0xb6e>
    def8:	add.w	r9, r9, #8
    defc:	ldr	r3, [sp, #12]
    defe:	lsls	r1, r3, #29
    df00:	bpl.n	df82 <_svfprintf_r+0x5b2>
    df02:	ldr	r3, [sp, #32]
    df04:	ldr	r2, [sp, #16]
    df06:	subs	r5, r3, r2
    df08:	cmp	r5, #0
    df0a:	ble.n	df82 <_svfprintf_r+0x5b2>
    df0c:	cmp	r5, #16
    df0e:	ldr	r3, [sp, #144]	; 0x90
    df10:	ldr	r7, [pc, #312]	; (e04c <_svfprintf_r+0x67c>)
    df12:	ble.n	df5c <_svfprintf_r+0x58c>
    df14:	mov	r2, r4
    df16:	movs	r6, #16
    df18:	ldr.w	fp, [sp, #24]
    df1c:	ldr	r4, [sp, #20]
    df1e:	b.n	df2a <_svfprintf_r+0x55a>
    df20:	subs	r5, #16
    df22:	cmp	r5, #16
    df24:	add.w	r9, r9, #8
    df28:	ble.n	df5a <_svfprintf_r+0x58a>
    df2a:	adds	r3, #1
    df2c:	ldr	r1, [pc, #284]	; (e04c <_svfprintf_r+0x67c>)
    df2e:	str	r3, [sp, #144]	; 0x90
    df30:	adds	r2, #16
    df32:	cmp	r3, #7
    df34:	str	r2, [sp, #148]	; 0x94
    df36:	stmia.w	r9, {r1, r6}
    df3a:	ble.n	df20 <_svfprintf_r+0x550>
    df3c:	add	r2, sp, #140	; 0x8c
    df3e:	mov	r1, r4
    df40:	mov	r0, fp
    df42:	bl	12968 <__ssprint_r>
    df46:	cmp	r0, #0
    df48:	bne.w	dbc4 <_svfprintf_r+0x1f4>
    df4c:	subs	r5, #16
    df4e:	cmp	r5, #16
    df50:	ldr	r2, [sp, #148]	; 0x94
    df52:	ldr	r3, [sp, #144]	; 0x90
    df54:	add.w	r9, sp, #192	; 0xc0
    df58:	bgt.n	df2a <_svfprintf_r+0x55a>
    df5a:	mov	r4, r2
    df5c:	adds	r3, #1
    df5e:	add	r4, r5
    df60:	cmp	r3, #7
    df62:	str	r4, [sp, #148]	; 0x94
    df64:	str	r3, [sp, #144]	; 0x90
    df66:	str.w	r7, [r9]
    df6a:	str.w	r5, [r9, #4]
    df6e:	ble.n	df82 <_svfprintf_r+0x5b2>
    df70:	add	r2, sp, #140	; 0x8c
    df72:	ldr	r1, [sp, #20]
    df74:	ldr	r0, [sp, #24]
    df76:	bl	12968 <__ssprint_r>
    df7a:	cmp	r0, #0
    df7c:	bne.w	dbc4 <_svfprintf_r+0x1f4>
    df80:	ldr	r4, [sp, #148]	; 0x94
    df82:	ldr	r3, [sp, #28]
    df84:	ldr	r2, [sp, #32]
    df86:	ldr	r1, [sp, #16]
    df88:	cmp	r2, r1
    df8a:	ite	ge
    df8c:	addge	r3, r3, r2
    df8e:	addlt	r3, r3, r1
    df90:	str	r3, [sp, #28]
    df92:	cmp	r4, #0
    df94:	bne.w	e556 <_svfprintf_r+0xb86>
    df98:	movs	r3, #0
    df9a:	str	r3, [sp, #144]	; 0x90
    df9c:	add.w	r9, sp, #192	; 0xc0
    dfa0:	b.n	da1e <_svfprintf_r+0x4e>
    dfa2:	str	r3, [sp, #52]	; 0x34
    dfa4:	mov	fp, r5
    dfa6:	cmp	r2, #0
    dfa8:	bne.w	f070 <_svfprintf_r+0x16a0>
    dfac:	ldr	r3, [sp, #12]
    dfae:	ldr	r7, [sp, #40]	; 0x28
    dfb0:	lsls	r2, r3, #28
    dfb2:	add.w	r7, r7, #7
    dfb6:	bpl.w	eaa2 <_svfprintf_r+0x10d2>
    dfba:	bic.w	r3, r7, #7
    dfbe:	vldr	d7, [r3]
    dfc2:	vstr	d7, [sp, #64]	; 0x40
    dfc6:	add.w	r2, r3, #8
    dfca:	str	r2, [sp, #40]	; 0x28
    dfcc:	ldrd	r1, r2, [sp, #64]	; 0x40
    dfd0:	bic.w	r3, r2, #2147483648	; 0x80000000
    dfd4:	str	r1, [sp, #88]	; 0x58
    dfd6:	str	r3, [sp, #92]	; 0x5c
    dfd8:	ldrd	r4, r5, [sp, #88]	; 0x58
    dfdc:	mov.w	r2, #4294967295
    dfe0:	mov	r0, r4
    dfe2:	mov	r1, r5
    dfe4:	ldr	r3, [pc, #108]	; (e054 <_svfprintf_r+0x684>)
    dfe6:	bl	b190 <__aeabi_dcmpun>
    dfea:	cmp	r0, #0
    dfec:	bne.w	e9a4 <_svfprintf_r+0xfd4>
    dff0:	mov.w	r2, #4294967295
    dff4:	ldr	r3, [pc, #92]	; (e054 <_svfprintf_r+0x684>)
    dff6:	mov	r0, r4
    dff8:	mov	r1, r5
    dffa:	bl	b154 <__aeabi_dcmple>
    dffe:	cmp	r0, #0
    e000:	bne.w	e9a4 <_svfprintf_r+0xfd4>
    e004:	movs	r2, #0
    e006:	movs	r3, #0
    e008:	ldrd	r0, r1, [sp, #64]	; 0x40
    e00c:	bl	b140 <__aeabi_dcmplt>
    e010:	cmp	r0, #0
    e012:	bne.w	eeba <_svfprintf_r+0x14ea>
    e016:	ldrb.w	r7, [sp, #111]	; 0x6f
    e01a:	ldr	r6, [pc, #60]	; (e058 <_svfprintf_r+0x688>)
    e01c:	ldr	r3, [pc, #60]	; (e05c <_svfprintf_r+0x68c>)
    e01e:	ldr	r1, [sp, #12]
    e020:	bic.w	r1, r1, #128	; 0x80
    e024:	str	r1, [sp, #12]
    e026:	ldr	r1, [sp, #52]	; 0x34
    e028:	movs	r2, #3
    e02a:	mov.w	fp, #0
    e02e:	str	r2, [sp, #16]
    e030:	cmp	r1, #71	; 0x47
    e032:	it	le
    e034:	movle	r6, r3
    e036:	str	r2, [sp, #36]	; 0x24
    e038:	str.w	fp, [sp, #60]	; 0x3c
    e03c:	b.n	dd74 <_svfprintf_r+0x3a4>
    e03e:	ldr	r3, [sp, #12]
    e040:	orr.w	r3, r3, #8
    e044:	str	r3, [sp, #12]
    e046:	ldrb.w	r3, [r8]
    e04a:	b.n	da84 <_svfprintf_r+0xb4>
    e04c:	.word	0x00013804
    e050:	.word	0x000137b0
    e054:	.word	0x7fefffff
    e058:	.word	0x000137c4
    e05c:	.word	0x000137c0
    e060:	str	r3, [sp, #52]	; 0x34
    e062:	mov	fp, r5
    e064:	cmp	r2, #0
    e066:	bne.w	f088 <_svfprintf_r+0x16b8>
    e06a:	ldr	r3, [sp, #12]
    e06c:	orr.w	r3, r3, #16
    e070:	str	r3, [sp, #12]
    e072:	ldr	r2, [sp, #12]
    e074:	ands.w	r3, r2, #32
    e078:	bne.w	dbf0 <_svfprintf_r+0x220>
    e07c:	ldr	r1, [sp, #12]
    e07e:	ands.w	r2, r1, #16
    e082:	beq.w	e93c <_svfprintf_r+0xf6c>
    e086:	ldr	r0, [sp, #40]	; 0x28
    e088:	strb.w	r3, [sp, #111]	; 0x6f
    e08c:	cmp.w	fp, #0
    e090:	ldr	r4, [r0, #0]
    e092:	add.w	r7, r0, #4
    e096:	mov.w	r5, #0
    e09a:	blt.w	ead0 <_svfprintf_r+0x1100>
    e09e:	mov	r2, r1
    e0a0:	bic.w	r2, r2, #128	; 0x80
    e0a4:	str	r2, [sp, #12]
    e0a6:	orrs.w	r2, r4, r5
    e0aa:	str	r7, [sp, #40]	; 0x28
    e0ac:	beq.w	e324 <_svfprintf_r+0x954>
    e0b0:	mov	r7, r3
    e0b2:	b.n	dc1c <_svfprintf_r+0x24c>
    e0b4:	str	r3, [sp, #52]	; 0x34
    e0b6:	mov	fp, r5
    e0b8:	cmp	r2, #0
    e0ba:	bne.w	f080 <_svfprintf_r+0x16b0>
    e0be:	ldr	r3, [sp, #12]
    e0c0:	orr.w	r3, r3, #16
    e0c4:	str	r3, [sp, #12]
    e0c6:	ldr	r2, [sp, #12]
    e0c8:	ands.w	r3, r2, #32
    e0cc:	beq.w	e728 <_svfprintf_r+0xd58>
    e0d0:	ldr	r7, [sp, #40]	; 0x28
    e0d2:	adds	r7, #7
    e0d4:	bic.w	r3, r7, #7
    e0d8:	movs	r7, #0
    e0da:	add.w	r1, r3, #8
    e0de:	cmp	fp, r7
    e0e0:	str	r1, [sp, #40]	; 0x28
    e0e2:	ldrd	r4, r5, [r3]
    e0e6:	strb.w	r7, [sp, #111]	; 0x6f
    e0ea:	blt.w	e79a <_svfprintf_r+0xdca>
    e0ee:	bic.w	r3, r2, #128	; 0x80
    e0f2:	str	r3, [sp, #12]
    e0f4:	orrs.w	r3, r4, r5
    e0f8:	bne.w	dd2c <_svfprintf_r+0x35c>
    e0fc:	cmp.w	fp, #0
    e100:	beq.w	e2ee <_svfprintf_r+0x91e>
    e104:	movs	r4, #0
    e106:	add	r6, sp, #256	; 0x100
    e108:	adds	r4, #48	; 0x30
    e10a:	strb.w	r4, [r6, #-65]!
    e10e:	b.n	dd60 <_svfprintf_r+0x390>
    e110:	str	r3, [sp, #52]	; 0x34
    e112:	mov	fp, r5
    e114:	cmp	r2, #0
    e116:	bne.w	f078 <_svfprintf_r+0x16a8>
    e11a:	ldr	r3, [sp, #12]
    e11c:	ldr	r0, [pc, #700]	; (e3dc <_svfprintf_r+0xa0c>)
    e11e:	lsls	r5, r3, #26
    e120:	bpl.w	e28e <_svfprintf_r+0x8be>
    e124:	ldr	r7, [sp, #40]	; 0x28
    e126:	adds	r7, #7
    e128:	bic.w	r3, r7, #7
    e12c:	ldrd	r4, r5, [r3]
    e130:	add.w	r2, r3, #8
    e134:	str	r2, [sp, #40]	; 0x28
    e136:	ldr	r2, [sp, #12]
    e138:	ands.w	r7, r2, #1
    e13c:	beq.w	e5b2 <_svfprintf_r+0xbe2>
    e140:	orrs.w	r3, r4, r5
    e144:	beq.w	eb4c <_svfprintf_r+0x117c>
    e148:	ldrb.w	r2, [sp, #52]	; 0x34
    e14c:	strb.w	r2, [sp, #113]	; 0x71
    e150:	movs	r7, #0
    e152:	ldr	r2, [sp, #12]
    e154:	strb.w	r7, [sp, #111]	; 0x6f
    e158:	movs	r3, #48	; 0x30
    e15a:	cmp	fp, r7
    e15c:	strb.w	r3, [sp, #112]	; 0x70
    e160:	orr.w	r3, r2, #2
    e164:	blt.w	eec4 <_svfprintf_r+0x14f4>
    e168:	bic.w	r3, r2, #128	; 0x80
    e16c:	orr.w	r3, r3, #2
    e170:	str	r3, [sp, #12]
    e172:	add	r6, sp, #192	; 0xc0
    e174:	lsrs	r3, r4, #4
    e176:	and.w	r1, r4, #15
    e17a:	orr.w	r3, r3, r5, lsl #28
    e17e:	lsrs	r2, r5, #4
    e180:	mov	r4, r3
    e182:	mov	r5, r2
    e184:	ldrb	r3, [r0, r1]
    e186:	strb.w	r3, [r6, #-1]!
    e18a:	orrs.w	r3, r4, r5
    e18e:	bne.n	e174 <_svfprintf_r+0x7a4>
    e190:	b.n	dd60 <_svfprintf_r+0x390>
    e192:	ldr	r1, [sp, #40]	; 0x28
    e194:	str	r3, [sp, #52]	; 0x34
    e196:	ldr	r2, [r1, #0]
    e198:	strb.w	r2, [sp, #152]	; 0x98
    e19c:	movs	r3, #0
    e19e:	mov	r2, r1
    e1a0:	mov	r7, r3
    e1a2:	strb.w	r3, [sp, #111]	; 0x6f
    e1a6:	adds	r2, #4
    e1a8:	movs	r3, #1
    e1aa:	str	r3, [sp, #16]
    e1ac:	mov	fp, r7
    e1ae:	str	r7, [sp, #60]	; 0x3c
    e1b0:	str	r2, [sp, #40]	; 0x28
    e1b2:	str	r3, [sp, #36]	; 0x24
    e1b4:	add	r6, sp, #152	; 0x98
    e1b6:	b.n	dd7c <_svfprintf_r+0x3ac>
    e1b8:	str	r3, [sp, #52]	; 0x34
    e1ba:	mov	fp, r5
    e1bc:	cmp	r2, #0
    e1be:	beq.w	dce8 <_svfprintf_r+0x318>
    e1c2:	strb.w	r1, [sp, #111]	; 0x6f
    e1c6:	b.n	dce8 <_svfprintf_r+0x318>
    e1c8:	ldr	r3, [sp, #12]
    e1ca:	orr.w	r3, r3, #64	; 0x40
    e1ce:	str	r3, [sp, #12]
    e1d0:	ldrb.w	r3, [r8]
    e1d4:	b.n	da84 <_svfprintf_r+0xb4>
    e1d6:	ldrb.w	r3, [r8]
    e1da:	cmp	r1, #0
    e1dc:	bne.w	da84 <_svfprintf_r+0xb4>
    e1e0:	movs	r2, #1
    e1e2:	movs	r1, #32
    e1e4:	b.n	da84 <_svfprintf_r+0xb4>
    e1e6:	ldr	r3, [sp, #12]
    e1e8:	orr.w	r3, r3, #1
    e1ec:	str	r3, [sp, #12]
    e1ee:	ldrb.w	r3, [r8]
    e1f2:	b.n	da84 <_svfprintf_r+0xb4>
    e1f4:	ldr	r4, [sp, #40]	; 0x28
    e1f6:	ldr	r3, [r4, #0]
    e1f8:	str	r3, [sp, #32]
    e1fa:	mov	r0, r3
    e1fc:	cmp	r0, #0
    e1fe:	mov	r3, r4
    e200:	add.w	r3, r3, #4
    e204:	blt.w	db48 <_svfprintf_r+0x178>
    e208:	str	r3, [sp, #40]	; 0x28
    e20a:	ldrb.w	r3, [r8]
    e20e:	b.n	da84 <_svfprintf_r+0xb4>
    e210:	ldrb.w	r3, [r8]
    e214:	movs	r2, #1
    e216:	movs	r1, #43	; 0x2b
    e218:	b.n	da84 <_svfprintf_r+0xb4>
    e21a:	ldr	r3, [sp, #12]
    e21c:	orr.w	r3, r3, #32
    e220:	str	r3, [sp, #12]
    e222:	ldrb.w	r3, [r8]
    e226:	b.n	da84 <_svfprintf_r+0xb4>
    e228:	ldr	r2, [sp, #40]	; 0x28
    e22a:	str	r3, [sp, #52]	; 0x34
    e22c:	ldr	r6, [r2, #0]
    e22e:	movs	r4, #0
    e230:	strb.w	r4, [sp, #111]	; 0x6f
    e234:	adds	r7, r2, #4
    e236:	cmp	r6, #0
    e238:	beq.w	ee74 <_svfprintf_r+0x14a4>
    e23c:	cmp	r5, #0
    e23e:	blt.w	ed04 <_svfprintf_r+0x1334>
    e242:	mov	r2, r5
    e244:	mov	r1, r4
    e246:	mov	r0, r6
    e248:	bl	bf10 <memchr>
    e24c:	cmp	r0, #0
    e24e:	beq.w	ef18 <_svfprintf_r+0x1548>
    e252:	subs	r3, r0, r6
    e254:	str	r3, [sp, #36]	; 0x24
    e256:	mov	fp, r4
    e258:	bic.w	r3, r3, r3, asr #31
    e25c:	str	r7, [sp, #40]	; 0x28
    e25e:	str	r3, [sp, #16]
    e260:	str.w	fp, [sp, #60]	; 0x3c
    e264:	ldrb.w	r7, [sp, #111]	; 0x6f
    e268:	b.n	dd74 <_svfprintf_r+0x3a4>
    e26a:	str	r3, [sp, #52]	; 0x34
    e26c:	mov	fp, r5
    e26e:	cmp	r2, #0
    e270:	beq.w	e0c6 <_svfprintf_r+0x6f6>
    e274:	strb.w	r1, [sp, #111]	; 0x6f
    e278:	b.n	e0c6 <_svfprintf_r+0x6f6>
    e27a:	str	r3, [sp, #52]	; 0x34
    e27c:	mov	fp, r5
    e27e:	cmp	r2, #0
    e280:	bne.w	f0a0 <_svfprintf_r+0x16d0>
    e284:	ldr	r3, [sp, #12]
    e286:	ldr	r0, [pc, #344]	; (e3e0 <_svfprintf_r+0xa10>)
    e288:	lsls	r5, r3, #26
    e28a:	bmi.w	e124 <_svfprintf_r+0x754>
    e28e:	ldr	r3, [sp, #12]
    e290:	lsls	r4, r3, #27
    e292:	bpl.w	eb12 <_svfprintf_r+0x1142>
    e296:	ldr	r2, [sp, #40]	; 0x28
    e298:	mov	r3, r2
    e29a:	adds	r3, #4
    e29c:	ldr	r4, [r2, #0]
    e29e:	str	r3, [sp, #40]	; 0x28
    e2a0:	movs	r5, #0
    e2a2:	b.n	e136 <_svfprintf_r+0x766>
    e2a4:	ldrb.w	r3, [r8]
    e2a8:	cmp	r3, #108	; 0x6c
    e2aa:	beq.w	ec32 <_svfprintf_r+0x1262>
    e2ae:	ldr	r0, [sp, #12]
    e2b0:	orr.w	r0, r0, #16
    e2b4:	str	r0, [sp, #12]
    e2b6:	b.w	da84 <_svfprintf_r+0xb4>
    e2ba:	cmp	r2, #0
    e2bc:	bne.w	f098 <_svfprintf_r+0x16c8>
    e2c0:	ldr	r3, [sp, #12]
    e2c2:	lsls	r3, r3, #26
    e2c4:	bpl.w	e976 <_svfprintf_r+0xfa6>
    e2c8:	ldr	r2, [sp, #40]	; 0x28
    e2ca:	ldr	r1, [sp, #28]
    e2cc:	ldr	r3, [r2, #0]
    e2ce:	asrs	r5, r1, #31
    e2d0:	mov	r0, r1
    e2d2:	adds	r2, #4
    e2d4:	mov	r1, r5
    e2d6:	str	r2, [sp, #40]	; 0x28
    e2d8:	strd	r0, r1, [r3]
    e2dc:	b.w	da1e <_svfprintf_r+0x4e>
    e2e0:	ldr	r0, [pc, #252]	; (e3e0 <_svfprintf_r+0xa10>)
    e2e2:	str	r2, [sp, #52]	; 0x34
    e2e4:	cmp.w	fp, #0
    e2e8:	bne.w	e5d4 <_svfprintf_r+0xc04>
    e2ec:	mov	r7, fp
    e2ee:	mov.w	fp, #0
    e2f2:	str.w	fp, [sp, #36]	; 0x24
    e2f6:	add	r6, sp, #192	; 0xc0
    e2f8:	b.n	dd66 <_svfprintf_r+0x396>
    e2fa:	str	r3, [sp, #52]	; 0x34
    e2fc:	cmp	r2, #0
    e2fe:	bne.w	f090 <_svfprintf_r+0x16c0>
    e302:	ldr	r2, [sp, #52]	; 0x34
    e304:	cmp	r2, #0
    e306:	beq.w	dbb6 <_svfprintf_r+0x1e6>
    e30a:	movs	r3, #0
    e30c:	movs	r1, #1
    e30e:	mov	r7, r3
    e310:	str	r1, [sp, #16]
    e312:	strb.w	r2, [sp, #152]	; 0x98
    e316:	strb.w	r3, [sp, #111]	; 0x6f
    e31a:	mov	fp, r3
    e31c:	str	r3, [sp, #60]	; 0x3c
    e31e:	str	r1, [sp, #36]	; 0x24
    e320:	add	r6, sp, #152	; 0x98
    e322:	b.n	dd7c <_svfprintf_r+0x3ac>
    e324:	cmp.w	fp, #0
    e328:	beq.w	ef48 <_svfprintf_r+0x1578>
    e32c:	movs	r7, #0
    e32e:	movs	r4, #0
    e330:	movs	r5, #0
    e332:	b.n	dc1c <_svfprintf_r+0x24c>
    e334:	ldr	r0, [pc, #168]	; (e3e0 <_svfprintf_r+0xa10>)
    e336:	str	r3, [sp, #12]
    e338:	str	r2, [sp, #52]	; 0x34
    e33a:	orrs.w	r3, r4, r5
    e33e:	str	r7, [sp, #40]	; 0x28
    e340:	mov.w	r7, #0
    e344:	bne.w	e172 <_svfprintf_r+0x7a2>
    e348:	movs	r4, #0
    e34a:	movs	r5, #0
    e34c:	b.n	e172 <_svfprintf_r+0x7a2>
    e34e:	ldr	r4, [sp, #148]	; 0x94
    e350:	b.n	de1c <_svfprintf_r+0x44c>
    e352:	ldr	r3, [sp, #52]	; 0x34
    e354:	cmp	r3, #101	; 0x65
    e356:	ble.w	e4ae <_svfprintf_r+0xade>
    e35a:	movs	r2, #0
    e35c:	movs	r3, #0
    e35e:	ldrd	r0, r1, [sp, #64]	; 0x40
    e362:	bl	b12c <__aeabi_dcmpeq>
    e366:	cmp	r0, #0
    e368:	beq.w	e5d8 <_svfprintf_r+0xc08>
    e36c:	ldr	r3, [sp, #144]	; 0x90
    e36e:	ldr	r2, [pc, #116]	; (e3e4 <_svfprintf_r+0xa14>)
    e370:	str.w	r2, [r9]
    e374:	adds	r3, #1
    e376:	adds	r4, #1
    e378:	movs	r2, #1
    e37a:	cmp	r3, #7
    e37c:	str	r4, [sp, #148]	; 0x94
    e37e:	str	r3, [sp, #144]	; 0x90
    e380:	str.w	r2, [r9, #4]
    e384:	bgt.w	eb64 <_svfprintf_r+0x1194>
    e388:	add.w	r9, r9, #8
    e38c:	ldr	r3, [sp, #116]	; 0x74
    e38e:	ldr	r2, [sp, #56]	; 0x38
    e390:	cmp	r3, r2
    e392:	blt.n	e39c <_svfprintf_r+0x9cc>
    e394:	ldr	r3, [sp, #12]
    e396:	lsls	r3, r3, #31
    e398:	bpl.w	defc <_svfprintf_r+0x52c>
    e39c:	ldr	r3, [sp, #144]	; 0x90
    e39e:	ldr	r1, [sp, #72]	; 0x48
    e3a0:	ldr	r2, [sp, #76]	; 0x4c
    e3a2:	str.w	r2, [r9]
    e3a6:	adds	r3, #1
    e3a8:	add	r4, r1
    e3aa:	cmp	r3, #7
    e3ac:	str	r4, [sp, #148]	; 0x94
    e3ae:	str.w	r1, [r9, #4]
    e3b2:	str	r3, [sp, #144]	; 0x90
    e3b4:	bgt.w	ec46 <_svfprintf_r+0x1276>
    e3b8:	add.w	r9, r9, #8
    e3bc:	ldr	r3, [sp, #56]	; 0x38
    e3be:	subs	r5, r3, #1
    e3c0:	cmp	r5, #0
    e3c2:	ble.w	defc <_svfprintf_r+0x52c>
    e3c6:	ldr	r2, [pc, #32]	; (e3e8 <_svfprintf_r+0xa18>)
    e3c8:	ldr	r3, [sp, #144]	; 0x90
    e3ca:	str	r2, [sp, #44]	; 0x2c
    e3cc:	cmp	r5, #16
    e3ce:	ble.w	e7a4 <_svfprintf_r+0xdd4>
    e3d2:	movs	r6, #16
    e3d4:	ldr	r7, [sp, #24]
    e3d6:	ldr.w	fp, [sp, #20]
    e3da:	b.n	e3f8 <_svfprintf_r+0xa28>
    e3dc:	.word	0x000137d0
    e3e0:	.word	0x000137e4
    e3e4:	.word	0x00013800
    e3e8:	.word	0x000137b0
    e3ec:	add.w	r9, r9, #8
    e3f0:	subs	r5, #16
    e3f2:	cmp	r5, #16
    e3f4:	ble.w	e7a4 <_svfprintf_r+0xdd4>
    e3f8:	adds	r3, #1
    e3fa:	adds	r4, #16
    e3fc:	cmp	r3, #7
    e3fe:	str	r4, [sp, #148]	; 0x94
    e400:	str	r3, [sp, #144]	; 0x90
    e402:	str.w	sl, [r9]
    e406:	str.w	r6, [r9, #4]
    e40a:	ble.n	e3ec <_svfprintf_r+0xa1c>
    e40c:	add	r2, sp, #140	; 0x8c
    e40e:	mov	r1, fp
    e410:	mov	r0, r7
    e412:	bl	12968 <__ssprint_r>
    e416:	cmp	r0, #0
    e418:	bne.w	dbc4 <_svfprintf_r+0x1f4>
    e41c:	ldr	r4, [sp, #148]	; 0x94
    e41e:	ldr	r3, [sp, #144]	; 0x90
    e420:	add.w	r9, sp, #192	; 0xc0
    e424:	b.n	e3f0 <_svfprintf_r+0xa20>
    e426:	ldr	r3, [sp, #32]
    e428:	ldr	r2, [sp, #16]
    e42a:	subs	r7, r3, r2
    e42c:	cmp	r7, #0
    e42e:	ble.w	de64 <_svfprintf_r+0x494>
    e432:	ldr	r2, [pc, #752]	; (e724 <_svfprintf_r+0xd54>)
    e434:	ldr	r3, [sp, #144]	; 0x90
    e436:	str	r2, [sp, #44]	; 0x2c
    e438:	cmp	r7, #16
    e43a:	ble.n	e494 <_svfprintf_r+0xac4>
    e43c:	mov	r2, r9
    e43e:	mov	r1, r4
    e440:	mov	r9, r7
    e442:	movs	r5, #16
    e444:	mov	r7, r6
    e446:	ldr	r4, [sp, #24]
    e448:	ldr	r6, [sp, #20]
    e44a:	b.n	e45a <_svfprintf_r+0xa8a>
    e44c:	sub.w	r9, r9, #16
    e450:	cmp.w	r9, #16
    e454:	add.w	r2, r2, #8
    e458:	ble.n	e48c <_svfprintf_r+0xabc>
    e45a:	adds	r3, #1
    e45c:	adds	r1, #16
    e45e:	cmp	r3, #7
    e460:	str	r1, [sp, #148]	; 0x94
    e462:	str	r3, [sp, #144]	; 0x90
    e464:	str.w	sl, [r2]
    e468:	str	r5, [r2, #4]
    e46a:	ble.n	e44c <_svfprintf_r+0xa7c>
    e46c:	add	r2, sp, #140	; 0x8c
    e46e:	mov	r1, r6
    e470:	mov	r0, r4
    e472:	bl	12968 <__ssprint_r>
    e476:	cmp	r0, #0
    e478:	bne.w	dbc4 <_svfprintf_r+0x1f4>
    e47c:	sub.w	r9, r9, #16
    e480:	cmp.w	r9, #16
    e484:	ldr	r1, [sp, #148]	; 0x94
    e486:	ldr	r3, [sp, #144]	; 0x90
    e488:	add	r2, sp, #192	; 0xc0
    e48a:	bgt.n	e45a <_svfprintf_r+0xa8a>
    e48c:	mov	r6, r7
    e48e:	mov	r4, r1
    e490:	mov	r7, r9
    e492:	mov	r9, r2
    e494:	adds	r3, #1
    e496:	ldr	r2, [sp, #44]	; 0x2c
    e498:	str	r3, [sp, #144]	; 0x90
    e49a:	add	r4, r7
    e49c:	cmp	r3, #7
    e49e:	str	r4, [sp, #148]	; 0x94
    e4a0:	stmia.w	r9, {r2, r7}
    e4a4:	bgt.w	e922 <_svfprintf_r+0xf52>
    e4a8:	add.w	r9, r9, #8
    e4ac:	b.n	de64 <_svfprintf_r+0x494>
    e4ae:	ldr	r3, [sp, #56]	; 0x38
    e4b0:	ldr	r5, [sp, #144]	; 0x90
    e4b2:	cmp	r3, #1
    e4b4:	ble.w	e8cc <_svfprintf_r+0xefc>
    e4b8:	adds	r5, #1
    e4ba:	adds	r4, #1
    e4bc:	movs	r3, #1
    e4be:	cmp	r5, #7
    e4c0:	str	r4, [sp, #148]	; 0x94
    e4c2:	str	r5, [sp, #144]	; 0x90
    e4c4:	str.w	r6, [r9]
    e4c8:	str.w	r3, [r9, #4]
    e4cc:	bgt.w	e8ee <_svfprintf_r+0xf1e>
    e4d0:	add.w	r9, r9, #8
    e4d4:	ldr	r2, [sp, #72]	; 0x48
    e4d6:	ldr	r3, [sp, #76]	; 0x4c
    e4d8:	str.w	r3, [r9]
    e4dc:	adds	r5, #1
    e4de:	add	r4, r2
    e4e0:	cmp	r5, #7
    e4e2:	str	r4, [sp, #148]	; 0x94
    e4e4:	str	r5, [sp, #144]	; 0x90
    e4e6:	str.w	r2, [r9, #4]
    e4ea:	bgt.w	e908 <_svfprintf_r+0xf38>
    e4ee:	add.w	r9, r9, #8
    e4f2:	movs	r3, #0
    e4f4:	movs	r2, #0
    e4f6:	ldrd	r0, r1, [sp, #64]	; 0x40
    e4fa:	bl	b12c <__aeabi_dcmpeq>
    e4fe:	ldr	r3, [sp, #56]	; 0x38
    e500:	cmp	r0, #0
    e502:	bne.w	e68c <_svfprintf_r+0xcbc>
    e506:	subs	r3, #1
    e508:	adds	r5, #1
    e50a:	adds	r6, #1
    e50c:	add	r4, r3
    e50e:	cmp	r5, #7
    e510:	str	r5, [sp, #144]	; 0x90
    e512:	str	r4, [sp, #148]	; 0x94
    e514:	str.w	r6, [r9]
    e518:	str.w	r3, [r9, #4]
    e51c:	bgt.w	e70a <_svfprintf_r+0xd3a>
    e520:	add.w	r9, r9, #8
    e524:	ldr	r2, [sp, #84]	; 0x54
    e526:	str.w	r2, [r9, #4]
    e52a:	adds	r5, #1
    e52c:	add	r4, r2
    e52e:	add	r3, sp, #124	; 0x7c
    e530:	cmp	r5, #7
    e532:	str	r4, [sp, #148]	; 0x94
    e534:	str	r5, [sp, #144]	; 0x90
    e536:	str.w	r3, [r9]
    e53a:	ble.w	def8 <_svfprintf_r+0x528>
    e53e:	add	r2, sp, #140	; 0x8c
    e540:	ldr	r1, [sp, #20]
    e542:	ldr	r0, [sp, #24]
    e544:	bl	12968 <__ssprint_r>
    e548:	cmp	r0, #0
    e54a:	bne.w	dbc4 <_svfprintf_r+0x1f4>
    e54e:	ldr	r4, [sp, #148]	; 0x94
    e550:	add.w	r9, sp, #192	; 0xc0
    e554:	b.n	defc <_svfprintf_r+0x52c>
    e556:	add	r2, sp, #140	; 0x8c
    e558:	ldr	r1, [sp, #20]
    e55a:	ldr	r0, [sp, #24]
    e55c:	bl	12968 <__ssprint_r>
    e560:	cmp	r0, #0
    e562:	beq.w	df98 <_svfprintf_r+0x5c8>
    e566:	b.w	dbc4 <_svfprintf_r+0x1f4>
    e56a:	add	r2, sp, #140	; 0x8c
    e56c:	ldr	r1, [sp, #20]
    e56e:	ldr	r0, [sp, #24]
    e570:	bl	12968 <__ssprint_r>
    e574:	cmp	r0, #0
    e576:	bne.w	dbc4 <_svfprintf_r+0x1f4>
    e57a:	ldr	r4, [sp, #148]	; 0x94
    e57c:	add.w	r9, sp, #192	; 0xc0
    e580:	b.n	ded6 <_svfprintf_r+0x506>
    e582:	add	r2, sp, #140	; 0x8c
    e584:	ldr	r1, [sp, #20]
    e586:	ldr	r0, [sp, #24]
    e588:	bl	12968 <__ssprint_r>
    e58c:	cmp	r0, #0
    e58e:	bne.w	dbc4 <_svfprintf_r+0x1f4>
    e592:	ldr	r4, [sp, #148]	; 0x94
    e594:	add.w	r9, sp, #192	; 0xc0
    e598:	b.n	de3c <_svfprintf_r+0x46c>
    e59a:	add	r2, sp, #140	; 0x8c
    e59c:	ldr	r1, [sp, #20]
    e59e:	ldr	r0, [sp, #24]
    e5a0:	bl	12968 <__ssprint_r>
    e5a4:	cmp	r0, #0
    e5a6:	bne.w	dbc4 <_svfprintf_r+0x1f4>
    e5aa:	ldr	r4, [sp, #148]	; 0x94
    e5ac:	add.w	r9, sp, #192	; 0xc0
    e5b0:	b.n	de5c <_svfprintf_r+0x48c>
    e5b2:	cmp.w	fp, #0
    e5b6:	strb.w	r7, [sp, #111]	; 0x6f
    e5ba:	blt.w	eb7c <_svfprintf_r+0x11ac>
    e5be:	bic.w	r3, r2, #128	; 0x80
    e5c2:	str	r3, [sp, #12]
    e5c4:	orrs.w	r3, r4, r5
    e5c8:	bne.w	e172 <_svfprintf_r+0x7a2>
    e5cc:	cmp.w	fp, #0
    e5d0:	beq.w	e2ec <_svfprintf_r+0x91c>
    e5d4:	movs	r7, #0
    e5d6:	b.n	e348 <_svfprintf_r+0x978>
    e5d8:	ldr	r5, [sp, #116]	; 0x74
    e5da:	cmp	r5, #0
    e5dc:	ble.w	eb82 <_svfprintf_r+0x11b2>
    e5e0:	ldr	r3, [sp, #60]	; 0x3c
    e5e2:	ldr	r2, [sp, #56]	; 0x38
    e5e4:	cmp	r3, r2
    e5e6:	it	ge
    e5e8:	movge	r3, r2
    e5ea:	cmp	r3, #0
    e5ec:	mov	r5, r3
    e5ee:	ble.n	e60c <_svfprintf_r+0xc3c>
    e5f0:	ldr	r3, [sp, #144]	; 0x90
    e5f2:	str.w	r6, [r9]
    e5f6:	adds	r3, #1
    e5f8:	add	r4, r5
    e5fa:	cmp	r3, #7
    e5fc:	str	r4, [sp, #148]	; 0x94
    e5fe:	str.w	r5, [r9, #4]
    e602:	str	r3, [sp, #144]	; 0x90
    e604:	bgt.w	ed5a <_svfprintf_r+0x138a>
    e608:	add.w	r9, r9, #8
    e60c:	ldr	r3, [sp, #60]	; 0x3c
    e60e:	cmp	r5, #0
    e610:	it	ge
    e612:	subge	r3, r3, r5
    e614:	cmp	r3, #0
    e616:	mov	r5, r3
    e618:	ble.w	e80c <_svfprintf_r+0xe3c>
    e61c:	ldr	r2, [pc, #260]	; (e724 <_svfprintf_r+0xd54>)
    e61e:	ldr	r3, [sp, #144]	; 0x90
    e620:	str	r2, [sp, #44]	; 0x2c
    e622:	cmp	r5, #16
    e624:	ble.w	eb2e <_svfprintf_r+0x115e>
    e628:	mov	r2, r4
    e62a:	movs	r7, #16
    e62c:	ldr.w	fp, [sp, #24]
    e630:	ldr	r4, [sp, #20]
    e632:	b.n	e640 <_svfprintf_r+0xc70>
    e634:	add.w	r9, r9, #8
    e638:	subs	r5, #16
    e63a:	cmp	r5, #16
    e63c:	ble.w	eb2c <_svfprintf_r+0x115c>
    e640:	adds	r3, #1
    e642:	adds	r2, #16
    e644:	cmp	r3, #7
    e646:	str	r2, [sp, #148]	; 0x94
    e648:	str	r3, [sp, #144]	; 0x90
    e64a:	str.w	sl, [r9]
    e64e:	str.w	r7, [r9, #4]
    e652:	ble.n	e634 <_svfprintf_r+0xc64>
    e654:	add	r2, sp, #140	; 0x8c
    e656:	mov	r1, r4
    e658:	mov	r0, fp
    e65a:	bl	12968 <__ssprint_r>
    e65e:	cmp	r0, #0
    e660:	bne.w	dbc4 <_svfprintf_r+0x1f4>
    e664:	ldr	r2, [sp, #148]	; 0x94
    e666:	ldr	r3, [sp, #144]	; 0x90
    e668:	add.w	r9, sp, #192	; 0xc0
    e66c:	b.n	e638 <_svfprintf_r+0xc68>
    e66e:	add	r2, sp, #140	; 0x8c
    e670:	ldr	r1, [sp, #20]
    e672:	ldr	r0, [sp, #24]
    e674:	bl	12968 <__ssprint_r>
    e678:	cmp	r0, #0
    e67a:	bne.w	dbc4 <_svfprintf_r+0x1f4>
    e67e:	ldrb.w	r7, [sp, #111]	; 0x6f
    e682:	ldr	r4, [sp, #148]	; 0x94
    e684:	add.w	r9, sp, #192	; 0xc0
    e688:	b.w	de1c <_svfprintf_r+0x44c>
    e68c:	subs	r6, r3, #1
    e68e:	cmp	r6, #0
    e690:	ble.w	e524 <_svfprintf_r+0xb54>
    e694:	ldr	r3, [pc, #140]	; (e724 <_svfprintf_r+0xd54>)
    e696:	str	r3, [sp, #44]	; 0x2c
    e698:	cmp	r6, #16
    e69a:	ble.n	e6f6 <_svfprintf_r+0xd26>
    e69c:	str.w	r8, [sp, #36]	; 0x24
    e6a0:	movs	r7, #16
    e6a2:	mov	r8, r6
    e6a4:	ldr.w	fp, [sp, #24]
    e6a8:	ldr	r6, [sp, #20]
    e6aa:	b.n	e6ba <_svfprintf_r+0xcea>
    e6ac:	sub.w	r8, r8, #16
    e6b0:	cmp.w	r8, #16
    e6b4:	add.w	r9, r9, #8
    e6b8:	ble.n	e6f0 <_svfprintf_r+0xd20>
    e6ba:	adds	r5, #1
    e6bc:	adds	r4, #16
    e6be:	cmp	r5, #7
    e6c0:	str	r4, [sp, #148]	; 0x94
    e6c2:	str	r5, [sp, #144]	; 0x90
    e6c4:	str.w	sl, [r9]
    e6c8:	str.w	r7, [r9, #4]
    e6cc:	ble.n	e6ac <_svfprintf_r+0xcdc>
    e6ce:	add	r2, sp, #140	; 0x8c
    e6d0:	mov	r1, r6
    e6d2:	mov	r0, fp
    e6d4:	bl	12968 <__ssprint_r>
    e6d8:	cmp	r0, #0
    e6da:	bne.w	dbc4 <_svfprintf_r+0x1f4>
    e6de:	sub.w	r8, r8, #16
    e6e2:	cmp.w	r8, #16
    e6e6:	ldr	r4, [sp, #148]	; 0x94
    e6e8:	ldr	r5, [sp, #144]	; 0x90
    e6ea:	add.w	r9, sp, #192	; 0xc0
    e6ee:	bgt.n	e6ba <_svfprintf_r+0xcea>
    e6f0:	mov	r6, r8
    e6f2:	ldr.w	r8, [sp, #36]	; 0x24
    e6f6:	ldr	r3, [sp, #44]	; 0x2c
    e6f8:	adds	r5, #1
    e6fa:	add	r4, r6
    e6fc:	cmp	r5, #7
    e6fe:	str	r4, [sp, #148]	; 0x94
    e700:	str	r5, [sp, #144]	; 0x90
    e702:	stmia.w	r9, {r3, r6}
    e706:	ble.w	e520 <_svfprintf_r+0xb50>
    e70a:	add	r2, sp, #140	; 0x8c
    e70c:	ldr	r1, [sp, #20]
    e70e:	ldr	r0, [sp, #24]
    e710:	bl	12968 <__ssprint_r>
    e714:	cmp	r0, #0
    e716:	bne.w	dbc4 <_svfprintf_r+0x1f4>
    e71a:	ldr	r4, [sp, #148]	; 0x94
    e71c:	ldr	r5, [sp, #144]	; 0x90
    e71e:	add.w	r9, sp, #192	; 0xc0
    e722:	b.n	e524 <_svfprintf_r+0xb54>
    e724:	.word	0x000137b0
    e728:	ldr	r1, [sp, #12]
    e72a:	ands.w	r2, r1, #16
    e72e:	beq.w	ead8 <_svfprintf_r+0x1108>
    e732:	ldr	r0, [sp, #40]	; 0x28
    e734:	strb.w	r3, [sp, #111]	; 0x6f
    e738:	cmp.w	fp, #0
    e73c:	ldr	r4, [r0, #0]
    e73e:	add.w	r7, r0, #4
    e742:	mov.w	r5, #0
    e746:	blt.n	e796 <_svfprintf_r+0xdc6>
    e748:	mov	r2, r1
    e74a:	bic.w	r2, r2, #128	; 0x80
    e74e:	str	r2, [sp, #12]
    e750:	orrs.w	r2, r4, r5
    e754:	str	r7, [sp, #40]	; 0x28
    e756:	mov	r7, r3
    e758:	bne.w	dd2c <_svfprintf_r+0x35c>
    e75c:	b.n	e0fc <_svfprintf_r+0x72c>
    e75e:	ldr	r3, [sp, #12]
    e760:	lsls	r0, r3, #27
    e762:	bmi.n	e7ba <_svfprintf_r+0xdea>
    e764:	ldr	r3, [sp, #12]
    e766:	lsls	r1, r3, #25
    e768:	bpl.n	e7ba <_svfprintf_r+0xdea>
    e76a:	ldr	r1, [sp, #40]	; 0x28
    e76c:	ldrsh.w	r4, [r1]
    e770:	adds	r1, #4
    e772:	asrs	r5, r4, #31
    e774:	mov	r2, r4
    e776:	mov	r3, r5
    e778:	str	r1, [sp, #40]	; 0x28
    e77a:	b.w	dd06 <_svfprintf_r+0x336>
    e77e:	ldr	r1, [sp, #40]	; 0x28
    e780:	strb.w	r3, [sp, #111]	; 0x6f
    e784:	cmp.w	fp, #0
    e788:	ldr	r4, [r1, #0]
    e78a:	add.w	r7, r1, #4
    e78e:	mov.w	r5, #0
    e792:	bge.w	ec2e <_svfprintf_r+0x125e>
    e796:	str	r7, [sp, #40]	; 0x28
    e798:	mov	r7, r3
    e79a:	orrs.w	r3, r4, r5
    e79e:	bne.w	dd2c <_svfprintf_r+0x35c>
    e7a2:	b.n	e106 <_svfprintf_r+0x736>
    e7a4:	adds	r3, #1
    e7a6:	ldr	r2, [sp, #44]	; 0x2c
    e7a8:	str	r3, [sp, #144]	; 0x90
    e7aa:	add	r4, r5
    e7ac:	cmp	r3, #7
    e7ae:	str	r4, [sp, #148]	; 0x94
    e7b0:	stmia.w	r9, {r2, r5}
    e7b4:	ble.w	def8 <_svfprintf_r+0x528>
    e7b8:	b.n	e53e <_svfprintf_r+0xb6e>
    e7ba:	ldr	r2, [sp, #40]	; 0x28
    e7bc:	ldr	r4, [r2, #0]
    e7be:	mov	r3, r2
    e7c0:	adds	r3, #4
    e7c2:	asrs	r5, r4, #31
    e7c4:	mov	r2, r4
    e7c6:	str	r3, [sp, #40]	; 0x28
    e7c8:	cmp	r2, #0
    e7ca:	mov	r3, r5
    e7cc:	sbcs.w	r3, r3, #0
    e7d0:	bge.w	dd10 <_svfprintf_r+0x340>
    e7d4:	negs	r4, r4
    e7d6:	mov.w	r7, #45	; 0x2d
    e7da:	sbc.w	r5, r5, r5, lsl #1
    e7de:	cmp.w	fp, #0
    e7e2:	strb.w	r7, [sp, #111]	; 0x6f
    e7e6:	blt.w	dd2c <_svfprintf_r+0x35c>
    e7ea:	ldr	r3, [sp, #12]
    e7ec:	bic.w	r3, r3, #128	; 0x80
    e7f0:	str	r3, [sp, #12]
    e7f2:	b.w	dd2c <_svfprintf_r+0x35c>
    e7f6:	add	r2, sp, #140	; 0x8c
    e7f8:	ldr	r1, [sp, #20]
    e7fa:	ldr	r0, [sp, #24]
    e7fc:	bl	12968 <__ssprint_r>
    e800:	cmp	r0, #0
    e802:	bne.w	dbc4 <_svfprintf_r+0x1f4>
    e806:	ldr	r4, [sp, #148]	; 0x94
    e808:	add.w	r9, sp, #192	; 0xc0
    e80c:	ldr	r2, [sp, #60]	; 0x3c
    e80e:	ldr	r3, [sp, #116]	; 0x74
    e810:	add	r2, r6
    e812:	mov	r7, r2
    e814:	ldr	r2, [sp, #56]	; 0x38
    e816:	cmp	r3, r2
    e818:	blt.n	e8aa <_svfprintf_r+0xeda>
    e81a:	ldr	r2, [sp, #12]
    e81c:	lsls	r5, r2, #31
    e81e:	bmi.n	e8aa <_svfprintf_r+0xeda>
    e820:	ldr	r1, [sp, #56]	; 0x38
    e822:	add	r6, r1
    e824:	subs	r5, r6, r7
    e826:	subs	r3, r1, r3
    e828:	cmp	r5, r3
    e82a:	it	ge
    e82c:	movge	r5, r3
    e82e:	cmp	r5, #0
    e830:	mov	r6, r5
    e832:	ble.n	e850 <_svfprintf_r+0xe80>
    e834:	ldr	r2, [sp, #144]	; 0x90
    e836:	str.w	r7, [r9]
    e83a:	adds	r2, #1
    e83c:	add	r4, r5
    e83e:	cmp	r2, #7
    e840:	str	r4, [sp, #148]	; 0x94
    e842:	str.w	r5, [r9, #4]
    e846:	str	r2, [sp, #144]	; 0x90
    e848:	bgt.w	ee48 <_svfprintf_r+0x1478>
    e84c:	add.w	r9, r9, #8
    e850:	cmp	r6, #0
    e852:	ite	ge
    e854:	subge	r5, r3, r6
    e856:	movlt	r5, r3
    e858:	cmp	r5, #0
    e85a:	ble.w	defc <_svfprintf_r+0x52c>
    e85e:	ldr	r2, [pc, #744]	; (eb48 <_svfprintf_r+0x1178>)
    e860:	ldr	r3, [sp, #144]	; 0x90
    e862:	str	r2, [sp, #44]	; 0x2c
    e864:	cmp	r5, #16
    e866:	ble.n	e7a4 <_svfprintf_r+0xdd4>
    e868:	movs	r6, #16
    e86a:	ldr	r7, [sp, #24]
    e86c:	ldr.w	fp, [sp, #20]
    e870:	b.n	e87c <_svfprintf_r+0xeac>
    e872:	add.w	r9, r9, #8
    e876:	subs	r5, #16
    e878:	cmp	r5, #16
    e87a:	ble.n	e7a4 <_svfprintf_r+0xdd4>
    e87c:	adds	r3, #1
    e87e:	adds	r4, #16
    e880:	cmp	r3, #7
    e882:	str	r4, [sp, #148]	; 0x94
    e884:	str	r3, [sp, #144]	; 0x90
    e886:	str.w	sl, [r9]
    e88a:	str.w	r6, [r9, #4]
    e88e:	ble.n	e872 <_svfprintf_r+0xea2>
    e890:	add	r2, sp, #140	; 0x8c
    e892:	mov	r1, fp
    e894:	mov	r0, r7
    e896:	bl	12968 <__ssprint_r>
    e89a:	cmp	r0, #0
    e89c:	bne.w	dbc4 <_svfprintf_r+0x1f4>
    e8a0:	ldr	r4, [sp, #148]	; 0x94
    e8a2:	ldr	r3, [sp, #144]	; 0x90
    e8a4:	add.w	r9, sp, #192	; 0xc0
    e8a8:	b.n	e876 <_svfprintf_r+0xea6>
    e8aa:	ldr	r2, [sp, #144]	; 0x90
    e8ac:	ldr	r0, [sp, #72]	; 0x48
    e8ae:	ldr	r1, [sp, #76]	; 0x4c
    e8b0:	str.w	r1, [r9]
    e8b4:	adds	r2, #1
    e8b6:	add	r4, r0
    e8b8:	cmp	r2, #7
    e8ba:	str	r4, [sp, #148]	; 0x94
    e8bc:	str.w	r0, [r9, #4]
    e8c0:	str	r2, [sp, #144]	; 0x90
    e8c2:	bgt.w	ee2e <_svfprintf_r+0x145e>
    e8c6:	add.w	r9, r9, #8
    e8ca:	b.n	e820 <_svfprintf_r+0xe50>
    e8cc:	ldr	r3, [sp, #12]
    e8ce:	lsls	r0, r3, #31
    e8d0:	bmi.w	e4b8 <_svfprintf_r+0xae8>
    e8d4:	adds	r5, #1
    e8d6:	adds	r4, #1
    e8d8:	movs	r3, #1
    e8da:	cmp	r5, #7
    e8dc:	str	r4, [sp, #148]	; 0x94
    e8de:	str	r5, [sp, #144]	; 0x90
    e8e0:	str.w	r6, [r9]
    e8e4:	str.w	r3, [r9, #4]
    e8e8:	ble.w	e520 <_svfprintf_r+0xb50>
    e8ec:	b.n	e70a <_svfprintf_r+0xd3a>
    e8ee:	add	r2, sp, #140	; 0x8c
    e8f0:	ldr	r1, [sp, #20]
    e8f2:	ldr	r0, [sp, #24]
    e8f4:	bl	12968 <__ssprint_r>
    e8f8:	cmp	r0, #0
    e8fa:	bne.w	dbc4 <_svfprintf_r+0x1f4>
    e8fe:	ldr	r4, [sp, #148]	; 0x94
    e900:	ldr	r5, [sp, #144]	; 0x90
    e902:	add.w	r9, sp, #192	; 0xc0
    e906:	b.n	e4d4 <_svfprintf_r+0xb04>
    e908:	add	r2, sp, #140	; 0x8c
    e90a:	ldr	r1, [sp, #20]
    e90c:	ldr	r0, [sp, #24]
    e90e:	bl	12968 <__ssprint_r>
    e912:	cmp	r0, #0
    e914:	bne.w	dbc4 <_svfprintf_r+0x1f4>
    e918:	ldr	r4, [sp, #148]	; 0x94
    e91a:	ldr	r5, [sp, #144]	; 0x90
    e91c:	add.w	r9, sp, #192	; 0xc0
    e920:	b.n	e4f2 <_svfprintf_r+0xb22>
    e922:	add	r2, sp, #140	; 0x8c
    e924:	ldr	r1, [sp, #20]
    e926:	ldr	r0, [sp, #24]
    e928:	bl	12968 <__ssprint_r>
    e92c:	cmp	r0, #0
    e92e:	bne.w	dbc4 <_svfprintf_r+0x1f4>
    e932:	ldr	r4, [sp, #148]	; 0x94
    e934:	add.w	r9, sp, #192	; 0xc0
    e938:	b.w	de64 <_svfprintf_r+0x494>
    e93c:	ldr	r1, [sp, #12]
    e93e:	ands.w	r3, r1, #64	; 0x40
    e942:	beq.w	eab8 <_svfprintf_r+0x10e8>
    e946:	ldr	r0, [sp, #40]	; 0x28
    e948:	strb.w	r2, [sp, #111]	; 0x6f
    e94c:	mov	r3, r0
    e94e:	cmp.w	fp, #0
    e952:	add.w	r3, r3, #4
    e956:	ldrh	r4, [r0, #0]
    e958:	mov.w	r5, #0
    e95c:	blt.w	ece0 <_svfprintf_r+0x1310>
    e960:	bic.w	r1, r1, #128	; 0x80
    e964:	str	r1, [sp, #12]
    e966:	orrs.w	r1, r4, r5
    e96a:	str	r3, [sp, #40]	; 0x28
    e96c:	beq.w	e324 <_svfprintf_r+0x954>
    e970:	mov	r7, r2
    e972:	b.w	dc1c <_svfprintf_r+0x24c>
    e976:	ldr	r3, [sp, #12]
    e978:	lsls	r7, r3, #27
    e97a:	bmi.n	e994 <_svfprintf_r+0xfc4>
    e97c:	ldr	r3, [sp, #12]
    e97e:	lsls	r6, r3, #25
    e980:	bpl.n	e994 <_svfprintf_r+0xfc4>
    e982:	ldr	r2, [sp, #40]	; 0x28
    e984:	ldr	r3, [r2, #0]
    e986:	adds	r2, #4
    e988:	str	r2, [sp, #40]	; 0x28
    e98a:	ldrh.w	r2, [sp, #28]
    e98e:	strh	r2, [r3, #0]
    e990:	b.w	da1e <_svfprintf_r+0x4e>
    e994:	ldr	r2, [sp, #40]	; 0x28
    e996:	ldr	r3, [r2, #0]
    e998:	adds	r2, #4
    e99a:	str	r2, [sp, #40]	; 0x28
    e99c:	ldr	r2, [sp, #28]
    e99e:	str	r2, [r3, #0]
    e9a0:	b.w	da1e <_svfprintf_r+0x4e>
    e9a4:	ldrd	r0, r1, [sp, #64]	; 0x40
    e9a8:	mov	r2, r0
    e9aa:	mov	r3, r1
    e9ac:	bl	b190 <__aeabi_dcmpun>
    e9b0:	cmp	r0, #0
    e9b2:	bne.w	efb0 <_svfprintf_r+0x15e0>
    e9b6:	ldr	r3, [sp, #52]	; 0x34
    e9b8:	cmp.w	fp, #4294967295
    e9bc:	bic.w	r7, r3, #32
    e9c0:	beq.w	ee92 <_svfprintf_r+0x14c2>
    e9c4:	cmp	r7, #71	; 0x47
    e9c6:	beq.w	ecce <_svfprintf_r+0x12fe>
    e9ca:	ldr	r3, [sp, #68]	; 0x44
    e9cc:	ldr	r2, [sp, #12]
    e9ce:	cmp	r3, #0
    e9d0:	orr.w	r2, r2, #256	; 0x100
    e9d4:	str	r2, [sp, #44]	; 0x2c
    e9d6:	blt.w	eeca <_svfprintf_r+0x14fa>
    e9da:	vldr	d7, [sp, #64]	; 0x40
    e9de:	vstr	d7, [sp, #96]	; 0x60
    e9e2:	movs	r3, #0
    e9e4:	str	r3, [sp, #16]
    e9e6:	ldr	r3, [sp, #52]	; 0x34
    e9e8:	cmp	r3, #102	; 0x66
    e9ea:	beq.w	ee98 <_svfprintf_r+0x14c8>
    e9ee:	cmp	r3, #70	; 0x46
    e9f0:	beq.w	ec7e <_svfprintf_r+0x12ae>
    e9f4:	cmp	r7, #69	; 0x45
    e9f6:	ite	eq
    e9f8:	addeq.w	r5, fp, #1
    e9fc:	movne	r5, fp
    e9fe:	add	r2, sp, #132	; 0x84
    ea00:	add	r3, sp, #120	; 0x78
    ea02:	str	r2, [sp, #4]
    ea04:	str	r3, [sp, #0]
    ea06:	mov	r2, r5
    ea08:	add	r3, sp, #116	; 0x74
    ea0a:	movs	r1, #2
    ea0c:	vldr	d0, [sp, #96]	; 0x60
    ea10:	ldr	r0, [sp, #24]
    ea12:	bl	101d8 <_dtoa_r>
    ea16:	ldr	r3, [sp, #52]	; 0x34
    ea18:	cmp	r3, #103	; 0x67
    ea1a:	mov	r6, r0
    ea1c:	bne.w	eef6 <_svfprintf_r+0x1526>
    ea20:	ldr	r3, [sp, #12]
    ea22:	lsls	r2, r3, #31
    ea24:	bpl.w	ef9a <_svfprintf_r+0x15ca>
    ea28:	adds	r4, r6, r5
    ea2a:	movs	r2, #0
    ea2c:	movs	r3, #0
    ea2e:	ldrd	r0, r1, [sp, #96]	; 0x60
    ea32:	bl	b12c <__aeabi_dcmpeq>
    ea36:	cmp	r0, #0
    ea38:	bne.w	ed56 <_svfprintf_r+0x1386>
    ea3c:	ldr	r3, [sp, #132]	; 0x84
    ea3e:	cmp	r4, r3
    ea40:	bls.n	ea50 <_svfprintf_r+0x1080>
    ea42:	movs	r1, #48	; 0x30
    ea44:	adds	r2, r3, #1
    ea46:	str	r2, [sp, #132]	; 0x84
    ea48:	strb	r1, [r3, #0]
    ea4a:	ldr	r3, [sp, #132]	; 0x84
    ea4c:	cmp	r4, r3
    ea4e:	bhi.n	ea44 <_svfprintf_r+0x1074>
    ea50:	subs	r3, r3, r6
    ea52:	cmp	r7, #71	; 0x47
    ea54:	str	r3, [sp, #56]	; 0x38
    ea56:	beq.w	ed48 <_svfprintf_r+0x1378>
    ea5a:	ldr	r3, [sp, #52]	; 0x34
    ea5c:	cmp	r3, #101	; 0x65
    ea5e:	ble.w	ef14 <_svfprintf_r+0x1544>
    ea62:	ldr	r3, [sp, #52]	; 0x34
    ea64:	cmp	r3, #102	; 0x66
    ea66:	ldr	r3, [sp, #116]	; 0x74
    ea68:	str	r3, [sp, #60]	; 0x3c
    ea6a:	beq.w	ef2e <_svfprintf_r+0x155e>
    ea6e:	ldr	r2, [sp, #60]	; 0x3c
    ea70:	ldr	r1, [sp, #56]	; 0x38
    ea72:	cmp	r2, r1
    ea74:	blt.w	eedc <_svfprintf_r+0x150c>
    ea78:	ldr	r3, [sp, #12]
    ea7a:	lsls	r1, r3, #31
    ea7c:	bmi.w	ef9e <_svfprintf_r+0x15ce>
    ea80:	bic.w	r3, r2, r2, asr #31
    ea84:	str	r2, [sp, #36]	; 0x24
    ea86:	movs	r2, #103	; 0x67
    ea88:	str	r2, [sp, #52]	; 0x34
    ea8a:	ldr	r2, [sp, #16]
    ea8c:	cmp	r2, #0
    ea8e:	bne.w	ecf0 <_svfprintf_r+0x1320>
    ea92:	str	r3, [sp, #16]
    ea94:	ldr	r3, [sp, #44]	; 0x2c
    ea96:	str	r3, [sp, #12]
    ea98:	mov	fp, r2
    ea9a:	ldrb.w	r7, [sp, #111]	; 0x6f
    ea9e:	b.w	dd74 <_svfprintf_r+0x3a4>
    eaa2:	bic.w	r7, r7, #7
    eaa6:	vldr	d7, [r7]
    eaaa:	add.w	r3, r7, #8
    eaae:	vstr	d7, [sp, #64]	; 0x40
    eab2:	str	r3, [sp, #40]	; 0x28
    eab4:	b.w	dfcc <_svfprintf_r+0x5fc>
    eab8:	ldr	r1, [sp, #40]	; 0x28
    eaba:	strb.w	r3, [sp, #111]	; 0x6f
    eabe:	cmp.w	fp, #0
    eac2:	ldr	r4, [r1, #0]
    eac4:	add.w	r7, r1, #4
    eac8:	mov.w	r5, #0
    eacc:	bge.w	ec28 <_svfprintf_r+0x1258>
    ead0:	str	r7, [sp, #40]	; 0x28
    ead2:	movs	r7, #0
    ead4:	b.w	dc1c <_svfprintf_r+0x24c>
    ead8:	ldr	r1, [sp, #12]
    eada:	ands.w	r3, r1, #64	; 0x40
    eade:	beq.w	e77e <_svfprintf_r+0xdae>
    eae2:	ldr	r0, [sp, #40]	; 0x28
    eae4:	strb.w	r2, [sp, #111]	; 0x6f
    eae8:	mov	r3, r0
    eaea:	cmp.w	fp, #0
    eaee:	add.w	r3, r3, #4
    eaf2:	ldrh	r4, [r0, #0]
    eaf4:	mov.w	r5, #0
    eaf8:	blt.w	ecda <_svfprintf_r+0x130a>
    eafc:	bic.w	r1, r1, #128	; 0x80
    eb00:	str	r1, [sp, #12]
    eb02:	orrs.w	r1, r4, r5
    eb06:	str	r3, [sp, #40]	; 0x28
    eb08:	mov	r7, r2
    eb0a:	bne.w	dd2c <_svfprintf_r+0x35c>
    eb0e:	b.w	e0fc <_svfprintf_r+0x72c>
    eb12:	ldr	r3, [sp, #12]
    eb14:	ldr	r2, [sp, #40]	; 0x28
    eb16:	tst.w	r3, #64	; 0x40
    eb1a:	mov	r3, r2
    eb1c:	beq.w	ece4 <_svfprintf_r+0x1314>
    eb20:	adds	r3, #4
    eb22:	ldrh	r4, [r2, #0]
    eb24:	str	r3, [sp, #40]	; 0x28
    eb26:	movs	r5, #0
    eb28:	b.w	e136 <_svfprintf_r+0x766>
    eb2c:	mov	r4, r2
    eb2e:	adds	r3, #1
    eb30:	ldr	r2, [sp, #44]	; 0x2c
    eb32:	str	r3, [sp, #144]	; 0x90
    eb34:	add	r4, r5
    eb36:	cmp	r3, #7
    eb38:	str	r4, [sp, #148]	; 0x94
    eb3a:	stmia.w	r9, {r2, r5}
    eb3e:	bgt.w	e7f6 <_svfprintf_r+0xe26>
    eb42:	add.w	r9, r9, #8
    eb46:	b.n	e80c <_svfprintf_r+0xe3c>
    eb48:	.word	0x000137b0
    eb4c:	movs	r7, #0
    eb4e:	cmp	fp, r7
    eb50:	strb.w	r7, [sp, #111]	; 0x6f
    eb54:	blt.w	e348 <_svfprintf_r+0x978>
    eb58:	ldr	r3, [sp, #12]
    eb5a:	bic.w	r3, r3, #128	; 0x80
    eb5e:	str	r3, [sp, #12]
    eb60:	b.w	e2e4 <_svfprintf_r+0x914>
    eb64:	add	r2, sp, #140	; 0x8c
    eb66:	ldr	r1, [sp, #20]
    eb68:	ldr	r0, [sp, #24]
    eb6a:	bl	12968 <__ssprint_r>
    eb6e:	cmp	r0, #0
    eb70:	bne.w	dbc4 <_svfprintf_r+0x1f4>
    eb74:	ldr	r4, [sp, #148]	; 0x94
    eb76:	add.w	r9, sp, #192	; 0xc0
    eb7a:	b.n	e38c <_svfprintf_r+0x9bc>
    eb7c:	ldr	r7, [sp, #40]	; 0x28
    eb7e:	b.w	e33a <_svfprintf_r+0x96a>
    eb82:	ldr	r3, [sp, #144]	; 0x90
    eb84:	ldr	r2, [pc, #736]	; (ee68 <_svfprintf_r+0x1498>)
    eb86:	str.w	r2, [r9]
    eb8a:	adds	r3, #1
    eb8c:	adds	r4, #1
    eb8e:	movs	r2, #1
    eb90:	cmp	r3, #7
    eb92:	str	r4, [sp, #148]	; 0x94
    eb94:	str	r3, [sp, #144]	; 0x90
    eb96:	str.w	r2, [r9, #4]
    eb9a:	bgt.w	ecb4 <_svfprintf_r+0x12e4>
    eb9e:	add.w	r9, r9, #8
    eba2:	cbnz	r5, ebb0 <_svfprintf_r+0x11e0>
    eba4:	ldr	r3, [sp, #56]	; 0x38
    eba6:	cbnz	r3, ebb0 <_svfprintf_r+0x11e0>
    eba8:	ldr	r3, [sp, #12]
    ebaa:	lsls	r7, r3, #31
    ebac:	bpl.w	defc <_svfprintf_r+0x52c>
    ebb0:	ldr	r3, [sp, #144]	; 0x90
    ebb2:	ldr	r1, [sp, #72]	; 0x48
    ebb4:	ldr	r2, [sp, #76]	; 0x4c
    ebb6:	str.w	r2, [r9]
    ebba:	adds	r3, #1
    ebbc:	add	r4, r1
    ebbe:	cmp	r3, #7
    ebc0:	str	r4, [sp, #148]	; 0x94
    ebc2:	str.w	r1, [r9, #4]
    ebc6:	str	r3, [sp, #144]	; 0x90
    ebc8:	bgt.w	ef66 <_svfprintf_r+0x1596>
    ebcc:	add.w	r9, r9, #8
    ebd0:	negs	r5, r5
    ebd2:	cmp	r5, #0
    ebd4:	ble.w	ed2c <_svfprintf_r+0x135c>
    ebd8:	ldr	r2, [pc, #656]	; (ee6c <_svfprintf_r+0x149c>)
    ebda:	str	r2, [sp, #44]	; 0x2c
    ebdc:	cmp	r5, #16
    ebde:	ble.w	ed74 <_svfprintf_r+0x13a4>
    ebe2:	mov	r2, r4
    ebe4:	movs	r7, #16
    ebe6:	ldr.w	fp, [sp, #24]
    ebea:	ldr	r4, [sp, #20]
    ebec:	b.n	ebfa <_svfprintf_r+0x122a>
    ebee:	add.w	r9, r9, #8
    ebf2:	subs	r5, #16
    ebf4:	cmp	r5, #16
    ebf6:	ble.w	ed72 <_svfprintf_r+0x13a2>
    ebfa:	adds	r3, #1
    ebfc:	adds	r2, #16
    ebfe:	cmp	r3, #7
    ec00:	str	r2, [sp, #148]	; 0x94
    ec02:	str	r3, [sp, #144]	; 0x90
    ec04:	str.w	sl, [r9]
    ec08:	str.w	r7, [r9, #4]
    ec0c:	ble.n	ebee <_svfprintf_r+0x121e>
    ec0e:	add	r2, sp, #140	; 0x8c
    ec10:	mov	r1, r4
    ec12:	mov	r0, fp
    ec14:	bl	12968 <__ssprint_r>
    ec18:	cmp	r0, #0
    ec1a:	bne.w	dbc4 <_svfprintf_r+0x1f4>
    ec1e:	ldr	r2, [sp, #148]	; 0x94
    ec20:	ldr	r3, [sp, #144]	; 0x90
    ec22:	add.w	r9, sp, #192	; 0xc0
    ec26:	b.n	ebf2 <_svfprintf_r+0x1222>
    ec28:	ldr	r2, [sp, #12]
    ec2a:	b.w	e0a0 <_svfprintf_r+0x6d0>
    ec2e:	ldr	r2, [sp, #12]
    ec30:	b.n	e74a <_svfprintf_r+0xd7a>
    ec32:	ldr	r3, [sp, #12]
    ec34:	orr.w	r3, r3, #32
    ec38:	str	r3, [sp, #12]
    ec3a:	add.w	r8, r8, #1
    ec3e:	ldrb.w	r3, [r8]
    ec42:	b.w	da84 <_svfprintf_r+0xb4>
    ec46:	add	r2, sp, #140	; 0x8c
    ec48:	ldr	r1, [sp, #20]
    ec4a:	ldr	r0, [sp, #24]
    ec4c:	bl	12968 <__ssprint_r>
    ec50:	cmp	r0, #0
    ec52:	bne.w	dbc4 <_svfprintf_r+0x1f4>
    ec56:	ldr	r4, [sp, #148]	; 0x94
    ec58:	add.w	r9, sp, #192	; 0xc0
    ec5c:	b.w	e3bc <_svfprintf_r+0x9ec>
    ec60:	movs	r1, #64	; 0x40
    ec62:	ldr	r0, [sp, #24]
    ec64:	bl	b968 <_malloc_r>
    ec68:	ldr	r2, [sp, #20]
    ec6a:	str	r0, [r2, #0]
    ec6c:	str	r0, [r2, #16]
    ec6e:	cmp	r0, #0
    ec70:	beq.w	f05a <_svfprintf_r+0x168a>
    ec74:	ldr	r2, [sp, #20]
    ec76:	movs	r3, #64	; 0x40
    ec78:	str	r3, [r2, #20]
    ec7a:	b.w	d9fe <_svfprintf_r+0x2e>
    ec7e:	add	r2, sp, #132	; 0x84
    ec80:	add	r3, sp, #120	; 0x78
    ec82:	str	r2, [sp, #4]
    ec84:	str	r3, [sp, #0]
    ec86:	mov	r2, fp
    ec88:	add	r3, sp, #116	; 0x74
    ec8a:	movs	r1, #3
    ec8c:	vldr	d0, [sp, #96]	; 0x60
    ec90:	ldr	r0, [sp, #24]
    ec92:	bl	101d8 <_dtoa_r>
    ec96:	mov	r5, fp
    ec98:	mov	r6, r0
    ec9a:	ldr	r3, [sp, #52]	; 0x34
    ec9c:	cmp	r3, #70	; 0x46
    ec9e:	add.w	r4, r6, r5
    eca2:	bne.w	ea2a <_svfprintf_r+0x105a>
    eca6:	ldrb	r3, [r6, #0]
    eca8:	cmp	r3, #48	; 0x30
    ecaa:	beq.w	efbc <_svfprintf_r+0x15ec>
    ecae:	ldr	r5, [sp, #116]	; 0x74
    ecb0:	add	r4, r5
    ecb2:	b.n	ea2a <_svfprintf_r+0x105a>
    ecb4:	add	r2, sp, #140	; 0x8c
    ecb6:	ldr	r1, [sp, #20]
    ecb8:	ldr	r0, [sp, #24]
    ecba:	bl	12968 <__ssprint_r>
    ecbe:	cmp	r0, #0
    ecc0:	bne.w	dbc4 <_svfprintf_r+0x1f4>
    ecc4:	ldr	r5, [sp, #116]	; 0x74
    ecc6:	ldr	r4, [sp, #148]	; 0x94
    ecc8:	add.w	r9, sp, #192	; 0xc0
    eccc:	b.n	eba2 <_svfprintf_r+0x11d2>
    ecce:	cmp.w	fp, #0
    ecd2:	it	eq
    ecd4:	moveq.w	fp, #1
    ecd8:	b.n	e9ca <_svfprintf_r+0xffa>
    ecda:	str	r3, [sp, #40]	; 0x28
    ecdc:	mov	r7, r2
    ecde:	b.n	e79a <_svfprintf_r+0xdca>
    ece0:	str	r3, [sp, #40]	; 0x28
    ece2:	b.n	ead2 <_svfprintf_r+0x1102>
    ece4:	adds	r3, #4
    ece6:	ldr	r4, [r2, #0]
    ece8:	str	r3, [sp, #40]	; 0x28
    ecea:	movs	r5, #0
    ecec:	b.w	e136 <_svfprintf_r+0x766>
    ecf0:	movs	r7, #45	; 0x2d
    ecf2:	str	r3, [sp, #16]
    ecf4:	ldr	r3, [sp, #44]	; 0x2c
    ecf6:	str	r3, [sp, #12]
    ecf8:	strb.w	r7, [sp, #111]	; 0x6f
    ecfc:	mov.w	fp, #0
    ed00:	b.w	dd76 <_svfprintf_r+0x3a6>
    ed04:	mov	r0, r6
    ed06:	bl	c7c0 <strlen>
    ed0a:	mov	fp, r4
    ed0c:	mov	r3, r0
    ed0e:	str	r0, [sp, #36]	; 0x24
    ed10:	b.w	e258 <_svfprintf_r+0x888>
    ed14:	add	r2, sp, #140	; 0x8c
    ed16:	ldr	r1, [sp, #20]
    ed18:	ldr	r0, [sp, #24]
    ed1a:	bl	12968 <__ssprint_r>
    ed1e:	cmp	r0, #0
    ed20:	bne.w	dbc4 <_svfprintf_r+0x1f4>
    ed24:	ldr	r4, [sp, #148]	; 0x94
    ed26:	ldr	r3, [sp, #144]	; 0x90
    ed28:	add.w	r9, sp, #192	; 0xc0
    ed2c:	ldr	r1, [sp, #56]	; 0x38
    ed2e:	str.w	r6, [r9]
    ed32:	adds	r3, #1
    ed34:	add	r4, r1
    ed36:	cmp	r3, #7
    ed38:	str	r4, [sp, #148]	; 0x94
    ed3a:	str	r3, [sp, #144]	; 0x90
    ed3c:	str.w	r1, [r9, #4]
    ed40:	ble.w	def8 <_svfprintf_r+0x528>
    ed44:	b.w	e53e <_svfprintf_r+0xb6e>
    ed48:	ldr	r3, [sp, #116]	; 0x74
    ed4a:	adds	r5, r3, #3
    ed4c:	blt.n	ed8c <_svfprintf_r+0x13bc>
    ed4e:	cmp	fp, r3
    ed50:	blt.n	ed8c <_svfprintf_r+0x13bc>
    ed52:	str	r3, [sp, #60]	; 0x3c
    ed54:	b.n	ea6e <_svfprintf_r+0x109e>
    ed56:	mov	r3, r4
    ed58:	b.n	ea50 <_svfprintf_r+0x1080>
    ed5a:	add	r2, sp, #140	; 0x8c
    ed5c:	ldr	r1, [sp, #20]
    ed5e:	ldr	r0, [sp, #24]
    ed60:	bl	12968 <__ssprint_r>
    ed64:	cmp	r0, #0
    ed66:	bne.w	dbc4 <_svfprintf_r+0x1f4>
    ed6a:	ldr	r4, [sp, #148]	; 0x94
    ed6c:	add.w	r9, sp, #192	; 0xc0
    ed70:	b.n	e60c <_svfprintf_r+0xc3c>
    ed72:	mov	r4, r2
    ed74:	adds	r3, #1
    ed76:	ldr	r2, [sp, #44]	; 0x2c
    ed78:	str	r3, [sp, #144]	; 0x90
    ed7a:	add	r4, r5
    ed7c:	cmp	r3, #7
    ed7e:	str	r4, [sp, #148]	; 0x94
    ed80:	stmia.w	r9, {r2, r5}
    ed84:	bgt.n	ed14 <_svfprintf_r+0x1344>
    ed86:	add.w	r9, r9, #8
    ed8a:	b.n	ed2c <_svfprintf_r+0x135c>
    ed8c:	ldr	r2, [sp, #52]	; 0x34
    ed8e:	subs	r2, #2
    ed90:	str	r2, [sp, #52]	; 0x34
    ed92:	subs	r3, #1
    ed94:	cmp	r3, #0
    ed96:	ldrb.w	r2, [sp, #52]	; 0x34
    ed9a:	str	r3, [sp, #116]	; 0x74
    ed9c:	it	lt
    ed9e:	neglt	r3, r3
    eda0:	strb.w	r2, [sp, #124]	; 0x7c
    eda4:	ite	lt
    eda6:	movlt	r2, #45	; 0x2d
    eda8:	movge	r2, #43	; 0x2b
    edaa:	cmp	r3, #9
    edac:	strb.w	r2, [sp, #125]	; 0x7d
    edb0:	ble.w	ef8a <_svfprintf_r+0x15ba>
    edb4:	add.w	r0, sp, #139	; 0x8b
    edb8:	mov	r4, r0
    edba:	ldr	r2, [pc, #180]	; (ee70 <_svfprintf_r+0x14a0>)
    edbc:	smull	r2, r1, r2, r3
    edc0:	asrs	r2, r3, #31
    edc2:	rsb	r2, r2, r1, asr #2
    edc6:	add.w	r1, r2, r2, lsl #2
    edca:	sub.w	r3, r3, r1, lsl #1
    edce:	add.w	r1, r3, #48	; 0x30
    edd2:	cmp	r2, #9
    edd4:	mov	r3, r2
    edd6:	strb.w	r1, [r4, #-1]!
    edda:	bgt.n	edba <_svfprintf_r+0x13ea>
    eddc:	mov	r1, r4
    edde:	adds	r3, #48	; 0x30
    ede0:	uxtb	r2, r3
    ede2:	strb.w	r2, [r1, #-1]!
    ede6:	cmp	r0, r1
    ede8:	bls.w	f054 <_svfprintf_r+0x1684>
    edec:	add.w	r1, sp, #126	; 0x7e
    edf0:	mov	r3, r4
    edf2:	b.n	edf8 <_svfprintf_r+0x1428>
    edf4:	ldrb.w	r2, [r3], #1
    edf8:	strb.w	r2, [r1], #1
    edfc:	cmp	r0, r3
    edfe:	bne.n	edf4 <_svfprintf_r+0x1424>
    ee00:	adds	r3, r0, #1
    ee02:	subs	r3, r3, r4
    ee04:	add.w	r2, sp, #126	; 0x7e
    ee08:	add	r3, r2
    ee0a:	add	r2, sp, #124	; 0x7c
    ee0c:	subs	r3, r3, r2
    ee0e:	ldr	r2, [sp, #56]	; 0x38
    ee10:	str	r3, [sp, #84]	; 0x54
    ee12:	cmp	r2, #1
    ee14:	add	r3, r2
    ee16:	str	r3, [sp, #36]	; 0x24
    ee18:	ble.w	efea <_svfprintf_r+0x161a>
    ee1c:	ldr	r3, [sp, #36]	; 0x24
    ee1e:	ldr	r2, [sp, #72]	; 0x48
    ee20:	add	r3, r2
    ee22:	movs	r2, #0
    ee24:	str	r3, [sp, #36]	; 0x24
    ee26:	str	r2, [sp, #60]	; 0x3c
    ee28:	bic.w	r3, r3, r3, asr #31
    ee2c:	b.n	ea8a <_svfprintf_r+0x10ba>
    ee2e:	add	r2, sp, #140	; 0x8c
    ee30:	ldr	r1, [sp, #20]
    ee32:	ldr	r0, [sp, #24]
    ee34:	bl	12968 <__ssprint_r>
    ee38:	cmp	r0, #0
    ee3a:	bne.w	dbc4 <_svfprintf_r+0x1f4>
    ee3e:	ldr	r3, [sp, #116]	; 0x74
    ee40:	ldr	r4, [sp, #148]	; 0x94
    ee42:	add.w	r9, sp, #192	; 0xc0
    ee46:	b.n	e820 <_svfprintf_r+0xe50>
    ee48:	add	r2, sp, #140	; 0x8c
    ee4a:	ldr	r1, [sp, #20]
    ee4c:	ldr	r0, [sp, #24]
    ee4e:	bl	12968 <__ssprint_r>
    ee52:	cmp	r0, #0
    ee54:	bne.w	dbc4 <_svfprintf_r+0x1f4>
    ee58:	ldr	r3, [sp, #116]	; 0x74
    ee5a:	ldr	r2, [sp, #56]	; 0x38
    ee5c:	ldr	r4, [sp, #148]	; 0x94
    ee5e:	subs	r3, r2, r3
    ee60:	add.w	r9, sp, #192	; 0xc0
    ee64:	b.n	e850 <_svfprintf_r+0xe80>
    ee66:	nop
    ee68:	.word	0x00013800
    ee6c:	.word	0x000137b0
    ee70:	.word	0x66666667
    ee74:	cmp	r5, #6
    ee76:	mov	r3, r5
    ee78:	it	cs
    ee7a:	movcs	r3, #6
    ee7c:	str	r3, [sp, #36]	; 0x24
    ee7e:	bic.w	r3, r3, r3, asr #31
    ee82:	mov	fp, r6
    ee84:	str	r7, [sp, #40]	; 0x28
    ee86:	str	r6, [sp, #60]	; 0x3c
    ee88:	mov	r7, r6
    ee8a:	str	r3, [sp, #16]
    ee8c:	ldr	r6, [pc, #536]	; (f0a8 <_svfprintf_r+0x16d8>)
    ee8e:	b.w	dd74 <_svfprintf_r+0x3a4>
    ee92:	mov.w	fp, #6
    ee96:	b.n	e9ca <_svfprintf_r+0xffa>
    ee98:	add	r2, sp, #132	; 0x84
    ee9a:	add	r3, sp, #120	; 0x78
    ee9c:	str	r2, [sp, #4]
    ee9e:	str	r3, [sp, #0]
    eea0:	mov	r2, fp
    eea2:	add	r3, sp, #116	; 0x74
    eea4:	movs	r1, #3
    eea6:	vldr	d0, [sp, #96]	; 0x60
    eeaa:	ldr	r0, [sp, #24]
    eeac:	bl	101d8 <_dtoa_r>
    eeb0:	mov	r5, fp
    eeb2:	mov	r6, r0
    eeb4:	add.w	r4, r0, fp
    eeb8:	b.n	eca6 <_svfprintf_r+0x12d6>
    eeba:	movs	r7, #45	; 0x2d
    eebc:	strb.w	r7, [sp, #111]	; 0x6f
    eec0:	b.w	e01a <_svfprintf_r+0x64a>
    eec4:	str	r3, [sp, #12]
    eec6:	b.w	e172 <_svfprintf_r+0x7a2>
    eeca:	ldrd	r1, r2, [sp, #64]	; 0x40
    eece:	add.w	r3, r2, #2147483648	; 0x80000000
    eed2:	str	r3, [sp, #100]	; 0x64
    eed4:	movs	r3, #45	; 0x2d
    eed6:	str	r1, [sp, #96]	; 0x60
    eed8:	str	r3, [sp, #16]
    eeda:	b.n	e9e6 <_svfprintf_r+0x1016>
    eedc:	ldr	r2, [sp, #72]	; 0x48
    eede:	ldr	r3, [sp, #56]	; 0x38
    eee0:	add	r3, r2
    eee2:	ldr	r2, [sp, #60]	; 0x3c
    eee4:	str	r3, [sp, #36]	; 0x24
    eee6:	cmp	r2, #0
    eee8:	ble.w	effe <_svfprintf_r+0x162e>
    eeec:	movs	r2, #103	; 0x67
    eeee:	bic.w	r3, r3, r3, asr #31
    eef2:	str	r2, [sp, #52]	; 0x34
    eef4:	b.n	ea8a <_svfprintf_r+0x10ba>
    eef6:	ldr	r3, [sp, #52]	; 0x34
    eef8:	cmp	r3, #71	; 0x47
    eefa:	bne.w	ea28 <_svfprintf_r+0x1058>
    eefe:	ldr	r3, [sp, #12]
    ef00:	lsls	r3, r3, #31
    ef02:	bmi.w	ec9a <_svfprintf_r+0x12ca>
    ef06:	ldr	r3, [sp, #132]	; 0x84
    ef08:	cmp	r7, #71	; 0x47
    ef0a:	sub.w	r3, r3, r6
    ef0e:	str	r3, [sp, #56]	; 0x38
    ef10:	beq.w	ed48 <_svfprintf_r+0x1378>
    ef14:	ldr	r3, [sp, #116]	; 0x74
    ef16:	b.n	ed92 <_svfprintf_r+0x13c2>
    ef18:	bic.w	r3, r5, r5, asr #31
    ef1c:	str	r7, [sp, #40]	; 0x28
    ef1e:	str	r3, [sp, #16]
    ef20:	str	r5, [sp, #36]	; 0x24
    ef22:	mov	fp, r0
    ef24:	str	r0, [sp, #60]	; 0x3c
    ef26:	ldrb.w	r7, [sp, #111]	; 0x6f
    ef2a:	b.w	dd74 <_svfprintf_r+0x3a4>
    ef2e:	cmp	r3, #0
    ef30:	ble.n	f00e <_svfprintf_r+0x163e>
    ef32:	cmp.w	fp, #0
    ef36:	bne.n	efd8 <_svfprintf_r+0x1608>
    ef38:	ldr	r2, [sp, #12]
    ef3a:	lsls	r4, r2, #31
    ef3c:	bmi.n	efd8 <_svfprintf_r+0x1608>
    ef3e:	mov	r2, r3
    ef40:	str	r2, [sp, #36]	; 0x24
    ef42:	bic.w	r3, r3, r3, asr #31
    ef46:	b.n	ea8a <_svfprintf_r+0x10ba>
    ef48:	ldr	r3, [sp, #12]
    ef4a:	lsls	r3, r3, #31
    ef4c:	mov	r7, fp
    ef4e:	bpl.n	ef5c <_svfprintf_r+0x158c>
    ef50:	add	r6, sp, #256	; 0x100
    ef52:	movs	r3, #48	; 0x30
    ef54:	strb.w	r3, [r6, #-65]!
    ef58:	b.w	dd60 <_svfprintf_r+0x390>
    ef5c:	str.w	fp, [sp, #36]	; 0x24
    ef60:	add	r6, sp, #192	; 0xc0
    ef62:	b.w	dd66 <_svfprintf_r+0x396>
    ef66:	add	r2, sp, #140	; 0x8c
    ef68:	ldr	r1, [sp, #20]
    ef6a:	ldr	r0, [sp, #24]
    ef6c:	bl	12968 <__ssprint_r>
    ef70:	cmp	r0, #0
    ef72:	bne.w	dbc4 <_svfprintf_r+0x1f4>
    ef76:	ldr	r5, [sp, #116]	; 0x74
    ef78:	ldr	r4, [sp, #148]	; 0x94
    ef7a:	ldr	r3, [sp, #144]	; 0x90
    ef7c:	add.w	r9, sp, #192	; 0xc0
    ef80:	b.n	ebd0 <_svfprintf_r+0x1200>
    ef82:	mov	r8, r4
    ef84:	movs	r5, #0
    ef86:	b.w	da88 <_svfprintf_r+0xb8>
    ef8a:	adds	r3, #48	; 0x30
    ef8c:	movs	r2, #48	; 0x30
    ef8e:	strb.w	r3, [sp, #127]	; 0x7f
    ef92:	strb.w	r2, [sp, #126]	; 0x7e
    ef96:	add	r3, sp, #128	; 0x80
    ef98:	b.n	ee0a <_svfprintf_r+0x143a>
    ef9a:	ldr	r3, [sp, #132]	; 0x84
    ef9c:	b.n	ea50 <_svfprintf_r+0x1080>
    ef9e:	ldr	r2, [sp, #72]	; 0x48
    efa0:	ldr	r3, [sp, #60]	; 0x3c
    efa2:	add	r3, r2
    efa4:	movs	r2, #103	; 0x67
    efa6:	str	r3, [sp, #36]	; 0x24
    efa8:	str	r2, [sp, #52]	; 0x34
    efaa:	bic.w	r3, r3, r3, asr #31
    efae:	b.n	ea8a <_svfprintf_r+0x10ba>
    efb0:	ldr	r6, [pc, #248]	; (f0ac <_svfprintf_r+0x16dc>)
    efb2:	ldr	r3, [pc, #252]	; (f0b0 <_svfprintf_r+0x16e0>)
    efb4:	ldrb.w	r7, [sp, #111]	; 0x6f
    efb8:	b.w	e01e <_svfprintf_r+0x64e>
    efbc:	movs	r2, #0
    efbe:	movs	r3, #0
    efc0:	ldrd	r0, r1, [sp, #96]	; 0x60
    efc4:	bl	b12c <__aeabi_dcmpeq>
    efc8:	cmp	r0, #0
    efca:	bne.w	ecae <_svfprintf_r+0x12de>
    efce:	rsb	r5, r5, #1
    efd2:	str	r5, [sp, #116]	; 0x74
    efd4:	add	r4, r5
    efd6:	b.n	ea2a <_svfprintf_r+0x105a>
    efd8:	ldr	r3, [sp, #60]	; 0x3c
    efda:	ldr	r2, [sp, #72]	; 0x48
    efdc:	adds	r5, r3, r2
    efde:	add.w	r3, r5, fp
    efe2:	str	r3, [sp, #36]	; 0x24
    efe4:	bic.w	r3, r3, r3, asr #31
    efe8:	b.n	ea8a <_svfprintf_r+0x10ba>
    efea:	ldr	r3, [sp, #12]
    efec:	ands.w	r3, r3, #1
    eff0:	bne.w	ee1c <_svfprintf_r+0x144c>
    eff4:	str	r3, [sp, #60]	; 0x3c
    eff6:	ldr	r3, [sp, #36]	; 0x24
    eff8:	bic.w	r3, r3, r3, asr #31
    effc:	b.n	ea8a <_svfprintf_r+0x10ba>
    effe:	ldr	r3, [sp, #60]	; 0x3c
    f000:	ldr	r2, [sp, #36]	; 0x24
    f002:	rsb	r3, r3, #1
    f006:	add	r2, r3
    f008:	mov	r3, r2
    f00a:	str	r2, [sp, #36]	; 0x24
    f00c:	b.n	eeec <_svfprintf_r+0x151c>
    f00e:	cmp.w	fp, #0
    f012:	bne.n	f01a <_svfprintf_r+0x164a>
    f014:	ldr	r3, [sp, #12]
    f016:	lsls	r0, r3, #31
    f018:	bpl.n	f02a <_svfprintf_r+0x165a>
    f01a:	ldr	r3, [sp, #72]	; 0x48
    f01c:	adds	r5, r3, #1
    f01e:	add.w	r3, r5, fp
    f022:	str	r3, [sp, #36]	; 0x24
    f024:	bic.w	r3, r3, r3, asr #31
    f028:	b.n	ea8a <_svfprintf_r+0x10ba>
    f02a:	movs	r3, #1
    f02c:	str	r3, [sp, #36]	; 0x24
    f02e:	b.n	ea8a <_svfprintf_r+0x10ba>
    f030:	ldr	r0, [sp, #40]	; 0x28
    f032:	ldrb.w	r3, [r8, #1]
    f036:	ldr	r5, [r0, #0]
    f038:	adds	r0, #4
    f03a:	cmp	r5, #0
    f03c:	str	r0, [sp, #40]	; 0x28
    f03e:	mov	r8, r4
    f040:	bge.w	da84 <_svfprintf_r+0xb4>
    f044:	mov.w	r5, #4294967295
    f048:	b.w	da84 <_svfprintf_r+0xb4>
    f04c:	strb.w	r1, [sp, #111]	; 0x6f
    f050:	b.w	dbe6 <_svfprintf_r+0x216>
    f054:	add.w	r3, sp, #126	; 0x7e
    f058:	b.n	ee0a <_svfprintf_r+0x143a>
    f05a:	ldr	r2, [sp, #24]
    f05c:	movs	r3, #12
    f05e:	str	r3, [r2, #0]
    f060:	mov.w	r0, #4294967295
    f064:	b.w	dbd6 <_svfprintf_r+0x206>
    f068:	strb.w	r1, [sp, #111]	; 0x6f
    f06c:	b.w	dce0 <_svfprintf_r+0x310>
    f070:	strb.w	r1, [sp, #111]	; 0x6f
    f074:	b.w	dfac <_svfprintf_r+0x5dc>
    f078:	strb.w	r1, [sp, #111]	; 0x6f
    f07c:	b.w	e11a <_svfprintf_r+0x74a>
    f080:	strb.w	r1, [sp, #111]	; 0x6f
    f084:	b.w	e0be <_svfprintf_r+0x6ee>
    f088:	strb.w	r1, [sp, #111]	; 0x6f
    f08c:	b.w	e06a <_svfprintf_r+0x69a>
    f090:	strb.w	r1, [sp, #111]	; 0x6f
    f094:	b.w	e302 <_svfprintf_r+0x932>
    f098:	strb.w	r1, [sp, #111]	; 0x6f
    f09c:	b.w	e2c0 <_svfprintf_r+0x8f0>
    f0a0:	strb.w	r1, [sp, #111]	; 0x6f
    f0a4:	b.w	e284 <_svfprintf_r+0x8b4>
    f0a8:	.word	0x000137f8
    f0ac:	.word	0x000137cc
    f0b0:	.word	0x000137c8

0000f0b4 <__ssvfscanf_r>:
    f0b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f0b8:	mov	fp, r1
    f0ba:	ldrsh.w	r1, [r1, #12]
    f0be:	sub.w	sp, sp, #692	; 0x2b4
    f0c2:	mov	sl, r0
    f0c4:	lsls	r0, r1, #18
    f0c6:	mov	r4, r2
    f0c8:	str	r3, [sp, #20]
    f0ca:	bmi.n	f0e0 <__ssvfscanf_r+0x2c>
    f0cc:	ldr.w	r3, [fp, #100]	; 0x64
    f0d0:	orr.w	r1, r1, #8192	; 0x2000
    f0d4:	bic.w	r3, r3, #8192	; 0x2000
    f0d8:	strh.w	r1, [fp, #12]
    f0dc:	str.w	r3, [fp, #100]	; 0x64
    f0e0:	mov	r6, r4
    f0e2:	movs	r3, #0
    f0e4:	str	r3, [sp, #28]
    f0e6:	str	r3, [sp, #16]
    f0e8:	mov	r7, r3
    f0ea:	str	r3, [sp, #24]
    f0ec:	ldrb.w	r3, [r6], #1
    f0f0:	str	r3, [sp, #68]	; 0x44
    f0f2:	cbz	r3, f150 <__ssvfscanf_r+0x9c>
    f0f4:	bl	b934 <__locale_ctype_ptr>
    f0f8:	ldr	r2, [sp, #68]	; 0x44
    f0fa:	add	r0, r2
    f0fc:	ldrb	r3, [r0, #1]
    f0fe:	and.w	r3, r3, #8
    f102:	and.w	r5, r3, #255	; 0xff
    f106:	cbz	r3, f15a <__ssvfscanf_r+0xa6>
    f108:	ldr.w	r3, [fp, #4]
    f10c:	b.n	f132 <__ssvfscanf_r+0x7e>
    f10e:	bl	b934 <__locale_ctype_ptr>
    f112:	ldr.w	r3, [fp]
    f116:	ldrb	r2, [r3, #0]
    f118:	add	r0, r2
    f11a:	adds	r3, #1
    f11c:	ldrb	r2, [r0, #1]
    f11e:	lsls	r1, r2, #28
    f120:	bpl.n	f142 <__ssvfscanf_r+0x8e>
    f122:	ldr.w	r2, [fp, #4]
    f126:	str.w	r3, [fp]
    f12a:	subs	r3, r2, #1
    f12c:	adds	r7, #1
    f12e:	str.w	r3, [fp, #4]
    f132:	cmp	r3, #0
    f134:	bgt.n	f10e <__ssvfscanf_r+0x5a>
    f136:	mov	r1, fp
    f138:	mov	r0, sl
    f13a:	bl	12aec <__ssrefill_r>
    f13e:	cmp	r0, #0
    f140:	beq.n	f10e <__ssvfscanf_r+0x5a>
    f142:	mov	r4, r6
    f144:	mov	r6, r4
    f146:	ldrb.w	r3, [r6], #1
    f14a:	str	r3, [sp, #68]	; 0x44
    f14c:	cmp	r3, #0
    f14e:	bne.n	f0f4 <__ssvfscanf_r+0x40>
    f150:	ldr	r0, [sp, #24]
    f152:	add.w	sp, sp, #692	; 0x2b4
    f156:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f15a:	cmp	r2, #37	; 0x25
    f15c:	bne.w	f268 <__ssvfscanf_r+0x1b4>
    f160:	ldrb.w	r8, [r4, #1]
    f164:	mov	r4, r5
    f166:	adds	r3, r6, #1
    f168:	cmp.w	r8, #120	; 0x78
    f16c:	bhi.w	f5f6 <__ssvfscanf_r+0x542>
    f170:	tbh	[pc, r8, lsl #1]
    f174:	.word	0x02410092
    f178:	.word	0x02410241
    f17c:	.word	0x02410241
    f180:	.word	0x02410241
    f184:	.word	0x02410241
    f188:	.word	0x02410241
    f18c:	.word	0x02410241
    f190:	.word	0x02410241
    f194:	.word	0x02410241
    f198:	.word	0x02410241
    f19c:	.word	0x02410241
    f1a0:	.word	0x02410241
    f1a4:	.word	0x02410241
    f1a8:	.word	0x02410241
    f1ac:	.word	0x02410241
    f1b0:	.word	0x02410241
    f1b4:	.word	0x02410241
    f1b8:	.word	0x02410241
    f1bc:	.word	0x00790241
    f1c0:	.word	0x02410241
    f1c4:	.word	0x02410241
    f1c8:	.word	0x024101d8
    f1cc:	.word	0x02410241
    f1d0:	.word	0x02410241
    f1d4:	.word	0x01cf01cf
    f1d8:	.word	0x01cf01cf
    f1dc:	.word	0x01cf01cf
    f1e0:	.word	0x01cf01cf
    f1e4:	.word	0x01cf01cf
    f1e8:	.word	0x02410241
    f1ec:	.word	0x02410241
    f1f0:	.word	0x02410241
    f1f4:	.word	0x02410241
    f1f8:	.word	0x02410241
    f1fc:	.word	0x01b901c1
    f200:	.word	0x01b90241
    f204:	.word	0x02410241
    f208:	.word	0x02410241
    f20c:	.word	0x024101b3
    f210:	.word	0x01a30241
    f214:	.word	0x02410241
    f218:	.word	0x02410241
    f21c:	.word	0x02410241
    f220:	.word	0x02410241
    f224:	.word	0x02410193
    f228:	.word	0x01510241
    f22c:	.word	0x02410241
    f230:	.word	0x02410241
    f234:	.word	0x02410241
    f238:	.word	0x01220241
    f23c:	.word	0x01b90188
    f240:	.word	0x01b901b9
    f244:	.word	0x0098011c
    f248:	.word	0x02410241
    f24c:	.word	0x024100d5
    f250:	.word	0x0101010d
    f254:	.word	0x024100f3
    f258:	.word	0x00eb0241
    f25c:	.word	0x00df0241
    f260:	.word	0x02410241
    f264:	.short	0x0193
    f266:	mov	r6, r3
    f268:	ldr.w	r3, [fp, #4]
    f26c:	cmp	r3, #0
    f26e:	ble.w	f718 <__ssvfscanf_r+0x664>
    f272:	ldr.w	r3, [fp]
    f276:	ldrb.w	r2, [r6, #-1]
    f27a:	ldrb	r1, [r3, #0]
    f27c:	cmp	r1, r2
    f27e:	bne.w	f150 <__ssvfscanf_r+0x9c>
    f282:	ldr.w	r2, [fp, #4]
    f286:	adds	r3, #1
    f288:	subs	r2, #1
    f28a:	str.w	r3, [fp]
    f28e:	adds	r7, #1
    f290:	str.w	r2, [fp, #4]
    f294:	mov	r4, r6
    f296:	b.n	f144 <__ssvfscanf_r+0x90>
    f298:	mov.w	r0, #4294967295
    f29c:	add.w	sp, sp, #692	; 0x2b4
    f2a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f2a4:	str	r3, [sp, #12]
    f2a6:	ldr.w	r3, [fp, #4]
    f2aa:	cmp	r3, #0
    f2ac:	ble.w	f776 <__ssvfscanf_r+0x6c2>
    f2b0:	ldr	r3, [pc, #736]	; (f594 <__ssvfscanf_r+0x4e0>)
    f2b2:	str	r3, [sp, #28]
    f2b4:	movs	r3, #0
    f2b6:	str	r3, [sp, #16]
    f2b8:	movs	r6, #3
    f2ba:	b.n	f2c0 <__ssvfscanf_r+0x20c>
    f2bc:	str.w	lr, [fp]
    f2c0:	bl	b934 <__locale_ctype_ptr>
    f2c4:	ldr.w	r2, [fp]
    f2c8:	ldrb	r1, [r2, #0]
    f2ca:	add	r0, r1
    f2cc:	add.w	lr, r2, #1
    f2d0:	ldrb	r3, [r0, #1]
    f2d2:	and.w	r3, r3, #8
    f2d6:	and.w	r8, r3, #255	; 0xff
    f2da:	cmp	r3, #0
    f2dc:	beq.w	f7de <__ssvfscanf_r+0x72a>
    f2e0:	ldr.w	r3, [fp, #4]
    f2e4:	subs	r3, #1
    f2e6:	cmp	r3, #0
    f2e8:	add.w	r7, r7, #1
    f2ec:	str.w	r3, [fp, #4]
    f2f0:	bgt.n	f2bc <__ssvfscanf_r+0x208>
    f2f2:	mov	r1, fp
    f2f4:	mov	r0, sl
    f2f6:	bl	12aec <__ssrefill_r>
    f2fa:	cmp	r0, #0
    f2fc:	beq.n	f2c0 <__ssvfscanf_r+0x20c>
    f2fe:	ldr	r2, [sp, #24]
    f300:	cmp	r2, #0
    f302:	beq.n	f298 <__ssvfscanf_r+0x1e4>
    f304:	ldrh.w	r3, [fp, #12]
    f308:	tst.w	r3, #64	; 0x40
    f30c:	mov	r3, r2
    f30e:	it	ne
    f310:	movne.w	r3, #4294967295
    f314:	mov	r0, r3
    f316:	add.w	sp, sp, #692	; 0x2b4
    f31a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f31e:	ldrb.w	r8, [r6, #1]
    f322:	cmp.w	r8, #108	; 0x6c
    f326:	beq.w	f72e <__ssvfscanf_r+0x67a>
    f32a:	orr.w	r5, r5, #1
    f32e:	mov	r6, r3
    f330:	b.n	f166 <__ssvfscanf_r+0xb2>
    f332:	str	r3, [sp, #12]
    f334:	ldr.w	r3, [fp, #4]
    f338:	cmp	r3, #0
    f33a:	ble.w	f7ce <__ssvfscanf_r+0x71a>
    f33e:	ldr	r3, [pc, #600]	; (f598 <__ssvfscanf_r+0x4e4>)
    f340:	str	r3, [sp, #28]
    f342:	movs	r3, #10
    f344:	str	r3, [sp, #16]
    f346:	movs	r6, #3
    f348:	b.n	f2c0 <__ssvfscanf_r+0x20c>
    f34a:	str	r3, [sp, #12]
    f34c:	ldr.w	r3, [fp, #4]
    f350:	cmp	r3, #0
    f352:	ble.w	f7be <__ssvfscanf_r+0x70a>
    f356:	movs	r6, #2
    f358:	b.n	f2c0 <__ssvfscanf_r+0x20c>
    f35a:	str	r3, [sp, #12]
    f35c:	ldr.w	r3, [fp, #4]
    f360:	cmp	r3, #0
    f362:	orr.w	r5, r5, #544	; 0x220
    f366:	ble.w	f4aa <__ssvfscanf_r+0x3f6>
    f36a:	ldr	r3, [pc, #556]	; (f598 <__ssvfscanf_r+0x4e4>)
    f36c:	str	r3, [sp, #28]
    f36e:	movs	r3, #16
    f370:	str	r3, [sp, #16]
    f372:	movs	r6, #3
    f374:	b.n	f2c0 <__ssvfscanf_r+0x20c>
    f376:	str	r3, [sp, #12]
    f378:	ldr.w	r3, [fp, #4]
    f37c:	cmp	r3, #0
    f37e:	ble.w	f4ca <__ssvfscanf_r+0x416>
    f382:	ldr	r3, [pc, #532]	; (f598 <__ssvfscanf_r+0x4e4>)
    f384:	str	r3, [sp, #28]
    f386:	movs	r3, #8
    f388:	str	r3, [sp, #16]
    f38a:	movs	r6, #3
    f38c:	b.n	f2c0 <__ssvfscanf_r+0x20c>
    f38e:	lsls	r2, r5, #27
    f390:	mov	r6, r3
    f392:	str	r3, [sp, #12]
    f394:	bmi.w	f57c <__ssvfscanf_r+0x4c8>
    f398:	lsls	r3, r5, #29
    f39a:	bpl.w	f746 <__ssvfscanf_r+0x692>
    f39e:	ldr	r1, [sp, #20]
    f3a0:	ldr	r3, [r1, #0]
    f3a2:	strh	r7, [r3, #0]
    f3a4:	adds	r3, r1, #4
    f3a6:	str	r3, [sp, #20]
    f3a8:	mov	r4, r6
    f3aa:	b.n	f144 <__ssvfscanf_r+0x90>
    f3ac:	ldrb.w	r8, [r6, #1]
    f3b0:	orr.w	r5, r5, #4
    f3b4:	mov	r6, r3
    f3b6:	b.n	f166 <__ssvfscanf_r+0xb2>
    f3b8:	str	r3, [sp, #12]
    f3ba:	ldr.w	r3, [fp, #4]
    f3be:	cmp	r3, #0
    f3c0:	ble.w	f79e <__ssvfscanf_r+0x6ea>
    f3c4:	cmp	r4, #0
    f3c6:	it	eq
    f3c8:	moveq	r4, #1
    f3ca:	ands.w	r3, r5, #1
    f3ce:	bne.w	f616 <__ssvfscanf_r+0x562>
    f3d2:	lsls	r2, r5, #27
    f3d4:	bpl.w	f6ee <__ssvfscanf_r+0x63a>
    f3d8:	mov	r5, r3
    f3da:	b.n	f3f0 <__ssvfscanf_r+0x33c>
    f3dc:	add	r3, r2
    f3de:	str.w	r3, [fp]
    f3e2:	add	r5, r2
    f3e4:	subs	r4, r4, r2
    f3e6:	bl	12aec <__ssrefill_r>
    f3ea:	cmp	r0, #0
    f3ec:	bne.w	f6e6 <__ssvfscanf_r+0x632>
    f3f0:	ldr.w	r2, [fp, #4]
    f3f4:	ldr.w	r3, [fp]
    f3f8:	cmp	r2, r4
    f3fa:	mov	r1, fp
    f3fc:	mov	r0, sl
    f3fe:	blt.n	f3dc <__ssvfscanf_r+0x328>
    f400:	subs	r2, r2, r4
    f402:	add	r3, r4
    f404:	str.w	r2, [fp, #4]
    f408:	add	r5, r4
    f40a:	str.w	r3, [fp]
    f40e:	ldr	r6, [sp, #12]
    f410:	add	r7, r5
    f412:	mov	r4, r6
    f414:	b.n	f144 <__ssvfscanf_r+0x90>
    f416:	add.w	r9, sp, #80	; 0x50
    f41a:	mov	r1, r3
    f41c:	mov	r0, r9
    f41e:	bl	12388 <__sccl>
    f422:	ldr.w	r3, [fp, #4]
    f426:	cmp	r3, #0
    f428:	mov	r6, r0
    f42a:	ble.w	f78e <__ssvfscanf_r+0x6da>
    f42e:	cmp	r4, #0
    f430:	ldr.w	r2, [fp]
    f434:	it	eq
    f436:	moveq.w	r4, #4294967295
    f43a:	lsls	r3, r5, #27
    f43c:	ldrb	r1, [r2, #0]
    f43e:	bpl.w	f582 <__ssvfscanf_r+0x4ce>
    f442:	mov	r8, r4
    f444:	movs	r5, #0
    f446:	b.n	f44a <__ssvfscanf_r+0x396>
    f448:	ldrb	r1, [r2, #0]
    f44a:	ldrb.w	r3, [r9, r1]
    f44e:	adds	r2, #1
    f450:	cmp	r3, #0
    f452:	beq.w	f6dc <__ssvfscanf_r+0x628>
    f456:	ldr.w	r3, [fp, #4]
    f45a:	str.w	r2, [fp]
    f45e:	adds	r5, #1
    f460:	subs	r3, #1
    f462:	cmp	r5, r4
    f464:	str.w	r3, [fp, #4]
    f468:	beq.w	f6d6 <__ssvfscanf_r+0x622>
    f46c:	cmp	r3, #0
    f46e:	bgt.n	f448 <__ssvfscanf_r+0x394>
    f470:	mov	r1, fp
    f472:	mov	r0, sl
    f474:	bl	12aec <__ssrefill_r>
    f478:	cmp	r0, #0
    f47a:	bne.w	f6d4 <__ssvfscanf_r+0x620>
    f47e:	ldr.w	r2, [fp]
    f482:	b.n	f448 <__ssvfscanf_r+0x394>
    f484:	str	r3, [sp, #12]
    f486:	ldr.w	r3, [fp, #4]
    f48a:	cmp	r3, #0
    f48c:	ble.n	f504 <__ssvfscanf_r+0x450>
    f48e:	ldr	r3, [pc, #260]	; (f594 <__ssvfscanf_r+0x4e0>)
    f490:	str	r3, [sp, #28]
    f492:	movs	r3, #10
    f494:	str	r3, [sp, #16]
    f496:	movs	r6, #3
    f498:	b.n	f2c0 <__ssvfscanf_r+0x20c>
    f49a:	str	r3, [sp, #12]
    f49c:	ldr.w	r3, [fp, #4]
    f4a0:	cmp	r3, #0
    f4a2:	orr.w	r5, r5, #512	; 0x200
    f4a6:	bgt.w	f36a <__ssvfscanf_r+0x2b6>
    f4aa:	mov	r1, fp
    f4ac:	mov	r0, sl
    f4ae:	bl	12aec <__ssrefill_r>
    f4b2:	cmp	r0, #0
    f4b4:	beq.w	f36a <__ssvfscanf_r+0x2b6>
    f4b8:	b.n	f2fe <__ssvfscanf_r+0x24a>
    f4ba:	str	r3, [sp, #12]
    f4bc:	ldr.w	r3, [fp, #4]
    f4c0:	cmp	r3, #0
    f4c2:	orr.w	r5, r5, #1
    f4c6:	bgt.w	f382 <__ssvfscanf_r+0x2ce>
    f4ca:	mov	r1, fp
    f4cc:	mov	r0, sl
    f4ce:	bl	12aec <__ssrefill_r>
    f4d2:	cmp	r0, #0
    f4d4:	beq.w	f382 <__ssvfscanf_r+0x2ce>
    f4d8:	b.n	f2fe <__ssvfscanf_r+0x24a>
    f4da:	ldrb.w	r8, [r6, #1]
    f4de:	orr.w	r5, r5, #2
    f4e2:	mov	r6, r3
    f4e4:	b.n	f166 <__ssvfscanf_r+0xb2>
    f4e6:	str	r3, [sp, #12]
    f4e8:	ldr.w	r3, [fp, #4]
    f4ec:	cmp	r3, #0
    f4ee:	ble.w	f7ae <__ssvfscanf_r+0x6fa>
    f4f2:	movs	r6, #4
    f4f4:	b.n	f2c0 <__ssvfscanf_r+0x20c>
    f4f6:	str	r3, [sp, #12]
    f4f8:	ldr.w	r3, [fp, #4]
    f4fc:	cmp	r3, #0
    f4fe:	orr.w	r5, r5, #1
    f502:	bgt.n	f48e <__ssvfscanf_r+0x3da>
    f504:	mov	r1, fp
    f506:	mov	r0, sl
    f508:	bl	12aec <__ssrefill_r>
    f50c:	cmp	r0, #0
    f50e:	beq.n	f48e <__ssvfscanf_r+0x3da>
    f510:	b.n	f2fe <__ssvfscanf_r+0x24a>
    f512:	add.w	r4, r4, r4, lsl #2
    f516:	add.w	r4, r8, r4, lsl #1
    f51a:	subs	r4, #48	; 0x30
    f51c:	ldrb.w	r8, [r6, #1]
    f520:	mov	r6, r3
    f522:	b.n	f166 <__ssvfscanf_r+0xb2>
    f524:	ldrb.w	r8, [r6, #1]
    f528:	orr.w	r5, r5, #16
    f52c:	mov	r6, r3
    f52e:	b.n	f166 <__ssvfscanf_r+0xb2>
    f530:	add	r3, sp, #72	; 0x48
    f532:	mov	r1, r8
    f534:	mov	r0, r3
    f536:	movs	r2, #8
    f538:	str	r3, [sp, #32]
    f53a:	bl	c0dc <memset>
    f53e:	ands.w	r9, r5, #16
    f542:	bne.w	fe08 <__ssvfscanf_r+0xd54>
    f546:	ldr	r2, [sp, #20]
    f548:	mov	r3, r2
    f54a:	adds	r3, #4
    f54c:	ldr.w	r8, [r2]
    f550:	str	r3, [sp, #20]
    f552:	movs	r6, #0
    f554:	bl	b934 <__locale_ctype_ptr>
    f558:	ldr.w	r3, [fp]
    f55c:	ldrb	r3, [r3, #0]
    f55e:	add	r0, r3
    f560:	ldrb	r3, [r0, #1]
    f562:	lsls	r0, r3, #28
    f564:	bmi.n	f56c <__ssvfscanf_r+0x4b8>
    f566:	cmp	r4, #0
    f568:	bne.w	fd6c <__ssvfscanf_r+0xcb8>
    f56c:	cmp.w	r9, #0
    f570:	bne.n	f57c <__ssvfscanf_r+0x4c8>
    f572:	str.w	r9, [r8]
    f576:	ldr	r3, [sp, #24]
    f578:	adds	r3, #1
    f57a:	str	r3, [sp, #24]
    f57c:	ldr	r6, [sp, #12]
    f57e:	mov	r4, r6
    f580:	b.n	f144 <__ssvfscanf_r+0x90>
    f582:	ldr	r0, [sp, #20]
    f584:	ldr	r5, [r0, #0]
    f586:	mov	r3, r0
    f588:	adds	r3, #4
    f58a:	add.w	r8, r5, r4
    f58e:	str	r3, [sp, #12]
    f590:	mov	r4, r5
    f592:	b.n	f5a2 <__ssvfscanf_r+0x4ee>
    f594:	.word	0x0000d9a9
    f598:	.word	0x00012735
    f59c:	ldr.w	r2, [fp]
    f5a0:	ldrb	r1, [r2, #0]
    f5a2:	ldrb.w	r3, [r9, r1]
    f5a6:	adds	r0, r2, #1
    f5a8:	cbz	r3, f5dc <__ssvfscanf_r+0x528>
    f5aa:	ldr.w	r3, [fp, #4]
    f5ae:	str.w	r0, [fp]
    f5b2:	subs	r3, #1
    f5b4:	str.w	r3, [fp, #4]
    f5b8:	ldrb	r3, [r2, #0]
    f5ba:	strb.w	r3, [r4], #1
    f5be:	cmp	r8, r4
    f5c0:	beq.n	f5dc <__ssvfscanf_r+0x528>
    f5c2:	ldr.w	r3, [fp, #4]
    f5c6:	cmp	r3, #0
    f5c8:	bgt.n	f59c <__ssvfscanf_r+0x4e8>
    f5ca:	mov	r1, fp
    f5cc:	mov	r0, sl
    f5ce:	bl	12aec <__ssrefill_r>
    f5d2:	cmp	r0, #0
    f5d4:	beq.n	f59c <__ssvfscanf_r+0x4e8>
    f5d6:	cmp	r5, r4
    f5d8:	beq.w	f2fe <__ssvfscanf_r+0x24a>
    f5dc:	subs	r5, r4, r5
    f5de:	beq.w	f150 <__ssvfscanf_r+0x9c>
    f5e2:	ldr	r2, [sp, #24]
    f5e4:	adds	r2, #1
    f5e6:	movs	r3, #0
    f5e8:	str	r2, [sp, #24]
    f5ea:	ldr	r2, [sp, #12]
    f5ec:	str	r2, [sp, #20]
    f5ee:	strb	r3, [r4, #0]
    f5f0:	add	r7, r5
    f5f2:	mov	r4, r6
    f5f4:	b.n	f144 <__ssvfscanf_r+0x90>
    f5f6:	str	r3, [sp, #12]
    f5f8:	bl	b934 <__locale_ctype_ptr>
    f5fc:	add	r0, r8
    f5fe:	ldrb	r3, [r0, #1]
    f600:	and.w	r3, r3, #3
    f604:	cmp	r3, #1
    f606:	ldr.w	r3, [fp, #4]
    f60a:	beq.w	f73a <__ssvfscanf_r+0x686>
    f60e:	cmp	r3, #0
    f610:	bgt.w	f48e <__ssvfscanf_r+0x3da>
    f614:	b.n	f504 <__ssvfscanf_r+0x450>
    f616:	add	r3, sp, #72	; 0x48
    f618:	mov	r0, r3
    f61a:	movs	r2, #8
    f61c:	movs	r1, #0
    f61e:	str	r3, [sp, #32]
    f620:	bl	c0dc <memset>
    f624:	ands.w	r3, r5, #16
    f628:	str	r3, [sp, #40]	; 0x28
    f62a:	bne.n	f728 <__ssvfscanf_r+0x674>
    f62c:	ldr	r2, [sp, #20]
    f62e:	mov	r3, r2
    f630:	adds	r3, #4
    f632:	ldr.w	r9, [r2]
    f636:	str	r3, [sp, #20]
    f638:	movs	r5, #0
    f63a:	add.w	r8, sp, #336	; 0x150
    f63e:	bl	b910 <__locale_mb_cur_max>
    f642:	cmp	r0, r5
    f644:	beq.w	f2fe <__ssvfscanf_r+0x24a>
    f648:	ldmia.w	fp, {r2, r3}
    f64c:	ldrb.w	r0, [r2], #1
    f650:	str.w	r2, [fp]
    f654:	subs	r3, #1
    f656:	ldr	r2, [sp, #32]
    f658:	str	r2, [sp, #0]
    f65a:	adds	r6, r5, #1
    f65c:	str.w	r3, [fp, #4]
    f660:	mov	r1, r9
    f662:	strb.w	r0, [r8, r5]
    f666:	mov	r3, r6
    f668:	mov	r2, r8
    f66a:	mov	r0, sl
    f66c:	bl	11a44 <_mbrtowc_r>
    f670:	adds	r1, r0, #1
    f672:	beq.w	f2fe <__ssvfscanf_r+0x24a>
    f676:	cbnz	r0, f6a2 <__ssvfscanf_r+0x5ee>
    f678:	ldr	r3, [sp, #40]	; 0x28
    f67a:	cbnz	r3, f6c2 <__ssvfscanf_r+0x60e>
    f67c:	str.w	r3, [r9]
    f680:	add	r7, r6
    f682:	subs	r4, #1
    f684:	add.w	r9, r9, #4
    f688:	ldr.w	r3, [fp, #4]
    f68c:	cmp	r3, #0
    f68e:	mov.w	r5, #0
    f692:	ble.n	f6b0 <__ssvfscanf_r+0x5fc>
    f694:	cmp	r4, #0
    f696:	bne.n	f63e <__ssvfscanf_r+0x58a>
    f698:	ldr	r3, [sp, #40]	; 0x28
    f69a:	cmp	r3, #0
    f69c:	beq.w	f576 <__ssvfscanf_r+0x4c2>
    f6a0:	b.n	f57c <__ssvfscanf_r+0x4c8>
    f6a2:	adds	r0, #2
    f6a4:	bne.n	f6c8 <__ssvfscanf_r+0x614>
    f6a6:	ldr.w	r3, [fp, #4]
    f6aa:	cmp	r3, #0
    f6ac:	mov	r5, r6
    f6ae:	bgt.n	f63e <__ssvfscanf_r+0x58a>
    f6b0:	mov	r1, fp
    f6b2:	mov	r0, sl
    f6b4:	bl	12aec <__ssrefill_r>
    f6b8:	cmp	r0, #0
    f6ba:	beq.n	f694 <__ssvfscanf_r+0x5e0>
    f6bc:	cmp	r5, #0
    f6be:	beq.n	f698 <__ssvfscanf_r+0x5e4>
    f6c0:	b.n	f2fe <__ssvfscanf_r+0x24a>
    f6c2:	add	r7, r6
    f6c4:	subs	r4, #1
    f6c6:	b.n	f688 <__ssvfscanf_r+0x5d4>
    f6c8:	ldr	r3, [sp, #40]	; 0x28
    f6ca:	add	r7, r6
    f6cc:	subs	r4, #1
    f6ce:	cmp	r3, #0
    f6d0:	bne.n	f688 <__ssvfscanf_r+0x5d4>
    f6d2:	b.n	f684 <__ssvfscanf_r+0x5d0>
    f6d4:	mov	r8, r5
    f6d6:	mov	r5, r8
    f6d8:	add	r7, r5
    f6da:	b.n	f5f2 <__ssvfscanf_r+0x53e>
    f6dc:	cmp	r5, #0
    f6de:	beq.w	f150 <__ssvfscanf_r+0x9c>
    f6e2:	add	r7, r5
    f6e4:	b.n	f5f2 <__ssvfscanf_r+0x53e>
    f6e6:	cmp	r5, #0
    f6e8:	bne.w	f40e <__ssvfscanf_r+0x35a>
    f6ec:	b.n	f2fe <__ssvfscanf_r+0x24a>
    f6ee:	ldr	r5, [sp, #20]
    f6f0:	mov	r3, r4
    f6f2:	ldr	r1, [r5, #0]
    f6f4:	str.w	fp, [sp]
    f6f8:	movs	r2, #1
    f6fa:	mov	r0, sl
    f6fc:	bl	12b28 <_sfread_r>
    f700:	adds	r6, r5, #4
    f702:	cmp	r0, #0
    f704:	beq.w	f2fe <__ssvfscanf_r+0x24a>
    f708:	ldr	r3, [sp, #24]
    f70a:	str	r6, [sp, #20]
    f70c:	ldr	r6, [sp, #12]
    f70e:	adds	r3, #1
    f710:	add	r7, r0
    f712:	str	r3, [sp, #24]
    f714:	mov	r4, r6
    f716:	b.n	f144 <__ssvfscanf_r+0x90>
    f718:	mov	r1, fp
    f71a:	mov	r0, sl
    f71c:	bl	12aec <__ssrefill_r>
    f720:	cmp	r0, #0
    f722:	beq.w	f272 <__ssvfscanf_r+0x1be>
    f726:	b.n	f2fe <__ssvfscanf_r+0x24a>
    f728:	mov.w	r9, #0
    f72c:	b.n	f638 <__ssvfscanf_r+0x584>
    f72e:	ldrb.w	r8, [r6, #2]
    f732:	orr.w	r5, r5, #2
    f736:	adds	r6, #2
    f738:	b.n	f166 <__ssvfscanf_r+0xb2>
    f73a:	cmp	r3, #0
    f73c:	orr.w	r5, r5, #1
    f740:	bgt.w	f48e <__ssvfscanf_r+0x3da>
    f744:	b.n	f504 <__ssvfscanf_r+0x450>
    f746:	lsls	r4, r5, #31
    f748:	bmi.n	f764 <__ssvfscanf_r+0x6b0>
    f74a:	lsls	r0, r5, #30
    f74c:	bpl.n	f764 <__ssvfscanf_r+0x6b0>
    f74e:	ldr	r2, [sp, #20]
    f750:	ldr	r6, [sp, #12]
    f752:	ldr	r3, [r2, #0]
    f754:	mov	r0, r7
    f756:	asrs	r1, r7, #31
    f758:	adds	r2, #4
    f75a:	str	r2, [sp, #20]
    f75c:	strd	r0, r1, [r3]
    f760:	mov	r4, r6
    f762:	b.n	f144 <__ssvfscanf_r+0x90>
    f764:	ldr	r2, [sp, #20]
    f766:	ldr	r6, [sp, #12]
    f768:	ldr	r3, [r2, #0]
    f76a:	str	r7, [r3, #0]
    f76c:	mov	r3, r2
    f76e:	adds	r3, #4
    f770:	str	r3, [sp, #20]
    f772:	mov	r4, r6
    f774:	b.n	f144 <__ssvfscanf_r+0x90>
    f776:	mov	r1, fp
    f778:	mov	r0, sl
    f77a:	bl	12aec <__ssrefill_r>
    f77e:	cmp	r0, #0
    f780:	bne.w	f2fe <__ssvfscanf_r+0x24a>
    f784:	ldr	r3, [pc, #504]	; (f980 <__ssvfscanf_r+0x8cc>)
    f786:	str	r0, [sp, #16]
    f788:	str	r3, [sp, #28]
    f78a:	movs	r6, #3
    f78c:	b.n	f2c0 <__ssvfscanf_r+0x20c>
    f78e:	mov	r1, fp
    f790:	mov	r0, sl
    f792:	bl	12aec <__ssrefill_r>
    f796:	cmp	r0, #0
    f798:	beq.w	f42e <__ssvfscanf_r+0x37a>
    f79c:	b.n	f2fe <__ssvfscanf_r+0x24a>
    f79e:	mov	r1, fp
    f7a0:	mov	r0, sl
    f7a2:	bl	12aec <__ssrefill_r>
    f7a6:	cmp	r0, #0
    f7a8:	beq.w	f3c4 <__ssvfscanf_r+0x310>
    f7ac:	b.n	f2fe <__ssvfscanf_r+0x24a>
    f7ae:	mov	r1, fp
    f7b0:	mov	r0, sl
    f7b2:	bl	12aec <__ssrefill_r>
    f7b6:	cmp	r0, #0
    f7b8:	beq.w	f4f2 <__ssvfscanf_r+0x43e>
    f7bc:	b.n	f2fe <__ssvfscanf_r+0x24a>
    f7be:	mov	r1, fp
    f7c0:	mov	r0, sl
    f7c2:	bl	12aec <__ssrefill_r>
    f7c6:	cmp	r0, #0
    f7c8:	beq.w	f356 <__ssvfscanf_r+0x2a2>
    f7cc:	b.n	f2fe <__ssvfscanf_r+0x24a>
    f7ce:	mov	r1, fp
    f7d0:	mov	r0, sl
    f7d2:	bl	12aec <__ssrefill_r>
    f7d6:	cmp	r0, #0
    f7d8:	beq.w	f33e <__ssvfscanf_r+0x28a>
    f7dc:	b.n	f2fe <__ssvfscanf_r+0x24a>
    f7de:	cmp	r6, #3
    f7e0:	beq.w	fb22 <__ssvfscanf_r+0xa6e>
    f7e4:	cmp	r6, #4
    f7e6:	bne.w	fc64 <__ssvfscanf_r+0xbb0>
    f7ea:	mov	r0, sl
    f7ec:	bl	11a28 <_localeconv_r>
    f7f0:	subs	r3, r4, #1
    f7f2:	ldr	r2, [r0, #0]
    f7f4:	str	r2, [sp, #48]	; 0x30
    f7f6:	cmp.w	r3, #348	; 0x15c
    f7fa:	bls.w	fccc <__ssvfscanf_r+0xc18>
    f7fe:	mvn.w	r1, #348	; 0x15c
    f802:	adds	r3, r4, r1
    f804:	str	r3, [sp, #56]	; 0x38
    f806:	movw	r4, #349	; 0x15d
    f80a:	add	r3, sp, #336	; 0x150
    f80c:	mov.w	r8, #0
    f810:	mov	r2, r3
    f812:	str	r3, [sp, #40]	; 0x28
    f814:	orr.w	r5, r5, #1920	; 0x780
    f818:	mov	r3, r8
    f81a:	str.w	r8, [sp, #60]	; 0x3c
    f81e:	str.w	r8, [sp, #52]	; 0x34
    f822:	mov	r6, r8
    f824:	str.w	r8, [sp, #44]	; 0x2c
    f828:	mov	r9, r2
    f82a:	ldr.w	r0, [fp]
    f82e:	ldrb	r1, [r0, #0]
    f830:	sub.w	lr, r1, #43	; 0x2b
    f834:	cmp.w	lr, #78	; 0x4e
    f838:	bhi.w	fad2 <__ssvfscanf_r+0xa1e>
    f83c:	tbh	[pc, lr, lsl #1]
    f840:	.word	0x0149007a
    f844:	.word	0x0149007a
    f848:	.word	0x006e0149
    f84c:	.word	0x004f004f
    f850:	.word	0x004f004f
    f854:	.word	0x004f004f
    f858:	.word	0x004f004f
    f85c:	.word	0x0149004f
    f860:	.word	0x01490149
    f864:	.word	0x01490149
    f868:	.word	0x01490149
    f86c:	.word	0x01490144
    f870:	.word	0x01490149
    f874:	.word	0x0125012c
    f878:	.word	0x01490149
    f87c:	.word	0x014900a2
    f880:	.word	0x01490149
    f884:	.word	0x008b0149
    f888:	.word	0x01490149
    f88c:	.word	0x01490149
    f890:	.word	0x00850149
    f894:	.word	0x01490149
    f898:	.word	0x01490149
    f89c:	.word	0x0149007f
    f8a0:	.word	0x01490149
    f8a4:	.word	0x01490149
    f8a8:	.word	0x01490149
    f8ac:	.word	0x01490144
    f8b0:	.word	0x01490149
    f8b4:	.word	0x0125012c
    f8b8:	.word	0x01490149
    f8bc:	.word	0x014900a2
    f8c0:	.word	0x01490149
    f8c4:	.word	0x008b0149
    f8c8:	.word	0x01490149
    f8cc:	.word	0x01490149
    f8d0:	.word	0x00850149
    f8d4:	.word	0x01490149
    f8d8:	.word	0x01490149
    f8dc:	.short	0x007f
    f8de:	cmn.w	r3, r8
    f8e2:	bne.n	f912 <__ssvfscanf_r+0x85e>
    f8e4:	bic.w	r5, r5, #384	; 0x180
    f8e8:	strb.w	r1, [r9]
    f8ec:	add.w	r9, r9, #1
    f8f0:	ldr.w	r1, [fp, #4]
    f8f4:	subs	r1, #1
    f8f6:	cmp	r1, #0
    f8f8:	add.w	r4, r4, #4294967295
    f8fc:	add.w	r7, r7, #1
    f900:	str.w	r1, [fp, #4]
    f904:	ble.w	faec <__ssvfscanf_r+0xa38>
    f908:	adds	r0, #1
    f90a:	str.w	r0, [fp]
    f90e:	cmp	r4, #0
    f910:	bne.n	f82a <__ssvfscanf_r+0x776>
    f912:	cmp	r6, #0
    f914:	beq.n	f99c <__ssvfscanf_r+0x8e8>
    f916:	bic.w	r5, r5, #256	; 0x100
    f91a:	b.n	f99c <__ssvfscanf_r+0x8e8>
    f91c:	lsls	r2, r5, #23
    f91e:	bpl.n	f8de <__ssvfscanf_r+0x82a>
    f920:	ldr	r2, [sp, #56]	; 0x38
    f922:	bic.w	r5, r5, #128	; 0x80
    f926:	adds	r6, #1
    f928:	cmp	r2, #0
    f92a:	beq.n	f8f0 <__ssvfscanf_r+0x83c>
    f92c:	subs	r2, #1
    f92e:	str	r2, [sp, #56]	; 0x38
    f930:	adds	r4, #1
    f932:	b.n	f8f0 <__ssvfscanf_r+0x83c>
    f934:	lsls	r2, r5, #24
    f936:	bpl.n	f912 <__ssvfscanf_r+0x85e>
    f938:	bic.w	r5, r5, #128	; 0x80
    f93c:	b.n	f8e8 <__ssvfscanf_r+0x834>
    f93e:	cmp.w	r8, #7
    f942:	bne.n	f912 <__ssvfscanf_r+0x85e>
    f944:	mov.w	r8, #8
    f948:	b.n	f8e8 <__ssvfscanf_r+0x834>
    f94a:	cmp.w	r8, #6
    f94e:	bne.n	f912 <__ssvfscanf_r+0x85e>
    f950:	mov.w	r8, #7
    f954:	b.n	f8e8 <__ssvfscanf_r+0x834>
    f956:	cmp	r3, #0
    f958:	bne.w	fb18 <__ssvfscanf_r+0xa64>
    f95c:	cbnz	r6, f96a <__ssvfscanf_r+0x8b6>
    f95e:	and.w	lr, r5, #1792	; 0x700
    f962:	cmp.w	lr, #1792	; 0x700
    f966:	beq.w	fdf0 <__ssvfscanf_r+0xd3c>
    f96a:	cmp.w	r8, #1
    f96e:	beq.n	f976 <__ssvfscanf_r+0x8c2>
    f970:	cmp.w	r8, #4
    f974:	bne.n	f912 <__ssvfscanf_r+0x85e>
    f976:	add.w	r8, r8, #1
    f97a:	uxtb.w	r8, r8
    f97e:	b.n	f8e8 <__ssvfscanf_r+0x834>
    f980:	.word	0x0000d9a9
    f984:	cmp.w	r8, #0
    f988:	bne.w	fb06 <__ssvfscanf_r+0xa52>
    f98c:	cmp	r6, #0
    f98e:	bne.n	f916 <__ssvfscanf_r+0x862>
    f990:	and.w	lr, r5, #1792	; 0x700
    f994:	cmp.w	lr, #1792	; 0x700
    f998:	beq.w	fe10 <__ssvfscanf_r+0xd5c>
    f99c:	subs	r3, #1
    f99e:	cmp	r3, #1
    f9a0:	bls.w	fea6 <__ssvfscanf_r+0xdf2>
    f9a4:	add.w	r3, r8, #4294967295
    f9a8:	cmp	r3, #6
    f9aa:	bhi.n	f9da <__ssvfscanf_r+0x926>
    f9ac:	cmp.w	r8, #2
    f9b0:	bls.w	fef4 <__ssvfscanf_r+0xe40>
    f9b4:	cmp.w	r8, #3
    f9b8:	beq.n	f9da <__ssvfscanf_r+0x926>
    f9ba:	sub.w	r4, r8, #4
    f9be:	uxtb	r4, r4
    f9c0:	mvn.w	r8, r4
    f9c4:	add	r8, r9
    f9c6:	ldrb.w	r1, [r9, #-1]!
    f9ca:	mov	r2, fp
    f9cc:	mov	r0, sl
    f9ce:	bl	12a68 <_sungetc_r>
    f9d2:	cmp	r8, r9
    f9d4:	bne.n	f9c6 <__ssvfscanf_r+0x912>
    f9d6:	subs	r7, #1
    f9d8:	subs	r7, r7, r4
    f9da:	lsls	r1, r5, #23
    f9dc:	bpl.n	fa18 <__ssvfscanf_r+0x964>
    f9de:	lsls	r2, r5, #21
    f9e0:	bmi.w	feca <__ssvfscanf_r+0xe16>
    f9e4:	ldrb.w	r1, [r9, #-1]
    f9e8:	cmp	r1, #101	; 0x65
    f9ea:	add.w	r4, r9, #4294967295
    f9ee:	add.w	r8, r7, #4294967295
    f9f2:	beq.n	fa0c <__ssvfscanf_r+0x958>
    f9f4:	cmp	r1, #69	; 0x45
    f9f6:	beq.n	fa0c <__ssvfscanf_r+0x958>
    f9f8:	mov	r2, fp
    f9fa:	mov	r0, sl
    f9fc:	bl	12a68 <_sungetc_r>
    fa00:	ldrb.w	r1, [r9, #-2]
    fa04:	sub.w	r8, r7, #2
    fa08:	sub.w	r4, r9, #2
    fa0c:	mov	r2, fp
    fa0e:	mov	r0, sl
    fa10:	bl	12a68 <_sungetc_r>
    fa14:	mov	r7, r8
    fa16:	mov	r9, r4
    fa18:	ands.w	r2, r5, #16
    fa1c:	bne.w	f57c <__ssvfscanf_r+0x4c8>
    fa20:	and.w	r3, r5, #1536	; 0x600
    fa24:	cmp.w	r3, #1024	; 0x400
    fa28:	strb.w	r2, [r9]
    fa2c:	beq.w	fe1a <__ssvfscanf_r+0xd66>
    fa30:	ldr	r3, [sp, #52]	; 0x34
    fa32:	cmp	r3, #0
    fa34:	bne.w	fe3c <__ssvfscanf_r+0xd88>
    fa38:	ldr	r1, [sp, #40]	; 0x28
    fa3a:	movs	r2, #0
    fa3c:	mov	r0, sl
    fa3e:	bl	d850 <_strtod_r>
    fa42:	lsls	r3, r5, #31
    fa44:	bmi.w	fcd2 <__ssvfscanf_r+0xc1e>
    fa48:	ands.w	r5, r5, #2
    fa4c:	bne.w	fcd2 <__ssvfscanf_r+0xc1e>
    fa50:	vmov	r2, r3, d0
    fa54:	vmov	r0, r1, d0
    fa58:	vstr	d0, [sp, #32]
    fa5c:	bl	b190 <__aeabi_dcmpun>
    fa60:	ldr	r4, [sp, #20]
    fa62:	vldr	d0, [sp, #32]
    fa66:	adds	r6, r4, #4
    fa68:	ldr	r4, [r4, #0]
    fa6a:	cmp	r0, #0
    fa6c:	bne.w	ff28 <__ssvfscanf_r+0xe74>
    fa70:	vmov	r0, r1, d0
    fa74:	bl	b24c <__aeabi_d2f>
    fa78:	str	r6, [sp, #20]
    fa7a:	str	r0, [r4, #0]
    fa7c:	ldr	r3, [sp, #24]
    fa7e:	ldr	r6, [sp, #12]
    fa80:	adds	r3, #1
    fa82:	str	r3, [sp, #24]
    fa84:	mov	r4, r6
    fa86:	b.w	f144 <__ssvfscanf_r+0x90>
    fa8a:	cmp.w	r8, #2
    fa8e:	bne.w	f912 <__ssvfscanf_r+0x85e>
    fa92:	mov.w	r8, #3
    fa96:	b.n	f8e8 <__ssvfscanf_r+0x834>
    fa98:	and.w	lr, r5, #1280	; 0x500
    fa9c:	cmp.w	lr, #1024	; 0x400
    faa0:	beq.n	faae <__ssvfscanf_r+0x9fa>
    faa2:	lsls	r2, r5, #21
    faa4:	bpl.w	f912 <__ssvfscanf_r+0x85e>
    faa8:	cmp	r6, #0
    faaa:	beq.w	f99c <__ssvfscanf_r+0x8e8>
    faae:	lsls	r2, r5, #22
    fab0:	bmi.n	fabc <__ssvfscanf_r+0xa08>
    fab2:	ldr	r2, [sp, #44]	; 0x2c
    fab4:	str.w	r9, [sp, #60]	; 0x3c
    fab8:	subs	r2, r6, r2
    faba:	str	r2, [sp, #52]	; 0x34
    fabc:	bic.w	r5, r5, #1920	; 0x780
    fac0:	orr.w	r5, r5, #384	; 0x180
    fac4:	movs	r6, #0
    fac6:	b.n	f8e8 <__ssvfscanf_r+0x834>
    fac8:	cmp	r3, #1
    faca:	bne.w	f912 <__ssvfscanf_r+0x85e>
    face:	movs	r3, #2
    fad0:	b.n	f8e8 <__ssvfscanf_r+0x834>
    fad2:	ldr	r2, [sp, #48]	; 0x30
    fad4:	ldrb.w	lr, [r2]
    fad8:	cmp	lr, r1
    fada:	bne.w	f912 <__ssvfscanf_r+0x85e>
    fade:	lsls	r2, r5, #22
    fae0:	bpl.w	f912 <__ssvfscanf_r+0x85e>
    fae4:	bic.w	r5, r5, #640	; 0x280
    fae8:	str	r6, [sp, #44]	; 0x2c
    faea:	b.n	f8e8 <__ssvfscanf_r+0x834>
    faec:	mov	r1, fp
    faee:	mov	r0, sl
    faf0:	str	r3, [sp, #32]
    faf2:	bl	12aec <__ssrefill_r>
    faf6:	ldr	r3, [sp, #32]
    faf8:	cmp	r0, #0
    fafa:	bne.w	f912 <__ssvfscanf_r+0x85e>
    fafe:	cmp	r4, #0
    fb00:	bne.w	f82a <__ssvfscanf_r+0x776>
    fb04:	b.n	f912 <__ssvfscanf_r+0x85e>
    fb06:	cmp.w	r8, #3
    fb0a:	beq.w	f976 <__ssvfscanf_r+0x8c2>
    fb0e:	cmp.w	r8, #5
    fb12:	beq.w	f976 <__ssvfscanf_r+0x8c2>
    fb16:	b.n	f912 <__ssvfscanf_r+0x85e>
    fb18:	cmp	r3, #2
    fb1a:	bne.w	f96a <__ssvfscanf_r+0x8b6>
    fb1e:	movs	r3, #3
    fb20:	b.n	f8e8 <__ssvfscanf_r+0x834>
    fb22:	subs	r3, r4, #1
    fb24:	cmp.w	r3, #348	; 0x15c
    fb28:	itte	hi
    fb2a:	mvnhi.w	r0, #348	; 0x15c
    fb2e:	addhi.w	r9, r4, r0
    fb32:	movls	r9, r8
    fb34:	add	r3, sp, #336	; 0x150
    fb36:	mov	r0, r2
    fb38:	mov	r2, r7
    fb3a:	mov	r7, r9
    fb3c:	ldr.w	r9, [sp, #16]
    fb40:	str	r3, [sp, #40]	; 0x28
    fb42:	it	hi
    fb44:	movwhi	r4, #349	; 0x15d
    fb48:	orr.w	r5, r5, #3456	; 0xd80
    fb4c:	mov	r6, r3
    fb4e:	mov.w	r8, #0
    fb52:	sub.w	r3, r1, #43	; 0x2b
    fb56:	cmp	r3, #77	; 0x4d
    fb58:	bhi.n	fbfe <__ssvfscanf_r+0xb4a>
    fb5a:	tbb	[pc, r3]
    fb5e:	.short	0x507e
    fb60:	.word	0x6f50507e
    fb64:	.word	0x69696969
    fb68:	.word	0x4a696969
    fb6c:	.word	0x5050504a
    fb70:	.word	0x50505050
    fb74:	.word	0x44444444
    fb78:	.word	0x50504444
    fb7c:	.word	0x50505050
    fb80:	.word	0x50505050
    fb84:	.word	0x50505050
    fb88:	.word	0x27505050
    fb8c:	.word	0x50505050
    fb90:	.word	0x50505050
    fb94:	.word	0x44444444
    fb98:	.word	0x50504444
    fb9c:	.word	0x50505050
    fba0:	.word	0x50505050
    fba4:	.word	0x50505050
    fba8:	.word	0x27505050
    fbac:	and.w	r3, r5, #1536	; 0x600
    fbb0:	cmp.w	r3, #512	; 0x200
    fbb4:	bne.n	fbfe <__ssvfscanf_r+0xb4a>
    fbb6:	bic.w	r5, r5, #512	; 0x200
    fbba:	orr.w	r5, r5, #1280	; 0x500
    fbbe:	mov.w	r9, #16
    fbc2:	strb	r1, [r6, #0]
    fbc4:	adds	r6, #1
    fbc6:	ldr.w	r3, [fp, #4]
    fbca:	subs	r3, #1
    fbcc:	cmp	r3, #0
    fbce:	str.w	r3, [fp, #4]
    fbd2:	ble.n	fcba <__ssvfscanf_r+0xc06>
    fbd4:	adds	r0, #1
    fbd6:	str.w	r0, [fp]
    fbda:	subs	r4, #1
    fbdc:	beq.n	fbfe <__ssvfscanf_r+0xb4a>
    fbde:	ldr.w	r0, [fp]
    fbe2:	ldrb	r1, [r0, #0]
    fbe4:	b.n	fb52 <__ssvfscanf_r+0xa9e>
    fbe6:	cmp.w	r9, #10
    fbea:	ble.n	fbfe <__ssvfscanf_r+0xb4a>
    fbec:	bic.w	r5, r5, #2944	; 0xb80
    fbf0:	b.n	fbc2 <__ssvfscanf_r+0xb0e>
    fbf2:	ldr	r3, [pc, #756]	; (fee8 <__ssvfscanf_r+0xe34>)
    fbf4:	ldrsh.w	r9, [r3, r9, lsl #1]
    fbf8:	cmp.w	r9, #8
    fbfc:	bgt.n	fbec <__ssvfscanf_r+0xb38>
    fbfe:	lsls	r1, r5, #23
    fc00:	mov	r7, r2
    fc02:	str.w	r9, [sp, #16]
    fc06:	bpl.n	fc18 <__ssvfscanf_r+0xb64>
    fc08:	ldr	r3, [sp, #40]	; 0x28
    fc0a:	cmp	r6, r3
    fc0c:	bhi.w	fdf8 <__ssvfscanf_r+0xd44>
    fc10:	ldr	r3, [sp, #40]	; 0x28
    fc12:	cmp	r6, r3
    fc14:	beq.w	f150 <__ssvfscanf_r+0x9c>
    fc18:	ands.w	r4, r5, #16
    fc1c:	beq.w	fd44 <__ssvfscanf_r+0xc90>
    fc20:	ldr	r3, [sp, #40]	; 0x28
    fc22:	subs	r6, r6, r3
    fc24:	add	r6, r8
    fc26:	add	r7, r6
    fc28:	ldr	r6, [sp, #12]
    fc2a:	mov	r4, r6
    fc2c:	b.w	f144 <__ssvfscanf_r+0x90>
    fc30:	ldr	r3, [pc, #692]	; (fee8 <__ssvfscanf_r+0xe34>)
    fc32:	bic.w	r5, r5, #2944	; 0xb80
    fc36:	ldrsh.w	r9, [r3, r9, lsl #1]
    fc3a:	b.n	fbc2 <__ssvfscanf_r+0xb0e>
    fc3c:	lsls	r3, r5, #20
    fc3e:	bpl.n	fbc2 <__ssvfscanf_r+0xb0e>
    fc40:	cmp.w	r9, #0
    fc44:	bne.n	fc4e <__ssvfscanf_r+0xb9a>
    fc46:	orr.w	r5, r5, #512	; 0x200
    fc4a:	mov.w	r9, #8
    fc4e:	lsls	r3, r5, #21
    fc50:	bpl.w	fdd4 <__ssvfscanf_r+0xd20>
    fc54:	bic.w	r5, r5, #1408	; 0x580
    fc58:	b.n	fbc2 <__ssvfscanf_r+0xb0e>
    fc5a:	lsls	r3, r5, #24
    fc5c:	bpl.n	fbfe <__ssvfscanf_r+0xb4a>
    fc5e:	bic.w	r5, r5, #128	; 0x80
    fc62:	b.n	fbc2 <__ssvfscanf_r+0xb0e>
    fc64:	cmp	r4, #0
    fc66:	it	eq
    fc68:	moveq.w	r4, #4294967295
    fc6c:	ands.w	r3, r5, #1
    fc70:	bne.w	f530 <__ssvfscanf_r+0x47c>
    fc74:	lsls	r1, r5, #27
    fc76:	bpl.n	fce0 <__ssvfscanf_r+0xc2c>
    fc78:	mov	r5, r3
    fc7a:	bl	b934 <__locale_ctype_ptr>
    fc7e:	ldr.w	r3, [fp]
    fc82:	ldrb	r2, [r3, #0]
    fc84:	add	r0, r2
    fc86:	adds	r3, #1
    fc88:	ldrb	r2, [r0, #1]
    fc8a:	lsls	r2, r2, #28
    fc8c:	bmi.w	f40e <__ssvfscanf_r+0x35a>
    fc90:	ldr.w	r2, [fp, #4]
    fc94:	str.w	r3, [fp]
    fc98:	adds	r5, #1
    fc9a:	subs	r3, r2, #1
    fc9c:	cmp	r4, r5
    fc9e:	str.w	r3, [fp, #4]
    fca2:	beq.w	f40e <__ssvfscanf_r+0x35a>
    fca6:	cmp	r3, #0
    fca8:	bgt.n	fc7a <__ssvfscanf_r+0xbc6>
    fcaa:	mov	r1, fp
    fcac:	mov	r0, sl
    fcae:	bl	12aec <__ssrefill_r>
    fcb2:	cmp	r0, #0
    fcb4:	beq.n	fc7a <__ssvfscanf_r+0xbc6>
    fcb6:	b.w	f40e <__ssvfscanf_r+0x35a>
    fcba:	mov	r1, fp
    fcbc:	mov	r0, sl
    fcbe:	str	r2, [sp, #16]
    fcc0:	bl	12aec <__ssrefill_r>
    fcc4:	ldr	r2, [sp, #16]
    fcc6:	cmp	r0, #0
    fcc8:	beq.n	fbda <__ssvfscanf_r+0xb26>
    fcca:	b.n	fbfe <__ssvfscanf_r+0xb4a>
    fccc:	str.w	r8, [sp, #56]	; 0x38
    fcd0:	b.n	f80a <__ssvfscanf_r+0x756>
    fcd2:	ldr	r2, [sp, #20]
    fcd4:	ldr	r3, [r2, #0]
    fcd6:	adds	r2, #4
    fcd8:	str	r2, [sp, #20]
    fcda:	vstr	d0, [r3]
    fcde:	b.n	fa7c <__ssvfscanf_r+0x9c8>
    fce0:	ldr	r2, [sp, #20]
    fce2:	ldr	r5, [r2, #0]
    fce4:	adds	r6, r2, #4
    fce6:	add	r4, r5
    fce8:	mov	r8, r5
    fcea:	bl	b934 <__locale_ctype_ptr>
    fcee:	ldr.w	r2, [fp]
    fcf2:	ldrb	r3, [r2, #0]
    fcf4:	add	r0, r3
    fcf6:	adds	r1, r2, #1
    fcf8:	ldrb	r3, [r0, #1]
    fcfa:	lsls	r3, r3, #28
    fcfc:	bmi.n	fd2a <__ssvfscanf_r+0xc76>
    fcfe:	ldr.w	r3, [fp, #4]
    fd02:	str.w	r1, [fp]
    fd06:	subs	r3, #1
    fd08:	str.w	r3, [fp, #4]
    fd0c:	ldrb	r3, [r2, #0]
    fd0e:	strb.w	r3, [r8], #1
    fd12:	cmp	r4, r8
    fd14:	beq.n	fd2c <__ssvfscanf_r+0xc78>
    fd16:	ldr.w	r3, [fp, #4]
    fd1a:	cmp	r3, #0
    fd1c:	bgt.n	fcea <__ssvfscanf_r+0xc36>
    fd1e:	mov	r1, fp
    fd20:	mov	r0, sl
    fd22:	bl	12aec <__ssrefill_r>
    fd26:	cmp	r0, #0
    fd28:	beq.n	fcea <__ssvfscanf_r+0xc36>
    fd2a:	mov	r4, r8
    fd2c:	ldr	r2, [sp, #24]
    fd2e:	str	r6, [sp, #20]
    fd30:	ldr	r6, [sp, #12]
    fd32:	subs	r5, r4, r5
    fd34:	movs	r3, #0
    fd36:	adds	r2, #1
    fd38:	strb	r3, [r4, #0]
    fd3a:	add	r7, r5
    fd3c:	str	r2, [sp, #24]
    fd3e:	mov	r4, r6
    fd40:	b.w	f144 <__ssvfscanf_r+0x90>
    fd44:	mov	r2, r4
    fd46:	strb	r4, [r6, #0]
    fd48:	ldr	r3, [sp, #16]
    fd4a:	ldr	r1, [sp, #40]	; 0x28
    fd4c:	ldr	r4, [sp, #28]
    fd4e:	mov	r0, sl
    fd50:	blx	r4
    fd52:	lsls	r2, r5, #26
    fd54:	bmi.n	fde4 <__ssvfscanf_r+0xd30>
    fd56:	lsls	r3, r5, #29
    fd58:	bpl.n	fe52 <__ssvfscanf_r+0xd9e>
    fd5a:	ldr	r2, [sp, #20]
    fd5c:	ldr	r3, [r2, #0]
    fd5e:	adds	r2, #4
    fd60:	str	r2, [sp, #20]
    fd62:	strh	r0, [r3, #0]
    fd64:	ldr	r3, [sp, #24]
    fd66:	adds	r3, #1
    fd68:	str	r3, [sp, #24]
    fd6a:	b.n	fc20 <__ssvfscanf_r+0xb6c>
    fd6c:	bl	b910 <__locale_mb_cur_max>
    fd70:	cmp	r6, r0
    fd72:	beq.w	f2fe <__ssvfscanf_r+0x24a>
    fd76:	ldmia.w	fp, {r2, r3}
    fd7a:	ldrb.w	r0, [r2], #1
    fd7e:	str.w	r2, [fp]
    fd82:	ldr	r2, [sp, #32]
    fd84:	str	r2, [sp, #0]
    fd86:	add	r2, sp, #336	; 0x150
    fd88:	adds	r5, r6, #1
    fd8a:	subs	r3, #1
    fd8c:	strb	r0, [r2, r6]
    fd8e:	str.w	r3, [fp, #4]
    fd92:	mov	r1, r8
    fd94:	mov	r3, r5
    fd96:	mov	r0, sl
    fd98:	bl	11a44 <_mbrtowc_r>
    fd9c:	adds	r6, r0, #1
    fd9e:	beq.w	f2fe <__ssvfscanf_r+0x24a>
    fda2:	cmp	r0, #0
    fda4:	bne.n	fe7e <__ssvfscanf_r+0xdca>
    fda6:	str.w	r0, [r8]
    fdaa:	bl	11a08 <iswspace>
    fdae:	cmp	r0, #0
    fdb0:	beq.w	ff12 <__ssvfscanf_r+0xe5e>
    fdb4:	cmp	r5, #0
    fdb6:	beq.w	f56c <__ssvfscanf_r+0x4b8>
    fdba:	add	r3, sp, #336	; 0x150
    fdbc:	adds	r4, r3, r5
    fdbe:	subs	r5, #1
    fdc0:	mov	r2, fp
    fdc2:	ldrb.w	r1, [r4, #-1]!
    fdc6:	mov	r0, sl
    fdc8:	bl	12a68 <_sungetc_r>
    fdcc:	cmp	r5, #0
    fdce:	bne.n	fdbe <__ssvfscanf_r+0xd0a>
    fdd0:	b.w	f56c <__ssvfscanf_r+0x4b8>
    fdd4:	bic.w	r5, r5, #896	; 0x380
    fdd8:	cbz	r7, fdde <__ssvfscanf_r+0xd2a>
    fdda:	subs	r7, #1
    fddc:	adds	r4, #1
    fdde:	add.w	r8, r8, #1
    fde2:	b.n	fbc6 <__ssvfscanf_r+0xb12>
    fde4:	ldr	r2, [sp, #20]
    fde6:	ldr	r3, [r2, #0]
    fde8:	adds	r2, #4
    fdea:	str	r2, [sp, #20]
    fdec:	str	r0, [r3, #0]
    fdee:	b.n	fd64 <__ssvfscanf_r+0xcb0>
    fdf0:	bic.w	r5, r5, #1920	; 0x780
    fdf4:	movs	r3, #1
    fdf6:	b.n	f8e8 <__ssvfscanf_r+0x834>
    fdf8:	ldrb.w	r1, [r6, #-1]
    fdfc:	mov	r2, fp
    fdfe:	mov	r0, sl
    fe00:	bl	12a68 <_sungetc_r>
    fe04:	subs	r6, #1
    fe06:	b.n	fc10 <__ssvfscanf_r+0xb5c>
    fe08:	add.w	r8, sp, #68	; 0x44
    fe0c:	b.w	f552 <__ssvfscanf_r+0x49e>
    fe10:	bic.w	r5, r5, #1920	; 0x780
    fe14:	mov.w	r8, #1
    fe18:	b.n	f8e8 <__ssvfscanf_r+0x834>
    fe1a:	ldr	r3, [sp, #44]	; 0x2c
    fe1c:	subs	r6, r6, r3
    fe1e:	negs	r2, r6
    fe20:	cmp	r6, #0
    fe22:	beq.w	fa38 <__ssvfscanf_r+0x984>
    fe26:	addw	r3, sp, #675	; 0x2a3
    fe2a:	cmp	r9, r3
    fe2c:	it	cs
    fe2e:	addwcs	r9, sp, #674	; 0x2a2
    fe32:	mov	r0, r9
    fe34:	ldr	r1, [pc, #180]	; (feec <__ssvfscanf_r+0xe38>)
    fe36:	bl	c584 <sprintf>
    fe3a:	b.n	fa38 <__ssvfscanf_r+0x984>
    fe3c:	ldr	r4, [sp, #60]	; 0x3c
    fe3e:	mov	r1, r4
    fe40:	movs	r3, #10
    fe42:	adds	r1, #1
    fe44:	mov	r0, sl
    fe46:	bl	d9a8 <_strtol_r>
    fe4a:	ldr	r3, [sp, #52]	; 0x34
    fe4c:	mov	r9, r4
    fe4e:	subs	r2, r0, r3
    fe50:	b.n	fe26 <__ssvfscanf_r+0xd72>
    fe52:	ands.w	r2, r5, #1
    fe56:	bne.n	fde4 <__ssvfscanf_r+0xd30>
    fe58:	lsls	r4, r5, #30
    fe5a:	bpl.n	fde4 <__ssvfscanf_r+0xd30>
    fe5c:	ldr	r3, [sp, #28]
    fe5e:	mov	r1, r3
    fe60:	ldr	r3, [pc, #140]	; (fef0 <__ssvfscanf_r+0xe3c>)
    fe62:	cmp	r1, r3
    fe64:	mov	r0, sl
    fe66:	ldr	r3, [sp, #16]
    fe68:	ldr	r1, [sp, #40]	; 0x28
    fe6a:	beq.n	ff36 <__ssvfscanf_r+0xe82>
    fe6c:	bl	125a8 <_strtoll_r>
    fe70:	ldr	r2, [sp, #20]
    fe72:	ldr	r3, [r2, #0]
    fe74:	adds	r2, #4
    fe76:	str	r2, [sp, #20]
    fe78:	strd	r0, r1, [r3]
    fe7c:	b.n	fd64 <__ssvfscanf_r+0xcb0>
    fe7e:	adds	r0, #2
    fe80:	bne.n	fec4 <__ssvfscanf_r+0xe10>
    fe82:	mov	r6, r5
    fe84:	ldr.w	r3, [fp, #4]
    fe88:	cmp	r3, #0
    fe8a:	bgt.w	f554 <__ssvfscanf_r+0x4a0>
    fe8e:	mov	r1, fp
    fe90:	mov	r0, sl
    fe92:	bl	12aec <__ssrefill_r>
    fe96:	cmp	r0, #0
    fe98:	beq.w	f554 <__ssvfscanf_r+0x4a0>
    fe9c:	cmp	r6, #0
    fe9e:	bne.w	f2fe <__ssvfscanf_r+0x24a>
    fea2:	b.w	f56c <__ssvfscanf_r+0x4b8>
    fea6:	ldr	r3, [sp, #40]	; 0x28
    fea8:	cmp	r9, r3
    feaa:	bls.w	f150 <__ssvfscanf_r+0x9c>
    feae:	ldrb.w	r1, [r9, #-1]!
    feb2:	mov	r2, fp
    feb4:	mov	r0, sl
    feb6:	bl	12a68 <_sungetc_r>
    feba:	ldr	r3, [sp, #40]	; 0x28
    febc:	cmp	r9, r3
    febe:	bne.n	feae <__ssvfscanf_r+0xdfa>
    fec0:	b.w	f150 <__ssvfscanf_r+0x9c>
    fec4:	ldr.w	r0, [r8]
    fec8:	b.n	fdaa <__ssvfscanf_r+0xcf6>
    feca:	ldr	r3, [sp, #40]	; 0x28
    fecc:	cmp	r9, r3
    fece:	bls.w	f150 <__ssvfscanf_r+0x9c>
    fed2:	ldrb.w	r1, [r9, #-1]!
    fed6:	mov	r2, fp
    fed8:	mov	r0, sl
    feda:	bl	12a68 <_sungetc_r>
    fede:	ldr	r3, [sp, #40]	; 0x28
    fee0:	cmp	r9, r3
    fee2:	bne.n	fed2 <__ssvfscanf_r+0xe1e>
    fee4:	b.w	f150 <__ssvfscanf_r+0x9c>
    fee8:	.word	0x00013814
    feec:	.word	0x00013838
    fef0:	.word	0x00012735
    fef4:	ldr	r3, [sp, #40]	; 0x28
    fef6:	cmp	r9, r3
    fef8:	bls.w	f150 <__ssvfscanf_r+0x9c>
    fefc:	ldrb.w	r1, [r9, #-1]!
    ff00:	mov	r2, fp
    ff02:	mov	r0, sl
    ff04:	bl	12a68 <_sungetc_r>
    ff08:	ldr	r3, [sp, #40]	; 0x28
    ff0a:	cmp	r9, r3
    ff0c:	bne.n	fefc <__ssvfscanf_r+0xe48>
    ff0e:	b.w	f150 <__ssvfscanf_r+0x9c>
    ff12:	add	r7, r5
    ff14:	subs	r4, #1
    ff16:	cmp.w	r9, #0
    ff1a:	bne.n	ff24 <__ssvfscanf_r+0xe70>
    ff1c:	add.w	r8, r8, #4
    ff20:	mov	r6, r9
    ff22:	b.n	fe84 <__ssvfscanf_r+0xdd0>
    ff24:	mov	r6, r0
    ff26:	b.n	fe84 <__ssvfscanf_r+0xdd0>
    ff28:	mov	r0, r5
    ff2a:	bl	a8d4 <nanf>
    ff2e:	str	r6, [sp, #20]
    ff30:	vstr	s0, [r4]
    ff34:	b.n	fa7c <__ssvfscanf_r+0x9c8>
    ff36:	bl	12944 <_strtoull_r>
    ff3a:	b.n	fe70 <__ssvfscanf_r+0xdbc>

0000ff3c <_vdprintf_r>:
    ff3c:	push	{r4, r5, r6, r7, lr}
    ff3e:	sub.w	sp, sp, #532	; 0x214
    ff42:	add	r5, sp, #16
    ff44:	str	r3, [sp, #0]
    ff46:	mov	r7, r1
    ff48:	mov	r3, r2
    ff4a:	mov.w	r4, #512	; 0x200
    ff4e:	add	r2, sp, #12
    ff50:	mov	r1, r5
    ff52:	str	r4, [sp, #12]
    ff54:	mov	r6, r0
    ff56:	bl	12c24 <_vasnprintf_r>
    ff5a:	cbz	r0, ff80 <_vdprintf_r+0x44>
    ff5c:	mov	r4, r0
    ff5e:	mov	r2, r0
    ff60:	mov	r1, r7
    ff62:	ldr	r3, [sp, #12]
    ff64:	mov	r0, r6
    ff66:	bl	ffbc <_write_r>
    ff6a:	cmp	r4, r5
    ff6c:	str	r0, [sp, #12]
    ff6e:	beq.n	ff7a <_vdprintf_r+0x3e>
    ff70:	mov	r0, r6
    ff72:	mov	r1, r4
    ff74:	bl	110d0 <_free_r>
    ff78:	ldr	r0, [sp, #12]
    ff7a:	add.w	sp, sp, #532	; 0x214
    ff7e:	pop	{r4, r5, r6, r7, pc}
    ff80:	mov.w	r0, #4294967295
    ff84:	b.n	ff7a <_vdprintf_r+0x3e>
    ff86:	nop

0000ff88 <vdprintf>:
    ff88:	push	{r4}
    ff8a:	ldr	r4, [pc, #16]	; (ff9c <vdprintf+0x14>)
    ff8c:	mov	r3, r2
    ff8e:	mov	r2, r1
    ff90:	mov	r1, r0
    ff92:	ldr	r0, [r4, #0]
    ff94:	ldr.w	r4, [sp], #4
    ff98:	b.w	ff3c <_vdprintf_r>
    ff9c:	.word	0x20017400

0000ffa0 <__ascii_wctomb>:
    ffa0:	cbz	r1, ffac <__ascii_wctomb+0xc>
    ffa2:	cmp	r2, #255	; 0xff
    ffa4:	bhi.n	ffb0 <__ascii_wctomb+0x10>
    ffa6:	strb	r2, [r1, #0]
    ffa8:	movs	r0, #1
    ffaa:	bx	lr
    ffac:	mov	r0, r1
    ffae:	bx	lr
    ffb0:	movs	r3, #138	; 0x8a
    ffb2:	str	r3, [r0, #0]
    ffb4:	mov.w	r0, #4294967295
    ffb8:	bx	lr
    ffba:	nop

0000ffbc <_write_r>:
    ffbc:	push	{r4, r5, r6, lr}
    ffbe:	mov	r5, r1
    ffc0:	ldr	r4, [pc, #32]	; (ffe4 <_write_r+0x28>)
    ffc2:	mov	r1, r2
    ffc4:	mov	r6, r0
    ffc6:	mov	r2, r3
    ffc8:	mov	r0, r5
    ffca:	movs	r3, #0
    ffcc:	str	r3, [r4, #0]
    ffce:	bl	9cd8 <_write>
    ffd2:	adds	r3, r0, #1
    ffd4:	beq.n	ffd8 <_write_r+0x1c>
    ffd6:	pop	{r4, r5, r6, pc}
    ffd8:	ldr	r3, [r4, #0]
    ffda:	cmp	r3, #0
    ffdc:	beq.n	ffd6 <_write_r+0x1a>
    ffde:	str	r3, [r6, #0]
    ffe0:	pop	{r4, r5, r6, pc}
    ffe2:	nop
    ffe4:	.word	0x2001ce3c

0000ffe8 <__register_exitproc>:
    ffe8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ffec:	ldr	r4, [pc, #148]	; (10084 <__register_exitproc+0x9c>)
    ffee:	ldr	r5, [r4, #0]
    fff0:	ldr.w	r4, [r5, #328]	; 0x148
    fff4:	mov	r6, r0
    fff6:	mov	r8, r1
    fff8:	mov	sl, r2
    fffa:	mov	r9, r3
    fffc:	cbz	r4, 10070 <__register_exitproc+0x88>
    fffe:	ldr	r0, [r4, #4]
   10000:	cmp	r0, #31
   10002:	bgt.n	10034 <__register_exitproc+0x4c>
   10004:	adds	r3, r0, #1
   10006:	cbz	r6, 10026 <__register_exitproc+0x3e>
   10008:	add.w	r5, r4, r0, lsl #2
   1000c:	movs	r2, #1
   1000e:	str.w	sl, [r5, #136]	; 0x88
   10012:	ldr.w	r1, [r4, #392]	; 0x188
   10016:	lsls	r2, r0
   10018:	orrs	r1, r2
   1001a:	cmp	r6, #2
   1001c:	str.w	r1, [r4, #392]	; 0x188
   10020:	str.w	r9, [r5, #264]	; 0x108
   10024:	beq.n	10064 <__register_exitproc+0x7c>
   10026:	adds	r0, #2
   10028:	str	r3, [r4, #4]
   1002a:	str.w	r8, [r4, r0, lsl #2]
   1002e:	movs	r0, #0
   10030:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10034:	ldr	r3, [pc, #80]	; (10088 <__register_exitproc+0xa0>)
   10036:	cbz	r3, 1007a <__register_exitproc+0x92>
   10038:	mov.w	r0, #400	; 0x190
   1003c:	bl	b948 <malloc>
   10040:	mov	r4, r0
   10042:	cbz	r0, 1007a <__register_exitproc+0x92>
   10044:	ldr.w	r3, [r5, #328]	; 0x148
   10048:	movs	r7, #0
   1004a:	stmia.w	r0, {r3, r7}
   1004e:	str.w	r4, [r5, #328]	; 0x148
   10052:	mov	r0, r7
   10054:	movs	r3, #1
   10056:	str.w	r7, [r4, #392]	; 0x188
   1005a:	str.w	r7, [r4, #396]	; 0x18c
   1005e:	cmp	r6, #0
   10060:	beq.n	10026 <__register_exitproc+0x3e>
   10062:	b.n	10008 <__register_exitproc+0x20>
   10064:	ldr.w	r1, [r4, #396]	; 0x18c
   10068:	orrs	r2, r1
   1006a:	str.w	r2, [r4, #396]	; 0x18c
   1006e:	b.n	10026 <__register_exitproc+0x3e>
   10070:	add.w	r4, r5, #332	; 0x14c
   10074:	str.w	r4, [r5, #328]	; 0x148
   10078:	b.n	fffe <__register_exitproc+0x16>
   1007a:	mov.w	r0, #4294967295
   1007e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10082:	nop
   10084:	.word	0x00013738
   10088:	.word	0x0000b949

0001008c <register_fini>:
   1008c:	ldr	r3, [pc, #8]	; (10098 <register_fini+0xc>)
   1008e:	cbz	r3, 10096 <register_fini+0xa>
   10090:	ldr	r0, [pc, #8]	; (1009c <register_fini+0x10>)
   10092:	b.w	100a0 <atexit>
   10096:	bx	lr
   10098:	.word	0x00000000
   1009c:	.word	0x0001100d

000100a0 <atexit>:
   100a0:	movs	r3, #0
   100a2:	mov	r1, r0
   100a4:	mov	r2, r3
   100a6:	mov	r0, r3
   100a8:	b.w	ffe8 <__register_exitproc>

000100ac <quorem>:
   100ac:	ldr	r2, [r0, #16]
   100ae:	ldr	r3, [r1, #16]
   100b0:	cmp	r3, r2
   100b2:	bgt.w	101d0 <quorem+0x124>
   100b6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   100ba:	add.w	r8, r3, #4294967295
   100be:	add.w	r7, r1, #20
   100c2:	add.w	fp, r0, #20
   100c6:	ldr.w	r2, [r7, r8, lsl #2]
   100ca:	ldr.w	r3, [fp, r8, lsl #2]
   100ce:	mov.w	r4, r8, lsl #2
   100d2:	sub	sp, #12
   100d4:	adds	r2, #1
   100d6:	udiv	r9, r3, r2
   100da:	add.w	r3, fp, r4
   100de:	str	r4, [sp, #0]
   100e0:	add.w	sl, r7, r4
   100e4:	str	r3, [sp, #4]
   100e6:	cmp.w	r9, #0
   100ea:	beq.n	10160 <quorem+0xb4>
   100ec:	movs	r5, #0
   100ee:	mov	ip, r7
   100f0:	mov	lr, fp
   100f2:	mov	r3, r5
   100f4:	ldr.w	r6, [ip], #4
   100f8:	ldr.w	r2, [lr]
   100fc:	uxth	r4, r6
   100fe:	mla	r5, r9, r4, r5
   10102:	lsrs	r6, r6, #16
   10104:	lsrs	r4, r5, #16
   10106:	mla	r4, r9, r6, r4
   1010a:	uxth	r5, r5
   1010c:	subs	r3, r3, r5
   1010e:	uxth	r6, r4
   10110:	uxtah	r3, r3, r2
   10114:	rsb	r6, r6, r2, lsr #16
   10118:	add.w	r6, r6, r3, asr #16
   1011c:	uxth	r3, r3
   1011e:	orr.w	r3, r3, r6, lsl #16
   10122:	cmp	sl, ip
   10124:	str.w	r3, [lr], #4
   10128:	mov.w	r5, r4, lsr #16
   1012c:	mov.w	r3, r6, asr #16
   10130:	bcs.n	100f4 <quorem+0x48>
   10132:	ldr	r3, [sp, #0]
   10134:	ldr.w	r3, [fp, r3]
   10138:	cbnz	r3, 10160 <quorem+0xb4>
   1013a:	ldr	r4, [sp, #4]
   1013c:	subs	r3, r4, #4
   1013e:	cmp	fp, r3
   10140:	bcs.n	1015c <quorem+0xb0>
   10142:	ldr.w	r3, [r4, #-4]
   10146:	cbnz	r3, 1015c <quorem+0xb0>
   10148:	sub.w	r3, r4, #8
   1014c:	b.n	10154 <quorem+0xa8>
   1014e:	ldr	r2, [r3, #0]
   10150:	subs	r3, #4
   10152:	cbnz	r2, 1015c <quorem+0xb0>
   10154:	cmp	fp, r3
   10156:	add.w	r8, r8, #4294967295
   1015a:	bcc.n	1014e <quorem+0xa2>
   1015c:	str.w	r8, [r0, #16]
   10160:	mov	r4, r0
   10162:	bl	11f48 <__mcmp>
   10166:	cmp	r0, #0
   10168:	blt.n	101c8 <quorem+0x11c>
   1016a:	add.w	r9, r9, #1
   1016e:	mov	r5, fp
   10170:	movs	r3, #0
   10172:	ldr.w	r1, [r7], #4
   10176:	ldr	r0, [r5, #0]
   10178:	uxth	r2, r1
   1017a:	subs	r2, r3, r2
   1017c:	lsrs	r1, r1, #16
   1017e:	uxtah	r2, r2, r0
   10182:	rsb	r3, r1, r0, lsr #16
   10186:	add.w	r3, r3, r2, asr #16
   1018a:	uxth	r1, r2
   1018c:	orr.w	r1, r1, r3, lsl #16
   10190:	cmp	sl, r7
   10192:	str.w	r1, [r5], #4
   10196:	mov.w	r3, r3, asr #16
   1019a:	bcs.n	10172 <quorem+0xc6>
   1019c:	ldr.w	r2, [fp, r8, lsl #2]
   101a0:	add.w	r3, fp, r8, lsl #2
   101a4:	cbnz	r2, 101c8 <quorem+0x11c>
   101a6:	subs	r2, r3, #4
   101a8:	cmp	fp, r2
   101aa:	bcs.n	101c4 <quorem+0x118>
   101ac:	ldr.w	r2, [r3, #-4]
   101b0:	cbnz	r2, 101c4 <quorem+0x118>
   101b2:	subs	r3, #8
   101b4:	b.n	101bc <quorem+0x110>
   101b6:	ldr	r2, [r3, #0]
   101b8:	subs	r3, #4
   101ba:	cbnz	r2, 101c4 <quorem+0x118>
   101bc:	cmp	fp, r3
   101be:	add.w	r8, r8, #4294967295
   101c2:	bcc.n	101b6 <quorem+0x10a>
   101c4:	str.w	r8, [r4, #16]
   101c8:	mov	r0, r9
   101ca:	add	sp, #12
   101cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   101d0:	movs	r0, #0
   101d2:	bx	lr
   101d4:			; <UNDEFINED> instruction: 0xffffffff

000101d8 <_dtoa_r>:
   101d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   101dc:	vmov	r6, r7, d0
   101e0:	sub	sp, #108	; 0x6c
   101e2:	ldr	r4, [r0, #64]	; 0x40
   101e4:	ldr	r5, [sp, #144]	; 0x90
   101e6:	str	r1, [sp, #0]
   101e8:	mov	r9, r0
   101ea:	str	r2, [sp, #20]
   101ec:	str	r3, [sp, #12]
   101ee:	vmov	sl, s0
   101f2:	mov	fp, r7
   101f4:	cbz	r4, 1020c <_dtoa_r+0x34>
   101f6:	ldr	r2, [r0, #68]	; 0x44
   101f8:	str	r2, [r4, #4]
   101fa:	movs	r3, #1
   101fc:	lsls	r3, r2
   101fe:	str	r3, [r4, #8]
   10200:	mov	r1, r4
   10202:	bl	11aec <_Bfree>
   10206:	movs	r3, #0
   10208:	str.w	r3, [r9, #64]	; 0x40
   1020c:	cmp.w	fp, #0
   10210:	mov	r4, fp
   10212:	blt.n	1027e <_dtoa_r+0xa6>
   10214:	movs	r3, #0
   10216:	str	r3, [r5, #0]
   10218:	ldr	r3, [pc, #644]	; (104a0 <_dtoa_r+0x2c8>)
   1021a:	mov	r2, r3
   1021c:	ands	r3, r4
   1021e:	cmp	r3, r2
   10220:	beq.n	10250 <_dtoa_r+0x78>
   10222:	movs	r2, #0
   10224:	movs	r3, #0
   10226:	mov	r0, sl
   10228:	mov	r1, fp
   1022a:	bl	b12c <__aeabi_dcmpeq>
   1022e:	mov	r6, sl
   10230:	mov	r7, fp
   10232:	mov	r8, r0
   10234:	cbz	r0, 1028a <_dtoa_r+0xb2>
   10236:	ldr	r2, [sp, #12]
   10238:	movs	r3, #1
   1023a:	str	r3, [r2, #0]
   1023c:	ldr	r3, [sp, #148]	; 0x94
   1023e:	cmp	r3, #0
   10240:	beq.w	103c0 <_dtoa_r+0x1e8>
   10244:	ldr	r0, [pc, #604]	; (104a4 <_dtoa_r+0x2cc>)
   10246:	str	r0, [r3, #0]
   10248:	subs	r0, #1
   1024a:	add	sp, #108	; 0x6c
   1024c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10250:	ldr	r2, [sp, #12]
   10252:	movw	r3, #9999	; 0x270f
   10256:	str	r3, [r2, #0]
   10258:	cmp.w	sl, #0
   1025c:	beq.w	10394 <_dtoa_r+0x1bc>
   10260:	ldr	r0, [pc, #580]	; (104a8 <_dtoa_r+0x2d0>)
   10262:	ldr	r3, [sp, #148]	; 0x94
   10264:	cmp	r3, #0
   10266:	beq.n	1024a <_dtoa_r+0x72>
   10268:	ldrb	r3, [r0, #3]
   1026a:	cmp	r3, #0
   1026c:	beq.w	103c4 <_dtoa_r+0x1ec>
   10270:	add.w	r3, r0, #8
   10274:	ldr	r2, [sp, #148]	; 0x94
   10276:	str	r3, [r2, #0]
   10278:	add	sp, #108	; 0x6c
   1027a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1027e:	movs	r3, #1
   10280:	bic.w	r4, fp, #2147483648	; 0x80000000
   10284:	str	r3, [r5, #0]
   10286:	mov	fp, r4
   10288:	b.n	10218 <_dtoa_r+0x40>
   1028a:	add	r2, sp, #96	; 0x60
   1028c:	add	r1, sp, #100	; 0x64
   1028e:	vmov	d0, r6, r7
   10292:	mov	r0, r9
   10294:	bl	121c4 <__d2b>
   10298:	lsrs	r5, r4, #20
   1029a:	str	r0, [sp, #40]	; 0x28
   1029c:	bne.w	103a6 <_dtoa_r+0x1ce>
   102a0:	ldr	r5, [sp, #96]	; 0x60
   102a2:	ldr	r6, [sp, #100]	; 0x64
   102a4:	add	r6, r5
   102a6:	addw	r3, r6, #1074	; 0x432
   102aa:	cmp	r3, #32
   102ac:	ble.w	107c0 <_dtoa_r+0x5e8>
   102b0:	rsb	r3, r3, #64	; 0x40
   102b4:	addw	r0, r6, #1042	; 0x412
   102b8:	lsls	r4, r3
   102ba:	lsr.w	r0, sl, r0
   102be:	orrs	r0, r4
   102c0:	bl	ab70 <__aeabi_ui2d>
   102c4:	movs	r3, #1
   102c6:	subs	r4, r6, #1
   102c8:	sub.w	r1, r1, #32505856	; 0x1f00000
   102cc:	str	r3, [sp, #60]	; 0x3c
   102ce:	movs	r2, #0
   102d0:	ldr	r3, [pc, #472]	; (104ac <_dtoa_r+0x2d4>)
   102d2:	bl	a8f4 <__aeabi_dsub>
   102d6:	add	r3, pc, #432	; (adr r3, 10488 <_dtoa_r+0x2b0>)
   102d8:	ldrd	r2, r3, [r3]
   102dc:	bl	ac5c <__aeabi_dmul>
   102e0:	add	r3, pc, #428	; (adr r3, 10490 <_dtoa_r+0x2b8>)
   102e2:	ldrd	r2, r3, [r3]
   102e6:	bl	a8f8 <__adddf3>
   102ea:	mov	r6, r0
   102ec:	mov	r0, r4
   102ee:	mov	r7, r1
   102f0:	bl	ab90 <__aeabi_i2d>
   102f4:	add	r3, pc, #416	; (adr r3, 10498 <_dtoa_r+0x2c0>)
   102f6:	ldrd	r2, r3, [r3]
   102fa:	bl	ac5c <__aeabi_dmul>
   102fe:	mov	r2, r0
   10300:	mov	r3, r1
   10302:	mov	r0, r6
   10304:	mov	r1, r7
   10306:	bl	a8f8 <__adddf3>
   1030a:	mov	r6, r0
   1030c:	mov	r7, r1
   1030e:	bl	b1bc <__aeabi_d2iz>
   10312:	movs	r2, #0
   10314:	str	r0, [sp, #16]
   10316:	movs	r3, #0
   10318:	mov	r0, r6
   1031a:	mov	r1, r7
   1031c:	bl	b140 <__aeabi_dcmplt>
   10320:	cmp	r0, #0
   10322:	bne.w	10776 <_dtoa_r+0x59e>
   10326:	ldr	r6, [sp, #16]
   10328:	cmp	r6, #22
   1032a:	bhi.w	10770 <_dtoa_r+0x598>
   1032e:	ldr	r3, [pc, #384]	; (104b0 <_dtoa_r+0x2d8>)
   10330:	add.w	r3, r3, r6, lsl #3
   10334:	ldrd	r0, r1, [r3]
   10338:	mov	r2, sl
   1033a:	mov	r3, fp
   1033c:	bl	b17c <__aeabi_dcmpgt>
   10340:	cmp	r0, #0
   10342:	beq.w	107ca <_dtoa_r+0x5f2>
   10346:	subs	r3, r6, #1
   10348:	str	r3, [sp, #16]
   1034a:	movs	r3, #0
   1034c:	str	r3, [sp, #52]	; 0x34
   1034e:	subs	r5, r5, r4
   10350:	subs.w	r8, r5, #1
   10354:	bmi.w	107ac <_dtoa_r+0x5d4>
   10358:	movs	r3, #0
   1035a:	str	r3, [sp, #28]
   1035c:	ldr	r3, [sp, #16]
   1035e:	cmp	r3, #0
   10360:	blt.w	1079a <_dtoa_r+0x5c2>
   10364:	add	r8, r3
   10366:	str	r3, [sp, #48]	; 0x30
   10368:	movs	r3, #0
   1036a:	str	r3, [sp, #24]
   1036c:	ldr	r3, [sp, #0]
   1036e:	cmp	r3, #9
   10370:	bhi.n	103c8 <_dtoa_r+0x1f0>
   10372:	cmp	r3, #5
   10374:	ble.w	11000 <_dtoa_r+0xe28>
   10378:	subs	r3, #4
   1037a:	str	r3, [sp, #0]
   1037c:	movs	r6, #0
   1037e:	ldr	r3, [sp, #0]
   10380:	subs	r3, #2
   10382:	cmp	r3, #3
   10384:	bhi.w	10fce <_dtoa_r+0xdf6>
   10388:	tbh	[pc, r3, lsl #1]
   1038c:	.word	0x0224032b
   10390:	.word	0x04500336
   10394:	ldr	r3, [pc, #272]	; (104a8 <_dtoa_r+0x2d0>)
   10396:	ldr	r2, [pc, #284]	; (104b4 <_dtoa_r+0x2dc>)
   10398:	ubfx	r0, r4, #0, #20
   1039c:	cmp	r0, #0
   1039e:	ite	ne
   103a0:	movne	r0, r3
   103a2:	moveq	r0, r2
   103a4:	b.n	10262 <_dtoa_r+0x8a>
   103a6:	ubfx	r3, fp, #0, #20
   103aa:	orr.w	r1, r3, #1069547520	; 0x3fc00000
   103ae:	subw	r4, r5, #1023	; 0x3ff
   103b2:	mov	r0, sl
   103b4:	str.w	r8, [sp, #60]	; 0x3c
   103b8:	orr.w	r1, r1, #3145728	; 0x300000
   103bc:	ldr	r5, [sp, #96]	; 0x60
   103be:	b.n	102ce <_dtoa_r+0xf6>
   103c0:	ldr	r0, [pc, #244]	; (104b8 <_dtoa_r+0x2e0>)
   103c2:	b.n	1024a <_dtoa_r+0x72>
   103c4:	adds	r3, r0, #3
   103c6:	b.n	10274 <_dtoa_r+0x9c>
   103c8:	movs	r1, #0
   103ca:	str.w	r1, [r9, #68]	; 0x44
   103ce:	mov	r0, r9
   103d0:	mov	r4, r1
   103d2:	str	r1, [sp, #0]
   103d4:	bl	11aa0 <_Balloc>
   103d8:	mov.w	r3, #4294967295
   103dc:	str	r3, [sp, #32]
   103de:	str	r3, [sp, #56]	; 0x38
   103e0:	movs	r3, #1
   103e2:	str	r0, [sp, #36]	; 0x24
   103e4:	str.w	r0, [r9, #64]	; 0x40
   103e8:	str	r4, [sp, #20]
   103ea:	str	r3, [sp, #44]	; 0x2c
   103ec:	ldr	r3, [sp, #100]	; 0x64
   103ee:	cmp	r3, #0
   103f0:	blt.w	10594 <_dtoa_r+0x3bc>
   103f4:	ldr	r2, [sp, #16]
   103f6:	cmp	r2, #14
   103f8:	bgt.w	10594 <_dtoa_r+0x3bc>
   103fc:	ldr	r3, [pc, #176]	; (104b0 <_dtoa_r+0x2d8>)
   103fe:	add.w	r3, r3, r2, lsl #3
   10402:	vldr	d7, [r3]
   10406:	ldr	r3, [sp, #20]
   10408:	cmp	r3, #0
   1040a:	vstr	d7, [sp]
   1040e:	blt.w	10a0e <_dtoa_r+0x836>
   10412:	mov	r6, sl
   10414:	mov	r7, fp
   10416:	ldrd	sl, fp, [sp]
   1041a:	mov	r0, r6
   1041c:	mov	r2, sl
   1041e:	mov	r3, fp
   10420:	mov	r1, r7
   10422:	bl	aeb0 <__aeabi_ddiv>
   10426:	bl	b1bc <__aeabi_d2iz>
   1042a:	mov	r4, r0
   1042c:	bl	ab90 <__aeabi_i2d>
   10430:	mov	r2, sl
   10432:	mov	r3, fp
   10434:	bl	ac5c <__aeabi_dmul>
   10438:	mov	r3, r1
   1043a:	mov	r2, r0
   1043c:	mov	r1, r7
   1043e:	mov	r0, r6
   10440:	bl	a8f4 <__aeabi_dsub>
   10444:	ldr	r5, [sp, #36]	; 0x24
   10446:	add.w	r3, r4, #48	; 0x30
   1044a:	strb	r3, [r5, #0]
   1044c:	ldr	r3, [sp, #32]
   1044e:	cmp	r3, #1
   10450:	mov	r6, r0
   10452:	mov	r7, r1
   10454:	add.w	r5, r5, #1
   10458:	beq.n	1051e <_dtoa_r+0x346>
   1045a:	movs	r2, #0
   1045c:	ldr	r3, [pc, #92]	; (104bc <_dtoa_r+0x2e4>)
   1045e:	bl	ac5c <__aeabi_dmul>
   10462:	movs	r2, #0
   10464:	movs	r3, #0
   10466:	mov	r6, r0
   10468:	mov	r7, r1
   1046a:	bl	b12c <__aeabi_dcmpeq>
   1046e:	cmp	r0, #0
   10470:	bne.n	1056e <_dtoa_r+0x396>
   10472:	str.w	r9, [sp, #20]
   10476:	ldr.w	sl, [sp, #32]
   1047a:	ldr.w	fp, [sp, #36]	; 0x24
   1047e:	ldrd	r8, r9, [sp]
   10482:	b.n	104d6 <_dtoa_r+0x2fe>
   10484:	nop.w
   10488:	.word	0x636f4361
   1048c:	.word	0x3fd287a7
   10490:	.word	0x8b60c8b3
   10494:	.word	0x3fc68a28
   10498:	.word	0x509f79fb
   1049c:	.word	0x3fd34413
   104a0:	.word	0x7ff00000
   104a4:	.word	0x00013801
   104a8:	.word	0x00013950
   104ac:	.word	0x3ff80000
   104b0:	.word	0x00013a58
   104b4:	.word	0x00013944
   104b8:	.word	0x00013800
   104bc:	.word	0x40240000
   104c0:	bl	ac5c <__aeabi_dmul>
   104c4:	movs	r2, #0
   104c6:	movs	r3, #0
   104c8:	mov	r6, r0
   104ca:	mov	r7, r1
   104cc:	bl	b12c <__aeabi_dcmpeq>
   104d0:	cmp	r0, #0
   104d2:	bne.w	10c32 <_dtoa_r+0xa5a>
   104d6:	mov	r2, r8
   104d8:	mov	r3, r9
   104da:	mov	r0, r6
   104dc:	mov	r1, r7
   104de:	bl	aeb0 <__aeabi_ddiv>
   104e2:	bl	b1bc <__aeabi_d2iz>
   104e6:	mov	r4, r0
   104e8:	bl	ab90 <__aeabi_i2d>
   104ec:	mov	r2, r8
   104ee:	mov	r3, r9
   104f0:	bl	ac5c <__aeabi_dmul>
   104f4:	mov	r2, r0
   104f6:	mov	r3, r1
   104f8:	mov	r0, r6
   104fa:	mov	r1, r7
   104fc:	bl	a8f4 <__aeabi_dsub>
   10500:	add.w	lr, r4, #48	; 0x30
   10504:	strb.w	lr, [r5], #1
   10508:	rsb	lr, fp, r5
   1050c:	cmp	lr, sl
   1050e:	mov	r6, r0
   10510:	mov	r7, r1
   10512:	mov.w	r2, #0
   10516:	ldr	r3, [pc, #696]	; (107d0 <_dtoa_r+0x5f8>)
   10518:	bne.n	104c0 <_dtoa_r+0x2e8>
   1051a:	ldr.w	r9, [sp, #20]
   1051e:	mov	r2, r6
   10520:	mov	r3, r7
   10522:	mov	r0, r6
   10524:	mov	r1, r7
   10526:	bl	a8f8 <__adddf3>
   1052a:	mov	r6, r0
   1052c:	mov	r7, r1
   1052e:	mov	r2, r0
   10530:	mov	r3, r1
   10532:	ldrd	r0, r1, [sp]
   10536:	bl	b140 <__aeabi_dcmplt>
   1053a:	cbnz	r0, 1054e <_dtoa_r+0x376>
   1053c:	mov	r2, r6
   1053e:	mov	r3, r7
   10540:	ldrd	r0, r1, [sp]
   10544:	bl	b12c <__aeabi_dcmpeq>
   10548:	cbz	r0, 1056e <_dtoa_r+0x396>
   1054a:	lsls	r3, r4, #31
   1054c:	bpl.n	1056e <_dtoa_r+0x396>
   1054e:	ldrb.w	r4, [r5, #-1]
   10552:	ldr	r2, [sp, #36]	; 0x24
   10554:	subs	r3, r5, #1
   10556:	b.n	10562 <_dtoa_r+0x38a>
   10558:	cmp	r2, r3
   1055a:	beq.w	10d56 <_dtoa_r+0xb7e>
   1055e:	ldrb.w	r4, [r3, #-1]!
   10562:	cmp	r4, #57	; 0x39
   10564:	add.w	r5, r3, #1
   10568:	beq.n	10558 <_dtoa_r+0x380>
   1056a:	adds	r4, #1
   1056c:	strb	r4, [r3, #0]
   1056e:	ldr	r1, [sp, #40]	; 0x28
   10570:	mov	r0, r9
   10572:	bl	11aec <_Bfree>
   10576:	movs	r2, #0
   10578:	ldr	r3, [sp, #16]
   1057a:	strb	r2, [r5, #0]
   1057c:	ldr	r2, [sp, #12]
   1057e:	adds	r3, #1
   10580:	str	r3, [r2, #0]
   10582:	ldr	r3, [sp, #148]	; 0x94
   10584:	cmp	r3, #0
   10586:	beq.w	10cc0 <_dtoa_r+0xae8>
   1058a:	ldr	r0, [sp, #36]	; 0x24
   1058c:	str	r5, [r3, #0]
   1058e:	add	sp, #108	; 0x6c
   10590:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10594:	ldr	r2, [sp, #44]	; 0x2c
   10596:	cmp	r2, #0
   10598:	beq.w	107b8 <_dtoa_r+0x5e0>
   1059c:	ldr	r2, [sp, #0]
   1059e:	cmp	r2, #1
   105a0:	ble.w	10a52 <_dtoa_r+0x87a>
   105a4:	ldr	r3, [sp, #32]
   105a6:	ldr	r2, [sp, #24]
   105a8:	subs	r7, r3, #1
   105aa:	cmp	r2, r7
   105ac:	blt.w	10cc6 <_dtoa_r+0xaee>
   105b0:	subs	r7, r2, r7
   105b2:	ldr	r3, [sp, #32]
   105b4:	cmp	r3, #0
   105b6:	blt.w	10eba <_dtoa_r+0xce2>
   105ba:	ldr	r5, [sp, #28]
   105bc:	ldr	r3, [sp, #32]
   105be:	ldr	r2, [sp, #28]
   105c0:	movs	r1, #1
   105c2:	add	r2, r3
   105c4:	mov	r0, r9
   105c6:	str	r2, [sp, #28]
   105c8:	add	r8, r3
   105ca:	bl	11cb4 <__i2b>
   105ce:	mov	r6, r0
   105d0:	cbz	r5, 105ec <_dtoa_r+0x414>
   105d2:	cmp.w	r8, #0
   105d6:	ble.n	105ec <_dtoa_r+0x414>
   105d8:	cmp	r5, r8
   105da:	ldr	r2, [sp, #28]
   105dc:	mov	r3, r5
   105de:	it	ge
   105e0:	movge	r3, r8
   105e2:	subs	r2, r2, r3
   105e4:	str	r2, [sp, #28]
   105e6:	subs	r5, r5, r3
   105e8:	rsb	r8, r3, r8
   105ec:	ldr	r3, [sp, #24]
   105ee:	cmp	r3, #0
   105f0:	ble.w	10bde <_dtoa_r+0xa06>
   105f4:	ldr	r2, [sp, #44]	; 0x2c
   105f6:	cmp	r2, #0
   105f8:	beq.w	10a00 <_dtoa_r+0x828>
   105fc:	cmp	r7, #0
   105fe:	beq.w	10a00 <_dtoa_r+0x828>
   10602:	mov	r1, r6
   10604:	mov	r2, r7
   10606:	mov	r0, r9
   10608:	bl	11df8 <__pow5mult>
   1060c:	ldr	r2, [sp, #40]	; 0x28
   1060e:	mov	r1, r0
   10610:	mov	r6, r0
   10612:	mov	r0, r9
   10614:	bl	11cc8 <__multiply>
   10618:	ldr	r1, [sp, #40]	; 0x28
   1061a:	mov	r4, r0
   1061c:	mov	r0, r9
   1061e:	bl	11aec <_Bfree>
   10622:	ldr	r3, [sp, #24]
   10624:	subs	r3, r3, r7
   10626:	str	r3, [sp, #24]
   10628:	bne.w	109fe <_dtoa_r+0x826>
   1062c:	movs	r1, #1
   1062e:	mov	r0, r9
   10630:	bl	11cb4 <__i2b>
   10634:	ldr	r3, [sp, #48]	; 0x30
   10636:	str	r0, [sp, #24]
   10638:	cmp	r3, #0
   1063a:	beq.w	10a68 <_dtoa_r+0x890>
   1063e:	mov	r1, r0
   10640:	mov	r2, r3
   10642:	mov	r0, r9
   10644:	bl	11df8 <__pow5mult>
   10648:	ldr	r3, [sp, #0]
   1064a:	str	r0, [sp, #24]
   1064c:	cmp	r3, #1
   1064e:	ble.w	10c38 <_dtoa_r+0xa60>
   10652:	movs	r7, #0
   10654:	ldr	r2, [sp, #24]
   10656:	ldr	r3, [r2, #16]
   10658:	add.w	r3, r2, r3, lsl #2
   1065c:	ldr	r0, [r3, #16]
   1065e:	bl	11c18 <__hi0bits>
   10662:	rsb	r0, r0, #32
   10666:	add	r0, r8
   10668:	ands.w	r0, r0, #31
   1066c:	beq.w	10a64 <_dtoa_r+0x88c>
   10670:	rsb	r3, r0, #32
   10674:	cmp	r3, #4
   10676:	ble.w	10ff4 <_dtoa_r+0xe1c>
   1067a:	rsb	r0, r0, #28
   1067e:	ldr	r3, [sp, #28]
   10680:	add	r3, r0
   10682:	str	r3, [sp, #28]
   10684:	add	r5, r0
   10686:	add	r8, r0
   10688:	ldr	r3, [sp, #28]
   1068a:	cmp	r3, #0
   1068c:	ble.n	1069a <_dtoa_r+0x4c2>
   1068e:	mov	r1, r4
   10690:	mov	r2, r3
   10692:	mov	r0, r9
   10694:	bl	11e98 <__lshift>
   10698:	mov	r4, r0
   1069a:	cmp.w	r8, #0
   1069e:	ble.n	106ac <_dtoa_r+0x4d4>
   106a0:	mov	r2, r8
   106a2:	ldr	r1, [sp, #24]
   106a4:	mov	r0, r9
   106a6:	bl	11e98 <__lshift>
   106aa:	str	r0, [sp, #24]
   106ac:	ldr	r3, [sp, #52]	; 0x34
   106ae:	cmp	r3, #0
   106b0:	bne.w	10ba8 <_dtoa_r+0x9d0>
   106b4:	ldr	r3, [sp, #32]
   106b6:	cmp	r3, #0
   106b8:	ble.w	10be2 <_dtoa_r+0xa0a>
   106bc:	ldr	r3, [sp, #44]	; 0x2c
   106be:	cmp	r3, #0
   106c0:	bne.w	10aac <_dtoa_r+0x8d4>
   106c4:	ldr.w	fp, [sp, #36]	; 0x24
   106c8:	ldr	r7, [sp, #32]
   106ca:	ldr.w	r8, [sp, #24]
   106ce:	mov	r5, fp
   106d0:	b.n	106d8 <_dtoa_r+0x500>
   106d2:	bl	11b00 <__multadd>
   106d6:	mov	r4, r0
   106d8:	mov	r1, r8
   106da:	mov	r0, r4
   106dc:	bl	100ac <quorem>
   106e0:	add.w	sl, r0, #48	; 0x30
   106e4:	strb.w	sl, [r5], #1
   106e8:	rsb	r3, fp, r5
   106ec:	cmp	r3, r7
   106ee:	mov.w	r2, #10
   106f2:	mov.w	r3, #0
   106f6:	mov	r1, r4
   106f8:	mov	r0, r9
   106fa:	blt.n	106d2 <_dtoa_r+0x4fa>
   106fc:	ldr	r3, [sp, #36]	; 0x24
   106fe:	ldr	r2, [sp, #32]
   10700:	cmp	r2, #1
   10702:	ite	ge
   10704:	addge	r3, r3, r2
   10706:	addlt	r3, #1
   10708:	mov	r5, r3
   1070a:	mov.w	fp, #0
   1070e:	mov	r1, r4
   10710:	movs	r2, #1
   10712:	mov	r0, r9
   10714:	bl	11e98 <__lshift>
   10718:	ldr	r1, [sp, #24]
   1071a:	str	r0, [sp, #40]	; 0x28
   1071c:	bl	11f48 <__mcmp>
   10720:	cmp	r0, #0
   10722:	ble.w	10d30 <_dtoa_r+0xb58>
   10726:	ldrb.w	r2, [r5, #-1]
   1072a:	ldr	r1, [sp, #36]	; 0x24
   1072c:	subs	r3, r5, #1
   1072e:	b.n	1073a <_dtoa_r+0x562>
   10730:	cmp	r3, r1
   10732:	beq.w	10c1e <_dtoa_r+0xa46>
   10736:	ldrb.w	r2, [r3, #-1]!
   1073a:	cmp	r2, #57	; 0x39
   1073c:	add.w	r5, r3, #1
   10740:	beq.n	10730 <_dtoa_r+0x558>
   10742:	adds	r2, #1
   10744:	strb	r2, [r3, #0]
   10746:	ldr	r1, [sp, #24]
   10748:	mov	r0, r9
   1074a:	bl	11aec <_Bfree>
   1074e:	cmp	r6, #0
   10750:	beq.w	1056e <_dtoa_r+0x396>
   10754:	cmp.w	fp, #0
   10758:	beq.n	10766 <_dtoa_r+0x58e>
   1075a:	cmp	fp, r6
   1075c:	beq.n	10766 <_dtoa_r+0x58e>
   1075e:	mov	r1, fp
   10760:	mov	r0, r9
   10762:	bl	11aec <_Bfree>
   10766:	mov	r1, r6
   10768:	mov	r0, r9
   1076a:	bl	11aec <_Bfree>
   1076e:	b.n	1056e <_dtoa_r+0x396>
   10770:	movs	r3, #1
   10772:	str	r3, [sp, #52]	; 0x34
   10774:	b.n	1034e <_dtoa_r+0x176>
   10776:	ldr.w	r8, [sp, #16]
   1077a:	mov	r0, r8
   1077c:	bl	ab90 <__aeabi_i2d>
   10780:	mov	r2, r0
   10782:	mov	r3, r1
   10784:	mov	r0, r6
   10786:	mov	r1, r7
   10788:	bl	b12c <__aeabi_dcmpeq>
   1078c:	cmp	r0, #0
   1078e:	bne.w	10326 <_dtoa_r+0x14e>
   10792:	add.w	r3, r8, #4294967295
   10796:	str	r3, [sp, #16]
   10798:	b.n	10326 <_dtoa_r+0x14e>
   1079a:	ldr	r2, [sp, #28]
   1079c:	ldr	r3, [sp, #16]
   1079e:	subs	r2, r2, r3
   107a0:	negs	r3, r3
   107a2:	str	r3, [sp, #24]
   107a4:	movs	r3, #0
   107a6:	str	r2, [sp, #28]
   107a8:	str	r3, [sp, #48]	; 0x30
   107aa:	b.n	1036c <_dtoa_r+0x194>
   107ac:	rsb	r3, r8, #0
   107b0:	str	r3, [sp, #28]
   107b2:	mov.w	r8, #0
   107b6:	b.n	1035c <_dtoa_r+0x184>
   107b8:	ldr	r7, [sp, #24]
   107ba:	ldr	r5, [sp, #28]
   107bc:	ldr	r6, [sp, #44]	; 0x2c
   107be:	b.n	105d0 <_dtoa_r+0x3f8>
   107c0:	rsb	r4, r3, #32
   107c4:	lsl.w	r0, sl, r4
   107c8:	b.n	102c0 <_dtoa_r+0xe8>
   107ca:	str	r0, [sp, #52]	; 0x34
   107cc:	b.n	1034e <_dtoa_r+0x176>
   107ce:	nop
   107d0:	.word	0x40240000
   107d4:	movs	r3, #0
   107d6:	str	r3, [sp, #44]	; 0x2c
   107d8:	ldr	r3, [sp, #16]
   107da:	ldr	r2, [sp, #20]
   107dc:	add	r3, r2
   107de:	str	r3, [sp, #56]	; 0x38
   107e0:	adds	r3, #1
   107e2:	cmp	r3, #0
   107e4:	str	r3, [sp, #32]
   107e6:	ble.w	10ce4 <_dtoa_r+0xb0c>
   107ea:	ldr	r4, [sp, #32]
   107ec:	mov	r5, r4
   107ee:	movs	r1, #0
   107f0:	cmp	r5, #23
   107f2:	str.w	r1, [r9, #68]	; 0x44
   107f6:	bls.n	10810 <_dtoa_r+0x638>
   107f8:	movs	r2, #1
   107fa:	movs	r3, #4
   107fc:	lsls	r3, r3, #1
   107fe:	add.w	r0, r3, #20
   10802:	cmp	r0, r5
   10804:	mov	r1, r2
   10806:	add.w	r2, r2, #1
   1080a:	bls.n	107fc <_dtoa_r+0x624>
   1080c:	str.w	r1, [r9, #68]	; 0x44
   10810:	mov	r0, r9
   10812:	bl	11aa0 <_Balloc>
   10816:	cmp	r4, #14
   10818:	str	r0, [sp, #36]	; 0x24
   1081a:	str.w	r0, [r9, #64]	; 0x40
   1081e:	bhi.w	103ec <_dtoa_r+0x214>
   10822:	cmp	r6, #0
   10824:	beq.w	103ec <_dtoa_r+0x214>
   10828:	ldr	r1, [sp, #16]
   1082a:	cmp	r1, #0
   1082c:	strd	sl, fp, [sp, #64]	; 0x40
   10830:	ble.w	10d68 <_dtoa_r+0xb90>
   10834:	ldr	r3, [pc, #576]	; (10a78 <_dtoa_r+0x8a0>)
   10836:	and.w	r2, r1, #15
   1083a:	asrs	r6, r1, #4
   1083c:	add.w	r3, r3, r2, lsl #3
   10840:	lsls	r0, r6, #27
   10842:	ldrd	r4, r5, [r3]
   10846:	bpl.w	10cd6 <_dtoa_r+0xafe>
   1084a:	ldr	r3, [pc, #560]	; (10a7c <_dtoa_r+0x8a4>)
   1084c:	mov	r0, sl
   1084e:	mov	r1, fp
   10850:	ldrd	r2, r3, [r3, #32]
   10854:	bl	aeb0 <__aeabi_ddiv>
   10858:	strd	r0, r1, [sp, #72]	; 0x48
   1085c:	and.w	r6, r6, #15
   10860:	mov.w	sl, #3
   10864:	cbz	r6, 10888 <_dtoa_r+0x6b0>
   10866:	ldr	r7, [pc, #532]	; (10a7c <_dtoa_r+0x8a4>)
   10868:	lsls	r1, r6, #31
   1086a:	bpl.n	10880 <_dtoa_r+0x6a8>
   1086c:	mov	r0, r4
   1086e:	mov	r1, r5
   10870:	ldrd	r2, r3, [r7]
   10874:	bl	ac5c <__aeabi_dmul>
   10878:	add.w	sl, sl, #1
   1087c:	mov	r4, r0
   1087e:	mov	r5, r1
   10880:	asrs	r6, r6, #1
   10882:	add.w	r7, r7, #8
   10886:	bne.n	10868 <_dtoa_r+0x690>
   10888:	mov	r2, r4
   1088a:	mov	r3, r5
   1088c:	ldrd	r0, r1, [sp, #72]	; 0x48
   10890:	bl	aeb0 <__aeabi_ddiv>
   10894:	mov	r6, r0
   10896:	mov	r7, r1
   10898:	ldr	r3, [sp, #52]	; 0x34
   1089a:	cbz	r3, 108ae <_dtoa_r+0x6d6>
   1089c:	movs	r2, #0
   1089e:	ldr	r3, [pc, #480]	; (10a80 <_dtoa_r+0x8a8>)
   108a0:	mov	r0, r6
   108a2:	mov	r1, r7
   108a4:	bl	b140 <__aeabi_dcmplt>
   108a8:	cmp	r0, #0
   108aa:	bne.w	10ee2 <_dtoa_r+0xd0a>
   108ae:	mov	r0, sl
   108b0:	bl	ab90 <__aeabi_i2d>
   108b4:	mov	r2, r6
   108b6:	mov	r3, r7
   108b8:	bl	ac5c <__aeabi_dmul>
   108bc:	ldr	r3, [pc, #452]	; (10a84 <_dtoa_r+0x8ac>)
   108be:	movs	r2, #0
   108c0:	bl	a8f8 <__adddf3>
   108c4:	ldr	r3, [sp, #32]
   108c6:	mov	r4, r0
   108c8:	sub.w	r5, r1, #54525952	; 0x3400000
   108cc:	cmp	r3, #0
   108ce:	beq.w	10c88 <_dtoa_r+0xab0>
   108d2:	ldr	r3, [sp, #16]
   108d4:	str	r3, [sp, #88]	; 0x58
   108d6:	ldr	r3, [sp, #32]
   108d8:	str	r3, [sp, #72]	; 0x48
   108da:	ldr	r3, [sp, #44]	; 0x2c
   108dc:	cmp	r3, #0
   108de:	beq.w	10e0a <_dtoa_r+0xc32>
   108e2:	ldr	r2, [sp, #72]	; 0x48
   108e4:	ldr	r3, [pc, #400]	; (10a78 <_dtoa_r+0x8a0>)
   108e6:	ldr	r1, [pc, #416]	; (10a88 <_dtoa_r+0x8b0>)
   108e8:	add.w	r3, r3, r2, lsl #3
   108ec:	ldrd	r2, r3, [r3, #-8]
   108f0:	movs	r0, #0
   108f2:	bl	aeb0 <__aeabi_ddiv>
   108f6:	mov	r2, r4
   108f8:	mov	r3, r5
   108fa:	bl	a8f4 <__aeabi_dsub>
   108fe:	mov	sl, r0
   10900:	mov	fp, r1
   10902:	mov	r0, r6
   10904:	mov	r1, r7
   10906:	bl	b1bc <__aeabi_d2iz>
   1090a:	mov	r4, r0
   1090c:	bl	ab90 <__aeabi_i2d>
   10910:	mov	r2, r0
   10912:	mov	r3, r1
   10914:	mov	r0, r6
   10916:	mov	r1, r7
   10918:	bl	a8f4 <__aeabi_dsub>
   1091c:	adds	r4, #48	; 0x30
   1091e:	ldr	r5, [sp, #36]	; 0x24
   10920:	uxtb	r4, r4
   10922:	mov	r6, r0
   10924:	mov	r7, r1
   10926:	strb	r4, [r5, #0]
   10928:	mov	r2, r0
   1092a:	mov	r3, r1
   1092c:	mov	r0, sl
   1092e:	mov	r1, fp
   10930:	adds	r5, #1
   10932:	bl	b17c <__aeabi_dcmpgt>
   10936:	cmp	r0, #0
   10938:	bne.n	109dc <_dtoa_r+0x804>
   1093a:	mov	r2, r6
   1093c:	mov	r3, r7
   1093e:	movs	r0, #0
   10940:	ldr	r1, [pc, #316]	; (10a80 <_dtoa_r+0x8a8>)
   10942:	bl	a8f4 <__aeabi_dsub>
   10946:	mov	r2, r0
   10948:	mov	r3, r1
   1094a:	mov	r0, sl
   1094c:	mov	r1, fp
   1094e:	bl	b17c <__aeabi_dcmpgt>
   10952:	cmp	r0, #0
   10954:	bne.w	10f68 <_dtoa_r+0xd90>
   10958:	ldr	r2, [sp, #72]	; 0x48
   1095a:	cmp	r2, #1
   1095c:	ble.w	10d4e <_dtoa_r+0xb76>
   10960:	ldr	r3, [sp, #72]	; 0x48
   10962:	ldr	r2, [sp, #36]	; 0x24
   10964:	str.w	r8, [sp, #72]	; 0x48
   10968:	add	r3, r2
   1096a:	mov	r8, r3
   1096c:	b.n	1098a <_dtoa_r+0x7b2>
   1096e:	movs	r0, #0
   10970:	ldr	r1, [pc, #268]	; (10a80 <_dtoa_r+0x8a8>)
   10972:	bl	a8f4 <__aeabi_dsub>
   10976:	mov	r2, sl
   10978:	mov	r3, fp
   1097a:	bl	b140 <__aeabi_dcmplt>
   1097e:	cmp	r0, #0
   10980:	bne.w	10f68 <_dtoa_r+0xd90>
   10984:	cmp	r5, r8
   10986:	beq.w	10d4a <_dtoa_r+0xb72>
   1098a:	mov	r0, sl
   1098c:	mov	r1, fp
   1098e:	movs	r2, #0
   10990:	ldr	r3, [pc, #248]	; (10a8c <_dtoa_r+0x8b4>)
   10992:	bl	ac5c <__aeabi_dmul>
   10996:	movs	r2, #0
   10998:	ldr	r3, [pc, #240]	; (10a8c <_dtoa_r+0x8b4>)
   1099a:	mov	sl, r0
   1099c:	mov	fp, r1
   1099e:	mov	r0, r6
   109a0:	mov	r1, r7
   109a2:	bl	ac5c <__aeabi_dmul>
   109a6:	mov	r7, r1
   109a8:	mov	r6, r0
   109aa:	bl	b1bc <__aeabi_d2iz>
   109ae:	mov	r4, r0
   109b0:	bl	ab90 <__aeabi_i2d>
   109b4:	mov	r2, r0
   109b6:	mov	r3, r1
   109b8:	mov	r0, r6
   109ba:	mov	r1, r7
   109bc:	bl	a8f4 <__aeabi_dsub>
   109c0:	adds	r4, #48	; 0x30
   109c2:	uxtb	r4, r4
   109c4:	mov	r2, sl
   109c6:	mov	r3, fp
   109c8:	strb.w	r4, [r5], #1
   109cc:	mov	r6, r0
   109ce:	mov	r7, r1
   109d0:	bl	b140 <__aeabi_dcmplt>
   109d4:	mov	r2, r6
   109d6:	mov	r3, r7
   109d8:	cmp	r0, #0
   109da:	beq.n	1096e <_dtoa_r+0x796>
   109dc:	ldr	r3, [sp, #88]	; 0x58
   109de:	str	r3, [sp, #16]
   109e0:	b.n	1056e <_dtoa_r+0x396>
   109e2:	movs	r3, #0
   109e4:	str	r3, [sp, #44]	; 0x2c
   109e6:	ldr	r3, [sp, #20]
   109e8:	cmp	r3, #0
   109ea:	ble.w	10cee <_dtoa_r+0xb16>
   109ee:	mov	r5, r3
   109f0:	mov	r4, r3
   109f2:	str	r3, [sp, #56]	; 0x38
   109f4:	str	r3, [sp, #32]
   109f6:	b.n	107ee <_dtoa_r+0x616>
   109f8:	movs	r3, #1
   109fa:	str	r3, [sp, #44]	; 0x2c
   109fc:	b.n	109e6 <_dtoa_r+0x80e>
   109fe:	str	r4, [sp, #40]	; 0x28
   10a00:	ldr	r2, [sp, #24]
   10a02:	ldr	r1, [sp, #40]	; 0x28
   10a04:	mov	r0, r9
   10a06:	bl	11df8 <__pow5mult>
   10a0a:	mov	r4, r0
   10a0c:	b.n	1062c <_dtoa_r+0x454>
   10a0e:	ldr	r3, [sp, #32]
   10a10:	cmp	r3, #0
   10a12:	bgt.w	10412 <_dtoa_r+0x23a>
   10a16:	bne.w	10cb8 <_dtoa_r+0xae0>
   10a1a:	movs	r2, #0
   10a1c:	ldr	r3, [pc, #112]	; (10a90 <_dtoa_r+0x8b8>)
   10a1e:	ldrd	r0, r1, [sp]
   10a22:	bl	ac5c <__aeabi_dmul>
   10a26:	mov	r3, fp
   10a28:	mov	r2, sl
   10a2a:	bl	b168 <__aeabi_dcmpge>
   10a2e:	ldr	r3, [sp, #32]
   10a30:	str	r3, [sp, #24]
   10a32:	mov	r6, r3
   10a34:	cmp	r0, #0
   10a36:	beq.w	10c0e <_dtoa_r+0xa36>
   10a3a:	ldr	r3, [sp, #20]
   10a3c:	ldr	r5, [sp, #36]	; 0x24
   10a3e:	mvns	r3, r3
   10a40:	str	r3, [sp, #16]
   10a42:	ldr	r1, [sp, #24]
   10a44:	mov	r0, r9
   10a46:	bl	11aec <_Bfree>
   10a4a:	cmp	r6, #0
   10a4c:	beq.w	1056e <_dtoa_r+0x396>
   10a50:	b.n	10766 <_dtoa_r+0x58e>
   10a52:	ldr	r2, [sp, #60]	; 0x3c
   10a54:	cmp	r2, #0
   10a56:	beq.w	10eca <_dtoa_r+0xcf2>
   10a5a:	addw	r3, r3, #1075	; 0x433
   10a5e:	ldr	r7, [sp, #24]
   10a60:	ldr	r5, [sp, #28]
   10a62:	b.n	105be <_dtoa_r+0x3e6>
   10a64:	movs	r0, #28
   10a66:	b.n	1067e <_dtoa_r+0x4a6>
   10a68:	ldr	r3, [sp, #0]
   10a6a:	cmp	r3, #1
   10a6c:	ble.w	10f70 <_dtoa_r+0xd98>
   10a70:	ldr	r7, [sp, #48]	; 0x30
   10a72:	movs	r0, #1
   10a74:	b.n	10666 <_dtoa_r+0x48e>
   10a76:	nop
   10a78:	.word	0x00013a58
   10a7c:	.word	0x00013b20
   10a80:	.word	0x3ff00000
   10a84:	.word	0x401c0000
   10a88:	.word	0x3fe00000
   10a8c:	.word	0x40240000
   10a90:	.word	0x40140000
   10a94:	mov	r1, r6
   10a96:	movs	r3, #0
   10a98:	movs	r2, #10
   10a9a:	mov	r0, r9
   10a9c:	bl	11b00 <__multadd>
   10aa0:	ldr	r3, [sp, #56]	; 0x38
   10aa2:	cmp	r3, #0
   10aa4:	mov	r6, r0
   10aa6:	ble.w	10fc4 <_dtoa_r+0xdec>
   10aaa:	str	r3, [sp, #32]
   10aac:	cmp	r5, #0
   10aae:	ble.n	10abc <_dtoa_r+0x8e4>
   10ab0:	mov	r1, r6
   10ab2:	mov	r2, r5
   10ab4:	mov	r0, r9
   10ab6:	bl	11e98 <__lshift>
   10aba:	mov	r6, r0
   10abc:	cmp	r7, #0
   10abe:	bne.w	10dba <_dtoa_r+0xbe2>
   10ac2:	mov	r8, r6
   10ac4:	ldr	r3, [sp, #32]
   10ac6:	ldr	r2, [sp, #36]	; 0x24
   10ac8:	subs	r3, #1
   10aca:	adds	r3, r2, r3
   10acc:	str	r3, [sp, #32]
   10ace:	and.w	r3, sl, #1
   10ad2:	str	r3, [sp, #40]	; 0x28
   10ad4:	mov	r7, r2
   10ad6:	ldr.w	fp, [sp, #24]
   10ada:	mov	r0, r4
   10adc:	mov	r1, fp
   10ade:	bl	100ac <quorem>
   10ae2:	mov	r1, r6
   10ae4:	mov	r5, r0
   10ae6:	mov	r0, r4
   10ae8:	bl	11f48 <__mcmp>
   10aec:	mov	r2, r8
   10aee:	mov	r1, fp
   10af0:	mov	sl, r0
   10af2:	mov	r0, r9
   10af4:	bl	11f8c <__mdiff>
   10af8:	ldr	r2, [r0, #12]
   10afa:	mov	fp, r0
   10afc:	add.w	r3, r5, #48	; 0x30
   10b00:	cmp	r2, #0
   10b02:	bne.n	10b98 <_dtoa_r+0x9c0>
   10b04:	mov	r1, r0
   10b06:	mov	r0, r4
   10b08:	str	r3, [sp, #28]
   10b0a:	bl	11f48 <__mcmp>
   10b0e:	mov	r1, fp
   10b10:	str	r0, [sp, #20]
   10b12:	mov	r0, r9
   10b14:	bl	11aec <_Bfree>
   10b18:	ldr	r2, [sp, #20]
   10b1a:	ldr	r3, [sp, #28]
   10b1c:	cbnz	r2, 10b2a <_dtoa_r+0x952>
   10b1e:	ldr	r1, [sp, #0]
   10b20:	cbnz	r1, 10b2a <_dtoa_r+0x952>
   10b22:	ldr	r1, [sp, #40]	; 0x28
   10b24:	cmp	r1, #0
   10b26:	beq.w	10f94 <_dtoa_r+0xdbc>
   10b2a:	cmp.w	sl, #0
   10b2e:	blt.w	10cf8 <_dtoa_r+0xb20>
   10b32:	bne.n	10b40 <_dtoa_r+0x968>
   10b34:	ldr	r1, [sp, #0]
   10b36:	cbnz	r1, 10b40 <_dtoa_r+0x968>
   10b38:	ldr	r1, [sp, #40]	; 0x28
   10b3a:	cmp	r1, #0
   10b3c:	beq.w	10cf8 <_dtoa_r+0xb20>
   10b40:	cmp	r2, #0
   10b42:	bgt.w	10de2 <_dtoa_r+0xc0a>
   10b46:	ldr	r2, [sp, #32]
   10b48:	strb	r3, [r7, #0]
   10b4a:	add.w	sl, r7, #1
   10b4e:	cmp	r7, r2
   10b50:	mov	r5, sl
   10b52:	beq.w	10dfa <_dtoa_r+0xc22>
   10b56:	mov	r1, r4
   10b58:	movs	r3, #0
   10b5a:	movs	r2, #10
   10b5c:	mov	r0, r9
   10b5e:	bl	11b00 <__multadd>
   10b62:	cmp	r6, r8
   10b64:	mov	r4, r0
   10b66:	mov	r1, r6
   10b68:	mov.w	r3, #0
   10b6c:	mov.w	r2, #10
   10b70:	mov	r0, r9
   10b72:	beq.n	10b8c <_dtoa_r+0x9b4>
   10b74:	bl	11b00 <__multadd>
   10b78:	mov	r1, r8
   10b7a:	mov	r6, r0
   10b7c:	movs	r3, #0
   10b7e:	movs	r2, #10
   10b80:	mov	r0, r9
   10b82:	bl	11b00 <__multadd>
   10b86:	mov	r7, sl
   10b88:	mov	r8, r0
   10b8a:	b.n	10ad6 <_dtoa_r+0x8fe>
   10b8c:	bl	11b00 <__multadd>
   10b90:	mov	r7, sl
   10b92:	mov	r6, r0
   10b94:	mov	r8, r0
   10b96:	b.n	10ad6 <_dtoa_r+0x8fe>
   10b98:	mov	r1, r0
   10b9a:	mov	r0, r9
   10b9c:	str	r3, [sp, #20]
   10b9e:	bl	11aec <_Bfree>
   10ba2:	movs	r2, #1
   10ba4:	ldr	r3, [sp, #20]
   10ba6:	b.n	10b2a <_dtoa_r+0x952>
   10ba8:	ldr	r1, [sp, #24]
   10baa:	mov	r0, r4
   10bac:	bl	11f48 <__mcmp>
   10bb0:	cmp	r0, #0
   10bb2:	bge.w	106b4 <_dtoa_r+0x4dc>
   10bb6:	mov	r1, r4
   10bb8:	ldr	r4, [sp, #16]
   10bba:	movs	r3, #0
   10bbc:	subs	r4, #1
   10bbe:	movs	r2, #10
   10bc0:	mov	r0, r9
   10bc2:	str	r4, [sp, #16]
   10bc4:	bl	11b00 <__multadd>
   10bc8:	ldr	r3, [sp, #44]	; 0x2c
   10bca:	mov	r4, r0
   10bcc:	cmp	r3, #0
   10bce:	bne.w	10a94 <_dtoa_r+0x8bc>
   10bd2:	ldr	r3, [sp, #56]	; 0x38
   10bd4:	cmp	r3, #0
   10bd6:	ble.w	10fb4 <_dtoa_r+0xddc>
   10bda:	str	r3, [sp, #32]
   10bdc:	b.n	106c4 <_dtoa_r+0x4ec>
   10bde:	ldr	r4, [sp, #40]	; 0x28
   10be0:	b.n	1062c <_dtoa_r+0x454>
   10be2:	ldr	r3, [sp, #0]
   10be4:	cmp	r3, #2
   10be6:	ble.w	106bc <_dtoa_r+0x4e4>
   10bea:	ldr	r3, [sp, #32]
   10bec:	cmp	r3, #0
   10bee:	bne.w	10f2c <_dtoa_r+0xd54>
   10bf2:	ldr	r1, [sp, #24]
   10bf4:	movs	r2, #5
   10bf6:	mov	r0, r9
   10bf8:	bl	11b00 <__multadd>
   10bfc:	mov	r1, r0
   10bfe:	str	r0, [sp, #24]
   10c00:	mov	r0, r4
   10c02:	bl	11f48 <__mcmp>
   10c06:	cmp	r0, #0
   10c08:	str	r4, [sp, #40]	; 0x28
   10c0a:	ble.w	10a3a <_dtoa_r+0x862>
   10c0e:	ldr	r2, [sp, #16]
   10c10:	ldr	r1, [sp, #36]	; 0x24
   10c12:	movs	r3, #49	; 0x31
   10c14:	adds	r2, #1
   10c16:	str	r2, [sp, #16]
   10c18:	strb	r3, [r1, #0]
   10c1a:	adds	r5, r1, #1
   10c1c:	b.n	10a42 <_dtoa_r+0x86a>
   10c1e:	ldr	r2, [sp, #16]
   10c20:	adds	r2, #1
   10c22:	str	r2, [sp, #16]
   10c24:	ldr	r2, [sp, #36]	; 0x24
   10c26:	movs	r3, #49	; 0x31
   10c28:	strb	r3, [r2, #0]
   10c2a:	b.n	10746 <_dtoa_r+0x56e>
   10c2c:	movs	r3, #1
   10c2e:	str	r3, [sp, #44]	; 0x2c
   10c30:	b.n	107d8 <_dtoa_r+0x600>
   10c32:	ldr.w	r9, [sp, #20]
   10c36:	b.n	1056e <_dtoa_r+0x396>
   10c38:	cmp.w	sl, #0
   10c3c:	bne.w	10652 <_dtoa_r+0x47a>
   10c40:	ubfx	r3, fp, #0, #20
   10c44:	cmp	r3, #0
   10c46:	bne.w	10ec6 <_dtoa_r+0xcee>
   10c4a:	bic.w	r7, fp, #2147483648	; 0x80000000
   10c4e:	lsrs	r7, r7, #20
   10c50:	lsls	r7, r7, #20
   10c52:	cbz	r7, 10c60 <_dtoa_r+0xa88>
   10c54:	ldr	r3, [sp, #28]
   10c56:	adds	r3, #1
   10c58:	str	r3, [sp, #28]
   10c5a:	add.w	r8, r8, #1
   10c5e:	movs	r7, #1
   10c60:	ldr	r3, [sp, #48]	; 0x30
   10c62:	movs	r0, #1
   10c64:	cmp	r3, #0
   10c66:	beq.w	10666 <_dtoa_r+0x48e>
   10c6a:	b.n	10654 <_dtoa_r+0x47c>
   10c6c:	mov	r0, sl
   10c6e:	bl	ab90 <__aeabi_i2d>
   10c72:	mov	r2, r6
   10c74:	mov	r3, r7
   10c76:	bl	ac5c <__aeabi_dmul>
   10c7a:	movs	r2, #0
   10c7c:	ldr	r3, [pc, #764]	; (10f7c <_dtoa_r+0xda4>)
   10c7e:	bl	a8f8 <__adddf3>
   10c82:	mov	r4, r0
   10c84:	sub.w	r5, r1, #54525952	; 0x3400000
   10c88:	mov	r0, r6
   10c8a:	mov	r1, r7
   10c8c:	movs	r2, #0
   10c8e:	ldr	r3, [pc, #752]	; (10f80 <_dtoa_r+0xda8>)
   10c90:	bl	a8f4 <__aeabi_dsub>
   10c94:	mov	r2, r4
   10c96:	mov	r3, r5
   10c98:	mov	r6, r0
   10c9a:	mov	r7, r1
   10c9c:	bl	b17c <__aeabi_dcmpgt>
   10ca0:	cmp	r0, #0
   10ca2:	bne.w	10e02 <_dtoa_r+0xc2a>
   10ca6:	mov	r2, r4
   10ca8:	add.w	r3, r5, #2147483648	; 0x80000000
   10cac:	mov	r0, r6
   10cae:	mov	r1, r7
   10cb0:	bl	b140 <__aeabi_dcmplt>
   10cb4:	cmp	r0, #0
   10cb6:	beq.n	10d4e <_dtoa_r+0xb76>
   10cb8:	movs	r3, #0
   10cba:	str	r3, [sp, #24]
   10cbc:	mov	r6, r3
   10cbe:	b.n	10a3a <_dtoa_r+0x862>
   10cc0:	ldr	r0, [sp, #36]	; 0x24
   10cc2:	b.w	1024a <_dtoa_r+0x72>
   10cc6:	ldr	r3, [sp, #24]
   10cc8:	ldr	r2, [sp, #48]	; 0x30
   10cca:	str	r7, [sp, #24]
   10ccc:	subs	r3, r7, r3
   10cce:	add	r2, r3
   10cd0:	str	r2, [sp, #48]	; 0x30
   10cd2:	movs	r7, #0
   10cd4:	b.n	105b2 <_dtoa_r+0x3da>
   10cd6:	vldr	d7, [sp, #64]	; 0x40
   10cda:	mov.w	sl, #2
   10cde:	vstr	d7, [sp, #72]	; 0x48
   10ce2:	b.n	10864 <_dtoa_r+0x68c>
   10ce4:	mov	r4, r3
   10ce6:	movs	r1, #0
   10ce8:	str.w	r1, [r9, #68]	; 0x44
   10cec:	b.n	10810 <_dtoa_r+0x638>
   10cee:	movs	r4, #1
   10cf0:	str	r4, [sp, #56]	; 0x38
   10cf2:	str	r4, [sp, #32]
   10cf4:	str	r4, [sp, #20]
   10cf6:	b.n	10ce6 <_dtoa_r+0xb0e>
   10cf8:	cmp	r2, #0
   10cfa:	mov	sl, r3
   10cfc:	ble.n	10d22 <_dtoa_r+0xb4a>
   10cfe:	mov	r1, r4
   10d00:	movs	r2, #1
   10d02:	mov	r0, r9
   10d04:	bl	11e98 <__lshift>
   10d08:	ldr	r1, [sp, #24]
   10d0a:	mov	r4, r0
   10d0c:	bl	11f48 <__mcmp>
   10d10:	cmp	r0, #0
   10d12:	ble.w	10fa6 <_dtoa_r+0xdce>
   10d16:	cmp.w	sl, #57	; 0x39
   10d1a:	beq.w	10f30 <_dtoa_r+0xd58>
   10d1e:	add.w	sl, r5, #49	; 0x31
   10d22:	mov	fp, r6
   10d24:	strb.w	sl, [r7]
   10d28:	adds	r5, r7, #1
   10d2a:	mov	r6, r8
   10d2c:	str	r4, [sp, #40]	; 0x28
   10d2e:	b.n	10746 <_dtoa_r+0x56e>
   10d30:	bne.n	10d3c <_dtoa_r+0xb64>
   10d32:	tst.w	sl, #1
   10d36:	beq.n	10d3c <_dtoa_r+0xb64>
   10d38:	b.n	10726 <_dtoa_r+0x54e>
   10d3a:	mov	r5, r2
   10d3c:	ldrb.w	r3, [r5, #-1]
   10d40:	cmp	r3, #48	; 0x30
   10d42:	add.w	r2, r5, #4294967295
   10d46:	beq.n	10d3a <_dtoa_r+0xb62>
   10d48:	b.n	10746 <_dtoa_r+0x56e>
   10d4a:	ldr.w	r8, [sp, #72]	; 0x48
   10d4e:	ldrd	sl, fp, [sp, #64]	; 0x40
   10d52:	b.w	103ec <_dtoa_r+0x214>
   10d56:	ldr	r1, [sp, #36]	; 0x24
   10d58:	movs	r2, #48	; 0x30
   10d5a:	strb	r2, [r1, #0]
   10d5c:	ldr	r2, [sp, #16]
   10d5e:	ldrb.w	r4, [r5, #-1]
   10d62:	adds	r2, #1
   10d64:	str	r2, [sp, #16]
   10d66:	b.n	1056a <_dtoa_r+0x392>
   10d68:	ldr	r3, [sp, #16]
   10d6a:	negs	r4, r3
   10d6c:	cmp	r4, #0
   10d6e:	beq.w	10ed8 <_dtoa_r+0xd00>
   10d72:	ldr	r3, [pc, #528]	; (10f84 <_dtoa_r+0xdac>)
   10d74:	and.w	r2, r4, #15
   10d78:	add.w	r3, r3, r2, lsl #3
   10d7c:	ldrd	r2, r3, [r3]
   10d80:	ldrd	r0, r1, [sp, #64]	; 0x40
   10d84:	bl	ac5c <__aeabi_dmul>
   10d88:	asrs	r4, r4, #4
   10d8a:	mov	r6, r0
   10d8c:	mov	r7, r1
   10d8e:	beq.w	10fbe <_dtoa_r+0xde6>
   10d92:	ldr	r5, [pc, #500]	; (10f88 <_dtoa_r+0xdb0>)
   10d94:	mov.w	sl, #2
   10d98:	lsls	r2, r4, #31
   10d9a:	bpl.n	10db0 <_dtoa_r+0xbd8>
   10d9c:	mov	r0, r6
   10d9e:	mov	r1, r7
   10da0:	ldrd	r2, r3, [r5]
   10da4:	bl	ac5c <__aeabi_dmul>
   10da8:	add.w	sl, sl, #1
   10dac:	mov	r6, r0
   10dae:	mov	r7, r1
   10db0:	asrs	r4, r4, #1
   10db2:	add.w	r5, r5, #8
   10db6:	bne.n	10d98 <_dtoa_r+0xbc0>
   10db8:	b.n	10898 <_dtoa_r+0x6c0>
   10dba:	ldr	r1, [r6, #4]
   10dbc:	mov	r0, r9
   10dbe:	bl	11aa0 <_Balloc>
   10dc2:	ldr	r3, [r6, #16]
   10dc4:	adds	r2, r3, #2
   10dc6:	mov	r5, r0
   10dc8:	lsls	r2, r2, #2
   10dca:	add.w	r1, r6, #12
   10dce:	adds	r0, #12
   10dd0:	bl	81cc <memcpy>
   10dd4:	mov	r1, r5
   10dd6:	movs	r2, #1
   10dd8:	mov	r0, r9
   10dda:	bl	11e98 <__lshift>
   10dde:	mov	r8, r0
   10de0:	b.n	10ac4 <_dtoa_r+0x8ec>
   10de2:	cmp	r3, #57	; 0x39
   10de4:	beq.w	10f30 <_dtoa_r+0xd58>
   10de8:	add.w	sl, r3, #1
   10dec:	mov	fp, r6
   10dee:	strb.w	sl, [r7]
   10df2:	adds	r5, r7, #1
   10df4:	mov	r6, r8
   10df6:	str	r4, [sp, #40]	; 0x28
   10df8:	b.n	10746 <_dtoa_r+0x56e>
   10dfa:	mov	fp, r6
   10dfc:	mov	sl, r3
   10dfe:	mov	r6, r8
   10e00:	b.n	1070e <_dtoa_r+0x536>
   10e02:	movs	r3, #0
   10e04:	str	r3, [sp, #24]
   10e06:	mov	r6, r3
   10e08:	b.n	10c0e <_dtoa_r+0xa36>
   10e0a:	ldr	r3, [sp, #72]	; 0x48
   10e0c:	ldr	r1, [pc, #372]	; (10f84 <_dtoa_r+0xdac>)
   10e0e:	subs	r2, r3, #1
   10e10:	add.w	r1, r1, r2, lsl #3
   10e14:	mov	r3, r5
   10e16:	str	r2, [sp, #92]	; 0x5c
   10e18:	ldrd	r0, r1, [r1]
   10e1c:	mov	r2, r4
   10e1e:	bl	ac5c <__aeabi_dmul>
   10e22:	strd	r0, r1, [sp, #80]	; 0x50
   10e26:	mov	r1, r7
   10e28:	mov	r0, r6
   10e2a:	bl	b1bc <__aeabi_d2iz>
   10e2e:	mov	r4, r0
   10e30:	bl	ab90 <__aeabi_i2d>
   10e34:	mov	r3, r1
   10e36:	mov	r2, r0
   10e38:	mov	r1, r7
   10e3a:	mov	r0, r6
   10e3c:	bl	a8f4 <__aeabi_dsub>
   10e40:	ldr	r3, [sp, #72]	; 0x48
   10e42:	mov	r7, r1
   10e44:	ldr	r1, [sp, #36]	; 0x24
   10e46:	adds	r4, #48	; 0x30
   10e48:	cmp	r3, #1
   10e4a:	mov	r6, r0
   10e4c:	strb	r4, [r1, #0]
   10e4e:	add.w	r5, r1, #1
   10e52:	beq.n	10e96 <_dtoa_r+0xcbe>
   10e54:	ldr	r3, [sp, #72]	; 0x48
   10e56:	ldr	r2, [sp, #36]	; 0x24
   10e58:	add	r3, r2
   10e5a:	mov	sl, r3
   10e5c:	mov	fp, r5
   10e5e:	movs	r2, #0
   10e60:	ldr	r3, [pc, #296]	; (10f8c <_dtoa_r+0xdb4>)
   10e62:	mov	r0, r6
   10e64:	mov	r1, r7
   10e66:	bl	ac5c <__aeabi_dmul>
   10e6a:	mov	r7, r1
   10e6c:	mov	r6, r0
   10e6e:	bl	b1bc <__aeabi_d2iz>
   10e72:	mov	r4, r0
   10e74:	bl	ab90 <__aeabi_i2d>
   10e78:	adds	r4, #48	; 0x30
   10e7a:	mov	r2, r0
   10e7c:	mov	r3, r1
   10e7e:	mov	r0, r6
   10e80:	mov	r1, r7
   10e82:	bl	a8f4 <__aeabi_dsub>
   10e86:	strb.w	r4, [fp], #1
   10e8a:	cmp	sl, fp
   10e8c:	mov	r6, r0
   10e8e:	mov	r7, r1
   10e90:	bne.n	10e5e <_dtoa_r+0xc86>
   10e92:	ldr	r3, [sp, #92]	; 0x5c
   10e94:	add	r5, r3
   10e96:	movs	r2, #0
   10e98:	ldr	r3, [pc, #244]	; (10f90 <_dtoa_r+0xdb8>)
   10e9a:	ldrd	r0, r1, [sp, #80]	; 0x50
   10e9e:	bl	a8f8 <__adddf3>
   10ea2:	mov	r2, r6
   10ea4:	mov	r3, r7
   10ea6:	bl	b140 <__aeabi_dcmplt>
   10eaa:	cmp	r0, #0
   10eac:	beq.n	10f40 <_dtoa_r+0xd68>
   10eae:	ldr	r3, [sp, #88]	; 0x58
   10eb0:	str	r3, [sp, #16]
   10eb2:	ldrb.w	r4, [r5, #-1]
   10eb6:	b.w	10552 <_dtoa_r+0x37a>
   10eba:	ldr	r3, [sp, #28]
   10ebc:	ldr	r2, [sp, #32]
   10ebe:	subs	r5, r3, r2
   10ec0:	movs	r3, #0
   10ec2:	b.w	105be <_dtoa_r+0x3e6>
   10ec6:	movs	r7, #0
   10ec8:	b.n	10c60 <_dtoa_r+0xa88>
   10eca:	ldr	r3, [sp, #96]	; 0x60
   10ecc:	ldr	r7, [sp, #24]
   10ece:	ldr	r5, [sp, #28]
   10ed0:	rsb	r3, r3, #54	; 0x36
   10ed4:	b.w	105be <_dtoa_r+0x3e6>
   10ed8:	ldrd	r6, r7, [sp, #64]	; 0x40
   10edc:	mov.w	sl, #2
   10ee0:	b.n	10898 <_dtoa_r+0x6c0>
   10ee2:	ldr	r3, [sp, #32]
   10ee4:	cmp	r3, #0
   10ee6:	beq.w	10c6c <_dtoa_r+0xa94>
   10eea:	ldr	r3, [sp, #56]	; 0x38
   10eec:	cmp	r3, #0
   10eee:	ble.w	10d4e <_dtoa_r+0xb76>
   10ef2:	movs	r2, #0
   10ef4:	ldr	r3, [pc, #148]	; (10f8c <_dtoa_r+0xdb4>)
   10ef6:	mov	r0, r6
   10ef8:	mov	r1, r7
   10efa:	bl	ac5c <__aeabi_dmul>
   10efe:	mov	r6, r0
   10f00:	mov	r7, r1
   10f02:	add.w	r0, sl, #1
   10f06:	bl	ab90 <__aeabi_i2d>
   10f0a:	mov	r2, r6
   10f0c:	mov	r3, r7
   10f0e:	bl	ac5c <__aeabi_dmul>
   10f12:	movs	r2, #0
   10f14:	ldr	r3, [pc, #100]	; (10f7c <_dtoa_r+0xda4>)
   10f16:	bl	a8f8 <__adddf3>
   10f1a:	ldr	r2, [sp, #16]
   10f1c:	ldr	r3, [sp, #56]	; 0x38
   10f1e:	str	r3, [sp, #72]	; 0x48
   10f20:	subs	r2, #1
   10f22:	mov	r4, r0
   10f24:	sub.w	r5, r1, #54525952	; 0x3400000
   10f28:	str	r2, [sp, #88]	; 0x58
   10f2a:	b.n	108da <_dtoa_r+0x702>
   10f2c:	str	r4, [sp, #40]	; 0x28
   10f2e:	b.n	10a3a <_dtoa_r+0x862>
   10f30:	movs	r2, #57	; 0x39
   10f32:	mov	fp, r6
   10f34:	str	r4, [sp, #40]	; 0x28
   10f36:	mov	r6, r8
   10f38:	strb	r2, [r7, #0]
   10f3a:	adds	r5, r7, #1
   10f3c:	b.w	1072a <_dtoa_r+0x552>
   10f40:	ldrd	r2, r3, [sp, #80]	; 0x50
   10f44:	movs	r0, #0
   10f46:	ldr	r1, [pc, #72]	; (10f90 <_dtoa_r+0xdb8>)
   10f48:	bl	a8f4 <__aeabi_dsub>
   10f4c:	mov	r2, r6
   10f4e:	mov	r3, r7
   10f50:	bl	b17c <__aeabi_dcmpgt>
   10f54:	cbnz	r0, 10f5a <_dtoa_r+0xd82>
   10f56:	b.n	10d4e <_dtoa_r+0xb76>
   10f58:	mov	r5, r2
   10f5a:	ldrb.w	r3, [r5, #-1]
   10f5e:	cmp	r3, #48	; 0x30
   10f60:	add.w	r2, r5, #4294967295
   10f64:	beq.n	10f58 <_dtoa_r+0xd80>
   10f66:	b.n	109dc <_dtoa_r+0x804>
   10f68:	ldr	r3, [sp, #88]	; 0x58
   10f6a:	str	r3, [sp, #16]
   10f6c:	b.w	10552 <_dtoa_r+0x37a>
   10f70:	cmp.w	sl, #0
   10f74:	bne.w	10a70 <_dtoa_r+0x898>
   10f78:	b.n	10c40 <_dtoa_r+0xa68>
   10f7a:	nop
   10f7c:	.word	0x401c0000
   10f80:	.word	0x40140000
   10f84:	.word	0x00013a58
   10f88:	.word	0x00013b20
   10f8c:	.word	0x40240000
   10f90:	.word	0x3fe00000
   10f94:	cmp	r3, #57	; 0x39
   10f96:	mov	fp, sl
   10f98:	mov	sl, r3
   10f9a:	beq.n	10f30 <_dtoa_r+0xd58>
   10f9c:	cmp.w	fp, #0
   10fa0:	bgt.w	10d1e <_dtoa_r+0xb46>
   10fa4:	b.n	10d22 <_dtoa_r+0xb4a>
   10fa6:	bne.w	10d22 <_dtoa_r+0xb4a>
   10faa:	tst.w	sl, #1
   10fae:	beq.w	10d22 <_dtoa_r+0xb4a>
   10fb2:	b.n	10d16 <_dtoa_r+0xb3e>
   10fb4:	ldr	r3, [sp, #0]
   10fb6:	cmp	r3, #2
   10fb8:	bgt.n	11006 <_dtoa_r+0xe2e>
   10fba:	ldr	r3, [sp, #56]	; 0x38
   10fbc:	b.n	10bda <_dtoa_r+0xa02>
   10fbe:	mov.w	sl, #2
   10fc2:	b.n	10898 <_dtoa_r+0x6c0>
   10fc4:	ldr	r3, [sp, #0]
   10fc6:	cmp	r3, #2
   10fc8:	bgt.n	11006 <_dtoa_r+0xe2e>
   10fca:	ldr	r3, [sp, #56]	; 0x38
   10fcc:	b.n	10aaa <_dtoa_r+0x8d2>
   10fce:	movs	r4, #0
   10fd0:	str.w	r4, [r9, #68]	; 0x44
   10fd4:	mov	r1, r4
   10fd6:	mov	r0, r9
   10fd8:	bl	11aa0 <_Balloc>
   10fdc:	mov.w	r3, #4294967295
   10fe0:	str	r3, [sp, #32]
   10fe2:	str	r3, [sp, #56]	; 0x38
   10fe4:	movs	r3, #1
   10fe6:	str	r0, [sp, #36]	; 0x24
   10fe8:	str	r4, [sp, #20]
   10fea:	str.w	r0, [r9, #64]	; 0x40
   10fee:	str	r3, [sp, #44]	; 0x2c
   10ff0:	b.w	103ec <_dtoa_r+0x214>
   10ff4:	beq.w	10688 <_dtoa_r+0x4b0>
   10ff8:	rsb	r0, r0, #60	; 0x3c
   10ffc:	b.w	1067e <_dtoa_r+0x4a6>
   11000:	movs	r6, #1
   11002:	b.w	1037e <_dtoa_r+0x1a6>
   11006:	ldr	r3, [sp, #56]	; 0x38
   11008:	str	r3, [sp, #32]
   1100a:	b.n	10bea <_dtoa_r+0xa12>

0001100c <__libc_fini_array>:
   1100c:	push	{r3, r4, r5, lr}
   1100e:	ldr	r5, [pc, #28]	; (1102c <__libc_fini_array+0x20>)
   11010:	ldr	r4, [pc, #28]	; (11030 <__libc_fini_array+0x24>)
   11012:	subs	r4, r5, r4
   11014:	asrs	r4, r4, #2
   11016:	beq.n	11024 <__libc_fini_array+0x18>
   11018:	subs	r4, #1
   1101a:	ldr.w	r3, [r5, #-4]!
   1101e:	blx	r3
   11020:	cmp	r4, #0
   11022:	bne.n	11018 <__libc_fini_array+0xc>
   11024:	ldmia.w	sp!, {r3, r4, r5, lr}
   11028:	b.w	13bb8 <__init_array_end>
	...

00011034 <_malloc_trim_r>:
   11034:	push	{r3, r4, r5, r6, r7, lr}
   11036:	ldr	r7, [pc, #140]	; (110c4 <_malloc_trim_r+0x90>)
   11038:	mov	r4, r1
   1103a:	mov	r6, r0
   1103c:	bl	c178 <__malloc_lock>
   11040:	ldr	r3, [r7, #8]
   11042:	ldr	r5, [r3, #4]
   11044:	bic.w	r5, r5, #3
   11048:	subs	r1, r5, r4
   1104a:	addw	r1, r1, #4079	; 0xfef
   1104e:	bic.w	r1, r1, #4080	; 0xff0
   11052:	bic.w	r1, r1, #15
   11056:	sub.w	r4, r1, #4096	; 0x1000
   1105a:	cmp.w	r4, #4096	; 0x1000
   1105e:	blt.n	11070 <_malloc_trim_r+0x3c>
   11060:	movs	r1, #0
   11062:	mov	r0, r6
   11064:	bl	c560 <_sbrk_r>
   11068:	ldr	r3, [r7, #8]
   1106a:	add	r3, r5
   1106c:	cmp	r0, r3
   1106e:	beq.n	1107a <_malloc_trim_r+0x46>
   11070:	mov	r0, r6
   11072:	bl	c17c <__malloc_unlock>
   11076:	movs	r0, #0
   11078:	pop	{r3, r4, r5, r6, r7, pc}
   1107a:	negs	r1, r4
   1107c:	mov	r0, r6
   1107e:	bl	c560 <_sbrk_r>
   11082:	adds	r0, #1
   11084:	beq.n	110a2 <_malloc_trim_r+0x6e>
   11086:	ldr	r3, [pc, #64]	; (110c8 <_malloc_trim_r+0x94>)
   11088:	ldr	r2, [r7, #8]
   1108a:	ldr	r1, [r3, #0]
   1108c:	subs	r5, r5, r4
   1108e:	orr.w	r5, r5, #1
   11092:	mov	r0, r6
   11094:	subs	r1, r1, r4
   11096:	str	r5, [r2, #4]
   11098:	str	r1, [r3, #0]
   1109a:	bl	c17c <__malloc_unlock>
   1109e:	movs	r0, #1
   110a0:	pop	{r3, r4, r5, r6, r7, pc}
   110a2:	movs	r1, #0
   110a4:	mov	r0, r6
   110a6:	bl	c560 <_sbrk_r>
   110aa:	ldr	r2, [r7, #8]
   110ac:	subs	r3, r0, r2
   110ae:	cmp	r3, #15
   110b0:	ble.n	11070 <_malloc_trim_r+0x3c>
   110b2:	ldr	r4, [pc, #24]	; (110cc <_malloc_trim_r+0x98>)
   110b4:	ldr	r1, [pc, #16]	; (110c8 <_malloc_trim_r+0x94>)
   110b6:	ldr	r4, [r4, #0]
   110b8:	orr.w	r3, r3, #1
   110bc:	subs	r0, r0, r4
   110be:	str	r3, [r2, #4]
   110c0:	str	r0, [r1, #0]
   110c2:	b.n	11070 <_malloc_trim_r+0x3c>
   110c4:	.word	0x20017570
   110c8:	.word	0x2001ce00
   110cc:	.word	0x2001797c

000110d0 <_free_r>:
   110d0:	cmp	r1, #0
   110d2:	beq.n	11160 <_free_r+0x90>
   110d4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   110d8:	mov	r5, r1
   110da:	mov	r8, r0
   110dc:	bl	c178 <__malloc_lock>
   110e0:	ldr.w	r7, [r5, #-4]
   110e4:	ldr	r1, [pc, #424]	; (11290 <_free_r+0x1c0>)
   110e6:	bic.w	r3, r7, #1
   110ea:	sub.w	r4, r5, #8
   110ee:	adds	r2, r4, r3
   110f0:	ldr	r6, [r1, #8]
   110f2:	ldr	r0, [r2, #4]
   110f4:	cmp	r2, r6
   110f6:	bic.w	r0, r0, #3
   110fa:	beq.n	111c2 <_free_r+0xf2>
   110fc:	lsls	r6, r7, #31
   110fe:	str	r0, [r2, #4]
   11100:	bmi.n	1111a <_free_r+0x4a>
   11102:	ldr.w	r7, [r5, #-8]
   11106:	subs	r4, r4, r7
   11108:	add.w	lr, r1, #8
   1110c:	ldr	r5, [r4, #8]
   1110e:	cmp	r5, lr
   11110:	add	r3, r7
   11112:	beq.n	111f4 <_free_r+0x124>
   11114:	ldr	r7, [r4, #12]
   11116:	str	r7, [r5, #12]
   11118:	str	r5, [r7, #8]
   1111a:	adds	r5, r2, r0
   1111c:	ldr	r5, [r5, #4]
   1111e:	lsls	r5, r5, #31
   11120:	bpl.n	111a8 <_free_r+0xd8>
   11122:	orr.w	r2, r3, #1
   11126:	str	r2, [r4, #4]
   11128:	str	r3, [r4, r3]
   1112a:	cmp.w	r3, #512	; 0x200
   1112e:	bcs.n	11162 <_free_r+0x92>
   11130:	lsrs	r3, r3, #3
   11132:	adds	r2, r3, #1
   11134:	ldr	r5, [r1, #4]
   11136:	ldr.w	r7, [r1, r2, lsl #3]
   1113a:	str	r7, [r4, #8]
   1113c:	movs	r0, #1
   1113e:	asrs	r3, r3, #2
   11140:	lsl.w	r3, r0, r3
   11144:	add.w	r0, r1, r2, lsl #3
   11148:	orrs	r5, r3
   1114a:	subs	r0, #8
   1114c:	str	r0, [r4, #12]
   1114e:	str	r5, [r1, #4]
   11150:	str.w	r4, [r1, r2, lsl #3]
   11154:	str	r4, [r7, #12]
   11156:	mov	r0, r8
   11158:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1115c:	b.w	c17c <__malloc_unlock>
   11160:	bx	lr
   11162:	lsrs	r2, r3, #9
   11164:	cmp	r2, #4
   11166:	bhi.n	11210 <_free_r+0x140>
   11168:	lsrs	r2, r3, #6
   1116a:	add.w	r7, r2, #57	; 0x39
   1116e:	lsls	r7, r7, #1
   11170:	add.w	r5, r2, #56	; 0x38
   11174:	add.w	r0, r1, r7, lsl #2
   11178:	ldr.w	r2, [r1, r7, lsl #2]
   1117c:	ldr	r1, [pc, #272]	; (11290 <_free_r+0x1c0>)
   1117e:	subs	r0, #8
   11180:	cmp	r0, r2
   11182:	beq.n	11220 <_free_r+0x150>
   11184:	ldr	r1, [r2, #4]
   11186:	bic.w	r1, r1, #3
   1118a:	cmp	r3, r1
   1118c:	bcs.n	11194 <_free_r+0xc4>
   1118e:	ldr	r2, [r2, #8]
   11190:	cmp	r0, r2
   11192:	bne.n	11184 <_free_r+0xb4>
   11194:	ldr	r0, [r2, #12]
   11196:	str	r0, [r4, #12]
   11198:	str	r2, [r4, #8]
   1119a:	str	r4, [r0, #8]
   1119c:	str	r4, [r2, #12]
   1119e:	mov	r0, r8
   111a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   111a4:	b.w	c17c <__malloc_unlock>
   111a8:	ldr	r5, [r2, #8]
   111aa:	ldr	r7, [pc, #232]	; (11294 <_free_r+0x1c4>)
   111ac:	cmp	r5, r7
   111ae:	add	r3, r0
   111b0:	beq.n	11232 <_free_r+0x162>
   111b2:	ldr	r0, [r2, #12]
   111b4:	str	r0, [r5, #12]
   111b6:	orr.w	r2, r3, #1
   111ba:	str	r5, [r0, #8]
   111bc:	str	r2, [r4, #4]
   111be:	str	r3, [r4, r3]
   111c0:	b.n	1112a <_free_r+0x5a>
   111c2:	lsls	r7, r7, #31
   111c4:	add	r3, r0
   111c6:	bmi.n	111d8 <_free_r+0x108>
   111c8:	ldr.w	r2, [r5, #-8]
   111cc:	subs	r4, r4, r2
   111ce:	add	r3, r2
   111d0:	ldr	r0, [r4, #8]
   111d2:	ldr	r2, [r4, #12]
   111d4:	str	r2, [r0, #12]
   111d6:	str	r0, [r2, #8]
   111d8:	ldr	r2, [pc, #188]	; (11298 <_free_r+0x1c8>)
   111da:	ldr	r2, [r2, #0]
   111dc:	orr.w	r0, r3, #1
   111e0:	cmp	r3, r2
   111e2:	str	r0, [r4, #4]
   111e4:	str	r4, [r1, #8]
   111e6:	bcc.n	11156 <_free_r+0x86>
   111e8:	ldr	r3, [pc, #176]	; (1129c <_free_r+0x1cc>)
   111ea:	mov	r0, r8
   111ec:	ldr	r1, [r3, #0]
   111ee:	bl	11034 <_malloc_trim_r>
   111f2:	b.n	11156 <_free_r+0x86>
   111f4:	adds	r1, r2, r0
   111f6:	ldr	r1, [r1, #4]
   111f8:	lsls	r1, r1, #31
   111fa:	bmi.n	11286 <_free_r+0x1b6>
   111fc:	ldr	r1, [r2, #8]
   111fe:	ldr	r2, [r2, #12]
   11200:	str	r2, [r1, #12]
   11202:	add	r3, r0
   11204:	orr.w	r0, r3, #1
   11208:	str	r1, [r2, #8]
   1120a:	str	r0, [r4, #4]
   1120c:	str	r3, [r4, r3]
   1120e:	b.n	11156 <_free_r+0x86>
   11210:	cmp	r2, #20
   11212:	bhi.n	11244 <_free_r+0x174>
   11214:	add.w	r7, r2, #92	; 0x5c
   11218:	lsls	r7, r7, #1
   1121a:	add.w	r5, r2, #91	; 0x5b
   1121e:	b.n	11174 <_free_r+0xa4>
   11220:	asrs	r2, r5, #2
   11222:	ldr	r3, [r1, #4]
   11224:	movs	r5, #1
   11226:	lsl.w	r2, r5, r2
   1122a:	orrs	r3, r2
   1122c:	str	r3, [r1, #4]
   1122e:	mov	r2, r0
   11230:	b.n	11196 <_free_r+0xc6>
   11232:	orr.w	r2, r3, #1
   11236:	str	r4, [r1, #20]
   11238:	str	r4, [r1, #16]
   1123a:	str	r5, [r4, #12]
   1123c:	str	r5, [r4, #8]
   1123e:	str	r2, [r4, #4]
   11240:	str	r3, [r4, r3]
   11242:	b.n	11156 <_free_r+0x86>
   11244:	cmp	r2, #84	; 0x54
   11246:	bhi.n	11256 <_free_r+0x186>
   11248:	lsrs	r2, r3, #12
   1124a:	add.w	r7, r2, #111	; 0x6f
   1124e:	lsls	r7, r7, #1
   11250:	add.w	r5, r2, #110	; 0x6e
   11254:	b.n	11174 <_free_r+0xa4>
   11256:	cmp.w	r2, #340	; 0x154
   1125a:	bhi.n	1126a <_free_r+0x19a>
   1125c:	lsrs	r2, r3, #15
   1125e:	add.w	r7, r2, #120	; 0x78
   11262:	lsls	r7, r7, #1
   11264:	add.w	r5, r2, #119	; 0x77
   11268:	b.n	11174 <_free_r+0xa4>
   1126a:	movw	r0, #1364	; 0x554
   1126e:	cmp	r2, r0
   11270:	bhi.n	11280 <_free_r+0x1b0>
   11272:	lsrs	r2, r3, #18
   11274:	add.w	r7, r2, #125	; 0x7d
   11278:	lsls	r7, r7, #1
   1127a:	add.w	r5, r2, #124	; 0x7c
   1127e:	b.n	11174 <_free_r+0xa4>
   11280:	movs	r7, #254	; 0xfe
   11282:	movs	r5, #126	; 0x7e
   11284:	b.n	11174 <_free_r+0xa4>
   11286:	orr.w	r2, r3, #1
   1128a:	str	r2, [r4, #4]
   1128c:	str	r3, [r4, r3]
   1128e:	b.n	11156 <_free_r+0x86>
   11290:	.word	0x20017570
   11294:	.word	0x20017578
   11298:	.word	0x20017978
   1129c:	.word	0x2001cdfc

000112a0 <rshift>:
   112a0:	ldr	r2, [r0, #16]
   112a2:	asrs	r3, r1, #5
   112a4:	cmp	r3, r2
   112a6:	bge.n	11306 <rshift+0x66>
   112a8:	push	{r4, r5, r6, r7, lr}
   112aa:	ands.w	r1, r1, #31
   112ae:	add.w	r6, r0, #20
   112b2:	add.w	r2, r6, r2, lsl #2
   112b6:	add.w	lr, r6, r3, lsl #2
   112ba:	beq.n	11310 <rshift+0x70>
   112bc:	ldr.w	r3, [r6, r3, lsl #2]
   112c0:	add.w	r5, lr, #4
   112c4:	cmp	r2, r5
   112c6:	lsr.w	r4, r3, r1
   112ca:	rsb	ip, r1, #32
   112ce:	bls.n	11344 <rshift+0xa4>
   112d0:	add.w	r7, r0, #16
   112d4:	ldr	r3, [r5, #0]
   112d6:	lsl.w	r3, r3, ip
   112da:	orrs	r3, r4
   112dc:	str.w	r3, [r7, #4]!
   112e0:	ldr.w	r3, [r5], #4
   112e4:	cmp	r2, r5
   112e6:	lsr.w	r4, r3, r1
   112ea:	bhi.n	112d4 <rshift+0x34>
   112ec:	rsb	r2, lr, r2
   112f0:	subs	r2, #5
   112f2:	bic.w	r2, r2, #3
   112f6:	adds	r2, #4
   112f8:	add	r2, r6
   112fa:	str	r4, [r2, #0]
   112fc:	cbz	r4, 11300 <rshift+0x60>
   112fe:	adds	r2, #4
   11300:	subs	r3, r2, r6
   11302:	asrs	r3, r3, #2
   11304:	b.n	11334 <rshift+0x94>
   11306:	movs	r3, #0
   11308:	str	r3, [r0, #16]
   1130a:	movs	r3, #0
   1130c:	str	r3, [r0, #20]
   1130e:	bx	lr
   11310:	cmp	r2, lr
   11312:	bls.n	1133a <rshift+0x9a>
   11314:	add.w	r4, r0, #16
   11318:	mov	r1, lr
   1131a:	ldr.w	r5, [r1], #4
   1131e:	str.w	r5, [r4, #4]!
   11322:	cmp	r2, r1
   11324:	bhi.n	1131a <rshift+0x7a>
   11326:	mvn.w	r3, lr
   1132a:	add	r3, r2
   1132c:	bic.w	r3, r3, #3
   11330:	adds	r3, #4
   11332:	asrs	r3, r3, #2
   11334:	str	r3, [r0, #16]
   11336:	cbz	r3, 1133e <rshift+0x9e>
   11338:	pop	{r4, r5, r6, r7, pc}
   1133a:	movs	r3, #0
   1133c:	str	r3, [r0, #16]
   1133e:	movs	r3, #0
   11340:	str	r3, [r0, #20]
   11342:	pop	{r4, r5, r6, r7, pc}
   11344:	mov	r2, r6
   11346:	b.n	112fa <rshift+0x5a>

00011348 <__gethex>:
   11348:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1134c:	sub	sp, #44	; 0x2c
   1134e:	mov	r9, r1
   11350:	str	r0, [sp, #20]
   11352:	ldr	r0, [sp, #88]	; 0x58
   11354:	str	r2, [sp, #12]
   11356:	str	r3, [sp, #32]
   11358:	bl	11a24 <__localeconv_l>
   1135c:	ldr	r3, [r0, #0]
   1135e:	str	r3, [sp, #8]
   11360:	mov	r0, r3
   11362:	mov	r4, r3
   11364:	bl	c7c0 <strlen>
   11368:	ldr.w	r3, [r9]
   1136c:	str	r0, [sp, #0]
   1136e:	ldrb	r2, [r3, #2]
   11370:	adds	r1, r4, r0
   11372:	cmp	r2, #48	; 0x30
   11374:	ldrb.w	fp, [r1, #-1]
   11378:	bne.w	116ce <__gethex+0x386>
   1137c:	adds	r3, #3
   1137e:	mov.w	r8, #0
   11382:	mov	r4, r3
   11384:	ldrb.w	r2, [r3], #1
   11388:	cmp	r2, #48	; 0x30
   1138a:	add.w	r8, r8, #1
   1138e:	beq.n	11382 <__gethex+0x3a>
   11390:	ldr	r6, [pc, #712]	; (1165c <__gethex+0x314>)
   11392:	ldrb	r3, [r6, r2]
   11394:	cmp	r3, #0
   11396:	beq.w	1157a <__gethex+0x232>
   1139a:	ldrb	r3, [r4, #0]
   1139c:	mov.w	sl, #0
   113a0:	ldrb	r3, [r6, r3]
   113a2:	mov	r5, sl
   113a4:	mov	r7, r4
   113a6:	cbz	r3, 113b2 <__gethex+0x6a>
   113a8:	ldrb.w	r3, [r7, #1]!
   113ac:	ldrb	r3, [r6, r3]
   113ae:	cmp	r3, #0
   113b0:	bne.n	113a8 <__gethex+0x60>
   113b2:	ldr	r2, [sp, #0]
   113b4:	ldr	r1, [sp, #8]
   113b6:	mov	r0, r7
   113b8:	bl	c89c <strncmp>
   113bc:	cmp	r0, #0
   113be:	beq.w	114e6 <__gethex+0x19e>
   113c2:	ldrb	r3, [r7, #0]
   113c4:	cmp	r5, #0
   113c6:	beq.w	116ac <__gethex+0x364>
   113ca:	subs	r5, r5, r7
   113cc:	lsls	r2, r5, #2
   113ce:	str	r2, [sp, #4]
   113d0:	cmp	r3, #80	; 0x50
   113d2:	beq.w	114f8 <__gethex+0x1b0>
   113d6:	cmp	r3, #112	; 0x70
   113d8:	beq.w	114f8 <__gethex+0x1b0>
   113dc:	mov	r5, r7
   113de:	str.w	r7, [r9]
   113e2:	cmp.w	sl, #0
   113e6:	bne.w	11558 <__gethex+0x210>
   113ea:	subs	r3, r5, r4
   113ec:	subs	r3, #1
   113ee:	cmp	r3, #7
   113f0:	mov	r1, sl
   113f2:	ble.n	113fe <__gethex+0xb6>
   113f4:	asrs	r3, r3, #1
   113f6:	cmp	r3, #7
   113f8:	add.w	r1, r1, #1
   113fc:	bgt.n	113f4 <__gethex+0xac>
   113fe:	ldr	r0, [sp, #20]
   11400:	bl	11aa0 <_Balloc>
   11404:	mov	r3, r0
   11406:	adds	r3, #20
   11408:	cmp	r5, r4
   1140a:	str	r0, [sp, #16]
   1140c:	str	r3, [sp, #28]
   1140e:	bls.w	117b8 <__gethex+0x470>
   11412:	mov	r9, r3
   11414:	ldr	r3, [sp, #0]
   11416:	mov.w	r8, #0
   1141a:	rsb	r3, r3, #1
   1141e:	mov	r7, r8
   11420:	str	r3, [sp, #24]
   11422:	b.n	11444 <__gethex+0xfc>
   11424:	cmp	r7, #32
   11426:	beq.w	11568 <__gethex+0x220>
   1142a:	mov	r2, r7
   1142c:	adds	r7, #4
   1142e:	ldrb.w	r3, [r5, #-1]
   11432:	ldrb	r3, [r6, r3]
   11434:	mov	r5, sl
   11436:	and.w	r3, r3, #15
   1143a:	lsls	r3, r2
   1143c:	cmp	r5, r4
   1143e:	orr.w	r8, r8, r3
   11442:	bls.n	11470 <__gethex+0x128>
   11444:	ldrb.w	r3, [r5, #-1]
   11448:	cmp	r3, fp
   1144a:	add.w	sl, r5, #4294967295
   1144e:	bne.n	11424 <__gethex+0xdc>
   11450:	ldr	r3, [sp, #24]
   11452:	add	r3, sl
   11454:	cmp	r3, r4
   11456:	bcc.n	11424 <__gethex+0xdc>
   11458:	mov	r0, r3
   1145a:	ldr	r2, [sp, #0]
   1145c:	ldr	r1, [sp, #8]
   1145e:	str	r3, [sp, #36]	; 0x24
   11460:	bl	c89c <strncmp>
   11464:	ldr	r3, [sp, #36]	; 0x24
   11466:	cmp	r0, #0
   11468:	bne.n	11424 <__gethex+0xdc>
   1146a:	mov	r5, r3
   1146c:	cmp	r5, r4
   1146e:	bhi.n	11444 <__gethex+0xfc>
   11470:	str.w	r8, [r9], #4
   11474:	ldr	r3, [sp, #28]
   11476:	ldr	r2, [sp, #16]
   11478:	rsb	r9, r3, r9
   1147c:	mov.w	r3, r9, asr #2
   11480:	str	r3, [r2, #16]
   11482:	mov	r0, r8
   11484:	mov.w	r9, r3, lsl #5
   11488:	bl	11c18 <__hi0bits>
   1148c:	ldr	r3, [sp, #12]
   1148e:	ldr	r6, [r3, #0]
   11490:	rsb	r0, r0, r9
   11494:	cmp	r0, r6
   11496:	bgt.w	11660 <__gethex+0x318>
   1149a:	blt.w	116b0 <__gethex+0x368>
   1149e:	movs	r7, #0
   114a0:	ldr	r3, [sp, #12]
   114a2:	ldr	r2, [sp, #4]
   114a4:	ldr	r3, [r3, #8]
   114a6:	cmp	r2, r3
   114a8:	bgt.w	115da <__gethex+0x292>
   114ac:	ldr	r0, [sp, #12]
   114ae:	ldr	r1, [sp, #4]
   114b0:	ldr	r3, [r0, #4]
   114b2:	cmp	r1, r3
   114b4:	bge.w	11622 <__gethex+0x2da>
   114b8:	subs	r5, r3, r1
   114ba:	cmp	r6, r5
   114bc:	bgt.w	116de <__gethex+0x396>
   114c0:	ldr	r2, [r0, #12]
   114c2:	cmp	r2, #2
   114c4:	beq.w	117c6 <__gethex+0x47e>
   114c8:	cmp	r2, #3
   114ca:	beq.w	11786 <__gethex+0x43e>
   114ce:	cmp	r2, #1
   114d0:	beq.w	117ce <__gethex+0x486>
   114d4:	ldr	r0, [sp, #20]
   114d6:	ldr	r1, [sp, #16]
   114d8:	bl	11aec <_Bfree>
   114dc:	ldr	r2, [sp, #80]	; 0x50
   114de:	movs	r3, #0
   114e0:	str	r3, [r2, #0]
   114e2:	movs	r0, #80	; 0x50
   114e4:	b.n	11562 <__gethex+0x21a>
   114e6:	cmp	r5, #0
   114e8:	beq.w	1171e <__gethex+0x3d6>
   114ec:	ldrb	r3, [r7, #0]
   114ee:	b.n	113ca <__gethex+0x82>
   114f0:	movs	r3, #0
   114f2:	str	r3, [sp, #4]
   114f4:	mov.w	sl, #1
   114f8:	ldrb	r3, [r7, #1]
   114fa:	cmp	r3, #43	; 0x2b
   114fc:	beq.w	11658 <__gethex+0x310>
   11500:	cmp	r3, #45	; 0x2d
   11502:	beq.n	115f0 <__gethex+0x2a8>
   11504:	adds	r1, r7, #1
   11506:	movs	r5, #0
   11508:	ldrb	r3, [r6, r3]
   1150a:	ldr	r0, [pc, #336]	; (1165c <__gethex+0x314>)
   1150c:	subs	r2, r3, #1
   1150e:	cmp	r2, #24
   11510:	bhi.w	113dc <__gethex+0x94>
   11514:	ldrb	r2, [r1, #1]
   11516:	ldrb	r2, [r0, r2]
   11518:	subs	r0, r2, #1
   1151a:	cmp	r0, #24
   1151c:	sub.w	r3, r3, #16
   11520:	add.w	r1, r1, #1
   11524:	bhi.n	1153e <__gethex+0x1f6>
   11526:	ldrb.w	r0, [r1, #1]!
   1152a:	add.w	r3, r3, r3, lsl #2
   1152e:	add.w	r3, r2, r3, lsl #1
   11532:	ldrb	r2, [r6, r0]
   11534:	subs	r0, r2, #1
   11536:	cmp	r0, #24
   11538:	sub.w	r3, r3, #16
   1153c:	bls.n	11526 <__gethex+0x1de>
   1153e:	cbz	r5, 11542 <__gethex+0x1fa>
   11540:	negs	r3, r3
   11542:	ldr	r2, [sp, #4]
   11544:	mov	r5, r7
   11546:	add	r2, r3
   11548:	mov	r7, r1
   1154a:	str	r2, [sp, #4]
   1154c:	str.w	r7, [r9]
   11550:	cmp.w	sl, #0
   11554:	beq.w	113ea <__gethex+0xa2>
   11558:	cmp.w	r8, #0
   1155c:	ite	eq
   1155e:	moveq	r0, #6
   11560:	movne	r0, #0
   11562:	add	sp, #44	; 0x2c
   11564:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11568:	str.w	r8, [r9]
   1156c:	mov.w	r8, #0
   11570:	add.w	r9, r9, #4
   11574:	mov	r2, r8
   11576:	movs	r7, #4
   11578:	b.n	1142e <__gethex+0xe6>
   1157a:	ldr	r5, [sp, #0]
   1157c:	ldr	r1, [sp, #8]
   1157e:	mov	r2, r5
   11580:	mov	r0, r4
   11582:	bl	c89c <strncmp>
   11586:	cmp	r0, #0
   11588:	beq.n	115f8 <__gethex+0x2b0>
   1158a:	ldrb	r3, [r4, #0]
   1158c:	mov	r7, r4
   1158e:	cmp	r3, #80	; 0x50
   11590:	beq.n	114f0 <__gethex+0x1a8>
   11592:	cmp	r3, #112	; 0x70
   11594:	beq.n	114f0 <__gethex+0x1a8>
   11596:	str.w	r7, [r9]
   1159a:	b.n	11558 <__gethex+0x210>
   1159c:	ldr	r3, [sp, #16]
   1159e:	ldr	r3, [r3, #8]
   115a0:	cmp	r7, r3
   115a2:	bge.w	1180e <__gethex+0x4c6>
   115a6:	mov	r3, r7
   115a8:	ldr	r0, [sp, #16]
   115aa:	add.w	r2, r0, r3, lsl #2
   115ae:	movs	r1, #1
   115b0:	adds	r3, #1
   115b2:	cmp	r4, #2
   115b4:	str	r3, [r0, #16]
   115b6:	str	r1, [r2, #20]
   115b8:	beq.w	117ec <__gethex+0x4a4>
   115bc:	cmp	r7, r3
   115be:	bge.w	11778 <__gethex+0x430>
   115c2:	movs	r1, #1
   115c4:	ldr	r0, [sp, #16]
   115c6:	bl	112a0 <rshift>
   115ca:	ldr	r3, [sp, #12]
   115cc:	ldr	r2, [sp, #4]
   115ce:	ldr	r3, [r3, #8]
   115d0:	adds	r2, #1
   115d2:	cmp	r2, r3
   115d4:	str	r2, [sp, #4]
   115d6:	ble.w	1177e <__gethex+0x436>
   115da:	ldr	r0, [sp, #20]
   115dc:	ldr	r1, [sp, #16]
   115de:	bl	11aec <_Bfree>
   115e2:	ldr	r2, [sp, #80]	; 0x50
   115e4:	movs	r3, #0
   115e6:	movs	r0, #163	; 0xa3
   115e8:	str	r3, [r2, #0]
   115ea:	add	sp, #44	; 0x2c
   115ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115f0:	movs	r5, #1
   115f2:	ldrb	r3, [r7, #2]
   115f4:	adds	r1, r7, #2
   115f6:	b.n	11508 <__gethex+0x1c0>
   115f8:	ldrb	r2, [r4, r5]
   115fa:	ldrb	r3, [r6, r2]
   115fc:	adds	r7, r4, r5
   115fe:	cmp	r3, #0
   11600:	beq.n	116d6 <__gethex+0x38e>
   11602:	cmp	r2, #48	; 0x30
   11604:	mov	r4, r7
   11606:	bne.n	11612 <__gethex+0x2ca>
   11608:	ldrb.w	r3, [r4, #1]!
   1160c:	cmp	r3, #48	; 0x30
   1160e:	beq.n	11608 <__gethex+0x2c0>
   11610:	ldrb	r3, [r6, r3]
   11612:	clz	sl, r3
   11616:	mov	r5, r7
   11618:	mov.w	sl, sl, lsr #5
   1161c:	mov.w	r8, #1
   11620:	b.n	113a4 <__gethex+0x5c>
   11622:	movs	r4, #1
   11624:	cbz	r7, 11640 <__gethex+0x2f8>
   11626:	ldr	r3, [sp, #12]
   11628:	ldr	r3, [r3, #12]
   1162a:	cmp	r3, #2
   1162c:	beq.w	1173a <__gethex+0x3f2>
   11630:	cmp	r3, #3
   11632:	beq.w	11742 <__gethex+0x3fa>
   11636:	cmp	r3, #1
   11638:	beq.w	117a6 <__gethex+0x45e>
   1163c:	orr.w	r4, r4, #16
   11640:	ldr	r3, [sp, #80]	; 0x50
   11642:	mov	r2, r3
   11644:	ldr	r3, [sp, #16]
   11646:	str	r3, [r2, #0]
   11648:	ldr	r3, [sp, #32]
   1164a:	mov	r2, r3
   1164c:	ldr	r3, [sp, #4]
   1164e:	str	r3, [r2, #0]
   11650:	mov	r0, r4
   11652:	add	sp, #44	; 0x2c
   11654:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11658:	movs	r5, #0
   1165a:	b.n	115f2 <__gethex+0x2aa>
   1165c:	.word	0x00013954
   11660:	subs	r4, r0, r6
   11662:	mov	r1, r4
   11664:	ldr	r0, [sp, #16]
   11666:	bl	12328 <__any_on>
   1166a:	cmp	r0, #0
   1166c:	beq.n	116da <__gethex+0x392>
   1166e:	subs	r2, r4, #1
   11670:	asrs	r1, r2, #5
   11672:	ldr	r0, [sp, #28]
   11674:	and.w	r3, r2, #31
   11678:	ldr.w	r1, [r0, r1, lsl #2]
   1167c:	movs	r7, #1
   1167e:	lsl.w	r3, r7, r3
   11682:	tst	r3, r1
   11684:	beq.n	1169c <__gethex+0x354>
   11686:	cmp	r2, r7
   11688:	ble.w	117c2 <__gethex+0x47a>
   1168c:	subs	r1, r4, #2
   1168e:	ldr	r0, [sp, #16]
   11690:	bl	12328 <__any_on>
   11694:	cmp	r0, #0
   11696:	beq.w	117c2 <__gethex+0x47a>
   1169a:	movs	r7, #3
   1169c:	ldr	r3, [sp, #4]
   1169e:	ldr	r0, [sp, #16]
   116a0:	add	r3, r4
   116a2:	mov	r1, r4
   116a4:	str	r3, [sp, #4]
   116a6:	bl	112a0 <rshift>
   116aa:	b.n	114a0 <__gethex+0x158>
   116ac:	str	r5, [sp, #4]
   116ae:	b.n	113d0 <__gethex+0x88>
   116b0:	subs	r4, r6, r0
   116b2:	ldr	r1, [sp, #16]
   116b4:	ldr	r0, [sp, #20]
   116b6:	mov	r2, r4
   116b8:	bl	11e98 <__lshift>
   116bc:	ldr	r3, [sp, #4]
   116be:	str	r0, [sp, #16]
   116c0:	subs	r3, r3, r4
   116c2:	str	r3, [sp, #4]
   116c4:	mov	r3, r0
   116c6:	adds	r3, #20
   116c8:	str	r3, [sp, #28]
   116ca:	movs	r7, #0
   116cc:	b.n	114a0 <__gethex+0x158>
   116ce:	adds	r4, r3, #2
   116d0:	mov.w	r8, #0
   116d4:	b.n	11390 <__gethex+0x48>
   116d6:	mov	r3, r2
   116d8:	b.n	1158e <__gethex+0x246>
   116da:	mov	r7, r0
   116dc:	b.n	1169c <__gethex+0x354>
   116de:	subs	r4, r5, #1
   116e0:	cmp	r7, #0
   116e2:	bne.n	11782 <__gethex+0x43a>
   116e4:	cbz	r4, 116f0 <__gethex+0x3a8>
   116e6:	mov	r1, r4
   116e8:	ldr	r0, [sp, #16]
   116ea:	bl	12328 <__any_on>
   116ee:	mov	r7, r0
   116f0:	asrs	r3, r4, #5
   116f2:	ldr	r2, [sp, #28]
   116f4:	ldr	r0, [sp, #16]
   116f6:	ldr.w	r2, [r2, r3, lsl #2]
   116fa:	and.w	r4, r4, #31
   116fe:	movs	r3, #1
   11700:	lsl.w	r4, r3, r4
   11704:	tst	r4, r2
   11706:	mov	r1, r5
   11708:	it	ne
   1170a:	orrne.w	r7, r7, #2
   1170e:	bl	112a0 <rshift>
   11712:	ldr	r3, [sp, #12]
   11714:	ldr	r3, [r3, #4]
   11716:	str	r3, [sp, #4]
   11718:	subs	r6, r6, r5
   1171a:	movs	r4, #2
   1171c:	b.n	11624 <__gethex+0x2dc>
   1171e:	ldr	r1, [sp, #0]
   11720:	ldrb	r3, [r7, r1]
   11722:	ldrb	r2, [r6, r3]
   11724:	adds	r5, r7, r1
   11726:	mov	r7, r5
   11728:	cmp	r2, #0
   1172a:	beq.w	113ca <__gethex+0x82>
   1172e:	ldrb.w	r3, [r7, #1]!
   11732:	ldrb	r2, [r6, r3]
   11734:	cmp	r2, #0
   11736:	bne.n	1172e <__gethex+0x3e6>
   11738:	b.n	113ca <__gethex+0x82>
   1173a:	ldr	r3, [sp, #84]	; 0x54
   1173c:	rsb	r3, r3, #1
   11740:	str	r3, [sp, #84]	; 0x54
   11742:	ldr	r3, [sp, #84]	; 0x54
   11744:	cmp	r3, #0
   11746:	beq.w	1163c <__gethex+0x2f4>
   1174a:	ldr	r3, [sp, #16]
   1174c:	ldr	r5, [sp, #28]
   1174e:	ldr	r7, [r3, #16]
   11750:	mov.w	r8, r7, lsl #2
   11754:	add.w	r0, r5, r8
   11758:	mov	r3, r5
   1175a:	movs	r1, #0
   1175c:	b.n	11768 <__gethex+0x420>
   1175e:	str.w	r1, [r3], #4
   11762:	cmp	r0, r3
   11764:	bls.w	1159c <__gethex+0x254>
   11768:	ldr	r2, [r3, #0]
   1176a:	cmp.w	r2, #4294967295
   1176e:	beq.n	1175e <__gethex+0x416>
   11770:	adds	r2, #1
   11772:	cmp	r4, #2
   11774:	str	r2, [r3, #0]
   11776:	beq.n	117ec <__gethex+0x4a4>
   11778:	ands.w	r6, r6, #31
   1177c:	bne.n	117fa <__gethex+0x4b2>
   1177e:	movs	r4, #33	; 0x21
   11780:	b.n	11640 <__gethex+0x2f8>
   11782:	movs	r7, #1
   11784:	b.n	116f0 <__gethex+0x3a8>
   11786:	ldr	r2, [sp, #84]	; 0x54
   11788:	cmp	r2, #0
   1178a:	beq.w	114d4 <__gethex+0x18c>
   1178e:	ldr	r1, [sp, #32]
   11790:	str	r3, [r1, #0]
   11792:	ldr	r3, [sp, #28]
   11794:	ldr	r1, [sp, #16]
   11796:	movs	r2, #1
   11798:	str	r2, [r1, #16]
   1179a:	str	r2, [r3, #0]
   1179c:	ldr	r3, [sp, #80]	; 0x50
   1179e:	mov	r2, r3
   117a0:	movs	r0, #98	; 0x62
   117a2:	str	r1, [r2, #0]
   117a4:	b.n	11562 <__gethex+0x21a>
   117a6:	lsls	r2, r7, #30
   117a8:	bpl.w	1163c <__gethex+0x2f4>
   117ac:	ldr	r3, [sp, #28]
   117ae:	ldr	r3, [r3, #0]
   117b0:	orrs	r3, r7
   117b2:	lsls	r3, r3, #31
   117b4:	bmi.n	1174a <__gethex+0x402>
   117b6:	b.n	1163c <__gethex+0x2f4>
   117b8:	ldr.w	r9, [sp, #28]
   117bc:	mov.w	r8, #0
   117c0:	b.n	11470 <__gethex+0x128>
   117c2:	movs	r7, #2
   117c4:	b.n	1169c <__gethex+0x354>
   117c6:	ldr	r2, [sp, #84]	; 0x54
   117c8:	cmp	r2, #0
   117ca:	beq.n	1178e <__gethex+0x446>
   117cc:	b.n	114d4 <__gethex+0x18c>
   117ce:	cmp	r6, r5
   117d0:	bne.w	114d4 <__gethex+0x18c>
   117d4:	cmp	r6, #1
   117d6:	ble.n	1178e <__gethex+0x446>
   117d8:	subs	r1, r6, #1
   117da:	ldr	r0, [sp, #16]
   117dc:	bl	12328 <__any_on>
   117e0:	cmp	r0, #0
   117e2:	beq.w	114d4 <__gethex+0x18c>
   117e6:	ldr	r3, [sp, #12]
   117e8:	ldr	r3, [r3, #4]
   117ea:	b.n	1178e <__gethex+0x446>
   117ec:	ldr	r3, [sp, #12]
   117ee:	ldr	r3, [r3, #0]
   117f0:	subs	r3, #1
   117f2:	cmp	r6, r3
   117f4:	beq.n	11840 <__gethex+0x4f8>
   117f6:	movs	r4, #34	; 0x22
   117f8:	b.n	11640 <__gethex+0x2f8>
   117fa:	add	r5, r8
   117fc:	rsb	r6, r6, #32
   11800:	ldr.w	r0, [r5, #-4]
   11804:	bl	11c18 <__hi0bits>
   11808:	cmp	r0, r6
   1180a:	bge.n	1177e <__gethex+0x436>
   1180c:	b.n	115c2 <__gethex+0x27a>
   1180e:	ldr	r3, [sp, #16]
   11810:	ldr.w	r9, [sp, #20]
   11814:	ldr	r1, [r3, #4]
   11816:	mov	r0, r9
   11818:	adds	r1, #1
   1181a:	bl	11aa0 <_Balloc>
   1181e:	ldr	r1, [sp, #16]
   11820:	ldr	r3, [r1, #16]
   11822:	adds	r2, r3, #2
   11824:	mov	r5, r0
   11826:	lsls	r2, r2, #2
   11828:	adds	r1, #12
   1182a:	adds	r0, #12
   1182c:	bl	81cc <memcpy>
   11830:	ldr	r1, [sp, #16]
   11832:	mov	r0, r9
   11834:	bl	11aec <_Bfree>
   11838:	str	r5, [sp, #16]
   1183a:	ldr	r3, [r5, #16]
   1183c:	adds	r5, #20
   1183e:	b.n	115a8 <__gethex+0x260>
   11840:	asrs	r3, r6, #5
   11842:	and.w	r6, r6, #31
   11846:	ldr.w	r2, [r5, r3, lsl #2]
   1184a:	movs	r3, #1
   1184c:	lsls	r3, r6
   1184e:	tst	r3, r2
   11850:	ite	ne
   11852:	movne	r4, #33	; 0x21
   11854:	moveq	r4, #34	; 0x22
   11856:	b.n	11640 <__gethex+0x2f8>

00011858 <__match>:
   11858:	push	{r4, r5}
   1185a:	ldr	r4, [r0, #0]
   1185c:	b.n	11870 <__match+0x18>
   1185e:	ldrb.w	r3, [r4, #1]!
   11862:	sub.w	r5, r3, #65	; 0x41
   11866:	cmp	r5, #25
   11868:	it	ls
   1186a:	addls	r3, #32
   1186c:	cmp	r3, r2
   1186e:	bne.n	11882 <__match+0x2a>
   11870:	ldrb.w	r2, [r1], #1
   11874:	cmp	r2, #0
   11876:	bne.n	1185e <__match+0x6>
   11878:	adds	r4, #1
   1187a:	str	r4, [r0, #0]
   1187c:	movs	r0, #1
   1187e:	pop	{r4, r5}
   11880:	bx	lr
   11882:	movs	r0, #0
   11884:	pop	{r4, r5}
   11886:	bx	lr

00011888 <__hexnan>:
   11888:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1188c:	ldr	r3, [r1, #0]
   1188e:	ldr.w	r9, [pc, #372]	; 11a04 <__hexnan+0x17c>
   11892:	sub	sp, #20
   11894:	asrs	r1, r3, #5
   11896:	add.w	r1, r2, r1, lsl #2
   1189a:	ands.w	r3, r3, #31
   1189e:	str	r1, [sp, #4]
   118a0:	itt	ne
   118a2:	addne	r1, #4
   118a4:	strne	r1, [sp, #4]
   118a6:	ldr	r4, [sp, #4]
   118a8:	str	r0, [sp, #8]
   118aa:	str	r3, [sp, #12]
   118ac:	movs	r3, #0
   118ae:	mov	r1, r3
   118b0:	str.w	r3, [r4, #-4]
   118b4:	mov	sl, r3
   118b6:	mov	lr, r3
   118b8:	ldr	r3, [sp, #8]
   118ba:	sub.w	ip, r4, #4
   118be:	ldr	r5, [r3, #0]
   118c0:	mov	r8, ip
   118c2:	mov	r0, ip
   118c4:	ldrb.w	r3, [r5, #1]!
   118c8:	cbz	r3, 11914 <__hexnan+0x8c>
   118ca:	ldrb.w	r4, [r9, r3]
   118ce:	cmp	r4, #0
   118d0:	bne.n	1195a <__hexnan+0xd2>
   118d2:	cmp	r3, #32
   118d4:	bhi.n	11992 <__hexnan+0x10a>
   118d6:	cmp	lr, sl
   118d8:	ble.n	118c4 <__hexnan+0x3c>
   118da:	cmp	r0, r8
   118dc:	bcs.n	11906 <__hexnan+0x7e>
   118de:	cmp	r1, #7
   118e0:	bgt.n	11906 <__hexnan+0x7e>
   118e2:	rsb	r1, r1, #8
   118e6:	lsls	r1, r1, #2
   118e8:	ldr	r6, [r0, #0]
   118ea:	rsb	fp, r1, #32
   118ee:	mov	r3, r0
   118f0:	ldr	r7, [r3, #4]
   118f2:	lsl.w	r4, r7, fp
   118f6:	orrs	r4, r6
   118f8:	lsr.w	r6, r7, r1
   118fc:	str	r4, [r3, #0]
   118fe:	str.w	r6, [r3, #4]!
   11902:	cmp	r8, r3
   11904:	bhi.n	118f0 <__hexnan+0x68>
   11906:	cmp	r0, r2
   11908:	bhi.n	11980 <__hexnan+0xf8>
   1190a:	ldrb.w	r3, [r5, #1]!
   1190e:	movs	r1, #8
   11910:	cmp	r3, #0
   11912:	bne.n	118ca <__hexnan+0x42>
   11914:	cmp.w	lr, #0
   11918:	beq.n	11996 <__hexnan+0x10e>
   1191a:	cmp	r0, r8
   1191c:	bcs.n	11922 <__hexnan+0x9a>
   1191e:	cmp	r1, #7
   11920:	ble.n	119dc <__hexnan+0x154>
   11922:	cmp	r0, r2
   11924:	bls.n	1199e <__hexnan+0x116>
   11926:	mov	r3, r2
   11928:	ldr.w	r1, [r0], #4
   1192c:	str.w	r1, [r3], #4
   11930:	cmp	ip, r0
   11932:	bcs.n	11928 <__hexnan+0xa0>
   11934:	movs	r1, #0
   11936:	str.w	r1, [r3], #4
   1193a:	cmp	ip, r3
   1193c:	bcs.n	11936 <__hexnan+0xae>
   1193e:	ldr	r3, [sp, #4]
   11940:	ldr.w	r3, [r3, #-4]
   11944:	cbnz	r3, 11952 <__hexnan+0xca>
   11946:	cmp	r2, ip
   11948:	beq.n	119c0 <__hexnan+0x138>
   1194a:	ldr.w	r3, [ip, #-4]!
   1194e:	cmp	r3, #0
   11950:	beq.n	11946 <__hexnan+0xbe>
   11952:	movs	r0, #5
   11954:	add	sp, #20
   11956:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1195a:	adds	r1, #1
   1195c:	cmp	r1, #8
   1195e:	add.w	lr, lr, #1
   11962:	ble.n	11972 <__hexnan+0xea>
   11964:	cmp	r0, r2
   11966:	bls.n	118c4 <__hexnan+0x3c>
   11968:	movs	r3, #0
   1196a:	str.w	r3, [r0, #-4]
   1196e:	movs	r1, #1
   11970:	subs	r0, #4
   11972:	ldr	r3, [r0, #0]
   11974:	and.w	r4, r4, #15
   11978:	orr.w	r4, r4, r3, lsl #4
   1197c:	str	r4, [r0, #0]
   1197e:	b.n	118c4 <__hexnan+0x3c>
   11980:	movs	r3, #0
   11982:	sub.w	r8, r0, #4
   11986:	str.w	r3, [r0, #-4]
   1198a:	mov	sl, lr
   1198c:	mov	r0, r8
   1198e:	mov	r1, r3
   11990:	b.n	118c4 <__hexnan+0x3c>
   11992:	cmp	r3, #41	; 0x29
   11994:	beq.n	119ce <__hexnan+0x146>
   11996:	movs	r0, #4
   11998:	add	sp, #20
   1199a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1199e:	ldr	r3, [sp, #12]
   119a0:	cmp	r3, #0
   119a2:	beq.n	1193e <__hexnan+0xb6>
   119a4:	ldr	r4, [sp, #4]
   119a6:	ldr	r3, [sp, #12]
   119a8:	ldr.w	r1, [r4, #-4]
   119ac:	rsb	r3, r3, #32
   119b0:	mov.w	r0, #4294967295
   119b4:	lsr.w	r3, r0, r3
   119b8:	ands	r3, r1
   119ba:	str.w	r3, [r4, #-4]
   119be:	b.n	11944 <__hexnan+0xbc>
   119c0:	movs	r3, #1
   119c2:	movs	r0, #5
   119c4:	str.w	r3, [ip]
   119c8:	add	sp, #20
   119ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119ce:	ldr	r3, [sp, #8]
   119d0:	adds	r5, #1
   119d2:	str	r5, [r3, #0]
   119d4:	cmp.w	lr, #0
   119d8:	bne.n	1191a <__hexnan+0x92>
   119da:	b.n	11996 <__hexnan+0x10e>
   119dc:	rsb	r3, r1, #8
   119e0:	lsls	r3, r3, #2
   119e2:	ldr	r5, [r0, #0]
   119e4:	rsb	r7, r3, #32
   119e8:	mov	r1, r0
   119ea:	ldr	r6, [r1, #4]
   119ec:	lsl.w	r4, r6, r7
   119f0:	orrs	r4, r5
   119f2:	lsr.w	r5, r6, r3
   119f6:	str	r4, [r1, #0]
   119f8:	str.w	r5, [r1, #4]!
   119fc:	cmp	r8, r1
   119fe:	bhi.n	119ea <__hexnan+0x162>
   11a00:	b.n	11922 <__hexnan+0x9a>
   11a02:	nop
   11a04:	.word	0x00013954

00011a08 <iswspace>:
   11a08:	cmp	r0, #255	; 0xff
   11a0a:	bls.n	11a10 <iswspace+0x8>
   11a0c:	movs	r0, #0
   11a0e:	bx	lr
   11a10:	push	{r4, lr}
   11a12:	mov	r4, r0
   11a14:	bl	b934 <__locale_ctype_ptr>
   11a18:	add	r0, r4
   11a1a:	ldrb	r0, [r0, #1]
   11a1c:	and.w	r0, r0, #8
   11a20:	uxtb	r0, r0
   11a22:	pop	{r4, pc}

00011a24 <__localeconv_l>:
   11a24:	adds	r0, #240	; 0xf0
   11a26:	bx	lr

00011a28 <_localeconv_r>:
   11a28:	ldr	r2, [pc, #16]	; (11a3c <_localeconv_r+0x14>)
   11a2a:	ldr	r3, [pc, #20]	; (11a40 <_localeconv_r+0x18>)
   11a2c:	ldr	r2, [r2, #0]
   11a2e:	ldr	r0, [r2, #52]	; 0x34
   11a30:	cmp	r0, #0
   11a32:	it	eq
   11a34:	moveq	r0, r3
   11a36:	adds	r0, #240	; 0xf0
   11a38:	bx	lr
   11a3a:	nop
   11a3c:	.word	0x20017400
   11a40:	.word	0x20017404

00011a44 <_mbrtowc_r>:
   11a44:	push	{r4, r5, r6, r7, lr}
   11a46:	sub	sp, #12
   11a48:	mov	r7, r0
   11a4a:	ldr	r5, [sp, #32]
   11a4c:	cbz	r2, 11a74 <_mbrtowc_r+0x30>
   11a4e:	ldr	r4, [pc, #68]	; (11a94 <_mbrtowc_r+0x50>)
   11a50:	ldr	r6, [pc, #68]	; (11a98 <_mbrtowc_r+0x54>)
   11a52:	ldr	r4, [r4, #0]
   11a54:	ldr	r4, [r4, #52]	; 0x34
   11a56:	str	r5, [sp, #0]
   11a58:	cmp	r4, #0
   11a5a:	it	eq
   11a5c:	moveq	r4, r6
   11a5e:	ldr.w	r4, [r4, #228]	; 0xe4
   11a62:	blx	r4
   11a64:	adds	r3, r0, #1
   11a66:	bne.n	11a70 <_mbrtowc_r+0x2c>
   11a68:	movs	r2, #0
   11a6a:	movs	r3, #138	; 0x8a
   11a6c:	str	r2, [r5, #0]
   11a6e:	str	r3, [r7, #0]
   11a70:	add	sp, #12
   11a72:	pop	{r4, r5, r6, r7, pc}
   11a74:	ldr	r3, [pc, #28]	; (11a94 <_mbrtowc_r+0x50>)
   11a76:	ldr	r1, [pc, #32]	; (11a98 <_mbrtowc_r+0x54>)
   11a78:	ldr	r3, [r3, #0]
   11a7a:	ldr	r3, [r3, #52]	; 0x34
   11a7c:	str	r5, [sp, #0]
   11a7e:	cmp	r3, #0
   11a80:	it	eq
   11a82:	moveq	r3, r1
   11a84:	mov	r4, r2
   11a86:	mov	r1, r4
   11a88:	ldr	r2, [pc, #16]	; (11a9c <_mbrtowc_r+0x58>)
   11a8a:	ldr.w	r4, [r3, #228]	; 0xe4
   11a8e:	movs	r3, #1
   11a90:	blx	r4
   11a92:	b.n	11a64 <_mbrtowc_r+0x20>
   11a94:	.word	0x20017400
   11a98:	.word	0x20017404
   11a9c:	.word	0x00012f88

00011aa0 <_Balloc>:
   11aa0:	ldr	r3, [r0, #76]	; 0x4c
   11aa2:	push	{r4, r5, r6, lr}
   11aa4:	mov	r5, r0
   11aa6:	mov	r4, r1
   11aa8:	cbz	r3, 11abe <_Balloc+0x1e>
   11aaa:	ldr.w	r0, [r3, r4, lsl #2]
   11aae:	cbz	r0, 11ad2 <_Balloc+0x32>
   11ab0:	ldr	r2, [r0, #0]
   11ab2:	str.w	r2, [r3, r4, lsl #2]
   11ab6:	movs	r3, #0
   11ab8:	str	r3, [r0, #16]
   11aba:	str	r3, [r0, #12]
   11abc:	pop	{r4, r5, r6, pc}
   11abe:	movs	r2, #33	; 0x21
   11ac0:	movs	r1, #4
   11ac2:	bl	12c84 <_calloc_r>
   11ac6:	str	r0, [r5, #76]	; 0x4c
   11ac8:	mov	r3, r0
   11aca:	cmp	r0, #0
   11acc:	bne.n	11aaa <_Balloc+0xa>
   11ace:	movs	r0, #0
   11ad0:	pop	{r4, r5, r6, pc}
   11ad2:	movs	r1, #1
   11ad4:	lsl.w	r6, r1, r4
   11ad8:	adds	r2, r6, #5
   11ada:	mov	r0, r5
   11adc:	lsls	r2, r2, #2
   11ade:	bl	12c84 <_calloc_r>
   11ae2:	cmp	r0, #0
   11ae4:	beq.n	11ace <_Balloc+0x2e>
   11ae6:	str	r4, [r0, #4]
   11ae8:	str	r6, [r0, #8]
   11aea:	b.n	11ab6 <_Balloc+0x16>

00011aec <_Bfree>:
   11aec:	cbz	r1, 11afc <_Bfree+0x10>
   11aee:	ldr	r3, [r0, #76]	; 0x4c
   11af0:	ldr	r2, [r1, #4]
   11af2:	ldr.w	r0, [r3, r2, lsl #2]
   11af6:	str	r0, [r1, #0]
   11af8:	str.w	r1, [r3, r2, lsl #2]
   11afc:	bx	lr
   11afe:	nop

00011b00 <__multadd>:
   11b00:	push	{r4, r5, r6, r7, lr}
   11b02:	ldr	r4, [r1, #16]
   11b04:	sub	sp, #12
   11b06:	mov	r5, r1
   11b08:	mov	r6, r0
   11b0a:	add.w	lr, r1, #20
   11b0e:	movs	r7, #0
   11b10:	ldr.w	r0, [lr]
   11b14:	uxth	r1, r0
   11b16:	mla	r1, r2, r1, r3
   11b1a:	lsrs	r3, r1, #16
   11b1c:	lsrs	r0, r0, #16
   11b1e:	mla	r3, r2, r0, r3
   11b22:	uxth	r1, r1
   11b24:	adds	r7, #1
   11b26:	add.w	r1, r1, r3, lsl #16
   11b2a:	cmp	r4, r7
   11b2c:	str.w	r1, [lr], #4
   11b30:	mov.w	r3, r3, lsr #16
   11b34:	bgt.n	11b10 <__multadd+0x10>
   11b36:	cbz	r3, 11b48 <__multadd+0x48>
   11b38:	ldr	r2, [r5, #8]
   11b3a:	cmp	r4, r2
   11b3c:	bge.n	11b4e <__multadd+0x4e>
   11b3e:	add.w	r2, r5, r4, lsl #2
   11b42:	adds	r4, #1
   11b44:	str	r3, [r2, #20]
   11b46:	str	r4, [r5, #16]
   11b48:	mov	r0, r5
   11b4a:	add	sp, #12
   11b4c:	pop	{r4, r5, r6, r7, pc}
   11b4e:	ldr	r1, [r5, #4]
   11b50:	str	r3, [sp, #4]
   11b52:	adds	r1, #1
   11b54:	mov	r0, r6
   11b56:	bl	11aa0 <_Balloc>
   11b5a:	ldr	r2, [r5, #16]
   11b5c:	adds	r2, #2
   11b5e:	add.w	r1, r5, #12
   11b62:	mov	r7, r0
   11b64:	lsls	r2, r2, #2
   11b66:	adds	r0, #12
   11b68:	bl	81cc <memcpy>
   11b6c:	ldr	r2, [r6, #76]	; 0x4c
   11b6e:	ldr	r1, [r5, #4]
   11b70:	ldr	r3, [sp, #4]
   11b72:	ldr.w	r0, [r2, r1, lsl #2]
   11b76:	str	r0, [r5, #0]
   11b78:	str.w	r5, [r2, r1, lsl #2]
   11b7c:	mov	r5, r7
   11b7e:	b.n	11b3e <__multadd+0x3e>

00011b80 <__s2b>:
   11b80:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11b84:	ldr	r4, [pc, #140]	; (11c14 <__s2b+0x94>)
   11b86:	ldr	r5, [sp, #32]
   11b88:	mov	r7, r3
   11b8a:	adds	r3, #8
   11b8c:	smull	r4, lr, r4, r3
   11b90:	asrs	r3, r3, #31
   11b92:	rsb	lr, r3, lr, asr #1
   11b96:	cmp.w	lr, #1
   11b9a:	mov	r6, r0
   11b9c:	mov	r4, r1
   11b9e:	mov	r8, r2
   11ba0:	ble.n	11c0e <__s2b+0x8e>
   11ba2:	movs	r3, #1
   11ba4:	movs	r1, #0
   11ba6:	lsls	r3, r3, #1
   11ba8:	cmp	lr, r3
   11baa:	add.w	r1, r1, #1
   11bae:	bgt.n	11ba6 <__s2b+0x26>
   11bb0:	mov	r0, r6
   11bb2:	bl	11aa0 <_Balloc>
   11bb6:	movs	r3, #1
   11bb8:	cmp.w	r8, #9
   11bbc:	str	r5, [r0, #20]
   11bbe:	str	r3, [r0, #16]
   11bc0:	ble.n	11c06 <__s2b+0x86>
   11bc2:	add.w	r9, r4, #9
   11bc6:	mov	r5, r9
   11bc8:	add	r4, r8
   11bca:	ldrb.w	r3, [r5], #1
   11bce:	mov	r1, r0
   11bd0:	subs	r3, #48	; 0x30
   11bd2:	movs	r2, #10
   11bd4:	mov	r0, r6
   11bd6:	bl	11b00 <__multadd>
   11bda:	cmp	r5, r4
   11bdc:	bne.n	11bca <__s2b+0x4a>
   11bde:	add.w	r4, r9, r8
   11be2:	subs	r4, #8
   11be4:	cmp	r7, r8
   11be6:	ble.n	11c02 <__s2b+0x82>
   11be8:	rsb	r7, r8, r7
   11bec:	add	r7, r4
   11bee:	ldrb.w	r3, [r4], #1
   11bf2:	mov	r1, r0
   11bf4:	subs	r3, #48	; 0x30
   11bf6:	movs	r2, #10
   11bf8:	mov	r0, r6
   11bfa:	bl	11b00 <__multadd>
   11bfe:	cmp	r7, r4
   11c00:	bne.n	11bee <__s2b+0x6e>
   11c02:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11c06:	adds	r4, #10
   11c08:	mov.w	r8, #9
   11c0c:	b.n	11be4 <__s2b+0x64>
   11c0e:	movs	r1, #0
   11c10:	b.n	11bb0 <__s2b+0x30>
   11c12:	nop
   11c14:	.word	0x38e38e39

00011c18 <__hi0bits>:
   11c18:	lsrs	r3, r0, #16
   11c1a:	lsls	r3, r3, #16
   11c1c:	cbnz	r3, 11c4c <__hi0bits+0x34>
   11c1e:	lsls	r0, r0, #16
   11c20:	movs	r3, #16
   11c22:	tst.w	r0, #4278190080	; 0xff000000
   11c26:	itt	eq
   11c28:	lsleq	r0, r0, #8
   11c2a:	addeq	r3, #8
   11c2c:	tst.w	r0, #4026531840	; 0xf0000000
   11c30:	itt	eq
   11c32:	lsleq	r0, r0, #4
   11c34:	addeq	r3, #4
   11c36:	tst.w	r0, #3221225472	; 0xc0000000
   11c3a:	itt	eq
   11c3c:	lsleq	r0, r0, #2
   11c3e:	addeq	r3, #2
   11c40:	cmp	r0, #0
   11c42:	blt.n	11c54 <__hi0bits+0x3c>
   11c44:	lsls	r2, r0, #1
   11c46:	bmi.n	11c50 <__hi0bits+0x38>
   11c48:	movs	r0, #32
   11c4a:	bx	lr
   11c4c:	movs	r3, #0
   11c4e:	b.n	11c22 <__hi0bits+0xa>
   11c50:	adds	r0, r3, #1
   11c52:	bx	lr
   11c54:	mov	r0, r3
   11c56:	bx	lr

00011c58 <__lo0bits>:
   11c58:	ldr	r3, [r0, #0]
   11c5a:	ands.w	r2, r3, #7
   11c5e:	beq.n	11c70 <__lo0bits+0x18>
   11c60:	lsls	r1, r3, #31
   11c62:	bmi.n	11ca6 <__lo0bits+0x4e>
   11c64:	lsls	r2, r3, #30
   11c66:	bmi.n	11caa <__lo0bits+0x52>
   11c68:	lsrs	r3, r3, #2
   11c6a:	str	r3, [r0, #0]
   11c6c:	movs	r0, #2
   11c6e:	bx	lr
   11c70:	uxth	r1, r3
   11c72:	cbnz	r1, 11c78 <__lo0bits+0x20>
   11c74:	lsrs	r3, r3, #16
   11c76:	movs	r2, #16
   11c78:	tst.w	r3, #255	; 0xff
   11c7c:	itt	eq
   11c7e:	lsreq	r3, r3, #8
   11c80:	addeq	r2, #8
   11c82:	lsls	r1, r3, #28
   11c84:	itt	eq
   11c86:	lsreq	r3, r3, #4
   11c88:	addeq	r2, #4
   11c8a:	lsls	r1, r3, #30
   11c8c:	itt	eq
   11c8e:	lsreq	r3, r3, #2
   11c90:	addeq	r2, #2
   11c92:	lsls	r1, r3, #31
   11c94:	bmi.n	11ca0 <__lo0bits+0x48>
   11c96:	lsrs	r3, r3, #1
   11c98:	bne.n	11c9e <__lo0bits+0x46>
   11c9a:	movs	r0, #32
   11c9c:	bx	lr
   11c9e:	adds	r2, #1
   11ca0:	str	r3, [r0, #0]
   11ca2:	mov	r0, r2
   11ca4:	bx	lr
   11ca6:	movs	r0, #0
   11ca8:	bx	lr
   11caa:	lsrs	r3, r3, #1
   11cac:	str	r3, [r0, #0]
   11cae:	movs	r0, #1
   11cb0:	bx	lr
   11cb2:	nop

00011cb4 <__i2b>:
   11cb4:	push	{r4, lr}
   11cb6:	mov	r4, r1
   11cb8:	movs	r1, #1
   11cba:	bl	11aa0 <_Balloc>
   11cbe:	movs	r2, #1
   11cc0:	str	r4, [r0, #20]
   11cc2:	str	r2, [r0, #16]
   11cc4:	pop	{r4, pc}
   11cc6:	nop

00011cc8 <__multiply>:
   11cc8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ccc:	ldr	r5, [r1, #16]
   11cce:	ldr	r7, [r2, #16]
   11cd0:	cmp	r5, r7
   11cd2:	sub	sp, #12
   11cd4:	mov	r4, r1
   11cd6:	mov	r6, r2
   11cd8:	bge.n	11ce4 <__multiply+0x1c>
   11cda:	mov	r2, r5
   11cdc:	mov	r4, r6
   11cde:	mov	r5, r7
   11ce0:	mov	r6, r1
   11ce2:	mov	r7, r2
   11ce4:	ldr	r3, [r4, #8]
   11ce6:	ldr	r1, [r4, #4]
   11ce8:	add.w	r8, r5, r7
   11cec:	cmp	r8, r3
   11cee:	it	gt
   11cf0:	addgt	r1, #1
   11cf2:	bl	11aa0 <_Balloc>
   11cf6:	add.w	ip, r0, #20
   11cfa:	add.w	r9, ip, r8, lsl #2
   11cfe:	cmp	ip, r9
   11d00:	str	r0, [sp, #0]
   11d02:	bcs.n	11d10 <__multiply+0x48>
   11d04:	mov	r3, ip
   11d06:	movs	r1, #0
   11d08:	str.w	r1, [r3], #4
   11d0c:	cmp	r9, r3
   11d0e:	bhi.n	11d08 <__multiply+0x40>
   11d10:	add.w	r2, r6, #20
   11d14:	add.w	sl, r2, r7, lsl #2
   11d18:	add.w	r3, r4, #20
   11d1c:	cmp	r2, sl
   11d1e:	add.w	lr, r3, r5, lsl #2
   11d22:	bcs.n	11dce <__multiply+0x106>
   11d24:	str.w	r9, [sp, #4]
   11d28:	mov	r9, r3
   11d2a:	ldr.w	r3, [r2], #4
   11d2e:	uxth.w	fp, r3
   11d32:	cmp.w	fp, #0
   11d36:	beq.n	11d7a <__multiply+0xb2>
   11d38:	movs	r0, #0
   11d3a:	mov	r7, r9
   11d3c:	mov	r6, ip
   11d3e:	mov	r5, r0
   11d40:	b.n	11d44 <__multiply+0x7c>
   11d42:	mov	r6, r3
   11d44:	ldr.w	r4, [r7], #4
   11d48:	ldr	r0, [r6, #0]
   11d4a:	uxth	r1, r4
   11d4c:	uxth	r3, r0
   11d4e:	mla	r1, fp, r1, r3
   11d52:	lsrs	r4, r4, #16
   11d54:	lsrs	r0, r0, #16
   11d56:	adds	r3, r1, r5
   11d58:	mla	r0, fp, r4, r0
   11d5c:	add.w	r0, r0, r3, lsr #16
   11d60:	uxth	r1, r3
   11d62:	mov	r3, r6
   11d64:	orr.w	r1, r1, r0, lsl #16
   11d68:	cmp	lr, r7
   11d6a:	mov.w	r5, r0, lsr #16
   11d6e:	str.w	r1, [r3], #4
   11d72:	bhi.n	11d42 <__multiply+0x7a>
   11d74:	str	r5, [r6, #4]
   11d76:	ldr.w	r3, [r2, #-4]
   11d7a:	movs.w	fp, r3, lsr #16
   11d7e:	beq.n	11dc2 <__multiply+0xfa>
   11d80:	ldr.w	r3, [ip]
   11d84:	mov	r7, ip
   11d86:	mov	r0, r3
   11d88:	mov	r5, r9
   11d8a:	movs	r1, #0
   11d8c:	b.n	11d90 <__multiply+0xc8>
   11d8e:	mov	r7, r6
   11d90:	ldrh	r4, [r5, #0]
   11d92:	lsrs	r0, r0, #16
   11d94:	mla	r0, fp, r4, r0
   11d98:	add	r1, r0
   11d9a:	uxth	r4, r3
   11d9c:	mov	r6, r7
   11d9e:	orr.w	r3, r4, r1, lsl #16
   11da2:	str.w	r3, [r6], #4
   11da6:	ldr	r0, [r7, #4]
   11da8:	ldr.w	r4, [r5], #4
   11dac:	uxth	r3, r0
   11dae:	lsrs	r4, r4, #16
   11db0:	mla	r4, fp, r4, r3
   11db4:	add.w	r3, r4, r1, lsr #16
   11db8:	cmp	lr, r5
   11dba:	mov.w	r1, r3, lsr #16
   11dbe:	bhi.n	11d8e <__multiply+0xc6>
   11dc0:	str	r3, [r7, #4]
   11dc2:	cmp	sl, r2
   11dc4:	add.w	ip, ip, #4
   11dc8:	bhi.n	11d2a <__multiply+0x62>
   11dca:	ldr.w	r9, [sp, #4]
   11dce:	cmp.w	r8, #0
   11dd2:	ble.n	11dec <__multiply+0x124>
   11dd4:	ldr.w	r3, [r9, #-4]
   11dd8:	sub.w	r9, r9, #4
   11ddc:	cbz	r3, 11de6 <__multiply+0x11e>
   11dde:	b.n	11dec <__multiply+0x124>
   11de0:	ldr.w	r3, [r9, #-4]!
   11de4:	cbnz	r3, 11dec <__multiply+0x124>
   11de6:	subs.w	r8, r8, #1
   11dea:	bne.n	11de0 <__multiply+0x118>
   11dec:	ldr	r0, [sp, #0]
   11dee:	str.w	r8, [r0, #16]
   11df2:	add	sp, #12
   11df4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011df8 <__pow5mult>:
   11df8:	ands.w	r3, r2, #3
   11dfc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e00:	mov	r4, r2
   11e02:	mov	r7, r0
   11e04:	bne.n	11e64 <__pow5mult+0x6c>
   11e06:	mov	r6, r1
   11e08:	asrs	r4, r4, #2
   11e0a:	beq.n	11e46 <__pow5mult+0x4e>
   11e0c:	ldr	r5, [r7, #72]	; 0x48
   11e0e:	cbz	r5, 11e76 <__pow5mult+0x7e>
   11e10:	lsls	r3, r4, #31
   11e12:	mov.w	r8, #0
   11e16:	bmi.n	11e26 <__pow5mult+0x2e>
   11e18:	asrs	r4, r4, #1
   11e1a:	beq.n	11e46 <__pow5mult+0x4e>
   11e1c:	ldr	r0, [r5, #0]
   11e1e:	cbz	r0, 11e4c <__pow5mult+0x54>
   11e20:	mov	r5, r0
   11e22:	lsls	r3, r4, #31
   11e24:	bpl.n	11e18 <__pow5mult+0x20>
   11e26:	mov	r2, r5
   11e28:	mov	r1, r6
   11e2a:	mov	r0, r7
   11e2c:	bl	11cc8 <__multiply>
   11e30:	cbz	r6, 11e60 <__pow5mult+0x68>
   11e32:	ldr	r2, [r6, #4]
   11e34:	ldr	r3, [r7, #76]	; 0x4c
   11e36:	asrs	r4, r4, #1
   11e38:	ldr.w	r1, [r3, r2, lsl #2]
   11e3c:	str	r1, [r6, #0]
   11e3e:	str.w	r6, [r3, r2, lsl #2]
   11e42:	mov	r6, r0
   11e44:	bne.n	11e1c <__pow5mult+0x24>
   11e46:	mov	r0, r6
   11e48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11e4c:	mov	r2, r5
   11e4e:	mov	r1, r5
   11e50:	mov	r0, r7
   11e52:	bl	11cc8 <__multiply>
   11e56:	str	r0, [r5, #0]
   11e58:	str.w	r8, [r0]
   11e5c:	mov	r5, r0
   11e5e:	b.n	11e22 <__pow5mult+0x2a>
   11e60:	mov	r6, r0
   11e62:	b.n	11e18 <__pow5mult+0x20>
   11e64:	subs	r2, r3, #1
   11e66:	ldr	r5, [pc, #44]	; (11e94 <__pow5mult+0x9c>)
   11e68:	movs	r3, #0
   11e6a:	ldr.w	r2, [r5, r2, lsl #2]
   11e6e:	bl	11b00 <__multadd>
   11e72:	mov	r6, r0
   11e74:	b.n	11e08 <__pow5mult+0x10>
   11e76:	movs	r1, #1
   11e78:	mov	r0, r7
   11e7a:	bl	11aa0 <_Balloc>
   11e7e:	movw	r1, #625	; 0x271
   11e82:	movs	r2, #1
   11e84:	movs	r3, #0
   11e86:	str	r1, [r0, #20]
   11e88:	str	r2, [r0, #16]
   11e8a:	mov	r5, r0
   11e8c:	str	r0, [r7, #72]	; 0x48
   11e8e:	str	r3, [r0, #0]
   11e90:	b.n	11e10 <__pow5mult+0x18>
   11e92:	nop
   11e94:	.word	0x00013b48

00011e98 <__lshift>:
   11e98:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11e9c:	mov	r9, r2
   11e9e:	ldr	r2, [r1, #16]
   11ea0:	ldr	r3, [r1, #8]
   11ea2:	mov.w	r4, r9, asr #5
   11ea6:	add.w	r8, r4, r2
   11eaa:	add.w	r5, r8, #1
   11eae:	cmp	r5, r3
   11eb0:	mov	r6, r1
   11eb2:	mov	sl, r0
   11eb4:	ldr	r1, [r1, #4]
   11eb6:	ble.n	11ec2 <__lshift+0x2a>
   11eb8:	lsls	r3, r3, #1
   11eba:	cmp	r5, r3
   11ebc:	add.w	r1, r1, #1
   11ec0:	bgt.n	11eb8 <__lshift+0x20>
   11ec2:	mov	r0, sl
   11ec4:	bl	11aa0 <_Balloc>
   11ec8:	cmp	r4, #0
   11eca:	add.w	r2, r0, #20
   11ece:	ble.n	11f42 <__lshift+0xaa>
   11ed0:	add.w	r3, r2, r4, lsl #2
   11ed4:	movs	r1, #0
   11ed6:	str.w	r1, [r2], #4
   11eda:	cmp	r3, r2
   11edc:	bne.n	11ed6 <__lshift+0x3e>
   11ede:	ldr	r4, [r6, #16]
   11ee0:	add.w	r1, r6, #20
   11ee4:	ands.w	r9, r9, #31
   11ee8:	add.w	lr, r1, r4, lsl #2
   11eec:	beq.n	11f32 <__lshift+0x9a>
   11eee:	rsb	r2, r9, #32
   11ef2:	movs	r4, #0
   11ef4:	ldr	r7, [r1, #0]
   11ef6:	lsl.w	ip, r7, r9
   11efa:	orr.w	r4, ip, r4
   11efe:	mov	ip, r3
   11f00:	str.w	r4, [r3], #4
   11f04:	ldr.w	r4, [r1], #4
   11f08:	cmp	lr, r1
   11f0a:	lsr.w	r4, r4, r2
   11f0e:	bhi.n	11ef4 <__lshift+0x5c>
   11f10:	str.w	r4, [ip, #4]
   11f14:	cbz	r4, 11f1a <__lshift+0x82>
   11f16:	add.w	r5, r8, #2
   11f1a:	ldr.w	r3, [sl, #76]	; 0x4c
   11f1e:	ldr	r2, [r6, #4]
   11f20:	subs	r5, #1
   11f22:	ldr.w	r1, [r3, r2, lsl #2]
   11f26:	str	r5, [r0, #16]
   11f28:	str	r1, [r6, #0]
   11f2a:	str.w	r6, [r3, r2, lsl #2]
   11f2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11f32:	subs	r3, #4
   11f34:	ldr.w	r2, [r1], #4
   11f38:	str.w	r2, [r3, #4]!
   11f3c:	cmp	lr, r1
   11f3e:	bhi.n	11f34 <__lshift+0x9c>
   11f40:	b.n	11f1a <__lshift+0x82>
   11f42:	mov	r3, r2
   11f44:	b.n	11ede <__lshift+0x46>
   11f46:	nop

00011f48 <__mcmp>:
   11f48:	ldr	r2, [r0, #16]
   11f4a:	ldr	r3, [r1, #16]
   11f4c:	subs	r2, r2, r3
   11f4e:	bne.n	11f78 <__mcmp+0x30>
   11f50:	lsls	r3, r3, #2
   11f52:	adds	r0, #20
   11f54:	adds	r1, #20
   11f56:	add	r1, r3
   11f58:	push	{r4}
   11f5a:	add	r3, r0
   11f5c:	b.n	11f62 <__mcmp+0x1a>
   11f5e:	cmp	r0, r3
   11f60:	bcs.n	11f7c <__mcmp+0x34>
   11f62:	ldr.w	r4, [r3, #-4]!
   11f66:	ldr.w	r2, [r1, #-4]!
   11f6a:	cmp	r4, r2
   11f6c:	beq.n	11f5e <__mcmp+0x16>
   11f6e:	bcc.n	11f84 <__mcmp+0x3c>
   11f70:	movs	r0, #1
   11f72:	ldr.w	r4, [sp], #4
   11f76:	bx	lr
   11f78:	mov	r0, r2
   11f7a:	bx	lr
   11f7c:	movs	r0, #0
   11f7e:	ldr.w	r4, [sp], #4
   11f82:	bx	lr
   11f84:	mov.w	r0, #4294967295
   11f88:	b.n	11f72 <__mcmp+0x2a>
   11f8a:	nop

00011f8c <__mdiff>:
   11f8c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11f90:	ldr	r3, [r1, #16]
   11f92:	mov	r7, r1
   11f94:	ldr	r1, [r2, #16]
   11f96:	subs	r3, r3, r1
   11f98:	cmp	r3, #0
   11f9a:	mov	r8, r2
   11f9c:	bne.n	11fce <__mdiff+0x42>
   11f9e:	lsls	r1, r1, #2
   11fa0:	add.w	r2, r7, #20
   11fa4:	add.w	r5, r8, #20
   11fa8:	adds	r3, r2, r1
   11faa:	add	r1, r5
   11fac:	b.n	11fb2 <__mdiff+0x26>
   11fae:	cmp	r2, r3
   11fb0:	bcs.n	12070 <__mdiff+0xe4>
   11fb2:	ldr.w	r6, [r3, #-4]!
   11fb6:	ldr.w	r4, [r1, #-4]!
   11fba:	cmp	r6, r4
   11fbc:	beq.n	11fae <__mdiff+0x22>
   11fbe:	bcs.n	12082 <__mdiff+0xf6>
   11fc0:	mov	r3, r7
   11fc2:	mov	r4, r2
   11fc4:	mov	r7, r8
   11fc6:	mov.w	r9, #1
   11fca:	mov	r8, r3
   11fcc:	b.n	11fdc <__mdiff+0x50>
   11fce:	blt.n	1208c <__mdiff+0x100>
   11fd0:	add.w	r5, r7, #20
   11fd4:	add.w	r4, r2, #20
   11fd8:	mov.w	r9, #0
   11fdc:	ldr	r1, [r7, #4]
   11fde:	bl	11aa0 <_Balloc>
   11fe2:	ldr.w	r3, [r8, #16]
   11fe6:	ldr	r6, [r7, #16]
   11fe8:	str.w	r9, [r0, #12]
   11fec:	add.w	ip, r4, r3, lsl #2
   11ff0:	mov	lr, r4
   11ff2:	add.w	r7, r5, r6, lsl #2
   11ff6:	add.w	r4, r0, #20
   11ffa:	movs	r3, #0
   11ffc:	ldr.w	r1, [lr], #4
   12000:	ldr.w	r8, [r5], #4
   12004:	uxth	r2, r1
   12006:	uxtah	r3, r3, r8
   1200a:	lsrs	r1, r1, #16
   1200c:	subs	r2, r3, r2
   1200e:	rsb	r3, r1, r8, lsr #16
   12012:	add.w	r3, r3, r2, asr #16
   12016:	uxth	r2, r2
   12018:	orr.w	r2, r2, r3, lsl #16
   1201c:	cmp	ip, lr
   1201e:	str.w	r2, [r4], #4
   12022:	mov.w	r3, r3, asr #16
   12026:	bhi.n	11ffc <__mdiff+0x70>
   12028:	cmp	r7, r5
   1202a:	bls.n	1205c <__mdiff+0xd0>
   1202c:	mov	ip, r4
   1202e:	mov	r1, r5
   12030:	ldr.w	lr, [r1], #4
   12034:	uxtah	r2, r3, lr
   12038:	asrs	r3, r2, #16
   1203a:	add.w	r3, r3, lr, lsr #16
   1203e:	uxth	r2, r2
   12040:	orr.w	r2, r2, r3, lsl #16
   12044:	cmp	r7, r1
   12046:	str.w	r2, [ip], #4
   1204a:	mov.w	r3, r3, asr #16
   1204e:	bhi.n	12030 <__mdiff+0xa4>
   12050:	mvns	r5, r5
   12052:	add	r5, r7
   12054:	bic.w	r5, r5, #3
   12058:	adds	r5, #4
   1205a:	add	r4, r5
   1205c:	subs	r4, #4
   1205e:	cbnz	r2, 1206a <__mdiff+0xde>
   12060:	ldr.w	r3, [r4, #-4]!
   12064:	subs	r6, #1
   12066:	cmp	r3, #0
   12068:	beq.n	12060 <__mdiff+0xd4>
   1206a:	str	r6, [r0, #16]
   1206c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12070:	movs	r1, #0
   12072:	bl	11aa0 <_Balloc>
   12076:	movs	r2, #1
   12078:	movs	r3, #0
   1207a:	str	r2, [r0, #16]
   1207c:	str	r3, [r0, #20]
   1207e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12082:	mov	r4, r5
   12084:	mov.w	r9, #0
   12088:	mov	r5, r2
   1208a:	b.n	11fdc <__mdiff+0x50>
   1208c:	mov	r3, r7
   1208e:	add.w	r4, r7, #20
   12092:	add.w	r5, r8, #20
   12096:	mov	r7, r8
   12098:	mov.w	r9, #1
   1209c:	mov	r8, r3
   1209e:	b.n	11fdc <__mdiff+0x50>

000120a0 <__ulp>:
   120a0:	ldr	r3, [pc, #76]	; (120f0 <__ulp+0x50>)
   120a2:	vmov	r2, s1
   120a6:	ands	r2, r3
   120a8:	sub.w	r3, r2, #54525952	; 0x3400000
   120ac:	cmp	r3, #0
   120ae:	ble.n	120ba <__ulp+0x1a>
   120b0:	movs	r0, #0
   120b2:	mov	r1, r3
   120b4:	vmov	d0, r0, r1
   120b8:	bx	lr
   120ba:	negs	r3, r3
   120bc:	asrs	r3, r3, #20
   120be:	cmp	r3, #19
   120c0:	ble.n	120de <__ulp+0x3e>
   120c2:	subs	r3, #20
   120c4:	cmp	r3, #30
   120c6:	ittte	le
   120c8:	rsble	r3, r3, #31
   120cc:	movle	r2, #1
   120ce:	lslle.w	r3, r2, r3
   120d2:	movgt	r3, #1
   120d4:	movs	r1, #0
   120d6:	mov	r0, r3
   120d8:	vmov	d0, r0, r1
   120dc:	bx	lr
   120de:	mov.w	r2, #524288	; 0x80000
   120e2:	movs	r0, #0
   120e4:	asr.w	r1, r2, r3
   120e8:	vmov	d0, r0, r1
   120ec:	bx	lr
   120ee:	nop
   120f0:	.word	0x7ff00000

000120f4 <__b2d>:
   120f4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   120f8:	ldr	r6, [r0, #16]
   120fa:	add.w	r8, r0, #20
   120fe:	add.w	r6, r8, r6, lsl #2
   12102:	ldr.w	r7, [r6, #-4]
   12106:	mov	r0, r7
   12108:	bl	11c18 <__hi0bits>
   1210c:	rsb	r3, r0, #32
   12110:	cmp	r0, #10
   12112:	str	r3, [r1, #0]
   12114:	sub.w	r3, r6, #4
   12118:	bgt.n	1214c <__b2d+0x58>
   1211a:	cmp	r8, r3
   1211c:	rsb	r2, r0, #11
   12120:	it	cc
   12122:	ldrcc.w	r3, [r6, #-8]
   12126:	lsr.w	r1, r7, r2
   1212a:	add.w	r0, r0, #21
   1212e:	orr.w	r5, r1, #1069547520	; 0x3fc00000
   12132:	ite	cc
   12134:	lsrcc	r3, r2
   12136:	movcs	r3, #0
   12138:	lsl.w	r0, r7, r0
   1213c:	orr.w	r5, r5, #3145728	; 0x300000
   12140:	orr.w	r4, r0, r3
   12144:	vmov	d0, r4, r5
   12148:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1214c:	cmp	r8, r3
   1214e:	bcs.n	12192 <__b2d+0x9e>
   12150:	subs.w	r3, r0, #11
   12154:	ldr.w	r2, [r6, #-8]
   12158:	beq.n	12198 <__b2d+0xa4>
   1215a:	lsl.w	r0, r7, r3
   1215e:	orr.w	r7, r0, #1069547520	; 0x3fc00000
   12162:	rsb	lr, r3, #32
   12166:	sub.w	r1, r6, #8
   1216a:	orr.w	r7, r7, #3145728	; 0x300000
   1216e:	lsr.w	r0, r2, lr
   12172:	cmp	r8, r1
   12174:	orr.w	r5, r7, r0
   12178:	bcs.n	121bc <__b2d+0xc8>
   1217a:	ldr.w	r1, [r6, #-12]
   1217e:	lsl.w	r0, r2, r3
   12182:	lsr.w	r3, r1, lr
   12186:	orrs	r0, r3
   12188:	mov	r4, r0
   1218a:	vmov	d0, r4, r5
   1218e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12192:	subs	r0, #11
   12194:	bne.n	121aa <__b2d+0xb6>
   12196:	mov	r2, r0
   12198:	orr.w	r5, r7, #1069547520	; 0x3fc00000
   1219c:	orr.w	r5, r5, #3145728	; 0x300000
   121a0:	mov	r4, r2
   121a2:	vmov	d0, r4, r5
   121a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   121aa:	lsl.w	r0, r7, r0
   121ae:	orr.w	r5, r0, #1069547520	; 0x3fc00000
   121b2:	movs	r0, #0
   121b4:	orr.w	r5, r5, #3145728	; 0x300000
   121b8:	mov	r4, r0
   121ba:	b.n	1218a <__b2d+0x96>
   121bc:	lsl.w	r0, r2, r3
   121c0:	mov	r4, r0
   121c2:	b.n	1218a <__b2d+0x96>

000121c4 <__d2b>:
   121c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   121c8:	vmov	r6, r7, d0
   121cc:	sub	sp, #12
   121ce:	mov	r8, r1
   121d0:	movs	r1, #1
   121d2:	mov	r4, r7
   121d4:	ubfx	r5, r7, #20, #11
   121d8:	mov	r7, r2
   121da:	bl	11aa0 <_Balloc>
   121de:	ubfx	r4, r4, #0, #20
   121e2:	mov	r9, r0
   121e4:	cbz	r5, 121ea <__d2b+0x26>
   121e6:	orr.w	r4, r4, #1048576	; 0x100000
   121ea:	str	r4, [sp, #4]
   121ec:	cbz	r6, 12236 <__d2b+0x72>
   121ee:	add	r0, sp, #8
   121f0:	str.w	r6, [r0, #-8]!
   121f4:	bl	11c58 <__lo0bits>
   121f8:	cmp	r0, #0
   121fa:	bne.n	12266 <__d2b+0xa2>
   121fc:	ldmia.w	sp, {r2, r3}
   12200:	str.w	r2, [r9, #20]
   12204:	cmp	r3, #0
   12206:	ite	eq
   12208:	moveq	r1, #1
   1220a:	movne	r1, #2
   1220c:	str.w	r3, [r9, #24]
   12210:	str.w	r1, [r9, #16]
   12214:	cbnz	r5, 1224e <__d2b+0x8a>
   12216:	add.w	r3, r9, r1, lsl #2
   1221a:	subw	r0, r0, #1074	; 0x432
   1221e:	str.w	r0, [r8]
   12222:	ldr	r0, [r3, #16]
   12224:	bl	11c18 <__hi0bits>
   12228:	rsb	r0, r0, r1, lsl #5
   1222c:	str	r0, [r7, #0]
   1222e:	mov	r0, r9
   12230:	add	sp, #12
   12232:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12236:	add	r0, sp, #4
   12238:	bl	11c58 <__lo0bits>
   1223c:	ldr	r3, [sp, #4]
   1223e:	str.w	r3, [r9, #20]
   12242:	movs	r1, #1
   12244:	adds	r0, #32
   12246:	str.w	r1, [r9, #16]
   1224a:	cmp	r5, #0
   1224c:	beq.n	12216 <__d2b+0x52>
   1224e:	subw	r5, r5, #1075	; 0x433
   12252:	add	r5, r0
   12254:	rsb	r0, r0, #53	; 0x35
   12258:	str.w	r5, [r8]
   1225c:	str	r0, [r7, #0]
   1225e:	mov	r0, r9
   12260:	add	sp, #12
   12262:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12266:	ldmia.w	sp, {r2, r3}
   1226a:	rsb	r1, r0, #32
   1226e:	lsl.w	r1, r3, r1
   12272:	orrs	r2, r1
   12274:	lsrs	r3, r0
   12276:	str	r3, [sp, #4]
   12278:	str.w	r2, [r9, #20]
   1227c:	b.n	12204 <__d2b+0x40>
   1227e:	nop

00012280 <__ratio>:
   12280:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12284:	sub	sp, #12
   12286:	mov	r8, r1
   12288:	mov	r1, sp
   1228a:	mov	r9, r0
   1228c:	bl	120f4 <__b2d>
   12290:	mov	r0, r8
   12292:	add	r1, sp, #4
   12294:	vmov	r4, r5, d0
   12298:	bl	120f4 <__b2d>
   1229c:	ldmia.w	sp, {r1, r3}
   122a0:	ldr.w	r2, [r9, #16]
   122a4:	ldr.w	r0, [r8, #16]
   122a8:	subs	r1, r1, r3
   122aa:	subs	r0, r2, r0
   122ac:	add.w	r3, r1, r0, lsl #5
   122b0:	cmp	r3, #0
   122b2:	vmov	r6, r7, d0
   122b6:	ble.n	122d4 <__ratio+0x54>
   122b8:	add.w	r1, r5, r3, lsl #20
   122bc:	mov	r5, r1
   122be:	mov	r2, r6
   122c0:	mov	r3, r7
   122c2:	mov	r0, r4
   122c4:	mov	r1, r5
   122c6:	bl	aeb0 <__aeabi_ddiv>
   122ca:	vmov	d0, r0, r1
   122ce:	add	sp, #12
   122d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   122d4:	sub.w	r9, r7, r3, lsl #20
   122d8:	vmov	r6, s0
   122dc:	mov	r7, r9
   122de:	b.n	122be <__ratio+0x3e>

000122e0 <__copybits>:
   122e0:	push	{r4, r5, r6}
   122e2:	ldr	r4, [r2, #16]
   122e4:	add.w	r3, r2, #20
   122e8:	subs	r1, #1
   122ea:	asrs	r6, r1, #5
   122ec:	add.w	r4, r3, r4, lsl #2
   122f0:	adds	r6, #1
   122f2:	cmp	r3, r4
   122f4:	add.w	r6, r0, r6, lsl #2
   122f8:	bcs.n	12314 <__copybits+0x34>
   122fa:	subs	r1, r0, #4
   122fc:	ldr.w	r5, [r3], #4
   12300:	str.w	r5, [r1, #4]!
   12304:	cmp	r4, r3
   12306:	bhi.n	122fc <__copybits+0x1c>
   12308:	subs	r3, r4, r2
   1230a:	subs	r3, #21
   1230c:	bic.w	r3, r3, #3
   12310:	adds	r3, #4
   12312:	add	r0, r3
   12314:	cmp	r6, r0
   12316:	bls.n	12322 <__copybits+0x42>
   12318:	movs	r3, #0
   1231a:	str.w	r3, [r0], #4
   1231e:	cmp	r6, r0
   12320:	bhi.n	1231a <__copybits+0x3a>
   12322:	pop	{r4, r5, r6}
   12324:	bx	lr
   12326:	nop

00012328 <__any_on>:
   12328:	ldr	r3, [r0, #16]
   1232a:	asrs	r2, r1, #5
   1232c:	cmp	r3, r2
   1232e:	push	{r4}
   12330:	add.w	r4, r0, #20
   12334:	bge.n	12358 <__any_on+0x30>
   12336:	add.w	r3, r4, r3, lsl #2
   1233a:	cmp	r4, r3
   1233c:	bcs.n	12382 <__any_on+0x5a>
   1233e:	ldr.w	r0, [r3, #-4]
   12342:	subs	r3, #4
   12344:	cbz	r0, 1234e <__any_on+0x26>
   12346:	b.n	12374 <__any_on+0x4c>
   12348:	ldr.w	r2, [r3, #-4]!
   1234c:	cbnz	r2, 12374 <__any_on+0x4c>
   1234e:	cmp	r4, r3
   12350:	bcc.n	12348 <__any_on+0x20>
   12352:	ldr.w	r4, [sp], #4
   12356:	bx	lr
   12358:	ble.n	1237c <__any_on+0x54>
   1235a:	ands.w	r1, r1, #31
   1235e:	beq.n	1237c <__any_on+0x54>
   12360:	ldr.w	r0, [r4, r2, lsl #2]
   12364:	lsr.w	r3, r0, r1
   12368:	lsl.w	r1, r3, r1
   1236c:	cmp	r0, r1
   1236e:	add.w	r3, r4, r2, lsl #2
   12372:	beq.n	1233a <__any_on+0x12>
   12374:	movs	r0, #1
   12376:	ldr.w	r4, [sp], #4
   1237a:	bx	lr
   1237c:	add.w	r3, r4, r2, lsl #2
   12380:	b.n	1233a <__any_on+0x12>
   12382:	movs	r0, #0
   12384:	b.n	12352 <__any_on+0x2a>
   12386:	nop

00012388 <__sccl>:
   12388:	push	{r4, r5, r6}
   1238a:	ldrb	r5, [r1, #0]
   1238c:	cmp	r5, #94	; 0x5e
   1238e:	beq.n	123f0 <__sccl+0x68>
   12390:	movs	r2, #0
   12392:	adds	r1, #1
   12394:	mov	r6, r2
   12396:	subs	r3, r0, #1
   12398:	add.w	r4, r0, #255	; 0xff
   1239c:	strb.w	r2, [r3, #1]!
   123a0:	cmp	r3, r4
   123a2:	bne.n	1239c <__sccl+0x14>
   123a4:	cbz	r5, 123c8 <__sccl+0x40>
   123a6:	eor.w	r2, r6, #1
   123aa:	strb	r2, [r0, r5]
   123ac:	adds	r4, r1, #1
   123ae:	ldrb.w	r3, [r4, #-1]
   123b2:	cmp	r3, #45	; 0x2d
   123b4:	beq.n	123d4 <__sccl+0x4c>
   123b6:	cmp	r3, #93	; 0x5d
   123b8:	beq.n	123ce <__sccl+0x46>
   123ba:	cbz	r3, 123c2 <__sccl+0x3a>
   123bc:	mov	r5, r3
   123be:	mov	r1, r4
   123c0:	b.n	123aa <__sccl+0x22>
   123c2:	mov	r0, r1
   123c4:	pop	{r4, r5, r6}
   123c6:	bx	lr
   123c8:	subs	r0, r1, #1
   123ca:	pop	{r4, r5, r6}
   123cc:	bx	lr
   123ce:	mov	r0, r4
   123d0:	pop	{r4, r5, r6}
   123d2:	bx	lr
   123d4:	ldrb	r6, [r1, #1]
   123d6:	cmp	r6, #93	; 0x5d
   123d8:	beq.n	123bc <__sccl+0x34>
   123da:	cmp	r5, r6
   123dc:	bgt.n	123bc <__sccl+0x34>
   123de:	adds	r1, #2
   123e0:	adds	r3, r0, r5
   123e2:	adds	r5, #1
   123e4:	cmp	r6, r5
   123e6:	strb.w	r2, [r3, #1]!
   123ea:	bgt.n	123e2 <__sccl+0x5a>
   123ec:	adds	r4, #2
   123ee:	b.n	123ae <__sccl+0x26>
   123f0:	movs	r2, #1
   123f2:	ldrb	r5, [r1, #1]
   123f4:	mov	r6, r2
   123f6:	adds	r1, #2
   123f8:	b.n	12396 <__sccl+0xe>
   123fa:	nop

000123fc <_strtoll_l.isra.0>:
   123fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12400:	sub	sp, #20
   12402:	mov	sl, r3
   12404:	str	r1, [sp, #8]
   12406:	str	r0, [sp, #12]
   12408:	str	r2, [sp, #4]
   1240a:	mov	r7, r1
   1240c:	ldr	r6, [sp, #56]	; 0x38
   1240e:	b.n	12412 <_strtoll_l.isra.0+0x16>
   12410:	mov	r7, r5
   12412:	mov	r5, r7
   12414:	mov	r0, r6
   12416:	ldrb.w	r4, [r5], #1
   1241a:	bl	b92c <__locale_ctype_ptr_l>
   1241e:	add	r0, r4
   12420:	ldrb	r3, [r0, #1]
   12422:	and.w	r3, r3, #8
   12426:	and.w	r2, r3, #255	; 0xff
   1242a:	cmp	r3, #0
   1242c:	bne.n	12410 <_strtoll_l.isra.0+0x14>
   1242e:	cmp	r4, #45	; 0x2d
   12430:	beq.w	1253a <_strtoll_l.isra.0+0x13e>
   12434:	cmp	r4, #43	; 0x2b
   12436:	it	eq
   12438:	ldrbeq	r4, [r7, #1]
   1243a:	str	r2, [sp, #0]
   1243c:	it	eq
   1243e:	addeq	r5, r7, #2
   12440:	cmp.w	sl, #0
   12444:	beq.n	12460 <_strtoll_l.isra.0+0x64>
   12446:	cmp.w	sl, #16
   1244a:	beq.w	12578 <_strtoll_l.isra.0+0x17c>
   1244e:	ldr	r3, [sp, #0]
   12450:	mov	r6, sl
   12452:	asrs	r7, r6, #31
   12454:	cbnz	r3, 12472 <_strtoll_l.isra.0+0x76>
   12456:	mov.w	r8, #4294967295
   1245a:	mvn.w	r9, #2147483648	; 0x80000000
   1245e:	b.n	1247a <_strtoll_l.isra.0+0x7e>
   12460:	cmp	r4, #48	; 0x30
   12462:	beq.n	12564 <_strtoll_l.isra.0+0x168>
   12464:	movs	r6, #10
   12466:	movs	r7, #0
   12468:	mov.w	sl, #10
   1246c:	ldr	r3, [sp, #0]
   1246e:	cmp	r3, #0
   12470:	beq.n	12456 <_strtoll_l.isra.0+0x5a>
   12472:	mov.w	r8, #0
   12476:	mov.w	r9, #2147483648	; 0x80000000
   1247a:	mov	r2, r6
   1247c:	mov	r3, r7
   1247e:	mov	r0, r8
   12480:	mov	r1, r9
   12482:	bl	b508 <__aeabi_uldivmod>
   12486:	mov	r3, r7
   12488:	mov	fp, r2
   1248a:	mov	r0, r8
   1248c:	mov	r2, r6
   1248e:	mov	r1, r9
   12490:	bl	b508 <__aeabi_uldivmod>
   12494:	mov.w	lr, #0
   12498:	movs	r2, #0
   1249a:	movs	r3, #0
   1249c:	b.n	124be <_strtoll_l.isra.0+0xc2>
   1249e:	beq.n	1252c <_strtoll_l.isra.0+0x130>
   124a0:	mul.w	r4, r2, r7
   124a4:	mla	r4, r6, r3, r4
   124a8:	umull	r2, r3, r2, r6
   124ac:	add	r3, r4
   124ae:	adds.w	r2, r2, ip
   124b2:	adc.w	r3, r3, ip, asr #31
   124b6:	mov.w	lr, #1
   124ba:	ldrb.w	r4, [r5], #1
   124be:	sub.w	ip, r4, #48	; 0x30
   124c2:	cmp.w	ip, #9
   124c6:	bls.n	124d6 <_strtoll_l.isra.0+0xda>
   124c8:	sub.w	ip, r4, #65	; 0x41
   124cc:	cmp.w	ip, #25
   124d0:	bhi.n	124ee <_strtoll_l.isra.0+0xf2>
   124d2:	sub.w	ip, r4, #55	; 0x37
   124d6:	cmp	sl, ip
   124d8:	ble.n	12500 <_strtoll_l.isra.0+0x104>
   124da:	cmp.w	lr, #4294967295
   124de:	beq.n	124ba <_strtoll_l.isra.0+0xbe>
   124e0:	cmp	r1, r3
   124e2:	it	eq
   124e4:	cmpeq	r0, r2
   124e6:	bcs.n	1249e <_strtoll_l.isra.0+0xa2>
   124e8:	mov.w	lr, #4294967295
   124ec:	b.n	124ba <_strtoll_l.isra.0+0xbe>
   124ee:	sub.w	ip, r4, #97	; 0x61
   124f2:	cmp.w	ip, #25
   124f6:	bhi.n	12500 <_strtoll_l.isra.0+0x104>
   124f8:	sub.w	ip, r4, #87	; 0x57
   124fc:	cmp	sl, ip
   124fe:	bgt.n	124da <_strtoll_l.isra.0+0xde>
   12500:	cmp.w	lr, #4294967295
   12504:	beq.n	12544 <_strtoll_l.isra.0+0x148>
   12506:	ldr	r1, [sp, #0]
   12508:	cbz	r1, 12510 <_strtoll_l.isra.0+0x114>
   1250a:	negs	r2, r2
   1250c:	sbc.w	r3, r3, r3, lsl #1
   12510:	ldr	r1, [sp, #4]
   12512:	cmp	r1, #0
   12514:	beq.n	1259c <_strtoll_l.isra.0+0x1a0>
   12516:	cmp.w	lr, #0
   1251a:	bne.n	1255c <_strtoll_l.isra.0+0x160>
   1251c:	ldr	r5, [sp, #8]
   1251e:	mov	r0, r2
   12520:	mov	r1, r3
   12522:	ldr	r3, [sp, #4]
   12524:	str	r5, [r3, #0]
   12526:	add	sp, #20
   12528:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1252c:	cmp	fp, ip
   1252e:	bge.n	124a0 <_strtoll_l.isra.0+0xa4>
   12530:	mov	r2, r0
   12532:	mov	r3, r1
   12534:	mov.w	lr, #4294967295
   12538:	b.n	124ba <_strtoll_l.isra.0+0xbe>
   1253a:	movs	r3, #1
   1253c:	adds	r5, r7, #2
   1253e:	ldrb	r4, [r7, #1]
   12540:	str	r3, [sp, #0]
   12542:	b.n	12440 <_strtoll_l.isra.0+0x44>
   12544:	ldr	r3, [sp, #0]
   12546:	cbnz	r3, 12594 <_strtoll_l.isra.0+0x198>
   12548:	mov.w	r0, #4294967295
   1254c:	mvn.w	r1, #2147483648	; 0x80000000
   12550:	ldr	r2, [sp, #12]
   12552:	movs	r3, #34	; 0x22
   12554:	str	r3, [r2, #0]
   12556:	ldr	r3, [sp, #4]
   12558:	cbnz	r3, 12560 <_strtoll_l.isra.0+0x164>
   1255a:	b.n	12526 <_strtoll_l.isra.0+0x12a>
   1255c:	mov	r0, r2
   1255e:	mov	r1, r3
   12560:	subs	r5, #1
   12562:	b.n	12522 <_strtoll_l.isra.0+0x126>
   12564:	ldrb	r3, [r5, #0]
   12566:	and.w	r3, r3, #223	; 0xdf
   1256a:	cmp	r3, #88	; 0x58
   1256c:	beq.n	12586 <_strtoll_l.isra.0+0x18a>
   1256e:	movs	r6, #8
   12570:	movs	r7, #0
   12572:	mov.w	sl, #8
   12576:	b.n	1246c <_strtoll_l.isra.0+0x70>
   12578:	cmp	r4, #48	; 0x30
   1257a:	bne.n	125a2 <_strtoll_l.isra.0+0x1a6>
   1257c:	ldrb	r3, [r5, #0]
   1257e:	and.w	r3, r3, #223	; 0xdf
   12582:	cmp	r3, #88	; 0x58
   12584:	bne.n	125a2 <_strtoll_l.isra.0+0x1a6>
   12586:	ldrb	r4, [r5, #1]
   12588:	movs	r6, #16
   1258a:	movs	r7, #0
   1258c:	adds	r5, #2
   1258e:	mov.w	sl, #16
   12592:	b.n	1246c <_strtoll_l.isra.0+0x70>
   12594:	movs	r0, #0
   12596:	mov.w	r1, #2147483648	; 0x80000000
   1259a:	b.n	12550 <_strtoll_l.isra.0+0x154>
   1259c:	mov	r0, r2
   1259e:	mov	r1, r3
   125a0:	b.n	12526 <_strtoll_l.isra.0+0x12a>
   125a2:	movs	r6, #16
   125a4:	movs	r7, #0
   125a6:	b.n	1246c <_strtoll_l.isra.0+0x70>

000125a8 <_strtoll_r>:
   125a8:	push	{r4, r5, lr}
   125aa:	ldr	r4, [pc, #24]	; (125c4 <_strtoll_r+0x1c>)
   125ac:	ldr	r5, [pc, #24]	; (125c8 <_strtoll_r+0x20>)
   125ae:	ldr	r4, [r4, #0]
   125b0:	ldr	r4, [r4, #52]	; 0x34
   125b2:	sub	sp, #12
   125b4:	cmp	r4, #0
   125b6:	it	eq
   125b8:	moveq	r4, r5
   125ba:	str	r4, [sp, #0]
   125bc:	bl	123fc <_strtoll_l.isra.0>
   125c0:	add	sp, #12
   125c2:	pop	{r4, r5, pc}
   125c4:	.word	0x20017400
   125c8:	.word	0x20017404

000125cc <_strtoul_l.isra.0>:
   125cc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125d0:	ldr.w	r9, [sp, #40]	; 0x28
   125d4:	mov	r6, r1
   125d6:	mov	r7, r0
   125d8:	mov	r5, r2
   125da:	mov	r8, r3
   125dc:	mov	fp, r1
   125de:	b.n	125e2 <_strtoul_l.isra.0+0x16>
   125e0:	mov	fp, r4
   125e2:	mov	r4, fp
   125e4:	mov	r0, r9
   125e6:	ldrb.w	sl, [r4], #1
   125ea:	bl	b92c <__locale_ctype_ptr_l>
   125ee:	add	r0, sl
   125f0:	ldrb	r0, [r0, #1]
   125f2:	and.w	r0, r0, #8
   125f6:	and.w	ip, r0, #255	; 0xff
   125fa:	cmp	r0, #0
   125fc:	bne.n	125e0 <_strtoul_l.isra.0+0x14>
   125fe:	mov	r1, sl
   12600:	cmp	r1, #45	; 0x2d
   12602:	beq.n	126c8 <_strtoul_l.isra.0+0xfc>
   12604:	cmp	r1, #43	; 0x2b
   12606:	itt	eq
   12608:	ldrbeq.w	r1, [fp, #1]
   1260c:	addeq.w	r4, fp, #2
   12610:	cmp.w	r8, #0
   12614:	beq.n	12630 <_strtoul_l.isra.0+0x64>
   12616:	cmp.w	r8, #16
   1261a:	beq.n	126d6 <_strtoul_l.isra.0+0x10a>
   1261c:	mov.w	r3, #4294967295
   12620:	udiv	r3, r3, r8
   12624:	mul.w	sl, r8, r3
   12628:	mvn.w	sl, sl
   1262c:	mov	r9, r8
   1262e:	b.n	12640 <_strtoul_l.isra.0+0x74>
   12630:	cmp	r1, #48	; 0x30
   12632:	beq.n	126f8 <_strtoul_l.isra.0+0x12c>
   12634:	mov.w	r8, #10
   12638:	ldr	r3, [pc, #244]	; (12730 <_strtoul_l.isra.0+0x164>)
   1263a:	mov	r9, r8
   1263c:	mov.w	sl, #5
   12640:	mov.w	lr, #0
   12644:	mov	r0, lr
   12646:	b.n	12656 <_strtoul_l.isra.0+0x8a>
   12648:	beq.n	126aa <_strtoul_l.isra.0+0xde>
   1264a:	mla	r0, r9, r0, r2
   1264e:	mov.w	lr, #1
   12652:	ldrb.w	r1, [r4], #1
   12656:	sub.w	r2, r1, #48	; 0x30
   1265a:	cmp	r2, #9
   1265c:	bls.n	1266a <_strtoul_l.isra.0+0x9e>
   1265e:	sub.w	r2, r1, #65	; 0x41
   12662:	cmp	r2, #25
   12664:	bhi.n	1267e <_strtoul_l.isra.0+0xb2>
   12666:	sub.w	r2, r1, #55	; 0x37
   1266a:	cmp	r8, r2
   1266c:	ble.n	1268e <_strtoul_l.isra.0+0xc2>
   1266e:	cmp.w	lr, #4294967295
   12672:	beq.n	12652 <_strtoul_l.isra.0+0x86>
   12674:	cmp	r0, r3
   12676:	bls.n	12648 <_strtoul_l.isra.0+0x7c>
   12678:	mov.w	lr, #4294967295
   1267c:	b.n	12652 <_strtoul_l.isra.0+0x86>
   1267e:	sub.w	r2, r1, #97	; 0x61
   12682:	cmp	r2, #25
   12684:	bhi.n	1268e <_strtoul_l.isra.0+0xc2>
   12686:	sub.w	r2, r1, #87	; 0x57
   1268a:	cmp	r8, r2
   1268c:	bgt.n	1266e <_strtoul_l.isra.0+0xa2>
   1268e:	cmp.w	lr, #4294967295
   12692:	beq.n	126b8 <_strtoul_l.isra.0+0xec>
   12694:	cmp.w	ip, #0
   12698:	beq.n	1269c <_strtoul_l.isra.0+0xd0>
   1269a:	negs	r0, r0
   1269c:	cbz	r5, 126b4 <_strtoul_l.isra.0+0xe8>
   1269e:	cmp.w	lr, #0
   126a2:	bne.n	126c0 <_strtoul_l.isra.0+0xf4>
   126a4:	str	r6, [r5, #0]
   126a6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126aa:	cmp	r2, sl
   126ac:	ble.n	1264a <_strtoul_l.isra.0+0x7e>
   126ae:	mov.w	lr, #4294967295
   126b2:	b.n	12652 <_strtoul_l.isra.0+0x86>
   126b4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126b8:	movs	r3, #34	; 0x22
   126ba:	str	r3, [r7, #0]
   126bc:	mov	r0, lr
   126be:	cbz	r5, 12712 <_strtoul_l.isra.0+0x146>
   126c0:	subs	r6, r4, #1
   126c2:	str	r6, [r5, #0]
   126c4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126c8:	add.w	r4, fp, #2
   126cc:	ldrb.w	r1, [fp, #1]
   126d0:	mov.w	ip, #1
   126d4:	b.n	12610 <_strtoul_l.isra.0+0x44>
   126d6:	cmp	r1, #48	; 0x30
   126d8:	bne.n	12716 <_strtoul_l.isra.0+0x14a>
   126da:	ldrb	r3, [r4, #0]
   126dc:	and.w	r3, r3, #223	; 0xdf
   126e0:	cmp	r3, #88	; 0x58
   126e2:	bne.n	12722 <_strtoul_l.isra.0+0x156>
   126e4:	mov.w	r9, #16
   126e8:	ldrb	r1, [r4, #1]
   126ea:	mov	r8, r9
   126ec:	mov.w	sl, #15
   126f0:	adds	r4, #2
   126f2:	mvn.w	r3, #4026531840	; 0xf0000000
   126f6:	b.n	12640 <_strtoul_l.isra.0+0x74>
   126f8:	ldrb	r3, [r4, #0]
   126fa:	and.w	r3, r3, #223	; 0xdf
   126fe:	cmp	r3, #88	; 0x58
   12700:	beq.n	126e4 <_strtoul_l.isra.0+0x118>
   12702:	mov.w	r8, #8
   12706:	mov	r9, r8
   12708:	mov.w	sl, #7
   1270c:	mvn.w	r3, #3758096384	; 0xe0000000
   12710:	b.n	12640 <_strtoul_l.isra.0+0x74>
   12712:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12716:	mov.w	sl, #15
   1271a:	mvn.w	r3, #4026531840	; 0xf0000000
   1271e:	mov	r9, r8
   12720:	b.n	12640 <_strtoul_l.isra.0+0x74>
   12722:	mov	r9, r8
   12724:	mov.w	sl, #15
   12728:	mvn.w	r3, #4026531840	; 0xf0000000
   1272c:	b.n	12640 <_strtoul_l.isra.0+0x74>
   1272e:	nop
   12730:	.word	0x19999999

00012734 <_strtoul_r>:
   12734:	push	{r4, r5, lr}
   12736:	ldr	r4, [pc, #24]	; (12750 <_strtoul_r+0x1c>)
   12738:	ldr	r5, [pc, #24]	; (12754 <_strtoul_r+0x20>)
   1273a:	ldr	r4, [r4, #0]
   1273c:	ldr	r4, [r4, #52]	; 0x34
   1273e:	sub	sp, #12
   12740:	cmp	r4, #0
   12742:	it	eq
   12744:	moveq	r4, r5
   12746:	str	r4, [sp, #0]
   12748:	bl	125cc <_strtoul_l.isra.0>
   1274c:	add	sp, #12
   1274e:	pop	{r4, r5, pc}
   12750:	.word	0x20017400
   12754:	.word	0x20017404

00012758 <_strtoull_l.isra.0>:
   12758:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1275c:	sub	sp, #20
   1275e:	mov	fp, r1
   12760:	str	r0, [sp, #8]
   12762:	mov	r7, r2
   12764:	mov	r6, r3
   12766:	mov	r8, r1
   12768:	ldr	r4, [sp, #56]	; 0x38
   1276a:	b.n	1276e <_strtoull_l.isra.0+0x16>
   1276c:	mov	r8, r5
   1276e:	mov	r5, r8
   12770:	mov	r0, r4
   12772:	ldrb.w	r9, [r5], #1
   12776:	bl	b92c <__locale_ctype_ptr_l>
   1277a:	add	r0, r9
   1277c:	ldrb	r3, [r0, #1]
   1277e:	and.w	r3, r3, #8
   12782:	and.w	r2, r3, #255	; 0xff
   12786:	cmp	r3, #0
   12788:	bne.n	1276c <_strtoull_l.isra.0+0x14>
   1278a:	mov	r4, r9
   1278c:	cmp	r4, #45	; 0x2d
   1278e:	beq.w	128aa <_strtoull_l.isra.0+0x152>
   12792:	cmp	r4, #43	; 0x2b
   12794:	it	eq
   12796:	ldrbeq.w	r4, [r8, #1]
   1279a:	str	r2, [sp, #4]
   1279c:	it	eq
   1279e:	addeq.w	r5, r8, #2
   127a2:	cbz	r6, 127dc <_strtoull_l.isra.0+0x84>
   127a4:	cmp	r6, #16
   127a6:	beq.w	128b8 <_strtoull_l.isra.0+0x160>
   127aa:	mov.w	r9, r6, asr #31
   127ae:	mov	r2, r6
   127b0:	mov	r3, r9
   127b2:	mov.w	r0, #4294967295
   127b6:	mov.w	r1, #4294967295
   127ba:	bl	b508 <__aeabi_uldivmod>
   127be:	mov	r2, r6
   127c0:	str	r0, [sp, #12]
   127c2:	mov	sl, r1
   127c4:	mov	r3, r9
   127c6:	mov.w	r0, #4294967295
   127ca:	mov.w	r1, #4294967295
   127ce:	bl	b508 <__aeabi_uldivmod>
   127d2:	mov	r8, r6
   127d4:	mov	lr, r2
   127d6:	ldr	r2, [sp, #12]
   127d8:	mov	r3, sl
   127da:	b.n	127f6 <_strtoull_l.isra.0+0x9e>
   127dc:	cmp	r4, #48	; 0x30
   127de:	beq.w	128e4 <_strtoull_l.isra.0+0x18c>
   127e2:	ldr	r3, [pc, #348]	; (12940 <_strtoull_l.isra.0+0x1e8>)
   127e4:	mov.w	lr, #5
   127e8:	mov.w	r2, #2576980377	; 0x99999999
   127ec:	mov.w	r8, #10
   127f0:	mov.w	r9, #0
   127f4:	movs	r6, #10
   127f6:	mov.w	ip, #0
   127fa:	movs	r0, #0
   127fc:	movs	r1, #0
   127fe:	b.n	12826 <_strtoull_l.isra.0+0xce>
   12800:	cmp	r1, r3
   12802:	it	eq
   12804:	cmpeq	r0, r2
   12806:	beq.n	1288a <_strtoull_l.isra.0+0x132>
   12808:	mul.w	r4, r0, r9
   1280c:	mla	r4, r8, r1, r4
   12810:	umull	r0, r1, r0, r8
   12814:	add	r1, r4
   12816:	adds.w	r0, r0, sl
   1281a:	adc.w	r1, r1, sl, asr #31
   1281e:	mov.w	ip, #1
   12822:	ldrb.w	r4, [r5], #1
   12826:	sub.w	sl, r4, #48	; 0x30
   1282a:	cmp.w	sl, #9
   1282e:	bls.n	1283e <_strtoull_l.isra.0+0xe6>
   12830:	sub.w	sl, r4, #65	; 0x41
   12834:	cmp.w	sl, #25
   12838:	bhi.n	12856 <_strtoull_l.isra.0+0xfe>
   1283a:	sub.w	sl, r4, #55	; 0x37
   1283e:	cmp	r6, sl
   12840:	ble.n	12868 <_strtoull_l.isra.0+0x110>
   12842:	cmp.w	ip, #4294967295
   12846:	beq.n	12822 <_strtoull_l.isra.0+0xca>
   12848:	cmp	r3, r1
   1284a:	it	eq
   1284c:	cmpeq	r2, r0
   1284e:	bcs.n	12800 <_strtoull_l.isra.0+0xa8>
   12850:	mov.w	ip, #4294967295
   12854:	b.n	12822 <_strtoull_l.isra.0+0xca>
   12856:	sub.w	sl, r4, #97	; 0x61
   1285a:	cmp.w	sl, #25
   1285e:	bhi.n	12868 <_strtoull_l.isra.0+0x110>
   12860:	sub.w	sl, r4, #87	; 0x57
   12864:	cmp	r6, sl
   12866:	bgt.n	12842 <_strtoull_l.isra.0+0xea>
   12868:	cmp.w	ip, #4294967295
   1286c:	beq.n	12894 <_strtoull_l.isra.0+0x13c>
   1286e:	ldr	r3, [sp, #4]
   12870:	cbz	r3, 12878 <_strtoull_l.isra.0+0x120>
   12872:	negs	r0, r0
   12874:	sbc.w	r1, r1, r1, lsl #1
   12878:	cbz	r7, 12884 <_strtoull_l.isra.0+0x12c>
   1287a:	cmp.w	ip, #0
   1287e:	bne.n	128a6 <_strtoull_l.isra.0+0x14e>
   12880:	mov	r5, fp
   12882:	str	r5, [r7, #0]
   12884:	add	sp, #20
   12886:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1288a:	cmp	sl, lr
   1288c:	ble.n	12808 <_strtoull_l.isra.0+0xb0>
   1288e:	mov.w	ip, #4294967295
   12892:	b.n	12822 <_strtoull_l.isra.0+0xca>
   12894:	ldr	r2, [sp, #8]
   12896:	movs	r3, #34	; 0x22
   12898:	str	r3, [r2, #0]
   1289a:	mov.w	r0, #4294967295
   1289e:	mov.w	r1, #4294967295
   128a2:	cmp	r7, #0
   128a4:	beq.n	12884 <_strtoull_l.isra.0+0x12c>
   128a6:	subs	r5, #1
   128a8:	b.n	12882 <_strtoull_l.isra.0+0x12a>
   128aa:	movs	r3, #1
   128ac:	add.w	r5, r8, #2
   128b0:	ldrb.w	r4, [r8, #1]
   128b4:	str	r3, [sp, #4]
   128b6:	b.n	127a2 <_strtoull_l.isra.0+0x4a>
   128b8:	cmp	r4, #48	; 0x30
   128ba:	bne.n	12906 <_strtoull_l.isra.0+0x1ae>
   128bc:	ldrb	r3, [r5, #0]
   128be:	and.w	r3, r3, #223	; 0xdf
   128c2:	cmp	r3, #88	; 0x58
   128c4:	bne.n	1291c <_strtoull_l.isra.0+0x1c4>
   128c6:	mov.w	r3, #4294967295
   128ca:	ldrb	r4, [r5, #1]
   128cc:	str	r3, [sp, #12]
   128ce:	mov.w	lr, #15
   128d2:	adds	r5, #2
   128d4:	mvn.w	sl, #4026531840	; 0xf0000000
   128d8:	mov.w	r8, #16
   128dc:	mov.w	r9, #0
   128e0:	movs	r6, #16
   128e2:	b.n	127d6 <_strtoull_l.isra.0+0x7e>
   128e4:	ldrb	r3, [r5, #0]
   128e6:	and.w	r3, r3, #223	; 0xdf
   128ea:	cmp	r3, #88	; 0x58
   128ec:	beq.n	128c6 <_strtoull_l.isra.0+0x16e>
   128ee:	mov.w	lr, #7
   128f2:	mov.w	r2, #4294967295
   128f6:	mvn.w	r3, #3758096384	; 0xe0000000
   128fa:	mov.w	r8, #8
   128fe:	mov.w	r9, #0
   12902:	movs	r6, #8
   12904:	b.n	127f6 <_strtoull_l.isra.0+0x9e>
   12906:	mov.w	lr, #15
   1290a:	mov.w	r2, #4294967295
   1290e:	mvn.w	r3, #4026531840	; 0xf0000000
   12912:	mov.w	r8, #16
   12916:	mov.w	r9, #0
   1291a:	b.n	127f6 <_strtoull_l.isra.0+0x9e>
   1291c:	mov.w	r8, #16
   12920:	mov.w	r9, #0
   12924:	mov	r2, r8
   12926:	mov	r3, r9
   12928:	mov.w	r0, #4294967295
   1292c:	mov.w	r1, #4294967295
   12930:	bl	b508 <__aeabi_uldivmod>
   12934:	mvn.w	r3, #4026531840	; 0xf0000000
   12938:	mov	lr, r2
   1293a:	mov.w	r2, #4294967295
   1293e:	b.n	127f6 <_strtoull_l.isra.0+0x9e>
   12940:	.word	0x19999999

00012944 <_strtoull_r>:
   12944:	push	{r4, r5, lr}
   12946:	ldr	r4, [pc, #24]	; (12960 <_strtoull_r+0x1c>)
   12948:	ldr	r5, [pc, #24]	; (12964 <_strtoull_r+0x20>)
   1294a:	ldr	r4, [r4, #0]
   1294c:	ldr	r4, [r4, #52]	; 0x34
   1294e:	sub	sp, #12
   12950:	cmp	r4, #0
   12952:	it	eq
   12954:	moveq	r4, r5
   12956:	str	r4, [sp, #0]
   12958:	bl	12758 <_strtoull_l.isra.0>
   1295c:	add	sp, #12
   1295e:	pop	{r4, r5, pc}
   12960:	.word	0x20017400
   12964:	.word	0x20017404

00012968 <__ssprint_r>:
   12968:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1296c:	ldr	r3, [r2, #8]
   1296e:	sub	sp, #12
   12970:	mov	r8, r2
   12972:	cmp	r3, #0
   12974:	beq.n	12a5c <__ssprint_r+0xf4>
   12976:	mov	fp, r0
   12978:	mov.w	r9, #0
   1297c:	ldr	r6, [r2, #0]
   1297e:	ldr	r0, [r1, #0]
   12980:	ldr	r3, [r1, #8]
   12982:	mov	r5, r1
   12984:	mov	r4, r9
   12986:	cmp	r4, #0
   12988:	beq.n	12a16 <__ssprint_r+0xae>
   1298a:	cmp	r4, r3
   1298c:	mov	r7, r3
   1298e:	mov	sl, r3
   12990:	bcc.n	12a20 <__ssprint_r+0xb8>
   12992:	ldrh	r3, [r5, #12]
   12994:	tst.w	r3, #1152	; 0x480
   12998:	beq.n	129f6 <__ssprint_r+0x8e>
   1299a:	ldr	r7, [r5, #20]
   1299c:	ldr	r1, [r5, #16]
   1299e:	add.w	r7, r7, r7, lsl #1
   129a2:	rsb	sl, r1, r0
   129a6:	add.w	r7, r7, r7, lsr #31
   129aa:	adds	r0, r4, #1
   129ac:	asrs	r7, r7, #1
   129ae:	add	r0, sl
   129b0:	cmp	r0, r7
   129b2:	mov	r2, r7
   129b4:	itt	hi
   129b6:	movhi	r7, r0
   129b8:	movhi	r2, r7
   129ba:	lsls	r3, r3, #21
   129bc:	bpl.n	12a26 <__ssprint_r+0xbe>
   129be:	mov	r1, r2
   129c0:	mov	r0, fp
   129c2:	bl	b968 <_malloc_r>
   129c6:	cmp	r0, #0
   129c8:	beq.n	12a3a <__ssprint_r+0xd2>
   129ca:	mov	r2, sl
   129cc:	ldr	r1, [r5, #16]
   129ce:	str	r0, [sp, #4]
   129d0:	bl	81cc <memcpy>
   129d4:	ldrh	r2, [r5, #12]
   129d6:	ldr	r3, [sp, #4]
   129d8:	bic.w	r2, r2, #1152	; 0x480
   129dc:	orr.w	r2, r2, #128	; 0x80
   129e0:	strh	r2, [r5, #12]
   129e2:	rsb	r2, sl, r7
   129e6:	add.w	r0, r3, sl
   129ea:	str	r7, [r5, #20]
   129ec:	str	r3, [r5, #16]
   129ee:	str	r0, [r5, #0]
   129f0:	str	r2, [r5, #8]
   129f2:	mov	r7, r4
   129f4:	mov	sl, r4
   129f6:	mov	r2, sl
   129f8:	mov	r1, r9
   129fa:	bl	c014 <memmove>
   129fe:	ldr.w	r2, [r8, #8]
   12a02:	ldr	r3, [r5, #8]
   12a04:	ldr	r0, [r5, #0]
   12a06:	subs	r3, r3, r7
   12a08:	add	r0, sl
   12a0a:	subs	r4, r2, r4
   12a0c:	str	r3, [r5, #8]
   12a0e:	str	r0, [r5, #0]
   12a10:	str.w	r4, [r8, #8]
   12a14:	cbz	r4, 12a5c <__ssprint_r+0xf4>
   12a16:	ldr.w	r9, [r6]
   12a1a:	ldr	r4, [r6, #4]
   12a1c:	adds	r6, #8
   12a1e:	b.n	12986 <__ssprint_r+0x1e>
   12a20:	mov	r7, r4
   12a22:	mov	sl, r4
   12a24:	b.n	129f6 <__ssprint_r+0x8e>
   12a26:	mov	r0, fp
   12a28:	bl	c180 <_realloc_r>
   12a2c:	mov	r3, r0
   12a2e:	cmp	r0, #0
   12a30:	bne.n	129e2 <__ssprint_r+0x7a>
   12a32:	ldr	r1, [r5, #16]
   12a34:	mov	r0, fp
   12a36:	bl	110d0 <_free_r>
   12a3a:	movs	r3, #12
   12a3c:	str.w	r3, [fp]
   12a40:	ldrh	r3, [r5, #12]
   12a42:	movs	r2, #0
   12a44:	orr.w	r3, r3, #64	; 0x40
   12a48:	mov.w	r0, #4294967295
   12a4c:	strh	r3, [r5, #12]
   12a4e:	str.w	r2, [r8, #8]
   12a52:	str.w	r2, [r8, #4]
   12a56:	add	sp, #12
   12a58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a5c:	movs	r0, #0
   12a5e:	str.w	r0, [r8, #4]
   12a62:	add	sp, #12
   12a64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012a68 <_sungetc_r>:
   12a68:	adds	r3, r1, #1
   12a6a:	push	{r4, r5, r6, lr}
   12a6c:	beq.n	12aa6 <_sungetc_r+0x3e>
   12a6e:	ldrh	r3, [r2, #12]
   12a70:	ldr	r4, [r2, #48]	; 0x30
   12a72:	bic.w	r3, r3, #32
   12a76:	strh	r3, [r2, #12]
   12a78:	uxtb	r5, r1
   12a7a:	cbz	r4, 12aac <_sungetc_r+0x44>
   12a7c:	mov	r4, r2
   12a7e:	ldr	r2, [r2, #4]
   12a80:	ldr	r3, [r4, #52]	; 0x34
   12a82:	cmp	r2, r3
   12a84:	mov	r6, r1
   12a86:	bge.n	12a9c <_sungetc_r+0x34>
   12a88:	ldr	r3, [r4, #0]
   12a8a:	subs	r2, r3, #1
   12a8c:	str	r2, [r4, #0]
   12a8e:	strb.w	r6, [r3, #-1]
   12a92:	ldr	r3, [r4, #4]
   12a94:	adds	r3, #1
   12a96:	str	r3, [r4, #4]
   12a98:	mov	r0, r5
   12a9a:	pop	{r4, r5, r6, pc}
   12a9c:	mov	r1, r4
   12a9e:	bl	12bac <__submore>
   12aa2:	cmp	r0, #0
   12aa4:	beq.n	12a88 <_sungetc_r+0x20>
   12aa6:	mov.w	r5, #4294967295
   12aaa:	b.n	12a98 <_sungetc_r+0x30>
   12aac:	ldr	r0, [r2, #16]
   12aae:	ldr	r3, [r2, #0]
   12ab0:	cbz	r0, 12abe <_sungetc_r+0x56>
   12ab2:	cmp	r0, r3
   12ab4:	bcs.n	12abe <_sungetc_r+0x56>
   12ab6:	ldrb.w	r0, [r3, #-1]
   12aba:	cmp	r5, r0
   12abc:	beq.n	12ade <_sungetc_r+0x76>
   12abe:	str	r3, [r2, #56]	; 0x38
   12ac0:	mov	r3, r2
   12ac2:	ldr	r6, [r2, #4]
   12ac4:	str	r6, [r2, #60]	; 0x3c
   12ac6:	add.w	r4, r2, #64	; 0x40
   12aca:	movs	r0, #3
   12acc:	str	r0, [r2, #52]	; 0x34
   12ace:	str	r4, [r2, #48]	; 0x30
   12ad0:	strb.w	r1, [r3, #66]!
   12ad4:	movs	r1, #1
   12ad6:	str	r3, [r2, #0]
   12ad8:	str	r1, [r2, #4]
   12ada:	mov	r0, r5
   12adc:	pop	{r4, r5, r6, pc}
   12ade:	ldr	r1, [r2, #4]
   12ae0:	subs	r3, #1
   12ae2:	adds	r1, #1
   12ae4:	str	r3, [r2, #0]
   12ae6:	str	r1, [r2, #4]
   12ae8:	b.n	12a98 <_sungetc_r+0x30>
   12aea:	nop

00012aec <__ssrefill_r>:
   12aec:	push	{r4, lr}
   12aee:	mov	r4, r1
   12af0:	ldr	r1, [r1, #48]	; 0x30
   12af2:	cbz	r1, 12b10 <__ssrefill_r+0x24>
   12af4:	add.w	r3, r4, #64	; 0x40
   12af8:	cmp	r1, r3
   12afa:	beq.n	12b00 <__ssrefill_r+0x14>
   12afc:	bl	110d0 <_free_r>
   12b00:	ldr	r3, [r4, #60]	; 0x3c
   12b02:	str	r3, [r4, #4]
   12b04:	movs	r0, #0
   12b06:	str	r0, [r4, #48]	; 0x30
   12b08:	cbz	r3, 12b10 <__ssrefill_r+0x24>
   12b0a:	ldr	r3, [r4, #56]	; 0x38
   12b0c:	str	r3, [r4, #0]
   12b0e:	pop	{r4, pc}
   12b10:	ldrh	r3, [r4, #12]
   12b12:	ldr	r2, [r4, #16]
   12b14:	str	r2, [r4, #0]
   12b16:	orr.w	r3, r3, #32
   12b1a:	movs	r2, #0
   12b1c:	strh	r3, [r4, #12]
   12b1e:	str	r2, [r4, #4]
   12b20:	mov.w	r0, #4294967295
   12b24:	pop	{r4, pc}
   12b26:	nop

00012b28 <_sfread_r>:
   12b28:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b2c:	sub	sp, #12
   12b2e:	mul.w	r9, r2, r3
   12b32:	str	r2, [sp, #4]
   12b34:	mov	sl, r3
   12b36:	ldr	r4, [sp, #48]	; 0x30
   12b38:	cmp.w	r9, #0
   12b3c:	beq.n	12b92 <_sfread_r+0x6a>
   12b3e:	mov	r7, r0
   12b40:	mov	r6, r1
   12b42:	mov	r5, r9
   12b44:	mov.w	r8, #0
   12b48:	b.n	12b6a <_sfread_r+0x42>
   12b4a:	ldr	r1, [r4, #0]
   12b4c:	bl	81cc <memcpy>
   12b50:	ldr	r2, [r4, #0]
   12b52:	str.w	r8, [r4, #4]
   12b56:	add	r2, fp
   12b58:	str	r2, [r4, #0]
   12b5a:	mov	r1, r4
   12b5c:	mov	r0, r7
   12b5e:	add	r6, fp
   12b60:	rsb	r5, fp, r5
   12b64:	bl	12aec <__ssrefill_r>
   12b68:	cbnz	r0, 12b9a <_sfread_r+0x72>
   12b6a:	ldr.w	fp, [r4, #4]
   12b6e:	cmp	r5, fp
   12b70:	mov	r0, r6
   12b72:	mov	r2, fp
   12b74:	bhi.n	12b4a <_sfread_r+0x22>
   12b76:	mov	r2, r5
   12b78:	ldr	r1, [r4, #0]
   12b7a:	bl	81cc <memcpy>
   12b7e:	ldr	r2, [r4, #4]
   12b80:	ldr	r3, [r4, #0]
   12b82:	subs	r2, r2, r5
   12b84:	add	r3, r5
   12b86:	mov	r0, sl
   12b88:	str	r2, [r4, #4]
   12b8a:	str	r3, [r4, #0]
   12b8c:	add	sp, #12
   12b8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b92:	mov	r0, r9
   12b94:	add	sp, #12
   12b96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b9a:	ldr	r3, [sp, #4]
   12b9c:	rsb	r9, r5, r9
   12ba0:	udiv	r0, r9, r3
   12ba4:	add	sp, #12
   12ba6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12baa:	nop

00012bac <__submore>:
   12bac:	add.w	r3, r1, #64	; 0x40
   12bb0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12bb4:	mov	r4, r1
   12bb6:	ldr	r1, [r1, #48]	; 0x30
   12bb8:	cmp	r1, r3
   12bba:	beq.n	12be6 <__submore+0x3a>
   12bbc:	ldr	r6, [r4, #52]	; 0x34
   12bbe:	lsls	r7, r6, #1
   12bc0:	mov	r2, r7
   12bc2:	bl	c180 <_realloc_r>
   12bc6:	mov	r5, r0
   12bc8:	cbz	r0, 12c1c <__submore+0x70>
   12bca:	add.w	r8, r0, r6
   12bce:	mov	r2, r6
   12bd0:	mov	r0, r8
   12bd2:	mov	r1, r5
   12bd4:	bl	81cc <memcpy>
   12bd8:	str.w	r8, [r4]
   12bdc:	str	r5, [r4, #48]	; 0x30
   12bde:	str	r7, [r4, #52]	; 0x34
   12be0:	movs	r0, #0
   12be2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12be6:	mov.w	r1, #1024	; 0x400
   12bea:	bl	b968 <_malloc_r>
   12bee:	cbz	r0, 12c1c <__submore+0x70>
   12bf0:	ldrb.w	r3, [r4, #66]	; 0x42
   12bf4:	str	r0, [r4, #48]	; 0x30
   12bf6:	mov.w	r2, #1024	; 0x400
   12bfa:	str	r2, [r4, #52]	; 0x34
   12bfc:	strb.w	r3, [r0, #1023]	; 0x3ff
   12c00:	ldrb.w	r3, [r4, #65]	; 0x41
   12c04:	strb.w	r3, [r0, #1022]	; 0x3fe
   12c08:	ldrb.w	r3, [r4, #64]	; 0x40
   12c0c:	strb.w	r3, [r0, #1021]	; 0x3fd
   12c10:	addw	r0, r0, #1021	; 0x3fd
   12c14:	str	r0, [r4, #0]
   12c16:	movs	r0, #0
   12c18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12c1c:	mov.w	r0, #4294967295
   12c20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012c24 <_vasnprintf_r>:
   12c24:	push	{r4, r5, r6, lr}
   12c26:	mov	r5, r2
   12c28:	sub	sp, #104	; 0x68
   12c2a:	ldr	r4, [r2, #0]
   12c2c:	cbz	r1, 12c32 <_vasnprintf_r+0xe>
   12c2e:	cmp	r4, #0
   12c30:	bne.n	12c68 <_vasnprintf_r+0x44>
   12c32:	movs	r4, #0
   12c34:	mov.w	r2, #648	; 0x288
   12c38:	strh.w	r2, [sp, #12]
   12c3c:	str	r4, [sp, #0]
   12c3e:	str	r4, [sp, #16]
   12c40:	mov	r2, r3
   12c42:	movw	r6, #65535	; 0xffff
   12c46:	ldr	r3, [sp, #120]	; 0x78
   12c48:	str	r4, [sp, #8]
   12c4a:	mov	r1, sp
   12c4c:	str	r4, [sp, #20]
   12c4e:	strh.w	r6, [sp, #14]
   12c52:	bl	d9d0 <_svfprintf_r>
   12c56:	cmp	r0, #0
   12c58:	blt.n	12c7e <_vasnprintf_r+0x5a>
   12c5a:	ldr	r3, [sp, #0]
   12c5c:	str	r0, [r5, #0]
   12c5e:	movs	r2, #0
   12c60:	strb	r2, [r3, #0]
   12c62:	ldr	r0, [sp, #16]
   12c64:	add	sp, #104	; 0x68
   12c66:	pop	{r4, r5, r6, pc}
   12c68:	mov.w	r2, #1544	; 0x608
   12c6c:	str	r1, [sp, #0]
   12c6e:	str	r1, [sp, #16]
   12c70:	strh.w	r2, [sp, #12]
   12c74:	bge.n	12c40 <_vasnprintf_r+0x1c>
   12c76:	movs	r3, #139	; 0x8b
   12c78:	str	r3, [r0, #0]
   12c7a:	movs	r0, #0
   12c7c:	b.n	12c64 <_vasnprintf_r+0x40>
   12c7e:	movs	r0, #0
   12c80:	b.n	12c64 <_vasnprintf_r+0x40>
   12c82:	nop

00012c84 <_calloc_r>:
   12c84:	push	{r4, lr}
   12c86:	mul.w	r1, r2, r1
   12c8a:	bl	b968 <_malloc_r>
   12c8e:	mov	r4, r0
   12c90:	cbz	r0, 12cca <_calloc_r+0x46>
   12c92:	ldr.w	r2, [r0, #-4]
   12c96:	bic.w	r2, r2, #3
   12c9a:	subs	r2, #4
   12c9c:	cmp	r2, #36	; 0x24
   12c9e:	bhi.n	12cd2 <_calloc_r+0x4e>
   12ca0:	cmp	r2, #19
   12ca2:	bls.n	12cce <_calloc_r+0x4a>
   12ca4:	movs	r3, #0
   12ca6:	cmp	r2, #27
   12ca8:	str	r3, [r0, #0]
   12caa:	str	r3, [r0, #4]
   12cac:	bls.n	12cdc <_calloc_r+0x58>
   12cae:	cmp	r2, #36	; 0x24
   12cb0:	str	r3, [r0, #8]
   12cb2:	str	r3, [r0, #12]
   12cb4:	iteee	ne
   12cb6:	addne.w	r2, r0, #16
   12cba:	streq	r3, [r0, #16]
   12cbc:	streq	r3, [r0, #20]
   12cbe:	addeq.w	r2, r0, #24
   12cc2:	movs	r3, #0
   12cc4:	str	r3, [r2, #0]
   12cc6:	str	r3, [r2, #4]
   12cc8:	str	r3, [r2, #8]
   12cca:	mov	r0, r4
   12ccc:	pop	{r4, pc}
   12cce:	mov	r2, r0
   12cd0:	b.n	12cc2 <_calloc_r+0x3e>
   12cd2:	movs	r1, #0
   12cd4:	bl	c0dc <memset>
   12cd8:	mov	r0, r4
   12cda:	pop	{r4, pc}
   12cdc:	add.w	r2, r0, #8
   12ce0:	b.n	12cc2 <_calloc_r+0x3e>
   12ce2:	nop

00012ce4 <vtable for AudioStream>:
	...
   12cec:	A...

00012cf0 <vtable for mRecordQueue<137>>:
	...
   12cf8:	Y...

00012cfc <vtable for StreamFile<FsBaseFile, unsigned long long>>:
	...
   12d04:	........m.......
   12d14:	........i...

00012d20 <vtable for FsFile>:
	...
   12d28:	........m.......
   12d38:	........i...%02d
   12d48:	:%02d:%02d..%04d
   12d58:	/%02d/%02d..%d %
   12d68:	d %d %d %d %d %d
   12d78:	....%s_%04d_%02d
   12d88:	_%02d_%02d_%02d_
   12d98:	%02d%s..%04d_%02
   12da8:	d_%02d_%02d_%02d
   12db8:	_%02d...RIFF....
   12dc8:	WAVE....fmt ....
   12dd8:	data....file Clo
   12de8:	sed.Config.txt..
   12df8:	%s......%10d....
   12e08:	%d..Envi_%s.txt.
   12e18:	%04d_%02d_%02d,.
   12e28:	%02d_%02d_%02d,.
   12e38:	%10.1f,.close ac
   12e48:	quisition...Hibe
   12e58:	rnate now 1.Hibe
   12e68:	rnate now 2.Hibe
   12e78:	rnate now 3.?!xa
   12e88:	....oar1234ndtch
   12e98:	wseikp..%02d....
   12ea8:	%04d....%c %5d o
   12eb8:	n_time......%c %
   12ec8:	5d acq_time.....
   12ed8:	%c %5d rep_rate.
   12ee8:	....%c %5d first
   12ef8:	_hour...%c %5d s
   12f08:	econd_hour......
   12f18:	%c %5d third_hou
   12f28:	r...%c %5d last_
   12f38:	hour....%c %s na
   12f48:	me......%c %s da
   12f58:	te......%c %s ti
   12f68:	me......%c %5d p
   12f78:	rocessing type..
   12f88:	....%c %5d thres
   12f98:	hold....%c %5d n
   12fa8:	oise window.....
   12fb8:	%c %5d slow wind
   12fc8:	ow......%c %5d e
   12fd8:	xtraction window
   12fe8:	....%c %5d inhib
   12ff8:	it window...%c %
   13008:	5d noise repetit
   13018:	ion rate....%c %
   13028:	5d pre trigger d
   13038:	elay....exter 'a
   13048:	' to print this.
   13058:	exter '?c' to re
   13068:	ad value c=(o,a,
   13078:	r,1,2,3,4,n,d,t,
   13088:	c,h,w,s,m,i,k,p)
   13098:	....  e.g.: ?1 w
   130a8:	ill print first 
   130b8:	hour....exter '!
   130c8:	cval' to read va
   130d8:	lue c=(0,a,r,1,2
   130e8:	,3,4,n,d,t,c,h,w
   130f8:	,s,m,i,k,p) and 
   13108:	val is new value
   13118:	....  e.g.: !110
   13128:	 will set first 
   13138:	hour to 10..exte
   13148:	r 'xval' to exit
   13158:	 menu (x is dela
   13168:	y in minutes, -1
   13178:	 means immediate
   13188:	)...  e.g.: x10 
   13198:	will exit and hi
   131a8:	bernate for 10 m
   131b8:	inutes..        
   131c8:	x-1 with exit an
   131d8:	d start immediat
   131e8:	ely.microSoundRe
   131f8:	corder..End of S
   13208:	etup....SdError:
   13218:	 0X.,0X.Check SD
   13228:	 format.....erro
   13238:	r: .file.write d
   13248:	ata failed..file
   13258:	.open failed....
   13268:	file.preAllocate
   13278:	 failed.closed..
   13288:	file closed..loo
   13298:	p: %5d %4d; %5d 
   132a8:	%5d; %5d; ..

000132b4 <SPIClass::spi0_hardware>:
   132b4:	<..@............
   132c4:	.....%....'.....
   132d4:	................
   132e4:	................
   132f4:	................
   13304:	..........-.....
   13314:	................
   13324:	................
   13334:	................
   13344:	.. .

00013348 <monthDays>:
   13348:	............

00013354 <vtable for AudioInputI2SQuad>:
	...
   1335c:	.,..

00013360 <TwoWire::i2c0_hardware>:
   13360:	4..@@.....".0...
   13370:	....!./.........

00013380 <TwoWire::i2c1_hardware>:
   13380:	4..@....&:......
   13390:	..%;............

000133a0 <TwoWire::i2c2_hardware>:
   133a0:	(..@@...........
   133b0:	............J...

000133c0 <vtable for TwoWire>:
	...
   133c8:	.0...0..m....0..
   133d8:	E0..Q0..q0..

000133e4 <vtable for SdFile>:
	...
   133ec:	.:......m...q...
   133fc:	EXFAT...

00013404 <vtable for SdSpiCard>:
	...
   1340c:	.j...j...i...m..
   1341c:	.l...o...i..!j..
   1342c:	.n...i...i...j..
   1343c:	.l...l..Ml..u...
   1344c:	.i..ap...n...o..

0001345c <vtable for SdioCard>:
	...
   13464:	er...r..y....x..
   13474:	.u...y...y...x..
   13484:	uu...r...r...t..
   13494:	.r..9r..Ur..is..
   134a4:	.r...v...w...v..

000134b4 <digital_pin_to_info_PGM>:
   134b4:	@..C@..@D..CD..@
   134c4:	...C...@0..C0..@
   134d4:	4..C4..@...C...@
   134e4:	...C...@...C...@
   134f4:	...C...@...C...@
   13504:	...C...@...C...@
   13514:	...C...@...C...@
   13524:	...C...@...C...@
   13534:	...C...@...C...@
   13544:	...C...@...C...@
   13554:	...C...@...C...@
   13564:	...C...@...C...@
   13574:	h .Ch..@...C...@
   13584:	8..C8..@<..C<..@
   13594:	@..C@..@H..CH..@
   135a4:	L..CL..@(..C(..@
   135b4:	,..C,..@` .C`..@
   135c4:	d .Cd..@ ..C ..@
   135d4:	$..C$..@(..C(..@
   135e4:	,..C,..@D..CD..@
   135f4:	p..Cp..@t..Ct..@
   13604:	h..Ch..@P..CP..@
   13614:	X..CX..@\..C\..@
   13624:	T..CT..@ ..C ..@
   13634:	$..C$..@...C...@
   13644:	...C...@8..C8..@
   13654:	4..C4..@0..C0..@
   13664:	<..C<..@,..C,..@
   13674:	( .C(..@, .C,..@
   13684:	. .C...@. .C...@
   13694:	. .C...@. .C...@
   136a4:	. .C...@. .C...@

000136b4 <vtable for usb_serial_class>:
	...
   136bc:	....y...u...q...
   136cc:	m...i...e...a...
   136dc:	....

000136e0 <usb_endpoint_config_table>:
   136e0:	....

000136e4 <usb_descriptor_list>:
   136e4:	....4o. ........
   136f4:	`o. C........o. 
   13704:	........Ho. ....
   13714:	.....o. ........
   13724:	.o. ............
   13734:	....

00013738 <_global_impure_ptr>:
   13738:	.o. C...POSIX...
   13748:	....

0001374c <fpi.6173>:
   1374c:	5...............
   1375c:	....nf..inity...
   1376c:	an..

00013770 <fpinan.6209>:
   13770:	4...............
   13780:	........

00013788 <tinytens>:
   13788:	.......<3...#.I9
   13798:	=..D...2......[%
   137a8:	Co.d(.h.

000137b0 <zeroes.7258>:
   137b0:	0000000000000000
   137c0:	INF.inf.NAN.nan.
   137d0:	0123456789ABCDEF
   137e0:	....0123456789ab
   137f0:	cdef....(null)..
   13800:	0...

00013804 <blanks.7257>:
   13804:	                

00013814 <basefix.7328>:
   13814:	................
   13824:	................
   13834:	....e%ld....

00013840 <_ctype_>:
   13840:	.         ((((( 
   13850:	                
   13860:	 ...............
   13870:	................
   13880:	..AAAAAA........
   13890:	................
   138a0:	..BBBBBB........
   138b0:	................
   138c0:	 ...............
	...
   13940:	....Infinity....
   13950:	NaN.

00013954 <__hexdig>:
	...
   13984:	................
   13994:	................
	...
   139b4:	................
	...
   13a54:	....

00013a58 <__mprec_tens>:
   13a58:	.......?......$@
   13a68:	......Y@.....@.@
   13a78:	.......@.....j.@
   13a88:	.......A......cA
   13a98:	.......A....e..A
   13aa8:	... _..B....vH7B
   13ab8:	......mB..@..0.B
   13ac8:	.......B..4&.k.C
   13ad8:	...7y.AC....W4vC
   13ae8:	..Ngm..C.=.`.X.C
   13af8:	@..x...DP.....KD
   13b08:	..M....D.J...-.D
   13b18:	...yCx.D

00013b20 <__mprec_bigtens>:
   13b20:	...7y.AC.n.....F
   13b30:	..?..O8M2.0.Hw.Z
   13b40:	<.s..O.u

00013b48 <p05.6087>:
   13b48:	........}...

00013b54 <_init>:
   13b54:	push	{r3, r4, r5, r6, r7, lr}
   13b56:	nop
   13b58:	pop	{r3, r4, r5, r6, r7}
   13b5a:	pop	{r3}
   13b5c:	mov	lr, r3
   13b5e:	bx	lr

00013b60 <__init_array_start>:
   13b60:	.word	0x0001008d

00013b64 <__frame_dummy_init_array_entry>:
   13b64:	5.... ...*...*..
   13b74:	.+..)+..A+..Y+..
   13b84:	q+...+...+......
   13b94:	...../.../.../..
   13ba4:	./...0..-0..E2..
   13bb4:	y?..

Disassembly of section .fini:

00013bb8 <_fini>:
   13bb8:	push	{r3, r4, r5, r6, r7, lr}
   13bba:	nop
