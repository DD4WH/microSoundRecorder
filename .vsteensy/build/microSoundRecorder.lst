
.vsteensy/build/microSoundRecorder.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00013bf8 l    d  .fini	00000000 .fini
00013bfc l    d  .ARM.exidx	00000000 .ARM.exidx
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
200169d0 l    d  .usbbuffers	00000000 .usbbuffers
20016d30 l    d  .data	00000000 .data
20017980 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
0000872c l     F .text	0000000c startup_default_early_hook
00008738 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
20017980 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
20017984 l       .bss	00000000 object.8610
00013ba4 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 myAPP.cpp
0000047c l     F .text	0000001c llwuISR()
000005ac l     F .text	00000034 getTime(char*) [clone .constprop.33]
000005e0 l     F .text	00000034 getDate(char*) [clone .constprop.34]
000020e8 l     F .text	00000214 _GLOBAL__sub_I_acqParameters
20017ea8 l     O .bss	00000004 loop::t3
20017eac l     O .bss	00000004 loop::t4
2001c0b4 l     O .bss	00000028 makeFilename(char*)::filename
2001c0f0 l     O .bss	00000004 checkDutyCycle(ACQ_Parameters_s*, short)::t_start
2001c118 l     O .bss	00000030 wavHeader(unsigned long)::wheader
2001c59c l     O .bss	00000002 checkDutyCycle(ACQ_Parameters_s*, short)::recording
1fff0200 l     O .dmabuffers	0002605c setup::data
2001c5a4 l     O .bss	00000004 loop::loopCount
2001c5a8 l     O .bss	00000002 loop::state
2001c5ac l     O .bss	00000004 loop::t0
00000000 l    df *ABS*	00000000 SPI.cpp
00002318 l     F .text	000001f8 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]
00000000 l    df *ABS*	00000000 Time.cpp
000027fc l     F .text	00000018 refreshCache(long) [clone .part.0]
2001c5b0 l     O .bss	00000004 cacheTime
2001c5b4 l     O .bss	00000007 tm
2001c5bc l     O .bss	00000004 sysTime
2001c5c0 l     O .bss	00000001 Status
2001c5c8 l     O .bss	00000004 prevMillis
20016dcc l     O .data	00000004 syncInterval
00013388 l     O .text	0000000c monthDays
2001c5cc l     O .bss	00000004 nextSyncTime
00000000 l    df *ABS*	00000000 output_pwm.cpp
00002b08 l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE
00000000 l    df *ABS*	00000000 input_i2s.cpp
00002b20 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE
00000000 l    df *ABS*	00000000 output_pt8211.cpp
00002b38 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE
00000000 l    df *ABS*	00000000 output_i2s.cpp
00002b50 l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE
00000000 l    df *ABS*	00000000 input_i2s_oct.cpp
00002b68 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E
00000000 l    df *ABS*	00000000 input_adc.cpp
00002b80 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE
00000000 l    df *ABS*	00000000 output_dac.cpp
00002b98 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE
00000000 l    df *ABS*	00000000 output_tdm.cpp
00002bb0 l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE
00000000 l    df *ABS*	00000000 input_adcs.cpp
00002bc8 l     F .text	00000030 _GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE
00000000 l    df *ABS*	00000000 input_i2s_quad.cpp
00002eb0 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E
20016260 l     O .dmabuffers	00000400 i2s_rx_buffer
00000000 l    df *ABS*	00000000 output_dacs.cpp
00002ec8 l     F .text	00000018 _GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE
00000000 l    df *ABS*	00000000 output_i2s_quad.cpp
00002fdc l     F .text	00000018 _GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE
00000000 l    df *ABS*	00000000 output_adat.cpp
00002ff4 l     F .text	00000018 _GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE
00000000 l    df *ABS*	00000000 input_tdm.cpp
0000300c l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE
00000000 l    df *ABS*	00000000 input_i2s_hex.cpp
00003024 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E
00000000 l    df *ABS*	00000000 input_pdm.cpp
0000303c l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE
00000000 l    df *ABS*	00000000 output_spdif.cpp
00003054 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE
00000000 l    df *ABS*	00000000 WireKinetis.cpp
2001c678 l     O .bss	00000001 TwoWire::isr()::receiving
00000000 l    df *ABS*	00000000 SD.cpp
0000326c l     F .text	00000024 _GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc
00000000 l    df *ABS*	00000000 SdVolume.cpp
0000336c l     F .text	00000084 SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]
00000000 l    df *ABS*	00000000 NXP_SDHC.cpp
00003550 l     F .text	00000094 SDHC_CMD_Do(unsigned long)
000035e4 l     F .text	00000044 SDHC_CMD12_StopTransferWaitForBusy()
2001c8dc l     O .bss	00000010 sdCardDesc
00000000 l    df *ABS*	00000000 SdFile.cpp
000037fc l     F .text	0000006c SdFile::sync() [clone .part.23] [clone .constprop.37]
00000000 l    df *ABS*	00000000 Sd2Card.cpp
00003fa0 l     F .text	00000010 _GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm
2001c8f0 l     O .bss	00000004 settings
2001c8f4 l     O .bss	00000001 chip_select_asserted
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00004864 l     F .text	0000001e FsCache::sync() [clone .part.2]
000048f0 l     F .text	00000034 ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]
00004924 l     F .text	0000002a ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
000054f0 l     F .text	00000032 FatFile::openRoot(FatVolume*) [clone .part.36]
0000560c l     F .text	00000094 FatFile::sync() [clone .part.40]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00005dc8 l     F .text	0000004a FatCache::sync() [clone .part.8]
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
000061e4 l     F .text	00000028 lfnGetChar(DirLfn_t*, unsigned char)
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00006ac0 l     F .text	00000018 SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]
00006ad8 l     F .text	00000022 SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
000070bc l     F .text	00000030 sdIrs()
000070ec l     F .text	00000018 isBusyCommandComplete()
00007104 l     F .text	00000010 isBusyCommandInhibit()
00007114 l     F .text	0000000c isBusyDMA()
00007120 l     F .text	00000014 isBusyFifoRead()
00007134 l     F .text	00000014 isBusyFifoWrite()
00007148 l     F .text	00000018 isBusyTransferComplete()
00007160 l     F .text	000000cc setSdclk(unsigned long)
00007290 l     F .text	00000028 waitTimeout(bool (*)())
000072b8 l     F .text	0000004c yieldTimeout(bool (*)())
00007334 l     F .text	0000005c cardCommand(unsigned long, unsigned long)
000073b0 l     F .text	00000064 readReg16(unsigned long, void*)
00007414 l     F .text	0000002c isBusyCMD13()
0000745c l     F .text	00000020 waitDmaStatus() [clone .part.6]
0000747c l     F .text	000000b4 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00007670 l     F .text	00000078 transferStop()
00007a20 l     F .text	000000ac cardCMD6(unsigned long, unsigned char*)
2001c900 l     O .bss	00000001 m_version2
2001c904 l     O .bss	00000010 m_cid
2001c914 l     O .bss	00000004 m_busyFcn
2001c918 l     O .bss	00000001 m_highCapacity
2001c91c l     O .bss	00000004 m_ocr
2001c920 l     O .bss	00000004 m_rca
2001c924 l     O .bss	00000004 m_irqstat
20016f18 l     O .data	00000001 m_errorCode
2001c928 l     O .bss	00000001 m_initDone
2001c92c l     O .bss	00000010 m_csd
2001c93c l     O .bss	00000001 m_dmaBusy
2001c940 l     O .bss	00000004 m_sdClkKhz
2001c944 l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
2001c949 l     O .bss	00000001 tx_noautoflush
2001c94c l     O .bss	00000004 tx_packet
2001c950 l     O .bss	00000001 transmit_previous_timeout
2001c954 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
2001c959 l     O .bss	00000001 calibrating
20016f19 l     O .data	00000001 analog_config_bits
2001c95a l     O .bss	00000001 analog_reference_internal
20016f1a l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
0000876c l     F .text	0000004c digitalWrite.part.1
000087b8 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_mem.c
20016f20 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
2001c960 l     O .bss	00000004 ep0_tx_ptr
2001c964 l     O .bss	00000010 rx_last
2001c974 l     O .bss	00000002 ep0_tx_len
2001c978 l     O .bss	00000040 ep0_rx0_buf
2001c9b8 l     O .bss	00000010 rx_first
2001c9c8 l     O .bss	00000001 ep0_tx_data_toggle
2001c9cc l     O .bss	00000040 ep0_rx1_buf
2001ca0c l     O .bss	00000010 tx_first
1fff0000 l     O .usbdescriptortable	000000a0 table
2001ca1c l     O .bss	00000010 tx_last
2001ca2c l     O .bss	00000008 setup
2001ca34 l     O .bss	00000001 ep0_tx_bdt_bank
2001ca38 l     O .bss	00000008 reply_buffer
2001ca44 l     O .bss	00000004 tx_state
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 yield.cpp
2001ca68 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 AudioStream.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 serial5.c
2001caf4 l     O .bss	00000004 rts_pin
2001caf8 l     O .bss	00000001 rx_buffer_head
2001caf9 l     O .bss	00000001 rx_buffer_tail
2001cafc l     O .bss	00000028 tx_buffer
2001cb24 l     O .bss	00000040 rx_buffer
2001cb64 l     O .bss	00000001 transmitting
2001cb65 l     O .bss	00000001 tx_buffer_tail
2001cb68 l     O .bss	00000004 transmit_pin
2001cb6c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
2001cb70 l     O .bss	00000004 rts_pin
2001cb74 l     O .bss	00000001 transmitting
2001cb75 l     O .bss	00000001 rx_buffer_tail
2001cb78 l     O .bss	00000028 tx_buffer
2001cba0 l     O .bss	00000040 rx_buffer
2001cbe0 l     O .bss	00000001 rx_buffer_head
2001cbe1 l     O .bss	00000001 tx_buffer_tail
2001cbe4 l     O .bss	00000004 transmit_pin
2001cbe8 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
2001cbec l     O .bss	00000004 rts_pin
2001cbf0 l     O .bss	00000001 rx_buffer_head
2001cbf1 l     O .bss	00000001 rx_buffer_tail
2001cbf4 l     O .bss	00000028 tx_buffer
2001cc1c l     O .bss	00000040 rx_buffer
2001cc5c l     O .bss	00000001 transmitting
2001cc5d l     O .bss	00000001 tx_buffer_tail
2001cc60 l     O .bss	00000004 transmit_pin
2001cc64 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
2001cc68 l     O .bss	00000004 rts_pin
2001cc6c l     O .bss	00000001 rx_buffer_head
2001cc6d l     O .bss	00000001 rx_buffer_tail
2001cc70 l     O .bss	00000040 tx_buffer
2001ccb0 l     O .bss	00000040 rx_buffer
2001ccf0 l     O .bss	00000001 transmitting
2001ccf1 l     O .bss	00000001 tx_buffer_tail
2001ccf4 l     O .bss	00000004 transmit_pin
2001ccf8 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
2001ccfc l     O .bss	00000004 rts_pin
2001cd00 l     O .bss	00000001 rx_buffer_head
2001cd01 l     O .bss	00000001 rx_buffer_tail
2001cd04 l     O .bss	00000028 tx_buffer
2001cd2c l     O .bss	00000040 rx_buffer
2001cd6c l     O .bss	00000001 transmitting
2001cd6d l     O .bss	00000001 tx_buffer_tail
2001cd70 l     O .bss	00000004 transmit_pin
2001cd74 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
20016f34 l     O .data	00000012 device_descriptor
20016f60 l     O .data	00000043 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
2001cd78 l     O .bss	00000004 rts_pin
2001cd7c l     O .bss	00000001 rx_buffer_head
2001cd7d l     O .bss	00000001 rx_buffer_tail
2001cd80 l     O .bss	00000028 tx_buffer
2001cda8 l     O .bss	00000040 rx_buffer
2001cde8 l     O .bss	00000001 transmitting
2001cde9 l     O .bss	00000001 tx_buffer_tail
2001cdec l     O .bss	00000004 transmit_pin
2001cdf0 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_fixunsdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 locale.c
0000b92c l     F .text	00000018 __get_current_locale
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strtod.c
0000c97c l     F .text	00000038 sulp
0001378c l     O .text	00000014 fpi.6173
000137b0 l     O .text	00000014 fpinan.6209
000137c8 l     O .text	00000028 tinytens
00000000 l    df *ABS*	00000000 strtol.c
0000d8b0 l     F .text	00000136 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
000137f0 l     O .text	00000010 zeroes.7258
00013844 l     O .text	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfscanf.c
00013854 l     O .text	00000022 basefix.7328
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000100cc l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
000100ec l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
000112e0 l     F .text	000000a8 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mprec.c
00013b88 l     O .text	0000000c p05.6087
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 strtoll.c
0001243c l     F .text	000001ac _strtoll_l.isra.0
00000000 l    df *ABS*	00000000 strtoul.c
0001260c l     F .text	00000168 _strtoul_l.isra.0
00000000 l    df *ABS*	00000000 strtoull.c
00012798 l     F .text	000001ec _strtoull_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vfscanf.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
20016fd8 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
20017980 l       .bss	00000000 __bss_start__
2001ce40 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00008724  w    F .text	00000006 adc0_isr
0000b1c4 g     F .text	0000002c .hidden __aeabi_dcmpun
000083a0 g     F .text	0000001c usb_serial_available
00012368 g     F .text	0000005e __any_on
0000b188 g     F .text	00000012 .hidden __aeabi_dcmple
0000a41c g     F .text	00000020 serial4_available
0000c72c g     F .text	000000ba strcpy
00002a74 g     F .text	0000006c setTime(int, int, int, int, int, int)
0000b0c4 g     F .text	0000007a .hidden __cmpdf2
0000a1f0 g     F .text	00000004 operator new[](unsigned int)
2001ca74 g     O .bss	00000004 AudioStream::memory_pool
0000782c g     F .text	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
00009bcc  w    F .text	000000c4 yield
00005be0 g     F .text	000001e8 FatFile::write(void const*, unsigned int)
0000b0c4 g     F .text	0000007a .hidden __eqdf2
00006a34  w    F .text	00000002 SdSpiCard::~SdSpiCard()
00003868 g     F .text	0000002a SdFile::addCluster()
00004380 g     F .text	000003d4 ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)
20016f48 g     O .data	00000018 usb_string_manufacturer_name_default
0000a514 g     F .text	00000020 serial_available
00005b68 g     F .text	00000076 FatFile::truncate()
20016ea8 g     O .data	0000006c Wire1
0000ac34 g     F .text	0000005a .hidden __floatdidf
000086dc  w    F .text	00000048 hard_fault_isr
00008724  w    F .text	00000006 dma_ch6_isr
2001ca78 g     O .bss	00000001 AudioStream::update_scheduled
2001c8f8 g     O .bss	00000004 FsDateTime::callback
20016d64 g     O .data	00000028 acqParameters
00009cec g     F .text	00000020 Print::println()
00003118 g     F .text	00000130 TwoWire::isr()
0000a2f0 g     F .text	00000020 serial2_available
2001caf0 g     O .bss	00000002 AudioStream::memory_used
00008724  w    F .text	00000006 uart0_lon_isr
00004280 g     F .text	000000fe ExFatFile::seekSet(unsigned long long)
00008be4 g     F .text	000000c8 usb_rx_memory
00009c90  w    F .text	00000002 serialEvent5()
00006a08  w    F .text	00000004 SdSpiCard::errorCode() const
00008724  w    F .text	00000006 dma_ch8_isr
000010f0 g     F .text	000008cc doMenu()
0000a640 g     F .text	00000020 serial6_available
0000c1ac g     F .text	00000002 __malloc_unlock
00003b00 g     F .text	00000068 Sd2Card::chipSelectHigh()
2001c8fc g     O .bss	00000004 FsVolume::m_cwv
00005710 g     F .text	000000be FatFile::open(FatFile*, char const*, int)
000085fc g     F .text	000000e0 analog_init
00008cac g     F .text	00000084 usb_tx
0000d890 g     F .text	00000020 _strtod_r
00008724  w    F .text	00000006 portcd_isr
0000ff7c g     F .text	0000004a _vdprintf_r
00003ae8 g     F .text	00000018 SdFile::write(unsigned char)
00012b68 g     F .text	00000082 _sfread_r
0000c044 g     F .text	000000c6 memmove
00009b24 g     F .text	00000098 MillisTimer::runFromTimer()
2001c640 g     O .bss	00000008 AudioOutputAnalogStereo::dma
0000b968 g     F .text	00000014 __locale_ctype_ptr
00011ae0 g     F .text	0000004c _Balloc
00008724  w    F .text	00000006 can1_rx_warn_isr
00013c04 g       .ARM.exidx	00000000 __exidx_end
00008724  w    F .text	00000006 dma_error_isr
00006094 g     F .text	0000003c FatPartition::freeChain(unsigned long)
2001ca60 g     O .bss	00000001 EventResponder::runningFromYield
00008148 g     F .text	0000001a SdSpiArduinoDriver::receive()
00006bf8 g     F .text	0000007c SdSpiCard::cardCommand(unsigned char, unsigned long)
00003248 g     F .text	0000000c i2c0_isr
00009cc0 g     F .text	0000002c Print::write(unsigned char const*, unsigned int)
0000b0b4 g     F .text	0000008a .hidden __gtdf2
0000b8d0 g     F .text	0000000c __errno
00008724  w    F .text	00000006 portd_isr
00008724  w    F .text	00000006 enet_error_isr
000133e0 g     O .text	00000020 TwoWire::i2c2_hardware
00000908 g     F .text	00000078 makeFilename(char*)
2001ca4c g     O .bss	00000004 EventResponder::firstInterrupt
2001c570 g     O .bss	00000014 patchCord2
00011a64 g     F .text	00000004 __localeconv_l
00006a38  w    F .text	0000000e SdSpiCard::~SdSpiCard()
00008724  w    F .text	00000006 tpm1_isr
00004d1c g     F .text	00000018 ExFatPartition::rootLength()
00000734  w    F .text	00000024 Print::println(__FlashStringHelper const*)
00006a0c  w    F .text	00000004 SdSpiCard::errorData() const
00009cac  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
000134f4 g     O .text	00000200 digital_pin_to_info_PGM
00005fec g     F .text	000000a8 FatPartition::allocContiguous(unsigned long, unsigned long*)
2001ce3c g     O .bss	00000004 errno
00006c74 g     F .text	00000054 SdSpiCard::readOCR(unsigned long*)
00008164 g     F .text	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00006510 g     F .text	00000388 FatFile::open(FatFile*, fname_t*, int)
00004c64 g     F .text	00000012 ExFatPartition::fatGet(unsigned long, unsigned long*)
0000c658 g     F .text	00000004 __seofread
00013c04 g       .ARM.exidx	00000000 _etext
00002510 g     F .text	00000134 _spi_dma_rxISR0()
20017980 g       .bss	00000000 _sbss
000038f8 g     F .text	000001f0 SdFile::write(void const*, unsigned int)
0000b150 g     F .text	00000010 .hidden __aeabi_cdcmple
00007238 g     F .text	0000000c SdioCard::errorData() const
2001c6d8 g     O .bss	00000200 SdVolume::cacheBuffer_
0000a1ec  w    F .text	00000002 serialEvent6()
0000b32c g     F .text	00000160 .hidden __aeabi_fadd
0000793c g     F .text	000000b4 SdioCard::writeSector(unsigned long, unsigned char const*)
0000b328 g     F .text	00000164 .hidden __subsf3
0000887c g     F .text	0000001c digitalRead
00008724  w    F .text	00000006 porte_isr
00001d20 g     F .text	000003c8 loop
00009f70 g     F .text	00000018 AudioStream::receiveReadOnly(unsigned int)
00008724  w    F .text	00000006 portb_isr
00008724  w    F .text	00000006 spi1_isr
0000a43c g     F .text	000000d8 uart3_status_isr
00009dd0  w    F .text	00000002 serialEvent1()
00003fec g     F .text	000000c4 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
00008724  w    F .text	00000006 mcm_isr
2001c148 g     O .bss	00000014 patchCord3
00007e60 g     F .text	000000cc SdioCard::readData(unsigned char*)
00009abc g     F .text	00000068 MillisTimer::addToActiveList()
0000a160 g     F .text	00000028 Stream::peekNextDigit()
00000530  w    F .text	0000001c c_uSD::~c_uSD()
00003460 g     F .text	000000f0 SdVolume::allocContiguous(unsigned long, unsigned long*)
00006b3c g     F .text	00000080 SdSpiCard::readData(unsigned char*, unsigned int)
2001ca50 g     O .bss	00000004 EventResponder::lastInterrupt
0000b56c g     F .text	00000024 .hidden __aeabi_f2lz
0000a310 g     F .text	0000010c uart1_status_isr
00006898 g     F .text	00000028 FsBaseFile::close()
000081f4 g     F .text	00000134 memcpy
00008724  w    F .text	00000006 randnum_isr
000118c8 g     F .text	00000180 __hexnan
0000b140 g     F .text	00000020 .hidden __aeabi_cdrcmple
00004c9c g     F .text	00000080 ExFatPartition::freeChain(unsigned long)
00005984 g     F .text	0000002a FatFile::peek()
0000da10 g     F .text	000016e4 _svfprintf_r
2001c8ec g     O .bss	00000004 SdFile::dateTime_
0000abc4 g     F .text	00000022 .hidden __floatsidf
20016d34 g     O .data	00000002 mustClose
2001c95c g     O .bss	00000004 systick_millis_count
0000b0bc g     F .text	00000082 .hidden __ltdf2
2001c6d0 g     O .bss	00000004 SdVolume::cacheMirrorBlock_
000086dc  w    F .text	00000048 bus_fault_isr
00008724  w    F .text	00000006 watchdog_isr
0000055c  w    F .text	0000004e mRecordQueue<137>::update()
0000b53c g     F .text	00000000 .hidden __aeabi_uldivmod
00003254 g     F .text	0000000c i2c1_isr
2001ca40 g     O .bss	00000001 usb_configuration
00008724  w    F .text	00000006 dma_ch11_isr
00000474  w    F .text	00000006 SdCardInterface::status()
000079f0 g     F .text	00000030 SdioCard::syncDevice()
000076ec g     F .text	000000cc SdioCard::writeData(unsigned char const*)
00000000  w      *UND*	00000000 __fini_array_end
00003310 g     F .text	0000005c SdVolume::cacheRawBlock(unsigned long, unsigned char)
00000614  w    F .text	00000058 StreamFile<FsBaseFile, unsigned long long>::available()
000059b0 g     F .text	00000040 FatFile::readDirCache(bool)
00009db8  w    F .text	00000002 serialEvent2()
000122c0 g     F .text	00000060 __ratio
00003260 g     F .text	0000000c i2c2_isr
2001ca7c g     O .bss	00000070 AudioStream::memory_pool_available_mask
2001c600 g     O .bss	00000008 AudioOutputAnalog::dma
20016f48  w    O .data	00000018 usb_string_manufacturer_name
2001ce34 g     O .bss	00000008 usb_rx_byte_count_data
00002ee0 g     F .text	000000fc AudioOutputI2SQuad::config_i2s()
00008724  w    F .text	00000006 pit1_isr
0000b97c g     F .text	00000010 malloc
2001c114 g     O .bss	00000004 maxNoise
00008724  w    F .text	00000006 dma_ch4_isr
000133c0 g     O .text	00000020 TwoWire::i2c1_hardware
20017eb0 g     O .bss	00000004 queue
0000a09c g     F .text	00000084 software_isr
00012d60  w    O .text	00000024 vtable for FsFile
00011a48 g     F .text	0000001c iswspace
00008724  w    F .text	00000006 dma_ch7_isr
00003078  w    F .text	0000001e TwoWire::read()
0000b494 g     F .text	0000001c .hidden __aeabi_i2f
000022fc  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00013a98 g     O .text	000000c8 __mprec_tens
000097fc g     F .text	000000f4 usb_init
2001caee g     O .bss	00000002 AudioStream::memory_pool_first_mask
00006a20  w    F .text	00000004 SdSpiCard::type() const
0000b240 g     F .text	00000040 .hidden __fixunsdfsi
00008724  w    F .text	00000006 lptmr_isr
2001cdfc g     O .bss	00000004 __malloc_top_pad
0000884c g     F .text	00000024 rtc_set
00012b2c g     F .text	0000003a __ssrefill_r
00006a48 g     F .text	00000076 SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
2001c624 g     O .bss	00000001 AudioInputI2SQuad::update_responsibility
00005184 g     F .text	000000e2 ExFatFile::truncate()
20016d30 g     O .data	00000000 .hidden __dso_handle
0000aba4 g     F .text	0000001e .hidden __aeabi_ui2d
00011a68 g     F .text	0000001c _localeconv_r
00012984 g     F .text	00000024 _strtoull_r
00008830 g     F .text	00000010 attachInterruptVector
00008100 g     F .text	00000048 SdSpiArduinoDriver::deactivate()
00011cf4 g     F .text	00000012 __i2b
20016d30 g       .data	00000000 _sdata
2001c5a0 g     O .bss	00000004 maxValue
000133a0 g     O .text	00000020 TwoWire::i2c0_hardware
00005e74 g     F .text	0000000e FatCache::sync()
0000b5dc g     F .text	000002e2 .hidden __udivmoddi4
0000a920 g     F .text	00000000 .hidden __aeabi_drsub
00005524 g     F .text	00000034 FatFile::addCluster()
0000c590 g     F .text	00000024 _sbrk_r
00006cc8 g     F .text	0000004a SdSpiCard::readRegister(unsigned char, void*)
00002dd8 g     F .text	000000d8 AudioInputI2SQuad::begin()
00007314 g     F .text	00000020 SdioCard::type() const
000001d0 g     F .text	000001f0 ResetHandler
00008328 g     F .text	00000048 usb_serial_getchar
00008724  w    F .text	00000006 can1_bus_off_isr
00008724  w    F .text	00000006 ftm2_isr
2001ce28 g     O .bss	00000008 usb_cdc_line_coding
00008870 g     F .text	0000000a digitalWrite
2001ca58 g     O .bss	00000004 EventResponder::lastYield
00008724  w    F .text	00000006 uart5_status_isr
0000a660 g     F .text	000000e4 lpuart0_status_isr
00003fc4 g     F .text	00000028 ExFatFile::openRoot(ExFatVolume*)
00013720 g     O .text	00000004 usb_endpoint_config_table
00008724  w    F .text	00000006 dma_ch9_isr
00000718  w    F .text	0000001c Print::write(char const*)
00000698  w    F .text	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
00008724  w    F .text	00000006 pit2_isr
0000b174 g     F .text	00000012 .hidden __aeabi_dcmplt
0000a80c g     F .text	00000020 serial3_available
2001cdf8 g     O .bss	00000004 __malloc_max_sbrked_mem
00003b68 g     F .text	000000b4 Sd2Card::chipSelectLow()
00008898 g     F .text	0000000a pinMode
00006fc4 g     F .text	00000042 SdSpiCard::writeStop()
2001c170 g     O .bss	00000400 tempBuffer
00008b30 g     F .text	0000004c usb_free
00008724  w    F .text	00000006 i2c3_isr
0000abe8 g     F .text	0000003a .hidden __extendsfdf2
0000f0f4 g     F .text	00000e88 __ssvfscanf_r
0000aee4 g     F .text	000001d0 .hidden __aeabi_ddiv
0000a92c g     F .text	00000276 .hidden __adddf3
2001c6d4 g     O .bss	00000004 SdVolume::sdCard_
20016dd0 g     O .data	0000006c Wire2
00007088 g     F .text	00000032 SdSpiCard::writeData(unsigned char const*)
00012134 g     F .text	000000d0 __b2d
00001bec  w    F .text	00000028 SdBase<FsVolume>::errorHalt(char const*)
00013bfc g       .ARM.exidx	00000000 __exidx_start
0000ac90 g     F .text	00000254 .hidden __aeabi_dmul
00002afc  w    F .text	0000000c DMAChannel::~DMAChannel()
00006ebc g     F .text	00000050 SdSpiCard::writeStart(unsigned long)
00008724  w    F .text	00000006 pit0_isr
2001ca5c g     O .bss	00000004 EventResponder::firstYield
00003894 g     F .text	00000064 SdFile::seekSet(unsigned long)
00013778 g     O .text	00000004 _global_impure_ptr
00008724  w    F .text	00000006 can1_error_isr
00003f14 g     F .text	0000008c Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)
000006e4  w    F .text	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000c1b0 g     F .text	000003de _realloc_r
0000b8dc g     F .text	00000050 __libc_init_array
2001ce40 g       .bss	00000000 __bss_end
0000306c  w    F .text	0000000c TwoWire::available()
00008724  w    F .text	00000006 can0_wakeup_isr
00004854 g     F .text	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
00007244 g     F .text	0000001c SdioCard::readCID(CID*)
00013994 g     O .text	00000100 __hexdig
0000500c g     F .text	000000ea ExFatFile::addDirCluster()
00008724  w    F .text	00000006 flash_cmd_isr
00007034 g     F .text	00000052 SdSpiCard::writeData(unsigned char, unsigned char const*)
0000372c g     F .text	000000d0 SDHC_CardWriteBlock(void const*, unsigned long)
00013b60 g     O .text	00000028 __mprec_bigtens
00011bc0 g     F .text	00000098 __s2b
00009c94  w    F .text	00000004 usb_serial_class::clear()
0000aba4 g     F .text	0000001e .hidden __floatunsidf
0000a82c g     F .text	000000d8 uart2_status_isr
0000873c g     F .text	0000002c _sbrk
00011f88 g     F .text	00000042 __mcmp
2001ca64 g     O .bss	00000004 MillisTimer::listWaiting
2001c608 g     O .bss	00000008 AudioOutputTDM::dma
20016f1c g     O .data	00000004 __brkval
2001c958 g     O .bss	00000001 usb_cdc_line_rtsdtr
000085b4 g     F .text	00000048 usb_serial_flush_callback
00013b94 g     F .text	00000000 _init
000055ec g     F .text	0000001e FatFile::cacheDirEntry(unsigned char)
00008724  w    F .text	00000006 svcall_isr
00009dd4 g     F .text	0000006c AudioStream::initialize_memory(audio_block_struct*, unsigned int)
00008724  w    F .text	00000006 dma_ch15_isr
0000b280 g     F .text	0000009e .hidden __aeabi_d2f
00002a10 g     F .text	00000020 day()
0000b328 g     F .text	00000164 .hidden __aeabi_fsub
00013400 g     O .text	00000024 vtable for TwoWire
00008724  w    F .text	00000006 uart1_error_isr
0001104c g     F .text	00000028 __libc_fini_array
0000c9b8 g     F .text	00000ed8 _strtod_l
00011898 g     F .text	00000030 __match
00008724  w    F .text	00000006 usbhs_phy_isr
2001c610 g     O .bss	00000008 AudioInputAnalogStereo::dma0
2001c584 g     O .bss	00000018 acq
2001ce40 g       .bss	00000000 _ebss
000078b4 g     F .text	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
000056c0 g     F .text	00000050 FatFile::preAllocate(unsigned long)
2001c650 g     O .bss	00000008 AudioOutputADAT::dma
00000684  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
00005e14 g     F .text	0000005e FatCache::read(unsigned long, unsigned char)
00011c58 g     F .text	00000040 __hi0bits
0000b1f0 g     F .text	0000004e .hidden __fixdfsi
00008724 g     F .text	00000006 unused_isr
00008724  w    F .text	00000006 spi0_isr
0000b4c0 g     F .text	0000007c .hidden __floatdisf
00008724  w    F .text	00000006 dma_ch3_isr
00002afc  w    F .text	0000000c DMAChannel::~DMAChannel()
200180b4 g     O .bss	00004000 diskBuffer
2001c0f4 g     O .bss	00000020 text
00000ca4 g     F .text	00000110 c_uSD::loadConfig(unsigned long*, int, long*, int)
00002a50 g     F .text	00000024 year()
0000a1f4 g     F .text	00000004 operator delete(void*, unsigned int)
00008724  w    F .text	00000006 flash_error_isr
0000a92c g     F .text	00000276 .hidden __aeabi_dadd
0000b0bc g     F .text	00000082 .hidden __ledf2
2001c638 g     O .bss	00000004 AudioInputI2SQuad::block_ch1
0000a1f8 g     F .text	00000020 serial5_available
00008724  w    F .text	00000006 uart5_error_isr
0000b590 g     F .text	0000004c .hidden __aeabi_f2ulz
00008724  w    F .text	00000006 rtc_seconds_isr
000132f4 g     O .text	00000094 SPIClass::spi0_hardware
00008724  w    F .text	00000006 pdb_isr
00011e38 g     F .text	000000a0 __pow5mult
0000ac24 g     F .text	0000006a .hidden __aeabi_ul2d
000086dc  w    F .text	00000048 usage_fault_isr
00008724  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00005f68 g     F .text	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
00008724  w    F .text	00000006 dma_ch14_isr
0000054c g     F .text	00000004 getTeensy3Time()
00000000  w      *UND*	00000000 __deregister_frame_info
2001ce30 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
00009bbc g     F .text	00000010 systick_isr
00008724  w    F .text	00000006 rtc_alarm_isr
00000758 g     F .text	000000b4 I2S_dividers(unsigned long*, unsigned long, unsigned long)
00006e0c g     F .text	00000076 SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
2001ca6c g     O .bss	00000004 AudioStream::first_update
00008724  w    F .text	00000006 dma_ch2_isr
00000980 g     F .text	0000006c wavHeader(unsigned long)
20016f24 g     O .data	00000010 Serial
2001ca70 g     O .bss	00000002 AudioStream::memory_used_max
00008724  w    F .text	00000006 ftm1_isr
00000550  w    F .text	0000000c AudioConnection::~AudioConnection()
00009cb4  w    F .text	00000006 usb_serial_class::write(unsigned char)
0000872c  w    F .text	0000000c startup_early_hook
00008724  w    F .text	00000006 dma_ch13_isr
00004dc8 g     F .text	0000008c ExFatFile::addCluster()
00008724  w    F .text	00000006 uart2_error_isr
00008370 g     F .text	00000030 usb_serial_peekchar
0000b1b0 g     F .text	00000012 .hidden __aeabi_dcmpgt
0000bf40 g     F .text	00000000 memchr
00005f00 g     F .text	00000066 FatPartition::fatPut(unsigned long, unsigned long)
20016fc0 g     O .data	00000016 usb_string_serial_number_default
000086dc g     F .text	00000048 fault_isr
00011110 g     F .text	000001d0 _free_r
000076e8 g     F .text	00000004 SdioCard::readStop()
00004890 g     F .text	00000060 FsCache::get(unsigned long, unsigned char)
0000b944 g     F .text	0000001c __locale_mb_cur_max
0000b19c g     F .text	00000012 .hidden __aeabi_dcmpge
00008724  w    F .text	00000006 usb_charge_isr
00009ca4  w    F .text	00000004 usb_serial_class::flush()
00012aa8 g     F .text	00000082 _sungetc_r
00008724  w    F .text	00000006 cmt_isr
0000a928 g     F .text	0000027a .hidden __aeabi_dsub
000060d0 g     F .text	00000114 FatPartition::init(BlockDeviceInterface*, unsigned char)
00008724  w    F .text	00000006 usbhs_isr
2001797c g     O .data	00000004 __malloc_sbrk_base
00009c9c  w    F .text	00000004 usb_serial_class::read()
00008724  w    F .text	00000006 ftm3_isr
000125e8 g     F .text	00000024 _strtoll_r
00008724  w    F .text	00000006 tsi0_isr
2001799c g     O .bss	0000050c uSD
0000ac24 g     F .text	0000006a .hidden __floatundidf
00008768  w    F .text	00000002 __cxa_pure_virtual
00011ed8 g     F .text	000000ae __lshift
00008724  w    F .text	00000006 spi2_isr
00004d70 g     F .text	00000058 exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
2001c618 g     O .bss	00000008 AudioInputAnalogStereo::dma1
0000b494 g     F .text	0000001c .hidden __floatsisf
000129a8 g     F .text	00000100 __ssprint_r
00009dbc  w    F .text	00000002 serialEvent4()
00012c64 g     F .text	0000005e _vasnprintf_r
00002cac g     F .text	0000012c AudioInputI2SQuad::update()
00009cbc  w    F .text	00000002 serialEvent()
2001c9c9 g     O .bss	00000001 usb_reboot_timer
2001c5d0 g     O .bss	00000008 AudioOutputPWM::dma
00010028 g     F .text	000000a4 __register_exitproc
00004754 g     F .text	000000fe ExFatFile::open(ExFatFile*, char const*, int)
00002ae0 g     F .text	0000001c setSyncProvider(long (*)())
0000c8dc g     F .text	000000a0 strncmp
00000f4c g     F .text	000001a4 checkDutyCycle(ACQ_Parameters_s*, short)
000083bc g     F .text	00000038 usb_serial_flush_input
00011d08 g     F .text	00000130 __multiply
000084fc g     F .text	00000018 usb_serial_putchar
00000022 g       *ABS*	00000000 _teensy_model_identifier
2001ce00 g     O .bss	00000028 __malloc_current_mallinfo
00012204 g     F .text	000000ba __d2b
00008724  w    F .text	00000006 can0_bus_off_isr
00007304  w    F .text	0000000e SdioCard::~SdioCard()
2001ca35 g     O .bss	00000001 usb_rx_memory_needed
000077b8 g     F .text	00000074 SdioCard::writeStart(unsigned long)
00012774 g     F .text	00000024 _strtoul_r
00008d30 g     F .text	00000acc usb_isr
0000b8c4 g     F .text	0000000c __cxa_atexit
000040b0 g     F .text	0000019e ExFatFile::read(void*, unsigned int)
0000a06c g     F .text	00000030 AudioStream::update_setup()
0000abc4 g     F .text	00000022 .hidden __aeabi_i2d
0000b56c g     F .text	00000024 .hidden __fixsfdi
00004950 g     F .text	0000000e FsCache::sync()
0000a1e4 g     F .text	00000006 Stream::parseInt()
20016d8c g     O .data	00000040 SPI
0000bfe0 g     F .text	00000062 memcmp
000136f4  w    O .text	00000028 vtable for usb_serial_class
00008184 g     F .text	00000016 SdSpiArduinoDriver::send(unsigned char)
00008724  w    F .text	00000006 uart3_error_isr
0000b4b0 g     F .text	0000008c .hidden __floatundisf
20016d3c g     O .data	00000005 postfix
000081f0  w    F .text	00000004 sdCsWrite(unsigned char, bool)
0000a120 g     F .text	00000040 Stream::timedPeek()
0000c600 g     F .text	00000058 sscanf
2001ca54 g     O .bss	00000004 MillisTimer::listActive
0000b8c0  w    F .text	00000002 .hidden __aeabi_ldiv0
2001c660 g     O .bss	00000008 AudioInputI2SHex::dma
00008724  w    F .text	00000006 porta_isr
0000aee4 g     F .text	000001d0 .hidden __divdf3
00000db4 g     F .text	00000198 setWakeupCallandSleep(unsigned long)
00012320 g     F .text	00000046 __copybits
200169d0 g     O .usbbuffers	00000360 usb_buffer_memory
00006d24 g     F .text	00000098 SdSpiCard::sectorCount()
00008724  w    F .text	00000006 low_voltage_isr
20017570 g     O .data	00000408 __malloc_av_
0000b48c g     F .text	00000024 .hidden __aeabi_ui2f
00008724  w    F .text	00000006 can0_error_isr
00008984 g     F .text	0000016c _init_Teensyduino_internal_
20016d38 g     O .data	00000004 outptr
0000ac90 g     F .text	00000254 .hidden __muldf3
0000855c g     F .text	00000058 usb_serial_flush_output
00008724  w    F .text	00000006 dma_ch12_isr
2001c5d8 g     O .bss	00000008 AudioInputI2S::dma
0000c1a8 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
0000620c g     F .text	0000024c FatFile::parsePathName(char const*, fname_t*, char const**)
00008724  w    F .text	00000006 can1_wakeup_isr
20016800 g     O .dmabuffers	000001d0 _VectorsRam
0000819c g     F .text	00000052 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
2001c63c g     O .bss	00000004 AudioInputI2SQuad::block_ch2
00012cc4 g     F .text	0000005e _calloc_r
00008724  w    F .text	00000006 pit3_isr
2001c5c4 g     O .bss	00000004 getTimePtr
00008724  w    F .text	00000006 enet_rx_isr
00004fac g     F .text	0000005e ExFatFile::sync()
00007440 g     F .text	0000001c SdioCard::isBusy()
00008724  w    F .text	00000006 portc_isr
00006e84 g     F .text	00000038 SdSpiCard::readStop()
0000080c g     F .text	000000fc I2S_modification(unsigned long, unsigned short, int)
2001c62c g     O .bss	00000008 AudioInputI2SQuad::dma
0000c10c g     F .text	0000009a memset
00009dc0 g     F .text	00000010 main
000033f0 g     F .text	00000070 SdVolume::fatGet(unsigned long, unsigned long*) const
2001c5e8 g     O .bss	00000008 AudioOutputI2S::dma
2001cdf4 g     O .bss	00000004 __malloc_max_total_mem
00004960 g     F .text	000000b4 ExFatPartition::bitmapFind(unsigned long, unsigned long)
0000b4c0 g     F .text	0000007c .hidden __aeabi_l2f
00002910 g     F .text	000000a0 now()
00005268 g     F .text	00000288 ExFatFile::write(void const*, unsigned int)
000086dc  w    F .text	00000048 memmanage_fault_isr
20016d44 g     O .data	00000020 snipParameters
0000a744 g     F .text	0000007c usb_init_serialnumber
0000d9e8 g     F .text	00000024 _strtol_r
0000b280 g     F .text	0000009e .hidden __truncdfsf2
00013bf8 g       .text	00000000 __init_array_end
00010218 g     F .text	00000e34 _dtoa_r
0000b99c g     F .text	00000570 _malloc_r
00008724  w    F .text	00000006 debugmonitor_isr
0000ffe0 g     F .text	0000001a __ascii_wctomb
0000ac34 g     F .text	0000005a .hidden __aeabi_l2d
2001c5f0 g     O .bss	00000008 AudioInputI2SOct::dma
00012bec g     F .text	00000078 __submore
000099f4 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
00002644 g     F .text	00000008 SPIClass::transfer(void const*, void*, unsigned int)
00000031 g       *ABS*	00000000 __rtc_localtime
000088a4 g     F .text	00000044 micros
00000000  w      *UND*	00000000 __libc_fini
000009ec g     F .text	00000070 c_uSD::init()
0000b4b0 g     F .text	0000008c .hidden __aeabi_ul2f
00008724  w    F .text	00000006 cmp1_isr
0000b590 g     F .text	0000004c .hidden __fixunssfdi
00008724  w    F .text	00000006 ftm0_isr
00004e54 g     F .text	00000158 ExFatFile::syncDir()
00011074 g     F .text	0000009c _malloc_trim_r
20016fbc g     O .data	00000004 string0
00003628 g     F .text	00000104 SDHC_CardReadBlock(void*, unsigned long)
000083f4 g     F .text	00000108 usb_serial_write
00008738  w    F .text	00000002 startup_late_hook
00009ca0  w    F .text	00000004 usb_serial_class::available()
00000a5c g     F .text	00000120 c_uSD::close()
00005b5c g     F .text	0000000c FatFile::sync()
20016fa4  w    O .data	00000016 usb_string_product_name
000088e8 g     F .text	0000009c delay
0000b0c4 g     F .text	0000007a .hidden __nedf2
00008724  w    F .text	00000006 tpm0_isr
2001ca48 g     O .bss	00000002 dma_channel_allocated_mask
00012d30  w    O .text	0000000c vtable for mRecordQueue<137>
00013bf8 g     F .fini	00000000 _fini
20016f14 g     O .data	00000004 SdVolume::cacheBlockNumber_
000030f0 g     F .text	00000026 TwoWire::write(unsigned char)
2001c5e0 g     O .bss	00000008 AudioOutputPT8211::dma
00002a30 g     F .text	00000020 month()
00001c14 g     F .text	0000010c c_uSD::write(short*, long)
00006dbc g     F .text	00000050 SdSpiCard::readStart(unsigned long)
00009d1c g     F .text	0000001c Print::printf(char const*, ...)
0000c5b4 g     F .text	0000004c sprintf
00008724  w    F .text	00000006 i2s0_rx_isr
00008724  w    F .text	00000006 uart4_error_isr
000056a0 g     F .text	0000001e FatFile::close()
00005e84 g     F .text	0000000c FatPartition::clusterStartSector(unsigned long) const
000100e0 g     F .text	0000000c atexit
0000728c  w    F .text	00000002 SdioCard::~SdioCard()
0000066c  w    F .text	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
0000fffc g     F .text	0000002c _write_r
2001c67c g     O .bss	00000054 SD
0000759c g     F .text	000000d4 SdioCard::erase(unsigned long, unsigned long)
0000b320 g     F .text	0000016c .hidden __aeabi_frsub
00009ee8 g     F .text	00000054 AudioStream::release(audio_block_struct*)
00008724  w    F .text	00000006 can0_message_isr
0000a908 g     F .text	0000000c nanf
20017400 g     O .data	00000004 _impure_ptr
00008724  w    F .text	00000006 can1_message_isr
00004250 g     F .text	0000002e ExFatFile::peek()
00012d3c  w    O .text	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
2001c670 g     O .bss	00000008 AudioOutputSPDIF::dma
00011a84 g     F .text	0000005c _mbrtowc_r
00008724  w    F .text	00000006 nmi_isr
20016e3c g     O .data	0000006c Wire
00006458 g     F .text	000000b6 FatFile::lfnUniqueSfn(fname_t*)
00009f3c g     F .text	00000034 AudioStream::transmit(audio_block_struct*, unsigned char)
0000722c g     F .text	0000000c SdioCard::errorCode() const
000057d0 g     F .text	0000000e FatFile::open(FatVolume*, char const*, int)
000006d0  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
00013ba0 g       .text	00000000 __preinit_array_end
00000498 g     F .text	00000098 dateTime(unsigned short*, unsigned short*, unsigned char*)
00006a34  w    F .text	00000002 SdSpiCard::~SdSpiCard()
2001c658 g     O .bss	00000008 AudioInputTDM::dma
00008724  w    F .text	00000006 sdhc_isr
000029d0 g     F .text	00000020 minute()
00004a14 g     F .text	000000e0 ExFatPartition::init(BlockDeviceInterface*, unsigned char)
000050f8 g     F .text	0000008a ExFatFile::preAllocate(unsigned long long)
00004bd8 g     F .text	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
00006f0c g     F .text	000000b8 SdSpiCard::erase(unsigned long, unsigned long)
0000bf0c g     F .text	0000002a __ascii_mbtowc
00006afc g     F .text	0000003e SdSpiCard::isBusy()
000120e0 g     F .text	00000054 __ulp
00013444 g     O .text	00000058 vtable for SdSpiCard
00009e40 g     F .text	000000a8 AudioStream::allocate()
20017eb4 g     O .bss	00000200 header
00006d1c  w    F .text	00000008 SdSpiCard::readCID(CID*)
00003098  w    F .text	00000016 TwoWire::peek()
000030b0  w    F .text	00000002 TwoWire::flush()
000019bc g     F .text	00000198 setup
00013724 g     O .text	00000054 usb_descriptor_list
00008b7c g     F .text	0000003c usb_rx
00007390 g     F .text	00000020 SdioCard::status()
00003c1c g     F .text	00000054 Sd2Card::waitNotBusy(unsigned int)
00008724  w    F .text	00000006 dma_ch10_isr
00000470  w    F .text	00000002 Print::flush()
0000b240 g     F .text	00000040 .hidden __aeabi_d2uiz
00000b7c g     F .text	00000128 c_uSD::storeConfig(unsigned long*, int, long*, int)
2001c0dc g     O .bss	00000014 patchCord1
00008724  w    F .text	00000006 uart0_error_isr
2001c15c g     O .bss	00000014 patchCord4
00008af0 g     F .text	00000040 usb_malloc
000057ec g     F .text	00000198 FatFile::read(void*, unsigned int)
00008724  w    F .text	00000006 i2s0_isr
000057e0 g     F .text	0000000c FatFile::openRoot(FatVolume*)
20030000 g       .bss	00000000 _estack
00006a04 g     F .text	00000004 operator new(unsigned int, unsigned long*)
00006d14  w    F .text	00000008 SdSpiCard::readCSD(csd_t*)
000099bc g     F .text	00000038 DMAChannel::release()
00008514 g     F .text	00000048 usb_serial_write_buffer_free
00006bbc g     F .text	0000003c SdSpiCard::waitNotBusy(unsigned short)
00008724  w    F .text	00000006 enet_timer_isr
00009f88 g     F .text	00000068 AudioConnection::connect()
0000b160 g     F .text	00000012 .hidden __aeabi_dcmpeq
00003d28 g     F .text	00000060 Sd2Card::waitStartBlock()
00002814 g     F .text	000000fc makeTime(tmElements_t const&)
2001c668 g     O .bss	00000008 AudioInputPDM::dma
000030b4 g     F .text	0000003a TwoWire::write(unsigned char const*, unsigned int)
00009d0c  w    F .text	0000000e _write
20017980 g       .data	00000000 _edata
00004c78 g     F .text	00000024 ExFatPartition::fatPut(unsigned long, unsigned long)
0000728c  w    F .text	00000002 SdioCard::~SdioCard()
00008724  w    F .text	00000006 i2s0_tx_isr
00008724  w    F .text	00000006 adc1_isr
00002bf8 g     F .text	000000b4 AudioInputI2SQuad::isr()
00007008 g     F .text	0000002c SdSpiCard::syncDevice()
00005558 g     F .text	00000094 FatFile::addDirCluster()
00009ca8  w    F .text	00000004 usb_serial_class::availableForWrite()
00008724  w    F .text	00000006 cmp0_isr
0000a7c0 g     F .text	0000004c ultoa
00013424 g     O .text	00000018 vtable for SdFile
000029f0 g     F .text	00000020 second()
00001b54  w    F .text	00000098 SdBase<FsVolume>::errorHalt(Print*)
000068c0 g     F .text	00000080 FsBaseFile::open(FsVolume*, char const*, int)
00009a74 g     F .text	00000044 EventResponder::runFromInterrupt()
20017978 g     O .data	00000004 __malloc_trim_threshold
00009c98  w    F .text	00000004 usb_serial_class::peek()
00009ff0 g     F .text	0000007a AudioConnection::disconnect()
00003e48 g     F .text	000000cc Sd2Card::writeData(unsigned char, unsigned char const*)
0000b48c g     F .text	00000024 .hidden __floatunsisf
00011fcc g     F .text	00000114 __mdiff
0000727c g     F .text	00000010 SdioCard::readOCR(unsigned long*)
0000b1f0 g     F .text	0000004e .hidden __aeabi_d2iz
00004c0c g     F .text	00000058 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
2001c948 g     O .bss	00000001 usb_cdc_transmit_flush_timer
2001caf2 g     O .bss	00000002 AudioStream::cpu_cycles_total
00008724  w    F .text	00000006 pit_isr
000029b0 g     F .text	00000020 hour()
00003c70 g     F .text	000000b8 Sd2Card::cardCommand(unsigned char, unsigned long)
000076e8 g     F .text	00000004 SdioCard::writeStop()
00003290 g     F .text	00000080 SdVolume::cacheFlush()
2001c634 g     O .bss	00000002 AudioInputI2SQuad::block_offset
00006a24  w    F .text	00000010 SdSpiCard::writeSector(unsigned long, unsigned char const*)
000123c8 g     F .text	00000072 __sccl
00003fb0 g     F .text	00000014 ExFatFile::close()
00013880 g     O .text	00000101 _ctype_
00008724  w    F .text	00000006 dac0_isr
00006a10  w    F .text	00000010 SdSpiCard::readSector(unsigned long, unsigned char*)
00013ba0 g       .text	00000000 __init_array_start
0000b8c0  w    F .text	00000002 .hidden __aeabi_idiv0
00008724  w    F .text	00000006 can1_tx_warn_isr
0000b1c4 g     F .text	0000002c .hidden __unorddf2
00003d88 g     F .text	000000c0 Sd2Card::SD_readBlock(unsigned long, unsigned char*)
0000a534 g     F .text	0000010c uart0_status_isr
00008724  w    F .text	00000006 mcg_isr
0000a188 g     F .text	0000005a Stream::parseInt(char)
00000400 g     O .text	00000010 flashconfigbytes
000098f0 g     F .text	000000cc DMAChannel::begin(bool)
0000c800 g     F .text	000000dc strlen
0000b960 g     F .text	00000006 __locale_ctype_ptr_l
2001c628 g     O .bss	00000004 AudioInputI2SQuad::block_ch4
0000b150 g     F .text	00000010 .hidden __aeabi_cdcmpeq
0000b0b4 g     F .text	0000008a .hidden __gedf2
000059f0 g     F .text	00000094 FatFile::seekSet(unsigned long)
00011388 g     F .text	00000510 __gethex
20016fa4 g     O .data	00000016 usb_string_product_name_default
2001c648 g     O .bss	00000008 AudioOutputI2SQuad::dma
0000ffc8 g     F .text	00000018 vdprintf
00008724  w    F .text	00000006 dma_ch1_isr
00007530 g     F .text	0000006c SdioCard::sectorCount()
00006940 g     F .text	000000c4 FsVolume::begin(BlockDeviceInterface*)
00000530  w    F .text	0000001c c_uSD::~c_uSD()
00008bb8 g     F .text	0000002c usb_tx_packet_count
0000c65c g     F .text	000000ce strchr
0001349c g     O .text	00000058 vtable for SdioCard
0000abe8 g     F .text	0000003a .hidden __aeabi_f2d
00008724  w    F .text	00000006 dma_ch5_isr
00008724  w    F .text	00000006 can0_rx_warn_isr
2001c620 g     O .bss	00000004 AudioInputI2SQuad::block_ch3
00008724  w    F .text	00000006 can0_tx_warn_isr
0000a218 g     F .text	000000d8 uart4_status_isr
00007f2c g     F .text	00000074 SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
2001c5f8 g     O .bss	00000008 AudioInputAnalog::dma
2001caec g     O .bss	00000002 AudioStream::cpu_cycles_total_max
00008070 g     F .text	00000090 SdSpiArduinoDriver::activate()
0000a928 g     F .text	0000027a .hidden __subdf3
00013ba0 g       .text	00000000 __preinit_array_start
00012d24  w    O .text	0000000c vtable for AudioStream
00004af4 g     F .text	000000a6 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
00011c98 g     F .text	0000005a __lo0bits
00004b9c g     F .text	0000003a ExFatPartition::chainSize(unsigned long)
00005a84 g     F .text	000000d6 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
0000a904  w    F .text	00000002 serialEvent3()
0000a914 g     F .text	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
00008840 g     F .text	0000000c rtc_get
00008724  w    F .text	00000006 cmp2_isr
0000b32c g     F .text	00000160 .hidden __addsf3
00009ab8 g     F .text	00000004 pendablesrvreq_isr
00000550  w    F .text	0000000c AudioConnection::~AudioConnection()
0000046c  w    F .text	00000004 Print::availableForWrite()
20017404 g     O .data	0000016c __global_locale
00008724  w    F .text	00000006 wakeup_isr
00007acc g     F .text	00000394 SdioCard::begin(SdioConfig)
00004884 g     F .text	0000000c FsCache::invalidate()
00008724  w    F .text	00000006 cmp3_isr
0000264c g     F .text	000001b0 breakTime(long, tmElements_t&)
00009d38 g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
00005e90 g     F .text	0000006e FatPartition::fatGet(unsigned long, unsigned long*)
0000b98c g     F .text	00000010 free
2001c8d8 g     O .bss	00000001 SdVolume::cacheDirty_
00008724  w    F .text	00000006 tpm2_isr
00011b40 g     F .text	00000080 __multadd
00011b2c g     F .text	00000012 _Bfree
00013394 g     O .text	0000000c vtable for AudioInputI2SQuad
00008724  w    F .text	00000006 dma_ch0_isr
20016fc0  w    O .data	00000016 usb_string_serial_number
00008724  w    F .text	00000006 enet_tx_isr
00004d34 g     F .text	0000003a exFatHashName(char const*, unsigned int, unsigned short)
00007fa0 g     F .text	000000d0 SdioCard::readSector(unsigned long, unsigned char*)
00007260 g     F .text	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text:

00000000 <_VectorsFlash>:
  str = fsFmtField(str, 2*(time & 31) + sec100/100, '.');
  *--str = ':';
  return fsFmtTime(str, time);
}
//------------------------------------------------------------------------------
char* fsFmtTimeZone(char* str, int8_t tz) {
       0:	... ....%.......
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      10:	................
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      20:	............%...
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      30:	%...............
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
      40:	%...%...%...%...
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      50:	%...%...%...%...
      tz = -tz;
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      60:	%...%...%...%...
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      *--str = sign;
    }
    *--str = 'C';
    *--str = 'T';
      70:	%...%...%...%...
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      80:	%...%...%...%...
      90:	%...%...%...%...
      a0:	I2..U2..%...%...
      b0:	%...%...%...5...
      c0:	%.......%...-...
      d0:	%...=...%...%...
      e0:	%...%...%...%...
      f0:	%...%...%...%...
     100:	%...%...%...%...
     110:	%...1...%...%...
     120:	%...%...%...%...
     130:	%...%...%...%...
     140:	....%.......%...
     150:	%...%...%...%...
     160:	%...%...a2..%...
     170:	%...%...%...%...
     180:	%...%...%...%...
     190:	%...%...a...%...
     1a0:	%...%...%...%...
     1b0:	%...%...%...%...
     1c0:	%...%...%...%...

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #356]	; (338 <ResetHandler+0x168>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	872c <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #336]	; (33c <ResetHandler+0x16c>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #332]	; (340 <ResetHandler+0x170>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #332]	; (344 <ResetHandler+0x174>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #332]	; (348 <ResetHandler+0x178>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #328]	; (34c <ResetHandler+0x17c>)
     202:	ldr	r2, [pc, #332]	; (350 <ResetHandler+0x180>)
     204:	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	ldr	r3, [pc, #332]	; (354 <ResetHandler+0x184>)
     208:	ldrb	r2, [r3, #0]
     20a:	lsls	r1, r2, #28
     20c:	bpl.n	216 <ResetHandler+0x46>
     20e:	ldrb	r2, [r3, #0]
     210:	orr.w	r2, r2, #8
     214:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	ldr	r3, [pc, #320]	; (358 <ResetHandler+0x188>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	ldr	r1, [pc, #320]	; (35c <ResetHandler+0x18c>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	movs	r2, #170	; 0xaa
     21c:	strb	r2, [r3, #0]
     21e:	ldr	r2, [pc, #320]	; (360 <ResetHandler+0x190>)
     220:	ldr	r3, [pc, #320]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	cmp	r3, r1
     224:	bcs.n	230 <ResetHandler+0x60>
     226:	ldr.w	r0, [r2, #4]!
     22a:	str.w	r0, [r3], #4
     22e:	b.n	222 <ResetHandler+0x52>
     230:	ldr	r3, [pc, #308]	; (368 <ResetHandler+0x198>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	ldr	r1, [pc, #312]	; (36c <ResetHandler+0x19c>)
     234:	movs	r2, #0
     236:	cmp	r3, r1
     238:	bcs.n	240 <ResetHandler+0x70>
     23a:	str.w	r2, [r3], #4
     23e:	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	ldr	r1, [pc, #300]	; (370 <ResetHandler+0x1a0>)
     242:	ldr	r2, [pc, #304]	; (374 <ResetHandler+0x1a4>)
     244:	movs	r3, #0
     246:	ldr.w	r0, [r2, r3, lsl #2]
     24a:	str.w	r0, [r1, r3, lsl #2]
     24e:	adds	r3, #1
     250:	cmp	r3, #116	; 0x74
     252:	bne.n	246 <ResetHandler+0x76>
     254:	ldr	r3, [pc, #288]	; (378 <ResetHandler+0x1a8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	ldr	r2, [pc, #292]	; (37c <ResetHandler+0x1ac>)
     258:	movs	r1, #128	; 0x80
     25a:	strb.w	r1, [r3], #1
     25e:	cmp	r3, r2
     260:	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	ldr	r3, [pc, #284]	; (380 <ResetHandler+0x1b0>)
     264:	ldr	r2, [pc, #264]	; (370 <ResetHandler+0x1a0>)
     266:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	ldr	r3, [pc, #280]	; (384 <ResetHandler+0x1b4>)
     26a:	movs	r2, #138	; 0x8a
     26c:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	sub.w	r3, r3, #4096	; 0x1000
     272:	movs	r2, #36	; 0x24
     274:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	movs	r2, #160	; 0xa0
     278:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	ldrb	r2, [r3, #6]
     27c:	lsls	r2, r2, #30
     27e:	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	ldrb	r2, [r3, #6]
     282:	lsls	r4, r2, #27
     284:	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	ldr	r2, [pc, #256]	; (388 <ResetHandler+0x1b8>)
     288:	ldrb	r3, [r2, #6]
     28a:	and.w	r3, r3, #12
     28e:	cmp	r3, #8
     290:	ldr	r3, [pc, #244]	; (388 <ResetHandler+0x1b8>)
     292:	bne.n	288 <ResetHandler+0xb8>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(2);
    #elif F_CPU == 120000000
	MCG_C5 = MCG_C5_PRDIV0(1);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(14);
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     294:	movs	r2, #1
     296:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
     298:	movs	r2, #72	; 0x48
     29a:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     29c:	ldrb	r2, [r3, #6]
     29e:	lsls	r0, r2, #26
     2a0:	bpl.n	29c <ResetHandler+0xcc>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2a2:	ldr	r2, [pc, #228]	; (388 <ResetHandler+0x1b8>)
     2a4:	ldrb	r1, [r2, #6]
     2a6:	ldr	r3, [pc, #224]	; (388 <ResetHandler+0x1b8>)
     2a8:	lsls	r1, r1, #25
     2aa:	bpl.n	2a4 <ResetHandler+0xd4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     2ac:	ldr	r2, [pc, #220]	; (38c <ResetHandler+0x1bc>)
     2ae:	ldr	r1, [pc, #224]	; (390 <ResetHandler+0x1c0>)
     2b0:	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2b2:	movs	r1, #2
     2b4:	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2b6:	movs	r2, #32
     2b8:	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ba:	ldrb	r2, [r3, #6]
     2bc:	and.w	r2, r2, #12
     2c0:	cmp	r2, #12
     2c2:	bne.n	2ba <ResetHandler+0xea>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2c4:	ldr	r3, [pc, #204]	; (394 <ResetHandler+0x1c4>)
     2c6:	ldr	r2, [pc, #208]	; (398 <ResetHandler+0x1c8>)
     2c8:	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2ca:	ldr	r2, [pc, #208]	; (39c <ResetHandler+0x1cc>)
     2cc:	ldr	r4, [pc, #208]	; (3a0 <ResetHandler+0x1d0>)
     2ce:	ldr	r3, [r2, #0]
     2d0:	ands.w	r3, r3, #256	; 0x100
     2d4:	bne.n	2de <ResetHandler+0x10e>
		RTC_SR = 0;
     2d6:	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2d8:	mov.w	r3, #5376	; 0x1500
     2dc:	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2de:	ldr	r3, [pc, #196]	; (3a4 <ResetHandler+0x1d4>)
     2e0:	ldr	r2, [pc, #196]	; (3a8 <ResetHandler+0x1d8>)
     2e2:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2e4:	movs	r2, #0
     2e6:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2e8:	movs	r2, #7
     2ea:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2ee:	ldr	r2, [pc, #188]	; (3ac <ResetHandler+0x1dc>)
     2f0:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2f4:	cpsie	i

	_init_Teensyduino_internal_();
     2f6:	bl	8984 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2fa:	ldr	r3, [r4, #0]
     2fc:	lsls	r2, r3, #31
     2fe:	bpl.n	30c <ResetHandler+0x13c>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     300:	ldr	r0, [pc, #172]	; (3b0 <ResetHandler+0x1e0>)
     302:	bl	884c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     306:	ldr	r3, [pc, #172]	; (3b4 <ResetHandler+0x1e4>)
     308:	ldr	r2, [pc, #172]	; (3b8 <ResetHandler+0x1e8>)
     30a:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     30c:	ldr	r3, [pc, #172]	; (3bc <ResetHandler+0x1ec>)
     30e:	ldrb	r3, [r3, #0]
     310:	lsls	r3, r3, #25
     312:	bpl.n	328 <ResetHandler+0x158>
     314:	ldr	r4, [pc, #156]	; (3b4 <ResetHandler+0x1e4>)
     316:	ldr	r3, [pc, #160]	; (3b8 <ResetHandler+0x1e8>)
     318:	ldr	r2, [r4, #0]
     31a:	cmp	r2, r3
     31c:	bne.n	328 <ResetHandler+0x158>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     31e:	ldr	r0, [pc, #144]	; (3b0 <ResetHandler+0x1e0>)
     320:	bl	884c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     324:	movs	r3, #0
     326:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     328:	bl	b8dc <__libc_init_array>

	startup_late_hook();
     32c:	bl	8738 <startup_late_hook>
	main();
     330:	bl	9dc0 <main>
     334:	b.n	334 <ResetHandler+0x164>
     336:	nop
     338:	.word	0x4005200e
     33c:	.word	0x40048030
     340:	.word	0x00043f82
     344:	.word	0x2b000001
     348:	.word	0xe000ed88
     34c:	.word	0xe0082000
     350:	.word	0x85000003
     354:	.word	0x4007d002
     358:	.word	0x4007e000
     35c:	.word	0x20017980
     360:	.word	0x00013c00
     364:	.word	0x20016d30
     368:	.word	0x20017980
     36c:	.word	0x2001ce40
     370:	.word	0x20016800
     374:	.word	0x00000000
     378:	.word	0xe000e400
     37c:	.word	0xe000e464
     380:	.word	0xe000ed08
     384:	.word	0x40065000
     388:	.word	0x40064000
     38c:	.word	0x40048044
     390:	.word	0x01030000
     394:	.word	0x40048004
     398:	.word	0x000510c0
     39c:	.word	0x4003d010
     3a0:	.word	0x4003d014
     3a4:	.word	0xe000e014
     3a8:	.word	0x000176ff
     3ac:	.word	0x20200000
     3b0:	.word	0x00000031
     3b4:	.word	0x4003e01c
     3b8:	.word	0x5a94c3a5
     3bc:	.word	0x4007f000
     3c0:	.word	0xffffffff
     3c4:	.word	0xffffffff
     3c8:	.word	0xffffffff
     3cc:	.word	0xffffffff
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x20017980
     42c:	.word	0x00000000
     430:	.word	0x00013bfc

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x20017984
     460:	.word	0x00013bfc
     464:	.word	0x20017980
     468:	.word	0x00000000

0000046c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     46c:	movs	r0, #0
     46e:	bx	lr

00000470 <Print::flush()>:
	virtual void flush()				{ }
     470:	bx	lr
     472:	nop

00000474 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
     474:	mov.w	r0, #4294967295
     478:	bx	lr
     47a:	nop

0000047c <llwuISR()>:

static void llwuISR(void)
{
    //
#if defined(HAS_KINETIS_LLWU_32CH)
    LLWU_MF5 |= LLWU_MF5_MWUF5_MASK; // clear source in LLWU Flag register
     47c:	ldr	r2, [pc, #16]	; (490 <llwuISR()+0x14>)
#else
    LLWU_F3 |= LLWU_F3_MWUF5_MASK; // clear source in LLWU Flag register
#endif
    //
    RTC_IER = 0;// clear RTC interrupts
     47e:	ldr	r1, [pc, #20]	; (494 <llwuISR()+0x18>)

static void llwuISR(void)
{
    //
#if defined(HAS_KINETIS_LLWU_32CH)
    LLWU_MF5 |= LLWU_MF5_MWUF5_MASK; // clear source in LLWU Flag register
     480:	ldrb	r3, [r2, #0]
#else
    LLWU_F3 |= LLWU_F3_MWUF5_MASK; // clear source in LLWU Flag register
#endif
    //
    RTC_IER = 0;// clear RTC interrupts
     482:	movs	r0, #0

static void llwuISR(void)
{
    //
#if defined(HAS_KINETIS_LLWU_32CH)
    LLWU_MF5 |= LLWU_MF5_MWUF5_MASK; // clear source in LLWU Flag register
     484:	orr.w	r3, r3, #32
     488:	strb	r3, [r2, #0]
#else
    LLWU_F3 |= LLWU_F3_MWUF5_MASK; // clear source in LLWU Flag register
#endif
    //
    RTC_IER = 0;// clear RTC interrupts
     48a:	str	r0, [r1, #0]
     48c:	bx	lr
     48e:	nop
     490:	.word	0x4007c00d
     494:	.word	0x4003d01c

00000498 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

#include <TimeLib.h>

// Call back for file timestamps (used by FS).  Only called for file create and sync().
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
     498:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     49c:	mov	r7, r1
     49e:	mov	r6, r2
     4a0:	mov	r8, r0
  // Return date using FS_DATE macro to format fields.
  *date = FS_DATE(year(), month(), day());
     4a2:	bl	2a50 <year()>
     4a6:	mov	r4, r0
     4a8:	bl	2a30 <month()>
     4ac:	mov	r5, r0
     4ae:	bl	2a10 <day()>
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
     4b2:	subw	r3, r4, #1980	; 0x7bc
     4b6:	uxth	r3, r3
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
     4b8:	cmp	r3, #127	; 0x7f
     4ba:	bhi.n	4c2 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     4bc:	uxtb	r2, r5
     4be:	cmp	r2, #12
     4c0:	bls.n	51a <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x82>
         year << 9 | month << 5 | day;
     4c2:	movs	r3, #0
     4c4:	strh.w	r3, [r8]

  // Return time using FS_TIME macro to format fields.
  *time = FS_TIME(hour(), minute(), second());
     4c8:	bl	29b0 <hour()>
     4cc:	mov	r4, r0
     4ce:	bl	29d0 <minute()>
     4d2:	mov	r5, r0
     4d4:	bl	29f0 <second()>
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
     4d8:	uxtb	r3, r4
     4da:	cmp	r3, #23
     4dc:	bhi.n	4e4 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     4de:	uxtb	r3, r5
     4e0:	cmp	r3, #59	; 0x3b
     4e2:	bls.n	4fc <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x64>
         hour << 11 | minute << 5 | second >> 1;
     4e4:	movs	r3, #0
     4e6:	strh	r3, [r7, #0]

  // Return low time bits in units of 10 ms.
  *ms10 = second() & 1 ? 100 : 0;
     4e8:	bl	29f0 <second()>
     4ec:	tst.w	r0, #1
     4f0:	ite	ne
     4f2:	movne	r3, #100	; 0x64
     4f4:	moveq	r3, #0
     4f6:	strb	r3, [r6, #0]
     4f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     4fc:	uxtb	r3, r0
     4fe:	cmp	r3, #59	; 0x3b
     500:	bhi.n	4e4 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
         hour << 11 | minute << 5 | second >> 1;
     502:	lsls	r4, r4, #11
     504:	lsls	r3, r5, #5
     506:	and.w	r4, r4, #522240	; 0x7f800
     50a:	and.w	r3, r3, #8160	; 0x1fe0
     50e:	orrs	r3, r4
     510:	ubfx	r0, r0, #1, #7
     514:	orrs	r3, r0
     516:	uxth	r3, r3
     518:	b.n	4e6 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4e>

// Call back for file timestamps (used by FS).  Only called for file create and sync().
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
  // Return date using FS_DATE macro to format fields.
  *date = FS_DATE(year(), month(), day());
     51a:	uxtb	r0, r0
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     51c:	cmp	r0, #31
     51e:	bhi.n	4c2 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
         year << 9 | month << 5 | day;
     520:	lsls	r5, r5, #5
     522:	and.w	r5, r5, #8160	; 0x1fe0
     526:	orrs	r0, r5
     528:	orr.w	r3, r0, r3, lsl #9
     52c:	uxth	r3, r3
     52e:	b.n	4c4 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2c>

00000530 <c_uSD::~c_uSD()>:
int16_t diskBuffer[BUFFERSIZE];
int16_t *outptr = diskBuffer;

char header[512];

class c_uSD
     530:	push	{r4, lr}
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     532:	ldr	r3, [pc, #20]	; (548 <c_uSD::~c_uSD()+0x18>)
     534:	str.w	r3, [r0, #1196]	; 0x4ac
     538:	mov	r4, r0
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     53a:	addw	r0, r0, #1212	; 0x4bc
     53e:	bl	6898 <FsBaseFile::close()>
     542:	mov	r0, r4
     544:	pop	{r4, pc}
     546:	nop
     548:	.word	0x00012d44

0000054c <getTeensy3Time()>:
#ifdef __cplusplus
}
class teensy3_clock_class
{
public:
	static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
     54c:	b.w	8840 <rtc_get>

00000550 <AudioConnection::~AudioConnection()>:
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
		{ isConnected = false;
		  connect(); }
	friend class AudioStream;
	~AudioConnection() {
     550:	push	{r4, lr}
     552:	mov	r4, r0
		disconnect();
     554:	bl	9ff0 <AudioConnection::disconnect()>
	}
     558:	mov	r0, r4
     55a:	pop	{r4, pc}

0000055c <mRecordQueue<137>::update()>:
	release(userblock);
	userblock = NULL;
}

template <int MQ>
void mRecordQueue<MQ>::update(void)
     55c:	push	{r4, lr}
{
	audio_block_t *block;
	uint16_t h;

	block = receiveReadOnly();
     55e:	movs	r1, #0
	release(userblock);
	userblock = NULL;
}

template <int MQ>
void mRecordQueue<MQ>::update(void)
     560:	mov	r4, r0
{
	audio_block_t *block;
	uint16_t h;

	block = receiveReadOnly();
     562:	bl	9f70 <AudioStream::receiveReadOnly(unsigned int)>
	if (!block) return;
     566:	cbz	r0, 594 <mRecordQueue<137>::update()+0x38>
	if (!enabled) {
     568:	ldrh.w	r3, [r4, #588]	; 0x24c
     56c:	uxth	r3, r3
     56e:	cbz	r3, 596 <mRecordQueue<137>::update()+0x3a>
		release(block);
		return;
	}
	h = head + 1;
     570:	ldrh.w	r3, [r4, #584]	; 0x248
	if (h >= MQ) h = 0;
	if (h == tail) {
     574:	ldrh.w	r2, [r4, #586]	; 0x24a
	if (!block) return;
	if (!enabled) {
		release(block);
		return;
	}
	h = head + 1;
     578:	adds	r3, #1
     57a:	uxth	r3, r3
	if (h >= MQ) h = 0;
     57c:	cmp	r3, #137	; 0x89
     57e:	it	cs
     580:	movcs	r3, #0
	if (h == tail) {
     582:	uxth	r2, r2
     584:	cmp	r3, r2
     586:	beq.n	59e <mRecordQueue<137>::update()+0x42>
		release(block); // drop incomming data
    dropCount++; // flag for main to know
	} else {
		queue[h] = block; // store incomming data
     588:	add.w	r2, r3, #8
     58c:	str.w	r0, [r4, r2, lsl #2]
		head = h;
     590:	strh.w	r3, [r4, #584]	; 0x248
     594:	pop	{r4, pc}
	}
}
     596:	ldmia.w	sp!, {r4, lr}
	uint16_t h;

	block = receiveReadOnly();
	if (!block) return;
	if (!enabled) {
		release(block);
     59a:	b.w	9ee8 <AudioStream::release(audio_block_struct*)>
		return;
	}
	h = head + 1;
	if (h >= MQ) h = 0;
	if (h == tail) {
		release(block); // drop incomming data
     59e:	bl	9ee8 <AudioStream::release(audio_block_struct*)>
    dropCount++; // flag for main to know
     5a2:	ldr	r3, [r4, #24]
     5a4:	adds	r3, #1
     5a6:	str	r3, [r4, #24]
     5a8:	pop	{r4, pc}
     5aa:	nop

000005ac <getTime(char*) [clone .constprop.33]>:
{
    sprintf(text,"%04d/%02d/%02d",year(), month(), day());
    return text;  
}

static char * getTime(char *text)
     5ac:	push	{r4, r5, r6, lr}
     5ae:	sub	sp, #8
{
    sprintf(text,"%02d:%02d:%02d",hour(),minute(),second());
     5b0:	bl	29b0 <hour()>
     5b4:	mov	r5, r0
     5b6:	bl	29d0 <minute()>
     5ba:	mov	r6, r0
     5bc:	bl	29f0 <second()>
     5c0:	ldr	r4, [pc, #20]	; (5d8 <getTime(char*) [clone .constprop.33]+0x2c>)
     5c2:	str	r0, [sp, #0]
     5c4:	mov	r3, r6
     5c6:	mov	r2, r5
     5c8:	mov	r0, r4
     5ca:	ldr	r1, [pc, #16]	; (5dc <getTime(char*) [clone .constprop.33]+0x30>)
     5cc:	bl	c5b4 <sprintf>
    return text;
}
     5d0:	mov	r0, r4
     5d2:	add	sp, #8
     5d4:	pop	{r4, r5, r6, pc}
     5d6:	nop
     5d8:	.word	0x2001c0f4
     5dc:	.word	0x00012d84

000005e0 <getDate(char*) [clone .constprop.34]>:
*/


#include <TimeLib.h>

static char * getDate(char *text)
     5e0:	push	{r4, r5, r6, lr}
     5e2:	sub	sp, #8
{
    sprintf(text,"%04d/%02d/%02d",year(), month(), day());
     5e4:	bl	2a50 <year()>
     5e8:	mov	r5, r0
     5ea:	bl	2a30 <month()>
     5ee:	mov	r6, r0
     5f0:	bl	2a10 <day()>
     5f4:	ldr	r4, [pc, #20]	; (60c <getDate(char*) [clone .constprop.34]+0x2c>)
     5f6:	str	r0, [sp, #0]
     5f8:	mov	r3, r6
     5fa:	mov	r2, r5
     5fc:	mov	r0, r4
     5fe:	ldr	r1, [pc, #16]	; (610 <getDate(char*) [clone .constprop.34]+0x30>)
     600:	bl	c5b4 <sprintf>
    return text;  
}
     604:	mov	r0, r4
     606:	add	sp, #8
     608:	pop	{r4, r5, r6, pc}
     60a:	nop
     60c:	.word	0x2001c0f4
     610:	.word	0x00012d94

00000614 <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     614:	ldr	r2, [r0, #72]	; 0x48
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     616:	cbz	r2, 632 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     618:	ldrb	r3, [r2, #0]
     61a:	and.w	r3, r3, #8
     61e:	and.w	r0, r3, #255	; 0xff
     622:	cbz	r3, 666 <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     624:	ldr	r3, [r2, #28]
     626:	ldr	r0, [r2, #20]
     628:	subs	r0, r3, r0
     62a:	it	mi
     62c:	mvnmi.w	r0, #2147483648	; 0x80000000
     630:	bx	lr
     632:	ldr	r1, [r0, #76]	; 0x4c
     634:	cbz	r1, 668 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     636:	ldrb.w	r3, [r1, #49]	; 0x31
     63a:	and.w	r3, r3, #8
     63e:	and.w	r0, r3, #255	; 0xff
     642:	cbz	r3, 666 <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
     644:	ldrd	r2, r3, [r1, #16]
     648:	ldrd	r0, r1, [r1]
     64c:	subs	r0, r2, r0
     64e:	push	{r4, r5}
     650:	sbc.w	r1, r3, r1
     654:	movs	r5, #0
     656:	mvn.w	r4, #2147483648	; 0x80000000
     65a:	cmp	r5, r1
     65c:	it	eq
     65e:	cmpeq	r4, r0
     660:	bcs.n	664 <StreamFile<FsBaseFile, unsigned long long>::available()+0x50>
     662:	mov	r0, r4
    return BaseFile::available();
  }
     664:	pop	{r4, r5}
     666:	bx	lr
     668:	mov	r0, r1
     66a:	bx	lr

0000066c <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  }
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     66c:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     66e:	cbz	r3, 676 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     670:	mov	r0, r3
     672:	b.w	5984 <FatFile::peek()>
     676:	ldr	r0, [r0, #76]	; 0x4c
     678:	cbz	r0, 67e <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     67a:	b.w	4250 <ExFatFile::peek()>
    return BaseFile::peek();
  }
     67e:	mov.w	r0, #4294967295
     682:	bx	lr

00000684 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
     684:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     686:	cbz	r3, 68e <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     688:	mov	r0, r3
     68a:	b.w	5b5c <FatFile::sync()>
     68e:	ldr	r0, [r0, #76]	; 0x4c
     690:	cbz	r0, 696 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     692:	b.w	4fac <ExFatFile::sync()>
     696:	bx	lr

00000698 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     698:	push	{lr}
     69a:	ldr	r3, [r0, #72]	; 0x48
     69c:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     69e:	cbz	r3, 6ba <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     6a0:	mov	r0, r3
     6a2:	movs	r2, #1
     6a4:	add.w	r1, sp, #7
     6a8:	bl	57ec <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     6ac:	cmp	r0, #1
     6ae:	bne.n	6ca <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     6b0:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     6b4:	add	sp, #12
     6b6:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     6ba:	ldr	r0, [r0, #76]	; 0x4c
     6bc:	cbz	r0, 6ca <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     6be:	movs	r2, #1
     6c0:	add.w	r1, sp, #7
     6c4:	bl	40b0 <ExFatFile::read(void*, unsigned int)>
     6c8:	b.n	6ac <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     6ca:	mov.w	r0, #4294967295
     6ce:	b.n	6b4 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

000006d0 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     6d0:	ldr	r3, [r0, #72]	; 0x48
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     6d2:	cbz	r3, 6da <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     6d4:	mov	r0, r3
     6d6:	b.w	5be0 <FatFile::write(void const*, unsigned int)>
     6da:	ldr	r0, [r0, #76]	; 0x4c
     6dc:	cbz	r0, 6e2 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     6de:	b.w	5268 <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     6e2:	bx	lr

000006e4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     6e4:	push	{lr}
     6e6:	ldr	r3, [r0, #72]	; 0x48
     6e8:	sub	sp, #12
     6ea:	strb.w	r1, [sp, #7]
     6ee:	cbz	r3, 702 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     6f0:	mov	r0, r3
     6f2:	movs	r2, #1
     6f4:	add.w	r1, sp, #7
     6f8:	bl	5be0 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     6fc:	add	sp, #12
     6fe:	ldr.w	pc, [sp], #4
     702:	ldr	r0, [r0, #76]	; 0x4c
     704:	cmp	r0, #0
     706:	beq.n	6fc <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     708:	movs	r2, #1
     70a:	add.w	r1, sp, #7
     70e:	bl	5268 <ExFatFile::write(void const*, unsigned int)>
     712:	add	sp, #12
     714:	ldr.w	pc, [sp], #4

00000718 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     718:	push	{r4, r5, r6, lr}
     71a:	mov	r4, r0
     71c:	mov	r0, r1
     71e:	mov	r5, r1
     720:	bl	c800 <strlen>
     724:	ldr	r3, [r4, #0]
     726:	mov	r2, r0
     728:	mov	r1, r5
     72a:	mov	r0, r4
     72c:	ldr	r3, [r3, #4]
     72e:	ldmia.w	sp!, {r4, r5, r6, lr}
     732:	bx	r3

00000734 <Print::println(__FlashStringHelper const*)>:
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     734:	push	{r3, r4, r5, lr}
     736:	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     738:	mov	r0, r1
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     73a:	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     73c:	bl	c800 <strlen>
     740:	ldr	r3, [r4, #0]
     742:	mov	r2, r0
     744:	mov	r1, r5
     746:	ldr	r3, [r3, #4]
     748:	mov	r0, r4
     74a:	blx	r3
     74c:	mov	r5, r0
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     74e:	mov	r0, r4
     750:	bl	9cec <Print::println()>
     754:	add	r0, r5
     756:	pop	{r3, r4, r5, pc}

00000758 <I2S_dividers(unsigned long*, unsigned long, unsigned long)>:

// ********************************************** following is to change I2S sampling rates ********************
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
     758:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     75c:	mov	r9, r0
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     75e:	ldr	r0, [r0, #8]

// ********************************************** following is to change I2S sampling rates ********************
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
     760:	vpush	{d8-d9}
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     764:	adds	r0, #1

// ********************************************** following is to change I2S sampling rates ********************
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
     766:	vmov	s17, r1
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     76a:	movs	r1, #0

// ********************************************** following is to change I2S sampling rates ********************
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
     76c:	vmov	s16, r2
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     770:	bl	b4c0 <__aeabi_l2f>
     774:	vldr	s15, [pc, #140]	; 804 <I2S_dividers(unsigned long*, unsigned long, unsigned long)+0xac>
    float mn=1.0; 
    for(int ii=1;ii<=256;ii++) 
    { float xx;
      xx=A*ii-(int32_t)(A*ii);
      if(xx<mn && A*ii<4096.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
     778:	vldr	s18, [pc, #140]	; 808 <I2S_dividers(unsigned long*, unsigned long, unsigned long)+0xb0>
{ // nbits is number of bits / frame
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     77c:	vmov	s14, r0
     780:	vdiv.f32	s13, s15, s14
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
    int64_t i1 = 1;
    int64_t i2 = 1;
     784:	movs	r0, #1
// ********************************************** following is to change I2S sampling rates ********************
// attempt to generate dividers programmatically
// always better to check
void I2S_dividers(uint32_t *iscl, uint32_t fsamp, uint32_t nbits)
{ // nbits is number of bits / frame
    int64_t i1 = 1;
     786:	mov	r8, r0
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     788:	movs	r4, #1
     78a:	movs	r5, #0
    float mn=1.0; 
    for(int ii=1;ii<=256;ii++) 
     78c:	movw	r6, #257	; 0x101
     790:	movs	r7, #0
{ // nbits is number of bits / frame
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     792:	vcvt.f32.u32	s15, s17
     796:	vcvt.f32.u32	s16, s16
    float mn=1.0; 
     79a:	vmov.f32	s14, #112	; 0x3f800000  1.0
{ // nbits is number of bits / frame
    int64_t i1 = 1;
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
     79e:	vmul.f32	s15, s16, s15
     7a2:	vdiv.f32	s17, s13, s15
    float mn=1.0; 
    for(int ii=1;ii<=256;ii++) 
    { float xx;
      xx=A*ii-(int32_t)(A*ii);
     7a6:	vmov	s15, r4
     7aa:	vcvt.f32.s32	s15, s15
     7ae:	vmul.f32	s15, s15, s17
     7b2:	vcvt.s32.f32	s16, s15
     7b6:	vcvt.f32.s32	s16, s16
     7ba:	vsub.f32	s16, s15, s16
      if(xx<mn && A*ii<4096.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
     7be:	vcmpe.f32	s16, s14
     7c2:	vmrs	APSR_nzcv, fpscr
     7c6:	bpl.n	7e0 <I2S_dividers(unsigned long*, unsigned long, unsigned long)+0x88>
     7c8:	vcmpe.f32	s15, s18
     7cc:	vmrs	APSR_nzcv, fpscr
     7d0:	bpl.n	7e0 <I2S_dividers(unsigned long*, unsigned long, unsigned long)+0x88>
     7d2:	vmov	r0, s15
     7d6:	bl	b56c <__aeabi_f2lz>
     7da:	mov	r8, r4
     7dc:	vmov.f32	s14, s16
     7e0:	adds	r4, #1
     7e2:	adc.w	r5, r5, #0
    int64_t i2 = 1;
    int64_t i3 = iscl[2]+1;
//    float A=F_CPU/2.0f/i3/((float)nbits*fsamp);
    float A=F_PLL/2.0f/i3/((float)nbits*fsamp);
    float mn=1.0; 
    for(int ii=1;ii<=256;ii++) 
     7e6:	cmp	r5, r7
     7e8:	it	eq
     7ea:	cmpeq	r4, r6
     7ec:	bne.n	7a6 <I2S_dividers(unsigned long*, unsigned long, unsigned long)+0x4e>
      if(xx<mn && A*ii<4096.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
    }
    iscl[0] = (int) (i1-1);
    iscl[1] = (int) (i2-1);
    iscl[2] = (int) (i3-1);
}
     7ee:	vpop	{d8-d9}
    for(int ii=1;ii<=256;ii++) 
    { float xx;
      xx=A*ii-(int32_t)(A*ii);
      if(xx<mn && A*ii<4096.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
    }
    iscl[0] = (int) (i1-1);
     7f2:	add.w	r3, r8, #4294967295
    iscl[1] = (int) (i2-1);
     7f6:	subs	r0, #1
    for(int ii=1;ii<=256;ii++) 
    { float xx;
      xx=A*ii-(int32_t)(A*ii);
      if(xx<mn && A*ii<4096.0) { mn=xx; i1=ii; i2=A*ii;} //select first candidate
    }
    iscl[0] = (int) (i1-1);
     7f8:	str.w	r3, [r9]
    iscl[1] = (int) (i2-1);
     7fc:	str.w	r0, [r9, #4]
    iscl[2] = (int) (i3-1);
}
     800:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     804:	.word	0x4c371b00
     808:	.word	0x45800000

0000080c <I2S_modification(unsigned long, unsigned short, int)>:
{
    I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
}

void I2S_modification(uint32_t fsamp, uint16_t nbits, int nch)
{ uint32_t iscl[3];
     80c:	push	{r4, r5, r6, r7, lr}

  if(nch==8)
     80e:	cmp	r2, #8
{
    I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
}

void I2S_modification(uint32_t fsamp, uint16_t nbits, int nch)
{ uint32_t iscl[3];
     810:	sub	sp, #44	; 0x2c

  if(nch==8)
    iscl[2]=0;
     812:	ite	eq
     814:	moveq	r3, #0
  else
    iscl[2]=1;
     816:	movne	r3, #1
{
    I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
}

void I2S_modification(uint32_t fsamp, uint16_t nbits, int nch)
{ uint32_t iscl[3];
     818:	mov	r6, r1
     81a:	mov	r4, r2
     81c:	mov	r7, r0
  if(nch==8)
    iscl[2]=0;
  else
    iscl[2]=1;
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
     81e:	mul.w	r2, r1, r2
     822:	mov	r1, r0
     824:	add	r0, sp, #28
{ uint32_t iscl[3];

  if(nch==8)
    iscl[2]=0;
  else
    iscl[2]=1;
     826:	str	r3, [sp, #36]	; 0x24
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
     828:	bl	758 <I2S_dividers(unsigned long*, unsigned long, unsigned long)>
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
     82c:	vldr	s15, [sp, #28]
    iscl[2]=0;
  else
    iscl[2]=1;
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
     830:	ldr	r2, [sp, #32]
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
     832:	vldr	s13, [pc, #180]	; 8e8 <I2S_modification(unsigned long, unsigned short, int)+0xdc>
    iscl[2]=0;
  else
    iscl[2]=1;
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
     836:	ldr	r5, [sp, #36]	; 0x24
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
     838:	ldr	r3, [sp, #28]
     83a:	str	r6, [sp, #4]
     83c:	vcvt.f32.u32	s14, s15
    iscl[2]=0;
  else
    iscl[2]=1;
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
     840:	adds	r2, #1
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
     842:	vmov.f32	s15, #112	; 0x3f800000  1.0
     846:	vadd.f32	s15, s14, s15
     84a:	vmov	s14, r2
     84e:	vmul.f32	s15, s15, s13
     852:	vcvt.f32.u32	s14, s14
    iscl[2]=0;
  else
    iscl[2]=1;
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
     856:	adds	r5, #1
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
     858:	vdiv.f32	s13, s15, s14
     85c:	adds	r1, r3, #1
     85e:	str	r1, [sp, #8]
     860:	mov	r3, r7
     862:	str	r2, [sp, #12]
     864:	str	r5, [sp, #16]
     866:	ldr	r2, [pc, #132]	; (8ec <I2S_modification(unsigned long, unsigned short, int)+0xe0>)
     868:	ldr	r1, [pc, #132]	; (8f0 <I2S_modification(unsigned long, unsigned short, int)+0xe4>)
     86a:	ldr	r0, [pc, #136]	; (8f4 <I2S_modification(unsigned long, unsigned short, int)+0xe8>)
     86c:	vmov	s15, r5
     870:	vmov.f32	s12, #96	; 0x3f000000  0.5
     874:	vcvt.f32.u32	s14, s15
     878:	vmul.f32	s13, s13, s12
     87c:	vmov	s15, r4
     880:	vdiv.f32	s12, s13, s14
#endif
  // stop I2S
  I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);

  // modify sampling frequency
  I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]);
     884:	ldr	r5, [pc, #112]	; (8f8 <I2S_modification(unsigned long, unsigned short, int)+0xec>)

  // configure transmitter
  I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
    | I2S_TCR2_BCD | I2S_TCR2_DIV(iscl[2]);
     886:	ldr	r4, [pc, #116]	; (8fc <I2S_modification(unsigned long, unsigned short, int)+0xf0>)
  
  I2S_dividers(iscl, fsamp ,nch*nbits);
  float fs = (F_CPU * (iscl[0]+1.0f)) / (iscl[1]+1l) / 2 / (iscl[2]+1l) / ((float)nch*nbits);
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
     888:	vmov	s14, r6
     88c:	vcvt.f32.s32	s15, s15
     890:	vcvt.f32.s32	s14, s14
     894:	vmul.f32	s15, s15, s14
     898:	vdiv.f32	s14, s12, s15
     89c:	vcvt.s32.f32	s14, s14
     8a0:	vstr	s14, [sp]
     8a4:	bl	9d1c <Print::printf(char const*, ...)>
#endif
  // stop I2S
  I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     8a8:	ldr	r1, [pc, #84]	; (900 <I2S_modification(unsigned long, unsigned short, int)+0xf4>)
//  I2S0_TCR4 = I2S_TCR4_FRSZ(nch-1) | I2S_TCR4_SYWD(0) | I2S_TCR4_MF
//    | I2S_TCR4_FSE | I2S_TCR4_FSD;

  // configure receiver (sync'd to transmitter clocks)
  I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
    | I2S_RCR2_BCD | I2S_RCR2_DIV(iscl[2]);
     8aa:	ldr	r0, [pc, #88]	; (904 <I2S_modification(unsigned long, unsigned short, int)+0xf8>)
#if DO_DEBUG>0
  Serial.printf("%d %d %d %d %d %d %d\n\r",
                F_CPU, fsamp, (int)fs, nbits,iscl[0]+1,iscl[1]+1,iscl[2]+1);
#endif
  // stop I2S
  I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     8ac:	ldr	r3, [r1, #0]
     8ae:	bic.w	r3, r3, #2415919104	; 0x90000000
     8b2:	str	r3, [r1, #0]

  // modify sampling frequency
  I2S0_MDR = I2S_MDR_FRACT(iscl[0]) | I2S_MDR_DIVIDE(iscl[1]);
     8b4:	ldr	r2, [sp, #28]
     8b6:	ldr	r3, [sp, #32]
     8b8:	lsls	r2, r2, #12
     8ba:	and.w	r2, r2, #1044480	; 0xff000
     8be:	ubfx	r3, r3, #0, #12
     8c2:	orrs	r3, r2
     8c4:	str	r3, [r5, #0]

  // configure transmitter
  I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
    | I2S_TCR2_BCD | I2S_TCR2_DIV(iscl[2]);
     8c6:	ldrb.w	r3, [sp, #36]	; 0x24
     8ca:	orr.w	r3, r3, #117440512	; 0x7000000
     8ce:	str	r3, [r4, #0]
//  I2S0_TCR4 = I2S_TCR4_FRSZ(nch-1) | I2S_TCR4_SYWD(0) | I2S_TCR4_MF
//    | I2S_TCR4_FSE | I2S_TCR4_FSD;

  // configure receiver (sync'd to transmitter clocks)
  I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
    | I2S_RCR2_BCD | I2S_RCR2_DIV(iscl[2]);
     8d0:	ldrb.w	r3, [sp, #36]	; 0x24
     8d4:	orr.w	r3, r3, #1191182336	; 0x47000000
     8d8:	str	r3, [r0, #0]
//  I2S0_RCR4 = I2S_RCR4_FRSZ(nch-1) | I2S_RCR4_SYWD(0) | I2S_RCR4_MF
//    | I2S_RCR4_FSE | I2S_RCR4_FSD;

  //restart I2S
  I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     8da:	ldr	r3, [r1, #0]
     8dc:	orr.w	r3, r3, #2415919104	; 0x90000000
     8e0:	str	r3, [r1, #0]
}
     8e2:	add	sp, #44	; 0x2c
     8e4:	pop	{r4, r5, r6, r7, pc}
     8e6:	nop
     8e8:	.word	0x4cb71b00
     8ec:	.word	0x05b8d800
     8f0:	.word	0x00012da4
     8f4:	.word	0x20016f24
     8f8:	.word	0x4002f104
     8fc:	.word	0x4002f008
     900:	.word	0x4002f080
     904:	.word	0x4002f088

00000908 <makeFilename(char*)>:
  // Return low time bits in units of 10 ms.
  *ms10 = second() & 1 ? 100 : 0;
}

char *makeFilename(char * prefix)
{ static char filename[40];
     908:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     90c:	sub	sp, #24
     90e:	mov	r5, r0

  sprintf(filename, "%s_%04d_%02d_%02d_%02d_%02d_%02d%s", prefix, 
     910:	bl	2a50 <year()>
     914:	mov	r6, r0
     916:	bl	2a30 <month()>
     91a:	mov	sl, r0
     91c:	bl	2a10 <day()>
     920:	mov	r7, r0
     922:	bl	29b0 <hour()>
     926:	mov	r8, r0
     928:	bl	29d0 <minute()>
     92c:	mov	r9, r0
     92e:	bl	29f0 <second()>
                    year(), month(), day(), hour(), minute(), second(), postfix);
     932:	ldr	r4, [pc, #60]	; (970 <makeFilename(char*)+0x68>)
     934:	ldr	r1, [pc, #60]	; (974 <makeFilename(char*)+0x6c>)
     936:	str	r0, [sp, #16]
     938:	mov	r3, r6
     93a:	mov	r2, r5
     93c:	str	r1, [sp, #20]
     93e:	str.w	sl, [sp]
     942:	ldr	r1, [pc, #52]	; (978 <makeFilename(char*)+0x70>)
     944:	str.w	r9, [sp, #12]
     948:	str.w	r8, [sp, #8]
     94c:	str	r7, [sp, #4]
     94e:	mov	r0, r4
     950:	bl	c5b4 <sprintf>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     954:	mov	r0, r4
     956:	bl	c800 <strlen>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     95a:	mov	r1, r0
     95c:	mov	r0, r4
     95e:	bl	83f4 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     962:	ldr	r0, [pc, #24]	; (97c <makeFilename(char*)+0x74>)
     964:	bl	9cec <Print::println()>
#if DO_DEBUG>0
  Serial.println(filename);
#endif
  return filename;  
}
     968:	mov	r0, r4
     96a:	add	sp, #24
     96c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     970:	.word	0x2001c0b4
     974:	.word	0x20016d3c
     978:	.word	0x00012dbc
     97c:	.word	0x20016f24

00000980 <wavHeader(unsigned long)>:

  int nsamp=(fileSize-44)/(nbytes*nchan);
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
     980:	ldr	r3, [pc, #80]	; (9d4 <wavHeader(unsigned long)+0x54>)
     982:	ldr	r1, [pc, #84]	; (9d8 <wavHeader(unsigned long)+0x58>)
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
     984:	ldr	r2, [pc, #84]	; (9dc <wavHeader(unsigned long)+0x5c>)

	return header;
}

char * wavHeader(uint32_t fileSize)
{
     986:	push	{r4, r5, r6, r7}
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
     988:	str	r2, [r3, #28]

	return header;
}

char * wavHeader(uint32_t fileSize)
{
     98a:	mov	r2, r0

  int nsamp=(fileSize-44)/(nbytes*nchan);
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
     98c:	ldmia	r1, {r0, r1}
  strcpy(wheader+8,"WAVE");
     98e:	ldr	r6, [pc, #80]	; (9e0 <wavHeader(unsigned long)+0x60>)

  int nsamp=(fileSize-44)/(nbytes*nchan);
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
     990:	str	r0, [r3, #0]
  strcpy(wheader+8,"WAVE");
     992:	ldmia.w	r6, {r0, r1}
  strcpy(wheader+12,"fmt ");
     996:	ldr	r5, [pc, #76]	; (9e4 <wavHeader(unsigned long)+0x64>)
  int nsamp=(fileSize-44)/(nbytes*nchan);
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
     998:	str	r0, [r3, #8]
  strcpy(wheader+12,"fmt ");
     99a:	ldmia.w	r5, {r0, r1}
  strcpy(wheader+36,"data");
     99e:	ldr	r4, [pc, #72]	; (9e8 <wavHeader(unsigned long)+0x68>)
  //
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
     9a0:	str	r0, [r3, #12]
  strcpy(wheader+36,"data");
     9a2:	ldmia.w	r4, {r0, r1}
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
     9a6:	subs	r2, #44	; 0x2c
     9a8:	bic.w	r2, r2, #7
  *(int32_t*)(wheader+4)=36+nsamp*nchan*nbytes; 
     9ac:	add.w	r7, r2, #36	; 0x24
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
     9b0:	movs	r6, #1
  *(int16_t*)(wheader+22)=nchan;// numChannels 
     9b2:	movs	r5, #4
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
     9b4:	movw	r4, #48000	; 0xbb80
  static char wheader[48]; // 44 for wav
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
     9b8:	str	r0, [r3, #36]	; 0x24
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
     9ba:	movs	r1, #8
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
     9bc:	str	r2, [r3, #40]	; 0x28
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
     9be:	movs	r2, #16
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
  *(int32_t*)(wheader+4)=36+nsamp*nchan*nbytes; 
     9c0:	str	r7, [r3, #4]
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
     9c2:	strh	r6, [r3, #20]
  *(int16_t*)(wheader+22)=nchan;// numChannels 
     9c4:	strh	r5, [r3, #22]
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
     9c6:	str	r4, [r3, #24]
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
  *(int32_t*)(wheader+4)=36+nsamp*nchan*nbytes; 

   return wheader;
}
     9c8:	mov	r0, r3
  *(int32_t*)(wheader+16)= 16;// chunk_size
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
     9ca:	strh	r1, [r3, #32]
  //
  strcpy(wheader,"RIFF");
  strcpy(wheader+8,"WAVE");
  strcpy(wheader+12,"fmt ");
  strcpy(wheader+36,"data");
  *(int32_t*)(wheader+16)= 16;// chunk_size
     9cc:	str	r2, [r3, #16]
  *(int16_t*)(wheader+20)= 1; // PCM 
  *(int16_t*)(wheader+22)=nchan;// numChannels 
  *(int32_t*)(wheader+24)= fsamp; // sample rate 
  *(int32_t*)(wheader+28)= fsamp*nbytes; // byte rate
  *(int16_t*)(wheader+32)=nchan*nbytes; // block align
  *(int16_t*)(wheader+34)=nbits; // bits per sample 
     9ce:	strh	r2, [r3, #34]	; 0x22
  *(int32_t*)(wheader+40)=nsamp*nchan*nbytes; 
  *(int32_t*)(wheader+4)=36+nsamp*nchan*nbytes; 

   return wheader;
}
     9d0:	pop	{r4, r5, r6, r7}
     9d2:	bx	lr
     9d4:	.word	0x2001c118
     9d8:	.word	0x00012e00
     9dc:	.word	0x00017700
     9e0:	.word	0x00012e08
     9e4:	.word	0x00012e10
     9e8:	.word	0x00012e18

000009ec <c_uSD::init()>:
//____________________________ FS Interface implementation______________________
void c_uSD::init()
{
     9ec:	push	{r4, r5, r6, lr}
     9ee:	mov	r4, r0
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     9f0:	add.w	r5, r0, #1160	; 0x488
     9f4:	mov	r0, r5
     9f6:	mov.w	r1, #0
     9fa:	bl	7acc <SdioCard::begin(SdioConfig)>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
     9fe:	str.w	r5, [r4, #1156]	; 0x484
    return m_card && !m_card->errorCode();
     a02:	cbz	r5, a0e <c_uSD::init()+0x22>
     a04:	mov	r0, r5
     a06:	bl	722c <SdioCard::errorCode() const>
     a0a:	mov	r5, r0
     a0c:	cbz	r0, a2e <c_uSD::init()+0x42>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     a0e:	ldr	r6, [pc, #60]	; (a4c <c_uSD::init()+0x60>)
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     a10:	ldr	r5, [pc, #60]	; (a50 <c_uSD::init()+0x64>)
  {
//    sd.errorHalt("sd.begin failed");
    while(1)
    {
      // blink code suggests insertion of an SD card
            pinMode(13,OUTPUT);
     a12:	movs	r1, #1
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     a14:	movs	r4, #32
     a16:	movs	r0, #13
     a18:	bl	8898 <pinMode>
     a1c:	str	r4, [r6, #0]
            digitalWriteFast(13,HIGH);
            delay(200);
     a1e:	movs	r0, #200	; 0xc8
     a20:	bl	88e8 <delay>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     a24:	str	r4, [r5, #0]
            digitalWriteFast(13,LOW);
            delay(200);
     a26:	movs	r0, #200	; 0xc8
     a28:	bl	88e8 <delay>
     a2c:	b.n	a12 <c_uSD::init()+0x26>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     a2e:	ldr.w	r1, [r4, #1156]	; 0x484
     a32:	mov	r0, r4
     a34:	bl	6940 <FsVolume::begin(BlockDeviceInterface*)>
     a38:	cmp	r0, #0
     a3a:	beq.n	a0e <c_uSD::init()+0x22>
    }
  }

  // Set Time callback
  FsDateTime::callback = dateTime;
     a3c:	ldr	r3, [pc, #20]	; (a54 <c_uSD::init()+0x68>)
     a3e:	ldr	r2, [pc, #24]	; (a58 <c_uSD::init()+0x6c>)
  //
  nbuf=0;
     a40:	strh.w	r5, [r4, #1278]	; 0x4fe
  state=0;
     a44:	strh.w	r5, [r4, #1276]	; 0x4fc
            delay(200);
    }
  }

  // Set Time callback
  FsDateTime::callback = dateTime;
     a48:	str	r2, [r3, #0]
  //
  nbuf=0;
  state=0;
}
     a4a:	pop	{r4, r5, r6, pc}
     a4c:	.word	0x400ff084
     a50:	.word	0x400ff088
     a54:	.word	0x2001c8f8
     a58:	.word	0x00000499

00000a5c <c_uSD::close()>:
    state=close();
  }
  return state;
}
int16_t c_uSD::close(void)
{   // close file
     a5c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     a60:	mov	r5, r0
     a62:	ldr.w	r0, [r0, #1268]	; 0x4f4
   *
   * \return true for success or false for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
     a66:	cmp	r0, #0
     a68:	beq.n	afe <c_uSD::close()+0xa2>
     a6a:	bl	5b68 <FatFile::truncate()>
     a6e:	ldr.w	r3, [r5, #1268]	; 0x4f4
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     a72:	cmp	r3, #0
     a74:	beq.n	b10 <c_uSD::close()+0xb4>
     a76:	ldr.w	sl, [r3, #28]
     a7a:	mov.w	r9, #0
     a7e:	mov	r8, sl
    file.truncate();
    #ifdef GEN_WAV_FILE
       uint32_t fileSize = file.size();
       memcpy(header,wavHeader(fileSize),44);
     a80:	mov	r0, sl
     a82:	bl	980 <wavHeader(unsigned long)>
     a86:	ldr	r7, [pc, #232]	; (b70 <c_uSD::close()+0x114>)
     a88:	mov	r4, r0
     a8a:	add.w	lr, r0, #32
     a8e:	ldr	r0, [r4, #0]
     a90:	ldr	r1, [r4, #4]
     a92:	ldr	r2, [r4, #8]
     a94:	ldr	r3, [r4, #12]
     a96:	mov	r6, r7
     a98:	stmia	r6!, {r0, r1, r2, r3}
     a9a:	adds	r4, #16
     a9c:	cmp	r4, lr
     a9e:	mov	r7, r6
     aa0:	bne.n	a8e <c_uSD::close()+0x32>
     aa2:	ldr	r0, [r4, #0]
     aa4:	ldr	r1, [r4, #4]
     aa6:	ldr	r2, [r4, #8]
     aa8:	stmia	r7!, {r0, r1, r2}
     aaa:	ldr.w	r0, [r5, #1268]	; 0x4f4
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     aae:	cmp	r0, #0
     ab0:	beq.n	b44 <c_uSD::close()+0xe8>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     ab2:	movs	r1, #0
     ab4:	bl	59f0 <FatFile::seekSet(unsigned long)>
     ab8:	ldr.w	r0, [r5, #1268]	; 0x4f4
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     abc:	cbz	r0, b22 <c_uSD::close()+0xc6>
     abe:	mov.w	r2, #512	; 0x200
     ac2:	ldr	r1, [pc, #172]	; (b70 <c_uSD::close()+0x114>)
     ac4:	bl	5be0 <FatFile::write(void const*, unsigned int)>
     ac8:	ldr.w	r0, [r5, #1268]	; 0x4f4
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     acc:	cmp	r0, #0
     ace:	bne.n	b3c <c_uSD::close()+0xe0>
     ad0:	ldr.w	r0, [r5, #1272]	; 0x4f8
     ad4:	cbz	r0, ade <c_uSD::close()+0x82>
     ad6:	mov	r2, r8
     ad8:	mov	r3, r9
     ada:	bl	4280 <ExFatFile::seekSet(unsigned long long)>
       file.seek(0);
       file.write(header,512);
       file.seek(fileSize);
    #endif
    file.close();
     ade:	addw	r0, r5, #1212	; 0x4bc
     ae2:	bl	6898 <FsBaseFile::close()>
     ae6:	movs	r1, #11
     ae8:	ldr	r0, [pc, #136]	; (b74 <c_uSD::close()+0x118>)
     aea:	bl	83f4 <usb_serial_write>
     aee:	ldr	r0, [pc, #136]	; (b78 <c_uSD::close()+0x11c>)
     af0:	bl	9cec <Print::println()>
#if DO_DEBUG>0
    Serial.println("file Closed");    
#endif
    state=0;  // flag to open new file
     af4:	movs	r0, #0
     af6:	strh.w	r0, [r5, #1276]	; 0x4fc
    return state;
}
     afa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   *
   * \return true for success or false for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
     afe:	ldr.w	r0, [r5, #1272]	; 0x4f8
     b02:	cbz	r0, b56 <c_uSD::close()+0xfa>
     b04:	bl	5184 <ExFatFile::truncate()>
     b08:	ldr.w	r3, [r5, #1268]	; 0x4f4
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     b0c:	cmp	r3, #0
     b0e:	bne.n	a76 <c_uSD::close()+0x1a>
     b10:	ldr.w	r3, [r5, #1272]	; 0x4f8
     b14:	cbz	r3, b62 <c_uSD::close()+0x106>
     b16:	ldrd	r8, r9, [r3, #16]
     b1a:	mov.w	r9, #0
     b1e:	mov	sl, r8
     b20:	b.n	a80 <c_uSD::close()+0x24>
     b22:	ldr.w	r0, [r5, #1272]	; 0x4f8
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     b26:	cmp	r0, #0
     b28:	beq.n	ade <c_uSD::close()+0x82>
     b2a:	mov.w	r2, #512	; 0x200
     b2e:	ldr	r1, [pc, #64]	; (b70 <c_uSD::close()+0x114>)
     b30:	bl	5268 <ExFatFile::write(void const*, unsigned int)>
     b34:	ldr.w	r0, [r5, #1268]	; 0x4f4
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     b38:	cmp	r0, #0
     b3a:	beq.n	ad0 <c_uSD::close()+0x74>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     b3c:	mov	r1, sl
     b3e:	bl	59f0 <FatFile::seekSet(unsigned long)>
     b42:	b.n	ade <c_uSD::close()+0x82>
           m_xFile ? m_xFile->seekSet(pos) : false;
     b44:	ldr.w	r0, [r5, #1272]	; 0x4f8
     b48:	cmp	r0, #0
     b4a:	beq.n	ade <c_uSD::close()+0x82>
     b4c:	movs	r2, #0
     b4e:	movs	r3, #0
     b50:	bl	4280 <ExFatFile::seekSet(unsigned long long)>
     b54:	b.n	ab8 <c_uSD::close()+0x5c>
   *
   * \return true for success or false for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
     b56:	mov	sl, r0
     b58:	mov.w	r8, #0
     b5c:	mov.w	r9, #0
     b60:	b.n	a80 <c_uSD::close()+0x24>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     b62:	mov	sl, r3
     b64:	mov.w	r8, #0
     b68:	mov.w	r9, #0
     b6c:	b.n	a80 <c_uSD::close()+0x24>
     b6e:	nop
     b70:	.word	0x20017eb4
     b74:	.word	0x00012e20
     b78:	.word	0x20016f24

00000b7c <c_uSD::storeConfig(unsigned long*, int, long*, int)>:

void c_uSD::storeConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{ char text[32];
     b7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
     b80:	ldr	r4, [pc, #272]	; (c94 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x118>)
     b82:	sub	sp, #44	; 0x2c
     b84:	ldr	r4, [r4, #0]
     b86:	ldr.w	r9, [sp, #80]	; 0x50
     b8a:	str	r3, [sp, #4]
     b8c:	mov	r5, r0
     b8e:	mov	sl, r1
     b90:	mov	r8, r2
  file.open("Config.txt", O_CREAT|O_WRITE|O_TRUNC);
     b92:	addw	fp, r0, #1212	; 0x4bc
     b96:	cbz	r4, ba6 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x2a>
     b98:	mov	r1, r4
     b9a:	movw	r3, #1537	; 0x601
     b9e:	ldr	r2, [pc, #248]	; (c98 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x11c>)
     ba0:	mov	r0, fp
     ba2:	bl	68c0 <FsBaseFile::open(FsVolume*, char const*, int)>
  for(int ii=0; ii<n1; ii++)
     ba6:	cmp.w	r8, #0
     baa:	ble.n	c8e <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x112>
     bac:	sub.w	r7, sl, #4
     bb0:	movs	r6, #0
     bb2:	add	r4, sp, #8
     bb4:	b.n	bc0 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x44>
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     bb6:	bl	5be0 <FatFile::write(void const*, unsigned int)>
     bba:	adds	r6, #1
     bbc:	cmp	r8, r6
     bbe:	beq.n	bfa <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x7e>
  { sprintf(text,"%10d\r\n",(int) param1[ii]); file.write((uint8_t*)text,strlen(text));
     bc0:	ldr.w	r2, [r7, #4]!
     bc4:	ldr	r1, [pc, #212]	; (c9c <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x120>)
     bc6:	mov	r0, r4
     bc8:	bl	c5b4 <sprintf>
     bcc:	mov	r0, r4
     bce:	bl	c800 <strlen>
     bd2:	ldr.w	r3, [r5, #1268]	; 0x4f4
     bd6:	mov	lr, r0
     bd8:	mov	r2, r0
     bda:	mov	r1, r4
     bdc:	mov	r0, r3
     bde:	cmp	r3, #0
     be0:	bne.n	bb6 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x3a>
     be2:	ldr.w	r3, [r5, #1272]	; 0x4f8
     be6:	mov	r2, lr
     be8:	mov	r1, r4
     bea:	mov	r0, r3
     bec:	cmp	r3, #0
     bee:	beq.n	bba <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x3e>
}

void c_uSD::storeConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{ char text[32];
  file.open("Config.txt", O_CREAT|O_WRITE|O_TRUNC);
  for(int ii=0; ii<n1; ii++)
     bf0:	adds	r6, #1
     bf2:	bl	5268 <ExFatFile::write(void const*, unsigned int)>
     bf6:	cmp	r8, r6
     bf8:	bne.n	bc0 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x44>
  { sprintf(text,"%10d\r\n",(int) param1[ii]); file.write((uint8_t*)text,strlen(text));
  }
//
  for(int ii=0; ii<n2; ii++)
     bfa:	cmp.w	r9, #0
     bfe:	ble.n	c4c <c_uSD::storeConfig(unsigned long*, int, long*, int)+0xd0>
     c00:	ldr	r3, [sp, #4]
     c02:	movs	r6, #0
     c04:	subs	r7, r3, #4
     c06:	b.n	c12 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x96>
     c08:	bl	5be0 <FatFile::write(void const*, unsigned int)>
     c0c:	adds	r6, #1
     c0e:	cmp	r9, r6
     c10:	beq.n	c4c <c_uSD::storeConfig(unsigned long*, int, long*, int)+0xd0>
  { sprintf(text,"%10d\r\n",(int) param2[ii]); file.write((uint8_t*)text,strlen(text));
     c12:	ldr.w	r2, [r7, #4]!
     c16:	ldr	r1, [pc, #132]	; (c9c <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x120>)
     c18:	mov	r0, r4
     c1a:	bl	c5b4 <sprintf>
     c1e:	mov	r0, r4
     c20:	bl	c800 <strlen>
     c24:	ldr.w	r3, [r5, #1268]	; 0x4f4
     c28:	mov	lr, r0
     c2a:	mov	r2, r0
     c2c:	mov	r1, r4
     c2e:	mov	r0, r3
     c30:	cmp	r3, #0
     c32:	bne.n	c08 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x8c>
     c34:	ldr.w	r3, [r5, #1272]	; 0x4f8
     c38:	mov	r2, lr
     c3a:	mov	r1, r4
     c3c:	mov	r0, r3
     c3e:	cmp	r3, #0
     c40:	beq.n	c0c <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x90>
  file.open("Config.txt", O_CREAT|O_WRITE|O_TRUNC);
  for(int ii=0; ii<n1; ii++)
  { sprintf(text,"%10d\r\n",(int) param1[ii]); file.write((uint8_t*)text,strlen(text));
  }
//
  for(int ii=0; ii<n2; ii++)
     c42:	adds	r6, #1
     c44:	bl	5268 <ExFatFile::write(void const*, unsigned int)>
     c48:	cmp	r9, r6
     c4a:	bne.n	c12 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x96>
  { sprintf(text,"%10d\r\n",(int) param2[ii]); file.write((uint8_t*)text,strlen(text));
  }
  sprintf(text,"%s\r\n",(char*) &param1[n1]);
     c4c:	add.w	r2, sl, r8, lsl #2
     c50:	ldr	r1, [pc, #76]	; (ca0 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x124>)
     c52:	mov	r0, r4
     c54:	bl	c5b4 <sprintf>
     c58:	ldr.w	r0, [r5, #1268]	; 0x4f4
     c5c:	cbz	r0, c72 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0xf6>
     c5e:	mov	r1, r4
     c60:	movs	r2, #6
     c62:	bl	5be0 <FatFile::write(void const*, unsigned int)>
  file.write((uint8_t *)text,6);

  file.close();
     c66:	mov	r0, fp
     c68:	bl	6898 <FsBaseFile::close()>
  
}
     c6c:	add	sp, #44	; 0x2c
     c6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c72:	ldr.w	r0, [r5, #1272]	; 0x4f8
     c76:	cmp	r0, #0
     c78:	beq.n	c66 <c_uSD::storeConfig(unsigned long*, int, long*, int)+0xea>
     c7a:	mov	r1, r4
     c7c:	movs	r2, #6
     c7e:	bl	5268 <ExFatFile::write(void const*, unsigned int)>
  { sprintf(text,"%10d\r\n",(int) param2[ii]); file.write((uint8_t*)text,strlen(text));
  }
  sprintf(text,"%s\r\n",(char*) &param1[n1]);
  file.write((uint8_t *)text,6);

  file.close();
     c82:	mov	r0, fp
     c84:	bl	6898 <FsBaseFile::close()>
  
}
     c88:	add	sp, #44	; 0x2c
     c8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c8e:	add	r4, sp, #8
     c90:	b.n	bfa <c_uSD::storeConfig(unsigned long*, int, long*, int)+0x7e>
     c92:	nop
     c94:	.word	0x2001c8fc
     c98:	.word	0x00012e2c
     c9c:	.word	0x00012e40
     ca0:	.word	0x00012e38

00000ca4 <c_uSD::loadConfig(unsigned long*, int, long*, int)>:

void c_uSD::loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{
     ca4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
     ca8:	ldr	r4, [pc, #248]	; (da4 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x100>)
     caa:	sub	sp, #44	; 0x2c
     cac:	ldr	r4, [r4, #0]
     cae:	ldr.w	r9, [sp, #80]	; 0x50
     cb2:	cmp	r4, #0
     cb4:	beq.n	d2e <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x8a>
  char text[32];
  if(!file.open("Config.txt",O_RDONLY)) return;
     cb6:	addw	fp, r0, #1212	; 0x4bc
     cba:	str	r3, [sp, #4]
     cbc:	mov	r8, r2
     cbe:	mov	sl, r1
     cc0:	mov	r5, r0
     cc2:	mov	r1, r4
     cc4:	mov	r0, fp
     cc6:	movs	r3, #0
     cc8:	ldr	r2, [pc, #220]	; (da8 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x104>)
     cca:	bl	68c0 <FsBaseFile::open(FsVolume*, char const*, int)>
     cce:	cbz	r0, d2e <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x8a>
  //
  for(int ii=0; ii<n1; ii++)
     cd0:	cmp.w	r8, #0
     cd4:	ble.n	d34 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x90>
     cd6:	mov	r7, sl
     cd8:	movs	r6, #0
     cda:	add	r4, sp, #8
     cdc:	b.n	cf6 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x52>
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     cde:	bl	57ec <FatFile::read(void*, unsigned int)>
  { if(file.read((uint8_t*)text,12)); sscanf(text,"%d",(int *) &param1[ii]);
     ce2:	mov	r2, r7
void c_uSD::loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{
  char text[32];
  if(!file.open("Config.txt",O_RDONLY)) return;
  //
  for(int ii=0; ii<n1; ii++)
     ce4:	adds	r6, #1
  { if(file.read((uint8_t*)text,12)); sscanf(text,"%d",(int *) &param1[ii]);
     ce6:	ldr	r1, [pc, #196]	; (dac <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x108>)
     ce8:	mov	r0, r4
     cea:	bl	c600 <sscanf>
void c_uSD::loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2)
{
  char text[32];
  if(!file.open("Config.txt",O_RDONLY)) return;
  //
  for(int ii=0; ii<n1; ii++)
     cee:	cmp	r8, r6
     cf0:	add.w	r7, r7, #4
     cf4:	beq.n	d36 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x92>
     cf6:	ldr.w	r3, [r5, #1268]	; 0x4f4
     cfa:	movs	r2, #12
     cfc:	mov	r1, r4
     cfe:	mov	r0, r3
     d00:	cmp	r3, #0
     d02:	bne.n	cde <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x3a>
     d04:	ldr.w	r3, [r5, #1272]	; 0x4f8
     d08:	movs	r2, #12
     d0a:	mov	r1, r4
     d0c:	mov	r0, r3
     d0e:	cmp	r3, #0
     d10:	beq.n	ce2 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x3e>
     d12:	bl	40b0 <ExFatFile::read(void*, unsigned int)>
     d16:	b.n	ce2 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x3e>
     d18:	ldr.w	r0, [r5, #1268]	; 0x4f4
     d1c:	cbz	r0, d7c <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xd8>
     d1e:	movs	r2, #6
     d20:	mov	r1, r4
     d22:	bl	57ec <FatFile::read(void*, unsigned int)>
  { if(file.read((uint8_t*)text,12)); sscanf(text,"%d",(int *) &param1[ii]);
  }
  for(int ii=0; ii<n2; ii++)
  { if(file.read((uint8_t*)text,12)); sscanf(text,"%d", (int *)&param2[ii]);
  }
  if(file.read((uint8_t *)text,6))
     d26:	cbnz	r0, d8e <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xea>
  { text[5]=0;
    sscanf(text,"%s",(char *) &param1[n1]);
  }  
  file.close();
     d28:	mov	r0, fp
     d2a:	bl	6898 <FsBaseFile::close()>
}
     d2e:	add	sp, #44	; 0x2c
     d30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d34:	add	r4, sp, #8
  if(!file.open("Config.txt",O_RDONLY)) return;
  //
  for(int ii=0; ii<n1; ii++)
  { if(file.read((uint8_t*)text,12)); sscanf(text,"%d",(int *) &param1[ii]);
  }
  for(int ii=0; ii<n2; ii++)
     d36:	cmp.w	r9, #0
     d3a:	ble.n	d18 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x74>
     d3c:	ldr	r7, [sp, #4]
     d3e:	movs	r6, #0
     d40:	b.n	d5a <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xb6>
     d42:	bl	57ec <FatFile::read(void*, unsigned int)>
  { if(file.read((uint8_t*)text,12)); sscanf(text,"%d", (int *)&param2[ii]);
     d46:	mov	r2, r7
  if(!file.open("Config.txt",O_RDONLY)) return;
  //
  for(int ii=0; ii<n1; ii++)
  { if(file.read((uint8_t*)text,12)); sscanf(text,"%d",(int *) &param1[ii]);
  }
  for(int ii=0; ii<n2; ii++)
     d48:	adds	r6, #1
  { if(file.read((uint8_t*)text,12)); sscanf(text,"%d", (int *)&param2[ii]);
     d4a:	ldr	r1, [pc, #96]	; (dac <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x108>)
     d4c:	mov	r0, r4
     d4e:	bl	c600 <sscanf>
  if(!file.open("Config.txt",O_RDONLY)) return;
  //
  for(int ii=0; ii<n1; ii++)
  { if(file.read((uint8_t*)text,12)); sscanf(text,"%d",(int *) &param1[ii]);
  }
  for(int ii=0; ii<n2; ii++)
     d52:	cmp	r9, r6
     d54:	add.w	r7, r7, #4
     d58:	beq.n	d18 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x74>
     d5a:	ldr.w	r3, [r5, #1268]	; 0x4f4
     d5e:	movs	r2, #12
     d60:	mov	r1, r4
     d62:	mov	r0, r3
     d64:	cmp	r3, #0
     d66:	bne.n	d42 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x9e>
     d68:	ldr.w	r3, [r5, #1272]	; 0x4f8
     d6c:	movs	r2, #12
     d6e:	mov	r1, r4
     d70:	mov	r0, r3
     d72:	cmp	r3, #0
     d74:	beq.n	d46 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xa2>
     d76:	bl	40b0 <ExFatFile::read(void*, unsigned int)>
     d7a:	b.n	d46 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xa2>
     d7c:	ldr.w	r0, [r5, #1272]	; 0x4f8
     d80:	cbz	r0, d8e <c_uSD::loadConfig(unsigned long*, int, long*, int)+0xea>
     d82:	movs	r2, #6
     d84:	mov	r1, r4
     d86:	bl	40b0 <ExFatFile::read(void*, unsigned int)>
  { if(file.read((uint8_t*)text,12)); sscanf(text,"%d", (int *)&param2[ii]);
  }
  if(file.read((uint8_t *)text,6))
     d8a:	cmp	r0, #0
     d8c:	beq.n	d28 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x84>
  { text[5]=0;
     d8e:	movs	r3, #0
    sscanf(text,"%s",(char *) &param1[n1]);
     d90:	add.w	r2, sl, r8, lsl #2
     d94:	mov	r0, r4
     d96:	ldr	r1, [pc, #24]	; (db0 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x10c>)
  }
  for(int ii=0; ii<n2; ii++)
  { if(file.read((uint8_t*)text,12)); sscanf(text,"%d", (int *)&param2[ii]);
  }
  if(file.read((uint8_t *)text,6))
  { text[5]=0;
     d98:	strb.w	r3, [sp, #13]
    sscanf(text,"%s",(char *) &param1[n1]);
     d9c:	bl	c600 <sscanf>
     da0:	b.n	d28 <c_uSD::loadConfig(unsigned long*, int, long*, int)+0x84>
     da2:	nop
     da4:	.word	0x2001c8fc
     da8:	.word	0x00012e2c
     dac:	.word	0x00012e48
     db0:	.word	0x00012ddc

00000db4 <setWakeupCallandSleep(unsigned long)>:
   asm volatile( "wfi" );  // WFI instruction will start entry into STOP mode
   // will never return, but wake-up results in call to ResetHandler() in mk20dx128.c
}

void setWakeupCallandSleep(uint32_t nsec)
{  // set alarm to nsec secods in future and go to hibernate
     db4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#define RTC_IER_TAIE_MASK       0x4u
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
     db8:	ldr	r4, [pc, #308]	; (ef0 <setWakeupCallandSleep(unsigned long)+0x13c>)
   RTC_CR |= RTC_CR_OSCE;// enable RTC
     dba:	ldr	r2, [pc, #312]	; (ef4 <setWakeupCallandSleep(unsigned long)+0x140>)
#define RTC_IER_TAIE_MASK       0x4u
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
     dbc:	ldr	r3, [r4, #0]
    RTC_IER = 0;// clear RTC interrupts
}

static void llwuSetup(void)
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
     dbe:	ldr	r1, [pc, #312]	; (ef8 <setWakeupCallandSleep(unsigned long)+0x144>)
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
     dc0:	ldr.w	r8, [pc, #376]	; f3c <setWakeupCallandSleep(unsigned long)+0x188>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     dc4:	ldr	r6, [pc, #308]	; (efc <setWakeupCallandSleep(unsigned long)+0x148>)
#define RTC_IER_TAIE_MASK       0x4u
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
     dc6:	orr.w	r3, r3, #536870912	; 0x20000000
     dca:	str	r3, [r4, #0]
   RTC_CR |= RTC_CR_OSCE;// enable RTC
     dcc:	ldr	r3, [r2, #0]
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
  NVIC_ENABLE_IRQ( IRQ_LLWU );
     dce:	ldr	r4, [pc, #304]	; (f00 <setWakeupCallandSleep(unsigned long)+0x14c>)
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
   RTC_CR |= RTC_CR_OSCE;// enable RTC
     dd0:	orr.w	r3, r3, #256	; 0x100
   asm volatile( "wfi" );  // WFI instruction will start entry into STOP mode
   // will never return, but wake-up results in call to ResetHandler() in mk20dx128.c
}

void setWakeupCallandSleep(uint32_t nsec)
{  // set alarm to nsec secods in future and go to hibernate
     dd4:	mov	r7, r0
#define RTC_SR_TAF_MASK         0x4u

void rtcSetup(void)
{
   SIM_SCGC6 |= SIM_SCGC6_RTC;// enable RTC clock
   RTC_CR |= RTC_CR_OSCE;// enable RTC
     dd6:	str	r3, [r2, #0]
    RTC_IER = 0;// clear RTC interrupts
}

static void llwuSetup(void)
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
     dd8:	movs	r0, #21
     dda:	bl	8830 <attachInterruptVector>
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
     dde:	ldr	r3, [pc, #292]	; (f04 <setWakeupCallandSleep(unsigned long)+0x150>)
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
     de0:	ldr.w	ip, [pc, #348]	; f40 <setWakeupCallandSleep(unsigned long)+0x18c>
  NVIC_ENABLE_IRQ( IRQ_LLWU );
//
  LLWU_PE1 = 0;
  LLWU_PE2 = 0;
     de4:	ldr	r1, [pc, #288]	; (f08 <setWakeupCallandSleep(unsigned long)+0x154>)
  LLWU_PE3 = 0;
     de6:	ldr	r0, [pc, #292]	; (f0c <setWakeupCallandSleep(unsigned long)+0x158>)
  LLWU_PE4 = 0;
     de8:	ldr	r2, [pc, #292]	; (f10 <setWakeupCallandSleep(unsigned long)+0x15c>)
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
  NVIC_ENABLE_IRQ( IRQ_LLWU );
//
  LLWU_PE1 = 0;
     dea:	ldr.w	lr, [pc, #344]	; f44 <setWakeupCallandSleep(unsigned long)+0x190>
}

static void llwuSetup(void)
{
  attachInterruptVector( IRQ_LLWU, llwuISR );
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
     dee:	movs	r5, #32
     df0:	strb	r5, [r3, #0]
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
     df2:	mov.w	r3, #2097152	; 0x200000
     df6:	str.w	r3, [ip]
  NVIC_ENABLE_IRQ( IRQ_LLWU );
     dfa:	str	r3, [r4, #0]
  LLWU_PE1 = 0;
  LLWU_PE2 = 0;
  LLWU_PE3 = 0;
  LLWU_PE4 = 0;
#if defined(HAS_KINETIS_LLWU_32CH)
  LLWU_PE5 = 0;
     dfc:	ldr	r3, [pc, #276]	; (f14 <setWakeupCallandSleep(unsigned long)+0x160>)
  NVIC_SET_PRIORITY( IRQ_LLWU, 2*16 );
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
  NVIC_ENABLE_IRQ( IRQ_LLWU );
//
  LLWU_PE1 = 0;
     dfe:	movs	r4, #0
     e00:	strb.w	r4, [lr]
  LLWU_PE7 = 0;
  LLWU_PE8 = 0;
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
     e04:	mvn.w	ip, #1020	; 0x3fc
//
  NVIC_CLEAR_PENDING( IRQ_LLWU );
  NVIC_ENABLE_IRQ( IRQ_LLWU );
//
  LLWU_PE1 = 0;
  LLWU_PE2 = 0;
     e08:	strb	r4, [r1, #0]
  LLWU_PE3 = 0;
     e0a:	strb	r4, [r0, #0]
  LLWU_PE4 = 0;
     e0c:	strb	r4, [r2, #0]
#if defined(HAS_KINETIS_LLWU_32CH)
  LLWU_PE5 = 0;
     e0e:	strb	r4, [r3, #0]
  LLWU_PE6 = 0;
     e10:	strb	r4, [r1, #4]
  LLWU_PE7 = 0;
  LLWU_PE8 = 0;
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
     e12:	sub.w	r1, r1, #216064	; 0x34c00
     e16:	add	r1, ip
  LLWU_PE3 = 0;
  LLWU_PE4 = 0;
#if defined(HAS_KINETIS_LLWU_32CH)
  LLWU_PE5 = 0;
  LLWU_PE6 = 0;
  LLWU_PE7 = 0;
     e18:	strb	r4, [r0, #4]
  LLWU_PE8 = 0;
     e1a:	strb	r4, [r2, #4]
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
     e1c:	strb	r5, [r3, #4]
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
     e1e:	ldr	r3, [r1, #0]
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
     e20:	ldr	r2, [pc, #244]	; (f18 <setWakeupCallandSleep(unsigned long)+0x164>)
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
     e22:	ldr.w	ip, [pc, #292]	; f48 <setWakeupCallandSleep(unsigned long)+0x194>
  LLWU_PE7 = 0;
  LLWU_PE8 = 0;
#endif
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
     e26:	orr.w	r3, r3, #67108864	; 0x4000000
     e2a:	str	r3, [r1, #0]
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
     e2c:	ldr	r3, [r2, #0]
     e2e:	orr.w	r3, r3, #1073741824	; 0x40000000
     e32:	str	r3, [r2, #0]
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
    PORTA_PCR2 = PORT_PCR_MUX(0);
    PORTA_PCR3 = PORT_PCR_MUX(0);

    PORTB_PCR2 = PORT_PCR_MUX(0);
     e34:	add.w	r1, r1, #12288	; 0x3000
    PORTB_PCR3 = PORT_PCR_MUX(0);
     e38:	add.w	r2, r2, #12288	; 0x3000
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
    PORTA_PCR2 = PORT_PCR_MUX(0);
     e3c:	sub.w	lr, lr, #207872	; 0x32c00
    PORTA_PCR3 = PORT_PCR_MUX(0);
     e40:	sub.w	r0, r0, #207872	; 0x32c00
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
    PORTA_PCR1 = PORT_PCR_MUX(0);
    PORTA_PCR2 = PORT_PCR_MUX(0);
     e44:	sub.w	lr, lr, #1016	; 0x3f8
    PORTA_PCR3 = PORT_PCR_MUX(0);
     e48:	subw	r0, r0, #1014	; 0x3f6

    PORTB_PCR2 = PORT_PCR_MUX(0);
     e4c:	adds	r1, #4
    PORTB_PCR3 = PORT_PCR_MUX(0);
     e4e:	adds	r2, #12
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
     e50:	ldr	r3, [pc, #200]	; (f1c <setWakeupCallandSleep(unsigned long)+0x168>)
  LLWU_ME  = LLWU_ME_WUME5_MASK; //rtc alarm
//   
    SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    SIM_SOPT1 |= SIM_SOPT1_USBSSTBY;
//
    PORTA_PCR0 = PORT_PCR_MUX(0);
     e52:	str.w	r4, [r8]
    PORTA_PCR1 = PORT_PCR_MUX(0);
     e56:	str.w	r4, [ip]
    PORTA_PCR2 = PORT_PCR_MUX(0);
     e5a:	str.w	r4, [lr]
    PORTA_PCR3 = PORT_PCR_MUX(0);
     e5e:	str	r4, [r0, #0]

    PORTB_PCR2 = PORT_PCR_MUX(0);
     e60:	str	r4, [r1, #0]
    PORTB_PCR3 = PORT_PCR_MUX(0);
     e62:	str	r4, [r2, #0]
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
     e64:	ldr	r3, [r3, #0]
     e66:	sub.w	r1, r1, #53248	; 0xd000
   RTC_IER |= RTC_IER_TAIE_MASK;
     e6a:	sub.w	r2, r2, #52992	; 0xcf00
     e6e:	subs	r2, #240	; 0xf0
   RTC_CR |= RTC_CR_OSCE;// enable RTC
}

void rtcSetAlarm(uint32_t nsec)
{ // set alarm nsec seconds in the future
   RTC_TAR = RTC_TSR + nsec;
     e70:	add	r3, r7
     e72:	str	r3, [r1, #0]
   RTC_IER |= RTC_IER_TAIE_MASK;
     e74:	ldr	r3, [r2, #0]
     e76:	orr.w	r3, r3, #4
     e7a:	str	r3, [r2, #0]
void setWakeupCallandSleep(uint32_t nsec)
{  // set alarm to nsec secods in future and go to hibernate
   rtcSetup();
   llwuSetup();  
   rtcSetAlarm(nsec);
   yield();
     e7c:	bl	9bcc <yield>
     e80:	mov	r3, r4
     e82:	movs	r2, #10
     e84:	mov	r1, r7
     e86:	mov	r0, r6
     e88:	bl	9d38 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
     e8c:	mov	r0, r6
     e8e:	bl	9cec <Print::println()>
#if DO_DEBUG>0
   Serial.println(nsec);
   pinMode(13,OUTPUT); digitalWriteFast(13,HIGH); delay(1000); digitalWriteFast(13,LOW);
     e92:	movs	r1, #1
     e94:	movs	r0, #13
     e96:	bl	8898 <pinMode>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     e9a:	ldr	r3, [pc, #132]	; (f20 <setWakeupCallandSleep(unsigned long)+0x16c>)

#define VLLS_MODE VLLS0
static void gotoSleep(void)
{  
//  /* Make sure clock monitor is off so we don't get spurious reset */
   MCG_C6 &= ~MCG_C6_CME0;
     e9c:	ldr	r6, [pc, #132]	; (f24 <setWakeupCallandSleep(unsigned long)+0x170>)
     e9e:	str	r5, [r3, #0]
   llwuSetup();  
   rtcSetAlarm(nsec);
   yield();
#if DO_DEBUG>0
   Serial.println(nsec);
   pinMode(13,OUTPUT); digitalWriteFast(13,HIGH); delay(1000); digitalWriteFast(13,LOW);
     ea0:	mov.w	r0, #1000	; 0x3e8
     ea4:	bl	88e8 <delay>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     ea8:	ldr	r3, [pc, #124]	; (f28 <setWakeupCallandSleep(unsigned long)+0x174>)
// is defined in kinetis.h and mk20dx128c
#if defined(HAS_KINETIS_HSRUN) && (F_CPU > 120000000)
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
     eaa:	ldr	r7, [pc, #128]	; (f2c <setWakeupCallandSleep(unsigned long)+0x178>)
     eac:	str	r5, [r3, #0]

#define VLLS_MODE VLLS0
static void gotoSleep(void)
{  
//  /* Make sure clock monitor is off so we don't get spurious reset */
   MCG_C6 &= ~MCG_C6_CME0;
     eae:	ldrb	r2, [r6, #5]
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
   SMC_PMCTRL |= SMC_PMCTRL_STOPM(0x4); // VLLSx

   SMC_VLLSCTRL =  SMC_VLLSCTRL_VLLSM(VLLS_MODE);
     eb0:	ldr	r5, [pc, #124]	; (f30 <setWakeupCallandSleep(unsigned long)+0x17c>)
   /*wait for write to complete to SMC before stopping core */
   (void) SMC_PMCTRL;

   SYST_CSR &= ~SYST_CSR_TICKINT;      // disable systick timer interrupt
     eb2:	ldr	r0, [pc, #128]	; (f34 <setWakeupCallandSleep(unsigned long)+0x180>)
   SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK;  // Set the SLEEPDEEP bit to enable deep sleep mode (STOP)
     eb4:	ldr	r1, [pc, #128]	; (f38 <setWakeupCallandSleep(unsigned long)+0x184>)
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
     eb6:	sub.w	r3, r3, #528384	; 0x81000

#define VLLS_MODE VLLS0
static void gotoSleep(void)
{  
//  /* Make sure clock monitor is off so we don't get spurious reset */
   MCG_C6 &= ~MCG_C6_CME0;
     eba:	and.w	r2, r2, #223	; 0xdf
     ebe:	strb	r2, [r6, #5]
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
     ec0:	subs	r3, #135	; 0x87
// is defined in kinetis.h and mk20dx128c
#if defined(HAS_KINETIS_HSRUN) && (F_CPU > 120000000)
    kinetis_hsrun_disable( );
#endif   
   /* Write to PMPROT to allow all possible power modes */
   SMC_PMPROT = SMC_PMPROT_AVLLS_MASK;
     ec2:	movs	r2, #2
     ec4:	strb	r2, [r7, #0]
   /* Set the STOPM field to 0b100 for VLLSx mode */
   SMC_PMCTRL &= ~SMC_PMCTRL_STOPM_MASK;
     ec6:	ldrb	r2, [r3, #0]
     ec8:	and.w	r2, r2, #248	; 0xf8
     ecc:	strb	r2, [r3, #0]
   SMC_PMCTRL |= SMC_PMCTRL_STOPM(0x4); // VLLSx
     ece:	ldrb	r2, [r3, #0]
     ed0:	orr.w	r2, r2, #4
     ed4:	strb	r2, [r3, #0]

   SMC_VLLSCTRL =  SMC_VLLSCTRL_VLLSM(VLLS_MODE);
     ed6:	strb	r4, [r5, #0]
   /*wait for write to complete to SMC before stopping core */
   (void) SMC_PMCTRL;
     ed8:	ldrb	r3, [r3, #0]

   SYST_CSR &= ~SYST_CSR_TICKINT;      // disable systick timer interrupt
     eda:	ldr	r3, [r0, #0]
     edc:	bic.w	r3, r3, #2
     ee0:	str	r3, [r0, #0]
   SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK;  // Set the SLEEPDEEP bit to enable deep sleep mode (STOP)
     ee2:	ldr	r3, [r1, #0]
     ee4:	orr.w	r3, r3, #4
     ee8:	str	r3, [r1, #0]
   
   asm volatile( "wfi" );  // WFI instruction will start entry into STOP mode
     eea:	wfi
     eec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     ef0:	.word	0x4004803c
     ef4:	.word	0x4003d010
     ef8:	.word	0x0000047d
     efc:	.word	0x20016f24
     f00:	.word	0xe000e100
     f04:	.word	0xe000e415
     f08:	.word	0x4007c001
     f0c:	.word	0x4007c002
     f10:	.word	0x4007c003
     f14:	.word	0x4007c004
     f18:	.word	0x40047000
     f1c:	.word	0x4003d000
     f20:	.word	0x400ff084
     f24:	.word	0x40064000
     f28:	.word	0x400ff088
     f2c:	.word	0x4007e000
     f30:	.word	0x4007e002
     f34:	.word	0xe000e010
     f38:	.word	0xe000ed10
     f3c:	.word	0x40049000
     f40:	.word	0xe000e280
     f44:	.word	0x4007c000
     f48:	.word	0x40049004

00000f4c <checkDutyCycle(ACQ_Parameters_s*, short)>:
  #define ShortSleepDuration 60   // i.e. wake up every 'ShortSleepDuration' seconds
#endif
//
// flag can be 0 file to be open // time to shutdown if required
int16_t checkDutyCycle(ACQ_Parameters_s *acqParameters,int16_t flag)
{	static uint32_t t_start = 0;  // start of actual file
     f4c:	push	{r3, r4, r5, r6, r7, lr}
     f4e:	mov	r6, r0
     f50:	mov	r5, r1
  static uint16_t recording = 0;  // acquisition has started

  uint32_t tt = now();
     f52:	bl	2910 <now()>
     f56:	mov	r4, r0
  uint16_t to = hour();
     f58:	bl	29b0 <hour()>
  
  // check if we should sleep longer
  // sleep time between T2 and T3 and T4 and T1 (values are in hours)
  
  uint16_t T1 = acqParameters->T1;
     f5c:	ldrh	r7, [r6, #12]
  uint16_t T2 = acqParameters->T2;
  uint16_t T3 = acqParameters->T3;
  uint16_t T4 = acqParameters->T4;
     f5e:	ldrh.w	lr, [r6, #24]
  
  // check if we should sleep longer
  // sleep time between T2 and T3 and T4 and T1 (values are in hours)
  
  uint16_t T1 = acqParameters->T1;
  uint16_t T2 = acqParameters->T2;
     f62:	ldrh	r3, [r6, #16]
  uint16_t T3 = acqParameters->T3;
     f64:	ldrh	r1, [r6, #20]
  uint16_t T4 = acqParameters->T4;
  
  uint16_t doRecording=1;
  if (T4<T1) // e.g. 3-4, 23-1 (work over midnight)
     f66:	cmp	r7, lr
int16_t checkDutyCycle(ACQ_Parameters_s *acqParameters,int16_t flag)
{	static uint32_t t_start = 0;  // start of actual file
  static uint16_t recording = 0;  // acquisition has started

  uint32_t tt = now();
  uint16_t to = hour();
     f68:	uxth	r0, r0
  uint16_t T2 = acqParameters->T2;
  uint16_t T3 = acqParameters->T3;
  uint16_t T4 = acqParameters->T4;
  
  uint16_t doRecording=1;
  if (T4<T1) // e.g. 3-4, 23-1 (work over midnight)
     f6a:	bls.n	f8e <checkDutyCycle(ACQ_Parameters_s*, short)+0x42>
    doRecording =   ((to>=T3) || (to<T4) || ((to>=T1) && (to<T2)));
     f6c:	cmp	r0, r1
     f6e:	bcc.n	fec <checkDutyCycle(ACQ_Parameters_s*, short)+0xa0>
      uint16_t t_on = acqParameters->on;
      uint16_t t_dur = acqParameters->ad;
      uint16_t t_rep = acqParameters->ar;
      uint32_t t_rec = acqParameters->rec;
      
    if(flag>=0)
     f70:	cmp	r5, #0
    doRecording = (((to>=T1) && (to<T2)) || ((to>=T3) && (to<T4)));

  uint32_t nsec=0;
  if (doRecording) // we can record
  {
      uint16_t t_on = acqParameters->on;
     f72:	ldr	r3, [r6, #0]
      uint16_t t_dur = acqParameters->ad;
      uint16_t t_rep = acqParameters->ar;
     f74:	ldr	r2, [r6, #8]
      uint32_t t_rec = acqParameters->rec;
     f76:	ldr	r0, [r6, #28]
      
    if(flag>=0)
     f78:	blt.n	102a <checkDutyCycle(ACQ_Parameters_s*, short)+0xde>
    { 
      if((flag>0) && (tt >= t_start + t_dur)) //we are indeed still recording
     f7a:	beq.n	1002 <checkDutyCycle(ACQ_Parameters_s*, short)+0xb6>
     f7c:	ldr	r5, [pc, #332]	; (10cc <checkDutyCycle(ACQ_Parameters_s*, short)+0x180>)
     f7e:	ldrh	r2, [r6, #4]
     f80:	ldr	r3, [r5, #0]
     f82:	add	r3, r2
     f84:	cmp	r4, r3
     f86:	bcs.w	10b6 <checkDutyCycle(ACQ_Parameters_s*, short)+0x16a>
    Serial.println(nsec); 
    Serial.println("Hibernate now 3");
#endif
    return nsec;
  }
  return 0;
     f8a:	movs	r0, #0
}
     f8c:	pop	{r3, r4, r5, r6, r7, pc}
  
  uint16_t doRecording=1;
  if (T4<T1) // e.g. 3-4, 23-1 (work over midnight)
    doRecording =   ((to>=T3) || (to<T4) || ((to>=T1) && (to<T2)));
  else		// e.g. 3-4, 23-24
    doRecording = (((to>=T1) && (to<T2)) || ((to>=T3) && (to<T4)));
     f8e:	cmp	r0, r7
     f90:	bcc.n	f96 <checkDutyCycle(ACQ_Parameters_s*, short)+0x4a>
     f92:	cmp	r0, r3
     f94:	bcc.n	f70 <checkDutyCycle(ACQ_Parameters_s*, short)+0x24>
     f96:	cmp	r0, r1
     f98:	bcs.n	101c <checkDutyCycle(ACQ_Parameters_s*, short)+0xd0>
          }
    }
  }
  else
  {
    uint32_t tto= tt%(24*3600); // seconds since midnight
     f9a:	ldr	r2, [pc, #308]	; (10d0 <checkDutyCycle(ACQ_Parameters_s*, short)+0x184>)
     f9c:	ldr	r5, [pc, #308]	; (10d4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x188>)
     f9e:	umull	r6, r2, r2, r4
     fa2:	lsrs	r2, r2, #16
    nsec=0;
    // estimate next start time
    if ((to >= T2) && (to<T3))  // sleep during the day  //eg: to=10: T1=4; T2=9; T3=16; T4=20
     fa4:	cmp	r0, r3
          }
    }
  }
  else
  {
    uint32_t tto= tt%(24*3600); // seconds since midnight
     fa6:	mls	r2, r5, r2, r4
    nsec=0;
    // estimate next start time
    if ((to >= T2) && (to<T3))  // sleep during the day  //eg: to=10: T1=4; T2=9; T3=16; T4=20
     faa:	bcc.n	fb0 <checkDutyCycle(ACQ_Parameters_s*, short)+0x64>
     fac:	cmp	r0, r1
     fae:	bcc.n	1070 <checkDutyCycle(ACQ_Parameters_s*, short)+0x124>
    }
  }
  else
  {
    uint32_t tto= tt%(24*3600); // seconds since midnight
    nsec=0;
     fb0:	movs	r4, #0
    if ((to >= T2) && (to<T3))  // sleep during the day  //eg: to=10: T1=4; T2=9; T3=16; T4=20
    { if(tto < T3 * 3600) 
      nsec = T3 * 3600 - tto;
    }
    //
    if((to>=T4) && (T4>T1)) // sleep over midnight to T1 //eg: to=21: T1=4; T2=9; T3=16; T4=20
     fb2:	cmp	r0, lr
     fb4:	bcc.n	fba <checkDutyCycle(ACQ_Parameters_s*, short)+0x6e>
     fb6:	cmp	r7, lr
     fb8:	bcc.n	1060 <checkDutyCycle(ACQ_Parameters_s*, short)+0x114>
    {  nsec = (T1+24) * 3600 - tto;
    }
    //
    if(to<T1)                                            //eg: to=2:  T1=4; T2=9; T3=16; T4=20
     fba:	cmp	r0, r7
     fbc:	bcs.n	fc8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x7c>
    { nsec = T1 * 3600 - tto;
     fbe:	mov.w	r0, #3600	; 0xe10
     fc2:	mul.w	r0, r0, r7
     fc6:	subs	r4, r0, r2

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     fc8:	movs	r3, #0
     fca:	movs	r2, #10
     fcc:	mov	r1, r4
     fce:	ldr	r0, [pc, #264]	; (10d8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x18c>)
     fd0:	bl	9d38 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
     fd4:	ldr	r0, [pc, #256]	; (10d8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x18c>)
     fd6:	bl	9cec <Print::println()>
     fda:	movs	r1, #15
     fdc:	ldr	r0, [pc, #252]	; (10dc <checkDutyCycle(ACQ_Parameters_s*, short)+0x190>)
     fde:	bl	83f4 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     fe2:	ldr	r0, [pc, #244]	; (10d8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x18c>)
     fe4:	bl	9cec <Print::println()>
    
#if DO_DEBUG>0
    Serial.println(nsec); 
    Serial.println("Hibernate now 3");
#endif
    return nsec;
     fe8:	sxth	r0, r4
     fea:	pop	{r3, r4, r5, r6, r7, pc}
  uint16_t T3 = acqParameters->T3;
  uint16_t T4 = acqParameters->T4;
  
  uint16_t doRecording=1;
  if (T4<T1) // e.g. 3-4, 23-1 (work over midnight)
    doRecording =   ((to>=T3) || (to<T4) || ((to>=T1) && (to<T2)));
     fec:	cmp	r0, lr
     fee:	bcc.n	f70 <checkDutyCycle(ACQ_Parameters_s*, short)+0x24>
     ff0:	cmp	r0, r7
     ff2:	bcc.n	f9a <checkDutyCycle(ACQ_Parameters_s*, short)+0x4e>
     ff4:	cmp	r0, r3
     ff6:	ite	cs
     ff8:	movcs	r2, #0
     ffa:	movcc	r2, #1
  else		// e.g. 3-4, 23-24
    doRecording = (((to>=T1) && (to<T2)) || ((to>=T3) && (to<T4)));

  uint32_t nsec=0;
  if (doRecording) // we can record
     ffc:	cmp	r2, #0
     ffe:	beq.n	f9a <checkDutyCycle(ACQ_Parameters_s*, short)+0x4e>
    1000:	b.n	f70 <checkDutyCycle(ACQ_Parameters_s*, short)+0x24>
        return -1; // flag to close acquisition
      }
      
      if( flag==0 )  // file is closed new file
      { 
        if(!recording) // we are at the beginning of an acquisition cycle
    1002:	ldr	r1, [pc, #220]	; (10e0 <checkDutyCycle(ACQ_Parameters_s*, short)+0x194>)
    1004:	ldrh	r7, [r1, #0]
    1006:	cmp	r7, #0
    1008:	beq.n	1080 <checkDutyCycle(ACQ_Parameters_s*, short)+0x134>
          // the following is for each new file
          t_start = tt; // beginning of each file
        }
        else
        // check is we end acquisition cycle
        if ((t_rep>t_on) && (tt >= t_rec + t_on))
    100a:	uxth	r3, r3
    100c:	uxth	r2, r2
    100e:	cmp	r3, r2
    1010:	bcs.n	1018 <checkDutyCycle(ACQ_Parameters_s*, short)+0xcc>
    1012:	add	r3, r0
    1014:	cmp	r4, r3
    1016:	bcs.n	108e <checkDutyCycle(ACQ_Parameters_s*, short)+0x142>
    Serial.println(nsec); 
    Serial.println("Hibernate now 3");
#endif
    return nsec;
  }
  return 0;
    1018:	mov	r0, r5
    101a:	pop	{r3, r4, r5, r6, r7, pc}
    101c:	cmp	r0, lr
    101e:	ite	cs
    1020:	movcs	r2, #0
    1022:	movcc	r2, #1
    doRecording =   ((to>=T3) || (to<T4) || ((to>=T1) && (to<T2)));
  else		// e.g. 3-4, 23-24
    doRecording = (((to>=T1) && (to<T2)) || ((to>=T3) && (to<T4)));

  uint32_t nsec=0;
  if (doRecording) // we can record
    1024:	cmp	r2, #0
    1026:	beq.n	f9a <checkDutyCycle(ACQ_Parameters_s*, short)+0x4e>
    1028:	b.n	f70 <checkDutyCycle(ACQ_Parameters_s*, short)+0x24>
      }
    }
    else // initial check during setup
    {
          // check if this is simply wakeup
          if((tt>t_rec+t_on) && (tt < t_rec+t_rep))
    102a:	uxtah	r3, r0, r3
    102e:	cmp	r4, r3
    1030:	bls.n	f8a <checkDutyCycle(ACQ_Parameters_s*, short)+0x3e>
    1032:	uxtah	r2, r0, r2
    1036:	cmp	r4, r2
    1038:	bcs.n	f8a <checkDutyCycle(ACQ_Parameters_s*, short)+0x3e>
          {
            nsec = (t_rec+t_rep-tt);
    103a:	subs	r4, r2, r4

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    103c:	movs	r3, #0
    103e:	movs	r2, #10
    1040:	mov	r1, r4
    1042:	ldr	r0, [pc, #148]	; (10d8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x18c>)
    1044:	bl	9d38 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1048:	ldr	r0, [pc, #140]	; (10d8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x18c>)
    104a:	bl	9cec <Print::println()>
    104e:	movs	r1, #15
    1050:	ldr	r0, [pc, #144]	; (10e4 <checkDutyCycle(ACQ_Parameters_s*, short)+0x198>)
    1052:	bl	83f4 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1056:	ldr	r0, [pc, #128]	; (10d8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x18c>)
    1058:	bl	9cec <Print::println()>
            #endif
#if DO_DEBUG>0
            Serial.println(nsec); 
            Serial.println("Hibernate now 2");
#endif
            return nsec; 
    105c:	sxth	r0, r4
    105e:	pop	{r3, r4, r5, r6, r7, pc}
    { if(tto < T3 * 3600) 
      nsec = T3 * 3600 - tto;
    }
    //
    if((to>=T4) && (T4>T1)) // sleep over midnight to T1 //eg: to=21: T1=4; T2=9; T3=16; T4=20
    {  nsec = (T1+24) * 3600 - tto;
    1060:	add.w	r4, r7, #24
    1064:	mov.w	r3, #3600	; 0xe10
    1068:	mul.w	r1, r3, r4
    106c:	subs	r4, r1, r2
    106e:	b.n	fba <checkDutyCycle(ACQ_Parameters_s*, short)+0x6e>
  {
    uint32_t tto= tt%(24*3600); // seconds since midnight
    nsec=0;
    // estimate next start time
    if ((to >= T2) && (to<T3))  // sleep during the day  //eg: to=10: T1=4; T2=9; T3=16; T4=20
    { if(tto < T3 * 3600) 
    1070:	mov.w	r3, #3600	; 0xe10
    1074:	mul.w	r3, r3, r1
    1078:	cmp	r2, r3
    107a:	bcs.n	fb0 <checkDutyCycle(ACQ_Parameters_s*, short)+0x64>
      nsec = T3 * 3600 - tto;
    107c:	subs	r4, r3, r2
    107e:	b.n	fb2 <checkDutyCycle(ACQ_Parameters_s*, short)+0x66>
          { t_rec=tt; 
            acqParameters->rec=t_rec;
            recording=1; 
          } 
          // the following is for each new file
          t_start = tt; // beginning of each file
    1080:	ldr	r2, [pc, #72]	; (10cc <checkDutyCycle(ACQ_Parameters_s*, short)+0x180>)
      if( flag==0 )  // file is closed new file
      { 
        if(!recording) // we are at the beginning of an acquisition cycle
        {
          { t_rec=tt; 
            acqParameters->rec=t_rec;
    1082:	str	r4, [r6, #28]
            recording=1; 
    1084:	movs	r3, #1
    Serial.println(nsec); 
    Serial.println("Hibernate now 3");
#endif
    return nsec;
  }
  return 0;
    1086:	mov	r0, r5
          { t_rec=tt; 
            acqParameters->rec=t_rec;
            recording=1; 
          } 
          // the following is for each new file
          t_start = tt; // beginning of each file
    1088:	str	r4, [r2, #0]
      { 
        if(!recording) // we are at the beginning of an acquisition cycle
        {
          { t_rec=tt; 
            acqParameters->rec=t_rec;
            recording=1; 
    108a:	strh	r3, [r1, #0]
    108c:	pop	{r3, r4, r5, r6, r7, pc}
        }
        else
        // check is we end acquisition cycle
        if ((t_rep>t_on) && (tt >= t_rec + t_on))
        { // need to stop
          nsec = (t_rec + t_rep - tt);
    108e:	add	r2, r0
    1090:	subs	r4, r2, r4

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1092:	mov	r3, r5
    1094:	movs	r2, #10
    1096:	mov	r1, r4
    1098:	ldr	r0, [pc, #60]	; (10d8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x18c>)
    109a:	bl	9d38 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    109e:	ldr	r0, [pc, #56]	; (10d8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x18c>)
    10a0:	bl	9cec <Print::println()>
    10a4:	movs	r1, #15
    10a6:	ldr	r0, [pc, #64]	; (10e8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x19c>)
    10a8:	bl	83f4 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    10ac:	ldr	r0, [pc, #40]	; (10d8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x18c>)
    10ae:	bl	9cec <Print::println()>
          #endif
#if DO_DEBUG>0
          Serial.println(nsec); 
          Serial.println("Hibernate now 1");
#endif
          return nsec; 
    10b2:	sxth	r0, r4
    10b4:	pop	{r3, r4, r5, r6, r7, pc}
    10b6:	movs	r1, #17
    10b8:	ldr	r0, [pc, #48]	; (10ec <checkDutyCycle(ACQ_Parameters_s*, short)+0x1a0>)
    10ba:	bl	83f4 <usb_serial_write>
    10be:	ldr	r0, [pc, #24]	; (10d8 <checkDutyCycle(ACQ_Parameters_s*, short)+0x18c>)
    10c0:	bl	9cec <Print::println()>
      if((flag>0) && (tt >= t_start + t_dur)) //we are indeed still recording
      { // need to close file
#if DO_DEBUG>0
        Serial.println("close acquisition");
#endif
        t_start = tt; // update start time for next file
    10c4:	str	r4, [r5, #0]
        return -1; // flag to close acquisition
    10c6:	mov.w	r0, #4294967295
    10ca:	pop	{r3, r4, r5, r6, r7, pc}
    10cc:	.word	0x2001c0f0
    10d0:	.word	0xc22e4507
    10d4:	.word	0x00015180
    10d8:	.word	0x20016f24
    10dc:	.word	0x00012eb4
    10e0:	.word	0x2001c59c
    10e4:	.word	0x00012ea4
    10e8:	.word	0x00012e94
    10ec:	.word	0x00012e80

000010f0 <doMenu()>:
      }
    }  
}

int16_t doMenu(void)
{
    10f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
extern ACQ_Parameters_s acqParameters;
extern SNIP_Parameters_s snipParameters;

static void printAll(void)
{
  Serial.printf("%c %5d on_time\n\r",     'o',acqParameters.on);
    10f4:	ldr	r5, [pc, #724]	; (13cc <doMenu()+0x2dc>)
      }
    }  
}

int16_t doMenu(void)
{
    10f6:	sub	sp, #12
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    10f8:	bl	83a0 <usb_serial_available>
  int16_t ret=0;
  do
  {
    while(!Serial.available());
    10fc:	cmp	r0, #0
    10fe:	beq.n	10f8 <doMenu()+0x8>
        virtual int read() { return usb_serial_getchar(); }
    1100:	bl	8328 <usb_serial_getchar>
    1104:	uxtb	r4, r0
    char c=Serial.read();
    
    if (strchr("?!xa", c))
    1106:	mov	r1, r4
    1108:	ldr	r0, [pc, #708]	; (13d0 <doMenu()+0x2e0>)
    110a:	bl	c65c <strchr>
    110e:	cmp	r0, #0
    1110:	beq.n	10f8 <doMenu()+0x8>
    { switch (c)
    1112:	cmp	r4, #63	; 0x3f
    1114:	beq.n	1136 <doMenu()+0x46>
    1116:	ble.w	1278 <doMenu()+0x188>
    111a:	cmp	r4, #97	; 0x61
    111c:	beq.w	13dc <doMenu()+0x2ec>
    1120:	cmp	r4, #120	; 0x78
    1122:	bne.n	10f8 <doMenu()+0x8>
      {
        case '?': doMenu1(); break;
        case '!': doMenu2(); break;
        case 'x': ret = Serial.parseInt(); break;
    1124:	ldr	r0, [pc, #684]	; (13d4 <doMenu()+0x2e4>)
    1126:	bl	a1e4 <Stream::parseInt()>
    112a:	sxth	r0, r0
        case 'a': printAll(); break;
      }
    }
  } while(ret==0);
    112c:	cmp	r0, #0
    112e:	beq.n	10f8 <doMenu()+0x8>
  return ret;
}
    1130:	add	sp, #12
    1132:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1136:	bl	83a0 <usb_serial_available>
  Serial.println();
}

static void doMenu1(void)
{ // for enquiries
    while(!Serial.available());
    113a:	cmp	r0, #0
    113c:	beq.n	1136 <doMenu()+0x46>
        virtual int read() { return usb_serial_getchar(); }
    113e:	bl	8328 <usb_serial_getchar>
    1142:	uxtb	r4, r0
    char c=Serial.read();
    
    if (strchr("oar1234ndtchwseikp", c))
    1144:	mov	r1, r4
    1146:	ldr	r0, [pc, #656]	; (13d8 <doMenu()+0x2e8>)
    1148:	bl	c65c <strchr>
    114c:	cmp	r0, #0
    114e:	beq.n	10f8 <doMenu()+0x8>
    { switch (c)
    1150:	subs	r4, #49	; 0x31
    1152:	cmp	r4, #70	; 0x46
    1154:	bhi.n	10f8 <doMenu()+0x8>
    1156:	add	r3, pc, #4	; (adr r3, 115c <doMenu()+0x6c>)
    1158:	ldr.w	pc, [r3, r4, lsl #2]
    115c:	.word	0x00001565
    1160:	.word	0x00001571
    1164:	.word	0x0000157d
    1168:	.word	0x00001589
    116c:	.word	0x000010f9
    1170:	.word	0x000010f9
    1174:	.word	0x000010f9
    1178:	.word	0x000010f9
    117c:	.word	0x000010f9
    1180:	.word	0x000010f9
    1184:	.word	0x000010f9
    1188:	.word	0x000010f9
    118c:	.word	0x000010f9
    1190:	.word	0x000010f9
    1194:	.word	0x000010f9
    1198:	.word	0x000010f9
    119c:	.word	0x000010f9
    11a0:	.word	0x000010f9
    11a4:	.word	0x000010f9
    11a8:	.word	0x000010f9
    11ac:	.word	0x000010f9
    11b0:	.word	0x000010f9
    11b4:	.word	0x000010f9
    11b8:	.word	0x000010f9
    11bc:	.word	0x000010f9
    11c0:	.word	0x000010f9
    11c4:	.word	0x000010f9
    11c8:	.word	0x000010f9
    11cc:	.word	0x000010f9
    11d0:	.word	0x000010f9
    11d4:	.word	0x000010f9
    11d8:	.word	0x000010f9
    11dc:	.word	0x000010f9
    11e0:	.word	0x000010f9
    11e4:	.word	0x000010f9
    11e8:	.word	0x000010f9
    11ec:	.word	0x000010f9
    11f0:	.word	0x000010f9
    11f4:	.word	0x000010f9
    11f8:	.word	0x000010f9
    11fc:	.word	0x000010f9
    1200:	.word	0x000010f9
    1204:	.word	0x000010f9
    1208:	.word	0x000010f9
    120c:	.word	0x000010f9
    1210:	.word	0x000010f9
    1214:	.word	0x000010f9
    1218:	.word	0x000010f9
    121c:	.word	0x00001595
    1220:	.word	0x000010f9
    1224:	.word	0x000015a1
    1228:	.word	0x000015af
    122c:	.word	0x000015bf
    1230:	.word	0x000010f9
    1234:	.word	0x000010f9
    1238:	.word	0x000015cd
    123c:	.word	0x000015db
    1240:	.word	0x000010f9
    1244:	.word	0x000015e9
    1248:	.word	0x000010f9
    124c:	.word	0x000010f9
    1250:	.word	0x000015f7
    1254:	.word	0x00001603
    1258:	.word	0x0000160f
    125c:	.word	0x000010f9
    1260:	.word	0x0000161d
    1264:	.word	0x00001629
    1268:	.word	0x00001637
    126c:	.word	0x000010f9
    1270:	.word	0x000010f9
    1274:	.word	0x00001647
  {
    while(!Serial.available());
    char c=Serial.read();
    
    if (strchr("?!xa", c))
    { switch (c)
    1278:	cmp	r4, #33	; 0x21
    127a:	bne.w	10f8 <doMenu()+0x8>
static void doMenu2(void)
{ // for settings
    uint16_t year,month,day,hour,minutes,seconds;
    int T1=acqParameters.T1;
    int T2=acqParameters.T2;
    int T3=acqParameters.T3;
    127e:	add.w	r6, r5, #12
    1282:	ldmia.w	r6, {r6, r7, r8}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1286:	bl	83a0 <usb_serial_available>
    //int T4=acqParameters.T4; mot used
    //
    while(!Serial.available());
    128a:	cmp	r0, #0
    128c:	beq.n	1286 <doMenu()+0x196>
        virtual int read() { return usb_serial_getchar(); }
    128e:	bl	8328 <usb_serial_getchar>
    1292:	uxtb	r4, r0
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    1294:	mov	r1, r4
    1296:	ldr	r0, [pc, #320]	; (13d8 <doMenu()+0x2e8>)
    1298:	bl	c65c <strchr>
    129c:	cmp	r0, #0
    129e:	beq.w	10f8 <doMenu()+0x8>
    { switch (c)
    12a2:	subs	r4, #49	; 0x31
    12a4:	cmp	r4, #70	; 0x46
    12a6:	bhi.w	10f8 <doMenu()+0x8>
    12aa:	add	r3, pc, #4	; (adr r3, 12b0 <doMenu()+0x1c0>)
    12ac:	ldr.w	pc, [r3, r4, lsl #2]
    12b0:	.word	0x00001655
    12b4:	.word	0x0000166d
    12b8:	.word	0x0000170d
    12bc:	.word	0x00001723
    12c0:	.word	0x000010f9
    12c4:	.word	0x000010f9
    12c8:	.word	0x000010f9
    12cc:	.word	0x000010f9
    12d0:	.word	0x000010f9
    12d4:	.word	0x000010f9
    12d8:	.word	0x000010f9
    12dc:	.word	0x000010f9
    12e0:	.word	0x000010f9
    12e4:	.word	0x000010f9
    12e8:	.word	0x000010f9
    12ec:	.word	0x000010f9
    12f0:	.word	0x000010f9
    12f4:	.word	0x000010f9
    12f8:	.word	0x000010f9
    12fc:	.word	0x000010f9
    1300:	.word	0x000010f9
    1304:	.word	0x000010f9
    1308:	.word	0x000010f9
    130c:	.word	0x000010f9
    1310:	.word	0x000010f9
    1314:	.word	0x000010f9
    1318:	.word	0x000010f9
    131c:	.word	0x000010f9
    1320:	.word	0x000010f9
    1324:	.word	0x000010f9
    1328:	.word	0x000010f9
    132c:	.word	0x000010f9
    1330:	.word	0x000010f9
    1334:	.word	0x000010f9
    1338:	.word	0x000010f9
    133c:	.word	0x000010f9
    1340:	.word	0x000010f9
    1344:	.word	0x000010f9
    1348:	.word	0x000010f9
    134c:	.word	0x000010f9
    1350:	.word	0x000010f9
    1354:	.word	0x000010f9
    1358:	.word	0x000010f9
    135c:	.word	0x000010f9
    1360:	.word	0x000010f9
    1364:	.word	0x000010f9
    1368:	.word	0x000010f9
    136c:	.word	0x000010f9
    1370:	.word	0x00001741
    1374:	.word	0x000010f9
    1378:	.word	0x0000186d
    137c:	.word	0x00001885
    1380:	.word	0x000018df
    1384:	.word	0x000010f9
    1388:	.word	0x000010f9
    138c:	.word	0x000018fb
    1390:	.word	0x0000175d
    1394:	.word	0x000010f9
    1398:	.word	0x00001779
    139c:	.word	0x000010f9
    13a0:	.word	0x000010f9
    13a4:	.word	0x00001795
    13a8:	.word	0x000017ad
    13ac:	.word	0x000017c9
    13b0:	.word	0x000010f9
    13b4:	.word	0x000017db
    13b8:	.word	0x000017f7
    13bc:	.word	0x00001813
    13c0:	.word	0x000010f9
    13c4:	.word	0x000010f9
    13c8:	.word	0x00001549
    13cc:	.word	0x20016d64
    13d0:	.word	0x00012ec4
    13d4:	.word	0x20016f24
    13d8:	.word	0x00012ecc
extern ACQ_Parameters_s acqParameters;
extern SNIP_Parameters_s snipParameters;

static void printAll(void)
{
  Serial.printf("%c %5d on_time\n\r",     'o',acqParameters.on);
    13dc:	ldr	r3, [r5, #0]
    13de:	ldr	r1, [pc, #684]	; (168c <doMenu()+0x59c>)
    13e0:	ldr	r0, [pc, #684]	; (1690 <doMenu()+0x5a0>)
  Serial.println();
  Serial.printf("%c %s name\n\r",         'n',acqParameters.name);
  Serial.printf("%c %s date\n\r",         'd',getDate(text));
  Serial.printf("%c %s time\n\r",         't',getTime(text));
  Serial.println();
  Serial.printf("%c %5d processing type\r\n",       'c',snipParameters.iproc);
    13e2:	ldr	r6, [pc, #688]	; (1694 <doMenu()+0x5a4>)
extern ACQ_Parameters_s acqParameters;
extern SNIP_Parameters_s snipParameters;

static void printAll(void)
{
  Serial.printf("%c %5d on_time\n\r",     'o',acqParameters.on);
    13e4:	movs	r2, #111	; 0x6f
    13e6:	bl	9d1c <Print::printf(char const*, ...)>
  Serial.printf("%c %5d acq_time\n\r",    'a',acqParameters.ad);
    13ea:	mov	r2, r4
    13ec:	ldr	r3, [r5, #4]
    13ee:	ldr	r1, [pc, #680]	; (1698 <doMenu()+0x5a8>)
    13f0:	ldr	r0, [pc, #668]	; (1690 <doMenu()+0x5a0>)
    13f2:	bl	9d1c <Print::printf(char const*, ...)>
  Serial.printf("%c %5d rep_rate\n\r",    'r',acqParameters.ar);
    13f6:	ldr	r3, [r5, #8]
    13f8:	ldr	r1, [pc, #672]	; (169c <doMenu()+0x5ac>)
    13fa:	ldr	r0, [pc, #660]	; (1690 <doMenu()+0x5a0>)
    13fc:	movs	r2, #114	; 0x72
    13fe:	bl	9d1c <Print::printf(char const*, ...)>
  Serial.printf("%c %5d first_hour\n\r",  '1',acqParameters.T1);
    1402:	ldr	r3, [r5, #12]
    1404:	ldr	r1, [pc, #664]	; (16a0 <doMenu()+0x5b0>)
    1406:	ldr	r0, [pc, #648]	; (1690 <doMenu()+0x5a0>)
    1408:	movs	r2, #49	; 0x31
    140a:	bl	9d1c <Print::printf(char const*, ...)>
  Serial.printf("%c %5d second_hour\n\r", '2',acqParameters.T2);
    140e:	ldr	r3, [r5, #16]
    1410:	ldr	r1, [pc, #656]	; (16a4 <doMenu()+0x5b4>)
    1412:	ldr	r0, [pc, #636]	; (1690 <doMenu()+0x5a0>)
    1414:	movs	r2, #50	; 0x32
    1416:	bl	9d1c <Print::printf(char const*, ...)>
  Serial.printf("%c %5d third_hour\n\r",  '3',acqParameters.T3);
    141a:	ldr	r3, [r5, #20]
    141c:	ldr	r1, [pc, #648]	; (16a8 <doMenu()+0x5b8>)
    141e:	ldr	r0, [pc, #624]	; (1690 <doMenu()+0x5a0>)
    1420:	movs	r2, #51	; 0x33
    1422:	bl	9d1c <Print::printf(char const*, ...)>
  Serial.printf("%c %5d last_hour\n\r",   '4',acqParameters.T4);
    1426:	ldr	r3, [r5, #24]
    1428:	ldr	r1, [pc, #640]	; (16ac <doMenu()+0x5bc>)
    142a:	ldr	r0, [pc, #612]	; (1690 <doMenu()+0x5a0>)
    142c:	movs	r2, #52	; 0x34
    142e:	bl	9d1c <Print::printf(char const*, ...)>
  Serial.println();
    1432:	ldr	r0, [pc, #604]	; (1690 <doMenu()+0x5a0>)
    1434:	bl	9cec <Print::println()>
  Serial.printf("%c %s name\n\r",         'n',acqParameters.name);
    1438:	ldr	r3, [pc, #628]	; (16b0 <doMenu()+0x5c0>)
    143a:	ldr	r1, [pc, #632]	; (16b4 <doMenu()+0x5c4>)
    143c:	ldr	r0, [pc, #592]	; (1690 <doMenu()+0x5a0>)
    143e:	movs	r2, #110	; 0x6e
    1440:	bl	9d1c <Print::printf(char const*, ...)>
  Serial.printf("%c %s date\n\r",         'd',getDate(text));
    1444:	bl	5e0 <getDate(char*) [clone .constprop.34]>
    1448:	movs	r2, #100	; 0x64
    144a:	mov	r3, r0
    144c:	ldr	r1, [pc, #616]	; (16b8 <doMenu()+0x5c8>)
    144e:	ldr	r0, [pc, #576]	; (1690 <doMenu()+0x5a0>)
    1450:	bl	9d1c <Print::printf(char const*, ...)>
  Serial.printf("%c %s time\n\r",         't',getTime(text));
    1454:	bl	5ac <getTime(char*) [clone .constprop.33]>
    1458:	movs	r2, #116	; 0x74
    145a:	mov	r3, r0
    145c:	ldr	r1, [pc, #604]	; (16bc <doMenu()+0x5cc>)
    145e:	ldr	r0, [pc, #560]	; (1690 <doMenu()+0x5a0>)
    1460:	bl	9d1c <Print::printf(char const*, ...)>
  Serial.println();
    1464:	ldr	r0, [pc, #552]	; (1690 <doMenu()+0x5a0>)
    1466:	bl	9cec <Print::println()>
  Serial.printf("%c %5d processing type\r\n",       'c',snipParameters.iproc);
    146a:	ldr	r3, [r6, #0]
    146c:	ldr	r1, [pc, #592]	; (16c0 <doMenu()+0x5d0>)
    146e:	ldr	r0, [pc, #544]	; (1690 <doMenu()+0x5a0>)
    1470:	movs	r2, #99	; 0x63
    1472:	bl	9d1c <Print::printf(char const*, ...)>
  Serial.printf("%c %5d threshold\r\n",             'h',snipParameters.thresh);
    1476:	ldr	r3, [r6, #4]
    1478:	ldr	r1, [pc, #584]	; (16c4 <doMenu()+0x5d4>)
    147a:	ldr	r0, [pc, #532]	; (1690 <doMenu()+0x5a0>)
    147c:	movs	r2, #104	; 0x68
    147e:	bl	9d1c <Print::printf(char const*, ...)>
  Serial.printf("%c %5d noise window\r\n",          'w',snipParameters.win0);
    1482:	ldr	r3, [r6, #8]
    1484:	ldr	r1, [pc, #576]	; (16c8 <doMenu()+0x5d8>)
    1486:	ldr	r0, [pc, #520]	; (1690 <doMenu()+0x5a0>)
    1488:	movs	r2, #119	; 0x77
    148a:	bl	9d1c <Print::printf(char const*, ...)>
  Serial.printf("%c %5d slow window\r\n",           's',snipParameters.win1);
    148e:	ldr	r3, [r6, #12]
    1490:	ldr	r1, [pc, #568]	; (16cc <doMenu()+0x5dc>)
    1492:	ldr	r0, [pc, #508]	; (1690 <doMenu()+0x5a0>)
    1494:	movs	r2, #115	; 0x73
    1496:	bl	9d1c <Print::printf(char const*, ...)>
  Serial.printf("%c %5d extraction window\r\n",     'e',snipParameters.extr);
    149a:	ldr	r3, [r6, #16]
    149c:	ldr	r1, [pc, #560]	; (16d0 <doMenu()+0x5e0>)
    149e:	ldr	r0, [pc, #496]	; (1690 <doMenu()+0x5a0>)
    14a0:	movs	r2, #101	; 0x65
    14a2:	bl	9d1c <Print::printf(char const*, ...)>
  Serial.printf("%c %5d inhibit window\r\n",        'i',snipParameters.inhib);
    14a6:	ldr	r3, [r6, #20]
    14a8:	ldr	r1, [pc, #552]	; (16d4 <doMenu()+0x5e4>)
    14aa:	ldr	r0, [pc, #484]	; (1690 <doMenu()+0x5a0>)
    14ac:	movs	r2, #105	; 0x69
    14ae:	bl	9d1c <Print::printf(char const*, ...)>
  Serial.printf("%c %5d noise repetition rate\r\n", 'k',snipParameters.nrep);
    14b2:	ldr	r3, [r6, #24]
    14b4:	ldr	r1, [pc, #544]	; (16d8 <doMenu()+0x5e8>)
    14b6:	ldr	r0, [pc, #472]	; (1690 <doMenu()+0x5a0>)
    14b8:	movs	r2, #107	; 0x6b
    14ba:	bl	9d1c <Print::printf(char const*, ...)>
  Serial.printf("%c %5d pre trigger delay\r\n",     'p',snipParameters.ndel);
    14be:	ldr	r3, [r6, #28]
    14c0:	ldr	r1, [pc, #536]	; (16dc <doMenu()+0x5ec>)
    14c2:	ldr	r0, [pc, #460]	; (1690 <doMenu()+0x5a0>)
    14c4:	movs	r2, #112	; 0x70
    14c6:	bl	9d1c <Print::printf(char const*, ...)>
  //
  Serial.println();
    14ca:	ldr	r0, [pc, #452]	; (1690 <doMenu()+0x5a0>)
    14cc:	bl	9cec <Print::println()>
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    14d0:	movs	r1, #23
    14d2:	ldr	r0, [pc, #524]	; (16e0 <doMenu()+0x5f0>)
    14d4:	bl	83f4 <usb_serial_write>
    14d8:	ldr	r0, [pc, #436]	; (1690 <doMenu()+0x5a0>)
    14da:	bl	9cec <Print::println()>
    14de:	movs	r1, #64	; 0x40
    14e0:	ldr	r0, [pc, #512]	; (16e4 <doMenu()+0x5f4>)
    14e2:	bl	83f4 <usb_serial_write>
    14e6:	ldr	r0, [pc, #424]	; (1690 <doMenu()+0x5a0>)
    14e8:	bl	9cec <Print::println()>
    14ec:	movs	r1, #32
    14ee:	ldr	r0, [pc, #504]	; (16e8 <doMenu()+0x5f8>)
    14f0:	bl	83f4 <usb_serial_write>
    14f4:	ldr	r0, [pc, #408]	; (1690 <doMenu()+0x5a0>)
    14f6:	bl	9cec <Print::println()>
    14fa:	movs	r1, #88	; 0x58
    14fc:	ldr	r0, [pc, #492]	; (16ec <doMenu()+0x5fc>)
    14fe:	bl	83f4 <usb_serial_write>
    1502:	ldr	r0, [pc, #396]	; (1690 <doMenu()+0x5a0>)
    1504:	bl	9cec <Print::println()>
    1508:	movs	r1, #38	; 0x26
    150a:	ldr	r0, [pc, #484]	; (16f0 <doMenu()+0x600>)
    150c:	bl	83f4 <usb_serial_write>
    1510:	ldr	r0, [pc, #380]	; (1690 <doMenu()+0x5a0>)
    1512:	bl	9cec <Print::println()>
    1516:	movs	r1, #69	; 0x45
    1518:	ldr	r0, [pc, #472]	; (16f4 <doMenu()+0x604>)
    151a:	bl	83f4 <usb_serial_write>
    151e:	ldr	r0, [pc, #368]	; (1690 <doMenu()+0x5a0>)
    1520:	bl	9cec <Print::println()>
    1524:	movs	r1, #50	; 0x32
    1526:	ldr	r0, [pc, #464]	; (16f8 <doMenu()+0x608>)
    1528:	bl	83f4 <usb_serial_write>
    152c:	ldr	r0, [pc, #352]	; (1690 <doMenu()+0x5a0>)
    152e:	bl	9cec <Print::println()>
    1532:	movs	r1, #43	; 0x2b
    1534:	ldr	r0, [pc, #452]	; (16fc <doMenu()+0x60c>)
    1536:	bl	83f4 <usb_serial_write>
    153a:	ldr	r0, [pc, #340]	; (1690 <doMenu()+0x5a0>)
    153c:	bl	9cec <Print::println()>
  Serial.println("exter '!cval' to read value c=(0,a,r,1,2,3,4,n,d,t,c,h,w,s,m,i,k,p) and val is new value");
  Serial.println("  e.g.: !110 will set first hour to 10");
  Serial.println("exter 'xval' to exit menu (x is delay in minutes, -1 means immediate)");
  Serial.println("  e.g.: x10 will exit and hibernate for 10 minutes");
  Serial.println("        x-1 with exit and start immediately");
  Serial.println();
    1540:	ldr	r0, [pc, #332]	; (1690 <doMenu()+0x5a0>)
    1542:	bl	9cec <Print::println()>
    1546:	b.n	10f8 <doMenu()+0x8>
                  setTime(hour,minutes,seconds);
                  break;
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1548:	ldr	r0, [pc, #324]	; (1690 <doMenu()+0x5a0>)
    154a:	bl	a1e4 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    154e:	cmp	r0, #0
    1550:	blt.w	197a <doMenu()+0x88a>
    if(val>maxVal) val=maxVal;
    1554:	cmp.w	r0, #131072	; 0x20000
    1558:	it	ge
    155a:	movge.w	r0, #131072	; 0x20000
                  setTime(hour,minutes,seconds);
                  break;
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    155e:	ldr	r3, [pc, #308]	; (1694 <doMenu()+0x5a4>)
    1560:	str	r0, [r3, #8]
    1562:	b.n	10f8 <doMenu()+0x8>
    { switch (c)
      {
        case 'o': Serial.printf("%02d\r\n",acqParameters.on); break;
        case 'a': Serial.printf("%02d\r\n",acqParameters.ad); break;
        case 'r': Serial.printf("%02d\r\n",acqParameters.ar); break;
        case '1': Serial.printf("%02d\r\n",acqParameters.T1);break;
    1564:	ldr	r2, [r5, #12]
    1566:	ldr	r1, [pc, #408]	; (1700 <doMenu()+0x610>)
    1568:	ldr	r0, [pc, #292]	; (1690 <doMenu()+0x5a0>)
    156a:	bl	9d1c <Print::printf(char const*, ...)>
    156e:	b.n	10f8 <doMenu()+0x8>
        case '2': Serial.printf("%02d\r\n",acqParameters.T2);break;
    1570:	ldr	r2, [r5, #16]
    1572:	ldr	r1, [pc, #396]	; (1700 <doMenu()+0x610>)
    1574:	ldr	r0, [pc, #280]	; (1690 <doMenu()+0x5a0>)
    1576:	bl	9d1c <Print::printf(char const*, ...)>
    157a:	b.n	10f8 <doMenu()+0x8>
        case '3': Serial.printf("%02d\r\n",acqParameters.T3);break;
    157c:	ldr	r2, [r5, #20]
    157e:	ldr	r1, [pc, #384]	; (1700 <doMenu()+0x610>)
    1580:	ldr	r0, [pc, #268]	; (1690 <doMenu()+0x5a0>)
    1582:	bl	9d1c <Print::printf(char const*, ...)>
    1586:	b.n	10f8 <doMenu()+0x8>
        case '4': Serial.printf("%02d\r\n",acqParameters.T4);break;
    1588:	ldr	r2, [r5, #24]
    158a:	ldr	r1, [pc, #372]	; (1700 <doMenu()+0x610>)
    158c:	ldr	r0, [pc, #256]	; (1690 <doMenu()+0x5a0>)
    158e:	bl	9d1c <Print::printf(char const*, ...)>
    1592:	b.n	10f8 <doMenu()+0x8>
    
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      {
        case 'o': Serial.printf("%02d\r\n",acqParameters.on); break;
        case 'a': Serial.printf("%02d\r\n",acqParameters.ad); break;
    1594:	ldr	r2, [r5, #4]
    1596:	ldr	r1, [pc, #360]	; (1700 <doMenu()+0x610>)
    1598:	ldr	r0, [pc, #244]	; (1690 <doMenu()+0x5a0>)
    159a:	bl	9d1c <Print::printf(char const*, ...)>
    159e:	b.n	10f8 <doMenu()+0x8>
        case 'n': Serial.printf("%s\r\n",acqParameters.name);break; 
        
        case 'd': Serial.printf("%s\r\n",getDate(text));break;
        case 't': Serial.printf("%s\r\n",getTime(text));break;
        
        case 'c': Serial.printf("%04d\r\n",snipParameters.iproc);break;
    15a0:	ldr	r3, [pc, #240]	; (1694 <doMenu()+0x5a4>)
    15a2:	ldr	r1, [pc, #352]	; (1704 <doMenu()+0x614>)
    15a4:	ldr	r2, [r3, #0]
    15a6:	ldr	r0, [pc, #232]	; (1690 <doMenu()+0x5a0>)
    15a8:	bl	9d1c <Print::printf(char const*, ...)>
    15ac:	b.n	10f8 <doMenu()+0x8>
        case '2': Serial.printf("%02d\r\n",acqParameters.T2);break;
        case '3': Serial.printf("%02d\r\n",acqParameters.T3);break;
        case '4': Serial.printf("%02d\r\n",acqParameters.T4);break;
        case 'n': Serial.printf("%s\r\n",acqParameters.name);break; 
        
        case 'd': Serial.printf("%s\r\n",getDate(text));break;
    15ae:	bl	5e0 <getDate(char*) [clone .constprop.34]>
    15b2:	ldr	r1, [pc, #340]	; (1708 <doMenu()+0x618>)
    15b4:	mov	r2, r0
    15b6:	ldr	r0, [pc, #216]	; (1690 <doMenu()+0x5a0>)
    15b8:	bl	9d1c <Print::printf(char const*, ...)>
    15bc:	b.n	10f8 <doMenu()+0x8>
        
        case 'c': Serial.printf("%04d\r\n",snipParameters.iproc);break;
        case 'h': Serial.printf("%04d\r\n",snipParameters.thresh);break;
        case 'w': Serial.printf("%04d\r\n",snipParameters.win0);break;
        case 's': Serial.printf("%04d\r\n",snipParameters.win1);break;
        case 'e': Serial.printf("%04d\r\n",snipParameters.extr);break;
    15be:	ldr	r3, [pc, #212]	; (1694 <doMenu()+0x5a4>)
    15c0:	ldr	r1, [pc, #320]	; (1704 <doMenu()+0x614>)
    15c2:	ldr	r2, [r3, #16]
    15c4:	ldr	r0, [pc, #200]	; (1690 <doMenu()+0x5a0>)
    15c6:	bl	9d1c <Print::printf(char const*, ...)>
    15ca:	b.n	10f8 <doMenu()+0x8>
        
        case 'd': Serial.printf("%s\r\n",getDate(text));break;
        case 't': Serial.printf("%s\r\n",getTime(text));break;
        
        case 'c': Serial.printf("%04d\r\n",snipParameters.iproc);break;
        case 'h': Serial.printf("%04d\r\n",snipParameters.thresh);break;
    15cc:	ldr	r3, [pc, #196]	; (1694 <doMenu()+0x5a4>)
    15ce:	ldr	r1, [pc, #308]	; (1704 <doMenu()+0x614>)
    15d0:	ldr	r2, [r3, #4]
    15d2:	ldr	r0, [pc, #188]	; (1690 <doMenu()+0x5a0>)
    15d4:	bl	9d1c <Print::printf(char const*, ...)>
    15d8:	b.n	10f8 <doMenu()+0x8>
        case 'w': Serial.printf("%04d\r\n",snipParameters.win0);break;
        case 's': Serial.printf("%04d\r\n",snipParameters.win1);break;
        case 'e': Serial.printf("%04d\r\n",snipParameters.extr);break;
        case 'i': Serial.printf("%04d\r\n",snipParameters.inhib);break;
    15da:	ldr	r3, [pc, #184]	; (1694 <doMenu()+0x5a4>)
    15dc:	ldr	r1, [pc, #292]	; (1704 <doMenu()+0x614>)
    15de:	ldr	r2, [r3, #20]
    15e0:	ldr	r0, [pc, #172]	; (1690 <doMenu()+0x5a0>)
    15e2:	bl	9d1c <Print::printf(char const*, ...)>
    15e6:	b.n	10f8 <doMenu()+0x8>
        case 'k': Serial.printf("%04d\r\n",snipParameters.nrep);break;
    15e8:	ldr	r3, [pc, #168]	; (1694 <doMenu()+0x5a4>)
    15ea:	ldr	r1, [pc, #280]	; (1704 <doMenu()+0x614>)
    15ec:	ldr	r2, [r3, #24]
    15ee:	ldr	r0, [pc, #160]	; (1690 <doMenu()+0x5a0>)
    15f0:	bl	9d1c <Print::printf(char const*, ...)>
    15f4:	b.n	10f8 <doMenu()+0x8>
        case 'r': Serial.printf("%02d\r\n",acqParameters.ar); break;
        case '1': Serial.printf("%02d\r\n",acqParameters.T1);break;
        case '2': Serial.printf("%02d\r\n",acqParameters.T2);break;
        case '3': Serial.printf("%02d\r\n",acqParameters.T3);break;
        case '4': Serial.printf("%02d\r\n",acqParameters.T4);break;
        case 'n': Serial.printf("%s\r\n",acqParameters.name);break; 
    15f6:	ldr	r2, [pc, #184]	; (16b0 <doMenu()+0x5c0>)
    15f8:	ldr	r1, [pc, #268]	; (1708 <doMenu()+0x618>)
    15fa:	ldr	r0, [pc, #148]	; (1690 <doMenu()+0x5a0>)
    15fc:	bl	9d1c <Print::printf(char const*, ...)>
    1600:	b.n	10f8 <doMenu()+0x8>
    char c=Serial.read();
    
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      {
        case 'o': Serial.printf("%02d\r\n",acqParameters.on); break;
    1602:	ldr	r2, [r5, #0]
    1604:	ldr	r1, [pc, #248]	; (1700 <doMenu()+0x610>)
    1606:	ldr	r0, [pc, #136]	; (1690 <doMenu()+0x5a0>)
    1608:	bl	9d1c <Print::printf(char const*, ...)>
    160c:	b.n	10f8 <doMenu()+0x8>
        case 'w': Serial.printf("%04d\r\n",snipParameters.win0);break;
        case 's': Serial.printf("%04d\r\n",snipParameters.win1);break;
        case 'e': Serial.printf("%04d\r\n",snipParameters.extr);break;
        case 'i': Serial.printf("%04d\r\n",snipParameters.inhib);break;
        case 'k': Serial.printf("%04d\r\n",snipParameters.nrep);break;
        case 'p': Serial.printf("%04d\r\n",snipParameters.ndel);break;
    160e:	ldr	r3, [pc, #132]	; (1694 <doMenu()+0x5a4>)
    1610:	ldr	r1, [pc, #240]	; (1704 <doMenu()+0x614>)
    1612:	ldr	r2, [r3, #28]
    1614:	ldr	r0, [pc, #120]	; (1690 <doMenu()+0x5a0>)
    1616:	bl	9d1c <Print::printf(char const*, ...)>
    161a:	b.n	10f8 <doMenu()+0x8>
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      {
        case 'o': Serial.printf("%02d\r\n",acqParameters.on); break;
        case 'a': Serial.printf("%02d\r\n",acqParameters.ad); break;
        case 'r': Serial.printf("%02d\r\n",acqParameters.ar); break;
    161c:	ldr	r2, [r5, #8]
    161e:	ldr	r1, [pc, #224]	; (1700 <doMenu()+0x610>)
    1620:	ldr	r0, [pc, #108]	; (1690 <doMenu()+0x5a0>)
    1622:	bl	9d1c <Print::printf(char const*, ...)>
    1626:	b.n	10f8 <doMenu()+0x8>
        case 't': Serial.printf("%s\r\n",getTime(text));break;
        
        case 'c': Serial.printf("%04d\r\n",snipParameters.iproc);break;
        case 'h': Serial.printf("%04d\r\n",snipParameters.thresh);break;
        case 'w': Serial.printf("%04d\r\n",snipParameters.win0);break;
        case 's': Serial.printf("%04d\r\n",snipParameters.win1);break;
    1628:	ldr	r3, [pc, #104]	; (1694 <doMenu()+0x5a4>)
    162a:	ldr	r1, [pc, #216]	; (1704 <doMenu()+0x614>)
    162c:	ldr	r2, [r3, #12]
    162e:	ldr	r0, [pc, #96]	; (1690 <doMenu()+0x5a0>)
    1630:	bl	9d1c <Print::printf(char const*, ...)>
    1634:	b.n	10f8 <doMenu()+0x8>
        case '3': Serial.printf("%02d\r\n",acqParameters.T3);break;
        case '4': Serial.printf("%02d\r\n",acqParameters.T4);break;
        case 'n': Serial.printf("%s\r\n",acqParameters.name);break; 
        
        case 'd': Serial.printf("%s\r\n",getDate(text));break;
        case 't': Serial.printf("%s\r\n",getTime(text));break;
    1636:	bl	5ac <getTime(char*) [clone .constprop.33]>
    163a:	ldr	r1, [pc, #204]	; (1708 <doMenu()+0x618>)
    163c:	mov	r2, r0
    163e:	ldr	r0, [pc, #80]	; (1690 <doMenu()+0x5a0>)
    1640:	bl	9d1c <Print::printf(char const*, ...)>
    1644:	b.n	10f8 <doMenu()+0x8>
        
        case 'c': Serial.printf("%04d\r\n",snipParameters.iproc);break;
        case 'h': Serial.printf("%04d\r\n",snipParameters.thresh);break;
        case 'w': Serial.printf("%04d\r\n",snipParameters.win0);break;
    1646:	ldr	r3, [pc, #76]	; (1694 <doMenu()+0x5a4>)
    1648:	ldr	r1, [pc, #184]	; (1704 <doMenu()+0x614>)
    164a:	ldr	r2, [r3, #8]
    164c:	ldr	r0, [pc, #64]	; (1690 <doMenu()+0x5a0>)
    164e:	bl	9d1c <Print::printf(char const*, ...)>
    1652:	b.n	10f8 <doMenu()+0x8>
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
    1654:	ldr	r0, [pc, #56]	; (1690 <doMenu()+0x5a0>)
    1656:	bl	a1e4 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    165a:	cmp	r0, #0
    165c:	blt.w	1976 <doMenu()+0x886>
    1660:	cmp	r0, #24
    1662:	mov	r3, r0
    1664:	it	ge
    1666:	movge	r3, #24
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
    1668:	str	r3, [r5, #12]
    166a:	b.n	10f8 <doMenu()+0x8>
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
    166c:	ldr	r0, [pc, #32]	; (1690 <doMenu()+0x5a0>)
    166e:	bl	a1e4 <Stream::parseInt()>
    }
}
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
    1672:	cmp	r6, #23
    1674:	bgt.w	1926 <doMenu()+0x836>
  {
    if(val<minVal) val=minVal;
    1678:	cmp	r6, r0
    167a:	bgt.n	1688 <doMenu()+0x598>
    if(val>maxVal) val=maxVal;
    167c:	cmp	r0, #24
    167e:	it	gt
    1680:	movgt	r0, #24
    1682:	bgt.w	192c <doMenu()+0x83c>
    1686:	mov	r6, r0
    1688:	mov	r0, r6
    168a:	b.n	192c <doMenu()+0x83c>
    168c:	.word	0x00012ef0
    1690:	.word	0x20016f24
    1694:	.word	0x20016d44
    1698:	.word	0x00012f04
    169c:	.word	0x00012f18
    16a0:	.word	0x00012f2c
    16a4:	.word	0x00012f40
    16a8:	.word	0x00012f58
    16ac:	.word	0x00012f6c
    16b0:	.word	0x20016d84
    16b4:	.word	0x00012f80
    16b8:	.word	0x00012f90
    16bc:	.word	0x00012fa0
    16c0:	.word	0x00012fb0
    16c4:	.word	0x00012fcc
    16c8:	.word	0x00012fe0
    16cc:	.word	0x00012ff8
    16d0:	.word	0x00013010
    16d4:	.word	0x0001302c
    16d8:	.word	0x00013044
    16dc:	.word	0x00013064
    16e0:	.word	0x00013080
    16e4:	.word	0x00013098
    16e8:	.word	0x000130dc
    16ec:	.word	0x00013100
    16f0:	.word	0x0001315c
    16f4:	.word	0x00013184
    16f8:	.word	0x000131cc
    16fc:	.word	0x00013200
    1700:	.word	0x00012ee0
    1704:	.word	0x00012ee8
    1708:	.word	0x00012e38
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
    170c:	ldr	r0, [pc, #672]	; (19b0 <doMenu()+0x8c0>)
    170e:	bl	a1e4 <Stream::parseInt()>
    }
}
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
    1712:	cmp	r7, #23
    1714:	bgt.w	191c <doMenu()+0x82c>
  {
    if(val<minVal) val=minVal;
    1718:	cmp	r7, r0
    171a:	ble.w	195a <doMenu()+0x86a>
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
    171e:	str	r7, [r5, #20]
    1720:	b.n	10f8 <doMenu()+0x8>
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
    1722:	ldr	r0, [pc, #652]	; (19b0 <doMenu()+0x8c0>)
    1724:	bl	a1e4 <Stream::parseInt()>
  }
  return val; 
}
int boundaryCheck2(int val, int minVal, int maxVal, int modVal)
{
  if(minVal < maxVal) // standard case
    1728:	cmp	r6, r8
static void doMenu2(void)
{ // for settings
    uint16_t year,month,day,hour,minutes,seconds;
    int T1=acqParameters.T1;
    int T2=acqParameters.T2;
    int T3=acqParameters.T3;
    172a:	mov	r4, r8
  }
  return val; 
}
int boundaryCheck2(int val, int minVal, int maxVal, int modVal)
{
  if(minVal < maxVal) // standard case
    172c:	ble.w	1932 <doMenu()+0x842>
  {
    if(val<minVal) val=minVal;
    1730:	cmp	r8, r0
    1732:	bgt.n	173c <doMenu()+0x64c>
    if(val>maxVal) val=maxVal;
    1734:	cmp	r6, r0
    1736:	blt.w	1954 <doMenu()+0x864>
    173a:	mov	r4, r0
  }
  else // wrap around when checking hours
  {
    if(val<0) val=0;
    if(val>modVal) val=modVal;
    173c:	mov	r6, r4
    173e:	b.n	1954 <doMenu()+0x864>
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1740:	ldr	r0, [pc, #620]	; (19b0 <doMenu()+0x8c0>)
    1742:	bl	a1e4 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1746:	cmp	r0, #0
    1748:	blt.w	1972 <doMenu()+0x882>
    174c:	cmp.w	r0, #131072	; 0x20000
    1750:	mov	r3, r0
    1752:	it	ge
    1754:	movge.w	r3, #131072	; 0x20000
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1758:	str	r3, [r5, #4]
    175a:	b.n	10f8 <doMenu()+0x8>
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'e': snipParameters.extr   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'i': snipParameters.inhib  = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    175c:	ldr	r0, [pc, #592]	; (19b0 <doMenu()+0x8c0>)
    175e:	bl	a1e4 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1762:	cmp	r0, #0
    1764:	blt.w	19ac <doMenu()+0x8bc>
    if(val>maxVal) val=maxVal;
    1768:	cmp.w	r0, #131072	; 0x20000
    176c:	it	ge
    176e:	movge.w	r0, #131072	; 0x20000
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'e': snipParameters.extr   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'i': snipParameters.inhib  = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1772:	ldr	r3, [pc, #576]	; (19b4 <doMenu()+0x8c4>)
    1774:	str	r0, [r3, #20]
    1776:	b.n	10f8 <doMenu()+0x8>
        case 'k': snipParameters.nrep   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    1778:	ldr	r0, [pc, #564]	; (19b0 <doMenu()+0x8c0>)
    177a:	bl	a1e4 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    177e:	cmp	r0, #0
    1780:	blt.w	19a8 <doMenu()+0x8b8>
    if(val>maxVal) val=maxVal;
    1784:	cmp.w	r0, #131072	; 0x20000
    1788:	it	ge
    178a:	movge.w	r0, #131072	; 0x20000
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'e': snipParameters.extr   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'i': snipParameters.inhib  = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'k': snipParameters.nrep   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    178e:	ldr	r3, [pc, #548]	; (19b4 <doMenu()+0x8c4>)
    1790:	str	r0, [r3, #24]
    1792:	b.n	10f8 <doMenu()+0x8>
    1794:	ldr	r4, [pc, #544]	; (19b8 <doMenu()+0x8c8>)
    1796:	adds	r6, r4, #4
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    1798:	bl	8328 <usb_serial_getchar>
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
    179c:	strb.w	r0, [r4, #1]!
    17a0:	cmp	r4, r6
    17a2:	bne.n	1798 <doMenu()+0x6a8>
                  acqParameters.name[4]=0; break;
    17a4:	movs	r3, #0
    17a6:	strb.w	r3, [r5, #36]	; 0x24
    17aa:	b.n	10f8 <doMenu()+0x8>
    while(!Serial.available());
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    17ac:	ldr	r0, [pc, #512]	; (19b0 <doMenu()+0x8c0>)
    17ae:	bl	a1e4 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    17b2:	cmp	r0, #0
    17b4:	blt.w	19a4 <doMenu()+0x8b4>
    17b8:	cmp.w	r0, #131072	; 0x20000
    17bc:	mov	r3, r0
    17be:	it	ge
    17c0:	movge.w	r3, #131072	; 0x20000
    while(!Serial.available());
    char c=Serial.read();
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    17c4:	str	r3, [r5, #0]
    17c6:	b.n	10f8 <doMenu()+0x8>
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'e': snipParameters.extr   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'i': snipParameters.inhib  = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'k': snipParameters.nrep   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'p': snipParameters.ndel   = boundaryCheck(Serial.parseInt(),0,MDEL); break;
    17c8:	ldr	r0, [pc, #484]	; (19b0 <doMenu()+0x8c0>)
    17ca:	bl	a1e4 <Stream::parseInt()>
    17ce:	ldr	r3, [pc, #484]	; (19b4 <doMenu()+0x8c4>)
    17d0:	cmp	r0, #24
    17d2:	it	ge
    17d4:	movge	r0, #24
    17d6:	str	r0, [r3, #28]
    17d8:	b.n	10f8 <doMenu()+0x8>
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    17da:	ldr	r0, [pc, #468]	; (19b0 <doMenu()+0x8c0>)
    17dc:	bl	a1e4 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    17e0:	cmp	r0, #0
    17e2:	blt.w	19a0 <doMenu()+0x8b0>
    17e6:	cmp.w	r0, #131072	; 0x20000
    17ea:	mov	r3, r0
    17ec:	it	ge
    17ee:	movge.w	r3, #131072	; 0x20000
        
    if (strchr("oar1234ndtchwseikp", c))
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    17f2:	str	r3, [r5, #8]
    17f4:	b.n	10f8 <doMenu()+0x8>
                  break;
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    17f6:	ldr	r0, [pc, #440]	; (19b0 <doMenu()+0x8c0>)
    17f8:	bl	a1e4 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    17fc:	cmp	r0, #0
    17fe:	blt.w	199c <doMenu()+0x8ac>
    if(val>maxVal) val=maxVal;
    1802:	cmp.w	r0, #131072	; 0x20000
    1806:	it	ge
    1808:	movge.w	r0, #131072	; 0x20000
                  break;
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    180c:	ldr	r3, [pc, #420]	; (19b4 <doMenu()+0x8c4>)
    180e:	str	r0, [r3, #12]
    1810:	b.n	10f8 <doMenu()+0x8>
                  month=  boundaryCheck(Serial.parseInt(),1,12);
                  day=    boundaryCheck(Serial.parseInt(),1,31);
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour=     boundaryCheck(Serial.parseInt(),0,23);
    1812:	ldr	r0, [pc, #412]	; (19b0 <doMenu()+0x8c0>)
    1814:	bl	a1e4 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1818:	subs	r4, r0, #0
    181a:	blt.w	1998 <doMenu()+0x8a8>
    if(val>maxVal) val=maxVal;
    181e:	cmp	r4, #23
    1820:	it	ge
    1822:	movge	r4, #23
                  day=    boundaryCheck(Serial.parseInt(),1,31);
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour=     boundaryCheck(Serial.parseInt(),0,23);
                  minutes=  boundaryCheck(Serial.parseInt(),0,59);
    1824:	ldr	r0, [pc, #392]	; (19b0 <doMenu()+0x8c0>)
    1826:	bl	a1e4 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    182a:	subs	r6, r0, #0
    182c:	blt.w	1994 <doMenu()+0x8a4>
    if(val>maxVal) val=maxVal;
    1830:	cmp	r6, #59	; 0x3b
    1832:	it	ge
    1834:	movge	r6, #59	; 0x3b
                  setDate(year,month,day);
                  break;
        case 't': 
                  hour=     boundaryCheck(Serial.parseInt(),0,23);
                  minutes=  boundaryCheck(Serial.parseInt(),0,59);
                  seconds=  boundaryCheck(Serial.parseInt(),0,59);
    1836:	ldr	r0, [pc, #376]	; (19b0 <doMenu()+0x8c0>)
    1838:	bl	a1e4 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    183c:	subs	r7, r0, #0
    183e:	blt.w	1990 <doMenu()+0x8a0>
    if(val>maxVal) val=maxVal;
    1842:	cmp	r7, #59	; 0x3b
    1844:	it	ge
    1846:	movge	r7, #59	; 0x3b
    setTime(hour(),minute(),second(),day, month, year);
}

static void setTime(uint16_t hour, uint16_t minutes, uint16_t seconds)
{
    setTime(hour,minutes,seconds,day(),month(),year());
    1848:	bl	2a10 <day()>
    184c:	mov	r8, r0
    184e:	bl	2a30 <month()>
    1852:	mov	r9, r0
    1854:	bl	2a50 <year()>
    1858:	str.w	r9, [sp]
    185c:	str	r0, [sp, #4]
    185e:	mov	r3, r8
    1860:	mov	r2, r7
    1862:	mov	r1, r6
    1864:	mov	r0, r4
    1866:	bl	2a74 <setTime(int, int, int, int, int, int)>
    186a:	b.n	10f8 <doMenu()+0x8>
                  minutes=  boundaryCheck(Serial.parseInt(),0,59);
                  seconds=  boundaryCheck(Serial.parseInt(),0,59);
                  setTime(hour,minutes,seconds);
                  break;
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
    186c:	ldr	r0, [pc, #320]	; (19b0 <doMenu()+0x8c0>)
    186e:	bl	a1e4 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1872:	cmp	r0, #0
    1874:	blt.w	198c <doMenu()+0x89c>
    if(val>maxVal) val=maxVal;
    1878:	cmp	r0, #1
    187a:	it	ge
    187c:	movge	r0, #1
                  minutes=  boundaryCheck(Serial.parseInt(),0,59);
                  seconds=  boundaryCheck(Serial.parseInt(),0,59);
                  setTime(hour,minutes,seconds);
                  break;
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
    187e:	ldr	r3, [pc, #308]	; (19b4 <doMenu()+0x8c4>)
    1880:	str	r0, [r3, #0]
    1882:	b.n	10f8 <doMenu()+0x8>
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
                  acqParameters.name[4]=0; break;
        case 'd':     
                  year=   boundaryCheck(Serial.parseInt(),2000,3000);
    1884:	ldr	r0, [pc, #296]	; (19b0 <doMenu()+0x8c0>)
    1886:	bl	a1e4 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    188a:	cmp.w	r0, #2000	; 0x7d0
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
                  acqParameters.name[4]=0; break;
        case 'd':     
                  year=   boundaryCheck(Serial.parseInt(),2000,3000);
    188e:	mov	r4, r0
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1890:	blt.n	1916 <doMenu()+0x826>
    if(val>maxVal) val=maxVal;
    1892:	movw	r3, #3000	; 0xbb8
    1896:	cmp	r0, r3
    1898:	it	ge
    189a:	movge	r4, r3
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
                  acqParameters.name[4]=0; break;
        case 'd':     
                  year=   boundaryCheck(Serial.parseInt(),2000,3000);
                  month=  boundaryCheck(Serial.parseInt(),1,12);
    189c:	ldr	r0, [pc, #272]	; (19b0 <doMenu()+0x8c0>)
    189e:	bl	a1e4 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    18a2:	subs	r7, r0, #0
    18a4:	ble.n	197e <doMenu()+0x88e>
    if(val>maxVal) val=maxVal;
    18a6:	cmp	r7, #12
    18a8:	it	ge
    18aa:	movge	r7, #12
        case 'n': for(int ii=0; ii<4;ii++) acqParameters.name[ii] = Serial.read();
                  acqParameters.name[4]=0; break;
        case 'd':     
                  year=   boundaryCheck(Serial.parseInt(),2000,3000);
                  month=  boundaryCheck(Serial.parseInt(),1,12);
                  day=    boundaryCheck(Serial.parseInt(),1,31);
    18ac:	ldr	r0, [pc, #256]	; (19b0 <doMenu()+0x8c0>)
    18ae:	bl	a1e4 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    18b2:	subs	r6, r0, #0
    18b4:	ble.n	196e <doMenu()+0x87e>
    if(val>maxVal) val=maxVal;
    18b6:	cmp	r6, #31
    18b8:	it	ge
    18ba:	movge	r6, #31
    return text;
}

static void setDate(uint16_t year, uint16_t month, uint16_t day)
{
    setTime(hour(),minute(),second(),day, month, year);
    18bc:	bl	29b0 <hour()>
    18c0:	mov	r8, r0
    18c2:	bl	29d0 <minute()>
    18c6:	mov	r9, r0
    18c8:	bl	29f0 <second()>
    18cc:	mov	r1, r9
    18ce:	mov	r2, r0
    18d0:	str	r4, [sp, #4]
    18d2:	mov	r0, r8
    18d4:	str	r7, [sp, #0]
    18d6:	mov	r3, r6
    18d8:	bl	2a74 <setTime(int, int, int, int, int, int)>
    18dc:	b.n	10f8 <doMenu()+0x8>
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'e': snipParameters.extr   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    18de:	ldr	r0, [pc, #208]	; (19b0 <doMenu()+0x8c0>)
    18e0:	bl	a1e4 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    18e4:	cmp	r0, #0
    18e6:	blt.n	1988 <doMenu()+0x898>
    if(val>maxVal) val=maxVal;
    18e8:	cmp.w	r0, #131072	; 0x20000
    18ec:	it	ge
    18ee:	movge.w	r0, #131072	; 0x20000
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
        case 'w': snipParameters.win0   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 's': snipParameters.win1   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'e': snipParameters.extr   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
    18f2:	ldr	r3, [pc, #192]	; (19b4 <doMenu()+0x8c4>)
    18f4:	str	r0, [r3, #16]
    18f6:	b.w	10f8 <doMenu()+0x8>
                  seconds=  boundaryCheck(Serial.parseInt(),0,59);
                  setTime(hour,minutes,seconds);
                  break;
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
    18fa:	ldr	r0, [pc, #180]	; (19b0 <doMenu()+0x8c0>)
    18fc:	bl	a1e4 <Stream::parseInt()>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1900:	adds	r3, r0, #1
    1902:	blt.n	1982 <doMenu()+0x892>
    if(val>maxVal) val=maxVal;
    1904:	cmp.w	r0, #131072	; 0x20000
    1908:	it	ge
    190a:	movge.w	r0, #131072	; 0x20000
                  seconds=  boundaryCheck(Serial.parseInt(),0,59);
                  setTime(hour,minutes,seconds);
                  break;
        //
        case 'c': snipParameters.iproc  = boundaryCheck(Serial.parseInt(),0,1); break;
        case 'h': snipParameters.thresh = boundaryCheck(Serial.parseInt(),-1,MAX_VAL); break;
    190e:	ldr	r3, [pc, #164]	; (19b4 <doMenu()+0x8c4>)
    1910:	str	r0, [r3, #4]
    1912:	b.w	10f8 <doMenu()+0x8>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    1916:	mov.w	r4, #2000	; 0x7d0
    191a:	b.n	189c <doMenu()+0x7ac>
    if(val>maxVal) val=maxVal;
  }
  else // wrap around when checking hours
  {
    if((val>maxVal) && (val<minVal)) val=maxVal;
    191c:	cmp	r0, #24
    191e:	it	ge
    1920:	movge	r0, #24
    1922:	mov	r7, r0
    1924:	b.n	171e <doMenu()+0x62e>
    1926:	cmp	r0, #24
    1928:	it	ge
    192a:	movge	r0, #24
    { switch (c)
      { case 'o': acqParameters.on   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
    192c:	str	r0, [r5, #16]
    192e:	b.w	10f8 <doMenu()+0x8>
    if(val<minVal) val=minVal;
    if(val>maxVal) val=maxVal;
  }
  else // wrap around when checking hours
  {
    if(val<0) val=0;
    1932:	cmp	r0, #0
    1934:	blt.n	1966 <doMenu()+0x876>
    if(val>modVal) val=modVal;
    1936:	cmp	r0, #24
    1938:	it	ge
    193a:	movge	r0, #24
    // shift data to next good value
    if((val>maxVal) && (val<minVal))
    193c:	cmp	r6, r0
    193e:	bge.n	196a <doMenu()+0x87a>
    1940:	cmp	r8, r0
    1942:	ble.n	196a <doMenu()+0x87a>
    { if(val>(minVal+maxVal)/2) val = minVal; else val=maxVal;
    1944:	add.w	r3, r6, r8
    1948:	add.w	r3, r3, r3, lsr #31
    194c:	cmp.w	r0, r3, asr #1
    1950:	it	gt
    1952:	movgt	r6, r8
        case 'a': acqParameters.ad   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case 'r': acqParameters.ar   = boundaryCheck(Serial.parseInt(),0,MAX_VAL); break;
        case '1': acqParameters.T1   = boundaryCheck(Serial.parseInt(),0,24); break;
        case '2': acqParameters.T2   = boundaryCheck(Serial.parseInt(),T1,24); break;
        case '3': acqParameters.T3   = boundaryCheck(Serial.parseInt(),T2,24); break;
        case '4': acqParameters.T4   = boundaryCheck2(Serial.parseInt(),T3,T1,24); break;
    1954:	str	r6, [r5, #24]
    1956:	b.w	10f8 <doMenu()+0x8>
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    if(val>maxVal) val=maxVal;
    195a:	cmp	r0, #24
    195c:	it	gt
    195e:	movgt	r7, #24
    1960:	bgt.w	171e <doMenu()+0x62e>
    1964:	b.n	1922 <doMenu()+0x832>
    if(val<minVal) val=minVal;
    if(val>maxVal) val=maxVal;
  }
  else // wrap around when checking hours
  {
    if(val<0) val=0;
    1966:	movs	r0, #0
    1968:	b.n	193c <doMenu()+0x84c>
    if(val>modVal) val=modVal;
    // shift data to next good value
    if((val>maxVal) && (val<minVal))
    196a:	mov	r6, r0
    196c:	b.n	1954 <doMenu()+0x864>
#define MAX_VAL 1<<17 // maimal input value
int boundaryCheck(int val, int minVal, int maxVal)
{
  if(minVal < maxVal) // standard case
  {
    if(val<minVal) val=minVal;
    196e:	movs	r6, #1
    1970:	b.n	18bc <doMenu()+0x7cc>
    1972:	movs	r3, #0
    1974:	b.n	1758 <doMenu()+0x668>
    1976:	movs	r3, #0
    1978:	b.n	1668 <doMenu()+0x578>
    197a:	movs	r0, #0
    197c:	b.n	155e <doMenu()+0x46e>
    197e:	movs	r7, #1
    1980:	b.n	18ac <doMenu()+0x7bc>
    1982:	mov.w	r0, #4294967295
    1986:	b.n	190e <doMenu()+0x81e>
    1988:	movs	r0, #0
    198a:	b.n	18f2 <doMenu()+0x802>
    198c:	movs	r0, #0
    198e:	b.n	187e <doMenu()+0x78e>
    1990:	movs	r7, #0
    1992:	b.n	1848 <doMenu()+0x758>
    1994:	movs	r6, #0
    1996:	b.n	1836 <doMenu()+0x746>
    1998:	movs	r4, #0
    199a:	b.n	1824 <doMenu()+0x734>
    199c:	movs	r0, #0
    199e:	b.n	180c <doMenu()+0x71c>
    19a0:	movs	r3, #0
    19a2:	b.n	17f2 <doMenu()+0x702>
    19a4:	movs	r3, #0
    19a6:	b.n	17c4 <doMenu()+0x6d4>
    19a8:	movs	r0, #0
    19aa:	b.n	178e <doMenu()+0x69e>
    19ac:	movs	r0, #0
    19ae:	b.n	1772 <doMenu()+0x682>
    19b0:	.word	0x20016f24
    19b4:	.word	0x20016d44
    19b8:	.word	0x20016d83

000019bc <setup>:
//extern void rtc_set(unsigned long t);

time_t getTeensy3Time(){  return Teensy3Clock.get();}
//__________________________General Arduino Routines_____________________________________

extern "C" void setup() {
    19bc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // put your setup code here, to run once:
  int16_t nsec;
  pinMode(3,INPUT_PULLUP); // needed to enter menu if grounded
    19c0:	movs	r0, #3
//extern void rtc_set(unsigned long t);

time_t getTeensy3Time(){  return Teensy3Clock.get();}
//__________________________General Arduino Routines_____________________________________

extern "C" void setup() {
    19c2:	sub	sp, #8
  // put your setup code here, to run once:
  int16_t nsec;
  pinMode(3,INPUT_PULLUP); // needed to enter menu if grounded
    19c4:	movs	r1, #2
    19c6:	bl	8898 <pinMode>

#if DO_DEBUG>0

  // set the Time library to use Teensy 3.0's RTC to keep time
  setSyncProvider(getTeensy3Time);
    19ca:	ldr	r0, [pc, #316]	; (1b08 <setup+0x14c>)
    19cc:	ldr	r4, [pc, #316]	; (1b0c <setup+0x150>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    19ce:	ldr	r5, [pc, #320]	; (1b10 <setup+0x154>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    19d0:	ldr	r7, [pc, #320]	; (1b14 <setup+0x158>)
    19d2:	ldr	r6, [pc, #324]	; (1b18 <setup+0x15c>)
    19d4:	bl	2ae0 <setSyncProvider(long (*)())>
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    19d8:	ldrb	r3, [r4, #0]

   while(!Serial && !digitalRead(3));
    19da:	movs	r0, #3
    19dc:	cmp	r3, #0
    19de:	beq.w	1afc <setup+0x140>
    19e2:	ldrb	r3, [r5, #0]
    19e4:	lsls	r2, r3, #31
    19e6:	bpl.w	1afc <setup+0x140>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    19ea:	ldr	r3, [r7, #0]
    19ec:	ldr	r2, [r6, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    19ee:	subs	r3, r3, r2
    19f0:	cmp	r3, #14
    19f2:	bls.w	1afc <setup+0x140>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    19f6:	movs	r1, #18
    19f8:	ldr	r0, [pc, #288]	; (1b1c <setup+0x160>)

  //
  uSD.init();

  // always load config first
  uSD.loadConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    19fa:	ldr	r5, [pc, #292]	; (1b20 <setup+0x164>)
    19fc:	bl	83f4 <usb_serial_write>
    1a00:	ldr	r0, [pc, #288]	; (1b24 <setup+0x168>)
    1a02:	bl	9cec <Print::println()>
  // for 16bit resolution
  temperature = -0.0293 * analogRead(70) + 440.5;
*/

#define MAUDIO (M_QUEU+MDEL+50)
	AudioMemory (MAUDIO); // 600 blocks use about 200 kB (requires Teensy 3.6)
    1a06:	movw	r1, #599	; 0x257
    1a0a:	ldr	r0, [pc, #284]	; (1b28 <setup+0x16c>)
    1a0c:	bl	9dd4 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>
      SIM_SCGC6 &= ~SIM_SCGC6_I2S;
}

void I2S_stop(void)
{
    I2S0_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
    1a10:	ldr	r2, [pc, #280]	; (1b2c <setup+0x170>)
//  uint32_t t0=rtc_get();
//  uint32_t t1=(uint32_t)&__rtc_localtime;
//  if((t1-t0)>100) rtc_set(t1);

  //
  uSD.init();
    1a12:	ldr	r0, [pc, #284]	; (1b30 <setup+0x174>)
    1a14:	ldr	r3, [r2, #0]
    1a16:	bic.w	r3, r3, #2415919104	; 0x90000000
    1a1a:	str	r3, [r2, #0]

  // always load config first
  uSD.loadConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1a1c:	movs	r4, #8
//  uint32_t t0=rtc_get();
//  uint32_t t1=(uint32_t)&__rtc_localtime;
//  if((t1-t0)>100) rtc_set(t1);

  //
  uSD.init();
    1a1e:	bl	9ec <c_uSD::init()>

  // always load config first
  uSD.loadConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1a22:	mov	r3, r5
    1a24:	str	r4, [sp, #0]
    1a26:	mov	r2, r4
    1a28:	ldr	r1, [pc, #264]	; (1b34 <setup+0x178>)
    1a2a:	ldr	r0, [pc, #260]	; (1b30 <setup+0x174>)
    1a2c:	bl	ca4 <c_uSD::loadConfig(unsigned long*, int, long*, int)>
		} else if (pin == 1) {
			return (CORE_PIN1_PINREG & CORE_PIN1_BITMASK) ? 1 : 0;
		} else if (pin == 2) {
			return (CORE_PIN2_PINREG & CORE_PIN2_BITMASK) ? 1 : 0;
		} else if (pin == 3) {
			return (CORE_PIN3_PINREG & CORE_PIN3_BITMASK) ? 1 : 0;
    1a30:	ldr	r3, [pc, #260]	; (1b38 <setup+0x17c>)
    1a32:	ldr	r3, [r3, #0]
    1a34:	lsls	r3, r3, #19
    1a36:	bmi.n	1a4a <setup+0x8e>
#endif

  // if pin3 is connected to GND enter menu mode
  int ret;
  if(!digitalReadFast(3))
  { ret=doMenu();
    1a38:	bl	10f0 <doMenu()>
    if(ret<0) ;  // should shutdown now (not implemented) // keep compiler happy
      
    // should here save parameters to disk if modified
    uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1a3c:	str	r4, [sp, #0]
    1a3e:	mov	r2, r4
    1a40:	mov	r3, r5
    1a42:	ldr	r1, [pc, #240]	; (1b34 <setup+0x178>)
    1a44:	ldr	r0, [pc, #232]	; (1b30 <setup+0x174>)
    1a46:	bl	b7c <c_uSD::storeConfig(unsigned long*, int, long*, int)>
  }
  //
  // check if it is our time to record
  nsec=checkDutyCycle(&acqParameters, -1);
    1a4a:	mov.w	r1, #4294967295
    1a4e:	ldr	r0, [pc, #228]	; (1b34 <setup+0x178>)
    1a50:	bl	f4c <checkDutyCycle(ACQ_Parameters_s*, short)>
  if(nsec>0) 
    1a54:	cmp	r0, #0
    1a56:	ble.n	1a66 <setup+0xaa>
    iscl[2] = (int) (i3-1);
}

void I2S_stopClock(void)
{
      SIM_SCGC6 &= ~SIM_SCGC6_I2S;
    1a58:	ldr	r2, [pc, #224]	; (1b3c <setup+0x180>)
    1a5a:	ldr	r3, [r2, #0]
    1a5c:	bic.w	r3, r3, #32768	; 0x8000
    1a60:	str	r3, [r2, #0]
  { 
    #if ((ACQ == _I2S) || (ACQ == _I2S_QUAD) || (ACQ == _I2S_32) || (ACQ == _I2S_32_MONO) || (ACQ == _I2S_TYMPAN) || (ACQ == _I2S_TDM))
      I2S_stopClock();
    #endif
    setWakeupCallandSleep(nsec); // will not return if we should not continue with acquisition 
    1a62:	bl	db4 <setWakeupCallandSleep(unsigned long)>
  
  #elif ((ACQ == _I2S))
    I2S_modification(F_SAMP,32,2);
  
  #elif (ACQ == _I2S_QUAD)
    I2S_modification(F_SAMP,16,4); // I2S_Quad not modified for 32 bit (therefore 16 bit)
    1a66:	movs	r2, #4
    1a68:	movs	r1, #16
    1a6a:	movw	r0, #48000	; 0xbb80
    1a6e:	bl	80c <I2S_modification(unsigned long, unsigned short, int)>
    int16_t nbits=NSHIFT; 
    acq.digitalShift(nbits); 
  #endif

  //are we using the eventTrigger?
  if(snipParameters.thresh>=0) mustClose=0; else mustClose=-1;
    1a72:	ldr	r3, [r5, #4]
  state=0;
}

void c_uSD::setPrefix(char *prefix)
{
  strcpy(name,prefix);
    1a74:	ldr	r1, [pc, #200]	; (1b40 <setup+0x184>)
    1a76:	ldr	r0, [pc, #204]	; (1b44 <setup+0x188>)
    1a78:	ldr	r6, [pc, #204]	; (1b48 <setup+0x18c>)
    1a7a:	cmp	r3, #0
    1a7c:	ldr	r3, [pc, #204]	; (1b4c <setup+0x190>)
    1a7e:	ite	ge
    1a80:	movge	r2, #0
    1a82:	movwlt	r2, #65535	; 0xffff
    1a86:	strh	r2, [r3, #0]
    1a88:	bl	c72c <strcpy>
    1a8c:	movs	r5, #0
{
	uint16_t t;

	if (userblock) {
		release(userblock);
		userblock = NULL;
    1a8e:	mov	r7, r5
  // lets start
  #if MDEL>=0
    process1.begin(&snipParameters); 
  #endif

  for(int ii=0; ii<NCH; ii++) queue[ii].begin();
    1a90:	ldr	r3, [r6, #0]
    1a92:	add.w	r8, r3, r5
template <int MQ>
void mRecordQueue<MQ>::clear(void)
{
	uint16_t t;

	if (userblock) {
    1a96:	ldr.w	r0, [r8, #580]	; 0x244
    1a9a:	cbz	r0, 1aa4 <setup+0xe8>
		release(userblock);
    1a9c:	bl	9ee8 <AudioStream::release(audio_block_struct*)>
		userblock = NULL;
    1aa0:	str.w	r7, [r8, #580]	; 0x244
	}
	t = tail;
    1aa4:	ldrh.w	r4, [r8, #586]	; 0x24a
	while (t != head) {
    1aa8:	ldrh.w	r3, [r8, #584]	; 0x248

	if (userblock) {
		release(userblock);
		userblock = NULL;
	}
	t = tail;
    1aac:	uxth	r4, r4
	while (t != head) {
    1aae:	uxth	r3, r3
    1ab0:	cmp	r4, r3
    1ab2:	beq.n	1ad4 <setup+0x118>
		if (++t >= MQ) t = 0;
    1ab4:	adds	r4, #1
    1ab6:	uxth	r4, r4
    1ab8:	cmp	r4, #136	; 0x88
    1aba:	it	hi
    1abc:	movhi	r4, #0
    1abe:	mov	r3, r4
		release(queue[t]);
    1ac0:	adds	r3, #8
    1ac2:	ldr.w	r0, [r8, r3, lsl #2]
    1ac6:	bl	9ee8 <AudioStream::release(audio_block_struct*)>
	if (userblock) {
		release(userblock);
		userblock = NULL;
	}
	t = tail;
	while (t != head) {
    1aca:	ldrh.w	r3, [r8, #584]	; 0x248
    1ace:	uxth	r3, r3
    1ad0:	cmp	r3, r4
    1ad2:	bne.n	1ab4 <setup+0xf8>
    1ad4:	add.w	r5, r5, #592	; 0x250
{
public:
	mRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
   
	void begin(void) { clear();	enabled = 1;}
    1ad8:	movs	r3, #1
    1ada:	cmp.w	r5, #2368	; 0x940
	t = tail;
	while (t != head) {
		if (++t >= MQ) t = 0;
		release(queue[t]);
	}
	tail = t;
    1ade:	strh.w	r4, [r8, #586]	; 0x24a
{
public:
	mRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
   
	void begin(void) { clear();	enabled = 1;}
    1ae2:	strh.w	r3, [r8, #588]	; 0x24c
    1ae6:	bne.n	1a90 <setup+0xd4>
    1ae8:	movs	r1, #12
    1aea:	ldr	r0, [pc, #100]	; (1b50 <setup+0x194>)
    1aec:	bl	83f4 <usb_serial_write>
    1af0:	ldr	r0, [pc, #48]	; (1b24 <setup+0x168>)
  //
  Serial.println("End of Setup");
}
    1af2:	add	sp, #8
    1af4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1af8:	b.w	9cec <Print::println()>
#if DO_DEBUG>0

  // set the Time library to use Teensy 3.0's RTC to keep time
  setSyncProvider(getTeensy3Time);

   while(!Serial && !digitalRead(3));
    1afc:	bl	887c <digitalRead>
    1b00:	cmp	r0, #0
    1b02:	beq.w	19d8 <setup+0x1c>
    1b06:	b.n	19f6 <setup+0x3a>
    1b08:	.word	0x0000054d
    1b0c:	.word	0x2001ca40
    1b10:	.word	0x2001c958
    1b14:	.word	0x2001c95c
    1b18:	.word	0x2001ce30
    1b1c:	.word	0x0001322c
    1b20:	.word	0x20016d44
    1b24:	.word	0x20016f24
    1b28:	.word	0x1fff0200
    1b2c:	.word	0x4002f080
    1b30:	.word	0x2001799c
    1b34:	.word	0x20016d64
    1b38:	.word	0x400ff010
    1b3c:	.word	0x4004803c
    1b40:	.word	0x20016d84
    1b44:	.word	0x20017e9e
    1b48:	.word	0x20017eb0
    1b4c:	.word	0x20016d34
    1b50:	.word	0x00013240

00001b54 <SdBase<FsVolume>::errorHalt(Print*)>:
  //----------------------------------------------------------------------------
  /** %Print error info and halt.
   *
   * \param[in] pr Print destination.
   */
  void errorHalt(print_t* pr) {
    1b54:	mov	r5, r0
    1b56:	ldr.w	r0, [r0, #1156]	; 0x484
    1b5a:	push	{r3, lr}
    1b5c:	mov	r4, r1
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1b5e:	cbz	r0, 1b90 <SdBase<FsVolume>::errorHalt(Print*)+0x3c>
      return m_card->errorCode();
    1b60:	ldr	r3, [r0, #0]
    1b62:	ldr	r3, [r3, #36]	; 0x24
    1b64:	blx	r3
  /** %Print error info and halt.
   *
   * \param[in] pr Print destination.
   */
  void errorHalt(print_t* pr) {
    if (sdErrorCode()) {
    1b66:	cbnz	r0, 1b90 <SdBase<FsVolume>::errorHalt(Print*)+0x3c>
    1b68:	ldr.w	r3, [r5, #1144]	; 0x478
  /** \return Partition type, FAT_TYPE_EXFAT, FAT_TYPE_FAT32,
   *          FAT_TYPE_FAT16, or zero for error.
   */
  uint8_t fatType() const {
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
    1b6c:	cbz	r3, 1b78 <SdBase<FsVolume>::errorHalt(Print*)+0x24>
    1b6e:	ldrb	r3, [r3, #7]
      pr->print(F("SdError: 0X"));
      pr->print(sdErrorCode(), HEX);
      pr->print(F(",0X"));
      pr->println(sdErrorData(), HEX);
    } else if (!Vol::fatType()) {
    1b70:	cbz	r3, 1b86 <SdBase<FsVolume>::errorHalt(Print*)+0x32>
  Particle.process();
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    1b72:	bl	9bcc <yield>
    1b76:	b.n	1b72 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
    1b78:	ldr.w	r3, [r5, #1148]	; 0x47c
    1b7c:	cbz	r3, 1b86 <SdBase<FsVolume>::errorHalt(Print*)+0x32>
    1b7e:	ldrb.w	r3, [r3, #1084]	; 0x43c
    1b82:	cmp	r3, #0
    1b84:	bne.n	1b72 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
      pr->println(F("Check SD format."));
    1b86:	mov	r0, r4
    1b88:	ldr	r1, [pc, #84]	; (1be0 <SdBase<FsVolume>::errorHalt(Print*)+0x8c>)
    1b8a:	bl	734 <Print::println(__FlashStringHelper const*)>
    1b8e:	b.n	1b72 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    1b90:	ldr	r1, [pc, #80]	; (1be4 <SdBase<FsVolume>::errorHalt(Print*)+0x90>)
    1b92:	mov	r0, r4
    1b94:	bl	718 <Print::write(char const*)>
    1b98:	ldr.w	r0, [r5, #1156]	; 0x484
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1b9c:	cbz	r0, 1bdc <SdBase<FsVolume>::errorHalt(Print*)+0x88>
      return m_card->errorCode();
    1b9e:	ldr	r3, [r0, #0]
    1ba0:	ldr	r3, [r3, #36]	; 0x24
    1ba2:	blx	r3
    1ba4:	mov	r1, r0
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1ba6:	movs	r3, #0
    1ba8:	movs	r2, #16
    1baa:	mov	r0, r4
    1bac:	bl	9d38 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    1bb0:	ldr	r1, [pc, #52]	; (1be8 <SdBase<FsVolume>::errorHalt(Print*)+0x94>)
    1bb2:	mov	r0, r4
    1bb4:	bl	718 <Print::write(char const*)>
    1bb8:	ldr.w	r0, [r5, #1156]	; 0x484
    }
    return SD_CARD_ERROR_INVALID_CARD_CONFIG;
  }
  //----------------------------------------------------------------------------
  /** \return SD card error data. */
  uint8_t sdErrorData() {return m_card ? m_card->errorData() : 0;}
    1bbc:	cbz	r0, 1bd8 <SdBase<FsVolume>::errorHalt(Print*)+0x84>
    1bbe:	ldr	r3, [r0, #0]
    1bc0:	ldr	r3, [r3, #40]	; 0x28
    1bc2:	blx	r3
    1bc4:	uxtb	r1, r0
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1bc6:	movs	r3, #0
    1bc8:	movs	r2, #16
    1bca:	mov	r0, r4
    1bcc:	bl	9d38 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    1bd0:	mov	r0, r4
    1bd2:	bl	9cec <Print::println()>
    1bd6:	b.n	1b72 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
    1bd8:	mov	r1, r0
    1bda:	b.n	1bc6 <SdBase<FsVolume>::errorHalt(Print*)+0x72>
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1bdc:	movs	r1, #41	; 0x29
    1bde:	b.n	1ba6 <SdBase<FsVolume>::errorHalt(Print*)+0x52>
    1be0:	.word	0x00013260
    1be4:	.word	0x00013250
    1be8:	.word	0x0001325c

00001bec <SdBase<FsVolume>::errorHalt(char const*)>:
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    1bec:	ldr	r4, [pc, #28]	; (1c0c <SdBase<FsVolume>::errorHalt(char const*)+0x20>)
  //----------------------------------------------------------------------------
  /** %Print error info and halt.
   *
   * \param[in] msg Message to print.
   */
  void errorHalt(const char* msg) {errorHalt(&Serial, msg);}
    1bee:	push	{r3, lr}
    1bf0:	mov	r5, r0
    1bf2:	mov	r6, r1
    1bf4:	mov	r0, r4
    1bf6:	ldr	r1, [pc, #24]	; (1c10 <SdBase<FsVolume>::errorHalt(char const*)+0x24>)
    1bf8:	bl	718 <Print::write(char const*)>
   * \param[in] pr Print destination.
   * \param[in] msg Message to print.
   */
  void errorHalt(print_t* pr, const char* msg) {
    pr->print(F("error: "));
    pr->println(msg);
    1bfc:	mov	r1, r6
    1bfe:	mov	r0, r4
    1c00:	bl	734 <Print::println(__FlashStringHelper const*)>
    errorHalt(pr);
    1c04:	mov	r1, r4
    1c06:	mov	r0, r5
    1c08:	bl	1b54 <SdBase<FsVolume>::errorHalt(Print*)>
    1c0c:	.word	0x20016f24
    1c10:	.word	0x00013274

00001c14 <c_uSD::write(short*, long)>:
}

int16_t c_uSD::write(int16_t *data, int32_t ndat)
{
    1c14:	push	{r4, r5, r6, lr}
    1c16:	mov	r4, r0
  if(state == 0)
    1c18:	ldrsh.w	r0, [r0, #1276]	; 0x4fc
{
  strcpy(name,prefix);
}

int16_t c_uSD::write(int16_t *data, int32_t ndat)
{
    1c1c:	mov	r6, r1
    1c1e:	mov	r5, r2
  if(state == 0)
    1c20:	cbz	r0, 1c30 <c_uSD::write(short*, long)+0x1c>
    #endif
    state=1; // flag that file is open
    nbuf=0;
  }
  
  if(state == 1 || state == 2)
    1c22:	subs	r3, r0, #1
    1c24:	uxth	r3, r3
    1c26:	cmp	r3, #1
    1c28:	bls.n	1c76 <c_uSD::write(short*, long)+0x62>
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    nbuf++;
    if(closing) {closing=0; state=3;}
  }
  
  if(state == 3)
    1c2a:	cmp	r0, #3
    1c2c:	beq.n	1ce8 <c_uSD::write(short*, long)+0xd4>
  {
    state=close();
  }
  return state;
}
    1c2e:	pop	{r4, r5, r6, pc}

int16_t c_uSD::write(int16_t *data, int32_t ndat)
{
  if(state == 0)
  { // open file
    char *filename = makeFilename(name);
    1c30:	addw	r0, r4, #1282	; 0x502
    1c34:	bl	908 <makeFilename(char*)>
    if(!filename) {state=-1; return state;} // flag to do not anything
    1c38:	cmp	r0, #0
    1c3a:	beq.n	1cf4 <c_uSD::write(short*, long)+0xe0>
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    1c3c:	ldr	r3, [pc, #204]	; (1d0c <c_uSD::write(short*, long)+0xf8>)
    1c3e:	ldr	r1, [r3, #0]
    1c40:	cmp	r1, #0
    1c42:	beq.n	1cc2 <c_uSD::write(short*, long)+0xae>
    1c44:	mov	r2, r0
    1c46:	movw	r3, #1538	; 0x602
    1c4a:	addw	r0, r4, #1212	; 0x4bc
    1c4e:	bl	68c0 <FsBaseFile::open(FsVolume*, char const*, int)>
    1c52:	cbz	r0, 1cc2 <c_uSD::write(short*, long)+0xae>
    1c54:	ldr.w	r0, [r4, #1268]	; 0x4f4
   * \param[in] length size of the file in bytes.
   * \return true for success or false for failure.
   */
  bool preAllocate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->preAllocate(length) :
           m_xFile ? m_xFile->preAllocate(length) : false;
    1c58:	cbz	r0, 1ca6 <c_uSD::write(short*, long)+0x92>
   *
   * \param[in] length size of the file in bytes.
   * \return true for success or false for failure.
   */
  bool preAllocate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->preAllocate(length) :
    1c5a:	mov.w	r1, #41943040	; 0x2800000
    1c5e:	bl	56c0 <FatFile::preAllocate(unsigned long)>
    1c62:	cbz	r0, 1cba <c_uSD::write(short*, long)+0xa6>
    //
    if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) sd.errorHalt("file.open failed");
    if (!file.preAllocate(PRE_ALLOCATE_SIZE)) sd.errorHalt("file.preAllocate failed");
    #ifdef  GEN_WAV_FILE // keep first record
          memcpy(header,(const char *)data,512);
    1c64:	mov.w	r2, #512	; 0x200
    1c68:	mov	r1, r6
    1c6a:	ldr	r0, [pc, #164]	; (1d10 <c_uSD::write(short*, long)+0xfc>)
    1c6c:	bl	81f4 <memcpy>
    #endif
    state=1; // flag that file is open
    nbuf=0;
    1c70:	movs	r3, #0
    1c72:	strh.w	r3, [r4, #1278]	; 0x4fe
    1c76:	ldr.w	r0, [r4, #1268]	; 0x4f4
  }
  
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    1c7a:	movs	r3, #2
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    1c7c:	lsls	r5, r5, #1
    nbuf=0;
  }
  
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    1c7e:	strh.w	r3, [r4, #1276]	; 0x4fc
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    1c82:	cbz	r0, 1cca <c_uSD::write(short*, long)+0xb6>
    1c84:	mov	r1, r6
    1c86:	mov	r2, r5
    1c88:	bl	5be0 <FatFile::write(void const*, unsigned int)>
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    1c8c:	cmp	r0, r5
    1c8e:	bne.n	1d02 <c_uSD::write(short*, long)+0xee>
    nbuf++;
    1c90:	ldrh.w	r3, [r4, #1278]	; 0x4fe
    if(closing) {closing=0; state=3;}
    1c94:	ldrsh.w	r2, [r4, #1280]	; 0x500
  
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    nbuf++;
    1c98:	adds	r3, #1
    1c9a:	strh.w	r3, [r4, #1278]	; 0x4fe
    if(closing) {closing=0; state=3;}
    1c9e:	cbnz	r2, 1cdc <c_uSD::write(short*, long)+0xc8>
    1ca0:	ldrsh.w	r0, [r4, #1276]	; 0x4fc
    1ca4:	b.n	1c2a <c_uSD::write(short*, long)+0x16>
   * \param[in] length size of the file in bytes.
   * \return true for success or false for failure.
   */
  bool preAllocate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->preAllocate(length) :
           m_xFile ? m_xFile->preAllocate(length) : false;
    1ca6:	ldr.w	r0, [r4, #1272]	; 0x4f8
    1caa:	cbz	r0, 1cba <c_uSD::write(short*, long)+0xa6>
    1cac:	mov.w	r2, #41943040	; 0x2800000
    1cb0:	movs	r3, #0
    1cb2:	bl	50f8 <ExFatFile::preAllocate(unsigned long long)>
  { // open file
    char *filename = makeFilename(name);
    if(!filename) {state=-1; return state;} // flag to do not anything
    //
    if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) sd.errorHalt("file.open failed");
    if (!file.preAllocate(PRE_ALLOCATE_SIZE)) sd.errorHalt("file.preAllocate failed");
    1cb6:	cmp	r0, #0
    1cb8:	bne.n	1c64 <c_uSD::write(short*, long)+0x50>
    1cba:	mov	r0, r4
    1cbc:	ldr	r1, [pc, #84]	; (1d14 <c_uSD::write(short*, long)+0x100>)
    1cbe:	bl	1bec <SdBase<FsVolume>::errorHalt(char const*)>
  if(state == 0)
  { // open file
    char *filename = makeFilename(name);
    if(!filename) {state=-1; return state;} // flag to do not anything
    //
    if (!file.open(filename, O_CREAT | O_TRUNC |O_RDWR)) sd.errorHalt("file.open failed");
    1cc2:	mov	r0, r4
    1cc4:	ldr	r1, [pc, #80]	; (1d18 <c_uSD::write(short*, long)+0x104>)
    1cc6:	bl	1bec <SdBase<FsVolume>::errorHalt(char const*)>
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    1cca:	ldr.w	r0, [r4, #1272]	; 0x4f8
    1cce:	cmp	r0, #0
    1cd0:	beq.n	1c8c <c_uSD::write(short*, long)+0x78>
    1cd2:	mov	r1, r6
    1cd4:	mov	r2, r5
    1cd6:	bl	5268 <ExFatFile::write(void const*, unsigned int)>
    1cda:	b.n	1c8c <c_uSD::write(short*, long)+0x78>
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    nbuf++;
    if(closing) {closing=0; state=3;}
    1cdc:	movs	r2, #0
    1cde:	movs	r3, #3
    1ce0:	strh.w	r2, [r4, #1280]	; 0x500
    1ce4:	strh.w	r3, [r4, #1276]	; 0x4fc
  }
  
  if(state == 3)
  {
    state=close();
    1ce8:	mov	r0, r4
    1cea:	bl	a5c <c_uSD::close()>
    1cee:	strh.w	r0, [r4, #1276]	; 0x4fc
  }
  return state;
    1cf2:	pop	{r4, r5, r6, pc}
int16_t c_uSD::write(int16_t *data, int32_t ndat)
{
  if(state == 0)
  { // open file
    char *filename = makeFilename(name);
    if(!filename) {state=-1; return state;} // flag to do not anything
    1cf4:	movw	r3, #65535	; 0xffff
    1cf8:	strh.w	r3, [r4, #1276]	; 0x4fc
    1cfc:	mov.w	r0, #4294967295
    1d00:	pop	{r4, r5, r6, pc}
  }
  
  if(state == 1 || state == 2)
  {  // write to disk
    state=2;
    if (2*ndat != (int32_t) file.write((char *) data, 2*ndat)) sd.errorHalt("file.write data failed");
    1d02:	mov	r0, r4
    1d04:	ldr	r1, [pc, #20]	; (1d1c <c_uSD::write(short*, long)+0x108>)
    1d06:	bl	1bec <SdBase<FsVolume>::errorHalt(char const*)>
    1d0a:	nop
    1d0c:	.word	0x2001c8fc
    1d10:	.word	0x20017eb4
    1d14:	.word	0x000132a8
    1d18:	.word	0x00013294
    1d1c:	.word	0x0001327c

00001d20 <loop>:
}

volatile uint32_t maxValue=0, maxNoise=0; // possibly be updated outside
int16_t tempBuffer[AUDIO_BLOCK_SAMPLES*NCH];

extern "C" void loop() {
    1d20:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1d24:	ldr	r7, [pc, #704]	; (1fe8 <loop+0x2c8>)
    1d26:	ldr	r2, [r7, #0]
    1d28:	sub	sp, #40	; 0x28
  int16_t nsec;
  uint32_t to=0,t1,t2;
  static uint32_t t3,t4;
  static int16_t state=0; // 0: open new file, -1: last file

  int have_data=1;
    1d2a:	movs	r0, #1
    1d2c:	add.w	r5, r2, #2368	; 0x940
template <int MQ>
uint16_t mRecordQueue<MQ>::available(void)
{
  uint16_t h, t;

  h = head;
    1d30:	ldrh.w	r3, [r2, #584]	; 0x248
  t = tail;
    1d34:	ldrh.w	r1, [r2, #586]	; 0x24a
template <int MQ>
uint16_t mRecordQueue<MQ>::available(void)
{
  uint16_t h, t;

  h = head;
    1d38:	uxth	r3, r3
  t = tail;
    1d3a:	uxth	r1, r1
  if (h >= t) return h - t;
    1d3c:	cmp	r3, r1
    1d3e:	sub.w	r4, r3, r1
  return MQ + h - t;
    1d42:	ittet	cc
    1d44:	addcc	r3, #137	; 0x89
    1d46:	subcc	r3, r3, r1
{
  uint16_t h, t;

  h = head;
  t = tail;
  if (h >= t) return h - t;
    1d48:	uxthcs	r3, r4
  return MQ + h - t;
    1d4a:	uxthcc	r3, r3
  for(int ii=0;ii<NCH;ii++) if(queue[ii].available()==0) have_data=0;
    1d4c:	cmp	r3, #0
    1d4e:	add.w	r2, r2, #592	; 0x250
    1d52:	it	eq
    1d54:	moveq	r0, #0
    1d56:	cmp	r2, r5
    1d58:	bne.n	1d30 <loop+0x10>

  if(have_data)
    1d5a:	cmp	r0, #0
    1d5c:	bne.n	1dec <loop+0xcc>
    int must_hibernate=0;
    if(
        #if MDEL >=0
          ((mustClose>0) && (process1.getSigCount()< -MDEL)) ||
        #endif
          ((mustClose==0) && (must_hibernate=(checkDutyCycle(&acqParameters, state)<0))))
    1d5e:	ldr	r4, [pc, #652]	; (1fec <loop+0x2cc>)
    1d60:	ldrsh.w	r3, [r4]
    1d64:	cmp	r3, #0
    1d66:	beq.w	1f36 <loop+0x216>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1d6a:	ldr	r6, [pc, #644]	; (1ff0 <loop+0x2d0>)
#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
  if(millis()>t0+1000)
    1d6c:	ldr	r5, [pc, #644]	; (1ff4 <loop+0x2d4>)
    1d6e:	ldr	r3, [r6, #0]

#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
    1d70:	ldr	r4, [pc, #644]	; (1ff8 <loop+0x2d8>)
    1d72:	str	r3, [sp, #20]
  if(millis()>t0+1000)
    1d74:	ldr	r3, [r5, #0]

#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
    1d76:	ldr	r2, [r4, #0]
	return ret;
    1d78:	ldr	r1, [sp, #20]
  if(millis()>t0+1000)
    1d7a:	add.w	r3, r3, #1000	; 0x3e8

#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
    1d7e:	adds	r2, #1
  if(millis()>t0+1000)
    1d80:	cmp	r1, r3

#if DO_DEBUG>0
  // some statistics on progress
  static uint32_t loopCount=0;
  static uint32_t t0=0;
  loopCount++;
    1d82:	str	r2, [r4, #0]
  if(millis()>t0+1000)
    1d84:	bls.n	1de4 <loop+0xc4>
  {  Serial.printf("\tloop: %5d %4d; %5d %5d; %5d; ",
    1d86:	ldr.w	r9, [pc, #704]	; 2048 <loop+0x328>
          loopCount, uSD.getNbuf(), t3,t4, 
          AudioMemoryUsageMax());
    1d8a:	ldr	r7, [pc, #624]	; (1ffc <loop+0x2dc>)
    1d8c:	ldr	r3, [pc, #624]	; (2000 <loop+0x2e0>)
    1d8e:	ldrh.w	r1, [r9]
    1d92:	ldr	r0, [r7, #0]
    1d94:	ldr.w	r8, [pc, #664]	; 2030 <loop+0x310>
    1d98:	ldrh.w	r3, [r3, #1278]	; 0x4fe
    1d9c:	str	r0, [sp, #4]
    1d9e:	str	r1, [sp, #8]
    1da0:	ldr.w	r1, [r8]
    1da4:	str	r1, [sp, #0]
    1da6:	ldr	r0, [pc, #604]	; (2004 <loop+0x2e4>)
    1da8:	ldr	r1, [pc, #604]	; (2008 <loop+0x2e8>)
    1daa:	bl	9d1c <Print::printf(char const*, ...)>
    AudioMemoryUsageMaxReset();
    1dae:	ldr	r3, [pc, #604]	; (200c <loop+0x2ec>)

  #if (ACQ==_ADC_0) | (ACQ==_ADC_D) | (ACQ==_ADC_S)
    Serial.printf("%5d %5d",PDB0_CNT, PDB0_MOD);
  #endif
  
    Serial.println();
    1db0:	ldr	r0, [pc, #592]	; (2004 <loop+0x2e4>)
  loopCount++;
  if(millis()>t0+1000)
  {  Serial.printf("\tloop: %5d %4d; %5d %5d; %5d; ",
          loopCount, uSD.getNbuf(), t3,t4, 
          AudioMemoryUsageMax());
    AudioMemoryUsageMaxReset();
    1db2:	ldrh	r3, [r3, #0]
    1db4:	strh.w	r3, [r9]
    t3=1<<31;
    t4=0;
    1db8:	mov.w	r9, #0
  if(millis()>t0+1000)
  {  Serial.printf("\tloop: %5d %4d; %5d %5d; %5d; ",
          loopCount, uSD.getNbuf(), t3,t4, 
          AudioMemoryUsageMax());
    AudioMemoryUsageMaxReset();
    t3=1<<31;
    1dbc:	mov.w	r3, #2147483648	; 0x80000000
    1dc0:	str.w	r3, [r8]
    t4=0;
    1dc4:	str.w	r9, [r7]

  #if (ACQ==_ADC_0) | (ACQ==_ADC_D) | (ACQ==_ADC_S)
    Serial.printf("%5d %5d",PDB0_CNT, PDB0_MOD);
  #endif
  
    Serial.println();
    1dc8:	bl	9cec <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1dcc:	ldr	r3, [r6, #0]
    1dce:	str	r3, [sp, #24]
    t0=millis();
    loopCount=0;
    maxValue=0;
    1dd0:	ldr	r2, [pc, #572]	; (2010 <loop+0x2f0>)
    maxNoise=0;
    1dd2:	ldr	r3, [pc, #576]	; (2014 <loop+0x2f4>)
	return ret;
    1dd4:	ldr	r1, [sp, #24]
    Serial.printf("%5d %5d",PDB0_CNT, PDB0_MOD);
  #endif
  
    Serial.println();
    t0=millis();
    loopCount=0;
    1dd6:	str.w	r9, [r4]
    maxValue=0;
    1dda:	str.w	r9, [r2]
  #if (ACQ==_ADC_0) | (ACQ==_ADC_D) | (ACQ==_ADC_S)
    Serial.printf("%5d %5d",PDB0_CNT, PDB0_MOD);
  #endif
  
    Serial.println();
    t0=millis();
    1dde:	str	r1, [r5, #0]
    loopCount=0;
    maxValue=0;
    maxNoise=0;
    1de0:	str.w	r9, [r3]
 }
#endif

  asm("wfi"); // to save some power switch off idle cpu
    1de4:	wfi
}
    1de6:	add	sp, #40	; 0x28
    1de8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  int have_data=1;
  for(int ii=0;ii<NCH;ii++) if(queue[ii].available()==0) have_data=0;

  if(have_data)
  { // have data on queue
    nsec=checkDutyCycle(&acqParameters, state);
    1dec:	ldr	r6, [pc, #552]	; (2018 <loop+0x2f8>)
    1dee:	ldr	r0, [pc, #556]	; (201c <loop+0x2fc>)
    1df0:	ldrsh.w	r1, [r6]
    1df4:	bl	f4c <checkDutyCycle(ACQ_Parameters_s*, short)>
    if(nsec<0) { uSD.setClosing();} // this will be last record in file
    1df8:	cmp	r0, #0
    1dfa:	blt.w	2098 <loop+0x378>
    if(nsec>0) 
    1dfe:	beq.n	1e0e <loop+0xee>
    1e00:	ldr	r2, [pc, #540]	; (2020 <loop+0x300>)
    1e02:	ldr	r3, [r2, #0]
    1e04:	bic.w	r3, r3, #32768	; 0x8000
    1e08:	str	r3, [r2, #0]
    { 
      #if ((ACQ == _I2S) || (ACQ == _I2S_QUAD) || (ACQ == _I2S_32) || (ACQ == _I2S_32_MONO) || (ACQ == _I2S_TYMPAN) || (ACQ == _I2S_TDM))
        I2S_stopClock();
      #endif
      setWakeupCallandSleep(nsec); // file closed sleep now
    1e0a:	bl	db4 <setWakeupCallandSleep(unsigned long)>
    }
    //
    if(state==0)
    1e0e:	ldrsh.w	r0, [r6]
    { // generate header before file is opened
      #ifdef GEN_WAV_FILE // is declared in audio_logger_if.h
         uint32_t *header=(uint32_t *) wavHeader(0); // call initially with zero filesize
         //
         int ndat=outptr-diskBuffer;
    1e12:	ldr	r5, [pc, #528]	; (2024 <loop+0x304>)
        I2S_stopClock();
      #endif
      setWakeupCallandSleep(nsec); // file closed sleep now
    }
    //
    if(state==0)
    1e14:	cmp	r0, #0
    1e16:	beq.w	204c <loop+0x32c>
    1e1a:	ldr.w	ip, [r7]
  uint32_t to=0,t1,t2;
  static uint32_t t3,t4;
  static int16_t state=0; // 0: open new file, -1: last file

  int have_data=1;
  for(int ii=0;ii<NCH;ii++) if(queue[ii].available()==0) have_data=0;
    1e1e:	add	r1, sp, #24
    1e20:	mov	r2, ip
    1e22:	add.w	r0, ip, #2368	; 0x940
template <int MQ>
void * mRecordQueue<MQ>::readBuffer(void)
{
	uint16_t t;

	if (userblock) return NULL;
    1e26:	ldr.w	r3, [r2, #580]	; 0x244
    1e2a:	cmp	r3, #0
    1e2c:	beq.w	20a2 <loop+0x382>
    1e30:	movs	r3, #0
    1e32:	add.w	r2, r2, #592	; 0x250
      state=1;
    }
    
    // fetch data from queues
    int16_t * data[NCH];
    for(int ii=0; ii<NCH; ii++) data[ii] = (int16_t *)queue[ii].readBuffer();
    1e36:	cmp	r0, r2
    1e38:	str.w	r3, [r1], #4
    1e3c:	bne.n	1e26 <loop+0x106>
    1e3e:	ldr	r2, [pc, #488]	; (2028 <loop+0x308>)
    1e40:	add.w	lr, r2, #1024	; 0x400
    1e44:	add.w	r4, r2, #8
    1e48:	add	r1, sp, #24
    // multiplex data
    int16_t *tmp = tempBuffer;
    for(int ii=0;ii<AUDIO_BLOCK_SAMPLES;ii++) for(int jj=0; jj<NCH; jj++) *tmp++ = *data[jj]++;
    1e4a:	ldr	r3, [r1, #0]
    1e4c:	ldrsh.w	r0, [r3]
    1e50:	strh.w	r0, [r2, #2]!
    1e54:	adds	r3, #2
    1e56:	cmp	r4, r2
    1e58:	str.w	r3, [r1], #4
    1e5c:	bne.n	1e4a <loop+0x12a>
    1e5e:	cmp	r4, lr
    1e60:	mov	r2, r4
    1e62:	bne.n	1e44 <loop+0x124>
    1e64:	movs	r4, #0
    // release queues
    for(int ii=0; ii<NCH; ii++) queue[ii].freeBuffer();
    1e66:	add.w	r8, ip, r4
template <int MQ>
void mRecordQueue<MQ>::freeBuffer(void)
{
	if (userblock == NULL) return;
	release(userblock);
	userblock = NULL;
    1e6a:	mov	r9, r4
}

template <int MQ>
void mRecordQueue<MQ>::freeBuffer(void)
{
	if (userblock == NULL) return;
    1e6c:	ldr.w	r0, [r8, #580]	; 0x244
    1e70:	add.w	r4, r4, #592	; 0x250
    1e74:	cbz	r0, 1e7e <loop+0x15e>
	release(userblock);
    1e76:	bl	9ee8 <AudioStream::release(audio_block_struct*)>
	userblock = NULL;
    1e7a:	str.w	r9, [r8, #580]	; 0x244
    1e7e:	cmp.w	r4, #2368	; 0x940
    1e82:	beq.n	1e9e <loop+0x17e>
    1e84:	ldr.w	ip, [r7]
    1e88:	add.w	r8, ip, r4
    1e8c:	add.w	r4, r4, #592	; 0x250
}

template <int MQ>
void mRecordQueue<MQ>::freeBuffer(void)
{
	if (userblock == NULL) return;
    1e90:	ldr.w	r0, [r8, #580]	; 0x244
    1e94:	cmp	r0, #0
    1e96:	bne.n	1e76 <loop+0x156>
    1e98:	cmp.w	r4, #2368	; 0x940
    1e9c:	bne.n	1e84 <loop+0x164>

    // copy data to disk buffer
    int16_t *ptr=(int16_t *) outptr;
    1e9e:	ldr	r4, [r5, #0]
    
    // number of data in tempBuffer
    int32_t ndat = AUDIO_BLOCK_SAMPLES*NCH;
    
    // number of free samples on diskbuffer
    int32_t nout = diskBuffer+BUFFERSIZE - outptr;
    1ea0:	ldr	r3, [pc, #392]	; (202c <loop+0x30c>)
    1ea2:	subs	r3, r3, r4
    1ea4:	asrs	r3, r3, #1

    tmp = tempBuffer;
    if (nout>ndat)
    1ea6:	cmp.w	r3, #512	; 0x200
    
    // number of data in tempBuffer
    int32_t ndat = AUDIO_BLOCK_SAMPLES*NCH;
    
    // number of free samples on diskbuffer
    int32_t nout = diskBuffer+BUFFERSIZE - outptr;
    1eaa:	mov	r7, r3
    1eac:	mov	r8, r4

    tmp = tempBuffer;
    if (nout>ndat)
    1eae:	bgt.n	1fa6 <loop+0x286>
    1eb0:	ldr	r2, [pc, #332]	; (2000 <loop+0x2e0>)
      ndat=0;
    }
    else
    { // fill up disk buffer
      int nbuf=nout;
      if(uSD.isClosing()) nbuf=(nbuf/NCH)*NCH; // is last record of file 
    1eb2:	ldrsh.w	r2, [r2, #1280]	; 0x500
    1eb6:	cbz	r2, 1ec2 <loop+0x1a2>
    1eb8:	cmp	r3, #0
    1eba:	it	lt
    1ebc:	addlt	r3, #3
    1ebe:	bic.w	r7, r3, #3
      for(int ii=0;ii<nbuf;ii++) *ptr++ = *tmp++;
    1ec2:	cmp	r7, #0
    1ec4:	ble.w	20d8 <loop+0x3b8>
    1ec8:	ldr.w	lr, [pc, #372]	; 2040 <loop+0x320>
    1ecc:	mov	r3, r4
    1ece:	lsls	r4, r7, #1
    1ed0:	adds	r0, r3, r4
    1ed2:	mov	r2, lr
    1ed4:	ldrsh.w	r1, [r2], #2
    1ed8:	strh.w	r1, [r3], #2
    1edc:	cmp	r0, r3
    1ede:	bne.n	1ed4 <loop+0x1b4>
    1ee0:	add	r4, lr
    1ee2:	mov	r8, r0
    }
    
    if(nout==0) //buffer is filled, so write to disk
    { int32_t nbuf=ptr-diskBuffer;
    
      to=micros();
    1ee4:	bl	88a4 <micros>
      state=uSD.write(diskBuffer,nbuf); // this is blocking
    1ee8:	ldr.w	r9, [pc, #328]	; 2034 <loop+0x314>
    1eec:	rsb	r2, r9, r8
    1ef0:	asrs	r2, r2, #1
    }
    
    if(nout==0) //buffer is filled, so write to disk
    { int32_t nbuf=ptr-diskBuffer;
    
      to=micros();
    1ef2:	mov	sl, r0
      state=uSD.write(diskBuffer,nbuf); // this is blocking
    1ef4:	mov	r1, r9
    1ef6:	ldr	r0, [pc, #264]	; (2000 <loop+0x2e0>)
    1ef8:	bl	1c14 <c_uSD::write(short*, long)>
    1efc:	strh	r0, [r6, #0]
      t1=micros();
    1efe:	bl	88a4 <micros>
      t2=t1-to;
      if(t2<t3) t3=t2; // accumulate some time statistics
    1f02:	ldr	r2, [pc, #300]	; (2030 <loop+0x310>)
    1f04:	ldr	r3, [r2, #0]
    { int32_t nbuf=ptr-diskBuffer;
    
      to=micros();
      state=uSD.write(diskBuffer,nbuf); // this is blocking
      t1=micros();
      t2=t1-to;
    1f06:	rsb	r0, sl, r0
      if(t2<t3) t3=t2; // accumulate some time statistics
    1f0a:	cmp	r0, r3
      if(t2>t4) t4=t2;
    1f0c:	ldr	r3, [pc, #236]	; (1ffc <loop+0x2dc>)
    
      to=micros();
      state=uSD.write(diskBuffer,nbuf); // this is blocking
      t1=micros();
      t2=t1-to;
      if(t2<t3) t3=t2; // accumulate some time statistics
    1f0e:	it	cc
    1f10:	strcc	r0, [r2, #0]
      if(t2>t4) t4=t2;
    1f12:	ldr	r2, [r3, #0]
    else
    { // fill up disk buffer
      int nbuf=nout;
      if(uSD.isClosing()) nbuf=(nbuf/NCH)*NCH; // is last record of file 
      for(int ii=0;ii<nbuf;ii++) *ptr++ = *tmp++;
      ndat-=nbuf;
    1f14:	rsb	r7, r7, #512	; 0x200
      to=micros();
      state=uSD.write(diskBuffer,nbuf); // this is blocking
      t1=micros();
      t2=t1-to;
      if(t2<t3) t3=t2; // accumulate some time statistics
      if(t2>t4) t4=t2;
    1f18:	cmp	r0, r2
    1f1a:	it	hi
    1f1c:	strhi	r0, [r3, #0]
    1f1e:	ldr	r2, [pc, #276]	; (2034 <loop+0x314>)

      ptr=(int16_t *)diskBuffer;
    }

    if(ndat>0) // save residual data
    1f20:	cmp	r7, #0
    1f22:	beq.n	1fbe <loop+0x29e>
    1f24:	movs	r3, #0
    {
      for(int ii=0;ii<ndat;ii++) *ptr++ = *tmp++;
    1f26:	adds	r3, #1
    1f28:	ldrh.w	r1, [r4], #2
    1f2c:	strh.w	r1, [r2], #2
    1f30:	cmp	r7, r3
    1f32:	bgt.n	1f26 <loop+0x206>
    1f34:	b.n	1fbe <loop+0x29e>
    int must_hibernate=0;
    if(
        #if MDEL >=0
          ((mustClose>0) && (process1.getSigCount()< -MDEL)) ||
        #endif
          ((mustClose==0) && (must_hibernate=(checkDutyCycle(&acqParameters, state)<0))))
    1f36:	ldr	r6, [pc, #224]	; (2018 <loop+0x2f8>)
    1f38:	ldr	r0, [pc, #224]	; (201c <loop+0x2fc>)
    1f3a:	ldrsh.w	r1, [r6]
    1f3e:	bl	f4c <checkDutyCycle(ACQ_Parameters_s*, short)>
    1f42:	cmp	r0, #0
    1f44:	bge.w	1d6a <loop+0x4a>
    { 
      // write remaining data to disk and close file
      if(state>=0)
    1f48:	ldrsh.w	r3, [r6]
      { uint32_t nbuf = (uint32_t)(outptr-diskBuffer);
    1f4c:	ldr	r5, [pc, #212]	; (2024 <loop+0x304>)
        state=uSD.write(diskBuffer,nbuf); // this is blocking
    1f4e:	ldr.w	r9, [pc, #228]	; 2034 <loop+0x314>
          ((mustClose>0) && (process1.getSigCount()< -MDEL)) ||
        #endif
          ((mustClose==0) && (must_hibernate=(checkDutyCycle(&acqParameters, state)<0))))
    { 
      // write remaining data to disk and close file
      if(state>=0)
    1f52:	cmp	r3, #0
    1f54:	blt.n	1f82 <loop+0x262>
      { uint32_t nbuf = (uint32_t)(outptr-diskBuffer);
        state=uSD.write(diskBuffer,nbuf); // this is blocking
    1f56:	ldr	r3, [r5, #0]
    1f58:	ldr	r0, [pc, #164]	; (2000 <loop+0x2e0>)
    1f5a:	rsb	r2, r9, r3
    1f5e:	asrs	r2, r2, #1
    1f60:	mov	r1, r9
    1f62:	bl	1c14 <c_uSD::write(short*, long)>
    1f66:	strh	r0, [r6, #0]
        state=uSD.close();
    1f68:	ldr	r0, [pc, #148]	; (2000 <loop+0x2e0>)
    1f6a:	bl	a5c <c_uSD::close()>
        if(must_hibernate) state=-1;
    1f6e:	movw	r0, #65535	; 0xffff
        uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1f72:	movs	r2, #8
    1f74:	str	r2, [sp, #0]
    1f76:	ldr	r3, [pc, #192]	; (2038 <loop+0x318>)
      // write remaining data to disk and close file
      if(state>=0)
      { uint32_t nbuf = (uint32_t)(outptr-diskBuffer);
        state=uSD.write(diskBuffer,nbuf); // this is blocking
        state=uSD.close();
        if(must_hibernate) state=-1;
    1f78:	strh	r0, [r6, #0]
        uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1f7a:	ldr	r1, [pc, #160]	; (201c <loop+0x2fc>)
    1f7c:	ldr	r0, [pc, #128]	; (2000 <loop+0x2e0>)
    1f7e:	bl	b7c <c_uSD::storeConfig(unsigned long*, int, long*, int)>
      }
      outptr = diskBuffer;

      // reset mustClose flag
      if(snipParameters.thresh>=0) mustClose=0; else mustClose=-1;
    1f82:	ldr	r3, [pc, #180]	; (2038 <loop+0x318>)
    1f84:	ldr	r0, [pc, #180]	; (203c <loop+0x31c>)
    1f86:	ldr	r3, [r3, #4]
        state=uSD.write(diskBuffer,nbuf); // this is blocking
        state=uSD.close();
        if(must_hibernate) state=-1;
        uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
      }
      outptr = diskBuffer;
    1f88:	str.w	r9, [r5]

      // reset mustClose flag
      if(snipParameters.thresh>=0) mustClose=0; else mustClose=-1;
    1f8c:	cmp	r3, #0
    1f8e:	ite	ge
    1f90:	movge	r3, #0
    1f92:	movwlt	r3, #65535	; 0xffff
    1f96:	movs	r1, #11
    1f98:	strh	r3, [r4, #0]
    1f9a:	bl	83f4 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1f9e:	ldr	r0, [pc, #100]	; (2004 <loop+0x2e4>)
    1fa0:	bl	9cec <Print::println()>
    1fa4:	b.n	1d6a <loop+0x4a>
    
    // number of free samples on diskbuffer
    int32_t nout = diskBuffer+BUFFERSIZE - outptr;

    tmp = tempBuffer;
    if (nout>ndat)
    1fa6:	ldr	r3, [pc, #152]	; (2040 <loop+0x320>)
    1fa8:	subs	r2, r4, #2
    1faa:	add.w	r0, r3, #1024	; 0x400
    { // sufficient space for all data
      for(int ii=0;ii<ndat;ii++) *ptr++ = *tmp++;
    1fae:	ldrsh.w	r1, [r3], #2
    1fb2:	strh.w	r1, [r2, #2]!
    1fb6:	cmp	r3, r0
    1fb8:	bne.n	1fae <loop+0x28e>
    1fba:	add.w	r2, r4, #1024	; 0x400
        }
      }
    } // copied now all data
    outptr=(int16_t *)ptr; // save actual write position
*/
    if(!state)
    1fbe:	ldrsh.w	r3, [r6]
    {
      for(int ii=0;ii<ndat;ii++) *ptr++ = *tmp++;
    }
    
    // all data are copied
    outptr=(int16_t *)ptr; // save actual write position
    1fc2:	str	r2, [r5, #0]
        }
      }
    } // copied now all data
    outptr=(int16_t *)ptr; // save actual write position
*/
    if(!state)
    1fc4:	cmp	r3, #0
    1fc6:	bne.w	1d6a <loop+0x4a>
    1fca:	movs	r1, #6
    1fcc:	ldr	r0, [pc, #116]	; (2044 <loop+0x324>)
    1fce:	bl	83f4 <usb_serial_write>
    1fd2:	ldr	r0, [pc, #48]	; (2004 <loop+0x2e4>)
    1fd4:	bl	9cec <Print::println()>
    { 
#if DO_DEBUG>0
      Serial.println("closed");
#endif
      // store config again if you wanted time of latest file stored
      uSD.storeConfig((uint32_t *)&acqParameters, 8, (int32_t *)&snipParameters, 8);
    1fd8:	movs	r2, #8
    1fda:	str	r2, [sp, #0]
    1fdc:	ldr	r3, [pc, #88]	; (2038 <loop+0x318>)
    1fde:	ldr	r1, [pc, #60]	; (201c <loop+0x2fc>)
    1fe0:	ldr	r0, [pc, #28]	; (2000 <loop+0x2e0>)
    1fe2:	bl	b7c <c_uSD::storeConfig(unsigned long*, int, long*, int)>
    1fe6:	b.n	1d6a <loop+0x4a>
    1fe8:	.word	0x20017eb0
    1fec:	.word	0x20016d34
    1ff0:	.word	0x2001c95c
    1ff4:	.word	0x2001c5ac
    1ff8:	.word	0x2001c5a4
    1ffc:	.word	0x20017eac
    2000:	.word	0x2001799c
    2004:	.word	0x20016f24
    2008:	.word	0x000132d4
    200c:	.word	0x2001caf0
    2010:	.word	0x2001c5a0
    2014:	.word	0x2001c114
    2018:	.word	0x2001c5a8
    201c:	.word	0x20016d64
    2020:	.word	0x4004803c
    2024:	.word	0x20016d38
    2028:	.word	0x2001c16e
    202c:	.word	0x2001c0b4
    2030:	.word	0x20017ea8
    2034:	.word	0x200180b4
    2038:	.word	0x20016d44
    203c:	.word	0x000132c8
    2040:	.word	0x2001c170
    2044:	.word	0x000132c0
    2048:	.word	0x2001ca70
    }
    //
    if(state==0)
    { // generate header before file is opened
      #ifdef GEN_WAV_FILE // is declared in audio_logger_if.h
         uint32_t *header=(uint32_t *) wavHeader(0); // call initially with zero filesize
    204c:	bl	980 <wavHeader(unsigned long)>
         //
         int ndat=outptr-diskBuffer;
    2050:	ldr.w	lr, [r5]
    2054:	ldr	r2, [pc, #132]	; (20dc <loop+0x3bc>)
    2056:	rsb	r4, r2, lr
    205a:	asrs	r4, r4, #1
         if(ndat>0)
    205c:	cmp	r4, #0
    205e:	ble.n	207a <loop+0x35a>
    2060:	add.w	r4, r4, #2147483648	; 0x80000000
    2064:	subs	r4, #1
    2066:	add.w	r4, r2, r4, lsl #1
    206a:	subs	r3, r2, #2
    206c:	adds	r2, #42	; 0x2a
         { // shift exisiting data after header, which is always at beginnig of file
          for(int ii=0; ii<ndat; ii++) diskBuffer[22+ii]=diskBuffer[ii]; 
    206e:	ldrsh.w	r1, [r3, #2]!
    2072:	strh.w	r1, [r2, #2]!
    2076:	cmp	r3, r4
    2078:	bne.n	206e <loop+0x34e>
    207a:	ldr	r2, [pc, #96]	; (20dc <loop+0x3bc>)
    207c:	subs	r3, r0, #4
    207e:	adds	r0, #40	; 0x28
         }
         // copy header to disk buffer
         uint32_t *ptr=(uint32_t *) diskBuffer;
         for(int ii=0;ii<11;ii++) ptr[ii] = header[ii];
    2080:	ldr.w	r1, [r3, #4]!
    2084:	str.w	r1, [r2], #4
    2088:	cmp	r0, r3
    208a:	bne.n	2080 <loop+0x360>
         outptr+=22; //(44 bytes)
    208c:	add.w	r3, lr, #44	; 0x2c
         uint32_t *ptr=(uint32_t *) diskBuffer;
         // copy to disk buffer
         for(int ii=0;ii<128;ii++) ptr[ii] = header[ii];
         outptr+=256; //(512 bytes)
      #endif
      state=1;
    2090:	movs	r2, #1
          for(int ii=0; ii<ndat; ii++) diskBuffer[22+ii]=diskBuffer[ii]; 
         }
         // copy header to disk buffer
         uint32_t *ptr=(uint32_t *) diskBuffer;
         for(int ii=0;ii<11;ii++) ptr[ii] = header[ii];
         outptr+=22; //(44 bytes)
    2092:	str	r3, [r5, #0]
         uint32_t *ptr=(uint32_t *) diskBuffer;
         // copy to disk buffer
         for(int ii=0;ii<128;ii++) ptr[ii] = header[ii];
         outptr+=256; //(512 bytes)
      #endif
      state=1;
    2094:	strh	r2, [r6, #0]
    2096:	b.n	1e1a <loop+0xfa>
  public:
    c_uSD(): state(-1), closing(0) {;}
    void init();
    int16_t write(int16_t * data, int32_t ndat);
    uint16_t getNbuf(void) {return nbuf;}
    void setClosing(void) {closing=1;}
    2098:	ldr	r3, [pc, #68]	; (20e0 <loop+0x3c0>)
    209a:	movs	r2, #1
    209c:	strh.w	r2, [r3, #1280]	; 0x500
    20a0:	b.n	1e0e <loop+0xee>
void * mRecordQueue<MQ>::readBuffer(void)
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
    20a2:	ldrh.w	lr, [r2, #586]	; 0x24a
	if (t == head) return NULL;
    20a6:	ldrh.w	r8, [r2, #584]	; 0x248
void * mRecordQueue<MQ>::readBuffer(void)
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
    20aa:	uxth.w	lr, lr
	if (t == head) return NULL;
    20ae:	uxth.w	r8, r8
	if (++t >= MQ) t = 0;
    20b2:	add.w	r4, lr, #1
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
	if (t == head) return NULL;
    20b6:	cmp	lr, r8
	if (++t >= MQ) t = 0;
    20b8:	uxth	r4, r4
{
	uint16_t t;

	if (userblock) return NULL;
	t = tail;
	if (t == head) return NULL;
    20ba:	beq.w	1e32 <loop+0x112>
	if (++t >= MQ) t = 0;
    20be:	cmp	r4, #136	; 0x88
    20c0:	ite	ls
    20c2:	movls	r3, r4
    20c4:	movhi	r4, r3
	userblock = queue[t];
    20c6:	adds	r3, #8
    20c8:	ldr.w	r3, [r2, r3, lsl #2]
    20cc:	str.w	r3, [r2, #580]	; 0x244
	tail = t;
    20d0:	strh.w	r4, [r2, #586]	; 0x24a
	return (void *) userblock->data;
    20d4:	adds	r3, #4
    20d6:	b.n	1e32 <loop+0x112>
    int32_t ndat = AUDIO_BLOCK_SAMPLES*NCH;
    
    // number of free samples on diskbuffer
    int32_t nout = diskBuffer+BUFFERSIZE - outptr;

    tmp = tempBuffer;
    20d8:	ldr	r4, [pc, #8]	; (20e4 <loop+0x3c4>)
    20da:	b.n	1ee4 <loop+0x1c4>
    20dc:	.word	0x200180b4
    20e0:	.word	0x2001799c
    20e4:	.word	0x2001c170

000020e8 <_GLOBAL__sub_I_acqParameters>:
    maxNoise=0;
 }
#endif

  asm("wfi"); // to save some power switch off idle cpu
}
    20e8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    20ec:	ldr	r7, [pc, #452]	; (22b4 <_GLOBAL__sub_I_acqParameters+0x1cc>)

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    20ee:	ldr	r6, [pc, #456]	; (22b8 <_GLOBAL__sub_I_acqParameters+0x1d0>)
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    20f0:	ldr	r2, [r7, #0]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    20f2:	ldr.w	r8, [pc, #504]	; 22ec <_GLOBAL__sub_I_acqParameters+0x204>
    20f6:	str.w	r8, [r6]
    20fa:	movs	r3, #0
    20fc:	strb	r3, [r6, #9]
    20fe:	str	r3, [r6, #16]
			active = false;
    2100:	strb	r3, [r6, #8]
			destination_list = NULL;
    2102:	str	r3, [r6, #12]
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    2104:	cbnz	r2, 210a <_GLOBAL__sub_I_acqParameters+0x22>
    2106:	b.n	22ae <_GLOBAL__sub_I_acqParameters+0x1c6>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
    2108:	mov	r2, r3
    210a:	ldr	r3, [r2, #20]
    210c:	cmp	r3, #0
    210e:	bne.n	2108 <_GLOBAL__sub_I_acqParameters+0x20>
				p->next_update = this;
    2110:	str	r6, [r2, #20]
			}
			next_update = NULL;
    2112:	movs	r4, #0
#include "DMAChannel.h"

class AudioInputI2SQuad : public AudioStream
{
public:
	AudioInputI2SQuad(void) : AudioStream(0, NULL) { begin(); }
    2114:	ldr	r3, [pc, #420]	; (22bc <_GLOBAL__sub_I_acqParameters+0x1d4>)
    2116:	ldr	r0, [pc, #416]	; (22b8 <_GLOBAL__sub_I_acqParameters+0x1d0>)
    2118:	str	r4, [r6, #20]
			cpu_cycles = 0;
    211a:	strh	r4, [r6, #4]
			cpu_cycles_max = 0;
    211c:	strh	r4, [r6, #6]
			numConnections = 0;
    211e:	strb	r4, [r6, #10]
    2120:	str	r3, [r6, #0]
    2122:	bl	2dd8 <AudioInputI2SQuad::begin()>
  #include "input_i2s_quad.h"
  AudioInputI2SQuad     acq;
  
  #define mq (M_QUEU/NCH)
  #include "m_queue.h"
  mRecordQueue<mq> *queue = new mRecordQueue<mq> [NCH];
    2126:	mov.w	r0, #2368	; 0x940
    212a:	bl	a1f0 <operator new[](unsigned int)>
    212e:	ldr.w	sl, [pc, #448]	; 22f0 <_GLOBAL__sub_I_acqParameters+0x208>
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    2132:	ldr.w	fp, [pc, #384]	; 22b4 <_GLOBAL__sub_I_acqParameters+0x1cc>
    2136:	mov	lr, r0
class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
    2138:	mov	r1, r4
    213a:	adds	r0, #28
    213c:	add.w	r9, lr, #2368	; 0x940
    2140:	mov	r2, lr

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    2142:	mov.w	ip, #1
    2146:	str.w	r8, [r0, #-28]
			active = false;
			destination_list = NULL;
    214a:	mov	r4, r0

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    214c:	strb.w	ip, [r2, #9]
    2150:	str	r0, [r2, #16]
			active = false;
    2152:	strb	r1, [r2, #8]
			destination_list = NULL;
    2154:	str	r1, [r2, #12]
    2156:	movs	r3, #0
    2158:	b.n	215c <_GLOBAL__sub_I_acqParameters+0x74>
    215a:	ldr	r4, [r2, #16]
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
    215c:	str.w	r1, [r4, r3, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
    2160:	ldrb	r4, [r2, #9]
    2162:	adds	r3, #1
    2164:	cmp	r4, r3
    2166:	bgt.n	215a <_GLOBAL__sub_I_acqParameters+0x72>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    2168:	ldr	r4, [r7, #0]
    216a:	cbnz	r4, 2170 <_GLOBAL__sub_I_acqParameters+0x88>
    216c:	b.n	22a8 <_GLOBAL__sub_I_acqParameters+0x1c0>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
    216e:	mov	r4, r3
    2170:	ldr	r3, [r4, #20]
    2172:	cmp	r3, #0
    2174:	bne.n	216e <_GLOBAL__sub_I_acqParameters+0x86>
				p->next_update = this;
    2176:	str	r2, [r4, #20]
			}
			next_update = NULL;
    2178:	str	r1, [r2, #20]
			cpu_cycles = 0;
    217a:	strh	r1, [r2, #4]
			cpu_cycles_max = 0;
    217c:	strh	r1, [r2, #6]
			numConnections = 0;
    217e:	strb	r1, [r2, #10]
template <int MQ>
class mRecordQueue : public AudioStream
{
public:
	mRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
    2180:	str.w	sl, [r0, #-28]
    2184:	add.w	r2, r2, #592	; 0x250
    2188:	strh.w	r1, [r2, #-8]
    218c:	str.w	r1, [r2, #-12]
    2190:	strh.w	r1, [r2, #-6]
    2194:	strh.w	r1, [r2, #-4]
    2198:	cmp	r2, r9
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
    219a:	mov.w	r4, #0
    219e:	add.w	r0, r0, #592	; 0x250
    21a2:	bne.n	2146 <_GLOBAL__sub_I_acqParameters+0x5e>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    21a4:	ldr	r7, [pc, #280]	; (22c0 <_GLOBAL__sub_I_acqParameters+0x1d8>)
    21a6:	ldr.w	r8, [pc, #332]	; 22f4 <_GLOBAL__sub_I_acqParameters+0x20c>
    21aa:	str.w	lr, [r7, #4]
		{ isConnected = false;
		  connect(); }
    21ae:	mov	r0, r7
    21b0:	str.w	lr, [r8]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    21b4:	str	r6, [r7, #0]
    21b6:	strb	r4, [r7, #8]
    21b8:	strb	r4, [r7, #9]
    21ba:	str	r4, [r7, #12]
		{ isConnected = false;
    21bc:	strb	r4, [r7, #16]
		  connect(); }
    21be:	bl	9f88 <AudioConnection::connect()>

  AudioConnection     patchCord1(acq,0, queue[0],0);
    21c2:	ldr	r1, [pc, #256]	; (22c4 <_GLOBAL__sub_I_acqParameters+0x1dc>)
    21c4:	ldr	r2, [pc, #256]	; (22c8 <_GLOBAL__sub_I_acqParameters+0x1e0>)
    21c6:	mov	r0, r7
    21c8:	bl	a914 <__aeabi_atexit>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    21cc:	ldr	r7, [pc, #252]	; (22cc <_GLOBAL__sub_I_acqParameters+0x1e4>)
  AudioConnection     patchCord2(acq,1, queue[1],0);
    21ce:	ldr.w	r3, [r8]
    21d2:	str	r6, [r7, #0]
    21d4:	add.w	r3, r3, #592	; 0x250
    21d8:	movs	r2, #1
		{ isConnected = false;
		  connect(); }
    21da:	mov	r0, r7
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    21dc:	str	r3, [r7, #4]
    21de:	strb	r4, [r7, #9]
    21e0:	str	r4, [r7, #12]
		{ isConnected = false;
    21e2:	strb	r4, [r7, #16]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    21e4:	strb	r2, [r7, #8]
		{ isConnected = false;
		  connect(); }
    21e6:	bl	9f88 <AudioConnection::connect()>
    21ea:	ldr	r1, [pc, #216]	; (22c4 <_GLOBAL__sub_I_acqParameters+0x1dc>)
    21ec:	ldr	r2, [pc, #216]	; (22c8 <_GLOBAL__sub_I_acqParameters+0x1e0>)
    21ee:	mov	r0, r7
    21f0:	bl	a914 <__aeabi_atexit>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    21f4:	ldr	r7, [pc, #216]	; (22d0 <_GLOBAL__sub_I_acqParameters+0x1e8>)
  AudioConnection     patchCord3(acq,2, queue[2],0);
    21f6:	ldr.w	r3, [r8]
    21fa:	str	r6, [r7, #0]
    21fc:	add.w	r3, r3, #1184	; 0x4a0
    2200:	movs	r2, #2
		{ isConnected = false;
		  connect(); }
    2202:	mov	r0, r7
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    2204:	str	r3, [r7, #4]
    2206:	strb	r4, [r7, #9]
    2208:	str	r4, [r7, #12]
		{ isConnected = false;
    220a:	strb	r4, [r7, #16]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    220c:	strb	r2, [r7, #8]
		{ isConnected = false;
		  connect(); }
    220e:	bl	9f88 <AudioConnection::connect()>
    2212:	ldr	r1, [pc, #176]	; (22c4 <_GLOBAL__sub_I_acqParameters+0x1dc>)
    2214:	ldr	r2, [pc, #176]	; (22c8 <_GLOBAL__sub_I_acqParameters+0x1e0>)
    2216:	mov	r0, r7
    2218:	bl	a914 <__aeabi_atexit>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    221c:	ldr	r7, [pc, #180]	; (22d4 <_GLOBAL__sub_I_acqParameters+0x1ec>)
  AudioConnection     patchCord4(acq,3, queue[3],0);
    221e:	ldr.w	r3, [r8]
    2222:	str	r6, [r7, #0]
    2224:	add.w	r3, r3, #1776	; 0x6f0
    2228:	movs	r2, #3
		{ isConnected = false;
		  connect(); }
    222a:	mov	r0, r7
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    222c:	str	r3, [r7, #4]
    222e:	strb	r4, [r7, #9]
    2230:	str	r4, [r7, #12]
		{ isConnected = false;
    2232:	strb	r4, [r7, #16]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    2234:	strb	r2, [r7, #8]
		{ isConnected = false;
		  connect(); }
    2236:	bl	9f88 <AudioConnection::connect()>
    223a:	mov	r0, r7
    223c:	ldr	r2, [pc, #136]	; (22c8 <_GLOBAL__sub_I_acqParameters+0x1e0>)
    223e:	ldr	r1, [pc, #132]	; (22c4 <_GLOBAL__sub_I_acqParameters+0x1dc>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2240:	ldr	r6, [pc, #148]	; (22d8 <_GLOBAL__sub_I_acqParameters+0x1f0>)
    2242:	bl	a914 <__aeabi_atexit>
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() : m_fVol(nullptr), m_xVol(nullptr) {}
    2246:	ldr	r3, [pc, #148]	; (22dc <_GLOBAL__sub_I_acqParameters+0x1f4>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    2248:	ldr.w	lr, [pc, #172]	; 22f8 <_GLOBAL__sub_I_acqParameters+0x210>
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
    224c:	ldr	r0, [pc, #144]	; (22e0 <_GLOBAL__sub_I_acqParameters+0x1f8>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    224e:	ldr	r1, [pc, #148]	; (22e4 <_GLOBAL__sub_I_acqParameters+0x1fc>)
    2250:	str.w	r4, [r3, #1144]	; 0x478
    2254:	movs	r7, #40	; 0x28
    2256:	str.w	r4, [r3, #1148]	; 0x47c
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    225a:	strb.w	r4, [r3, #1168]	; 0x490
    225e:	strb.w	r4, [r3, #1194]	; 0x4aa
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    2262:	strb.w	r4, [r3, #1200]	; 0x4b0
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2266:	strb.w	r4, [r3, #1208]	; 0x4b8
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
    226a:	str.w	r4, [r3, #1268]	; 0x4f4
    226e:	str.w	r4, [r3, #1272]	; 0x4f8
  private:
    SdFs sd;
    FsFile file;
    
  public:
    c_uSD(): state(-1), closing(0) {;}
    2272:	strh.w	r4, [r3, #1280]	; 0x500
    2276:	mov.w	r5, #1000	; 0x3e8
    227a:	movw	r4, #65535	; 0xffff
    227e:	strb.w	r7, [r3, #1191]	; 0x4a7
    2282:	str.w	r0, [r3, #1172]	; 0x494
    2286:	str.w	r1, [r3, #1180]	; 0x49c
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    228a:	str.w	lr, [r3, #1160]	; 0x488
  public:
  void loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2);
  void storeConfig(uint32_t * param1, int n1, int32_t *param2, int n2);
  void writeTemperature(float temperature, float pressure, float humidity, uint16_t lux);
};
c_uSD uSD;
    228e:	mov	r0, r3
    2290:	str.w	r5, [r3, #1204]	; 0x4b4
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2294:	str.w	r6, [r3, #1196]	; 0x4ac
  private:
    SdFs sd;
    FsFile file;
    
  public:
    c_uSD(): state(-1), closing(0) {;}
    2298:	strh.w	r4, [r3, #1276]	; 0x4fc
  public:
  void loadConfig(uint32_t * param1, int n1, int32_t *param2, int n2);
  void storeConfig(uint32_t * param1, int n1, int32_t *param2, int n2);
  void writeTemperature(float temperature, float pressure, float humidity, uint16_t lux);
};
c_uSD uSD;
    229c:	ldr	r2, [pc, #40]	; (22c8 <_GLOBAL__sub_I_acqParameters+0x1e0>)
    229e:	ldr	r1, [pc, #72]	; (22e8 <_GLOBAL__sub_I_acqParameters+0x200>)
    maxNoise=0;
 }
#endif

  asm("wfi"); // to save some power switch off idle cpu
}
    22a0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22a4:	b.w	a914 <__aeabi_atexit>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
				first_update = this;
    22a8:	str.w	r2, [fp]
    22ac:	b.n	2178 <_GLOBAL__sub_I_acqParameters+0x90>
    22ae:	str	r6, [r7, #0]
    22b0:	b.n	2112 <_GLOBAL__sub_I_acqParameters+0x2a>
    22b2:	nop
    22b4:	.word	0x2001ca6c
    22b8:	.word	0x2001c584
    22bc:	.word	0x0001339c
    22c0:	.word	0x2001c0dc
    22c4:	.word	0x00000551
    22c8:	.word	0x20016d30
    22cc:	.word	0x2001c570
    22d0:	.word	0x2001c148
    22d4:	.word	0x2001c15c
    22d8:	.word	0x00012d68
    22dc:	.word	0x2001799c
    22e0:	.word	0x0001344c
    22e4:	.word	0x38011001
    22e8:	.word	0x00000531
    22ec:	.word	0x00012d2c
    22f0:	.word	0x00012d38
    22f4:	.word	0x20017eb0
    22f8:	.word	0x000134a4

000022fc <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    22fc:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    22fe:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    2300:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    2302:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    2304:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    2306:	beq.n	2310 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    2308:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    230c:	b.w	99f4 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2310:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    2312:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2316:	bx	r3

00002318 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>:
			}
		}
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    2318:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    231c:	ldr	r4, [r0, #0]
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    231e:	ldr	r5, [r4, #12]
    2320:	tst.w	r5, #16777216	; 0x1000000
		const uint8_t *p_write = (const uint8_t *)buf;
		uint8_t *p_read = (uint8_t *)retbuf;
		size_t count_read = count;

		// Lets clear the reader queue
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    2324:	ldr	r5, [pc, #484]	; (250c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1f4>)
    2326:	str	r5, [r4, #0]

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    2328:	bne.n	23d0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xb8>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    232a:	lsls	r7, r3, #31
    232c:	bpl.w	2496 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17e>
		    if (p_write) {
    2330:	cmp	r1, #0
    2332:	beq.w	24fc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1e4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2336:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    2338:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    233a:	it	ne
    233c:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    2340:	str	r5, [r4, #52]	; 0x34
    2342:	adds	r1, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    2344:	ldrb.w	r8, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    2348:	add.w	ip, r3, #4294967295
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    234c:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    2350:	cmp.w	ip, #0
    2354:	beq.w	24a8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
			// Push out the next byte; 
		    if (p_write) {
    2358:	cbz	r1, 2364 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x4c>
		    	w = (*p_write++) << 8;
				w |= *p_write++;
    235a:	ldrb	r5, [r1, #1]
	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
    235c:	ldrb.w	r8, [r1], #2
				w |= *p_write++;
    2360:	orr.w	r8, r5, r8, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2364:	ldr	r5, [r0, #4]
    2366:	ldrb	r6, [r5, #8]
			if (count == 2)
    2368:	cmp.w	ip, #2
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    236c:	add.w	r6, r6, #4294967295
    2370:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    2374:	ite	eq
    2376:	orreq.w	r5, r8, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    237a:	orrne.w	r5, r8, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    237e:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    2380:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    2382:	sub.w	ip, ip, #2
    2386:	b.n	239a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x82>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    2388:	cbz	r2, 238e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x76>
							*p_read++ = w;  // Read any pending RX bytes in
    238a:	strb	r4, [r2, #0]
    238c:	adds	r2, #1
						} 
						count_read--;
    238e:	subs	r3, #1
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2390:	and.w	r5, r5, #61440	; 0xf000
    2394:	cmp	r5, r6
    2396:	bls.n	23c6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xae>
    2398:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    239a:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    239c:	tst.w	r5, #240	; 0xf0
    23a0:	beq.n	2390 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x78>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    23a2:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    23a4:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
    23a8:	mov	r7, r2
    23aa:	mov.w	lr, r4, asr #8
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    23ae:	bne.n	2388 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x70>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    23b0:	cbz	r2, 23ba <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xa2>
							*p_read++ = w >> 8;
    23b2:	strb.w	lr, [r7], #2
							*p_read++ = (w & 0xff);
    23b6:	strb	r4, [r2, #1]
    23b8:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    23ba:	and.w	r5, r5, #61440	; 0xf000
    23be:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
    23c0:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    23c4:	bhi.n	2398 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x80>
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
    23c6:	cmp.w	ip, #0
    23ca:	beq.n	24a8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    23cc:	ldr	r4, [r0, #0]
    23ce:	b.n	2358 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    23d0:	lsls	r5, r3, #31
    23d2:	bpl.n	246e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x156>
		    if (p_write) {
    23d4:	cmp	r1, #0
    23d6:	beq.w	24ec <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    23da:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    23dc:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    23de:	it	ne
    23e0:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    23e4:	str	r5, [r4, #52]	; 0x34
    23e6:	adds	r1, #1
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    23e8:	add.w	lr, r3, #4294967295
		}

	    uint16_t w = _transferWriteFill;
    23ec:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    23f0:	cmp.w	lr, #0
    23f4:	beq.n	247a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
			// Push out the next byte; 
		    if (p_write) {
    23f6:	cbz	r1, 2404 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xec>
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
    23f8:	ldrb.w	ip, [r1, #1]
    23fc:	ldrb	r5, [r1, #0]
    23fe:	adds	r1, #2
    2400:	orr.w	ip, r5, ip, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    2404:	ldr	r5, [r0, #4]
    2406:	ldrb	r6, [r5, #8]
			if (count == 2)
    2408:	cmp.w	lr, #2
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    240c:	add.w	r6, r6, #4294967295
    2410:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    2414:	ite	eq
    2416:	orreq.w	r5, ip, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    241a:	orrne.w	r5, ip, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    241e:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    2420:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    2422:	sub.w	lr, lr, #2
    2426:	b.n	243a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x122>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    2428:	cbz	r2, 242e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x116>
							*p_read++ = w;  // Read any pending RX bytes in
    242a:	strb	r4, [r2, #0]
    242c:	adds	r2, #1
						} 
						count_read--;
    242e:	subs	r3, #1
							*p_read++ = w >> 8;
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2430:	and.w	r5, r5, #61440	; 0xf000
    2434:	cmp	r5, r6
    2436:	bls.n	2464 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x14c>
    2438:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    243a:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    243c:	tst.w	r5, #240	; 0xf0
    2440:	beq.n	2430 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x118>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    2442:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
    2446:	mov	r7, r2
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    2448:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    244a:	bne.n	2428 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x110>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    244c:	cbz	r2, 2458 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x140>
							*p_read++ = (w & 0xff);
    244e:	strb.w	r4, [r7], #2
							*p_read++ = w >> 8;
    2452:	asrs	r4, r4, #8
    2454:	strb	r4, [r2, #1]
    2456:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2458:	and.w	r5, r5, #61440	; 0xf000
    245c:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
							*p_read++ = w >> 8;
						}
						count_read -= 2;
    245e:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    2462:	bhi.n	2438 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x120>
			count--;
		}

	    uint16_t w = _transferWriteFill;

		while (count > 0) {
    2464:	cmp.w	lr, #0
    2468:	beq.n	247a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
    246a:	ldr	r4, [r0, #0]
    246c:	b.n	23f6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    246e:	mov	lr, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w = _transferWriteFill;
    2470:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    2474:	cmp.w	lr, #0
    2478:	bne.n	23f6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    247a:	cbz	r3, 24c4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    247c:	ldr	r4, [r0, #0]
			sr = port().SR;
    247e:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    2480:	tst.w	r1, #240	; 0xf0
    2484:	beq.n	247e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x166>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    2486:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    2488:	lsls	r4, r3, #31
    248a:	bpl.n	24c8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1b0>
					if (p_read)
    248c:	cbz	r2, 2492 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17a>
						*p_read++ = w;  // Read any pending RX bytes in
    248e:	strb	r1, [r2, #0]
    2490:	adds	r2, #1
					count_read--;
    2492:	subs	r3, #1
    2494:	b.n	247a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    2496:	ldrb.w	r8, [r0, #44]	; 0x2c
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    249a:	mov	ip, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    249c:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    24a0:	cmp.w	ip, #0
    24a4:	bne.w	2358 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    24a8:	cbz	r3, 24c4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
    24aa:	ldr	r4, [r0, #0]
			sr = port().SR;
    24ac:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    24ae:	tst.w	r1, #240	; 0xf0
    24b2:	beq.n	24ac <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x194>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
				if (count_read & 1) {
    24b4:	lsls	r6, r3, #31

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
			sr = port().SR;
			if (sr & 0xF0)  {
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    24b6:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    24b8:	bpl.n	24da <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1c2>
					if (p_read)
    24ba:	cbz	r2, 24c0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1a8>
						*p_read++ = w;  // Read any pending RX bytes in
    24bc:	strb	r1, [r2, #0]
    24be:	adds	r2, #1
					count_read--;
    24c0:	subs	r3, #1
    24c2:	b.n	24a8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    24c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    24c8:	cbz	r2, 24d6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1be>
						*p_read++ = (w & 0xff);
    24ca:	mov	r4, r2
						*p_read++ = w >> 8;
    24cc:	asrs	r5, r1, #8
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
						*p_read++ = (w & 0xff);
    24ce:	strb.w	r1, [r4], #2
						*p_read++ = w >> 8;
    24d2:	strb	r5, [r2, #1]
    24d4:	mov	r2, r4
					}
					count_read -= 2;
    24d6:	subs	r3, #2
    24d8:	b.n	247a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    24da:	cbz	r2, 24e8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d0>
						*p_read++ = w >> 8;
    24dc:	mov	r4, r2
    24de:	asrs	r5, r1, #8
    24e0:	strb.w	r5, [r4], #2
						*p_read++ = (w & 0xff);
    24e4:	strb	r1, [r2, #1]
    24e6:	mov	r2, r4
					}
					count_read -= 2;
    24e8:	subs	r3, #2
    24ea:	b.n	24a8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    24ec:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    24f0:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    24f2:	it	ne
    24f4:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    24f8:	str	r5, [r4, #52]	; 0x34
    24fa:	b.n	23e8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xd0>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    24fc:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    2500:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    2502:	it	ne
    2504:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    2508:	str	r5, [r4, #52]	; 0x34
    250a:	b.n	2344 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x2c>
    250c:	.word	0x801f0400

00002510 <_spi_dma_rxISR0()>:
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2510:	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    2512:	ldr	r3, [pc, #280]	; (262c <_spi_dma_rxISR0()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    2514:	ldr	r2, [pc, #280]	; (2630 <_spi_dma_rxISR0()+0x120>)
    2516:	ldr	r0, [r3, #56]	; 0x38
    2518:	ldr	r4, [r3, #52]	; 0x34
    251a:	ldrb	r1, [r0, #4]
    251c:	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    251e:	ldr	r1, [pc, #276]	; (2634 <_spi_dma_rxISR0()+0x124>)
    2520:	ldrb	r2, [r4, #4]
    2522:	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    2524:	ldr	r2, [r3, #48]	; 0x30
    2526:	ldrb	r0, [r0, #4]
    2528:	strb	r0, [r1, #0]
    252a:	cmp	r2, #0
    252c:	beq.n	25bc <_spi_dma_rxISR0()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    252e:	ldr	r1, [r3, #4]
    2530:	ldr	r1, [r1, #12]
    2532:	cmp	r2, r1
    2534:	bhi.n	25b4 <_spi_dma_rxISR0()+0xa4>
    2536:	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2538:	ldrh	r4, [r1, #30]
    253a:	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    253c:	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2540:	bmi.n	260e <_spi_dma_rxISR0()+0xfe>
		tcd->BITER = len & 0x7fff;
    2542:	ubfx	r0, r0, #0, #15
    2546:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    2548:	ldrh	r0, [r1, #30]
    254a:	uxth	r0, r0
    254c:	strh	r0, [r1, #22]
    254e:	ldr	r1, [r3, #56]	; 0x38
    2550:	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2552:	ldrh	r0, [r1, #30]
    2554:	lsls	r0, r0, #16
    2556:	bmi.n	25fe <_spi_dma_rxISR0()+0xee>
		tcd->BITER = len & 0x7fff;
    2558:	ubfx	r0, r2, #0, #15
    255c:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    255e:	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    2560:	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    2562:	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    2564:	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    2568:	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    256a:	it	ne
    256c:	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    256e:	str	r4, [r3, #48]	; 0x30
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    2570:	ldr	r1, [r3, #52]	; 0x34
    2572:	ldr	r0, [pc, #184]	; (262c <_spi_dma_rxISR0()+0x11c>)
    2574:	ldr	r1, [r1, #0]
    2576:	ldr	r5, [r1, #0]
    2578:	add.w	r4, r0, #44	; 0x2c
    257c:	cmp	r5, r4
    257e:	beq.n	25ee <_spi_dma_rxISR0()+0xde>
    2580:	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    2582:	ldr	r4, [r0, #12]
    2584:	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    2588:	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    258a:	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    258c:	itete	ne
    258e:	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    2590:	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    2592:	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    2594:	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    2596:	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    259a:	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    259c:	str	r4, [r0, #52]	; 0x34
    259e:	ldr	r1, [r3, #56]	; 0x38
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    25a0:	ldr	r3, [pc, #148]	; (2638 <_spi_dma_rxISR0()+0x128>)
    25a2:	ldrb	r1, [r1, #4]
    25a4:	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    25a6:	ldr	r1, [pc, #132]	; (262c <_spi_dma_rxISR0()+0x11c>)
		if (should_reenable_tx)
    25a8:	cbz	r2, 25b0 <_spi_dma_rxISR0()+0xa0>
    25aa:	ldr	r2, [r1, #52]	; 0x34
    25ac:	ldrb	r2, [r2, #4]
    25ae:	strb	r2, [r3, #0]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    25b0:	pop	{r4, r5, r6, r7}
    25b2:	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    25b4:	subs	r2, r2, r1
    25b6:	str	r2, [r3, #48]	; 0x30
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    25b8:	movs	r2, #1
    25ba:	b.n	2570 <_spi_dma_rxISR0()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    25bc:	ldr	r0, [r3, #60]	; 0x3c
    25be:	ldr	r1, [r3, #0]
    25c0:	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    25c2:	ldr	r4, [pc, #120]	; (263c <_spi_dma_rxISR0()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    25c4:	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    25c6:	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    25c8:	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    25ca:	ldr	r5, [r5, #0]
    25cc:	ldr	r6, [pc, #112]	; (2640 <_spi_dma_rxISR0()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    25ce:	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    25d2:	movs	r7, #3
    25d4:	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    25d6:	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    25d8:	strb.w	r7, [r3, #45]	; 0x2d
    25dc:	bne.n	261e <_spi_dma_rxISR0()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    25de:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    25e0:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    25e2:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    25e4:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    25e6:	beq.n	2626 <_spi_dma_rxISR0()+0x116>
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    25e8:	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    25ea:	b.w	99f4 <EventResponder::triggerEventNotImmediate()>
    25ee:	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    25f0:	ldrb.w	r0, [r0, #44]	; 0x2c

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    25f4:	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    25f6:	orr.w	r0, r0, #2147483648	; 0x80000000
    25fa:	str	r0, [r1, #52]	; 0x34
    25fc:	b.n	259e <_spi_dma_rxISR0()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    25fe:	ldrh	r4, [r1, #30]
    2600:	ubfx	r0, r2, #0, #9
    2604:	and.w	r4, r4, #65024	; 0xfe00
    2608:	orrs	r0, r4
    260a:	strh	r0, [r1, #30]
    260c:	b.n	255e <_spi_dma_rxISR0()+0x4e>
    260e:	ldrh	r4, [r1, #30]
    2610:	ubfx	r0, r0, #0, #9
    2614:	and.w	r4, r4, #65024	; 0xfe00
    2618:	orrs	r0, r4
    261a:	strh	r0, [r1, #30]
    261c:	b.n	2548 <_spi_dma_rxISR0()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    261e:	mov	r3, r5
    2620:	mov	r1, r2
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2622:	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2624:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2626:	ldr	r3, [r0, #8]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2628:	pop	{r4, r5, r6, r7}
    262a:	bx	r3
    262c:	.word	0x20016d8c
    2630:	.word	0x4000801f
    2634:	.word	0x4000801c
    2638:	.word	0x4000801b
    263c:	.word	0xff0f0000
    2640:	.word	0x000022fd

00002644 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    2644:	cbz	r3, 264a <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    2646:	b.w	2318 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>
    264a:	bx	lr

0000264c <breakTime(long, tmElements_t&)>:
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    264c:	ldr	r2, [pc, #400]	; (27e0 <breakTime(long, tmElements_t&)+0x194>)
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    264e:	ldr	r3, [pc, #404]	; (27e4 <breakTime(long, tmElements_t&)+0x198>)
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    2650:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2654:	ldr	r6, [pc, #400]	; (27e8 <breakTime(long, tmElements_t&)+0x19c>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2656:	ldr.w	sl, [pc, #416]	; 27f8 <breakTime(long, tmElements_t&)+0x1ac>
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    265a:	ldr	r4, [pc, #400]	; (27ec <breakTime(long, tmElements_t&)+0x1a0>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    265c:	ldr.w	r9, [pc, #400]	; 27f0 <breakTime(long, tmElements_t&)+0x1a4>
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    2660:	umull	r5, r2, r2, r0
    2664:	mov.w	ip, r2, lsr #16
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2668:	add.w	r7, ip, #4
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    266c:	umull	r2, r5, r3, r0
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2670:	umull	r6, r2, r6, r0
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2674:	umull	sl, fp, r7, sl
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    2678:	lsrs	r5, r5, #5
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    267a:	lsrs	r2, r2, #11
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    267c:	umull	r6, r3, r3, r5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2680:	umull	r6, r4, r4, r2
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2684:	rsb	r6, fp, r7
    2688:	add.w	r6, fp, r6, lsr #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    268c:	lsrs	r3, r3, #5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    268e:	lsrs	r6, r6, #2
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2690:	lsrs	r4, r4, #4
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2692:	rsb	r6, r6, r6, lsl #3
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    2696:	rsb	r3, r3, r3, lsl #4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    269a:	add.w	r4, r4, r4, lsl #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    269e:	sub.w	r3, r5, r3, lsl #2
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    26a2:	subs	r6, r7, r6
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    26a4:	rsb	r5, r5, r5, lsl #4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    26a8:	sub.w	r2, r2, r4, lsl #3
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    26ac:	sub.w	r0, r0, r5, lsl #2
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    26b0:	adds	r6, #1
    26b2:	movs	r4, #0
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    26b4:	strb	r2, [r1, #2]
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    26b6:	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    26b8:	strb	r3, [r1, #1]
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    26ba:	strb	r6, [r1, #3]
  
  year = 0;  
  days = 0;
    26bc:	mov	r2, r4
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    26be:	movw	fp, #365	; 0x16d
    26c2:	mov.w	r8, #100	; 0x64
    26c6:	mov.w	sl, #400	; 0x190
    26ca:	b.n	26ea <breakTime(long, tmElements_t&)+0x9e>
    26cc:	rsb	r5, r6, r5, asr #7
    26d0:	mls	r5, sl, r5, r3
    26d4:	cbnz	r0, 2734 <breakTime(long, tmElements_t&)+0xe8>
    26d6:	cmp	r5, #0
    26d8:	ite	ne
    26da:	movne	r0, fp
    26dc:	moveq.w	r0, #366	; 0x16e
    26e0:	add	r2, r0
    26e2:	cmp	ip, r2
    26e4:	add.w	r4, r4, #1
    26e8:	bcc.n	2712 <breakTime(long, tmElements_t&)+0xc6>
    26ea:	uxtb	r7, r4
    26ec:	addw	r3, r7, #1970	; 0x7b2
    26f0:	smull	r0, r5, r9, r3
    26f4:	asrs	r6, r3, #31
    26f6:	rsb	r0, r6, r5, asr #5
    26fa:	ands.w	lr, r3, #3
    26fe:	mls	r0, r8, r0, r3
    2702:	beq.n	26cc <breakTime(long, tmElements_t&)+0x80>
    2704:	movw	r0, #365	; 0x16d
    2708:	add	r2, r0
    270a:	cmp	ip, r2
    270c:	add.w	r4, r4, #1
    2710:	bcs.n	26ea <breakTime(long, tmElements_t&)+0x9e>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    2712:	strb	r7, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    2714:	cmp.w	lr, #0
    2718:	bne.n	273a <breakTime(long, tmElements_t&)+0xee>
    271a:	ldr	r0, [pc, #212]	; (27f0 <breakTime(long, tmElements_t&)+0x1a4>)
    271c:	asrs	r6, r3, #31
    271e:	smull	r4, r0, r0, r3
    2722:	rsb	r4, r6, r0, asr #5
    2726:	movs	r5, #100	; 0x64
    2728:	mls	r4, r5, r4, r3
    272c:	cbz	r4, 279e <breakTime(long, tmElements_t&)+0x152>
    272e:	mov.w	r4, #366	; 0x16e
    2732:	b.n	2740 <breakTime(long, tmElements_t&)+0xf4>
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    2734:	mov.w	r0, #366	; 0x16e
    2738:	b.n	26e0 <breakTime(long, tmElements_t&)+0x94>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    273a:	movw	r4, #365	; 0x16d
    273e:	asrs	r6, r3, #31
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    2740:	ldr	r0, [pc, #172]	; (27f0 <breakTime(long, tmElements_t&)+0x1a4>)
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    2742:	ldr	r5, [pc, #176]	; (27f4 <breakTime(long, tmElements_t&)+0x1a8>)
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    2744:	smull	r7, r0, r0, r3
    2748:	rsb	r8, r6, r0, asr #5
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    274c:	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    274e:	rsb	r6, r6, r0, asr #7
    2752:	movs	r4, #100	; 0x64
    2754:	mov.w	r0, #400	; 0x190
    2758:	mls	r6, r0, r6, r3
    275c:	mls	r8, r4, r8, r3
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    2760:	rsb	r2, r2, ip
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    2764:	movs	r0, #1
    2766:	movs	r3, #0
    2768:	b.n	2770 <breakTime(long, tmElements_t&)+0x124>
    276a:	adds	r0, #1
    276c:	uxtb	r0, r0
    276e:	adds	r3, #1
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    2770:	cmp	r3, #1
    2772:	uxtb	r7, r3
    2774:	beq.n	27b8 <breakTime(long, tmElements_t&)+0x16c>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    2776:	ldrb	r4, [r3, r5]
    2778:	cmp	r4, r2
    277a:	bhi.n	2790 <breakTime(long, tmElements_t&)+0x144>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    277c:	cmp	r0, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    277e:	sub.w	r2, r2, r4
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    2782:	bne.n	276a <breakTime(long, tmElements_t&)+0x11e>
    2784:	movs	r7, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    2786:	adds	r2, #1
    2788:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    278a:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    278c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2790:	adds	r7, #1
    2792:	uxtb	r7, r7
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    2794:	adds	r2, #1
    2796:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    2798:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    279a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    279e:	mov.w	r4, #400	; 0x190
    27a2:	rsb	r0, r6, r0, asr #7
    27a6:	mls	r0, r4, r0, r3
    27aa:	cmp	r0, #0
    27ac:	movw	r4, #365	; 0x16d
    27b0:	it	eq
    27b2:	moveq.w	r4, #366	; 0x16e
    27b6:	b.n	2740 <breakTime(long, tmElements_t&)+0xf4>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    27b8:	cmp.w	lr, #0
    27bc:	bne.n	27d4 <breakTime(long, tmElements_t&)+0x188>
    27be:	cmp.w	r8, #0
    27c2:	bne.n	27dc <breakTime(long, tmElements_t&)+0x190>
    27c4:	cmp	r6, #0
    27c6:	ite	ne
    27c8:	movne	r4, #28
    27ca:	moveq	r4, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    27cc:	cmp	r2, r4
    27ce:	bcc.n	27d8 <breakTime(long, tmElements_t&)+0x18c>
      time -= monthLength;
    27d0:	subs	r2, r2, r4
    27d2:	b.n	276a <breakTime(long, tmElements_t&)+0x11e>
    27d4:	movs	r4, #28
    27d6:	b.n	27cc <breakTime(long, tmElements_t&)+0x180>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    27d8:	movs	r7, #2
    27da:	b.n	2786 <breakTime(long, tmElements_t&)+0x13a>
    27dc:	movs	r4, #29
    27de:	b.n	27cc <breakTime(long, tmElements_t&)+0x180>
    27e0:	.word	0xc22e4507
    27e4:	.word	0x88888889
    27e8:	.word	0x91a2b3c5
    27ec:	.word	0xaaaaaaab
    27f0:	.word	0x51eb851f
    27f4:	.word	0x00013388
    27f8:	.word	0x24924925

000027fc <refreshCache(long) [clone .part.0]>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    27fc:	push	{r4, lr}
  if (t != cacheTime) {
    breakTime(t, tm); 
    27fe:	ldr	r1, [pc, #12]	; (280c <refreshCache(long) [clone .part.0]+0x10>)

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    2800:	mov	r4, r0
  if (t != cacheTime) {
    breakTime(t, tm); 
    2802:	bl	264c <breakTime(long, tmElements_t&)>
    cacheTime = t; 
    2806:	ldr	r3, [pc, #8]	; (2810 <refreshCache(long) [clone .part.0]+0x14>)
    2808:	str	r4, [r3, #0]
    280a:	pop	{r4, pc}
    280c:	.word	0x2001c5b4
    2810:	.word	0x2001c5b0

00002814 <makeTime(tmElements_t const&)>:
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
}

time_t makeTime(const tmElements_t &tm){   
    2814:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
    2818:	ldr	r1, [pc, #228]	; (2900 <makeTime(tmElements_t const&)+0xec>)
    281a:	ldrb	r6, [r0, #6]
    281c:	mul.w	r1, r1, r6
  for (i = 0; i < tm.Year; i++) {
    2820:	cbz	r6, 2864 <makeTime(tmElements_t const&)+0x50>
    2822:	addw	ip, r6, #1970	; 0x7b2
    2826:	movw	r3, #1971	; 0x7b3
    if (LEAP_YEAR(i)) {
    282a:	ldr.w	lr, [pc, #216]	; 2904 <makeTime(tmElements_t const&)+0xf0>
    282e:	movs	r7, #100	; 0x64
    2830:	mov.w	r8, #400	; 0x190
    2834:	b.n	2852 <makeTime(tmElements_t const&)+0x3e>
    2836:	tst.w	r3, #3
    283a:	bne.n	2850 <makeTime(tmElements_t const&)+0x3c>
    283c:	rsb	r2, r2, r5, asr #7
    2840:	mls	r2, r8, r2, r3
    2844:	cbnz	r4, 2848 <makeTime(tmElements_t const&)+0x34>
    2846:	cbnz	r2, 2850 <makeTime(tmElements_t const&)+0x3c>
      seconds += SECS_PER_DAY;   // add extra days for leap years
    2848:	add.w	r1, r1, #86016	; 0x15000
    284c:	add.w	r1, r1, #384	; 0x180
    2850:	adds	r3, #1
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    if (LEAP_YEAR(i)) {
    2852:	smull	r2, r5, lr, r3
    2856:	asrs	r2, r3, #31
    2858:	rsb	r4, r2, r5, asr #5
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    285c:	cmp	r3, ip
    if (LEAP_YEAR(i)) {
    285e:	mls	r4, r7, r4, r3
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    2862:	bne.n	2836 <makeTime(tmElements_t const&)+0x22>
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    2864:	ldrb	r7, [r0, #5]
    2866:	cmp	r7, #1
    2868:	ble.n	28ca <makeTime(tmElements_t const&)+0xb6>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    286a:	ldr	r4, [pc, #152]	; (2904 <makeTime(tmElements_t const&)+0xf0>)
    286c:	ldr	r2, [pc, #152]	; (2908 <makeTime(tmElements_t const&)+0xf4>)
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    286e:	ldr.w	lr, [pc, #156]	; 290c <makeTime(tmElements_t const&)+0xf8>
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    2872:	addw	r3, r6, #1970	; 0x7b2
    2876:	smull	r4, r6, r4, r3
    287a:	asrs	r4, r3, #31
    287c:	rsb	ip, r4, r6, asr #5
    2880:	movs	r5, #100	; 0x64
    2882:	rsb	r6, r4, r6, asr #7
    2886:	mov.w	r4, #400	; 0x190
    288a:	mls	ip, r5, ip, r3
    288e:	mls	r6, r4, r6, r3
    2892:	and.w	r5, r3, #3
    2896:	movs	r3, #1
    2898:	b.n	28aa <makeTime(tmElements_t const&)+0x96>
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    289a:	ldrb	r4, [r2, #0]
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    289c:	adds	r3, #1
    289e:	cmp	r3, r7
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    28a0:	mla	r1, lr, r4, r1
    28a4:	add.w	r2, r2, #1
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    28a8:	beq.n	28ca <makeTime(tmElements_t const&)+0xb6>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    28aa:	cmp	r3, #2
    28ac:	bne.n	289a <makeTime(tmElements_t const&)+0x86>
    28ae:	cmp	r5, #0
    28b0:	bne.n	289a <makeTime(tmElements_t const&)+0x86>
    28b2:	cmp.w	ip, #0
    28b6:	beq.n	28f0 <makeTime(tmElements_t const&)+0xdc>
      seconds += SECS_PER_DAY * 29;
    28b8:	add.w	r1, r1, #2490368	; 0x260000
    28bc:	add.w	r1, r1, #15232	; 0x3b80
      seconds += SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    28c0:	adds	r3, #1
    28c2:	cmp	r3, r7
    28c4:	add.w	r2, r2, #1
    28c8:	bne.n	28aa <makeTime(tmElements_t const&)+0x96>
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
  seconds+= tm.Second;
  return (time_t)seconds; 
    28ca:	ldrb	r3, [r0, #1]
    28cc:	ldrb	r5, [r0, #2]
    28ce:	ldrb	r4, [r0, #0]
    28d0:	ldrb	r2, [r0, #4]
    28d2:	ldr	r0, [pc, #56]	; (290c <makeTime(tmElements_t const&)+0xf8>)
    28d4:	rsb	r3, r3, r3, lsl #4
    28d8:	mov.w	r6, #3600	; 0xe10
    28dc:	lsls	r3, r3, #2
    28de:	mla	r3, r6, r5, r3
    28e2:	add	r3, r4
    28e4:	subs	r2, #1
    28e6:	mla	r0, r0, r2, r3
}
    28ea:	add	r0, r1
    28ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    28f0:	cmp	r6, #0
    28f2:	bne.n	289a <makeTime(tmElements_t const&)+0x86>
      seconds += SECS_PER_DAY * 29;
    28f4:	add.w	r1, r1, #2490368	; 0x260000
    28f8:	add.w	r1, r1, #15232	; 0x3b80
    28fc:	b.n	28c0 <makeTime(tmElements_t const&)+0xac>
    28fe:	nop
    2900:	.word	0x01e13380
    2904:	.word	0x51eb851f
    2908:	.word	0x00013388
    290c:	.word	0x00015180

00002910 <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    2910:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2912:	ldr	r4, [pc, #128]	; (2994 <now()+0x84>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    2914:	ldr	r6, [pc, #128]	; (2998 <now()+0x88>)
    2916:	ldr	r3, [r4, #0]
    2918:	ldr	r2, [r6, #0]
    291a:	ldr	r5, [pc, #128]	; (299c <now()+0x8c>)
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    291c:	sub	sp, #12
    291e:	ldr	r0, [r5, #0]
    2920:	str	r3, [sp, #0]
	return ret;
    2922:	ldr	r3, [sp, #0]
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    2924:	subs	r3, r3, r2
    2926:	cmp.w	r3, #1000	; 0x3e8
    292a:	bcc.n	294c <now()+0x3c>
    292c:	adds	r0, #1
    292e:	b.n	2932 <now()+0x22>
    2930:	mov	r0, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2932:	ldr	r3, [r4, #0]
    2934:	str	r3, [sp, #0]
	return ret;
    2936:	ldr	r3, [sp, #0]
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    2938:	add.w	r2, r2, #1000	; 0x3e8
#endif


time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    293c:	subs	r3, r3, r2
    293e:	cmp.w	r3, #1000	; 0x3e8
    2942:	add.w	r1, r0, #1
    2946:	bcs.n	2930 <now()+0x20>
    2948:	str	r0, [r5, #0]
    294a:	str	r2, [r6, #0]
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    294c:	ldr	r7, [pc, #80]	; (29a0 <now()+0x90>)
    294e:	ldr	r3, [r7, #0]
    2950:	cmp	r0, r3
    2952:	bcc.n	2974 <now()+0x64>
    if (getTimePtr != 0) {
    2954:	ldr	r3, [pc, #76]	; (29a4 <now()+0x94>)
    2956:	ldr	r3, [r3, #0]
    2958:	cbz	r3, 2974 <now()+0x64>
      time_t t = getTimePtr();
    295a:	blx	r3
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    295c:	ldr	r3, [pc, #72]	; (29a8 <now()+0x98>)
#endif
  }
  if (nextSyncTime <= sysTime) {
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
    295e:	cbnz	r0, 2978 <now()+0x68>
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    2960:	ldr	r1, [pc, #72]	; (29ac <now()+0x9c>)
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    2962:	ldr	r2, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    2964:	ldrb	r3, [r1, #0]
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    2966:	ldr	r0, [r5, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    2968:	adds	r3, #0
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    296a:	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    296c:	it	ne
    296e:	movne	r3, #1
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    2970:	str	r2, [r7, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    2972:	strb	r3, [r1, #0]
      }
    }
  }  
  return (time_t)sysTime;
}
    2974:	add	sp, #12
    2976:	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2978:	ldr	r2, [r4, #0]
    297a:	str	r2, [sp, #4]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    297c:	ldr	r3, [r3, #0]
  Status = timeSet;
    297e:	ldr	r2, [pc, #44]	; (29ac <now()+0x9c>)
	return ret;
    2980:	ldr	r4, [sp, #4]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    2982:	str	r0, [r5, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
    2984:	add	r3, r0
  Status = timeSet;
    2986:	movs	r1, #2
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    2988:	str	r4, [r6, #0]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    298a:	str	r3, [r7, #0]
  Status = timeSet;
    298c:	strb	r1, [r2, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
      }
    }
  }  
  return (time_t)sysTime;
}
    298e:	add	sp, #12
    2990:	pop	{r4, r5, r6, r7, pc}
    2992:	nop
    2994:	.word	0x2001c95c
    2998:	.word	0x2001c5c8
    299c:	.word	0x2001c5bc
    29a0:	.word	0x2001c5cc
    29a4:	.word	0x2001c5c4
    29a8:	.word	0x20016dcc
    29ac:	.word	0x2001c5c0

000029b0 <hour()>:
    breakTime(t, tm); 
    cacheTime = t; 
  }
}

int hour() { // the hour now 
    29b0:	push	{r3, lr}
  return hour(now()); 
    29b2:	bl	2910 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    29b6:	ldr	r3, [pc, #16]	; (29c8 <hour()+0x18>)
    29b8:	ldr	r3, [r3, #0]
    29ba:	cmp	r0, r3
    29bc:	beq.n	29c2 <hour()+0x12>
    29be:	bl	27fc <refreshCache(long) [clone .part.0]>
  return hour(now()); 
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
  return tm.Hour;  
    29c2:	ldr	r3, [pc, #8]	; (29cc <hour()+0x1c>)
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    29c4:	ldrb	r0, [r3, #2]
    29c6:	pop	{r3, pc}
    29c8:	.word	0x2001c5b0
    29cc:	.word	0x2001c5b4

000029d0 <minute()>:

uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
    29d0:	push	{r3, lr}
  return minute(now()); 
    29d2:	bl	2910 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    29d6:	ldr	r3, [pc, #16]	; (29e8 <minute()+0x18>)
    29d8:	ldr	r3, [r3, #0]
    29da:	cmp	r0, r3
    29dc:	beq.n	29e2 <minute()+0x12>
    29de:	bl	27fc <refreshCache(long) [clone .part.0]>
  return minute(now()); 
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
    29e2:	ldr	r3, [pc, #8]	; (29ec <minute()+0x1c>)
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
    29e4:	ldrb	r0, [r3, #1]
    29e6:	pop	{r3, pc}
    29e8:	.word	0x2001c5b0
    29ec:	.word	0x2001c5b4

000029f0 <second()>:
int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
}

int second() {
    29f0:	push	{r3, lr}
  return second(now()); 
    29f2:	bl	2910 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    29f6:	ldr	r3, [pc, #16]	; (2a08 <second()+0x18>)
    29f8:	ldr	r3, [r3, #0]
    29fa:	cmp	r0, r3
    29fc:	beq.n	2a02 <second()+0x12>
    29fe:	bl	27fc <refreshCache(long) [clone .part.0]>
  return second(now()); 
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
    2a02:	ldr	r3, [pc, #8]	; (2a0c <second()+0x1c>)
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
    2a04:	ldrb	r0, [r3, #0]
    2a06:	pop	{r3, pc}
    2a08:	.word	0x2001c5b0
    2a0c:	.word	0x2001c5b4

00002a10 <day()>:
int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
}

int day(){
    2a10:	push	{r3, lr}
  return(day(now())); 
    2a12:	bl	2910 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2a16:	ldr	r3, [pc, #16]	; (2a28 <day()+0x18>)
    2a18:	ldr	r3, [r3, #0]
    2a1a:	cmp	r0, r3
    2a1c:	beq.n	2a22 <day()+0x12>
    2a1e:	bl	27fc <refreshCache(long) [clone .part.0]>
  return(day(now())); 
}

int day(time_t t) { // the day for the given time (0-6)
  refreshCache(t);
  return tm.Day;
    2a22:	ldr	r3, [pc, #8]	; (2a2c <day()+0x1c>)
  return tm.Second;
}

int day(){
  return(day(now())); 
}
    2a24:	ldrb	r0, [r3, #4]
    2a26:	pop	{r3, pc}
    2a28:	.word	0x2001c5b0
    2a2c:	.word	0x2001c5b4

00002a30 <month()>:
int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
   
int month(){
    2a30:	push	{r3, lr}
  return month(now()); 
    2a32:	bl	2910 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2a36:	ldr	r3, [pc, #16]	; (2a48 <month()+0x18>)
    2a38:	ldr	r3, [r3, #0]
    2a3a:	cmp	r0, r3
    2a3c:	beq.n	2a42 <month()+0x12>
    2a3e:	bl	27fc <refreshCache(long) [clone .part.0]>
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
    2a42:	ldr	r3, [pc, #8]	; (2a4c <month()+0x1c>)
  return tm.Wday;
}
   
int month(){
  return month(now()); 
}
    2a44:	ldrb	r0, [r3, #5]
    2a46:	pop	{r3, pc}
    2a48:	.word	0x2001c5b0
    2a4c:	.word	0x2001c5b4

00002a50 <year()>:
int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
    2a50:	push	{r3, lr}
  return year(now()); 
    2a52:	bl	2910 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2a56:	ldr	r3, [pc, #20]	; (2a6c <year()+0x1c>)
    2a58:	ldr	r3, [r3, #0]
    2a5a:	cmp	r0, r3
    2a5c:	beq.n	2a62 <year()+0x12>
    2a5e:	bl	27fc <refreshCache(long) [clone .part.0]>
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
  return tmYearToCalendar(tm.Year);
    2a62:	ldr	r3, [pc, #12]	; (2a70 <year()+0x20>)
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    2a64:	ldrb	r0, [r3, #6]
}
    2a66:	addw	r0, r0, #1970	; 0x7b2
    2a6a:	pop	{r3, pc}
    2a6c:	.word	0x2001c5b0
    2a70:	.word	0x2001c5b4

00002a74 <setTime(int, int, int, int, int, int)>:
  nextSyncTime = (uint32_t)t + syncInterval;
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
} 

void setTime(int hr,int min,int sec,int dy, int mnth, int yr){
    2a74:	push	{r4, r5, r6, r7, lr}
    2a76:	sub	sp, #12
    2a78:	mov	r7, r0
    2a7a:	ldr	r4, [sp, #36]	; 0x24
    2a7c:	ldr	r6, [sp, #32]
 // year can be given as full four digit year or two digts (2010 or 10 for 2010);  
 //it is converted to years since 1970
  if( yr > 99)
    2a7e:	cmp	r4, #99	; 0x63
      yr = yr - 1970;
    2a80:	ite	gt
    2a82:	subwgt	r5, r4, #1970	; 0x7b2
  else
      yr += 30;  
    2a86:	addle.w	r5, r4, #30
  tm.Year = yr;
    2a8a:	ldr	r4, [pc, #56]	; (2ac4 <setTime(int, int, int, int, int, int)+0x50>)
  tm.Month = mnth;
  tm.Day = dy;
  tm.Hour = hr;
  tm.Minute = min;
  tm.Second = sec;
  setTime(makeTime(tm));
    2a8c:	mov	r0, r4
 //it is converted to years since 1970
  if( yr > 99)
      yr = yr - 1970;
  else
      yr += 30;  
  tm.Year = yr;
    2a8e:	strb	r5, [r4, #6]
  tm.Month = mnth;
    2a90:	strb	r6, [r4, #5]
  tm.Day = dy;
    2a92:	strb	r3, [r4, #4]
  tm.Hour = hr;
    2a94:	strb	r7, [r4, #2]
  tm.Minute = min;
    2a96:	strb	r1, [r4, #1]
  tm.Second = sec;
    2a98:	strb	r2, [r4, #0]
  setTime(makeTime(tm));
    2a9a:	bl	2814 <makeTime(tmElements_t const&)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2a9e:	ldr	r3, [pc, #40]	; (2ac8 <setTime(int, int, int, int, int, int)+0x54>)
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    2aa0:	ldr	r2, [pc, #40]	; (2acc <setTime(int, int, int, int, int, int)+0x58>)
    2aa2:	ldr	r3, [r3, #0]
    2aa4:	ldr	r2, [r2, #0]
    2aa6:	str	r3, [sp, #4]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    2aa8:	ldr	r6, [pc, #36]	; (2ad0 <setTime(int, int, int, int, int, int)+0x5c>)
  nextSyncTime = (uint32_t)t + syncInterval;
    2aaa:	ldr	r5, [pc, #40]	; (2ad4 <setTime(int, int, int, int, int, int)+0x60>)
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    2aac:	ldr	r1, [pc, #40]	; (2ad8 <setTime(int, int, int, int, int, int)+0x64>)
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
  Status = timeSet;
    2aae:	ldr	r3, [pc, #44]	; (2adc <setTime(int, int, int, int, int, int)+0x68>)
	return ret;
    2ab0:	ldr	r4, [sp, #4]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    2ab2:	str	r0, [r6, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
    2ab4:	add	r0, r2
  Status = timeSet;
    2ab6:	movs	r2, #2
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    2ab8:	str	r0, [r5, #0]
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    2aba:	str	r4, [r1, #0]
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
  Status = timeSet;
    2abc:	strb	r2, [r3, #0]
  tm.Day = dy;
  tm.Hour = hr;
  tm.Minute = min;
  tm.Second = sec;
  setTime(makeTime(tm));
}
    2abe:	add	sp, #12
    2ac0:	pop	{r4, r5, r6, r7, pc}
    2ac2:	nop
    2ac4:	.word	0x2001c5b4
    2ac8:	.word	0x2001c95c
    2acc:	.word	0x20016dcc
    2ad0:	.word	0x2001c5bc
    2ad4:	.word	0x2001c5cc
    2ad8:	.word	0x2001c5c8
    2adc:	.word	0x2001c5c0

00002ae0 <setSyncProvider(long (*)())>:
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
  nextSyncTime = sysTime;
    2ae0:	ldr	r1, [pc, #12]	; (2af0 <setSyncProvider(long (*)())+0x10>)
    2ae2:	ldr	r2, [pc, #16]	; (2af4 <setSyncProvider(long (*)())+0x14>)
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    2ae4:	ldr	r3, [pc, #16]	; (2af8 <setSyncProvider(long (*)())+0x18>)
  nextSyncTime = sysTime;
    2ae6:	ldr	r1, [r1, #0]
    2ae8:	str	r1, [r2, #0]
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    2aea:	str	r0, [r3, #0]
  nextSyncTime = sysTime;
  now(); // this will sync the clock
    2aec:	b.w	2910 <now()>
    2af0:	.word	0x2001c5bc
    2af4:	.word	0x2001c5cc
    2af8:	.word	0x2001c5c4

00002afc <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
    2afc:	push	{r4, lr}
    2afe:	mov	r4, r0
		release();
    2b00:	bl	99bc <DMAChannel::release()>
	}
    2b04:	mov	r0, r4
    2b06:	pop	{r4, pc}

00002b08 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE>:
audio_block_t * AudioOutputPWM::block_2nd = NULL;
uint32_t  AudioOutputPWM::block_offset = 0;
uint8_t AudioOutputPWM::interrupt_count = 0;

DMAMEM uint32_t pwm_dma_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputPWM::dma(false);
    2b08:	ldr	r2, [pc, #8]	; (2b14 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0xc>)
    2b0a:	ldr	r1, [pc, #12]	; (2b18 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x10>)
    2b0c:	ldr	r0, [pc, #12]	; (2b1c <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x14>)
    2b0e:	b.w	a914 <__aeabi_atexit>
    2b12:	nop
    2b14:	.word	0x20016d30
    2b18:	.word	0x00002afd
    2b1c:	.word	0x2001c5d0

00002b20 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S::block_left = NULL;
audio_block_t * AudioInputI2S::block_right = NULL;
uint16_t AudioInputI2S::block_offset = 0;
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);
    2b20:	ldr	r2, [pc, #8]	; (2b2c <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    2b22:	ldr	r1, [pc, #12]	; (2b30 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    2b24:	ldr	r0, [pc, #12]	; (2b34 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    2b26:	b.w	a914 <__aeabi_atexit>
    2b2a:	nop
    2b2c:	.word	0x20016d30
    2b30:	.word	0x00002afd
    2b34:	.word	0x2001c5d8

00002b38 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    2b38:	ldr	r2, [pc, #8]	; (2b44 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    2b3a:	ldr	r1, [pc, #12]	; (2b48 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    2b3c:	ldr	r0, [pc, #12]	; (2b4c <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    2b3e:	b.w	a914 <__aeabi_atexit>
    2b42:	nop
    2b44:	.word	0x20016d30
    2b48:	.word	0x00002afd
    2b4c:	.word	0x2001c5e0

00002b50 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAChannel AudioOutputI2S::dma(false);
    2b50:	ldr	r2, [pc, #8]	; (2b5c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    2b52:	ldr	r1, [pc, #12]	; (2b60 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    2b54:	ldr	r0, [pc, #12]	; (2b64 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    2b56:	b.w	a914 <__aeabi_atexit>
    2b5a:	nop
    2b5c:	.word	0x20016d30
    2b60:	.word	0x00002afd
    2b64:	.word	0x2001c5e8

00002b68 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
    2b68:	ldr	r2, [pc, #8]	; (2b74 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
    2b6a:	ldr	r1, [pc, #12]	; (2b78 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
    2b6c:	ldr	r0, [pc, #12]	; (2b7c <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
    2b6e:	b.w	a914 <__aeabi_atexit>
    2b72:	nop
    2b74:	.word	0x20016d30
    2b78:	.word	0x00002afd
    2b7c:	.word	0x2001c5f0

00002b80 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE>:
uint16_t AudioInputAnalog::block_offset = 0;
int32_t AudioInputAnalog::hpf_y1 = 0;
int32_t AudioInputAnalog::hpf_x1 = 0;

bool AudioInputAnalog::update_responsibility = false;
DMAChannel AudioInputAnalog::dma(false);
    2b80:	ldr	r2, [pc, #8]	; (2b8c <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0xc>)
    2b82:	ldr	r1, [pc, #12]	; (2b90 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x10>)
    2b84:	ldr	r0, [pc, #12]	; (2b94 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x14>)
    2b86:	b.w	a914 <__aeabi_atexit>
    2b8a:	nop
    2b8c:	.word	0x20016d30
    2b90:	.word	0x00002afd
    2b94:	.word	0x2001c5f8

00002b98 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE>:

DMAMEM __attribute__((aligned(32))) static uint16_t dac_buffer[AUDIO_BLOCK_SAMPLES*2];
audio_block_t * AudioOutputAnalog::block_left_1st = NULL;
audio_block_t * AudioOutputAnalog::block_left_2nd = NULL;
bool AudioOutputAnalog::update_responsibility = false;
DMAChannel AudioOutputAnalog::dma(false);
    2b98:	ldr	r2, [pc, #8]	; (2ba4 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0xc>)
    2b9a:	ldr	r1, [pc, #12]	; (2ba8 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x10>)
    2b9c:	ldr	r0, [pc, #12]	; (2bac <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x14>)
    2b9e:	b.w	a914 <__aeabi_atexit>
    2ba2:	nop
    2ba4:	.word	0x20016d30
    2ba8:	.word	0x00002afd
    2bac:	.word	0x2001c600

00002bb0 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
audio_block_t * AudioOutputTDM::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM::update_responsibility = false;
DMAChannel AudioOutputTDM::dma(false);
    2bb0:	ldr	r2, [pc, #8]	; (2bbc <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    2bb2:	ldr	r1, [pc, #12]	; (2bc0 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    2bb4:	ldr	r0, [pc, #12]	; (2bc4 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    2bb6:	b.w	a914 <__aeabi_atexit>
    2bba:	nop
    2bbc:	.word	0x20016d30
    2bc0:	.word	0x00002afd
    2bc4:	.word	0x2001c608

00002bc8 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE>:
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
    2bc8:	push	{r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_left = 0;
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
    2bca:	ldr	r5, [pc, #28]	; (2be8 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x20>)
    2bcc:	ldr	r4, [pc, #28]	; (2bec <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x24>)
    2bce:	ldr	r0, [pc, #32]	; (2bf0 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x28>)
    2bd0:	mov	r2, r5
    2bd2:	mov	r1, r4
    2bd4:	bl	a914 <__aeabi_atexit>
DMAChannel AudioInputAnalogStereo::dma1(false);
    2bd8:	mov	r2, r5
    2bda:	mov	r1, r4
    2bdc:	ldr	r0, [pc, #20]	; (2bf4 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x2c>)
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
    2bde:	ldmia.w	sp!, {r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
DMAChannel AudioInputAnalogStereo::dma1(false);
    2be2:	b.w	a914 <__aeabi_atexit>
    2be6:	nop
    2be8:	.word	0x20016d30
    2bec:	.word	0x00002afd
    2bf0:	.word	0x2001c610
    2bf4:	.word	0x2001c618

00002bf8 <AudioInputI2SQuad::isr()>:
	uint32_t daddr, offset;
	const int16_t *src;
	int16_t *dest1, *dest2, *dest3, *dest4;

	//digitalWriteFast(3, HIGH);
	daddr = (uint32_t)(dma.TCD->DADDR);
    2bf8:	ldr	r3, [pc, #136]	; (2c84 <AudioInputI2SQuad::isr()+0x8c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    2bfa:	ldr	r1, [pc, #140]	; (2c88 <AudioInputI2SQuad::isr()+0x90>)
    2bfc:	ldr	r2, [r3, #0]
	dma.attachInterrupt(isr);
#endif
}

void AudioInputI2SQuad::isr(void)
{
    2bfe:	push	{r4, r5, r6, r7}
	uint32_t daddr, offset;
	const int16_t *src;
	int16_t *dest1, *dest2, *dest3, *dest4;

	//digitalWriteFast(3, HIGH);
	daddr = (uint32_t)(dma.TCD->DADDR);
    2c00:	ldr	r2, [r2, #16]
	dma.clearInterrupt();

	if (daddr < (uint32_t)i2s_rx_buffer + sizeof(i2s_rx_buffer) / 2) {
    2c02:	ldr	r5, [pc, #136]	; (2c8c <AudioInputI2SQuad::isr()+0x94>)
    2c04:	ldrb	r3, [r3, #4]
    2c06:	strb	r3, [r1, #0]
    2c08:	cmp	r2, r5
    2c0a:	bcs.n	2c76 <AudioInputI2SQuad::isr()+0x7e>
		// DMA is receiving to the first half of the buffer
		// need to remove data from the second half
		src = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
		if (update_responsibility) update_all();
    2c0c:	ldr	r3, [pc, #128]	; (2c90 <AudioInputI2SQuad::isr()+0x98>)
    2c0e:	ldrb	r3, [r3, #0]
    2c10:	cmp	r3, #0
    2c12:	bne.n	2c7c <AudioInputI2SQuad::isr()+0x84>
	} else {
		// DMA is receiving to the second half of the buffer
		// need to remove data from the first half
		src = (int16_t *)&i2s_rx_buffer[0];
	}
	if (block_ch1) {
    2c14:	ldr	r3, [pc, #124]	; (2c94 <AudioInputI2SQuad::isr()+0x9c>)
    2c16:	ldr	r1, [r3, #0]
    2c18:	cbz	r1, 2c72 <AudioInputI2SQuad::isr()+0x7a>
		offset = block_offset;
    2c1a:	ldr	r7, [pc, #124]	; (2c98 <AudioInputI2SQuad::isr()+0xa0>)
    2c1c:	ldrh	r4, [r7, #0]
		if (offset <= AUDIO_BLOCK_SAMPLES/2) {
    2c1e:	cmp	r4, #64	; 0x40
    2c20:	bhi.n	2c72 <AudioInputI2SQuad::isr()+0x7a>
			arm_dcache_delete((void*)src, sizeof(i2s_rx_buffer) / 2);
			block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
			dest1 = &(block_ch1->data[offset]);
			dest2 = &(block_ch2->data[offset]);
			dest3 = &(block_ch3->data[offset]);
    2c22:	ldr	r0, [pc, #120]	; (2c9c <AudioInputI2SQuad::isr()+0xa4>)
		offset = block_offset;
		if (offset <= AUDIO_BLOCK_SAMPLES/2) {
			arm_dcache_delete((void*)src, sizeof(i2s_rx_buffer) / 2);
			block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
			dest1 = &(block_ch1->data[offset]);
			dest2 = &(block_ch2->data[offset]);
    2c24:	ldr	r2, [pc, #120]	; (2ca0 <AudioInputI2SQuad::isr()+0xa8>)
			dest3 = &(block_ch3->data[offset]);
			dest4 = &(block_ch4->data[offset]);
    2c26:	ldr	r3, [pc, #124]	; (2ca4 <AudioInputI2SQuad::isr()+0xac>)
		if (offset <= AUDIO_BLOCK_SAMPLES/2) {
			arm_dcache_delete((void*)src, sizeof(i2s_rx_buffer) / 2);
			block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
			dest1 = &(block_ch1->data[offset]);
			dest2 = &(block_ch2->data[offset]);
			dest3 = &(block_ch3->data[offset]);
    2c28:	ldr	r6, [r0, #0]
		offset = block_offset;
		if (offset <= AUDIO_BLOCK_SAMPLES/2) {
			arm_dcache_delete((void*)src, sizeof(i2s_rx_buffer) / 2);
			block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
			dest1 = &(block_ch1->data[offset]);
			dest2 = &(block_ch2->data[offset]);
    2c2a:	ldr	r0, [r2, #0]
			dest3 = &(block_ch3->data[offset]);
			dest4 = &(block_ch4->data[offset]);
    2c2c:	ldr	r2, [r3, #0]
	if (block_ch1) {
		offset = block_offset;
		if (offset <= AUDIO_BLOCK_SAMPLES/2) {
			arm_dcache_delete((void*)src, sizeof(i2s_rx_buffer) / 2);
			block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
			dest1 = &(block_ch1->data[offset]);
    2c2e:	lsls	r3, r4, #1
			dest2 = &(block_ch2->data[offset]);
			dest3 = &(block_ch3->data[offset]);
    2c30:	add	r6, r3
	if (block_ch1) {
		offset = block_offset;
		if (offset <= AUDIO_BLOCK_SAMPLES/2) {
			arm_dcache_delete((void*)src, sizeof(i2s_rx_buffer) / 2);
			block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
			dest1 = &(block_ch1->data[offset]);
    2c32:	add	r1, r3
			dest2 = &(block_ch2->data[offset]);
    2c34:	add	r0, r3
	}
	if (block_ch1) {
		offset = block_offset;
		if (offset <= AUDIO_BLOCK_SAMPLES/2) {
			arm_dcache_delete((void*)src, sizeof(i2s_rx_buffer) / 2);
			block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
    2c36:	adds	r4, #64	; 0x40
			dest1 = &(block_ch1->data[offset]);
			dest2 = &(block_ch2->data[offset]);
			dest3 = &(block_ch3->data[offset]);
			dest4 = &(block_ch4->data[offset]);
    2c38:	add	r3, r2
    2c3a:	adds	r2, r3, #2
    2c3c:	adds	r6, #2
    2c3e:	add.w	r3, r5, #8
    2c42:	adds	r1, #2
	}
	if (block_ch1) {
		offset = block_offset;
		if (offset <= AUDIO_BLOCK_SAMPLES/2) {
			arm_dcache_delete((void*)src, sizeof(i2s_rx_buffer) / 2);
			block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
    2c44:	strh	r4, [r7, #0]
    2c46:	adds	r0, #2
    2c48:	add.w	r5, r5, #520	; 0x208
			dest1 = &(block_ch1->data[offset]);
			dest2 = &(block_ch2->data[offset]);
			dest3 = &(block_ch3->data[offset]);
			dest4 = &(block_ch4->data[offset]);
			for (int i=0; i < AUDIO_BLOCK_SAMPLES/2; i++) {
				*dest1++ = *src++;
    2c4c:	ldrsh.w	r4, [r3, #-8]
    2c50:	strh.w	r4, [r1, #2]!
				*dest3++ = *src++;
    2c54:	ldrsh.w	r4, [r3, #-6]
    2c58:	strh.w	r4, [r6, #2]!
				*dest2++ = *src++;
    2c5c:	ldrsh.w	r4, [r3, #-4]
    2c60:	strh.w	r4, [r0, #2]!
    2c64:	adds	r3, #8
				*dest4++ = *src++;
    2c66:	ldrsh.w	r4, [r3, #-10]
    2c6a:	strh.w	r4, [r2, #2]!
			block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
			dest1 = &(block_ch1->data[offset]);
			dest2 = &(block_ch2->data[offset]);
			dest3 = &(block_ch3->data[offset]);
			dest4 = &(block_ch4->data[offset]);
			for (int i=0; i < AUDIO_BLOCK_SAMPLES/2; i++) {
    2c6e:	cmp	r3, r5
    2c70:	bne.n	2c4c <AudioInputI2SQuad::isr()+0x54>
				*dest4++ = *src++;
			}
		}
	}
	//digitalWriteFast(3, LOW);
}
    2c72:	pop	{r4, r5, r6, r7}
    2c74:	bx	lr
		src = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
		if (update_responsibility) update_all();
	} else {
		// DMA is receiving to the second half of the buffer
		// need to remove data from the first half
		src = (int16_t *)&i2s_rx_buffer[0];
    2c76:	sub.w	r5, r5, #512	; 0x200
    2c7a:	b.n	2c14 <AudioInputI2SQuad::isr()+0x1c>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
    2c7c:	ldr	r3, [pc, #40]	; (2ca8 <AudioInputI2SQuad::isr()+0xb0>)
    2c7e:	movs	r2, #1
    2c80:	str	r2, [r3, #0]
    2c82:	b.n	2c14 <AudioInputI2SQuad::isr()+0x1c>
    2c84:	.word	0x2001c62c
    2c88:	.word	0x4000801f
    2c8c:	.word	0x20016460
    2c90:	.word	0x2001c624
    2c94:	.word	0x2001c638
    2c98:	.word	0x2001c634
    2c9c:	.word	0x2001c620
    2ca0:	.word	0x2001c63c
    2ca4:	.word	0x2001c628
    2ca8:	.word	0xe000e208

00002cac <AudioInputI2SQuad::update()>:
	//digitalWriteFast(3, LOW);
}


void AudioInputI2SQuad::update(void)
{
    2cac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2cb0:	mov	r8, r0
	audio_block_t *new1, *new2, *new3, *new4;
	audio_block_t *out1, *out2, *out3, *out4;

	// allocate 4 new blocks
	new1 = allocate();
    2cb2:	bl	9e40 <AudioStream::allocate()>
    2cb6:	mov	r5, r0
	new2 = allocate();
    2cb8:	bl	9e40 <AudioStream::allocate()>
    2cbc:	mov	r6, r0
	new3 = allocate();
    2cbe:	bl	9e40 <AudioStream::allocate()>
    2cc2:	mov	r7, r0
	new4 = allocate();
    2cc4:	bl	9e40 <AudioStream::allocate()>
    2cc8:	mov	r4, r0
	// but if any fails, allocate none
	if (!new1 || !new2 || !new3 || !new4) {
    2cca:	cbz	r5, 2d24 <AudioInputI2SQuad::update()+0x78>
    2ccc:	cbz	r6, 2d1e <AudioInputI2SQuad::update()+0x72>
    2cce:	cbz	r7, 2d1e <AudioInputI2SQuad::update()+0x72>
    2cd0:	cbz	r0, 2d1e <AudioInputI2SQuad::update()+0x72>
		if (new4) {
			release(new4);
			new4 = NULL;
		}
	}
	__disable_irq();
    2cd2:	cpsid	i
	if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    2cd4:	ldr	r3, [pc, #236]	; (2dc4 <AudioInputI2SQuad::update()+0x118>)
    2cd6:	ldrh	r2, [r3, #0]
    2cd8:	cmp	r2, #127	; 0x7f
    2cda:	bhi.n	2d50 <AudioInputI2SQuad::update()+0xa4>
		release(out2);
		transmit(out3, 2);
		release(out3);
		transmit(out4, 3);
		release(out4);
	} else if (new1 != NULL) {
    2cdc:	cmp	r5, #0
    2cde:	beq.n	2dbc <AudioInputI2SQuad::update()+0x110>
		// the DMA didn't fill blocks, but we allocated blocks
		if (block_ch1 == NULL) {
    2ce0:	ldr	r1, [pc, #228]	; (2dc8 <AudioInputI2SQuad::update()+0x11c>)
    2ce2:	ldr	r2, [r1, #0]
    2ce4:	cbz	r2, 2d04 <AudioInputI2SQuad::update()+0x58>
			block_ch4 = new4;
			block_offset = 0;
			__enable_irq();
		} else {
			// the DMA already has blocks, doesn't need these
			__enable_irq();
    2ce6:	cpsie	i
			release(new1);
    2ce8:	mov	r0, r5
    2cea:	bl	9ee8 <AudioStream::release(audio_block_struct*)>
			release(new2);
    2cee:	mov	r0, r6
    2cf0:	bl	9ee8 <AudioStream::release(audio_block_struct*)>
			release(new3);
    2cf4:	mov	r0, r7
    2cf6:	bl	9ee8 <AudioStream::release(audio_block_struct*)>
			release(new4);
    2cfa:	mov	r0, r4
		// The DMA didn't fill blocks, and we could not allocate
		// memory... the system is likely starving for memory!
		// Sadly, there's nothing we can do.
		__enable_irq();
	}
}
    2cfc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			// the DMA already has blocks, doesn't need these
			__enable_irq();
			release(new1);
			release(new2);
			release(new3);
			release(new4);
    2d00:	b.w	9ee8 <AudioStream::release(audio_block_struct*)>
	} else if (new1 != NULL) {
		// the DMA didn't fill blocks, but we allocated blocks
		if (block_ch1 == NULL) {
			// the DMA doesn't have any blocks to fill, so
			// give it the ones we just allocated
			block_ch1 = new1;
    2d04:	str	r5, [r1, #0]
			block_ch2 = new2;
    2d06:	ldr.w	lr, [pc, #204]	; 2dd4 <AudioInputI2SQuad::update()+0x128>
			block_ch3 = new3;
    2d0a:	ldr	r0, [pc, #192]	; (2dcc <AudioInputI2SQuad::update()+0x120>)
			block_ch4 = new4;
    2d0c:	ldr	r1, [pc, #192]	; (2dd0 <AudioInputI2SQuad::update()+0x124>)
			block_offset = 0;
    2d0e:	strh	r2, [r3, #0]
		// the DMA didn't fill blocks, but we allocated blocks
		if (block_ch1 == NULL) {
			// the DMA doesn't have any blocks to fill, so
			// give it the ones we just allocated
			block_ch1 = new1;
			block_ch2 = new2;
    2d10:	str.w	r6, [lr]
			block_ch3 = new3;
    2d14:	str	r7, [r0, #0]
			block_ch4 = new4;
    2d16:	str	r4, [r1, #0]
			block_offset = 0;
			__enable_irq();
    2d18:	cpsie	i
    2d1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	new3 = allocate();
	new4 = allocate();
	// but if any fails, allocate none
	if (!new1 || !new2 || !new3 || !new4) {
		if (new1) {
			release(new1);
    2d1e:	mov	r0, r5
    2d20:	bl	9ee8 <AudioStream::release(audio_block_struct*)>
			new1 = NULL;
		}
		if (new2) {
    2d24:	cbz	r6, 2d2c <AudioInputI2SQuad::update()+0x80>
			release(new2);
    2d26:	mov	r0, r6
    2d28:	bl	9ee8 <AudioStream::release(audio_block_struct*)>
			new2 = NULL;
		}
		if (new3) {
    2d2c:	cbz	r7, 2d34 <AudioInputI2SQuad::update()+0x88>
			release(new3);
    2d2e:	mov	r0, r7
    2d30:	bl	9ee8 <AudioStream::release(audio_block_struct*)>
			new3 = NULL;
		}
		if (new4) {
    2d34:	cmp	r4, #0
    2d36:	beq.n	2db4 <AudioInputI2SQuad::update()+0x108>
			release(new4);
    2d38:	mov	r0, r4
			new4 = NULL;
    2d3a:	movs	r4, #0
		if (new3) {
			release(new3);
			new3 = NULL;
		}
		if (new4) {
			release(new4);
    2d3c:	bl	9ee8 <AudioStream::release(audio_block_struct*)>
    2d40:	mov	r7, r4
    2d42:	mov	r6, r4
    2d44:	mov	r5, r4
			new4 = NULL;
		}
	}
	__disable_irq();
    2d46:	cpsid	i
	if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    2d48:	ldr	r3, [pc, #120]	; (2dc4 <AudioInputI2SQuad::update()+0x118>)
    2d4a:	ldrh	r2, [r3, #0]
    2d4c:	cmp	r2, #127	; 0x7f
    2d4e:	bls.n	2cdc <AudioInputI2SQuad::update()+0x30>
		// the DMA filled 4 blocks, so grab them and get the
		// 4 new blocks to the DMA, as quickly as possible
		out1 = block_ch1;
    2d50:	ldr	r1, [pc, #116]	; (2dc8 <AudioInputI2SQuad::update()+0x11c>)
		block_ch1 = new1;
		out2 = block_ch2;
    2d52:	ldr	r0, [pc, #128]	; (2dd4 <AudioInputI2SQuad::update()+0x128>)
		block_ch2 = new2;
		out3 = block_ch3;
    2d54:	ldr	r2, [pc, #116]	; (2dcc <AudioInputI2SQuad::update()+0x120>)
	}
	__disable_irq();
	if (block_offset >= AUDIO_BLOCK_SAMPLES) {
		// the DMA filled 4 blocks, so grab them and get the
		// 4 new blocks to the DMA, as quickly as possible
		out1 = block_ch1;
    2d56:	ldr.w	sl, [r1]
		block_ch1 = new1;
    2d5a:	str	r5, [r1, #0]
		out2 = block_ch2;
		block_ch2 = new2;
		out3 = block_ch3;
		block_ch3 = new3;
		out4 = block_ch4;
    2d5c:	ldr	r1, [pc, #112]	; (2dd0 <AudioInputI2SQuad::update()+0x124>)
	if (block_offset >= AUDIO_BLOCK_SAMPLES) {
		// the DMA filled 4 blocks, so grab them and get the
		// 4 new blocks to the DMA, as quickly as possible
		out1 = block_ch1;
		block_ch1 = new1;
		out2 = block_ch2;
    2d5e:	ldr.w	r9, [r0]
		block_ch2 = new2;
    2d62:	str	r6, [r0, #0]
		out3 = block_ch3;
    2d64:	ldr	r6, [r2, #0]
		block_ch3 = new3;
    2d66:	str	r7, [r2, #0]
		out4 = block_ch4;
		block_ch4 = new4;
		block_offset = 0;
    2d68:	movs	r2, #0
		block_ch1 = new1;
		out2 = block_ch2;
		block_ch2 = new2;
		out3 = block_ch3;
		block_ch3 = new3;
		out4 = block_ch4;
    2d6a:	ldr	r5, [r1, #0]
		block_ch4 = new4;
		block_offset = 0;
    2d6c:	strh	r2, [r3, #0]
		out2 = block_ch2;
		block_ch2 = new2;
		out3 = block_ch3;
		block_ch3 = new3;
		out4 = block_ch4;
		block_ch4 = new4;
    2d6e:	str	r4, [r1, #0]
		block_offset = 0;
		__enable_irq();
    2d70:	cpsie	i
		// then transmit the DMA's former blocks
		transmit(out1, 0);
    2d72:	mov	r1, sl
    2d74:	mov	r0, r8
    2d76:	bl	9f3c <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(out1);
    2d7a:	mov	r0, sl
    2d7c:	bl	9ee8 <AudioStream::release(audio_block_struct*)>
		transmit(out2, 1);
    2d80:	mov	r1, r9
    2d82:	mov	r0, r8
    2d84:	movs	r2, #1
    2d86:	bl	9f3c <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(out2);
    2d8a:	mov	r0, r9
    2d8c:	bl	9ee8 <AudioStream::release(audio_block_struct*)>
		transmit(out3, 2);
    2d90:	mov	r1, r6
    2d92:	mov	r0, r8
    2d94:	movs	r2, #2
    2d96:	bl	9f3c <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(out3);
    2d9a:	mov	r0, r6
    2d9c:	bl	9ee8 <AudioStream::release(audio_block_struct*)>
		transmit(out4, 3);
    2da0:	mov	r0, r8
    2da2:	mov	r1, r5
    2da4:	movs	r2, #3
    2da6:	bl	9f3c <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(out4);
    2daa:	mov	r0, r5
		// The DMA didn't fill blocks, and we could not allocate
		// memory... the system is likely starving for memory!
		// Sadly, there's nothing we can do.
		__enable_irq();
	}
}
    2dac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		transmit(out2, 1);
		release(out2);
		transmit(out3, 2);
		release(out3);
		transmit(out4, 3);
		release(out4);
    2db0:	b.w	9ee8 <AudioStream::release(audio_block_struct*)>
    2db4:	mov	r7, r4
    2db6:	mov	r6, r4
    2db8:	mov	r5, r4
    2dba:	b.n	2cd2 <AudioInputI2SQuad::update()+0x26>
		}
	} else {
		// The DMA didn't fill blocks, and we could not allocate
		// memory... the system is likely starving for memory!
		// Sadly, there's nothing we can do.
		__enable_irq();
    2dbc:	cpsie	i
    2dbe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2dc2:	nop
    2dc4:	.word	0x2001c634
    2dc8:	.word	0x2001c638
    2dcc:	.word	0x2001c620
    2dd0:	.word	0x2001c628
    2dd4:	.word	0x2001c63c

00002dd8 <AudioInputI2SQuad::begin()>:
DMAChannel AudioInputI2SQuad::dma(false);

#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1062__)

void AudioInputI2SQuad::begin(void)
{
    2dd8:	push	{r3, r4, r5, r6, r7, lr}
	dma.begin(true); // Allocate the DMA channel first
    2dda:	ldr	r4, [pc, #164]	; (2e80 <AudioInputI2SQuad::begin()+0xa8>)

#if defined(KINETISK)
	// TODO: should we set & clear the I2S_RCSR_SR bit here?
	AudioOutputI2SQuad::config_i2s();

	CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
    2ddc:	ldr	r5, [pc, #164]	; (2e84 <AudioInputI2SQuad::begin()+0xac>)
	dma.TCD->NBYTES_MLNO = 4;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 4;
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
    2dde:	ldr	r6, [pc, #168]	; (2e88 <AudioInputI2SQuad::begin()+0xb0>)

#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1062__)

void AudioInputI2SQuad::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first
    2de0:	mov	r0, r4
    2de2:	movs	r1, #1
    2de4:	bl	98f0 <DMAChannel::begin(bool)>

#if defined(KINETISK)
	// TODO: should we set & clear the I2S_RCSR_SR bit here?
	AudioOutputI2SQuad::config_i2s();
    2de8:	bl	2ee0 <AudioOutputI2SQuad::config_i2s()>

	CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
#if defined(__MK20DX256__)
	CORE_PIN30_CONFIG = PORT_PCR_MUX(4); // pin 30, PTC11, I2S0_RXD1
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11, I2S0_RXD1
    2dec:	ldr	r0, [pc, #156]	; (2e8c <AudioInputI2SQuad::begin()+0xb4>)
#endif

#if defined(KINETISK)
	dma.TCD->SADDR = &I2S0_RDR0;
    2dee:	ldr	r2, [pc, #160]	; (2e90 <AudioInputI2SQuad::begin()+0xb8>)
	dma.TCD->SOFF = 4;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_SMOD(3) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 4;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
    2df0:	ldr	r1, [pc, #160]	; (2e94 <AudioInputI2SQuad::begin()+0xbc>)

#if defined(KINETISK)
	// TODO: should we set & clear the I2S_RCSR_SR bit here?
	AudioOutputI2SQuad::config_i2s();

	CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
    2df2:	mov.w	r3, #1024	; 0x400
    2df6:	str	r3, [r5, #0]
#if defined(__MK20DX256__)
	CORE_PIN30_CONFIG = PORT_PCR_MUX(4); // pin 30, PTC11, I2S0_RXD1
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11, I2S0_RXD1
    2df8:	str	r3, [r0, #0]
#endif

#if defined(KINETISK)
	dma.TCD->SADDR = &I2S0_RDR0;
    2dfa:	ldr	r3, [r4, #0]
	dma.TCD->SOFF = 4;
    2dfc:	movs	r5, #4
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	CORE_PIN38_CONFIG = PORT_PCR_MUX(4); // pin 38, PTC11, I2S0_RXD1
#endif

#if defined(KINETISK)
	dma.TCD->SADDR = &I2S0_RDR0;
    2dfe:	str	r2, [r3, #0]
	dma.TCD->SOFF = 4;
    2e00:	strh	r5, [r3, #4]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    2e02:	ldrb	r2, [r4, #4]
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_SMOD(3) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 4;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
    2e04:	str	r1, [r3, #16]
    2e06:	add.w	r2, r2, #1073741824	; 0x40000000
    2e0a:	add.w	r2, r2, #135168	; 0x21000
#endif

#if defined(KINETISK)
	dma.TCD->SADDR = &I2S0_RDR0;
	dma.TCD->SOFF = 4;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_SMOD(3) | DMA_TCD_ATTR_DSIZE(1);
    2e0e:	movw	r7, #6401	; 0x1901
	dma.TCD->NBYTES_MLNO = 4;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
    2e12:	movs	r1, #2
#endif

#if defined(KINETISK)
	dma.TCD->SADDR = &I2S0_RDR0;
	dma.TCD->SOFF = 4;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_SMOD(3) | DMA_TCD_ATTR_DSIZE(1);
    2e14:	strh	r7, [r3, #6]
	dma.TCD->NBYTES_MLNO = 4;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
    2e16:	strh	r1, [r3, #20]
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 4;
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
    2e18:	str	r6, [r3, #24]
#if defined(KINETISK)
	dma.TCD->SADDR = &I2S0_RDR0;
	dma.TCD->SOFF = 4;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_SMOD(3) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 4;
	dma.TCD->SLAST = 0;
    2e1a:	movs	r1, #0
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 4;
    2e1c:	mov.w	r0, #256	; 0x100
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer) / 4;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    2e20:	movs	r7, #6
		*mux = 0;
		*mux = (source & 63) | DMAMUX_ENABLE;
    2e22:	movs	r6, #140	; 0x8c
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_SMOD(3) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 4;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 4;
    2e24:	strh	r0, [r3, #22]

#if defined(KINETISK)
	dma.TCD->SADDR = &I2S0_RDR0;
	dma.TCD->SOFF = 4;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_SMOD(3) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 4;
    2e26:	str	r5, [r3, #8]
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 4;
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer) / 4;
    2e28:	strh	r0, [r3, #30]
#if defined(KINETISK)
	dma.TCD->SADDR = &I2S0_RDR0;
	dma.TCD->SOFF = 4;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_SMOD(3) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 4;
	dma.TCD->SLAST = 0;
    2e2a:	str	r1, [r3, #12]
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 4;
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer) / 4;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    2e2c:	strh	r7, [r3, #28]

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
    2e2e:	strb	r1, [r2, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
    2e30:	strb	r6, [r2, #0]
#endif
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_RX);
	update_responsibility = update_setup();
    2e32:	bl	a06c <AudioStream::update_setup()>
    2e36:	ldr	r1, [pc, #96]	; (2e98 <AudioInputI2SQuad::begin()+0xc0>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    2e38:	ldr	r3, [pc, #96]	; (2e9c <AudioInputI2SQuad::begin()+0xc4>)
    2e3a:	ldrb	r2, [r4, #4]
	dma.enable();

	I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
    2e3c:	ldr	r7, [pc, #96]	; (2ea0 <AudioInputI2SQuad::begin()+0xc8>)
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer) / 4;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
#endif
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_RX);
	update_responsibility = update_setup();
    2e3e:	strb	r0, [r1, #0]
    2e40:	strb	r2, [r3, #0]
	dma.enable();

	I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
    2e42:	ldr	r1, [r7, #0]
    2e44:	ldrb	r2, [r4, #4]
	I2S0_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE; // TX clock enable, because sync'd to TX
    2e46:	ldr	r4, [pc, #92]	; (2ea4 <AudioInputI2SQuad::begin()+0xcc>)

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    2e48:	ldr	r5, [pc, #92]	; (2ea8 <AudioInputI2SQuad::begin()+0xd0>)
    2e4a:	ldr	r6, [pc, #96]	; (2eac <AudioInputI2SQuad::begin()+0xd4>)
#endif
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_RX);
	update_responsibility = update_setup();
	dma.enable();

	I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
    2e4c:	orr.w	r1, r1, #2449473536	; 0x92000000
    2e50:	orr.w	r1, r1, #1
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    2e54:	asrs	r3, r2, #5
    2e56:	str	r1, [r7, #0]
    2e58:	lsls	r3, r3, #2
	I2S0_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE; // TX clock enable, because sync'd to TX
    2e5a:	ldr	r0, [r4, #0]
    2e5c:	add.w	r3, r3, #3758096384	; 0xe0000000

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    2e60:	add.w	r7, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    2e64:	add.w	r3, r3, #57600	; 0xe100
    2e68:	and.w	r2, r2, #31
    2e6c:	movs	r1, #1
    2e6e:	orr.w	r0, r0, #2415919104	; 0x90000000
    2e72:	lsl.w	r2, r1, r2
    2e76:	str	r0, [r4, #0]

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    2e78:	str.w	r6, [r5, r7, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    2e7c:	str	r2, [r3, #0]
    2e7e:	pop	{r3, r4, r5, r6, r7, pc}
    2e80:	.word	0x2001c62c
    2e84:	.word	0x4004b014
    2e88:	.word	0xfffffc00
    2e8c:	.word	0x4004b02c
    2e90:	.word	0x4002f0a0
    2e94:	.word	0x20016260
    2e98:	.word	0x2001c624
    2e9c:	.word	0x4000801b
    2ea0:	.word	0x4002f080
    2ea4:	.word	0x4002f000
    2ea8:	.word	0x20016800
    2eac:	.word	0x00002bf9

00002eb0 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
    2eb0:	ldr	r2, [pc, #8]	; (2ebc <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    2eb2:	ldr	r1, [pc, #12]	; (2ec0 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    2eb4:	ldr	r0, [pc, #12]	; (2ec4 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    2eb6:	b.w	a914 <__aeabi_atexit>
    2eba:	nop
    2ebc:	.word	0x20016d30
    2ec0:	.word	0x00002afd
    2ec4:	.word	0x2001c62c

00002ec8 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE>:
audio_block_t * AudioOutputAnalogStereo::block_left_2nd = NULL;
audio_block_t * AudioOutputAnalogStereo::block_right_1st = NULL;
audio_block_t * AudioOutputAnalogStereo::block_right_2nd = NULL;
audio_block_t AudioOutputAnalogStereo::block_silent;
bool AudioOutputAnalogStereo::update_responsibility = false;
DMAChannel AudioOutputAnalogStereo::dma(false);
    2ec8:	ldr	r2, [pc, #8]	; (2ed4 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0xc>)
    2eca:	ldr	r1, [pc, #12]	; (2ed8 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0x10>)
    2ecc:	ldr	r0, [pc, #12]	; (2edc <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0x14>)
    2ece:	b.w	a914 <__aeabi_atexit>
    2ed2:	nop
    2ed4:	.word	0x20016d30
    2ed8:	.word	0x00002afd
    2edc:	.word	0x2001c640

00002ee0 <AudioOutputI2SQuad::config_i2s()>:
#endif
#endif

void AudioOutputI2SQuad::config_i2s(void)
{
	SIM_SCGC6 |= SIM_SCGC6_I2S;
    2ee0:	ldr	r3, [pc, #160]	; (2f84 <AudioOutputI2SQuad::config_i2s()+0xa4>)
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    2ee2:	ldr	r1, [pc, #164]	; (2f88 <AudioOutputI2SQuad::config_i2s()+0xa8>)
#endif
#endif

void AudioOutputI2SQuad::config_i2s(void)
{
	SIM_SCGC6 |= SIM_SCGC6_I2S;
    2ee4:	ldr	r2, [r3, #0]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;

	// if either transmitter or receiver is enabled, do nothing
	if (I2S0_TCSR & I2S_TCSR_TE) return;
    2ee6:	ldr	r0, [pc, #164]	; (2f8c <AudioOutputI2SQuad::config_i2s()+0xac>)
#endif
#endif

void AudioOutputI2SQuad::config_i2s(void)
{
	SIM_SCGC6 |= SIM_SCGC6_I2S;
    2ee8:	orr.w	r2, r2, #32768	; 0x8000
    2eec:	str	r2, [r3, #0]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    2eee:	ldr	r2, [r1, #0]
    2ef0:	orr.w	r2, r2, #2
    2ef4:	str	r2, [r1, #0]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    2ef6:	ldr	r2, [r3, #0]
    2ef8:	orr.w	r2, r2, #2
    2efc:	str	r2, [r3, #0]

	// if either transmitter or receiver is enabled, do nothing
	if (I2S0_TCSR & I2S_TCSR_TE) return;
    2efe:	ldr	r3, [r0, #0]
    2f00:	cmp	r3, #0
    2f02:	blt.n	2f80 <AudioOutputI2SQuad::config_i2s()+0xa0>
	if (I2S0_RCSR & I2S_RCSR_RE) return;
    2f04:	ldr	r3, [pc, #136]	; (2f90 <AudioOutputI2SQuad::config_i2s()+0xb0>)
    2f06:	ldr	r3, [r3, #0]
    2f08:	cmp	r3, #0
    2f0a:	blt.n	2f80 <AudioOutputI2SQuad::config_i2s()+0xa0>

	// enable MCLK output
	I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
    2f0c:	ldr	r2, [pc, #132]	; (2f94 <AudioOutputI2SQuad::config_i2s()+0xb4>)
    2f0e:	mov.w	r3, #1124073472	; 0x43000000
    2f12:	str	r3, [r2, #0]
	while (I2S0_MCR & I2S_MCR_DUF) ;
    2f14:	ldr	r3, [r2, #0]
    2f16:	cmp	r3, #0
    2f18:	blt.n	2f14 <AudioOutputI2SQuad::config_i2s()+0x34>
  #define MCLK_SRC  0  // system clock
#endif
#endif

void AudioOutputI2SQuad::config_i2s(void)
{
    2f1a:	push	{r4, r5, r6, r7, lr}
	if (I2S0_RCSR & I2S_RCSR_RE) return;

	// enable MCLK output
	I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
	while (I2S0_MCR & I2S_MCR_DUF) ;
	I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
    2f1c:	ldr	r4, [pc, #120]	; (2f98 <AudioOutputI2SQuad::config_i2s()+0xb8>)

	// configure transmitter
	I2S0_TMR = 0;
    2f1e:	ldr	r0, [pc, #124]	; (2f9c <AudioOutputI2SQuad::config_i2s()+0xbc>)
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
    2f20:	ldr.w	lr, [pc, #172]	; 2fd0 <AudioOutputI2SQuad::config_i2s()+0xf0>
	I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
		| I2S_TCR2_BCD | I2S_TCR2_DIV(3);
    2f24:	ldr	r1, [pc, #120]	; (2fa0 <AudioOutputI2SQuad::config_i2s()+0xc0>)
	I2S0_TCR3 = I2S_TCR3_TCE_2CH;
    2f26:	ldr	r3, [pc, #124]	; (2fa4 <AudioOutputI2SQuad::config_i2s()+0xc4>)
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(15) | I2S_TCR4_MF
		| I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
    2f28:	ldr	r2, [pc, #124]	; (2fa8 <AudioOutputI2SQuad::config_i2s()+0xc8>)
	I2S0_TCR5 = I2S_TCR5_WNW(15) | I2S_TCR5_W0W(15) | I2S_TCR5_FBT(15);
    2f2a:	ldr	r7, [pc, #128]	; (2fac <AudioOutputI2SQuad::config_i2s()+0xcc>)

	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
    2f2c:	ldr	r6, [pc, #128]	; (2fb0 <AudioOutputI2SQuad::config_i2s()+0xd0>)
	I2S0_RCR1 = I2S_RCR1_RFW(1);
    2f2e:	ldr	r5, [pc, #132]	; (2fb4 <AudioOutputI2SQuad::config_i2s()+0xd4>)
	if (I2S0_RCSR & I2S_RCSR_RE) return;

	// enable MCLK output
	I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
	while (I2S0_MCR & I2S_MCR_DUF) ;
	I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
    2f30:	movw	ip, #4112	; 0x1010
    2f34:	str.w	ip, [r4]

	// configure transmitter
	I2S0_TMR = 0;
    2f38:	movs	r4, #0
    2f3a:	str	r4, [r0, #0]
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
    2f3c:	movs	r0, #1
    2f3e:	str.w	r0, [lr]
	I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
		| I2S_TCR2_BCD | I2S_TCR2_DIV(3);
    2f42:	ldr.w	lr, [pc, #144]	; 2fd4 <AudioOutputI2SQuad::config_i2s()+0xf4>
    2f46:	str.w	lr, [r1]
	I2S0_TCR3 = I2S_TCR3_TCE_2CH;
    2f4a:	mov.w	r1, #196608	; 0x30000
    2f4e:	str	r1, [r3, #0]
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(15) | I2S_TCR4_MF
		| I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
    2f50:	ldr	r3, [pc, #100]	; (2fb8 <AudioOutputI2SQuad::config_i2s()+0xd8>)
    2f52:	str	r3, [r2, #0]

	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1);
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(3);
    2f54:	ldr.w	lr, [pc, #128]	; 2fd8 <AudioOutputI2SQuad::config_i2s()+0xf8>
	I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
		| I2S_TCR2_BCD | I2S_TCR2_DIV(3);
	I2S0_TCR3 = I2S_TCR3_TCE_2CH;
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(15) | I2S_TCR4_MF
		| I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
	I2S0_TCR5 = I2S_TCR5_WNW(15) | I2S_TCR5_W0W(15) | I2S_TCR5_FBT(15);
    2f58:	ldr	r2, [pc, #96]	; (2fbc <AudioOutputI2SQuad::config_i2s()+0xdc>)
    2f5a:	str	r2, [r7, #0]

	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
    2f5c:	str	r4, [r6, #0]
	I2S0_RCR1 = I2S_RCR1_RFW(1);
    2f5e:	str	r0, [r5, #0]
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(3);
    2f60:	ldr	r0, [pc, #92]	; (2fc0 <AudioOutputI2SQuad::config_i2s()+0xe0>)
    2f62:	str.w	r0, [lr]
	I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(15) | I2S_RCR4_MF
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S0_RCR5 = I2S_RCR5_WNW(15) | I2S_RCR5_W0W(15) | I2S_RCR5_FBT(15);

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
    2f66:	ldr	r4, [pc, #92]	; (2fc4 <AudioOutputI2SQuad::config_i2s()+0xe4>)
	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1);
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(3);
	I2S0_RCR3 = I2S_RCR3_RCE_2CH;
    2f68:	str	r1, [r7, #120]	; 0x78
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S0_RCR5 = I2S_RCR5_WNW(15) | I2S_RCR5_W0W(15) | I2S_RCR5_FBT(15);

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
    2f6a:	ldr	r0, [pc, #92]	; (2fc8 <AudioOutputI2SQuad::config_i2s()+0xe8>)
	CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
    2f6c:	ldr	r1, [pc, #92]	; (2fcc <AudioOutputI2SQuad::config_i2s()+0xec>)
	I2S0_RCR1 = I2S_RCR1_RFW(1);
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(3);
	I2S0_RCR3 = I2S_RCR3_RCE_2CH;
	I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(15) | I2S_RCR4_MF
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
    2f6e:	str.w	r3, [r6, #-80]
	I2S0_RCR5 = I2S_RCR5_WNW(15) | I2S_RCR5_W0W(15) | I2S_RCR5_FBT(15);

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
    2f72:	mov.w	r3, #1536	; 0x600
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(3);
	I2S0_RCR3 = I2S_RCR3_RCE_2CH;
	I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(15) | I2S_RCR4_MF
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S0_RCR5 = I2S_RCR5_WNW(15) | I2S_RCR5_W0W(15) | I2S_RCR5_FBT(15);
    2f76:	str	r2, [r5, #16]

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
    2f78:	str	r3, [r4, #0]
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
    2f7a:	str	r3, [r0, #0]
	CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
    2f7c:	str	r3, [r1, #0]
    2f7e:	pop	{r4, r5, r6, r7, pc}
    2f80:	bx	lr
    2f82:	nop
    2f84:	.word	0x4004803c
    2f88:	.word	0x40048040
    2f8c:	.word	0x4002f000
    2f90:	.word	0x4002f080
    2f94:	.word	0x4002f100
    2f98:	.word	0x4002f104
    2f9c:	.word	0x4002f060
    2fa0:	.word	0x4002f008
    2fa4:	.word	0x4002f00c
    2fa8:	.word	0x4002f010
    2fac:	.word	0x4002f014
    2fb0:	.word	0x4002f0e0
    2fb4:	.word	0x4002f084
    2fb8:	.word	0x00010f1b
    2fbc:	.word	0x0f0f0f00
    2fc0:	.word	0x47000003
    2fc4:	.word	0x4004b008
    2fc8:	.word	0x4004b00c
    2fcc:	.word	0x4004b018
    2fd0:	.word	0x4002f004
    2fd4:	.word	0x07000003
    2fd8:	.word	0x4002f088

00002fdc <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch2_offset = 0;
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    2fdc:	ldr	r2, [pc, #8]	; (2fe8 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    2fde:	ldr	r1, [pc, #12]	; (2fec <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    2fe0:	ldr	r0, [pc, #12]	; (2ff0 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    2fe2:	b.w	a914 <__aeabi_atexit>
    2fe6:	nop
    2fe8:	.word	0x20016d30
    2fec:	.word	0x00002afd
    2ff0:	.word	0x2001c648

00002ff4 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE>:
bool AudioOutputADAT::update_responsibility = false;
//uint32_t  AudioOutputADAT::vucp = VUCP_VALID;

DMAMEM __attribute__((aligned(32))) static uint32_t ADAT_tx_buffer[AUDIO_BLOCK_SAMPLES * 8]; //4 KB, AUDIO_BLOCK_SAMPLES is usually 128

DMAChannel AudioOutputADAT::dma(false);
    2ff4:	ldr	r2, [pc, #8]	; (3000 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0xc>)
    2ff6:	ldr	r1, [pc, #12]	; (3004 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x10>)
    2ff8:	ldr	r0, [pc, #12]	; (3008 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x14>)
    2ffa:	b.w	a914 <__aeabi_atexit>
    2ffe:	nop
    3000:	.word	0x20016d30
    3004:	.word	0x00002afd
    3008:	.word	0x2001c650

0000300c <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
audio_block_t * AudioInputTDM::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM::update_responsibility = false;
DMAChannel AudioInputTDM::dma(false);
    300c:	ldr	r2, [pc, #8]	; (3018 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    300e:	ldr	r1, [pc, #12]	; (301c <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    3010:	ldr	r0, [pc, #12]	; (3020 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    3012:	b.w	a914 <__aeabi_atexit>
    3016:	nop
    3018:	.word	0x20016d30
    301c:	.word	0x00002afd
    3020:	.word	0x2001c658

00003024 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
audio_block_t * AudioInputI2SHex::block_ch4 = NULL;
audio_block_t * AudioInputI2SHex::block_ch5 = NULL;
audio_block_t * AudioInputI2SHex::block_ch6 = NULL;
uint16_t AudioInputI2SHex::block_offset = 0;
bool AudioInputI2SHex::update_responsibility = false;
DMAChannel AudioInputI2SHex::dma(false);
    3024:	ldr	r2, [pc, #8]	; (3030 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
    3026:	ldr	r1, [pc, #12]	; (3034 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
    3028:	ldr	r0, [pc, #12]	; (3038 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
    302a:	b.w	a914 <__aeabi_atexit>
    302e:	nop
    3030:	.word	0x20016d30
    3034:	.word	0x00002afd
    3038:	.word	0x2001c660

0000303c <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE>:

DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM::block_left = NULL;
bool AudioInputPDM::update_responsibility = false;
DMAChannel AudioInputPDM::dma(false);
    303c:	ldr	r2, [pc, #8]	; (3048 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0xc>)
    303e:	ldr	r1, [pc, #12]	; (304c <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x10>)
    3040:	ldr	r0, [pc, #12]	; (3050 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x14>)
    3042:	b.w	a914 <__aeabi_atexit>
    3046:	nop
    3048:	.word	0x20016d30
    304c:	.word	0x00002afd
    3050:	.word	0x2001c668

00003054 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    3054:	ldr	r2, [pc, #8]	; (3060 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    3056:	ldr	r1, [pc, #12]	; (3064 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    3058:	ldr	r0, [pc, #12]	; (3068 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    305a:	b.w	a914 <__aeabi_atexit>
    305e:	nop
    3060:	.word	0x20016d30
    3064:	.word	0x00002afd
    3068:	.word	0x2001c670

0000306c <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    306c:	ldrb.w	r2, [r0, #57]	; 0x39
    3070:	ldrb.w	r0, [r0, #56]	; 0x38
	}
    3074:	subs	r0, r2, r0
    3076:	bx	lr

00003078 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    3078:	ldrb.w	r3, [r0, #56]	; 0x38
    307c:	ldrb.w	r2, [r0, #57]	; 0x39
    3080:	cmp	r2, r3
    3082:	bls.n	3090 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    3084:	adds	r2, r3, #1
    3086:	add	r3, r0
    3088:	strb.w	r2, [r0, #56]	; 0x38
    308c:	ldrb	r0, [r3, #24]
    308e:	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    3090:	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
    3094:	bx	lr
    3096:	nop

00003098 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    3098:	ldrb.w	r3, [r0, #56]	; 0x38
    309c:	ldrb.w	r2, [r0, #57]	; 0x39
    30a0:	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    30a2:	itte	hi
    30a4:	addhi	r3, r3, r0
    30a6:	ldrbhi	r0, [r3, #24]
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    30a8:	movls.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
    30ac:	bx	lr
    30ae:	nop

000030b0 <TwoWire::flush()>:
	virtual void flush(void) {
    30b0:	bx	lr
    30b2:	nop

000030b4 <TwoWire::write(unsigned char const*, unsigned int)>:
	}
	return 0;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    30b4:	push	{r3, r4, r5, lr}
    30b6:	mov	r5, r0
	if (transmitting || slave_mode) {
    30b8:	ldrh.w	r0, [r0, #94]	; 0x5e
    30bc:	cbz	r0, 30e4 <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    30be:	ldrb.w	r3, [r5, #93]	; 0x5d
    30c2:	mov	r4, r2
    30c4:	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
    30c8:	cmp	r4, r2
    30ca:	bhi.n	30e6 <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    30cc:	add.w	r0, r5, #59	; 0x3b
    30d0:	add	r0, r3
    30d2:	mov	r2, r4
    30d4:	bl	81f4 <memcpy>
		txBufferLength += quantity;
    30d8:	ldrb.w	r3, [r5, #93]	; 0x5d
    30dc:	add	r3, r4
    30de:	strb.w	r3, [r5, #93]	; 0x5d
    30e2:	mov	r0, r4
		return quantity;
	}
	return 0;
}
    30e4:	pop	{r3, r4, r5, pc}
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    30e6:	movs	r0, #1
    30e8:	mov	r4, r2
    30ea:	strb	r0, [r5, #4]
    30ec:	b.n	30cc <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    30ee:	nop

000030f0 <TwoWire::write(unsigned char)>:
//  I2C0_C2      // I2C Control Register 2
//  I2C0_FLT     // I2C Programmable Input Glitch Filter register

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    30f0:	ldrh.w	r3, [r0, #94]	; 0x5e
    30f4:	cbz	r3, 3112 <TwoWire::write(unsigned char)+0x22>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    30f6:	ldrb.w	r3, [r0, #93]	; 0x5d
    30fa:	cmp	r3, #32
    30fc:	bhi.n	310e <TwoWire::write(unsigned char)+0x1e>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    30fe:	adds	r2, r0, r3
    3100:	adds	r3, #1
    3102:	strb.w	r3, [r0, #93]	; 0x5d
		return 1;
    3106:	movs	r0, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    3108:	strb.w	r1, [r2, #59]	; 0x3b
    310c:	bx	lr
    310e:	movs	r3, #1
    3110:	strb	r3, [r0, #4]
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
    3112:	movs	r0, #0
    3114:	bx	lr
    3116:	nop

00003118 <TwoWire::isr()>:
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    3118:	push	{r3, r4, r5, lr}
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    311a:	ldr	r2, [r0, #16]
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    311c:	ldrb	r4, [r2, #3]
    311e:	uxtb	r4, r4
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    3120:	lsls	r1, r4, #27
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    3122:	mov	r5, r0
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    3124:	bpl.n	3170 <TwoWire::isr()+0x58>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    3126:	movs	r3, #16
    3128:	strb	r3, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    312a:	lsls	r3, r4, #25
    312c:	bpl.n	316e <TwoWire::isr()+0x56>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    312e:	and.w	r4, r4, #4
    3132:	and.w	r3, r4, #255	; 0xff
    3136:	cmp	r4, #0
    3138:	beq.n	31f0 <TwoWire::isr()+0xd8>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    313a:	ldr	r1, [pc, #264]	; (3244 <TwoWire::isr()+0x12c>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    313c:	ldr	r2, [r5, #100]	; 0x64
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    313e:	movs	r3, #0
    3140:	strb	r3, [r1, #0]
			txBufferLength = 0;
    3142:	strb.w	r3, [r5, #93]	; 0x5d
			if (user_onRequest != NULL) {
    3146:	cmp	r2, #0
    3148:	beq.n	3218 <TwoWire::isr()+0x100>
				user_onRequest();
    314a:	blx	r2
			}
			if (txBufferLength == 0) {
    314c:	ldrb.w	r3, [r5, #93]	; 0x5d
    3150:	cmp	r3, #0
    3152:	beq.n	3218 <TwoWire::isr()+0x100>
    3154:	ldr	r3, [r5, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    3156:	movs	r2, #208	; 0xd0
    3158:	strb	r2, [r3, #2]
    315a:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
    315c:	ldrb.w	r2, [r5, #59]	; 0x3b
    3160:	strb	r2, [r3, #4]
    3162:	ldr	r3, [r5, #16]
			txBufferIndex = 1;
    3164:	movs	r2, #1
    3166:	strb.w	r2, [r5, #92]	; 0x5c
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    316a:	movs	r2, #2
    316c:	strb	r2, [r3, #3]
    316e:	pop	{r3, r4, r5, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    3170:	and.w	r3, r4, #64	; 0x40
    3174:	and.w	r0, r3, #255	; 0xff
    3178:	cmp	r3, #0
    317a:	bne.n	312e <TwoWire::isr()+0x16>
		}
		port().S = I2C_S_IICIF;
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
    317c:	ldrb	r3, [r2, #6]
    317e:	uxtb	r3, r3
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
    3180:	and.w	r1, r3, #96	; 0x60
    3184:	cmp	r1, #96	; 0x60
    3186:	beq.n	3226 <TwoWire::isr()+0x10e>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    3188:	ldrb	r3, [r2, #2]
	if (c1 & I2C_C1_TX) {
    318a:	and.w	r3, r3, #16
    318e:	and.w	r1, r3, #255	; 0xff
    3192:	cbz	r3, 31c2 <TwoWire::isr()+0xaa>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    3194:	ands.w	r4, r4, #1
    3198:	bne.n	320a <TwoWire::isr()+0xf2>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    319a:	ldrb.w	r3, [r5, #92]	; 0x5c
    319e:	ldrb.w	r1, [r5, #93]	; 0x5d
    31a2:	cmp	r1, r3
    31a4:	bls.n	323e <TwoWire::isr()+0x126>
				port().D = txBuffer[txBufferIndex++];
    31a6:	adds	r1, r3, #1
    31a8:	add	r3, r5
    31aa:	strb.w	r1, [r5, #92]	; 0x5c
    31ae:	ldrb.w	r3, [r3, #59]	; 0x3b
    31b2:	strb	r3, [r2, #4]
    31b4:	ldr	r3, [r5, #16]
			} else {
				port().D = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    31b6:	movs	r2, #208	; 0xd0
    31b8:	strb	r2, [r3, #2]
    31ba:	ldr	r3, [r5, #16]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    31bc:	movs	r2, #2
    31be:	strb	r2, [r3, #3]
    31c0:	b.n	316e <TwoWire::isr()+0x56>
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    31c2:	strb.w	r1, [r5, #96]	; 0x60
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    31c6:	ldrb	r3, [r2, #6]
    31c8:	orr.w	r3, r3, #32
    31cc:	strb	r3, [r2, #6]
    31ce:	ldr	r3, [r5, #16]
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    31d0:	ldrb.w	r1, [r5, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    31d4:	ldrb	r2, [r3, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    31d6:	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    31d8:	uxtb	r2, r2
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    31da:	bhi.n	316a <TwoWire::isr()+0x52>
    31dc:	ldr	r0, [pc, #100]	; (3244 <TwoWire::isr()+0x12c>)
    31de:	ldrb	r0, [r0, #0]
    31e0:	cmp	r0, #0
    31e2:	beq.n	316a <TwoWire::isr()+0x52>
			rxBuffer[rxBufferLength++] = data;
    31e4:	adds	r0, r5, r1
    31e6:	adds	r1, #1
    31e8:	strb.w	r1, [r5, #57]	; 0x39
    31ec:	strb	r2, [r0, #24]
    31ee:	b.n	316a <TwoWire::isr()+0x52>
    31f0:	ldr	r2, [r5, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    31f2:	strb.w	r3, [r5, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    31f6:	movs	r3, #192	; 0xc0
    31f8:	strb	r3, [r2, #2]
    31fa:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    31fc:	ldr	r2, [pc, #68]	; (3244 <TwoWire::isr()+0x12c>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    31fe:	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    3200:	movs	r1, #1
    3202:	strb	r1, [r2, #0]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    3204:	movs	r2, #2
    3206:	strb	r2, [r3, #3]
    3208:	b.n	316e <TwoWire::isr()+0x56>
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    320a:	movs	r3, #192	; 0xc0
    320c:	strb	r3, [r2, #2]
    320e:	ldr	r3, [r5, #16]
			data = port().D;
    3210:	ldrb	r2, [r3, #4]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    3212:	movs	r2, #2
    3214:	strb	r2, [r3, #3]
    3216:	b.n	316e <TwoWire::isr()+0x56>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    3218:	movs	r2, #1
				txBuffer[0] = 0;
    321a:	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    321c:	strb.w	r2, [r5, #93]	; 0x5d
				txBuffer[0] = 0;
    3220:	strb.w	r3, [r5, #59]	; 0x3b
    3224:	b.n	3154 <TwoWire::isr()+0x3c>
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
		port().FLT = c1 & ~I2C_FLT_STOPIE;
    3226:	and.w	r3, r3, #223	; 0xdf
    322a:	strb	r3, [r2, #6]
		if (user_onReceive != NULL) {
    322c:	ldr	r3, [r5, #104]	; 0x68
    322e:	cbz	r3, 323a <TwoWire::isr()+0x122>
			rxBufferIndex = 0;
    3230:	strb.w	r0, [r5, #56]	; 0x38
			user_onReceive(rxBufferLength);
    3234:	ldrb.w	r0, [r5, #57]	; 0x39
    3238:	blx	r3
    323a:	ldr	r2, [r5, #16]
    323c:	b.n	3188 <TwoWire::isr()+0x70>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
				port().D = txBuffer[txBufferIndex++];
			} else {
				port().D = 0;
    323e:	strb	r4, [r2, #4]
    3240:	b.n	31b4 <TwoWire::isr()+0x9c>
    3242:	nop
    3244:	.word	0x2001c678

00003248 <i2c0_isr>:
#define MAKE_CONST(x) (__builtin_constant_p(x) ? (x) : (x))

#ifdef WIRE_IMPLEMENT_WIRE
constexpr uintptr_t i2c0_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C0));
TwoWire Wire(i2c0_addr, TwoWire::i2c0_hardware);
void i2c0_isr(void) { Wire.isr(); }
    3248:	ldr	r0, [pc, #4]	; (3250 <i2c0_isr+0x8>)
    324a:	b.w	3118 <TwoWire::isr()>
    324e:	nop
    3250:	.word	0x20016e3c

00003254 <i2c1_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE1
constexpr uintptr_t i2c1_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C1));
TwoWire Wire1(i2c1_addr, TwoWire::i2c1_hardware);
void i2c1_isr(void) { Wire1.isr(); }
    3254:	ldr	r0, [pc, #4]	; (325c <i2c1_isr+0x8>)
    3256:	b.w	3118 <TwoWire::isr()>
    325a:	nop
    325c:	.word	0x20016ea8

00003260 <i2c2_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE2
constexpr uintptr_t i2c2_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C2));
TwoWire Wire2(i2c2_addr, TwoWire::i2c2_hardware);
void i2c2_isr(void) { Wire2.isr(); }
    3260:	ldr	r0, [pc, #4]	; (3268 <i2c2_isr+0x8>)
    3262:	b.w	3118 <TwoWire::isr()>
    3266:	nop
    3268:	.word	0x20016dd0

0000326c <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : type_(0) {}
    326c:	ldr	r3, [pc, #24]	; (3288 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x1c>)
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    326e:	ldr	r2, [pc, #28]	; (328c <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x20>)
    3270:	str	r2, [r3, #44]	; 0x2c
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    3272:	movs	r1, #2
    3274:	movs	r2, #0
    3276:	str	r1, [r3, #4]
    3278:	strb	r2, [r3, #2]
    327a:	strb.w	r2, [r3, #36]	; 0x24
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    327e:	strb.w	r2, [r3, #48]	; 0x30
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    3282:	strb.w	r2, [r3, #50]	; 0x32
    3286:	bx	lr
    3288:	.word	0x2001c67c
    328c:	.word	0x0001342c

00003290 <SdVolume::cacheFlush()>:
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
    3290:	push	{r4, r5, r6, lr}
  if (cacheDirty_) {
    3292:	ldr	r4, [pc, #104]	; (32fc <SdVolume::cacheFlush()+0x6c>)
    3294:	ldrb	r3, [r4, #0]
    3296:	cbnz	r3, 329c <SdVolume::cacheFlush()+0xc>
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
    3298:	movs	r0, #1
}
    329a:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    329c:	ldr	r5, [pc, #96]	; (3300 <SdVolume::cacheFlush()+0x70>)
    329e:	ldr	r3, [pc, #100]	; (3304 <SdVolume::cacheFlush()+0x74>)
    32a0:	ldr	r0, [r5, #0]
    32a2:	ldr	r1, [r3, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    32a4:	ldrb	r3, [r0, #0]
    32a6:	cmp	r3, #254	; 0xfe
    32a8:	beq.n	32da <SdVolume::cacheFlush()+0x4a>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    32aa:	ldr	r2, [pc, #92]	; (3308 <SdVolume::cacheFlush()+0x78>)
    32ac:	bl	3f14 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    32b0:	cbz	r0, 32d6 <SdVolume::cacheFlush()+0x46>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    32b2:	ldr	r6, [pc, #88]	; (330c <SdVolume::cacheFlush()+0x7c>)
    32b4:	ldr	r1, [r6, #0]
    32b6:	cbnz	r1, 32c0 <SdVolume::cacheFlush()+0x30>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    32b8:	movs	r3, #0
    32ba:	strb	r3, [r4, #0]
  }
  return true;
    32bc:	movs	r0, #1
    32be:	pop	{r4, r5, r6, pc}
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    32c0:	ldr	r0, [r5, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    32c2:	ldrb	r3, [r0, #0]
    32c4:	cmp	r3, #254	; 0xfe
    32c6:	beq.n	32e8 <SdVolume::cacheFlush()+0x58>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    32c8:	ldr	r2, [pc, #60]	; (3308 <SdVolume::cacheFlush()+0x78>)
    32ca:	bl	3f14 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    32ce:	cbz	r0, 32d6 <SdVolume::cacheFlush()+0x46>
        return false;
      }
      cacheMirrorBlock_ = 0;
    32d0:	movs	r3, #0
    32d2:	str	r3, [r6, #0]
    32d4:	b.n	32b8 <SdVolume::cacheFlush()+0x28>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    32d6:	movs	r0, #0
    32d8:	pop	{r4, r5, r6, pc}
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    32da:	ldr	r0, [pc, #44]	; (3308 <SdVolume::cacheFlush()+0x78>)
    32dc:	bl	372c <SDHC_CardWriteBlock(void const*, unsigned long)>
    32e0:	clz	r0, r0
    32e4:	lsrs	r0, r0, #5
    32e6:	b.n	32b0 <SdVolume::cacheFlush()+0x20>
    32e8:	ldr	r0, [pc, #28]	; (3308 <SdVolume::cacheFlush()+0x78>)
    32ea:	bl	372c <SDHC_CardWriteBlock(void const*, unsigned long)>
    32ee:	clz	r0, r0
    32f2:	lsrs	r0, r0, #5
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    32f4:	cmp	r0, #0
    32f6:	bne.n	32d0 <SdVolume::cacheFlush()+0x40>
    32f8:	b.n	32d6 <SdVolume::cacheFlush()+0x46>
    32fa:	nop
    32fc:	.word	0x2001c8d8
    3300:	.word	0x2001c6d4
    3304:	.word	0x20016f14
    3308:	.word	0x2001c6d8
    330c:	.word	0x2001c6d0

00003310 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    3310:	push	{r4, r5, r6, lr}
  if (cacheBlockNumber_ != blockNumber) {
    3312:	ldr	r5, [pc, #72]	; (335c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x4c>)
    3314:	ldr	r3, [r5, #0]
    3316:	cmp	r3, r0
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    3318:	mov	r6, r1
  if (cacheBlockNumber_ != blockNumber) {
    331a:	beq.n	3340 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x30>
    331c:	mov	r4, r0
    if (!cacheFlush()) return false;
    331e:	bl	3290 <SdVolume::cacheFlush()>
    3322:	cbnz	r0, 3328 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x18>
    3324:	movs	r0, #0
    3326:	pop	{r4, r5, r6, pc}
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    3328:	ldr	r3, [pc, #52]	; (3360 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x50>)
    332a:	ldr	r0, [r3, #0]
  /* return the type of SD card detected during init() */
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    332c:	ldrb	r3, [r0, #0]
    332e:	cmp	r3, #254	; 0xfe
    3330:	beq.n	334c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x3c>
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    }
    #endif
    return SD_readBlock(block, dst);
    3332:	ldr	r2, [pc, #48]	; (3364 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    3334:	mov	r1, r4
    3336:	bl	3d88 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
    333a:	cmp	r0, #0
    333c:	beq.n	3324 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x14>
    cacheBlockNumber_ = blockNumber;
    333e:	str	r4, [r5, #0]
  }
  cacheDirty_ |= action;
    3340:	ldr	r3, [pc, #36]	; (3368 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x58>)
    3342:	ldrb	r1, [r3, #0]
    3344:	orrs	r1, r6
    3346:	strb	r1, [r3, #0]
  return true;
    3348:	movs	r0, #1
}
    334a:	pop	{r4, r5, r6, pc}
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    334c:	mov	r1, r4
    334e:	ldr	r0, [pc, #20]	; (3364 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    3350:	bl	3628 <SDHC_CardReadBlock(void*, unsigned long)>
    3354:	clz	r0, r0
    3358:	lsrs	r0, r0, #5
    335a:	b.n	333a <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x2a>
    335c:	.word	0x20016f14
    3360:	.word	0x2001c6d4
    3364:	.word	0x2001c6d8
    3368:	.word	0x2001c8d8

0000336c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    336c:	push	{r3, r4, r5, r6, r7, lr}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    336e:	ldrb.w	r3, [r0, #32]

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    3372:	ldr	r4, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    3374:	cmp	r3, #16

  if (lba != cacheBlockNumber_) {
    3376:	ldr	r3, [pc, #104]	; (33e0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x74>)
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    3378:	mov	r5, r0
    337a:	mov	r6, r1
    337c:	mov	r7, r2

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    337e:	ldr	r3, [r3, #0]
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    3380:	beq.n	33b0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x44>
    3382:	add.w	r4, r4, r1, lsr #7

  if (lba != cacheBlockNumber_) {
    3386:	cmp	r4, r3
    3388:	bne.n	33b8 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x4c>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    338a:	and.w	r6, r6, #127	; 0x7f
    338e:	ldr	r2, [pc, #84]	; (33e4 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    3390:	str.w	r7, [r2, r6, lsl #2]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    3394:	ldr	r1, [pc, #80]	; (33e8 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x7c>)
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    3396:	ldrb	r0, [r5, #24]
    3398:	ldrb	r2, [r1, #0]
    339a:	cmp	r0, #1
    339c:	orr.w	r2, r2, #1
    33a0:	strb	r2, [r1, #0]
    33a2:	bls.n	33d6 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6a>
    33a4:	ldr	r1, [r5, #8]
    33a6:	ldr	r2, [pc, #68]	; (33ec <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x80>)
    33a8:	add	r3, r1
    33aa:	str	r3, [r2, #0]
  return true;
    33ac:	movs	r0, #1
    33ae:	pop	{r3, r4, r5, r6, r7, pc}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    33b0:	add.w	r4, r4, r1, lsr #8

  if (lba != cacheBlockNumber_) {
    33b4:	cmp	r4, r3
    33b6:	beq.n	33ca <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x5e>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    33b8:	movs	r1, #0
    33ba:	mov	r0, r4
    33bc:	bl	3310 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    33c0:	cbz	r0, 33d8 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6c>
  }
  // store entry
  if (fatType_ == 16) {
    33c2:	ldrb.w	r3, [r5, #32]
    33c6:	cmp	r3, #16
    33c8:	bne.n	33da <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6e>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    33ca:	uxtb	r6, r6
    33cc:	ldr	r2, [pc, #20]	; (33e4 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    33ce:	mov	r3, r4
    33d0:	strh.w	r7, [r2, r6, lsl #1]
    33d4:	b.n	3394 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x28>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
    33d6:	movs	r0, #1
}
    33d8:	pop	{r3, r4, r5, r6, r7, pc}

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    33da:	mov	r3, r4
    33dc:	b.n	338a <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x1e>
    33de:	nop
    33e0:	.word	0x20016f14
    33e4:	.word	0x2001c6d8
    33e8:	.word	0x2001c8d8
    33ec:	.word	0x2001c6d0

000033f0 <SdVolume::fatGet(unsigned long, unsigned long*) const>:
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    33f0:	ldr	r3, [r0, #12]
    33f2:	adds	r3, #1
    33f4:	cmp	r3, r1
    33f6:	bcc.n	342a <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3a>
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    33f8:	push	{r4, r5, r6, lr}
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    33fa:	ldrb.w	r3, [r0, #32]
    33fe:	cmp	r3, #16
  if (lba != cacheBlockNumber_) {
    3400:	ldr	r3, [pc, #84]	; (3458 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x68>)
    3402:	mov	r4, r0
    3404:	mov	r6, r2
    3406:	mov	r5, r1
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
    3408:	ldr	r0, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    340a:	ldr	r3, [r3, #0]
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    340c:	beq.n	342e <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3e>
    340e:	add.w	r0, r0, r1, lsr #7
  if (lba != cacheBlockNumber_) {
    3412:	cmp	r0, r3
    3414:	bne.n	3436 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x46>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    3416:	and.w	r1, r5, #127	; 0x7f
    341a:	ldr	r3, [pc, #64]	; (345c <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
    341c:	ldr.w	r3, [r3, r1, lsl #2]
    3420:	bic.w	r3, r3, #4026531840	; 0xf0000000
    3424:	str	r3, [r6, #0]
    3426:	movs	r0, #1
  }
  return true;
}
    3428:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    342a:	movs	r0, #0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    342c:	bx	lr
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    342e:	add.w	r0, r0, r1, lsr #8
  if (lba != cacheBlockNumber_) {
    3432:	cmp	r0, r3
    3434:	beq.n	3446 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x56>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    3436:	movs	r1, #0
    3438:	bl	3310 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    343c:	cbz	r0, 3454 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x64>
  }
  if (fatType_ == 16) {
    343e:	ldrb.w	r3, [r4, #32]
    3442:	cmp	r3, #16
    3444:	bne.n	3416 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x26>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    3446:	uxtb	r1, r5
    3448:	ldr	r3, [pc, #16]	; (345c <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
    344a:	ldrh.w	r3, [r3, r1, lsl #1]
    344e:	str	r3, [r6, #0]
    3450:	movs	r0, #1
    3452:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    3454:	movs	r0, #0
    3456:	pop	{r4, r5, r6, pc}
    3458:	.word	0x20016f14
    345c:	.word	0x2001c6d8

00003460 <SdVolume::allocContiguous(unsigned long, unsigned long*)>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    3460:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    3464:	ldr	r7, [r2, #0]
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    3466:	sub	sp, #12

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    3468:	cbz	r7, 34c6 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x66>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    346a:	adds	r7, #1

    // don't save new start location
    setStart = false;
    346c:	mov.w	sl, #0
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    3470:	ldr	r3, [r0, #12]
    3472:	add.w	r8, r3, #1

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    3476:	cbz	r3, 34be <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    3478:	mov	fp, r1
    347a:	mov	r6, r0
    347c:	mov	r9, r2
    347e:	mov	r4, r7
    3480:	movs	r5, #0
    3482:	b.n	3490 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    3484:	mov	r4, r3
    3486:	mov	r7, r3
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    3488:	ldr	r3, [r6, #12]

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    348a:	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    348c:	cmp	r3, r5
    348e:	bls.n	34be <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    3490:	cmp	r8, r4
      bgnCluster = endCluster = 2;
    3492:	it	cc
    3494:	movcc	r4, #2
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    3496:	mov	r1, r4
    3498:	add	r2, sp, #4
    349a:	mov	r0, r6
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    349c:	it	cc
    349e:	movcc	r7, r4
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    34a0:	bl	33f0 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    34a4:	adds	r3, r4, #1

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    34a6:	subs	r1, r3, r7
    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    34a8:	cbz	r0, 34be <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

    if (f != 0) {
    34aa:	ldr	r2, [sp, #4]
    34ac:	cmp	r2, #0
    34ae:	bne.n	3484 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x24>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    34b0:	cmp	fp, r1
    34b2:	beq.n	34d6 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x76>
    34b4:	mov	r4, r3
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    34b6:	ldr	r3, [r6, #12]

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    34b8:	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    34ba:	cmp	r3, r5
    34bc:	bhi.n	3490 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    34be:	movs	r0, #0

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
    34c0:	add	sp, #12
    34c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;

    // save next search start if one cluster
    setStart = 1 == count;
    34c6:	sub.w	sl, r1, #1
    34ca:	clz	sl, sl

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    34ce:	ldr	r7, [r0, #0]

    // save next search start if one cluster
    setStart = 1 == count;
    34d0:	mov.w	sl, sl, lsr #5
    34d4:	b.n	3470 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x10>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    34d6:	cmp	r4, #1
    34d8:	bls.n	34be <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    34da:	ldr	r3, [r6, #12]
    34dc:	adds	r3, #1
    34de:	cmp	r4, r3
    34e0:	bhi.n	34be <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    34e2:	mvn.w	r2, #4026531840	; 0xf0000000
    34e6:	mov	r1, r4
    34e8:	mov	r0, r6
    34ea:	bl	336c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    34ee:	cmp	r0, #0
    34f0:	beq.n	34be <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // link clusters
  while (endCluster > bgnCluster) {
    34f2:	cmp	r7, r4
    34f4:	bcs.n	3520 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xc0>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    34f6:	subs	r4, #1
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    34f8:	cmp	r4, #1
    34fa:	bls.n	34be <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    34fc:	ldr	r3, [r6, #12]
    34fe:	adds	r3, #1
    3500:	cmp	r4, r3
    3502:	bhi.n	34be <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    3504:	adds	r2, r4, #1
    3506:	mov	r1, r4
    3508:	mov	r0, r6
    350a:	bl	336c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    350e:	cmp	r0, #0
    3510:	beq.n	34be <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    3512:	cmp	r7, r4
    if (!fatPut(endCluster - 1, endCluster)) return false;
    3514:	add.w	r4, r4, #4294967295
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    3518:	beq.n	3520 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xc0>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    351a:	cmp	r4, #1
    351c:	bne.n	34fc <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x9c>
    351e:	b.n	34be <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    3520:	ldr.w	r1, [r9]
    3524:	cbz	r1, 353e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xde>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    3526:	cmp	r1, #1
    3528:	bls.n	34be <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    352a:	ldr	r3, [r6, #12]
    352c:	adds	r3, #1
    352e:	cmp	r1, r3
    3530:	bhi.n	34be <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    3532:	mov	r2, r7
    3534:	mov	r0, r6
    3536:	bl	336c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    353a:	cmp	r0, #0
    353c:	beq.n	34be <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    353e:	str.w	r7, [r9]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    3542:	cmp.w	sl, #0
    3546:	beq.n	354c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xec>
    3548:	adds	r7, #1
    354a:	str	r7, [r6, #0]

  return true;
    354c:	movs	r0, #1
    354e:	b.n	34c0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x60>

00003550 <SDHC_CMD_Do(unsigned long)>:

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    3550:	ldr	r1, [pc, #128]	; (35d4 <SDHC_CMD_Do(unsigned long)+0x84>)

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    3552:	ldr	r2, [pc, #132]	; (35d8 <SDHC_CMD_Do(unsigned long)+0x88>)

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    3554:	ldr	r3, [r1, #0]
    3556:	orr.w	r3, r3, #128	; 0x80
    355a:	str	r3, [r1, #0]

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    355c:	mov	r1, r2
    355e:	ldr	r3, [r2, #0]
    3560:	lsls	r3, r3, #31
    3562:	bmi.n	355e <SDHC_CMD_Do(unsigned long)+0xe>
    3564:	ldr	r3, [r1, #0]
    3566:	lsls	r3, r3, #30
    3568:	bmi.n	355e <SDHC_CMD_Do(unsigned long)+0xe>
  SDHC_XFERTYP = xfertyp;
    356a:	ldr	r3, [pc, #112]	; (35dc <SDHC_CMD_Do(unsigned long)+0x8c>)
	return SDHC_RESULT_OK;
}

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
    356c:	push	{r4, r5}

// waits for status bits sets
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
    356e:	mov.w	r2, #16777216	; 0x1000000
  do
  { result = SDHC_IRQSTAT & mask;
    3572:	ldr	r5, [pc, #96]	; (35d4 <SDHC_CMD_Do(unsigned long)+0x84>)
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
  SDHC_XFERTYP = xfertyp;
    3574:	str	r0, [r3, #0]
    3576:	b.n	357a <SDHC_CMD_Do(unsigned long)+0x2a>
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    timeout--;
  } while (!result && (timeout));
    3578:	cbz	r2, 35a4 <SDHC_CMD_Do(unsigned long)+0x54>
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    357a:	ldr	r1, [r5, #0]
    357c:	ldr	r3, [pc, #96]	; (35e0 <SDHC_CMD_Do(unsigned long)+0x90>)
    357e:	ldr	r4, [pc, #84]	; (35d4 <SDHC_CMD_Do(unsigned long)+0x84>)
    3580:	ands	r3, r1
    timeout--;
    3582:	subs	r2, #1
  } while (!result && (timeout));
    3584:	cmp	r3, #0
    3586:	beq.n	3578 <SDHC_CMD_Do(unsigned long)+0x28>
  if (timeout) return result;
    3588:	cbz	r2, 35a4 <SDHC_CMD_Do(unsigned long)+0x54>
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
    358a:	cmp	r3, #1
    358c:	bne.n	35a4 <SDHC_CMD_Do(unsigned long)+0x54>
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    358e:	ldr	r3, [r4, #0]
    3590:	tst.w	r3, #128	; 0x80
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    3594:	ldr	r3, [r4, #0]
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    3596:	beq.n	35b8 <SDHC_CMD_Do(unsigned long)+0x68>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    3598:	orr.w	r3, r3, #65537	; 0x10001
    359c:	str	r3, [r4, #0]
      return SDHC_RESULT_NOT_READY;
    359e:	movs	r0, #3
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    35a0:	pop	{r4, r5}
    35a2:	bx	lr

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
    35a4:	ldr	r2, [pc, #44]	; (35d4 <SDHC_CMD_Do(unsigned long)+0x84>)
    35a6:	ldr	r3, [r2, #0]
    35a8:	orr.w	r3, r3, #983040	; 0xf0000
    35ac:	orr.w	r3, r3, #1
    35b0:	str	r3, [r2, #0]
      return SDHC_RESULT_ERROR;
    35b2:	movs	r0, #1
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    35b4:	pop	{r4, r5}
    35b6:	bx	lr
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    35b8:	ands.w	r0, r3, #65536	; 0x10000
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    35bc:	ldr	r3, [r4, #0]
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    35be:	beq.n	35ca <SDHC_CMD_Do(unsigned long)+0x7a>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    35c0:	orr.w	r3, r3, #65537	; 0x10001
    35c4:	str	r3, [r4, #0]
      return SDHC_RESULT_NO_RESPONSE;
    35c6:	movs	r0, #5
    35c8:	b.n	35b4 <SDHC_CMD_Do(unsigned long)+0x64>
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;
    35ca:	orr.w	r3, r3, #1
    35ce:	str	r3, [r4, #0]
    35d0:	b.n	35b4 <SDHC_CMD_Do(unsigned long)+0x64>
    35d2:	nop
    35d4:	.word	0x400b1030
    35d8:	.word	0x400b1024
    35dc:	.word	0x400b100c
    35e0:	.word	0x000e0001

000035e4 <SDHC_CMD12_StopTransferWaitForBusy()>:
  return result;
}

// sends CMD12 to stop transfer and first waits to ready SDCArd
static int SDHC_CMD12_StopTransferWaitForBusy(void)
{
    35e4:	push	{r4, r5, r6, lr}
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    35e6:	ldr	r5, [pc, #52]	; (361c <SDHC_CMD12_StopTransferWaitForBusy()+0x38>)
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    35e8:	ldr	r0, [pc, #52]	; (3620 <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    35ea:	ldr	r6, [pc, #56]	; (3624 <SDHC_CMD12_StopTransferWaitForBusy()+0x40>)
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    35ec:	movs	r3, #0
    35ee:	str	r3, [r5, #0]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    35f0:	bl	3550 <SDHC_CMD_Do(unsigned long)>
{
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
    35f4:	movw	r4, #999	; 0x3e7

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    35f8:	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    35fa:	ldr	r2, [r6, #0]
    35fc:	lsls	r2, r2, #29
    35fe:	bpl.n	3604 <SDHC_CMD12_StopTransferWaitForBusy()+0x20>

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    3600:	ldr	r0, [pc, #28]	; (3620 <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    3602:	cbz	r3, 3608 <SDHC_CMD12_StopTransferWaitForBusy()+0x24>
    3604:	mov	r0, r3
    3606:	pop	{r4, r5, r6, pc}
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    3608:	str	r3, [r5, #0]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    360a:	bl	3550 <SDHC_CMD_Do(unsigned long)>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    360e:	subs	r4, #1

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    3610:	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    3612:	bne.n	35fa <SDHC_CMD12_StopTransferWaitForBusy()+0x16>

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    3614:	cmp	r0, #0
    3616:	it	eq
    3618:	moveq	r0, #5

  if (result != SDHC_RESULT_OK)  return result;
  if (!timeOut)  return SDHC_RESULT_NO_RESPONSE;

  return SDHC_RESULT_OK;
}
    361a:	pop	{r4, r5, r6, pc}
    361c:	.word	0x400b1008
    3620:	.word	0x0cdb0000
    3624:	.word	0x400b1024

00003628 <SDHC_CardReadBlock(void*, unsigned long)>:
#if 1
// read a block from disk, using polling
//   buff - pointer on buffer where read data should be stored
//   sector - index of start sector
int SDHC_CardReadBlock(void * buff, uint32_t sector)
{
    3628:	push	{r3, r4, r5, r6, r7, lr}
  int result;
  uint32_t* pData = (uint32_t*)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0)
    362a:	ldr	r3, [pc, #224]	; (370c <SDHC_CardReadBlock(void*, unsigned long)+0xe4>)
    362c:	ldrb	r2, [r3, #0]
    362e:	cbz	r2, 3634 <SDHC_CardReadBlock(void*, unsigned long)+0xc>
     return SDHC_RESULT_NOT_READY;
    3630:	movs	r0, #3
  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BRR | SDHC_IRQSTAT_AC12E);

  return result;
}
    3632:	pop	{r3, r4, r5, r6, r7, pc}
  // Check if this is ready
  if (sdCardDesc.status != 0)
     return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    3634:	ldrb	r3, [r3, #1]
    3636:	mov	r6, r0
    3638:	cbnz	r3, 363c <SDHC_CardReadBlock(void*, unsigned long)+0x14>
    sector *= 512;
    363a:	lsls	r1, r1, #9

  SDHC_IRQSTAT = 0xffff;
    363c:	ldr	r5, [pc, #208]	; (3710 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
static int SDHC_CMD17_ReadBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    363e:	ldr	r4, [pc, #212]	; (3714 <SDHC_CardReadBlock(void*, unsigned long)+0xec>)

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    3640:	ldr	r3, [pc, #212]	; (3718 <SDHC_CardReadBlock(void*, unsigned long)+0xf0>)

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    3642:	ldr	r0, [pc, #216]	; (371c <SDHC_CardReadBlock(void*, unsigned long)+0xf4>)

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    sector *= 512;

  SDHC_IRQSTAT = 0xffff;
    3644:	movw	r7, #65535	; 0xffff
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    3648:	mov.w	r2, #66048	; 0x10200

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    sector *= 512;

  SDHC_IRQSTAT = 0xffff;
    364c:	str	r7, [r5, #0]
static int SDHC_CMD17_ReadBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    364e:	str	r1, [r4, #0]

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    3650:	str	r2, [r3, #0]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    3652:	bl	3550 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    3656:	cmp	r0, #0
    3658:	bne.n	3632 <SDHC_CardReadBlock(void*, unsigned long)+0xa>
    365a:	ldr	r3, [pc, #196]	; (3720 <SDHC_CardReadBlock(void*, unsigned long)+0xf8>)
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
		*pData++ = SDHC_DATPORT;
    365c:	ldr	r1, [pc, #196]	; (3724 <SDHC_CardReadBlock(void*, unsigned long)+0xfc>)
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    365e:	ldr	r3, [r3, #0]
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    3660:	adds	r4, #28
    3662:	add.w	r2, r6, #64	; 0x40
    3666:	add.w	r0, r6, #576	; 0x240
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
    366a:	ldr	r3, [r5, #0]
    366c:	ldr	r7, [pc, #160]	; (3710 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    366e:	orr.w	r6, r3, #32
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    3672:	tst.w	r3, #7340032	; 0x700000
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    3676:	str	r6, [r5, #0]
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    3678:	bne.n	36f8 <SDHC_CardReadBlock(void*, unsigned long)+0xd0>
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    367a:	ldr	r3, [r4, #0]
    367c:	lsls	r6, r3, #20
    367e:	bpl.n	367a <SDHC_CardReadBlock(void*, unsigned long)+0x52>
		*pData++ = SDHC_DATPORT;
    3680:	ldr	r3, [r1, #0]
    3682:	str.w	r3, [r2, #-64]
		*pData++ = SDHC_DATPORT;
    3686:	ldr	r3, [r1, #0]
    3688:	str.w	r3, [r2, #-60]
		*pData++ = SDHC_DATPORT;
    368c:	ldr	r3, [r1, #0]
    368e:	str.w	r3, [r2, #-56]
		*pData++ = SDHC_DATPORT;
    3692:	ldr	r3, [r1, #0]
    3694:	str.w	r3, [r2, #-52]
		*pData++ = SDHC_DATPORT;
    3698:	ldr	r3, [r1, #0]
    369a:	str.w	r3, [r2, #-48]
		*pData++ = SDHC_DATPORT;
    369e:	ldr	r3, [r1, #0]
    36a0:	str.w	r3, [r2, #-44]
		*pData++ = SDHC_DATPORT;
    36a4:	ldr	r3, [r1, #0]
    36a6:	str.w	r3, [r2, #-40]
		*pData++ = SDHC_DATPORT;
    36aa:	ldr	r3, [r1, #0]
    36ac:	str.w	r3, [r2, #-36]
		*pData++ = SDHC_DATPORT;
    36b0:	ldr	r3, [r1, #0]
    36b2:	str.w	r3, [r2, #-32]
		*pData++ = SDHC_DATPORT;
    36b6:	ldr	r3, [r1, #0]
    36b8:	str.w	r3, [r2, #-28]
		*pData++ = SDHC_DATPORT;
    36bc:	ldr	r3, [r1, #0]
    36be:	str.w	r3, [r2, #-24]
		*pData++ = SDHC_DATPORT;
    36c2:	ldr	r3, [r1, #0]
    36c4:	str.w	r3, [r2, #-20]
		*pData++ = SDHC_DATPORT;
    36c8:	ldr	r3, [r1, #0]
    36ca:	str.w	r3, [r2, #-16]
		*pData++ = SDHC_DATPORT;
    36ce:	ldr	r3, [r1, #0]
    36d0:	str.w	r3, [r2, #-12]
		*pData++ = SDHC_DATPORT;
    36d4:	ldr	r3, [r1, #0]
    36d6:	str.w	r3, [r2, #-8]
		*pData++ = SDHC_DATPORT;
    36da:	ldr	r3, [r1, #0]
    36dc:	str.w	r3, [r2, #-4]
    36e0:	adds	r2, #64	; 0x40
static int SDHC_ReadBlock(uint32_t* pData)
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
    36e2:	cmp	r2, r0
    36e4:	bne.n	366a <SDHC_CardReadBlock(void*, unsigned long)+0x42>
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
	}
	return SDHC_RESULT_OK;
    36e6:	movs	r0, #0
  result = SDHC_CMD17_ReadBlock(sector);
  if(result != SDHC_RESULT_OK) return result;
  result = SDHC_ReadBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    36e8:	ldr	r1, [pc, #36]	; (3710 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    36ea:	ldr	r3, [r1, #0]
    36ec:	ldr	r2, [pc, #32]	; (3710 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    36ee:	lsls	r3, r3, #30
    36f0:	bpl.n	36ea <SDHC_CardReadBlock(void*, unsigned long)+0xc2>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BRR | SDHC_IRQSTAT_AC12E);
    36f2:	ldr	r3, [pc, #52]	; (3728 <SDHC_CardReadBlock(void*, unsigned long)+0x100>)
    36f4:	str	r3, [r2, #0]

  return result;
    36f6:	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
    36f8:	orr.w	r3, r3, #7340032	; 0x700000
    36fc:	orr.w	r3, r3, #32
    3700:	str	r3, [r7, #0]
			SDHC_CMD12_StopTransferWaitForBusy();
    3702:	bl	35e4 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    3706:	movs	r0, #1
    3708:	b.n	36e8 <SDHC_CardReadBlock(void*, unsigned long)+0xc0>
    370a:	nop
    370c:	.word	0x2001c8dc
    3710:	.word	0x400b1030
    3714:	.word	0x400b1008
    3718:	.word	0x400b1004
    371c:	.word	0x113a0010
    3720:	.word	0x400b1010
    3724:	.word	0x400b1020
    3728:	.word	0x01000022

0000372c <SDHC_CardWriteBlock(void const*, unsigned long)>:
//
// RETURNS:     result of operation
//-----------------------------------------------------------------------------
#if 1
int SDHC_CardWriteBlock(const void * buff, uint32_t sector)
{
    372c:	push	{r3, r4, r5, r6, r7, lr}
  int result;
  const uint32_t *pData = (const uint32_t *)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;
    372e:	ldr	r3, [pc, #172]	; (37dc <SDHC_CardWriteBlock(void const*, unsigned long)+0xb0>)
    3730:	ldrb	r2, [r3, #0]
    3732:	cbz	r2, 3738 <SDHC_CardWriteBlock(void const*, unsigned long)+0xc>
    3734:	movs	r0, #3
  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);

  return result;
}
    3736:	pop	{r3, r4, r5, r6, r7, pc}

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    3738:	ldrb	r3, [r3, #1]
    373a:	mov	r4, r0
    373c:	cbnz	r3, 3740 <SDHC_CardWriteBlock(void const*, unsigned long)+0x14>
    sector *= 512;
    373e:	lsls	r1, r1, #9

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    3740:	ldr	r5, [pc, #156]	; (37e0 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
static int SDHC_CMD24_WriteBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    3742:	ldr	r0, [pc, #160]	; (37e4 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb8>)
  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    sector *= 512;

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    3744:	ldr	r2, [r5, #0]
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    3746:	ldr	r3, [pc, #160]	; (37e8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xbc>)
  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    sector *= 512;

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    3748:	str	r2, [r5, #0]
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    374a:	mov.w	r2, #66048	; 0x10200
static int SDHC_CMD24_WriteBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    374e:	str	r1, [r0, #0]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    3750:	ldr	r0, [pc, #152]	; (37ec <SDHC_CardWriteBlock(void const*, unsigned long)+0xc0>)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    3752:	str	r2, [r3, #0]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    3754:	bl	3550 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    3758:	cmp	r0, #0
    375a:	bne.n	3736 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa>
    375c:	ldr	r3, [pc, #144]	; (37f0 <SDHC_CardWriteBlock(void const*, unsigned long)+0xc4>)
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
			SDHC_DATPORT = *pData++;
    375e:	ldr	r6, [pc, #148]	; (37f4 <SDHC_CardWriteBlock(void const*, unsigned long)+0xc8>)
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    3760:	ldr	r3, [r3, #0]
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
    3762:	mov	r1, r5
    3764:	add.w	r7, r4, #512	; 0x200
    3768:	ldr	r3, [r1, #0]
    376a:	ldr	r2, [pc, #116]	; (37e0 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    376c:	lsls	r0, r3, #27
    376e:	bpl.n	3768 <SDHC_CardWriteBlock(void const*, unsigned long)+0x3c>
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    3770:	ldr	r3, [r5, #0]
    3772:	tst.w	r3, #7340032	; 0x700000
    3776:	bne.n	37ae <SDHC_CardWriteBlock(void const*, unsigned long)+0x82>
    3778:	add.w	r2, r4, #64	; 0x40
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
			SDHC_DATPORT = *pData++;
    377c:	ldr.w	r3, [r4], #4
    3780:	str	r3, [r6, #0]
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
    3782:	cmp	r2, r4
    3784:	bne.n	377c <SDHC_CardWriteBlock(void const*, unsigned long)+0x50>
			SDHC_DATPORT = *pData++;
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;
    3786:	ldr	r3, [r1, #0]
    3788:	ldr.w	lr, [pc, #84]	; 37e0 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>
    378c:	orr.w	r3, r3, #16
    3790:	str	r3, [r1, #0]

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    3792:	ldr	r3, [r1, #0]
    3794:	ands.w	r0, r3, #7340032	; 0x700000
    3798:	bne.n	37c2 <SDHC_CardWriteBlock(void const*, unsigned long)+0x96>
static int SDHC_WriteBlock(const uint32_t* pData)
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
    379a:	cmp	r7, r2
    379c:	bne.n	3768 <SDHC_CardWriteBlock(void const*, unsigned long)+0x3c>
  result = SDHC_CMD24_WriteBlock(sector);
  if (result != SDHC_RESULT_OK) return result;
  result = SDHC_WriteBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    379e:	ldr	r1, [pc, #64]	; (37e0 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    37a0:	ldr	r3, [r1, #0]
    37a2:	ldr	r2, [pc, #60]	; (37e0 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    37a4:	lsls	r3, r3, #30
    37a6:	bpl.n	37a0 <SDHC_CardWriteBlock(void const*, unsigned long)+0x74>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);
    37a8:	ldr	r3, [pc, #76]	; (37f8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xcc>)
    37aa:	str	r3, [r2, #0]

  return result;
    37ac:	pop	{r3, r4, r5, r6, r7, pc}

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    37ae:	ldr	r3, [r2, #0]
    37b0:	orr.w	r3, r3, #7340032	; 0x700000
    37b4:	orr.w	r3, r3, #16
    37b8:	str	r3, [r2, #0]
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    37ba:	bl	35e4 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    37be:	movs	r0, #1
    37c0:	b.n	379e <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    37c2:	ldr.w	r3, [lr]
    37c6:	orr.w	r3, r3, #7340032	; 0x700000
    37ca:	orr.w	r3, r3, #16
    37ce:	str.w	r3, [lr]
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    37d2:	bl	35e4 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    37d6:	movs	r0, #1
    37d8:	b.n	379e <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
    37da:	nop
    37dc:	.word	0x2001c8dc
    37e0:	.word	0x400b1030
    37e4:	.word	0x400b1008
    37e8:	.word	0x400b1004
    37ec:	.word	0x183a0000
    37f0:	.word	0x400b1010
    37f4:	.word	0x400b1020
    37f8:	.word	0x01000012

000037fc <SdFile::sync() [clone .part.23] [clone .constprop.37]>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    37fc:	push	{r3, r4, r5, lr}
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    37fe:	ldrsb.w	r3, [r0, #5]
    3802:	cmp	r3, #0
    3804:	blt.n	380e <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x12>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    3806:	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    380a:	b.w	3290 <SdVolume::cacheFlush()>
    380e:	mov	r4, r0
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    3810:	movs	r1, #1
    3812:	ldr	r0, [r0, #16]
    3814:	bl	3310 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    3818:	cbz	r0, 385a <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5e>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    381a:	ldrb	r5, [r4, #20]
    381c:	ldr	r3, [pc, #64]	; (3860 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x64>)
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
    381e:	adds.w	r5, r3, r5, lsl #5
    3822:	beq.n	385a <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5e>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    3824:	ldrb	r3, [r4, #6]
    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    3826:	ldr	r2, [pc, #60]	; (3864 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x68>)
  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    3828:	cmp	r3, #1
    382a:	itt	ls
    382c:	ldrls	r3, [r4, #24]
    382e:	strls	r3, [r5, #28]

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    3830:	ldr	r3, [r4, #28]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    3832:	ldr	r2, [r2, #0]

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    3834:	strh	r3, [r5, #26]
    d->firstClusterHigh = firstCluster_ >> 16;
    3836:	lsrs	r3, r3, #16
    3838:	strh	r3, [r5, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    383a:	cbz	r2, 384a <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x4e>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    383c:	add.w	r1, r5, #22
    3840:	add.w	r0, r5, #24
    3844:	blx	r2
      d->lastAccessDate = d->lastWriteDate;
    3846:	ldrh	r3, [r5, #24]
    3848:	strh	r3, [r5, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    384a:	ldrb	r3, [r4, #5]
    384c:	and.w	r3, r3, #127	; 0x7f
    3850:	strb	r3, [r4, #5]
  }
  return SdVolume::cacheFlush();
}
    3852:	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    3856:	b.w	3290 <SdVolume::cacheFlush()>
}
    385a:	movs	r0, #0
    385c:	pop	{r3, r4, r5, pc}
    385e:	nop
    3860:	.word	0x2001c6d8
    3864:	.word	0x2001c8ec

00003868 <SdFile::addCluster()>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    3868:	push	{r4, lr}
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    386a:	add.w	r2, r0, #8
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    386e:	mov	r4, r0
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    3870:	movs	r1, #1
    3872:	ldr	r0, [r0, #32]
    3874:	bl	3460 <SdVolume::allocContiguous(unsigned long, unsigned long*)>
    3878:	cbz	r0, 3890 <SdFile::addCluster()+0x28>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    387a:	ldr	r3, [r4, #28]
    387c:	cbnz	r3, 388e <SdFile::addCluster()+0x26>
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
    387e:	ldrb	r3, [r4, #5]
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    3880:	ldr	r2, [r4, #8]
    3882:	str	r2, [r4, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    3884:	orn	r3, r3, #127	; 0x7f
    3888:	strb	r3, [r4, #5]
    388a:	movs	r0, #1
    388c:	pop	{r4, pc}
  }
  return true;
    388e:	movs	r0, #1
}
    3890:	pop	{r4, pc}
    3892:	nop

00003894 <SdFile::seekSet(unsigned long)>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    3894:	push	{r3, r4, r5, r6, r7, lr}
    3896:	ldrb	r3, [r0, #6]
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    3898:	cbz	r3, 38a0 <SdFile::seekSet(unsigned long)+0xc>
    389a:	ldr	r2, [r0, #24]
    389c:	cmp	r2, r1
    389e:	bcs.n	38a4 <SdFile::seekSet(unsigned long)+0x10>
    38a0:	movs	r0, #0
    38a2:	pop	{r3, r4, r5, r6, r7, pc}

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    38a4:	cmp	r3, #2
    38a6:	mov	r7, r1
    38a8:	mov	r5, r0
    38aa:	beq.n	38e2 <SdFile::seekSet(unsigned long)+0x4e>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    38ac:	cbz	r7, 38f0 <SdFile::seekSet(unsigned long)+0x5c>
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    38ae:	ldr	r3, [r5, #32]
    38b0:	ldr	r1, [r5, #12]
    38b2:	ldrb	r4, [r3, #16]
    38b4:	subs	r2, r1, #1
    38b6:	add.w	r3, r4, #9
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    38ba:	subs	r4, r7, #1
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    38bc:	lsrs	r2, r3
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    38be:	lsrs	r4, r3

  if (nNew < nCur || curPosition_ == 0) {
    38c0:	cmp	r2, r4
    38c2:	bls.n	38e8 <SdFile::seekSet(unsigned long)+0x54>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    38c4:	ldr	r3, [r5, #28]
    38c6:	str	r3, [r5, #8]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    38c8:	add.w	r6, r5, #8
    38cc:	b.n	38dc <SdFile::seekSet(unsigned long)+0x48>
    38ce:	ldr	r1, [r5, #8]
    38d0:	ldr	r0, [r5, #32]
    38d2:	bl	33f0 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    38d6:	subs	r4, #1
    38d8:	cmp	r0, #0
    38da:	beq.n	38a0 <SdFile::seekSet(unsigned long)+0xc>
    38dc:	mov	r2, r6
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    38de:	cmp	r4, #0
    38e0:	bne.n	38ce <SdFile::seekSet(unsigned long)+0x3a>
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    curPosition_ = 0;
    38e2:	str	r7, [r5, #12]
    return true;
    38e4:	movs	r0, #1
    38e6:	pop	{r3, r4, r5, r6, r7, pc}
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);

  if (nNew < nCur || curPosition_ == 0) {
    38e8:	cmp	r1, #0
    38ea:	beq.n	38c4 <SdFile::seekSet(unsigned long)+0x30>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
    38ec:	subs	r4, r4, r2
    38ee:	b.n	38c8 <SdFile::seekSet(unsigned long)+0x34>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    38f0:	str	r7, [r5, #8]
    curPosition_ = 0;
    38f2:	str	r7, [r5, #12]
    return true;
    38f4:	movs	r0, #1
    38f6:	pop	{r3, r4, r5, r6, r7, pc}

000038f8 <SdFile::write(void const*, unsigned int)>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    38f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    38fc:	mov	fp, r1

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    38fe:	ldrb	r1, [r0, #6]
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    3900:	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    3902:	cmp	r1, #1
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    3904:	mov	r7, r0
    3906:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    3908:	beq.n	3916 <SdFile::write(void const*, unsigned int)+0x1e>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    390a:	movs	r3, #1
    390c:	strb	r3, [r7, #4]

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    390e:	movs	r0, #0
}
    3910:	add	sp, #20
    3912:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    3916:	ldrb	r2, [r0, #5]
    3918:	lsls	r1, r2, #30
    391a:	bpl.n	390a <SdFile::write(void const*, unsigned int)+0x12>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    391c:	lsls	r3, r2, #29
    391e:	bpl.n	3932 <SdFile::write(void const*, unsigned int)+0x3a>
    3920:	ldr	r4, [r7, #12]
    3922:	ldr	r1, [r7, #24]
    3924:	cmp	r4, r1
    3926:	beq.w	3a92 <SdFile::write(void const*, unsigned int)+0x19a>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    392a:	bl	3894 <SdFile::seekSet(unsigned long)>
    if (!seekEnd()) goto writeErrorReturn;
    392e:	cmp	r0, #0
    3930:	beq.n	390a <SdFile::write(void const*, unsigned int)+0x12>
  }

  while (nToWrite > 0) {
    3932:	ldr	r3, [sp, #4]
    3934:	ldr	r4, [r7, #12]
    3936:	cmp	r3, #0
    3938:	beq.n	39d0 <SdFile::write(void const*, unsigned int)+0xd8>
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    393a:	ldr.w	r9, [pc, #420]	; 3ae0 <SdFile::write(void const*, unsigned int)+0x1e8>
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
    393e:	ldr.w	sl, [pc, #420]	; 3ae4 <SdFile::write(void const*, unsigned int)+0x1ec>
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    3942:	ldr.w	r8, [sp, #4]
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    3946:	ldr	r0, [r7, #32]
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    3948:	ldrb	r6, [r0, #4]
    394a:	subs	r6, #1
    394c:	and.w	r6, r6, r4, lsr #9
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    3950:	ands.w	r6, r6, #255	; 0xff
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    3954:	ubfx	r4, r4, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
    3958:	bne.n	39e2 <SdFile::write(void const*, unsigned int)+0xea>
    395a:	cmp	r4, #0
    395c:	bne.n	39e2 <SdFile::write(void const*, unsigned int)+0xea>
      // start of new cluster
      if (curCluster_ == 0) {
    395e:	ldr	r1, [r7, #8]
    3960:	cmp	r1, #0
    3962:	bne.n	3a4c <SdFile::write(void const*, unsigned int)+0x154>
        if (firstCluster_ == 0) {
    3964:	ldr	r2, [r7, #28]
    3966:	cmp	r2, #0
    3968:	beq.w	3a72 <SdFile::write(void const*, unsigned int)+0x17a>
        if (!vol_->fatGet(curCluster_, &next)) return false;
        if (vol_->isEOC(next)) {
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = next;
    396c:	str	r2, [r7, #8]
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    396e:	rsb	r5, r4, #512	; 0x200
    3972:	uxth	r5, r5

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    3974:	cmp	r5, r8
    3976:	bls.n	39ee <SdFile::write(void const*, unsigned int)+0xf6>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    3978:	ldrb	r5, [r0, #16]
    397a:	ldr	r1, [r0, #20]
    397c:	subs	r2, #2
    397e:	lsls	r2, r5
    3980:	add	r6, r1
    3982:	add	r6, r2
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    3984:	uxth.w	r5, r8
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    3988:	cbnz	r4, 3992 <SdFile::write(void const*, unsigned int)+0x9a>
    398a:	ldr	r0, [r7, #12]
    398c:	ldr	r2, [r7, #24]
    398e:	cmp	r0, r2
    3990:	bcs.n	3a32 <SdFile::write(void const*, unsigned int)+0x13a>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    3992:	mov	r0, r6
    3994:	movs	r1, #1
    3996:	bl	3310 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    399a:	cmp	r0, #0
    399c:	beq.n	390a <SdFile::write(void const*, unsigned int)+0x12>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    399e:	add	r4, r9
      uint8_t* end = dst + n;
    39a0:	add.w	lr, r4, r5
      while (dst != end) *dst++ = *src++;
    39a4:	cmp	r4, lr
    39a6:	beq.n	39c4 <SdFile::write(void const*, unsigned int)+0xcc>
    39a8:	add.w	r1, fp, #4294967295
    39ac:	subs	r2, r4, #1
    39ae:	add.w	r6, lr, #4294967295
    39b2:	ldrb.w	r0, [r1, #1]!
    39b6:	strb.w	r0, [r2, #1]!
    39ba:	cmp	r6, r2
    39bc:	bne.n	39b2 <SdFile::write(void const*, unsigned int)+0xba>
    39be:	rsb	r4, r4, lr
    39c2:	add	fp, r4
    }
    nToWrite -= n;
    curPosition_ += n;
    39c4:	ldr	r4, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    39c6:	subs.w	r8, r8, r5
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
    39ca:	add	r4, r5
    39cc:	str	r4, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    39ce:	bne.n	3946 <SdFile::write(void const*, unsigned int)+0x4e>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    39d0:	ldr	r3, [r7, #24]
    39d2:	cmp	r3, r4
    39d4:	bcs.n	3a9c <SdFile::write(void const*, unsigned int)+0x1a4>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
    39d6:	ldrb	r2, [r7, #5]
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    39d8:	str	r4, [r7, #24]
    flags_ |= F_FILE_DIR_DIRTY;
    39da:	orr.w	r2, r2, #128	; 0x80
    39de:	strb	r2, [r7, #5]
    39e0:	b.n	3aae <SdFile::write(void const*, unsigned int)+0x1b6>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    39e2:	rsb	r5, r4, #512	; 0x200
    39e6:	uxth	r5, r5

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    39e8:	cmp	r5, r8
    39ea:	ldr	r2, [r7, #8]
    39ec:	bhi.n	3978 <SdFile::write(void const*, unsigned int)+0x80>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    39ee:	ldrb	r1, [r0, #16]
    39f0:	ldr	r0, [r0, #20]
    39f2:	subs	r2, #2
    39f4:	lsls	r2, r1
    39f6:	add	r6, r0
    if (n == 512) {
    39f8:	cmp.w	r5, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    39fc:	add	r6, r2
    if (n == 512) {
    39fe:	bne.n	3988 <SdFile::write(void const*, unsigned int)+0x90>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    3a00:	ldr.w	r2, [sl]
    3a04:	cmp	r6, r2
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    3a06:	itt	eq
    3a08:	moveq.w	r2, #4294967295
    3a0c:	streq.w	r2, [sl]
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    3a10:	ldr	r2, [pc, #188]	; (3ad0 <SdFile::write(void const*, unsigned int)+0x1d8>)
    3a12:	ldr	r0, [r2, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    3a14:	ldrb	r2, [r0, #0]
    3a16:	cmp	r2, #254	; 0xfe
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    3a18:	mov	r1, r6
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    3a1a:	beq.n	3a84 <SdFile::write(void const*, unsigned int)+0x18c>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    3a1c:	mov	r2, fp
    3a1e:	bl	3f14 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    3a22:	cmp	r0, #0
    3a24:	beq.w	390a <SdFile::write(void const*, unsigned int)+0x12>
      src += 512;
    3a28:	add.w	fp, fp, #512	; 0x200
    3a2c:	mov.w	r5, #512	; 0x200
    3a30:	b.n	39c4 <SdFile::write(void const*, unsigned int)+0xcc>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    3a32:	bl	3290 <SdVolume::cacheFlush()>
    3a36:	cmp	r0, #0
    3a38:	beq.w	390a <SdFile::write(void const*, unsigned int)+0x12>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    3a3c:	ldr	r1, [pc, #148]	; (3ad4 <SdFile::write(void const*, unsigned int)+0x1dc>)
        SdVolume::cacheBlockNumber_ = block;
    3a3e:	str.w	r6, [sl]
    3a42:	ldrb	r2, [r1, #0]
    3a44:	orr.w	r2, r2, #1
    3a48:	strb	r2, [r1, #0]
    3a4a:	b.n	399e <SdFile::write(void const*, unsigned int)+0xa6>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    3a4c:	add	r2, sp, #12
    3a4e:	bl	33f0 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    3a52:	cmp	r0, #0
    3a54:	beq.w	3910 <SdFile::write(void const*, unsigned int)+0x18>
        if (vol_->isEOC(next)) {
    3a58:	ldr	r0, [r7, #32]
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    3a5a:	ldr	r3, [pc, #124]	; (3ad8 <SdFile::write(void const*, unsigned int)+0x1e0>)
    3a5c:	ldrb.w	r5, [r0, #32]
    3a60:	ldr	r2, [sp, #12]
    3a62:	movw	r1, #65528	; 0xfff8
    3a66:	cmp	r5, #16
    3a68:	it	ne
    3a6a:	movne	r1, r3
    3a6c:	cmp	r2, r1
    3a6e:	bcc.w	396c <SdFile::write(void const*, unsigned int)+0x74>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    3a72:	mov	r0, r7
    3a74:	bl	3868 <SdFile::addCluster()>
    3a78:	cmp	r0, #0
    3a7a:	beq.w	390a <SdFile::write(void const*, unsigned int)+0x12>
    3a7e:	ldr	r0, [r7, #32]
    3a80:	ldr	r2, [r7, #8]
    3a82:	b.n	396e <SdFile::write(void const*, unsigned int)+0x76>
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    3a84:	mov	r0, fp
    3a86:	bl	372c <SDHC_CardWriteBlock(void const*, unsigned long)>
    3a8a:	clz	r0, r0
    3a8e:	lsrs	r0, r0, #5
    3a90:	b.n	3a22 <SdFile::write(void const*, unsigned int)+0x12a>
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    3a92:	ldr	r3, [sp, #4]
    3a94:	cmp	r3, #0
    3a96:	bne.w	393a <SdFile::write(void const*, unsigned int)+0x42>
    3a9a:	b.n	3aae <SdFile::write(void const*, unsigned int)+0x1b6>
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    3a9c:	ldr	r3, [pc, #60]	; (3adc <SdFile::write(void const*, unsigned int)+0x1e4>)
    3a9e:	ldrb	r2, [r7, #5]
    3aa0:	ldr	r3, [r3, #0]
    3aa2:	cbz	r3, 3aae <SdFile::write(void const*, unsigned int)+0x1b6>
    3aa4:	ldr	r3, [sp, #4]
    3aa6:	cbz	r3, 3aae <SdFile::write(void const*, unsigned int)+0x1b6>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    3aa8:	orr.w	r2, r2, #128	; 0x80
    3aac:	strb	r2, [r7, #5]
  }

  if (flags_ & O_SYNC) {
    3aae:	lsls	r2, r2, #28
    3ab0:	bpl.n	3ac6 <SdFile::write(void const*, unsigned int)+0x1ce>
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    3ab2:	ldrb	r3, [r7, #6]
    3ab4:	cmp	r3, #0
    3ab6:	beq.w	390a <SdFile::write(void const*, unsigned int)+0x12>
    3aba:	mov	r0, r7
    3abc:	bl	37fc <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    3ac0:	cmp	r0, #0
    3ac2:	beq.w	390a <SdFile::write(void const*, unsigned int)+0x12>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    3ac6:	ldr	r0, [sp, #4]
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    3ac8:	add	sp, #20
    3aca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ace:	nop
    3ad0:	.word	0x2001c6d4
    3ad4:	.word	0x2001c8d8
    3ad8:	.word	0x0ffffff8
    3adc:	.word	0x2001c8ec
    3ae0:	.word	0x2001c6d8
    3ae4:	.word	0x20016f14

00003ae8 <SdFile::write(unsigned char)>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    3ae8:	push	{lr}
    3aea:	sub	sp, #12
    3aec:	add	r3, sp, #8
  return write(&b, 1);
    3aee:	movs	r2, #1
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    3af0:	strb.w	r1, [r3, #-1]!
  return write(&b, 1);
    3af4:	mov	r1, r3
    3af6:	bl	38f8 <SdFile::write(void const*, unsigned int)>
}
    3afa:	add	sp, #12
    3afc:	ldr.w	pc, [sp], #4

00003b00 <Sd2Card::chipSelectHigh()>:
}
//------------------------------------------------------------------------------
#ifdef SPI_HAS_TRANSACTION
static uint8_t chip_select_asserted = 0;
#endif
void Sd2Card::chipSelectHigh(void) {
    3b00:	push	{r4, lr}
  digitalWrite(chipSelectPin_, HIGH);
    3b02:	movs	r1, #1
    3b04:	ldrb	r0, [r0, #0]
    3b06:	bl	8870 <digitalWrite>
#ifdef SPI_HAS_TRANSACTION
  if (chip_select_asserted) {
    3b0a:	ldr	r2, [pc, #68]	; (3b50 <Sd2Card::chipSelectHigh()+0x50>)
    3b0c:	ldrb	r3, [r2, #0]
    3b0e:	cbz	r3, 3b42 <Sd2Card::chipSelectHigh()+0x42>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    3b10:	ldr	r1, [pc, #64]	; (3b54 <Sd2Card::chipSelectHigh()+0x54>)
    3b12:	ldrb	r3, [r1, #11]
    chip_select_asserted = 0;
    3b14:	movs	r4, #0
    3b16:	mov	r0, r3
    3b18:	strb	r4, [r2, #0]
    3b1a:	cbz	r3, 3b42 <Sd2Card::chipSelectHigh()+0x42>
			if (interruptMasksUsed & 0x01) {
    3b1c:	lsls	r2, r3, #31
    3b1e:	bpl.n	3b28 <Sd2Card::chipSelectHigh()+0x28>
				NVIC_ISER0 = interruptSave[0];
    3b20:	ldr	r2, [pc, #52]	; (3b58 <Sd2Card::chipSelectHigh()+0x58>)
    3b22:	ldr	r0, [r1, #28]
    3b24:	str	r0, [r2, #0]
    3b26:	mov	r0, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    3b28:	lsls	r4, r3, #30
    3b2a:	bpl.n	3b34 <Sd2Card::chipSelectHigh()+0x34>
				NVIC_ISER1 = interruptSave[1];
    3b2c:	ldr	r3, [pc, #44]	; (3b5c <Sd2Card::chipSelectHigh()+0x5c>)
    3b2e:	ldr	r2, [r1, #32]
    3b30:	ldrb	r0, [r1, #11]
    3b32:	str	r2, [r3, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    3b34:	lsls	r2, r0, #29
    3b36:	bmi.n	3b44 <Sd2Card::chipSelectHigh()+0x44>
				NVIC_ISER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    3b38:	lsls	r3, r0, #28
    3b3a:	bpl.n	3b42 <Sd2Card::chipSelectHigh()+0x42>
				NVIC_ISER3 = interruptSave[3];
    3b3c:	ldr	r3, [pc, #32]	; (3b60 <Sd2Card::chipSelectHigh()+0x60>)
    3b3e:	ldr	r2, [r1, #40]	; 0x28
    3b40:	str	r2, [r3, #0]
    3b42:	pop	{r4, pc}
				NVIC_ISER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				NVIC_ISER2 = interruptSave[2];
    3b44:	ldr	r3, [pc, #28]	; (3b64 <Sd2Card::chipSelectHigh()+0x64>)
    3b46:	ldr	r2, [r1, #36]	; 0x24
    3b48:	ldrb	r0, [r1, #11]
    3b4a:	str	r2, [r3, #0]
    3b4c:	b.n	3b38 <Sd2Card::chipSelectHigh()+0x38>
    3b4e:	nop
    3b50:	.word	0x2001c8f4
    3b54:	.word	0x20016d8c
    3b58:	.word	0xe000e100
    3b5c:	.word	0xe000e104
    3b60:	.word	0xe000e10c
    3b64:	.word	0xe000e108

00003b68 <Sd2Card::chipSelectLow()>:
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    3b68:	ldr	r3, [pc, #140]	; (3bf8 <Sd2Card::chipSelectLow()+0x90>)
    3b6a:	ldrb	r2, [r3, #0]
    3b6c:	cbz	r2, 3b76 <Sd2Card::chipSelectLow()+0xe>
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    3b6e:	ldrb	r0, [r0, #0]
    3b70:	movs	r1, #0
    3b72:	b.w	8870 <digitalWrite>
    SPI.endTransaction();
  }
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
    3b76:	push	{r4, r5, r6}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    3b78:	ldr	r2, [pc, #128]	; (3bfc <Sd2Card::chipSelectLow()+0x94>)
    3b7a:	ldr	r1, [pc, #132]	; (3c00 <Sd2Card::chipSelectLow()+0x98>)
    3b7c:	ldrb	r4, [r2, #11]
    3b7e:	ldr	r1, [r1, #0]
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    3b80:	movs	r5, #1
    3b82:	strb	r5, [r3, #0]
    3b84:	cmp	r4, #0
    3b86:	beq.n	3bd6 <Sd2Card::chipSelectLow()+0x6e>
			__disable_irq();
    3b88:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    3b8a:	ldrb	r4, [r2, #11]
    3b8c:	lsls	r6, r4, #31
    3b8e:	mov	r3, r4
    3b90:	bpl.n	3ba0 <Sd2Card::chipSelectLow()+0x38>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    3b92:	ldr	r5, [pc, #112]	; (3c04 <Sd2Card::chipSelectLow()+0x9c>)
    3b94:	ldr	r3, [r2, #12]
    3b96:	ldr	r6, [r5, #0]
    3b98:	ands	r3, r6
    3b9a:	str	r3, [r2, #28]
				NVIC_ICER0 = interruptSave[0];
    3b9c:	str	r3, [r5, #0]
    3b9e:	mov	r3, r4
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    3ba0:	lsls	r5, r4, #30
    3ba2:	bpl.n	3bb2 <Sd2Card::chipSelectLow()+0x4a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    3ba4:	ldr	r5, [pc, #96]	; (3c08 <Sd2Card::chipSelectLow()+0xa0>)
    3ba6:	ldr	r4, [r2, #16]
    3ba8:	ldr	r6, [r5, #0]
    3baa:	ldrb	r3, [r2, #11]
    3bac:	ands	r4, r6
    3bae:	str	r4, [r2, #32]
				NVIC_ICER1 = interruptSave[1];
    3bb0:	str	r4, [r5, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    3bb2:	lsls	r4, r3, #29
    3bb4:	bpl.n	3bc4 <Sd2Card::chipSelectLow()+0x5c>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    3bb6:	ldr	r5, [pc, #84]	; (3c0c <Sd2Card::chipSelectLow()+0xa4>)
    3bb8:	ldr	r4, [r2, #20]
    3bba:	ldr	r6, [r5, #0]
    3bbc:	ldrb	r3, [r2, #11]
    3bbe:	ands	r4, r6
    3bc0:	str	r4, [r2, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    3bc2:	str	r4, [r5, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    3bc4:	lsls	r3, r3, #28
    3bc6:	bpl.n	3bd4 <Sd2Card::chipSelectLow()+0x6c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    3bc8:	ldr	r4, [pc, #68]	; (3c10 <Sd2Card::chipSelectLow()+0xa8>)
    3bca:	ldr	r3, [r2, #24]
    3bcc:	ldr	r5, [r4, #0]
    3bce:	ands	r3, r5
    3bd0:	str	r3, [r2, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    3bd2:	str	r3, [r4, #0]
			}
			#endif
			__enable_irq();
    3bd4:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    3bd6:	ldr	r3, [r2, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    3bd8:	ldr	r2, [r3, #12]
    3bda:	cmp	r2, r1
    3bdc:	beq.n	3bee <Sd2Card::chipSelectLow()+0x86>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    3bde:	ldr	r4, [pc, #52]	; (3c14 <Sd2Card::chipSelectLow()+0xac>)
    3be0:	str	r4, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    3be2:	ldr	r2, [pc, #52]	; (3c18 <Sd2Card::chipSelectLow()+0xb0>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    3be4:	str	r1, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    3be6:	orr.w	r4, r1, #1073741824	; 0x40000000
    3bea:	str	r4, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    3bec:	str	r2, [r3, #0]
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    3bee:	ldrb	r0, [r0, #0]
    3bf0:	movs	r1, #0
}
    3bf2:	pop	{r4, r5, r6}
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    3bf4:	b.w	8870 <digitalWrite>
    3bf8:	.word	0x2001c8f4
    3bfc:	.word	0x20016d8c
    3c00:	.word	0x2001c8f0
    3c04:	.word	0xe000e180
    3c08:	.word	0xe000e184
    3c0c:	.word	0xe000e188
    3c10:	.word	0xe000e18c
    3c14:	.word	0x003f4001
    3c18:	.word	0x803f0000

00003c1c <Sd2Card::waitNotBusy(unsigned int)>:
  return true;
#endif
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
    3c1c:	push	{r4, r5, r6, r7}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3c1e:	ldr	r0, [pc, #72]	; (3c68 <Sd2Card::waitNotBusy(unsigned int)+0x4c>)
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3c20:	ldr	r2, [pc, #72]	; (3c6c <Sd2Card::waitNotBusy(unsigned int)+0x50>)
    3c22:	ldr	r3, [r0, #0]
  return true;
#endif
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
    3c24:	sub	sp, #8
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3c26:	mov	r6, r2
    3c28:	str	r3, [sp, #0]
	return ret;
    3c2a:	ldr	r7, [sp, #0]
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    3c2c:	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    3c30:	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3c32:	ldr	r3, [r2, #0]
    3c34:	orr.w	r3, r3, #1024	; 0x400
    3c38:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    3c3a:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    3c3c:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3c3e:	ldr	r3, [r2, #44]	; 0x2c
    3c40:	cmp	r3, #0
    3c42:	bge.n	3c3e <Sd2Card::waitNotBusy(unsigned int)+0x22>
  return SPI0_POPR;
    3c44:	ldr	r3, [r6, #56]	; 0x38
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    3c46:	uxtb	r3, r3
    3c48:	cmp	r3, #255	; 0xff
    3c4a:	beq.n	3c60 <Sd2Card::waitNotBusy(unsigned int)+0x44>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3c4c:	ldr	r3, [r0, #0]
    3c4e:	str	r3, [sp, #4]
	return ret;
    3c50:	ldr	r3, [sp, #4]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    3c52:	subs	r3, r3, r7
    3c54:	cmp	r3, r1
    3c56:	bcc.n	3c32 <Sd2Card::waitNotBusy(unsigned int)+0x16>
  return false;
    3c58:	movs	r0, #0
}
    3c5a:	add	sp, #8
    3c5c:	pop	{r4, r5, r6, r7}
    3c5e:	bx	lr
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    3c60:	movs	r0, #1
    d = millis() - t0;
  }
  while (d < timeoutMillis);
  return false;
}
    3c62:	add	sp, #8
    3c64:	pop	{r4, r5, r6, r7}
    3c66:	bx	lr
    3c68:	.word	0x2001c95c
    3c6c:	.word	0x4002c000

00003c70 <Sd2Card::cardCommand(unsigned char, unsigned long)>:


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    3c70:	push	{r3, r4, r5, r6, r7, lr}
    3c72:	mov	r5, r1
  // wait up to 300 ms if busy
  waitNotBusy(300);
    3c74:	mov.w	r1, #300	; 0x12c


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    3c78:	mov	r6, r2
    3c7a:	mov	r4, r0
  // wait up to 300 ms if busy
  waitNotBusy(300);
    3c7c:	bl	3c1c <Sd2Card::waitNotBusy(unsigned int)>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3c80:	ldr	r3, [pc, #160]	; (3d24 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
    3c82:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    3c84:	mov.w	r0, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3c88:	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    3c8c:	orr.w	r1, r5, #64	; 0x40
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3c90:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    3c92:	str	r0, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3c94:	mov	r2, r3
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    3c96:	str	r1, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3c98:	ldr	r3, [r2, #44]	; 0x2c
    3c9a:	cmp	r3, #0
    3c9c:	bge.n	3c98 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x28>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3c9e:	ldr	r1, [pc, #132]	; (3d24 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3ca0:	movs	r0, #24
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    3ca2:	mov.w	r7, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3ca6:	ldr	r2, [r1, #0]
    3ca8:	lsr.w	r3, r6, r0
    3cac:	orr.w	r2, r2, #1024	; 0x400
    3cb0:	uxtb	r3, r3
    3cb2:	str	r2, [r1, #0]
  SPI0_SR = SPI_SR_TCF;
    3cb4:	str	r7, [r1, #44]	; 0x2c
  SPI0_PUSHR = b;
    3cb6:	str	r3, [r1, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3cb8:	ldr	r3, [r1, #44]	; 0x2c
    3cba:	cmp	r3, #0
    3cbc:	bge.n	3cb8 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x48>
    3cbe:	subs	r0, #8

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    3cc0:	cmn.w	r0, #8
    3cc4:	bne.n	3ca6 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x36>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    3cc6:	cbz	r5, 3d1e <Sd2Card::cardCommand(unsigned char, unsigned long)+0xae>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    3cc8:	cmp	r5, #8
    3cca:	ite	eq
    3ccc:	moveq	r1, #135	; 0x87
    3cce:	movne	r1, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3cd0:	ldr	r3, [pc, #80]	; (3d24 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
    3cd2:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    3cd4:	mov.w	r0, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3cd8:	orr.w	r2, r2, #1024	; 0x400
    3cdc:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    3cde:	str	r0, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3ce0:	mov	r2, r3
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    3ce2:	str	r1, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3ce4:	ldr	r3, [r2, #44]	; 0x2c
    3ce6:	cmp	r3, #0
    3ce8:	bge.n	3ce4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x74>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3cea:	ldr	r2, [pc, #56]	; (3d24 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3cec:	movs	r7, #0
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3cee:	mov	r6, r2
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    3cf0:	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    3cf4:	movs	r1, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3cf6:	ldr	r3, [r2, #0]
    3cf8:	orr.w	r3, r3, #1024	; 0x400
    3cfc:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    3cfe:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    3d00:	str	r1, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3d02:	ldr	r3, [r2, #44]	; 0x2c
    3d04:	cmp	r3, #0
    3d06:	bge.n	3d02 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x92>
  return SPI0_POPR;
    3d08:	ldr	r3, [r6, #56]	; 0x38
    3d0a:	uxtb	r0, r3
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    3d0c:	lsls	r3, r3, #24
    3d0e:	strb	r0, [r4, #1]
    3d10:	bmi.n	3d14 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa4>
  return status_;
}
    3d12:	pop	{r3, r4, r5, r6, r7, pc}
    3d14:	adds	r7, #1
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    3d16:	cmp.w	r7, #256	; 0x100
    3d1a:	bne.n	3cf6 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x86>
  return status_;
}
    3d1c:	pop	{r3, r4, r5, r6, r7, pc}
    3d1e:	movs	r1, #149	; 0x95
    3d20:	b.n	3cd0 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x60>
    3d22:	nop
    3d24:	.word	0x4002c000

00003d28 <Sd2Card::waitStartBlock()>:
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    3d28:	push	{r4, r5, r6, r7}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3d2a:	ldr	r1, [pc, #84]	; (3d80 <Sd2Card::waitStartBlock()+0x58>)
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3d2c:	ldr	r2, [pc, #84]	; (3d84 <Sd2Card::waitStartBlock()+0x5c>)
    3d2e:	ldr	r3, [r1, #0]
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    3d30:	sub	sp, #8
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3d32:	mov	r6, r2
    3d34:	str	r3, [sp, #0]
	return ret;
    3d36:	ldr	r7, [sp, #0]
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    3d38:	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    3d3c:	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3d3e:	ldr	r3, [r2, #0]
    3d40:	orr.w	r3, r3, #1024	; 0x400
    3d44:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    3d46:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    3d48:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3d4a:	ldr	r3, [r2, #44]	; 0x2c
    3d4c:	cmp	r3, #0
    3d4e:	bge.n	3d4a <Sd2Card::waitStartBlock()+0x22>
  return SPI0_POPR;
    3d50:	ldr	r3, [r6, #56]	; 0x38
    3d52:	uxtb	r3, r3
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    3d54:	cmp	r3, #255	; 0xff
    3d56:	strb	r3, [r0, #1]
    3d58:	bne.n	3d70 <Sd2Card::waitStartBlock()+0x48>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3d5a:	ldr	r3, [r1, #0]
    3d5c:	str	r3, [sp, #4]
	return ret;
    3d5e:	ldr	r3, [sp, #4]
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
    3d60:	subs	r3, r3, r7
    3d62:	cmp.w	r3, #300	; 0x12c
    3d66:	bls.n	3d3e <Sd2Card::waitStartBlock()+0x16>
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    3d68:	movs	r0, #0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    3d6a:	add	sp, #8
    3d6c:	pop	{r4, r5, r6, r7}
    3d6e:	bx	lr
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    3d70:	sub.w	r0, r3, #254	; 0xfe
    3d74:	clz	r0, r0
    3d78:	lsrs	r0, r0, #5
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    3d7a:	add	sp, #8
    3d7c:	pop	{r4, r5, r6, r7}
    3d7e:	bx	lr
    3d80:	.word	0x2001c95c
    3d84:	.word	0x4002c000

00003d88 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>:

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    3d88:	push	{r3, r4, r5, r6, r7, lr}
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    3d8a:	ldrb	r3, [r0, #2]
    3d8c:	cmp	r3, #3

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    3d8e:	mov	r6, r1
    3d90:	mov	r4, r0
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    3d92:	it	ne
    3d94:	lslne	r6, r1, #9

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    3d96:	mov	r5, r2
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
  chipSelectLow();
    3d98:	bl	3b68 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD17, block)) {
    3d9c:	mov	r2, r6
    3d9e:	movs	r1, #17
    3da0:	mov	r0, r4
    3da2:	bl	3c70 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    3da6:	cbnz	r0, 3db0 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x28>
    goto fail; // SD_CARD_ERROR_CMD17
  }
  if (!waitStartBlock()) {
    3da8:	mov	r0, r4
    3daa:	bl	3d28 <Sd2Card::waitStartBlock()>
    3dae:	cbnz	r0, 3dba <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x32>
#endif
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    3db0:	mov	r0, r4
    3db2:	bl	3b00 <Sd2Card::chipSelectHigh()>
  return false;
    3db6:	movs	r0, #0
}
    3db8:	pop	{r3, r4, r5, r6, r7, pc}
  return SPI0_POPR;
}
/** SPI receive multiple bytes */
static uint8_t spiRec(uint8_t* buf, size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    3dba:	ldr	r3, [pc, #128]	; (3e3c <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    3dbc:	ldr	r1, [pc, #128]	; (3e40 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb8>)
  return SPI0_POPR;
}
/** SPI receive multiple bytes */
static uint8_t spiRec(uint8_t* buf, size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    3dbe:	ldr	r2, [pc, #132]	; (3e44 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xbc>)
    3dc0:	str	r2, [r3, #0]
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    3dc2:	mov	lr, r1
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    3dc4:	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    3dc6:	mov	r2, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    3dc8:	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    3dca:	mov	r6, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    3dcc:	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
    3dce:	add.w	r0, r5, #506	; 0x1fa
    3dd2:	adds	r1, r5, #2
    3dd4:	add.w	r7, r5, #508	; 0x1fc
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    3dd8:	ldr	r3, [r2, #44]	; 0x2c
    3dda:	tst.w	r3, #240	; 0xf0
    3dde:	beq.n	3dd8 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x50>
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    3de0:	str.w	lr, [r6, #52]	; 0x34
    uint16_t w = SPI0_POPR;
    3de4:	ldr	r3, [r6, #56]	; 0x38
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
    3de6:	strb.w	r3, [r1, #-1]
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    3dea:	asrs	r3, r3, #8
    3dec:	strb.w	r3, [r1, #-2]
    3df0:	adds	r1, #2
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    3df2:	cmp	r7, r1
    3df4:	bne.n	3dd8 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x50>
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
    3df6:	add.w	r5, r5, #512	; 0x200
  while (buf < limit) {
    3dfa:	cmp	r0, r5
    3dfc:	bcs.n	3e1a <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x92>
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    3dfe:	ldr	r2, [pc, #60]	; (3e3c <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    3e00:	mov	r6, r2
    3e02:	ldr	r3, [r2, #44]	; 0x2c
    3e04:	tst.w	r3, #240	; 0xf0
    3e08:	beq.n	3e02 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x7a>
    uint16_t w = SPI0_POPR;
    3e0a:	ldr	r3, [r6, #56]	; 0x38
    *buf++ = w >> 8;
    3e0c:	asrs	r1, r3, #8
    3e0e:	strb.w	r1, [r0], #2
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
  while (buf < limit) {
    3e12:	cmp	r0, r5
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
    3e14:	strb.w	r3, [r0, #-1]
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
  while (buf < limit) {
    3e18:	bcc.n	3e02 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x7a>
  }
  return 0;
}
static void spiRecIgnore(size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    3e1a:	ldr	r3, [pc, #32]	; (3e3c <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    3e1c:	ldr	r1, [pc, #36]	; (3e44 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xbc>)
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    3e1e:	ldr	r2, [pc, #32]	; (3e40 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb8>)
  }
  return 0;
}
static void spiRecIgnore(size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    3e20:	str	r1, [r3, #0]
    SPI0_POPR;
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    3e22:	mov	r1, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    3e24:	str	r2, [r3, #52]	; 0x34
    SPI0_POPR;
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    3e26:	ldr	r3, [r1, #44]	; 0x2c
    3e28:	ldr	r2, [pc, #16]	; (3e3c <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    3e2a:	tst.w	r3, #240	; 0xf0
    3e2e:	beq.n	3e26 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x9e>
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    3e30:	mov	r0, r4
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_POPR;
    3e32:	ldr	r3, [r2, #56]	; 0x38
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    3e34:	bl	3b00 <Sd2Card::chipSelectHigh()>
  return true;
    3e38:	movs	r0, #1
    3e3a:	pop	{r3, r4, r5, r6, r7, pc}
    3e3c:	.word	0x4002c000
    3e40:	.word	0x9000ffff
    3e44:	.word	0x801f0400

00003e48 <Sd2Card::writeData(unsigned char, unsigned char const*)>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    3e48:	push	{r4, r5, r6, r7}
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    3e4a:	ldr	r6, [pc, #196]	; (3f10 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    3e4c:	ldr	r3, [r6, #0]
		SPI0_SR = SPI_SR_TCF;
    3e4e:	mov.w	r7, #2147483648	; 0x80000000
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    3e52:	orr.w	r3, r3, #1024	; 0x400
    3e56:	str	r3, [r6, #0]
		SPI0_SR = SPI_SR_TCF;
    3e58:	mov	r5, r7
    3e5a:	str	r7, [r6, #44]	; 0x2c
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    3e5c:	mov	r4, r6
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
		SPI0_SR = SPI_SR_TCF;
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    3e5e:	str	r1, [r6, #52]	; 0x34
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    3e60:	mov	r3, r6
    3e62:	adds	r1, r2, #1
    3e64:	addw	r7, r2, #513	; 0x201
    3e68:	ldr	r2, [r4, #44]	; 0x2c
    3e6a:	cmp	r2, #0
    3e6c:	bge.n	3e68 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x20>
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    3e6e:	ldr	r2, [r3, #0]
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i];
    3e70:	ldrb.w	r6, [r1, #-1]
    3e74:	orr.w	r2, r2, #1024	; 0x400
    3e78:	str	r2, [r3, #0]
		SPI0_SR = SPI_SR_TCF;
    3e7a:	str	r5, [r3, #44]	; 0x2c
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    3e7c:	str	r6, [r3, #52]	; 0x34
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    3e7e:	ldr	r2, [r4, #44]	; 0x2c
    3e80:	cmp	r2, #0
    3e82:	bge.n	3e7e <Sd2Card::writeData(unsigned char, unsigned char const*)+0x36>
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    3e84:	ldr	r2, [r3, #0]
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i+1];
    3e86:	ldrb.w	r6, [r1], #2
    3e8a:	orr.w	r2, r2, #1024	; 0x400

  // send data - optimized loop
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    3e8e:	cmp	r7, r1
    3e90:	str	r2, [r3, #0]
		SPI0_SR = SPI_SR_TCF;
    3e92:	str	r5, [r3, #44]	; 0x2c
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    3e94:	str	r6, [r3, #52]	; 0x34
    3e96:	bne.n	3e68 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x20>
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    3e98:	ldr	r1, [pc, #116]	; (3f10 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    3e9a:	ldr	r2, [r1, #44]	; 0x2c
    3e9c:	ldr	r3, [pc, #112]	; (3f10 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    3e9e:	cmp	r2, #0
    3ea0:	bge.n	3e9a <Sd2Card::writeData(unsigned char, unsigned char const*)+0x52>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3ea2:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    3ea4:	mov.w	r5, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3ea8:	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    3eac:	movs	r4, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3eae:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3eb0:	mov	r1, r3
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    3eb2:	str	r5, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
    3eb4:	str	r4, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3eb6:	ldr	r3, [r1, #44]	; 0x2c
    3eb8:	ldr	r2, [pc, #84]	; (3f10 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    3eba:	cmp	r3, #0
    3ebc:	bge.n	3eb6 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x6e>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3ebe:	ldr	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    3ec0:	mov.w	r5, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3ec4:	orr.w	r3, r3, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    3ec8:	movs	r4, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3eca:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3ecc:	mov	r1, r2
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    3ece:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = b;
    3ed0:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3ed2:	ldr	r3, [r1, #44]	; 0x2c
    3ed4:	ldr	r2, [pc, #56]	; (3f10 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    3ed6:	cmp	r3, #0
    3ed8:	bge.n	3ed2 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x8a>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3eda:	ldr	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    3edc:	mov.w	r5, #2147483648	; 0x80000000
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3ee0:	orr.w	r3, r3, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
    3ee4:	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3ee6:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3ee8:	mov	r1, r2
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    3eea:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    3eec:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3eee:	ldr	r3, [r1, #44]	; 0x2c
    3ef0:	ldr	r2, [pc, #28]	; (3f10 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    3ef2:	cmp	r3, #0
    3ef4:	bge.n	3eee <Sd2Card::writeData(unsigned char, unsigned char const*)+0xa6>
  return SPI0_POPR;
    3ef6:	ldr	r3, [r2, #56]	; 0x38
    3ef8:	uxtb	r3, r3
    3efa:	and.w	r2, r3, #31
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
    3efe:	strb	r3, [r0, #1]
    3f00:	sub.w	r0, r2, #5
    3f04:	clz	r0, r0
    3f08:	lsrs	r0, r0, #5
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    return false; // SD_CARD_ERROR_WRITE
  }
  return true;
}
    3f0a:	pop	{r4, r5, r6, r7}
    3f0c:	bx	lr
    3f0e:	nop
    3f10:	.word	0x4002c000

00003f14 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_writeBlock(uint32_t blockNumber, const uint8_t* src) {
    3f14:	push	{r4, r5, r6, lr}
    3f16:	mov	r4, r0
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    3f18:	cbz	r1, 3f38 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_BLOCK_ZERO
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    3f1a:	ldrb	r3, [r0, #2]
    3f1c:	cmp	r3, #3
    3f1e:	mov	r5, r1
    3f20:	it	ne
    3f22:	lslne	r5, r1, #9
    3f24:	mov	r6, r2
  chipSelectLow();
    3f26:	bl	3b68 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD24, blockNumber)) {
    3f2a:	mov	r2, r5
    3f2c:	movs	r1, #24
    3f2e:	mov	r0, r4
    3f30:	bl	3c70 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    3f34:	mov	r5, r0
    3f36:	cbz	r0, 3f42 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x2e>
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    3f38:	mov	r0, r4
    3f3a:	bl	3b00 <Sd2Card::chipSelectHigh()>
  return false;
    3f3e:	movs	r0, #0
}
    3f40:	pop	{r4, r5, r6, pc}
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  chipSelectLow();
  if (cardCommand(CMD24, blockNumber)) {
    goto fail; // SD_CARD_ERROR_CMD24
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    3f42:	mov	r2, r6
    3f44:	movs	r1, #254	; 0xfe
    3f46:	mov	r0, r4
    3f48:	bl	3e48 <Sd2Card::writeData(unsigned char, unsigned char const*)>
    3f4c:	cmp	r0, #0
    3f4e:	beq.n	3f38 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    3f50:	mov.w	r1, #600	; 0x258
    3f54:	mov	r0, r4
    3f56:	bl	3c1c <Sd2Card::waitNotBusy(unsigned int)>
    3f5a:	cmp	r0, #0
    3f5c:	beq.n	3f38 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    3f5e:	mov	r2, r5
    3f60:	movs	r1, #13
    3f62:	mov	r0, r4
    3f64:	bl	3c70 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    3f68:	cmp	r0, #0
    3f6a:	bne.n	3f38 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3f6c:	ldr	r3, [pc, #44]	; (3f9c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x88>)
    3f6e:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    3f70:	mov.w	r5, #2147483648	; 0x80000000
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3f74:	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
    3f78:	movs	r0, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3f7a:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3f7c:	mov	r1, r3
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    3f7e:	str	r5, [r3, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    3f80:	str	r0, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3f82:	ldr	r3, [r1, #44]	; 0x2c
    3f84:	ldr	r2, [pc, #20]	; (3f9c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x88>)
    3f86:	cmp	r3, #0
    3f88:	bge.n	3f82 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x6e>
  return SPI0_POPR;
    3f8a:	ldr	r3, [r2, #56]	; 0x38
  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    3f8c:	tst.w	r3, #255	; 0xff
    3f90:	bne.n	3f38 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_PROGRAMMING
  }
  chipSelectHigh();
    3f92:	mov	r0, r4
    3f94:	bl	3b00 <Sd2Card::chipSelectHigh()>
  return true;
    3f98:	movs	r0, #1
    3f9a:	pop	{r4, r5, r6, pc}
    3f9c:	.word	0x4002c000

00003fa0 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    3fa0:	ldr	r3, [pc, #4]	; (3fa8 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x8>)
    3fa2:	ldr	r2, [pc, #8]	; (3fac <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0xc>)
    3fa4:	str	r2, [r3, #0]
    3fa6:	bx	lr
    3fa8:	.word	0x2001c8f0
    3fac:	.word	0x38011001

00003fb0 <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
    3fb0:	push	{r4, lr}
    3fb2:	mov	r4, r0
  bool rtn = sync();
    3fb4:	bl	4fac <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    3fb8:	movs	r3, #0
    3fba:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    3fbe:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    3fc2:	pop	{r4, pc}

00003fc4 <ExFatFile::openRoot(ExFatVolume*)>:
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    3fc4:	ldrb.w	r2, [r0, #49]	; 0x31
    3fc8:	cbz	r2, 3fce <ExFatFile::openRoot(ExFatVolume*)+0xa>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    3fca:	movs	r0, #0
    3fcc:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    3fce:	push	{r3, r4, r5, lr}
    3fd0:	mov	r4, r0
    3fd2:	mov	r5, r1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    3fd4:	mov	r1, r2
    3fd6:	movs	r2, #56	; 0x38
    3fd8:	bl	c10c <memset>
  m_attributes = FILE_ATTR_ROOT;
    3fdc:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3fde:	movs	r0, #1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    3fe0:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3fe4:	strb.w	r0, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    3fe8:	str	r5, [r4, #32]
    3fea:	pop	{r3, r4, r5, pc}

00003fec <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    3fec:	push	{r4, r5, r6, r7, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
    3fee:	ldrb	r0, [r1, #0]
    3ff0:	cmp	r0, #32
    3ff2:	bne.n	3ffc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x10>
    3ff4:	ldrb.w	r0, [r1, #1]!
    3ff8:	cmp	r0, #32
    3ffa:	beq.n	3ff4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8>
    path++;
  }
  fname->lfn = path;
    3ffc:	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
    3ffe:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
    4000:	cmp	r0, #0
    4002:	beq.n	40a8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbc>
    4004:	cmp	r0, #47	; 0x2f
    4006:	beq.n	4060 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    4008:	cmp	r0, #92	; 0x5c
    400a:	beq.n	404e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    400c:	sub.w	r4, r0, #34	; 0x22
    4010:	uxtb	r4, r4
    4012:	cmp	r4, #29
    4014:	bls.n	4052 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x66>
    4016:	ldr.w	lr, [pc, #148]	; 40ac <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>
    401a:	adds	r6, r1, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    401c:	movs	r4, #0
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    401e:	cmp	r0, #124	; 0x7c
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    4020:	sub.w	r5, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    4024:	mov	r7, r6
    4026:	beq.n	404e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    4028:	cmp	r5, #94	; 0x5e
    402a:	bhi.n	404e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    402c:	ldrb.w	r0, [r6], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    4030:	sub.w	r5, r0, #34	; 0x22
    4034:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    4036:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    4038:	cbz	r0, 409a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xae>
    403a:	cmp	r0, #47	; 0x2f
    403c:	beq.n	4062 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
    403e:	cmp	r0, #92	; 0x5c
    4040:	lsr.w	r7, lr, r5
    4044:	beq.n	404e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    4046:	cmp	r5, #29
    4048:	bhi.n	401e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
    404a:	lsls	r5, r7, #31
    404c:	bpl.n	401e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    404e:	movs	r0, #0
    4050:	pop	{r4, r5, r6, r7, pc}
    4052:	ldr	r5, [pc, #88]	; (40ac <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>)
    4054:	lsr.w	r4, r5, r4
    4058:	lsls	r6, r4, #31
    405a:	bpl.n	4016 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2a>
    405c:	movs	r0, #0
    405e:	pop	{r4, r5, r6, r7, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    4060:	movs	r4, #0
    4062:	adds	r7, r1, r4
    4064:	mov	r6, r7
    4066:	mov	r5, r4
    4068:	movs	r0, #47	; 0x2f
    406a:	b.n	4072 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x86>
    406c:	ldrb.w	r0, [r6, #1]!
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    4070:	adds	r5, #1
    4072:	cmp	r0, #32
    4074:	beq.n	406c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
    4076:	cmp	r0, #47	; 0x2f
    4078:	beq.n	406c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
  *ptr = &path[end];
    407a:	add	r1, r5
    407c:	str	r1, [r3, #0]

  // Back over spaces and dots.
  while (len) {
    407e:	cbz	r4, 4092 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    4080:	mov	r1, r7
    c = path[len - 1];
    4082:	ldrb.w	r3, [r1, #-1]!
    if (c != '.' && c != ' ') {
    4086:	cmp	r3, #46	; 0x2e
    4088:	beq.n	408e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa2>
    408a:	cmp	r3, #32
    408c:	bne.n	40a0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb4>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    408e:	subs	r4, #1
    4090:	bne.n	4082 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
    4092:	mov	r0, r4
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
    4094:	str	r0, [r2, #0]
  return true;
    4096:	movs	r0, #1
    4098:	pop	{r4, r5, r6, r7, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    409a:	str	r7, [r3, #0]
    409c:	adds	r7, r1, r4
    409e:	b.n	4080 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x94>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    40a0:	cmp	r4, #255	; 0xff
    40a2:	ble.n	4092 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    40a4:	movs	r0, #0
    40a6:	pop	{r4, r5, r6, r7, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    40a8:	str	r1, [r3, #0]
    40aa:	b.n	4094 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa8>
    40ac:	.word	0x35000101

000040b0 <ExFatFile::read(void*, unsigned int)>:

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    40b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    40b4:	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    40b8:	lsls	r5, r3, #31

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    40ba:	sub	sp, #12
    40bc:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    40be:	bpl.w	421a <ExFatFile::read(void*, unsigned int)+0x16a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    40c2:	lsls	r0, r3, #25
    40c4:	mov	r5, r1
    40c6:	mov	r6, r2
    40c8:	bpl.w	4230 <ExFatFile::read(void*, unsigned int)+0x180>
    if ((m_curPosition + count) > m_validLength) {
    40cc:	ldrd	r0, r1, [r4]
    40d0:	ldrd	r2, r3, [r4, #16]
    40d4:	adds.w	r8, r0, r6
    40d8:	adc.w	r9, r1, #0
    40dc:	cmp	r3, r9
    40de:	it	eq
    40e0:	cmpeq	r2, r8
    40e2:	bcc.w	423c <ExFatFile::read(void*, unsigned int)+0x18c>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    40e6:	cmp	r6, #0
    40e8:	beq.w	4240 <ExFatFile::read(void*, unsigned int)+0x190>
    40ec:	mov	r9, r4
    40ee:	ldrd	r2, r3, [r9], #24
    40f2:	mov	r8, r6
    40f4:	b.n	4196 <ExFatFile::read(void*, unsigned int)+0xe6>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
    40f6:	orrs	r3, r2
    40f8:	bne.n	41d2 <ExFatFile::read(void*, unsigned int)+0x122>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    40fa:	ldrb.w	r3, [r4, #49]	; 0x31
    40fe:	lsls	r2, r3, #25
    4100:	ite	mi
    4102:	ldrmi.w	r1, [r0, #1068]	; 0x42c
    4106:	ldrpl	r1, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    4108:	str	r1, [r4, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    410a:	ldrb.w	ip, [r0, #1085]	; 0x43d
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    410e:	ldr.w	r2, [r0, #1060]	; 0x424
    4112:	subs	r1, #2
    4114:	lsrs	r7, r7, #9
    4116:	lsl.w	lr, r1, ip
    411a:	adds	r1, r7, r2
    411c:	add	r1, lr
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
    411e:	cmp.w	sl, #0
    4122:	bne.n	41aa <ExFatFile::read(void*, unsigned int)+0xfa>
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    4124:	cmp.w	r8, #512	; 0x200
    4128:	bcc.n	41aa <ExFatFile::read(void*, unsigned int)+0xfa>
    412a:	ldr.w	r2, [r0, #532]	; 0x214
                          || sector == m_vol->dataCacheSector()) {
    412e:	cmp	r1, r2
    4130:	beq.n	41aa <ExFatFile::read(void*, unsigned int)+0xfa>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    4132:	cmp.w	r8, #1024	; 0x400
    4136:	bcc.n	41e0 <ExFatFile::read(void*, unsigned int)+0x130>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    4138:	movs	r3, #1
    413a:	lsl.w	ip, r3, ip
    413e:	rsb	r7, r7, ip
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    4142:	mov.w	r3, r8, lsr #9
    4146:	cmp	r7, r3
    4148:	it	cs
    414a:	movcs	r7, r3
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    414c:	cmp	r1, r2
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    414e:	mov.w	fp, r7, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    4152:	bhi.n	416c <ExFatFile::read(void*, unsigned int)+0xbc>
    4154:	adds	r3, r7, r1
    4156:	cmp	r3, r2
    4158:	bls.n	416c <ExFatFile::read(void*, unsigned int)+0xbc>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    415a:	add.w	r0, r0, #524	; 0x20c
    415e:	str	r1, [sp, #4]
    4160:	bl	4950 <FsCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->dataCacheSync()) {
    4164:	cmp	r0, #0
    4166:	beq.n	421a <ExFatFile::read(void*, unsigned int)+0x16a>
    4168:	ldr	r0, [r4, #32]
    416a:	ldr	r1, [sp, #4]
    416c:	ldr.w	r0, [r0, #1080]	; 0x438
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
    4170:	ldr	r2, [r0, #0]
    4172:	mov	r3, r7
    4174:	ldr	r7, [r2, #12]
    4176:	mov	r2, r5
    4178:	blx	r7
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    417a:	cmp	r0, #0
    417c:	beq.n	421a <ExFatFile::read(void*, unsigned int)+0x16a>
    417e:	mov	r0, fp
    4180:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    4182:	ldrd	r2, r3, [r4]
    4186:	adds	r2, r2, r0
    4188:	adcs	r3, r1
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    418a:	subs.w	r8, r8, fp
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    418e:	add	r5, fp
    m_curPosition += n;
    4190:	strd	r2, r3, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    4194:	beq.n	4240 <ExFatFile::read(void*, unsigned int)+0x190>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    4196:	ldr	r0, [r4, #32]
    4198:	ldr.w	r7, [r0, #1072]	; 0x430
    419c:	ands	r7, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
    419e:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    41a2:	cmp	r7, #0
    41a4:	beq.n	40f6 <ExFatFile::read(void*, unsigned int)+0x46>
    41a6:	ldr	r1, [r4, #24]
    41a8:	b.n	410a <ExFatFile::read(void*, unsigned int)+0x5a>
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    41aa:	add.w	r0, r0, #524	; 0x20c
    41ae:	movs	r2, #0
    41b0:	bl	4890 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    41b4:	cbz	r0, 421a <ExFatFile::read(void*, unsigned int)+0x16a>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    41b6:	rsb	fp, sl, #512	; 0x200
    41ba:	cmp	fp, r8
    41bc:	it	cs
    41be:	movcs	fp, r8
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    41c0:	add.w	r1, r0, sl
    41c4:	mov	r2, fp
    41c6:	mov	r0, r5
    41c8:	bl	81f4 <memcpy>
    41cc:	mov	r0, fp
    41ce:	movs	r1, #0
    41d0:	b.n	4182 <ExFatFile::read(void*, unsigned int)+0xd2>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    41d2:	ldrb.w	r3, [r4, #51]	; 0x33
    41d6:	lsls	r3, r3, #25
    41d8:	bpl.n	41fa <ExFatFile::read(void*, unsigned int)+0x14a>
        m_curCluster++;
    41da:	ldr	r1, [r4, #24]
    41dc:	adds	r1, #1
    41de:	b.n	4108 <ExFatFile::read(void*, unsigned int)+0x58>
    41e0:	ldr.w	r0, [r0, #1080]	; 0x438
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    41e4:	ldr	r3, [r0, #0]
    41e6:	mov	r2, r5
    41e8:	ldr	r3, [r3, #8]
    41ea:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    41ec:	cbz	r0, 421a <ExFatFile::read(void*, unsigned int)+0x16a>
    41ee:	mov.w	r0, #512	; 0x200
    41f2:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    41f4:	mov.w	fp, #512	; 0x200
    41f8:	b.n	4182 <ExFatFile::read(void*, unsigned int)+0xd2>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    41fa:	mov	r2, r9
    41fc:	ldr	r1, [r4, #24]
    41fe:	bl	4c64 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    4202:	sxtb	r0, r0
        if (fg < 0) {
    4204:	cmp	r0, #0
    4206:	blt.n	421a <ExFatFile::read(void*, unsigned int)+0x16a>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    4208:	beq.n	4210 <ExFatFile::read(void*, unsigned int)+0x160>
    420a:	ldr	r0, [r4, #32]
    420c:	ldr	r1, [r4, #24]
    420e:	b.n	410a <ExFatFile::read(void*, unsigned int)+0x5a>
          // EOF if directory.
          if (isDir()) {
    4210:	ldrb.w	r3, [r4, #49]	; 0x31
    4214:	tst.w	r3, #80	; 0x50
    4218:	bne.n	4244 <ExFatFile::read(void*, unsigned int)+0x194>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    421a:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    421e:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    4222:	orr.w	r3, r3, #2
    4226:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    422a:	add	sp, #12
    422c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    4230:	ldrb.w	r3, [r4, #49]	; 0x31
    4234:	lsls	r1, r3, #28
    4236:	bmi.w	40cc <ExFatFile::read(void*, unsigned int)+0x1c>
    423a:	b.n	40e6 <ExFatFile::read(void*, unsigned int)+0x36>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    423c:	subs	r6, r2, r0
    423e:	b.n	40e6 <ExFatFile::read(void*, unsigned int)+0x36>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    4240:	mov.w	r8, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    4244:	rsb	r0, r8, r6

fail:
  m_error |= READ_ERROR;
  return -1;
}
    4248:	add	sp, #12
    424a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    424e:	nop

00004250 <ExFatFile::peek()>:
  }
  fname->len = len;
  return true;
}
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
    4250:	push	{r4, r5, r6, r7, lr}
    4252:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    4254:	movs	r2, #1
    4256:	add.w	r1, sp, #7
    425a:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    425c:	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    4260:	ldr	r5, [r0, #24]
    4262:	bl	40b0 <ExFatFile::read(void*, unsigned int)>
    4266:	cmp	r0, #1
    4268:	it	eq
    426a:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    426e:	str	r5, [r4, #24]
    4270:	it	ne
    4272:	movne.w	r0, #4294967295
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    4276:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    427a:	add	sp, #12
    427c:	pop	{r4, r5, r6, r7, pc}
    427e:	nop

00004280 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    4280:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4284:	ldrb.w	lr, [r0, #49]	; 0x31
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    4288:	ldr	r5, [r0, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    428a:	sub	sp, #12
    428c:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    428e:	cmp.w	lr, #0
    4292:	beq.n	42cc <ExFatFile::seekSet(unsigned long long)+0x4c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    4294:	ldrd	r0, r1, [r0]
    4298:	cmp	r1, r3
    429a:	it	eq
    429c:	cmpeq	r0, r2
    429e:	mov	r6, r2
    42a0:	mov	r7, r3
    42a2:	beq.n	431c <ExFatFile::seekSet(unsigned long long)+0x9c>
    return true;
  }
  if (pos == 0) {
    42a4:	orrs.w	r3, r6, r7
    42a8:	bne.n	42ba <ExFatFile::seekSet(unsigned long long)+0x3a>
    // set position to start of file
    m_curCluster = 0;
    42aa:	movs	r3, #0
    42ac:	str	r3, [r4, #24]
    }
  }

done:
  m_curPosition = pos;
  return true;
    42ae:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    42b0:	strd	r6, r7, [r4]
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    42b4:	add	sp, #12
    42b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    42ba:	tst.w	lr, #8
    42be:	beq.n	42d6 <ExFatFile::seekSet(unsigned long long)+0x56>
    if (pos > m_validLength) {
    42c0:	ldrd	r2, r3, [r4, #16]
    42c4:	cmp	r3, r7
    42c6:	it	eq
    42c8:	cmpeq	r2, r6
    42ca:	bcs.n	42d6 <ExFatFile::seekSet(unsigned long long)+0x56>
done:
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
    42cc:	str	r5, [r4, #24]
  return false;
    42ce:	movs	r0, #0
}
    42d0:	add	sp, #12
    42d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    42d6:	ldr	r3, [r4, #32]
    42d8:	str	r3, [sp, #4]
    42da:	ldrb.w	ip, [r3, #1085]	; 0x43d
  if (isContiguous()) {
    42de:	ldrb.w	sl, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    42e2:	add.w	ip, ip, #9
    42e6:	uxtb.w	ip, ip
    42ea:	adds.w	r2, r6, #4294967295
    42ee:	adc.w	r3, r7, #4294967295
    42f2:	rsb	r8, ip, #32
    42f6:	lsl.w	fp, r3, r8
    42fa:	lsr.w	r2, r2, ip
    42fe:	orr.w	r2, r2, fp
    4302:	sub.w	fp, ip, #32
    4306:	lsr.w	r3, r3, fp
  if (isContiguous()) {
    430a:	tst.w	sl, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    430e:	orr.w	r2, r2, r3
  if (isContiguous()) {
    4312:	beq.n	4320 <ExFatFile::seekSet(unsigned long long)+0xa0>
    m_curCluster = m_firstCluster + nNew;
    4314:	ldr	r3, [r4, #28]
    4316:	add	r2, r3
    4318:	str	r2, [r4, #24]
    goto done;
    431a:	b.n	42ae <ExFatFile::seekSet(unsigned long long)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    431c:	movs	r0, #1
    431e:	b.n	42d0 <ExFatFile::seekSet(unsigned long long)+0x50>
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    4320:	adds.w	r9, r0, #4294967295
    4324:	adc.w	sl, r1, #4294967295
    4328:	lsr.w	ip, r9, ip
    432c:	lsl.w	r8, sl, r8
    4330:	orr.w	ip, ip, r8
    4334:	lsr.w	fp, sl, fp
    4338:	orr.w	ip, ip, fp
  if (nNew < nCur || m_curPosition == 0) {
    433c:	cmp	r2, ip
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    433e:	mov	r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    4340:	bcs.n	4372 <ExFatFile::seekSet(unsigned long long)+0xf2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    4342:	tst.w	lr, #64	; 0x40
    4346:	itet	ne
    4348:	ldrne	r3, [sp, #4]
    434a:	ldreq	r3, [r4, #28]
    434c:	ldrne.w	r3, [r3, #1068]	; 0x42c
    4350:	str	r3, [r4, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    4352:	mov	r8, r2
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    4354:	add.w	r9, r4, #24
    4358:	mov	r2, r9
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    435a:	cmp.w	r8, #0
    435e:	beq.n	42ae <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    4360:	ldr	r1, [r4, #24]
    4362:	ldr	r0, [r4, #32]
    4364:	bl	4c64 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    4368:	add.w	r8, r8, #4294967295
    436c:	cmp	r0, #0
    436e:	bne.n	4358 <ExFatFile::seekSet(unsigned long long)+0xd8>
    4370:	b.n	42cc <ExFatFile::seekSet(unsigned long long)+0x4c>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
  if (nNew < nCur || m_curPosition == 0) {
    4372:	orrs.w	r3, r0, r1
    4376:	beq.n	4342 <ExFatFile::seekSet(unsigned long long)+0xc2>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    4378:	rsb	r2, ip, r2
    437c:	b.n	4352 <ExFatFile::seekSet(unsigned long long)+0xd2>
    437e:	nop

00004380 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    4380:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4384:	mov	r6, r1
    4386:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    4388:	ldrb.w	r1, [r0, #49]	; 0x31
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    438c:	str	r2, [sp, #0]
    438e:	mov	r5, r0
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    4390:	cbnz	r1, 439e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4392:	mov	sl, r3
    4394:	ldrb.w	r3, [r6, #49]	; 0x31
    4398:	tst.w	r3, #80	; 0x50
    439c:	bne.n	43ae <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2e>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    439e:	movs	r0, #0
    43a0:	strb.w	r0, [r5, #49]	; 0x31
  m_flags = 0;
    43a4:	strb.w	r0, [r5, #51]	; 0x33
  return false;
}
    43a8:	add	sp, #76	; 0x4c
    43aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    43ae:	ldr	r3, [sp, #112]	; 0x70
    43b0:	and.w	r3, r3, #3
    43b4:	cmp	r3, #1
    43b6:	beq.n	43c6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x46>
    43b8:	cmp	r3, #2
    43ba:	beq.w	45d0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x250>
    43be:	cmp	r3, #0
    43c0:	bne.n	439e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    43c2:	movs	r3, #1
    43c4:	b.n	43c8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
    43c6:	movs	r3, #2
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    43c8:	ldr	r2, [sp, #112]	; 0x70
    43ca:	and.w	r2, r2, #8
    43ce:	orrs	r3, r2
    43d0:	str	r3, [sp, #4]
  if (name) {
    43d2:	ldr	r3, [sp, #0]
    43d4:	cmp	r3, #0
    43d6:	beq.w	45d4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x254>
    nameHash = exFatHashName(name, nameLength, 0);
    43da:	mov	r0, r3
    43dc:	movs	r2, #0
    43de:	mov	r1, sl
    43e0:	bl	4d34 <exFatHashName(char const*, unsigned int, unsigned short)>
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    43e4:	ldrb.w	r3, [r6, #49]	; 0x31
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    43e8:	str	r0, [sp, #8]
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    43ea:	cbz	r3, 4400 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    43ec:	ldrd	r2, r3, [r6]
    43f0:	orrs	r3, r2
    43f2:	beq.n	4400 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    43f4:	movs	r2, #0
    43f6:	movs	r3, #0
    43f8:	strd	r2, r3, [r6]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    43fc:	movs	r1, #0
    43fe:	str	r1, [r6, #24]
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    4400:	ldr	r2, [pc, #736]	; (46e4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x364>)
    4402:	add.w	r3, sl, #14
    4406:	smull	r1, r2, r2, r3
    440a:	add	r2, r3
    440c:	asrs	r3, r3, #31
    440e:	rsb	r3, r3, r2, asr #3
    4412:	uxtb	r3, r3
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
    4414:	mov.w	r9, #0
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    4418:	str	r3, [sp, #12]
    441a:	adds	r3, #2
    441c:	uxtb.w	fp, r3

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
    4420:	mov	r4, r9
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
    4422:	mov	r7, r9
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    4424:	movs	r2, #32
    4426:	add	r1, sp, #40	; 0x28
    4428:	mov	r0, r6
    442a:	bl	40b0 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    442e:	cmp	r0, #0
    4430:	beq.n	44ae <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      goto create;
    }
    if (n != 32) {
    4432:	cmp	r0, #32
    4434:	bne.n	439e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    4436:	ldrb.w	r3, [sp, #40]	; 0x28
    443a:	lsls	r2, r3, #24
    443c:	bmi.n	450c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18c>
      if (freeCount == 0) {
    443e:	cmp	r4, #0
    4440:	bne.n	4506 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x186>
        freePos.position = dir->curPosition() - 32;
    4442:	ldr	r2, [r6, #0]
        freePos.cluster = dir->curCluster();
    4444:	ldr	r1, [r6, #24]
    4446:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    4448:	subs	r2, #32
    444a:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
    444c:	adds	r4, #1
    444e:	uxtb	r4, r4
      }
      if (!buf[0]) {
    4450:	cbz	r3, 44ae <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
    4452:	cmp	r3, #192	; 0xc0
    4454:	beq.w	457e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fe>
    4458:	cmp	r3, #193	; 0xc1
    445a:	beq.n	4522 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a2>
    445c:	cmp	r3, #133	; 0x85
    445e:	bne.n	4424 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
    4460:	movs	r2, #56	; 0x38
    4462:	movs	r1, #0
    4464:	mov	r0, r5
    4466:	bl	c10c <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    446a:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    446e:	ldrb.w	r2, [sp, #41]	; 0x29
    4472:	strb.w	r2, [r5, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    4476:	lsls	r0, r3, #27
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    4478:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
    447c:	it	pl
    447e:	orrpl.w	r2, r2, #8
    4482:	strb.w	r2, [r5, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    4486:	ldr	r3, [r6, #0]
    4488:	ldr	r1, [r6, #32]
    448a:	ldr	r2, [r6, #24]
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
    448c:	str	r2, [r5, #36]	; 0x24
        m_dirPos.position = dir->curPosition() - 32;
    448e:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
    4490:	str	r1, [r5, #32]

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    4492:	str	r3, [r5, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
    4494:	ldrb.w	r3, [r6, #51]	; 0x33
    4498:	ubfx	r3, r3, #6, #1
    449c:	strb.w	r3, [r5, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    44a0:	movs	r2, #32
    44a2:	add	r1, sp, #40	; 0x28
    44a4:	mov	r0, r6
    44a6:	bl	40b0 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    44aa:	cmp	r0, #0
    44ac:	bne.n	4432 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb2>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    44ae:	ldr	r3, [sp, #112]	; 0x70
    44b0:	lsls	r1, r3, #22
    44b2:	bpl.w	439e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    44b6:	ldr	r3, [sp, #4]
    44b8:	lsls	r2, r3, #30
    44ba:	bpl.w	439e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    44be:	ldr	r3, [sp, #0]
    44c0:	cmp	r3, #0
    44c2:	beq.w	439e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    44c6:	cmp	r4, fp
    44c8:	bcc.n	44e4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x164>
    44ca:	b.n	45da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
    44cc:	cmp	r0, #32
    44ce:	bne.w	439e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    44d2:	cbnz	r4, 44de <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x15e>
      freePos.position = dir->curPosition() - 32;
    44d4:	ldr	r2, [r6, #0]
      freePos.cluster = dir->curCluster();
    44d6:	ldr	r1, [r6, #24]
    44d8:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    44da:	subs	r2, #32
    44dc:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    44de:	uxtb	r4, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    44e0:	cmp	fp, r4
    44e2:	bls.n	45da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25a>
    n = dir->read(buf, 32);
    44e4:	movs	r2, #32
    44e6:	add	r1, sp, #40	; 0x28
    44e8:	mov	r0, r6
    44ea:	bl	40b0 <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    44ee:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
    44f0:	cmp	r0, #0
    44f2:	bne.n	44cc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x14c>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    44f4:	mov	r0, r6
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    44f6:	ldr	r7, [r6, #24]
      if (!dir->addDirCluster()) {
    44f8:	bl	500c <ExFatFile::addDirCluster()>
    44fc:	cmp	r0, #0
    44fe:	beq.w	439e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    4502:	str	r7, [r6, #24]
      continue;
    4504:	b.n	44e0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    4506:	cmp	r4, fp
    4508:	bcs.n	4450 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd0>
    450a:	b.n	444c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xcc>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
    450c:	cmp.w	r9, #0
    4510:	bne.n	4452 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd2>
      if (freeCount < freeNeed) {
        freeCount = 0;
    4512:	cmp	r4, fp
    4514:	it	cc
    4516:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    4518:	cmp	r3, #133	; 0x85
    451a:	bne.n	4424 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        continue;
      }
      inSet = true;
    451c:	mov.w	r9, #1
    4520:	b.n	4460 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe0>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    4522:	rsb	r8, r7, sl
    4526:	uxtb.w	r8, r8
    452a:	cmp.w	r8, #15
    452e:	it	cs
    4530:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    4534:	mov	r3, r8
    4536:	mov	r2, r7
    4538:	ldr	r1, [sp, #0]
    453a:	add	r0, sp, #40	; 0x28
    453c:	bl	4d70 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
    4540:	cmp	r0, #0
    4542:	beq.n	45be <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x23e>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
    4544:	add	r7, r8
    4546:	uxtb	r7, r7

        if (nameOffset == nameLength) {
    4548:	cmp	sl, r7
    454a:	bne.w	4424 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    454e:	ldr	r3, [sp, #112]	; 0x70
    4550:	lsls	r3, r3, #20
    4552:	bmi.w	439e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    4556:	ldr	r3, [sp, #112]	; 0x70
    4558:	tst.w	r3, #17408	; 0x4400
    455c:	bne.w	46a0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
    4560:	ldrb.w	r3, [r5, #51]	; 0x33
    4564:	lsls	r7, r3, #30
    4566:	bmi.w	46a0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x320>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    456a:	ldr	r3, [sp, #112]	; 0x70
    456c:	lsls	r3, r3, #21
    456e:	bmi.w	439e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    4572:	ldr	r3, [sp, #112]	; 0x70
    4574:	lsls	r0, r3, #17
    4576:	bmi.w	46e8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x368>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
    457a:	movs	r0, #1
    457c:	b.n	43a8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    457e:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    4582:	ldr	r2, [sp, #4]
    4584:	strb.w	r2, [r5, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    4588:	lsls	r1, r3, #30
    458a:	bpl.n	4594 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x214>
          m_flags |= FILE_FLAG_CONTIGUOUS;
    458c:	orr.w	r3, r2, #64	; 0x40
    4590:	strb.w	r3, [r5, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    4594:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    4598:	ldrd	r0, r1, [sp, #64]	; 0x40
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    459c:	strd	r2, r3, [r5, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
    45a0:	ldr	r3, [sp, #60]	; 0x3c
    45a2:	str	r3, [r5, #28]
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
    45a4:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    45a6:	strd	r0, r1, [r5, #8]
        if (!name) {
    45aa:	cmp	r3, #0
    45ac:	beq.n	454e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1ce>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    45ae:	ldrb.w	r3, [sp, #43]	; 0x2b
    45b2:	cmp	r3, sl
    45b4:	beq.n	45c2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x242>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
    45b6:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    45ba:	mov	r7, r9
    45bc:	b.n	4424 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
    45be:	mov	r9, r0
    45c0:	b.n	4424 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    45c2:	ldrh.w	r3, [sp, #44]	; 0x2c
    45c6:	ldr	r2, [sp, #8]
    45c8:	cmp	r3, r2
    45ca:	bne.n	45b6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x236>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    45cc:	movs	r7, #0
    45ce:	b.n	4424 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa4>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    45d0:	movs	r3, #3
    45d2:	b.n	43c8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint8_t modeFlags;
  uint16_t nameHash = 0;
    45d4:	ldr	r3, [sp, #0]
    45d6:	str	r3, [sp, #8]
    45d8:	b.n	4400 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x80>
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    45da:	ldrb.w	r3, [r6, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    45de:	movs	r2, #56	; 0x38
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    45e0:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    45e4:	movs	r1, #0
    45e6:	mov	r0, r5
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    45e8:	add.w	r8, sp, #28
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    45ec:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
    45f0:	bl	c10c <memset>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    45f4:	ldr	r4, [sp, #12]
    45f6:	ldr	r3, [r6, #32]
    45f8:	str.w	sl, [sp, #12]

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    45fc:	ldmia.w	r8, {r0, r1, r2}
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    4600:	add.w	r9, r4, #1
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    4604:	movs	r4, #8
    4606:	strb.w	r4, [r5, #49]	; 0x31
    460a:	add.w	r7, sl, #30
  m_dirPos = freePos;
    460e:	add.w	r4, r5, #36	; 0x24
    4612:	ldr.w	sl, [sp]
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    4616:	str	r3, [r5, #32]
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    4618:	uxtb.w	r9, r9

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    461c:	stmia.w	r4, {r0, r1, r2}
    4620:	uxtb	r7, r7
  for (uint8_t i = 0; i < freeNeed; i++) {
    4622:	movs	r6, #0
    4624:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    4626:	movs	r2, #1
    4628:	mov	r1, r8
    462a:	bl	4bd8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    462e:	mov	r4, r0
    4630:	cmp	r0, #0
    4632:	beq.w	439e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4636:	ldrsb.w	r3, [r0]
    463a:	cmp	r3, #0
    463c:	blt.w	439e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    4640:	movs	r2, #32
    4642:	movs	r1, #0
    4644:	bl	c10c <memset>
    if (i == 0) {
    4648:	cmp	r6, #0
    464a:	beq.n	471a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x39a>
        FsDateTime::callback(&date, &time, &ms10);
        dirFile->createTimeMs = ms10;
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
    464c:	cmp	r6, #1
    464e:	beq.n	46fa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x37a>
    4650:	rsb	r3, r6, r6, lsl #4
    4654:	cmp	r7, #15
    4656:	sub.w	r3, r3, #30

      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    465a:	mov.w	r2, #193	; 0xc1
    465e:	mov	r1, r7
    4660:	it	cs
    4662:	movcs	r1, #15
    4664:	uxtb	r3, r3
    4666:	strb	r2, [r4, #0]
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    4668:	cbz	r1, 4680 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    466a:	adds	r4, #2
    466c:	sxth	r1, r1
    466e:	add.w	r1, r4, r1, lsl #1
    4672:	add	r3, sl
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
    4674:	ldrb.w	r2, [r3], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4678:	strh.w	r2, [r4], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    467c:	cmp	r1, r4
    467e:	bne.n	4674 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2f4>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    4680:	adds	r6, #1
    4682:	uxtb	r6, r6
    4684:	cmp	fp, r6
    4686:	bls.n	46dc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35c>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
    4688:	movs	r2, #32
    468a:	mov	r1, r8
    468c:	ldr	r0, [r5, #32]
    468e:	bl	4c0c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    4692:	cmp	r0, #1
    4694:	bne.w	439e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4698:	subs	r7, #15
    469a:	uxtb	r7, r7
    469c:	ldr	r0, [r5, #32]
    469e:	b.n	4626 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    46a0:	ldrb.w	r3, [r5, #49]	; 0x31
    46a4:	tst.w	r3, #17
    46a8:	bne.w	439e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    46ac:	ldr	r3, [sp, #112]	; 0x70
    46ae:	lsls	r6, r3, #21
    46b0:	bpl.w	4572 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1f2>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    46b4:	ldrb.w	r3, [r5, #51]	; 0x33
    46b8:	lsls	r4, r3, #30
    46ba:	bpl.w	439e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    46be:	movs	r2, #0
    46c0:	movs	r3, #0
    46c2:	mov	r0, r5
    46c4:	bl	4280 <ExFatFile::seekSet(unsigned long long)>
    46c8:	cmp	r0, #0
    46ca:	beq.w	439e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    46ce:	mov	r0, r5
    46d0:	bl	5184 <ExFatFile::truncate()>
    46d4:	cmp	r0, #0
    46d6:	beq.w	439e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    46da:	b.n	457a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
    46dc:	mov	r0, r5
    46de:	bl	4fac <ExFatFile::sync()>
    46e2:	b.n	43a8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x28>
    46e4:	.word	0x88888889
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    46e8:	ldrd	r2, r3, [r5, #16]
    46ec:	mov	r0, r5
    46ee:	bl	4280 <ExFatFile::seekSet(unsigned long long)>
    46f2:	cmp	r0, #0
    46f4:	bne.w	457a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fa>
    46f8:	b.n	439e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    46fa:	movs	r3, #192	; 0xc0
    46fc:	strb	r3, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    46fe:	ldr	r3, [sp, #4]
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    4700:	movs	r2, #3
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4702:	orn	r3, r3, #63	; 0x3f
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    4706:	strb	r2, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4708:	strb.w	r3, [r5, #51]	; 0x33

      dirStream->nameLength = nameLength;
    470c:	ldrb.w	r3, [sp, #12]
    4710:	strb	r3, [r4, #3]
    4712:	ldrh.w	r3, [sp, #8]
    4716:	strh	r3, [r4, #4]
    4718:	b.n	4680 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    471a:	movs	r3, #133	; 0x85
    471c:	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;
      if (FsDateTime::callback) {
    471e:	ldr	r3, [pc, #48]	; (4750 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3d0>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    4720:	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    4724:	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    4728:	ldr	r3, [r3, #0]
    472a:	cmp	r3, #0
    472c:	beq.n	4680 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    472e:	add.w	r2, sp, #23
    4732:	add.w	r1, sp, #26
    4736:	add	r0, sp, #24
    4738:	blx	r3
        dirFile->createTimeMs = ms10;
    473a:	ldrb.w	r1, [sp, #23]
    473e:	ldrh.w	r2, [sp, #26]
    4742:	ldrh.w	r3, [sp, #24]
    4746:	strb	r1, [r4, #20]
    4748:	strh	r2, [r4, #8]
    474a:	strh	r3, [r4, #10]
    474c:	b.n	4680 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x300>
    474e:	nop
    4750:	.word	0x2001c8f8

00004754 <ExFatFile::open(ExFatFile*, char const*, int)>:
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    4754:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4758:	mov	r6, r0
    475a:	sub	sp, #84	; 0x54
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    475c:	ldrb.w	r4, [r6, #49]	; 0x31
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    4760:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    4762:	movs	r0, #0
    4764:	strb.w	r0, [sp, #73]	; 0x49
    4768:	strb.w	r0, [sp, #74]	; 0x4a
    476c:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    4770:	cbnz	r4, 4780 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
    4772:	mov	r9, r3
    4774:	ldrb.w	r3, [r1, #49]	; 0x31
    4778:	tst.w	r3, #80	; 0x50
    477c:	mov	r5, r1
    477e:	bne.n	4788 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    4780:	movs	r0, #0
}
    4782:	add	sp, #84	; 0x54
    4784:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    4788:	ldrb	r3, [r2, #0]
    478a:	cmp	r3, #47	; 0x2f
    478c:	mov	r4, r2
    478e:	beq.n	47f6 <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    4790:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    4794:	mov	r1, r4
    4796:	add	r3, sp, #12
    4798:	add	r2, sp, #16
    479a:	mov	r0, r6
    479c:	bl	3fec <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    47a0:	cmp	r0, #0
    47a2:	beq.n	4780 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    47a4:	ldr	r3, [sp, #12]
    47a6:	ldrb	r3, [r3, #0]
    47a8:	cmp	r3, #0
    47aa:	beq.n	4820 <ExFatFile::open(ExFatFile*, char const*, int)+0xcc>
    47ac:	ldrb.w	r3, [sp, #16]
    47b0:	ldr	r2, [sp, #20]
    47b2:	str.w	r8, [sp]
    47b6:	mov	r1, r5
    47b8:	mov	r0, r6
    47ba:	bl	4380 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    47be:	cmp	r0, #0
    47c0:	beq.n	4780 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    47c2:	mov	r4, r6
    47c4:	add	r7, sp, #24
    47c6:	add.w	lr, r6, #48	; 0x30
    47ca:	ldr	r0, [r4, #0]
    47cc:	ldr	r1, [r4, #4]
    47ce:	ldr	r2, [r4, #8]
    47d0:	ldr	r3, [r4, #12]
    47d2:	mov	r5, r7
    47d4:	stmia	r5!, {r0, r1, r2, r3}
    47d6:	adds	r4, #16
    47d8:	cmp	r4, lr
    47da:	mov	r7, r5
    47dc:	bne.n	47ca <ExFatFile::open(ExFatFile*, char const*, int)+0x76>
    47de:	ldr	r0, [r4, #0]
    47e0:	str	r0, [r5, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    47e2:	mov	r0, r6
    47e4:	bl	4fac <ExFatFile::sync()>
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    47e8:	add	r5, sp, #24
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    47ea:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    47ee:	strb.w	r8, [r6, #51]	; 0x33
    47f2:	ldr	r4, [sp, #12]
    47f4:	b.n	4794 <ExFatFile::open(ExFatFile*, char const*, int)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    47f6:	adds	r4, #1
    47f8:	str	r4, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    47fa:	ldrb	r1, [r4, #0]
    47fc:	cmp	r1, #47	; 0x2f
    47fe:	beq.n	47f6 <ExFatFile::open(ExFatFile*, char const*, int)+0xa2>
      path++;
    }
    if (*path == 0) {
    4800:	cbz	r1, 4838 <ExFatFile::open(ExFatFile*, char const*, int)+0xe4>
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    4802:	movs	r2, #56	; 0x38
    4804:	add	r0, sp, #24
    4806:	movs	r1, #0
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    4808:	ldr	r7, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    480a:	bl	c10c <memset>
  m_attributes = FILE_ATTR_ROOT;
    480e:	movs	r2, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    4810:	movs	r3, #1
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    4812:	add	r5, sp, #24
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    4814:	str	r7, [sp, #56]	; 0x38
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    4816:	strb.w	r2, [sp, #73]	; 0x49
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    481a:	strb.w	r3, [sp, #75]	; 0x4b
    481e:	b.n	4790 <ExFatFile::open(ExFatFile*, char const*, int)+0x3c>
    4820:	ldrb.w	r3, [sp, #16]
    4824:	ldr	r2, [sp, #20]
    4826:	str.w	r9, [sp]
    482a:	mov	r1, r5
    482c:	mov	r0, r6
    482e:	bl	4380 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    4832:	add	sp, #84	; 0x54
    4834:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    4838:	movs	r2, #56	; 0x38
    483a:	mov	r0, r6
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    483c:	ldr	r4, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    483e:	bl	c10c <memset>
  m_attributes = FILE_ATTR_ROOT;
    4842:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    4844:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    4846:	str	r4, [r6, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    4848:	strb.w	r3, [r6, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    484c:	strb.w	r0, [r6, #51]	; 0x33
    4850:	b.n	4782 <ExFatFile::open(ExFatFile*, char const*, int)+0x2e>
    4852:	nop

00004854 <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    4854:	cbz	r1, 485e <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    4856:	add.w	r1, r1, #1088	; 0x440
    485a:	b.w	4754 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    485e:	mov	r0, r1
    4860:	bx	lr
    4862:	nop

00004864 <FsCache::sync() [clone .part.2]>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    4864:	push	{r4, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4866:	add.w	r2, r0, #12

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    486a:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    486c:	ldr	r0, [r0, #4]
    486e:	ldr	r1, [r4, #8]
    4870:	ldr	r3, [r0, #0]
    4872:	ldr	r3, [r3, #24]
    4874:	blx	r3
    4876:	cbz	r0, 4880 <FsCache::sync() [clone .part.2]+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    4878:	ldrb	r3, [r4, #0]
    487a:	bic.w	r3, r3, #1
    487e:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    4880:	pop	{r4, pc}
    4882:	nop

00004884 <FsCache::invalidate()>:
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    4884:	movs	r2, #0
  m_sector = 0XFFFFFFFF;
    4886:	mov.w	r3, #4294967295
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    488a:	strb	r2, [r0, #0]
  m_sector = 0XFFFFFFFF;
    488c:	str	r3, [r0, #8]
    488e:	bx	lr

00004890 <FsCache::get(unsigned long, unsigned char)>:
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    4890:	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    4892:	ldr	r5, [r0, #4]
    4894:	cbz	r5, 48d6 <FsCache::get(unsigned long, unsigned char)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    4896:	ldr	r3, [r0, #8]
    4898:	cmp	r3, r1
    489a:	mov	r4, r0
    489c:	mov	r7, r2
    489e:	mov	r6, r1
    48a0:	beq.n	48c0 <FsCache::get(unsigned long, unsigned char)+0x30>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    48a2:	ldrb	r3, [r0, #0]
    48a4:	lsls	r2, r3, #31
    48a6:	bmi.n	48ce <FsCache::get(unsigned long, unsigned char)+0x3e>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    48a8:	lsls	r3, r7, #30
    48aa:	bpl.n	48da <FsCache::get(unsigned long, unsigned char)+0x4a>
    48ac:	add.w	r5, r4, #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    48b0:	and.w	r2, r7, #1
    48b4:	movs	r3, #0
    48b6:	orrs	r3, r2
    48b8:	strb	r3, [r4, #0]
    48ba:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    48bc:	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
}
    48be:	pop	{r3, r4, r5, r6, r7, pc}
    48c0:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    48c4:	and.w	r2, r7, #1
    48c8:	orrs	r3, r2
    48ca:	strb	r3, [r4, #0]
  return m_cacheBuffer;

fail:
  return nullptr;
}
    48cc:	pop	{r3, r4, r5, r6, r7, pc}
    48ce:	bl	4864 <FsCache::sync() [clone .part.2]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    48d2:	cmp	r0, #0
    48d4:	bne.n	48a8 <FsCache::get(unsigned long, unsigned char)+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    48d6:	movs	r0, #0
    48d8:	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    48da:	ldr	r0, [r4, #4]
    48dc:	ldr	r3, [r0, #0]
    48de:	add.w	r5, r4, #12
    48e2:	ldr	r3, [r3, #8]
    48e4:	mov	r2, r5
    48e6:	mov	r1, r6
    48e8:	blx	r3
    48ea:	cmp	r0, #0
    48ec:	bne.n	48b0 <FsCache::get(unsigned long, unsigned char)+0x20>
    48ee:	b.n	48d6 <FsCache::get(unsigned long, unsigned char)+0x46>

000048f0 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>:
    }
  }
  return 1;
}
//-----------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    48f0:	push	{r3, r4, r5, lr}
    48f2:	mov	r4, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    48f4:	ldr.w	r1, [r0, #1052]	; 0x41c
    48f8:	mov	r5, r2
    48fa:	add.w	r1, r1, r4, lsr #7
    48fe:	add.w	r0, r0, #524	; 0x20c
    4902:	movs	r2, #0
    4904:	bl	4890 <FsCache::get(unsigned long, unsigned char)>
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    4908:	cbz	r0, 491c <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x2c>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    490a:	lsls	r4, r4, #2
    490c:	ubfx	r4, r4, #0, #9
    4910:	ldr	r3, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    4912:	adds	r2, r3, #1
    4914:	beq.n	4920 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x30>
    return 0;
  }
  *value = next;
    4916:	str	r3, [r5, #0]
  return 1;
    4918:	movs	r0, #1
    491a:	pop	{r3, r4, r5, pc}
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    491c:	movs	r0, #255	; 0xff
    491e:	pop	{r3, r4, r5, pc}
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    4920:	movs	r0, #0
  }
  *value = next;
  return 1;
}
    4922:	pop	{r3, r4, r5, pc}

00004924 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>:
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    4924:	push	{r3, r4, r5, lr}
    4926:	mov	r4, r1
    4928:	ldr.w	r1, [r0, #1052]	; 0x41c
    492c:	mov	r5, r2
    492e:	add.w	r1, r1, r4, lsr #7
    4932:	add.w	r0, r0, #524	; 0x20c
    4936:	movs	r2, #1
    4938:	bl	4890 <FsCache::get(unsigned long, unsigned char)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    493c:	mov	r3, r0
    493e:	cbz	r0, 494c <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]+0x28>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    4940:	lsls	r4, r4, #2
    4942:	ubfx	r4, r4, #0, #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    4946:	movs	r0, #1
    4948:	str	r5, [r3, r4]
    494a:	pop	{r3, r4, r5, pc}

 fail:
  return false;
}
    494c:	pop	{r3, r4, r5, pc}
    494e:	nop

00004950 <FsCache::sync()>:
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    4950:	ldrb	r3, [r0, #0]
    4952:	lsls	r3, r3, #31
    4954:	bmi.n	495a <FsCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    4956:	movs	r0, #1
    4958:	bx	lr
    495a:	b.w	4864 <FsCache::sync() [clone .part.2]>
    495e:	nop

00004960 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
 fail:
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    4960:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4964:	mov	r8, r0
    4966:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    4968:	mov	fp, r1
    496a:	cmp	r1, #0
    496c:	beq.n	49f8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
    496e:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    4970:	ldr.w	r3, [r8, #1064]	; 0x428
    4974:	cmp	r7, r3
    4976:	bcs.n	49f0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x90>
    4978:	and.w	r5, r7, #7
    497c:	movs	r3, #1
    497e:	lsl.w	r5, r3, r5
    4982:	uxtb	r5, r5
    4984:	ubfx	sl, r7, #3, #9
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    4988:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    498a:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    498c:	ldr.w	r1, [r8, #1060]	; 0x424
    4990:	movs	r2, #0
    4992:	add.w	r1, r1, r4, lsr #12
    4996:	mov	r0, r8
    4998:	bl	4890 <FsCache::get(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    499c:	cbz	r0, 49d0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    499e:	ldrb.w	r1, [r0, sl]
    49a2:	b.n	49ba <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    49a4:	cmp	r2, r9
    49a6:	beq.n	49fe <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9e>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    49a8:	cmp	r7, r4
    49aa:	beq.n	49ce <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    49ac:	ldr.w	r2, [r8, #1064]	; 0x428
    49b0:	cmp	r4, r2
    49b2:	bcs.n	49e4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x84>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    49b4:	ands.w	r5, r3, #255	; 0xff
    49b8:	beq.n	49d4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    49ba:	adds	r4, #1
        if (!(mask & cache[i])) {
    49bc:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    49be:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    49c2:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    49c6:	beq.n	49a4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    49c8:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    49ca:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    49cc:	bne.n	49ac <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    49ce:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    49d0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    49d4:	add.w	sl, sl, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    49d8:	cmp.w	sl, #512	; 0x200
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    49dc:	mov.w	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    49e0:	bne.n	499e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    49e2:	b.n	49e8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    49e4:	movs	r6, #0
    49e6:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    49e8:	mov.w	sl, #0
    49ec:	movs	r5, #1
    49ee:	b.n	498c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    49f0:	movs	r7, #0
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    49f2:	mov	sl, r7
    49f4:	movs	r5, #1
    49f6:	b.n	4988 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    49f8:	ldr.w	r7, [r0, #1048]	; 0x418
    49fc:	b.n	4970 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    49fe:	cmp.w	fp, #0
    4a02:	bne.n	4a0e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xae>
    4a04:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    4a08:	it	eq
    4a0a:	streq.w	r6, [r8, #1048]	; 0x418
            }
            return bgnAlloc + 2;
    4a0e:	adds	r0, r6, #2
    4a10:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004a14 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    4a14:	push	{r3, r4, r5, r6, r7, lr}
    4a16:	mov	r4, r0
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    4a18:	movs	r3, #0
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
  m_sector = 0XFFFFFFFF;
    4a1a:	mov.w	r6, #4294967295
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4a1e:	add.w	r7, r0, #524	; 0x20c
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
  m_blockDev = dev;
    4a22:	str.w	r1, [r0, #1080]	; 0x438
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this partition.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    4a26:	str	r1, [r0, #4]
    4a28:	str.w	r1, [r0, #528]	; 0x210

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    4a2c:	mov	r5, r2
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4a2e:	mov	r0, r7
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    4a30:	strb.w	r3, [r4, #1084]	; 0x43c
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    4a34:	strb	r3, [r4, #0]
    4a36:	strb.w	r3, [r4, #524]	; 0x20c
  m_sector = 0XFFFFFFFF;
    4a3a:	str	r6, [r4, #8]
    4a3c:	str.w	r6, [r4, #532]	; 0x214
    4a40:	mov	r2, r3
    4a42:	mov	r1, r3
    4a44:	bl	4890 <FsCache::get(unsigned long, unsigned char)>

  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    4a48:	cmp	r5, #4
    4a4a:	bhi.n	4a66 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    4a4c:	mov	r6, r0
    4a4e:	cbz	r0, 4a66 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    4a50:	cbnz	r5, 4a6a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    4a52:	movs	r2, #5
    4a54:	ldr	r1, [pc, #152]	; (4af0 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xdc>)
    4a56:	adds	r0, r6, #3
    4a58:	bl	c8dc <strncmp>
    4a5c:	cbnz	r0, 4a66 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    4a5e:	ldrb.w	r3, [r6, #108]	; 0x6c
    4a62:	cmp	r3, #9
    4a64:	beq.n	4a9a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x86>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    4a66:	movs	r0, #0
    4a68:	pop	{r3, r4, r5, r6, r7, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    4a6a:	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    4a6c:	add.w	r3, r0, r3, lsl #4
    4a70:	ldrb.w	r2, [r3, #446]	; 0x1be
    4a74:	ands.w	r2, r2, #127	; 0x7f
    4a78:	bne.n	4a66 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
    4a7a:	ldrb.w	r3, [r3, #450]	; 0x1c2
    4a7e:	cmp	r3, #0
    4a80:	beq.n	4a66 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    4a82:	add.w	r5, r0, r5, lsl #4
    4a86:	mov	r0, r7
    4a88:	ldr.w	r5, [r5, #438]	; 0x1b6
    4a8c:	mov	r1, r5
    4a8e:	bl	4890 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    4a92:	mov	r6, r0
    4a94:	cmp	r0, #0
    4a96:	bne.n	4a52 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x3e>
    4a98:	b.n	4a66 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x52>
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    4a9a:	ldr	r3, [r6, #80]	; 0x50
    4a9c:	add	r3, r5
    4a9e:	str.w	r3, [r4, #1052]	; 0x41c
    4aa2:	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    4aa4:	str.w	r3, [r4, #1056]	; 0x420
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    4aa8:	ldr	r3, [r6, #88]	; 0x58
    4aaa:	add	r5, r3
    4aac:	str.w	r5, [r4, #1060]	; 0x424
    4ab0:	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    4ab2:	str.w	r3, [r4, #1064]	; 0x428
    4ab6:	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    4ab8:	str.w	r3, [r4, #1068]	; 0x42c
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    4abc:	ldrb.w	r3, [r6, #109]	; 0x6d
    4ac0:	strb.w	r3, [r4, #1085]	; 0x43d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4ac4:	movs	r5, #1
    4ac6:	adds	r3, #9
    4ac8:	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    4acc:	subs	r2, r3, #1
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    4ace:	str.w	r0, [r4, #1048]	; 0x418
  bitmapFind(0, 1);
    4ad2:	mov	r1, r0
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    4ad4:	str.w	r3, [r4, #1076]	; 0x434
  m_clusterMask = m_bytesPerCluster - 1;
    4ad8:	str.w	r2, [r4, #1072]	; 0x430
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    4adc:	mov	r0, r4
    4ade:	mov	r2, r5
    4ae0:	bl	4960 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    4ae4:	movs	r3, #64	; 0x40
    4ae6:	strb.w	r3, [r4, #1084]	; 0x43c
  return true;
    4aea:	mov	r0, r5

 fail:
  return false;
}
    4aec:	pop	{r3, r4, r5, r6, r7, pc}
    4aee:	nop
    4af0:	.word	0x0001343c

00004af4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4af4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    4af8:	subs	r1, #2
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4afa:	mov	r8, r0
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    4afc:	ldr.w	r0, [r0, #1064]	; 0x428
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    4b00:	mov	r5, r2
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    4b02:	adds	r2, r1, r2
    4b04:	cmp	r2, r0
    4b06:	bhi.n	4b7a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    4b08:	mov	sl, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    4b0a:	ldr.w	r3, [r8, #1048]	; 0x418
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    4b0e:	cmp.w	sl, #0
    4b12:	bne.n	4b80 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    4b14:	cmp	r1, r3
      m_bitmapStart = start;
    4b16:	it	cc
    4b18:	strcc.w	r1, [r8, #1048]	; 0x418
    }
  }
  mask = 1 << (start & 7);
    4b1c:	and.w	r4, r1, #7
    4b20:	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    4b22:	ldr.w	r3, [r8, #1060]	; 0x424
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    4b26:	lsl.w	r4, r2, r4
    4b2a:	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    4b2c:	add.w	r9, r3, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
    4b30:	ubfx	r6, r1, #3, #9
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    4b34:	movs	r2, #1
    4b36:	mov	r1, r9
    4b38:	mov	r0, r8
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    4b3a:	add	r9, r2
    4b3c:	bl	4890 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    4b40:	cbz	r0, 4b7a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    4b42:	adds	r7, r0, r6
    4b44:	add.w	r0, r0, #512	; 0x200
    4b48:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    4b4c:	tst	r2, r4
    4b4e:	ite	ne
    4b50:	movne	r6, #1
    4b52:	moveq	r6, #0
    4b54:	cmp	r6, sl
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    4b56:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    4b5a:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    4b5e:	beq.n	4b7a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    4b60:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    4b62:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    4b66:	beq.n	4b94 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa0>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    4b68:	ands.w	r4, r4, #255	; 0xff
    4b6c:	bne.n	4b4c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    4b6e:	cmp	r0, r7
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    4b70:	mov	r6, r4
    4b72:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    4b76:	bne.n	4b48 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    4b78:	b.n	4b34 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
    }
    i = 0;
  }

 fail:
  return false;
    4b7a:	movs	r0, #0
    4b7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    4b80:	cmp	r1, r3
    4b82:	bhi.n	4b1c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    4b84:	cmp	r2, r3
    4b86:	bls.n	4b1c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    4b88:	cmp	r2, r0
    4b8a:	it	cs
    4b8c:	movcs	r2, #0
    4b8e:	str.w	r2, [r8, #1048]	; 0x418
    4b92:	b.n	4b1c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    4b94:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    4b96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4b9a:	nop

00004b9c <ExFatPartition::chainSize(unsigned long)>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    4b9c:	push	{r4, r5, r6, lr}
    4b9e:	sub	sp, #8
    4ba0:	add	r6, sp, #8
    4ba2:	mov	r5, r0
    4ba4:	str.w	r1, [r6, #-4]!
  uint32_t n = 0;
    4ba8:	movs	r4, #0
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4baa:	ldr.w	r3, [r5, #1064]	; 0x428
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    4bae:	ldr	r1, [sp, #4]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4bb0:	adds	r3, #1
    4bb2:	cmp	r1, r3
    4bb4:	bls.n	4bbc <ExFatPartition::chainSize(unsigned long)+0x20>
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    4bb6:	movs	r0, #0
    n++;
  } while (status);
  return n;
}
    4bb8:	add	sp, #8
    4bba:	pop	{r4, r5, r6, pc}
    4bbc:	mov	r2, r6
    4bbe:	mov	r0, r5
    4bc0:	bl	48f0 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    4bc4:	sxtb	r0, r0
    if (status < 0) return 0;
    4bc6:	cmp	r0, #0
    4bc8:	blt.n	4bb6 <ExFatPartition::chainSize(unsigned long)+0x1a>
    n++;
    4bca:	add.w	r4, r4, #1
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    4bce:	bne.n	4baa <ExFatPartition::chainSize(unsigned long)+0xe>
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    4bd0:	mov	r0, r4
  } while (status);
  return n;
}
    4bd2:	add	sp, #8
    4bd4:	pop	{r4, r5, r6, pc}
    4bd6:	nop

00004bd8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    4bd8:	push	{r3, r4, r5, r6, r7, lr}
    4bda:	mov	r6, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4bdc:	ldmia.w	r6, {r3, r5}
    4be0:	ldr.w	r1, [r0, #1072]	; 0x430
    4be4:	ldr.w	r4, [r0, #1060]	; 0x424
    4be8:	ldrb.w	r7, [r0, #1085]	; 0x43d
    4bec:	ands	r1, r5
    4bee:	subs	r3, #2
    4bf0:	add.w	r1, r4, r1, lsr #9
    4bf4:	lsls	r3, r7
    4bf6:	add	r1, r3
    4bf8:	add.w	r0, r0, #524	; 0x20c
    4bfc:	bl	4890 <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    4c00:	cbz	r0, 4c0a <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    4c02:	ldr	r3, [r6, #4]
    4c04:	ubfx	r3, r3, #0, #9
    4c08:	add	r0, r3
}
    4c0a:	pop	{r3, r4, r5, r6, r7, pc}

00004c0c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4c0c:	push	{r4, r5, r6, lr}
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4c0e:	ldr	r4, [r1, #4]
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4c10:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    4c12:	adds	r3, r4, r2
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4c14:	ldr.w	r1, [r0, #1072]	; 0x430
  pos->position += offset;
    4c18:	str	r3, [r5, #4]
  tmp >>= bytesPerClusterShift();
    4c1a:	ldrb.w	r3, [r0, #1085]	; 0x43d
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4c1e:	ands	r4, r1
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    4c20:	adds	r3, #9
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4c22:	add	r2, r4
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    4c24:	uxtb	r3, r3
    4c26:	lsr.w	r4, r2, r3
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4c2a:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    4c2c:	cbz	r4, 4c3e <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    4c2e:	ldrb	r3, [r5, #8]
    4c30:	cbz	r3, 4c42 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    4c32:	ldr	r3, [r5, #0]
    4c34:	adds	r3, #1
    4c36:	str	r3, [r5, #0]
    4c38:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    4c3a:	cmp	r4, #0
    4c3c:	bne.n	4c2e <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    4c3e:	movs	r0, #1
    4c40:	pop	{r4, r5, r6, pc}
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4c42:	ldr.w	r3, [r6, #1064]	; 0x428
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    4c46:	ldr	r1, [r5, #0]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4c48:	adds	r3, #1
    4c4a:	cmp	r1, r3
    4c4c:	bls.n	4c54 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x48>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    4c4e:	mov.w	r0, #4294967295
        return status;
      }
    }
  }
  return 1;
}
    4c52:	pop	{r4, r5, r6, pc}
    4c54:	mov	r2, r5
    4c56:	mov	r0, r6
    4c58:	bl	48f0 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    4c5c:	sxtb	r0, r0
      if (status != 1) {
    4c5e:	cmp	r0, #1
    4c60:	beq.n	4c38 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    4c62:	pop	{r4, r5, r6, pc}

00004c64 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4c64:	ldr.w	r3, [r0, #1064]	; 0x428
    4c68:	adds	r3, #1
    4c6a:	cmp	r3, r1
    4c6c:	bcs.n	4c72 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    4c6e:	movs	r0, #255	; 0xff
    4c70:	bx	lr
    4c72:	b.w	48f0 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
    4c76:	nop

00004c78 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4c78:	cmp	r1, #1
    4c7a:	bls.n	4c98 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x20>
    4c7c:	ldr.w	r3, [r0, #1064]	; 0x428
    4c80:	adds	r3, #1
    4c82:	cmp	r1, r3
  }
  *value = next;
  return 1;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    4c84:	push	{r4}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4c86:	bls.n	4c90 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
}
    4c88:	movs	r0, #0
    4c8a:	ldr.w	r4, [sp], #4
    4c8e:	bx	lr
    4c90:	ldr.w	r4, [sp], #4
    4c94:	b.w	4924 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    4c98:	movs	r0, #0
    4c9a:	bx	lr

00004c9c <ExFatPartition::freeChain(unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    4c9c:	push	{r4, r5, r6, r7, lr}
    4c9e:	mov	r4, r1
    4ca0:	sub	sp, #12
    4ca2:	mov	r5, r0
  uint32_t next;
  uint32_t start = cluster;
    4ca4:	mov	r6, r1
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4ca6:	ldr.w	r3, [r5, #1064]	; 0x428
    4caa:	adds	r3, #1
    4cac:	cmp	r4, r3
    4cae:	bls.n	4cb6 <ExFatPartition::freeChain(unsigned long)+0x1a>
  } while (status);

  return true;

 fail:
  return false;
    4cb0:	movs	r0, #0
}
    4cb2:	add	sp, #12
    4cb4:	pop	{r4, r5, r6, r7, pc}
    4cb6:	add	r2, sp, #4
    4cb8:	mov	r1, r4
    4cba:	mov	r0, r5
    4cbc:	bl	48f0 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    4cc0:	sxtb	r7, r0
    if (status < 0) {
    4cc2:	cmp	r7, #0
    4cc4:	blt.n	4cb0 <ExFatPartition::freeChain(unsigned long)+0x14>
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4cc6:	cmp	r4, #1
    4cc8:	bls.n	4cb0 <ExFatPartition::freeChain(unsigned long)+0x14>
    4cca:	ldr.w	r3, [r5, #1064]	; 0x428
    4cce:	adds	r3, #1
    4cd0:	cmp	r4, r3
    4cd2:	bhi.n	4cb0 <ExFatPartition::freeChain(unsigned long)+0x14>
    4cd4:	movs	r2, #0
    4cd6:	mov	r1, r4
    4cd8:	mov	r0, r5
    4cda:	bl	4924 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    4cde:	cmp	r0, #0
    4ce0:	beq.n	4cb0 <ExFatPartition::freeChain(unsigned long)+0x14>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    4ce2:	ldr	r3, [sp, #4]
    4ce4:	adds	r4, #1
    4ce6:	cmp	r4, r3
    4ce8:	bne.n	4d02 <ExFatPartition::freeChain(unsigned long)+0x66>
    4cea:	cmp	r7, #0
    4cec:	bne.n	4ca6 <ExFatPartition::freeChain(unsigned long)+0xa>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4cee:	mov	r3, r7
    4cf0:	subs	r2, r4, r6
    4cf2:	mov	r1, r6
    4cf4:	mov	r0, r5
    4cf6:	bl	4af4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4cfa:	cmp	r0, #0
    4cfc:	beq.n	4cb0 <ExFatPartition::freeChain(unsigned long)+0x14>

  return true;

 fail:
  return false;
}
    4cfe:	add	sp, #12
    4d00:	pop	{r4, r5, r6, r7, pc}
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4d02:	subs	r2, r4, r6
    4d04:	mov	r1, r6
    4d06:	movs	r3, #0
    4d08:	mov	r0, r5
    4d0a:	bl	4af4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4d0e:	cmp	r0, #0
    4d10:	beq.n	4cb0 <ExFatPartition::freeChain(unsigned long)+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    4d12:	ldr	r4, [sp, #4]
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    4d14:	cmp	r7, #0
    4d16:	beq.n	4cb2 <ExFatPartition::freeChain(unsigned long)+0x16>
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    4d18:	mov	r6, r4
    4d1a:	b.n	4ca6 <ExFatPartition::freeChain(unsigned long)+0xa>

00004d1c <ExFatPartition::rootLength()>:
      }
    }
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    4d1c:	push	{r4, lr}
    4d1e:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    4d20:	ldr.w	r1, [r0, #1068]	; 0x42c
    4d24:	bl	4b9c <ExFatPartition::chainSize(unsigned long)>
  return nc << bytesPerClusterShift();
    4d28:	ldrb.w	r3, [r4, #1085]	; 0x43d
    4d2c:	adds	r3, #9
    4d2e:	uxtb	r3, r3
}
    4d30:	lsls	r0, r3
    4d32:	pop	{r4, pc}

00004d34 <exFatHashName(char const*, unsigned int, unsigned short)>:
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    4d34:	cbz	r1, 4d6a <exFatHashName(char const*, unsigned int, unsigned short)+0x36>
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    4d36:	push	{r4}
    4d38:	add	r1, r0
    4d3a:	lsls	r3, r2, #15
    4d3c:	orr.w	r3, r3, r2, lsr #1
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    4d40:	ldrb.w	r2, [r0], #1
    if ('a' <= c && c <= 'z') {
    4d44:	sub.w	r4, r2, #97	; 0x61
    4d48:	cmp	r4, #25
      c -= 'a' - 'A';
    4d4a:	itt	ls
    4d4c:	subls	r2, #32
    4d4e:	uxtbls	r2, r2
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    4d50:	uxtah	r2, r2, r3
    4d54:	uxth	r2, r2
    4d56:	lsls	r3, r2, #15
    4d58:	orr.w	r2, r3, r2, lsr #1
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    4d5c:	cmp	r1, r0
    4d5e:	uxth	r2, r2
    4d60:	bne.n	4d3a <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    4d62:	mov	r0, r2
    4d64:	ldr.w	r4, [sp], #4
    4d68:	bx	lr
    4d6a:	mov	r0, r2
    4d6c:	bx	lr
    4d6e:	nop

00004d70 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    4d70:	cbz	r3, 4dc4 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x54>
  }
  return hash;
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    4d72:	push	{r4, r5, r6}
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    4d74:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4d76:	cmp	r4, #126	; 0x7e
    4d78:	bhi.n	4db8 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
    4d7a:	add	r3, r2
    4d7c:	adds	r5, r1, r3
    4d7e:	add	r2, r1
    4d80:	adds	r0, #2
    4d82:	ldrb.w	r3, [r2], #1
    4d86:	uxtb	r4, r4
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    4d88:	sub.w	r1, r3, #97	; 0x61
    4d8c:	cmp	r1, #25
    4d8e:	sub.w	r1, r4, #97	; 0x61
    4d92:	ite	ls
    4d94:	movls	r6, #32
    4d96:	movhi	r6, #0
    4d98:	cmp	r1, #25
    4d9a:	ite	ls
    4d9c:	movls	r1, #32
    4d9e:	movhi	r1, #0
    4da0:	subs	r3, r3, r6
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4da2:	subs	r4, r4, r1
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    4da4:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4da6:	uxtb	r4, r4
    4da8:	cmp	r4, r3
    4daa:	bne.n	4db8 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    4dac:	cmp	r2, r5
    4dae:	beq.n	4dbe <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4e>
    4db0:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4db4:	cmp	r4, #126	; 0x7e
    4db6:	bls.n	4d82 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    4db8:	movs	r0, #0
    }
  }
  return true;
}
    4dba:	pop	{r4, r5, r6}
    4dbc:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    4dbe:	movs	r0, #1
}
    4dc0:	pop	{r4, r5, r6}
    4dc2:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    4dc4:	movs	r0, #1
}
    4dc6:	bx	lr

00004dc8 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4dc8:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    4dca:	push	{r3, r4, r5, r6, r7, lr}
    4dcc:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4dce:	ldr	r0, [r0, #32]
    4dd0:	cbz	r1, 4dd4 <ExFatFile::addCluster()+0xc>
    4dd2:	adds	r1, #1
    4dd4:	movs	r2, #1
    4dd6:	bl	4960 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    4dda:	cmp	r0, #1
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4ddc:	mov	r6, r0
  if (find < 2) {
    4dde:	bls.n	4e40 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    4de0:	movs	r3, #1
    4de2:	mov	r1, r0
    4de4:	mov	r2, r3
    4de6:	ldr	r0, [r4, #32]
    4de8:	bl	4af4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4dec:	mov	r7, r0
    4dee:	cbz	r0, 4e40 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    4df0:	ldr	r0, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4df2:	ldrb.w	r3, [r4, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    4df6:	cbz	r0, 4e46 <ExFatFile::addCluster()+0x7e>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    4df8:	lsls	r2, r3, #25
    4dfa:	bpl.n	4e24 <ExFatFile::addCluster()+0x5c>
    if (find == (m_curCluster + 1)) {
    4dfc:	adds	r2, r0, #1
    4dfe:	cmp	r6, r2
    4e00:	beq.n	4e4e <ExFatFile::addCluster()+0x86>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    4e02:	bic.w	r2, r3, #64	; 0x40
    4e06:	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4e0a:	ldr	r3, [r4, #28]
    4e0c:	b.n	4e1a <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    4e0e:	ldr	r0, [r4, #32]
    4e10:	bl	4c78 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4e14:	cbz	r0, 4e40 <ExFatFile::addCluster()+0x78>
    4e16:	ldr	r0, [r4, #24]
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4e18:	mov	r3, r5
      if (!m_vol->fatPut(c, c + 1)) {
    4e1a:	adds	r5, r3, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4e1c:	cmp	r3, r0
      if (!m_vol->fatPut(c, c + 1)) {
    4e1e:	mov	r1, r3
    4e20:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4e22:	bcc.n	4e0e <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    4e24:	mov.w	r2, #4294967295
    4e28:	mov	r1, r6
    4e2a:	ldr	r0, [r4, #32]
    4e2c:	bl	4c78 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4e30:	cbz	r0, 4e40 <ExFatFile::addCluster()+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    4e32:	ldr	r1, [r4, #24]
    4e34:	cbz	r1, 4e4e <ExFatFile::addCluster()+0x86>
    if (!m_vol->fatPut(m_curCluster, find)) {
    4e36:	mov	r2, r6
    4e38:	ldr	r0, [r4, #32]
    4e3a:	bl	4c78 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4e3e:	cbnz	r0, 4e4e <ExFatFile::addCluster()+0x86>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    4e40:	movs	r7, #0
}
    4e42:	mov	r0, r7
    4e44:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4e46:	orr.w	r3, r3, #64	; 0x40
    4e4a:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    4e4e:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    4e50:	mov	r0, r7
    4e52:	pop	{r3, r4, r5, r6, r7, pc}

00004e54 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4e54:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    4e58:	add.w	fp, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4e5c:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    4e5e:	ldmia.w	fp, {r0, r1, r2}
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4e62:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    4e64:	add.w	r8, sp, #12
    4e68:	stmia.w	r8, {r0, r1, r2}
    4e6c:	movs	r7, #0
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    4e6e:	mov	sl, r7
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    4e70:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    4e72:	movs	r2, #0
    4e74:	mov	r1, r8
    4e76:	ldr	r0, [r6, #32]
    4e78:	bl	4bd8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    4e7c:	uxtb.w	r9, r7
    if (!cache) {
    4e80:	mov	r5, r0
    4e82:	cbz	r0, 4e92 <ExFatFile::syncDir()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    4e84:	ldrb	r2, [r0, #0]
    4e86:	cmp	r2, #192	; 0xc0
    4e88:	beq.n	4f30 <ExFatFile::syncDir()+0xdc>
    4e8a:	cmp	r2, #193	; 0xc1
    4e8c:	beq.n	4ea6 <ExFatFile::syncDir()+0x52>
    4e8e:	cmp	r2, #133	; 0x85
    4e90:	beq.n	4ee6 <ExFatFile::syncDir()+0x92>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    4e92:	ldrb.w	r3, [r6, #50]	; 0x32
    4e96:	orr.w	r3, r3, #1
    4e9a:	strb.w	r3, [r6, #50]	; 0x32
  return false;
    4e9e:	movs	r0, #0
}
    4ea0:	add	sp, #28
    4ea2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ea6:	mov	r0, r2
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4ea8:	movs	r1, #0
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4eaa:	ldrb	r2, [r5, r1]
    4eac:	lsls	r3, r4, #15
    4eae:	orr.w	r4, r3, r4, lsr #1
    4eb2:	uxtah	r4, r2, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4eb6:	cmp	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    4eb8:	uxth	r4, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4eba:	add.w	r1, r1, #1
    4ebe:	beq.n	4edc <ExFatFile::syncDir()+0x88>
    4ec0:	cmp	r1, #31
    4ec2:	bls.n	4eaa <ExFatFile::syncDir()+0x56>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    4ec4:	cmp	sl, r9
    4ec6:	beq.n	4f6c <ExFatFile::syncDir()+0x118>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    4ec8:	movs	r2, #32
    4eca:	mov	r1, r8
    4ecc:	ldr	r0, [r6, #32]
    4ece:	bl	4c0c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    4ed2:	cmp	r0, #1
    4ed4:	add.w	r7, r7, #1
    4ed8:	beq.n	4e72 <ExFatFile::syncDir()+0x1e>
    4eda:	b.n	4e92 <ExFatFile::syncDir()+0x3e>
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    4edc:	cmp	r0, #133	; 0x85
    4ede:	ite	eq
    4ee0:	moveq	r1, #4
    4ee2:	movne	r1, #2
    4ee4:	b.n	4eaa <ExFatFile::syncDir()+0x56>
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    4ee6:	ldr	r3, [pc, #192]	; (4fa8 <ExFatFile::syncDir()+0x154>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4ee8:	ldrb.w	r1, [r6, #49]	; 0x31
    4eec:	ldr	r3, [r3, #0]
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    4eee:	ldrb.w	sl, [r0, #1]
    4ef2:	and.w	r1, r1, #55	; 0x37
    4ef6:	strh	r1, [r0, #4]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    4ef8:	cmp	r3, #0
    4efa:	beq.n	4ea6 <ExFatFile::syncDir()+0x52>
          m_vol->dataCacheDirty();
    4efc:	ldr	r1, [r6, #32]
    invalidate();
    return m_cacheBuffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    4efe:	ldrb.w	r2, [r1, #524]	; 0x20c
    4f02:	orr.w	r2, r2, #1
    4f06:	strb.w	r2, [r1, #524]	; 0x20c
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    4f0a:	add	r0, sp, #8
    4f0c:	add.w	r2, sp, #7
    4f10:	add.w	r1, sp, #10
    4f14:	blx	r3
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    4f16:	ldrh.w	r2, [sp, #10]
          setLe16(df->modifyDate, date);
    4f1a:	ldrh.w	r3, [sp, #8]
        if (FsDateTime::callback) {
          m_vol->dataCacheDirty();
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    4f1e:	ldrb.w	r1, [sp, #7]
    4f22:	strb	r1, [r5, #21]
    4f24:	strh	r2, [r5, #12]
    4f26:	strh	r2, [r5, #16]
    4f28:	strh	r3, [r5, #14]
    4f2a:	strh	r3, [r5, #18]
    4f2c:	ldrb	r0, [r5, #0]
    4f2e:	b.n	4ea8 <ExFatFile::syncDir()+0x54>
        }
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    4f30:	ldrb.w	r3, [r6, #51]	; 0x33
    4f34:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    4f38:	ldrb	r3, [r0, #1]
    4f3a:	ite	ne
    4f3c:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    4f40:	biceq.w	r3, r3, #2
    4f44:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
    4f46:	ldrd	r2, r3, [r6, #16]

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    4f4a:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    4f4e:	ldrd	r2, r3, [r6, #8]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    4f52:	ldr	r1, [r6, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    4f54:	str	r1, [r0, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    4f56:	strd	r2, r3, [r0, #24]
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    4f5a:	ldr	r2, [r6, #32]
    4f5c:	ldrb.w	r3, [r2, #524]	; 0x20c
    4f60:	orr.w	r3, r3, #1
    4f64:	strb.w	r3, [r2, #524]	; 0x20c
    4f68:	ldrb	r0, [r0, #0]
    4f6a:	b.n	4ea8 <ExFatFile::syncDir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    4f6c:	mov	r1, fp
    4f6e:	movs	r2, #1
    4f70:	ldr	r0, [r6, #32]
    4f72:	bl	4bd8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    4f76:	cmp	r0, #0
    4f78:	beq.n	4e92 <ExFatFile::syncDir()+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    4f7a:	ldr	r5, [r6, #32]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4f7c:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4f7e:	mov	r0, r5
    4f80:	bl	4950 <FsCache::sync()>
    4f84:	cmp	r0, #0
    4f86:	beq.n	4e92 <ExFatFile::syncDir()+0x3e>
    4f88:	add.w	r0, r5, #524	; 0x20c
    4f8c:	bl	4950 <FsCache::sync()>
    4f90:	cmp	r0, #0
    4f92:	beq.w	4e92 <ExFatFile::syncDir()+0x3e>
    4f96:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4f9a:	ldr	r3, [r0, #0]
    4f9c:	ldr	r3, [r3, #20]
    4f9e:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4fa0:	cmp	r0, #0
    4fa2:	beq.w	4e92 <ExFatFile::syncDir()+0x3e>
    4fa6:	b.n	4ea0 <ExFatFile::syncDir()+0x4c>
    4fa8:	.word	0x2001c8f8

00004fac <ExFatFile::sync()>:
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    4fac:	ldrb.w	r2, [r0, #49]	; 0x31
    4fb0:	cbz	r2, 4fd8 <ExFatFile::sync()+0x2c>

fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
    4fb2:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    4fb4:	ldrb.w	r2, [r0, #51]	; 0x33
    4fb8:	lsls	r1, r2, #24
    4fba:	bmi.n	4fdc <ExFatFile::sync()+0x30>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    4fbc:	ldr	r5, [r0, #32]
    4fbe:	mov	r4, r0
    4fc0:	mov	r0, r5
    4fc2:	bl	4950 <FsCache::sync()>
    4fc6:	cbnz	r0, 4fec <ExFatFile::sync()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    4fc8:	ldrb.w	r3, [r4, #50]	; 0x32
    4fcc:	orr.w	r3, r3, #1
    4fd0:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    4fd4:	movs	r0, #0
}
    4fd6:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    4fd8:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    4fda:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    4fdc:	and.w	r2, r2, #127	; 0x7f
    4fe0:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    4fe4:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    4fe8:	b.w	4e54 <ExFatFile::syncDir()>
    4fec:	add.w	r0, r5, #524	; 0x20c
    4ff0:	bl	4950 <FsCache::sync()>
    4ff4:	cmp	r0, #0
    4ff6:	beq.n	4fc8 <ExFatFile::sync()+0x1c>
    4ff8:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4ffc:	ldr	r3, [r0, #0]
    4ffe:	ldr	r3, [r3, #20]
    5000:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5002:	cmp	r0, #0
    5004:	beq.n	4fc8 <ExFatFile::sync()+0x1c>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    5006:	movs	r0, #1
    5008:	pop	{r3, r4, r5, pc}
    500a:	nop

0000500c <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    500c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    5010:	ldrb.w	r3, [r0, #49]	; 0x31
    5014:	lsls	r1, r3, #25

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    5016:	mov	r4, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    5018:	bmi.n	50e2 <ExFatFile::addDirCluster()+0xd6>
    501a:	ldr	r0, [r0, #8]
    501c:	ldr	r3, [r4, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    501e:	ldr.w	r3, [r3, #1076]	; 0x434
    5022:	add	r0, r3
    5024:	cmp.w	r0, #67108864	; 0x4000000
    5028:	bcc.n	5030 <ExFatFile::addDirCluster()+0x24>
  }
  return sync();

 fail:
  return false;
}
    502a:	movs	r0, #0
    502c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    5030:	mov	r0, r4
    5032:	bl	4dc8 <ExFatFile::addCluster()>
    5036:	cmp	r0, #0
    5038:	beq.n	502a <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    503a:	ldr	r6, [r4, #32]
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    503c:	ldrb.w	r3, [r6, #524]	; 0x20c
    5040:	lsls	r2, r3, #31

  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
    5042:	add.w	r5, r6, #524	; 0x20c
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    5046:	bmi.n	50ea <ExFatFile::addDirCluster()+0xde>
      return nullptr;
    }
    invalidate();
    5048:	mov	r0, r5
    return m_cacheBuffer;
    504a:	add.w	r6, r6, #536	; 0x218
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    504e:	bl	4884 <FsCache::invalidate()>
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    5052:	mov.w	r2, #512	; 0x200
    5056:	movs	r1, #0
    5058:	mov	r0, r6
    505a:	bl	c10c <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    505e:	ldr	r2, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    5060:	ldr	r3, [r4, #24]
    5062:	ldrb.w	r0, [r2, #1085]	; 0x43d
    5066:	ldr.w	r1, [r2, #1060]	; 0x424
    506a:	sub.w	r8, r3, #2
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    506e:	movs	r7, #1
    5070:	lsl.w	r8, r8, r0
    5074:	lsls.w	r3, r7, r0
    5078:	add	r8, r1
    507a:	it	ne
    507c:	movne	r5, #0
    507e:	beq.n	50a4 <ExFatFile::addDirCluster()+0x98>
    5080:	ldr.w	r0, [r2, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5084:	ldr	r3, [r0, #0]
    5086:	add.w	r1, r8, r5
    508a:	ldr	r3, [r3, #24]
    508c:	mov	r2, r6
    508e:	blx	r3
    5090:	adds	r5, #1
    if (!m_vol->writeSector(sector + i, cache)) {
    5092:	cmp	r0, #0
    5094:	beq.n	502a <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    5096:	ldr	r2, [r4, #32]
    5098:	ldrb.w	r3, [r2, #1085]	; 0x43d
    509c:	lsl.w	r3, r7, r3
    50a0:	cmp	r3, r5
    50a2:	bhi.n	5080 <ExFatFile::addDirCluster()+0x74>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    50a4:	ldrb.w	r3, [r4, #49]	; 0x31
    50a8:	lsls	r3, r3, #25
    50aa:	bmi.n	50d8 <ExFatFile::addDirCluster()+0xcc>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    50ac:	ldrb.w	r3, [r4, #51]	; 0x33
    50b0:	orn	r3, r3, #127	; 0x7f
    50b4:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    50b8:	ldr.w	r6, [r2, #1076]	; 0x434
    50bc:	ldrd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    50c0:	ldrd	r0, r1, [r4, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    50c4:	adds	r2, r2, r6
    50c6:	mov.w	r7, #0
    50ca:	adcs	r3, r7
    m_validLength += m_vol->bytesPerCluster();
    50cc:	adds	r0, r0, r6
    50ce:	adcs	r1, r7
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    50d0:	strd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    50d4:	strd	r0, r1, [r4, #16]
  }
  return sync();
    50d8:	mov	r0, r4

 fail:
  return false;
}
    50da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    50de:	b.w	4fac <ExFatFile::sync()>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    50e2:	ldr	r0, [r0, #32]
    50e4:	bl	4d1c <ExFatPartition::rootLength()>
    50e8:	b.n	501c <ExFatFile::addDirCluster()+0x10>
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    50ea:	mov	r0, r5
    50ec:	bl	4950 <FsCache::sync()>
    50f0:	cmp	r0, #0
    50f2:	bne.n	5048 <ExFatFile::addDirCluster()+0x3c>
    50f4:	b.n	502a <ExFatFile::addDirCluster()+0x1e>
    50f6:	nop

000050f8 <ExFatFile::preAllocate(unsigned long long)>:
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
  uint32_t find;
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    50f8:	orrs.w	r1, r2, r3
    50fc:	beq.n	5106 <ExFatFile::preAllocate(unsigned long long)+0xe>
    50fe:	ldrb.w	r1, [r0, #51]	; 0x33
    5102:	lsls	r1, r1, #30
    5104:	bmi.n	510a <ExFatFile::preAllocate(unsigned long long)+0x12>
  }
  return true;

 fail:
  return false;
}
    5106:	movs	r0, #0
    5108:	bx	lr
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
  uint32_t find;
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    510a:	ldr	r1, [r0, #28]
    510c:	cmp	r1, #0
    510e:	bne.n	5106 <ExFatFile::preAllocate(unsigned long long)+0xe>

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
    5110:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5114:	mov	r6, r0
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
    5116:	ldr	r0, [r0, #32]
    5118:	mov	r5, r3
    511a:	ldrb.w	r3, [r0, #1085]	; 0x43d
    511e:	adds	r3, #9
    5120:	adds.w	r8, r2, #4294967295
    5124:	uxtb	r3, r3
    5126:	adc.w	r9, r5, #4294967295
    512a:	rsb	r7, r3, #32
    512e:	lsl.w	r7, r9, r7
    5132:	mov	r4, r2
    5134:	lsr.w	r2, r8, r3
    5138:	subs	r3, #32
    513a:	orrs	r2, r7
    513c:	lsr.w	r3, r9, r3
    5140:	orrs	r2, r3
    5142:	adds	r7, r2, #1
  find = m_vol->bitmapFind(0, need);
    5144:	mov	r2, r7
    5146:	bl	4960 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    514a:	cmp	r0, #1
  if (!length || !isWritable() || m_firstCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
  find = m_vol->bitmapFind(0, need);
    514c:	mov	r8, r0
  if (find < 2) {
    514e:	bls.n	515e <ExFatFile::preAllocate(unsigned long long)+0x66>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, need, 1)) {
    5150:	mov	r1, r0
    5152:	mov	r2, r7
    5154:	movs	r3, #1
    5156:	ldr	r0, [r6, #32]
    5158:	bl	4af4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    515c:	cbnz	r0, 5164 <ExFatFile::preAllocate(unsigned long long)+0x6c>
  }
  return true;

 fail:
  return false;
}
    515e:	movs	r0, #0
    5160:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
    5164:	ldrb.w	r3, [r6, #51]	; 0x33
  if (!m_vol->bitmapModify(find, need, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
    5168:	str.w	r8, [r6, #28]
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
    516c:	orn	r3, r3, #63	; 0x3f
    5170:	strb.w	r3, [r6, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, need, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
    5174:	strd	r4, r5, [r6, #8]
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
  if (!sync()) {
    5178:	mov	r0, r6
  }
  return true;

 fail:
  return false;
}
    517a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
  if (!sync()) {
    517e:	b.w	4fac <ExFatFile::sync()>
    5182:	nop

00005184 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    5184:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    5188:	lsls	r2, r3, #30
    518a:	bpl.n	51be <ExFatFile::truncate()+0x3a>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    518c:	push	{r4, r5, r6, r7, lr}
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    518e:	ldr	r5, [r0, #28]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    5190:	sub	sp, #12
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    5192:	cbz	r5, 51b8 <ExFatFile::truncate()+0x34>
      return true;
  }
  if (isContiguous()) {
    5194:	and.w	r3, r3, #64	; 0x40
    5198:	mov	r4, r0
    519a:	and.w	r0, r3, #255	; 0xff
    519e:	cbnz	r3, 51c2 <ExFatFile::truncate()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    51a0:	ldr	r1, [r4, #24]
    51a2:	cmp	r1, #0
    51a4:	bne.n	522a <ExFatFile::truncate()+0xa6>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    51a6:	str	r5, [sp, #4]
      m_firstCluster = 0;
    51a8:	str	r1, [r4, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    51aa:	mov	r1, r5
    51ac:	ldr	r0, [r4, #32]
    51ae:	bl	4c9c <ExFatPartition::freeChain(unsigned long)>
    51b2:	cbnz	r0, 5202 <ExFatFile::truncate()+0x7e>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    51b4:	movs	r0, #0
    51b6:	b.n	51ba <ExFatFile::truncate()+0x36>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    51b8:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    51ba:	add	sp, #12
    51bc:	pop	{r4, r5, r6, r7, pc}
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    51be:	movs	r0, #0
}
    51c0:	bx	lr
    51c2:	ldr	r0, [r4, #32]
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    51c4:	ldr	r1, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    51c6:	ldrb.w	r3, [r0, #1085]	; 0x43d
    51ca:	ldrd	r6, r7, [r4, #8]
    51ce:	adds	r3, #9
    51d0:	uxtb	r3, r3
    51d2:	adds.w	r6, r6, #4294967295
    51d6:	rsb	lr, r3, #32
    51da:	adc.w	r7, r7, #4294967295
    51de:	lsr.w	r2, r6, r3
    51e2:	lsl.w	lr, r7, lr
    51e6:	subs	r3, #32
    51e8:	orr.w	r2, r2, lr
    51ec:	lsr.w	r3, r7, r3
    51f0:	orrs	r2, r3
    51f2:	adds	r2, #1
    if (m_curCluster) {
    51f4:	cbz	r1, 5224 <ExFatFile::truncate()+0xa0>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    51f6:	subs	r5, #1
    51f8:	subs	r5, r5, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    51fa:	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    51fc:	add	r2, r5
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    51fe:	str	r1, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    5200:	cbnz	r2, 5246 <ExFatFile::truncate()+0xc2>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    5202:	ldrd	r0, r1, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5206:	ldrb.w	r3, [r4, #51]	; 0x33
    520a:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    520e:	strd	r0, r1, [r4, #8]
  m_validLength = m_curPosition;
    5212:	strd	r0, r1, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5216:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    521a:	mov	r0, r4
    521c:	bl	4fac <ExFatFile::sync()>

 fail:
  return false;
}
    5220:	add	sp, #12
    5222:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    5224:	str	r5, [sp, #4]
      m_firstCluster = 0;
    5226:	str	r1, [r4, #28]
    5228:	b.n	5200 <ExFatFile::truncate()+0x7c>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    522a:	add	r2, sp, #8
    522c:	str.w	r0, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    5230:	ldr	r0, [r4, #32]
    5232:	bl	4c64 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    5236:	sxtb	r0, r0
      if (fg < 0) {
    5238:	cmp	r0, #0
    523a:	blt.n	51b4 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    523c:	bne.n	5254 <ExFatFile::truncate()+0xd0>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    523e:	ldr	r5, [sp, #4]
    5240:	cmp	r5, #0
    5242:	beq.n	5202 <ExFatFile::truncate()+0x7e>
    5244:	b.n	51aa <ExFatFile::truncate()+0x26>
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    5246:	movs	r3, #0
    5248:	ldr	r1, [sp, #4]
    524a:	bl	4af4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    524e:	cmp	r0, #0
    5250:	bne.n	5202 <ExFatFile::truncate()+0x7e>
    5252:	b.n	51b4 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    5254:	mov.w	r2, #4294967295
    5258:	ldr	r1, [r4, #24]
    525a:	ldr	r0, [r4, #32]
    525c:	bl	4c78 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5260:	cmp	r0, #0
    5262:	bne.n	523e <ExFatFile::truncate()+0xba>
    5264:	b.n	51b4 <ExFatFile::truncate()+0x30>
    5266:	nop

00005268 <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    5268:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    526c:	ldrb.w	r3, [r0, #51]	; 0x33
    5270:	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    5272:	lsls	r4, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    5274:	mov	r6, r0
    5276:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    5278:	bmi.n	5290 <ExFatFile::write(void const*, unsigned int)+0x28>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    527a:	ldrb.w	r3, [r6, #50]	; 0x32
    527e:	orr.w	r3, r3, #1
    5282:	strb.w	r3, [r6, #50]	; 0x32
  return -1;
    5286:	mov.w	r0, #4294967295
}
    528a:	add	sp, #20
    528c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    5290:	lsls	r2, r3, #28
    5292:	mov	sl, r1
    5294:	bmi.w	54bc <ExFatFile::write(void const*, unsigned int)+0x254>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    5298:	ldr	r3, [sp, #4]
    529a:	cmp	r3, #0
    529c:	beq.w	54e4 <ExFatFile::write(void const*, unsigned int)+0x27c>
    52a0:	mov	r1, r6
    52a2:	ldrd	r2, r3, [r1], #24
    52a6:	ldr.w	r8, [sp, #4]
    52aa:	str	r1, [sp, #12]
    52ac:	mov	fp, r2
    clusterOffset = m_curPosition & m_vol->clusterMask();
    52ae:	ldr	r0, [r6, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    52b0:	ldr	r5, [r6, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    52b2:	ldr.w	r4, [r0, #1072]	; 0x430
    52b6:	mov	r3, fp
    52b8:	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    52ba:	ubfx	r9, r4, #0, #9
    if (clusterOffset == 0) {
    52be:	cbnz	r4, 5314 <ExFatFile::write(void const*, unsigned int)+0xac>
      // start of new cluster
      if (m_curCluster != 0) {
    52c0:	cmp	r5, #0
    52c2:	beq.w	5442 <ExFatFile::write(void const*, unsigned int)+0x1da>
        int fg;

        if (isContiguous()) {
    52c6:	ldrb.w	r3, [r6, #51]	; 0x33
    52ca:	lsls	r3, r3, #25
    52cc:	bpl.w	548a <ExFatFile::write(void const*, unsigned int)+0x222>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    52d0:	ldrd	r2, r3, [r6, #8]
    52d4:	ldrb.w	r7, [r0, #1085]	; 0x43d
    52d8:	adds	r7, #9
    52da:	uxtb	r7, r7
    52dc:	adds.w	r2, r2, #4294967295
    52e0:	adc.w	r3, r3, #4294967295
    52e4:	rsb	lr, r7, #32
    52e8:	lsl.w	lr, r3, lr
    52ec:	lsr.w	r1, r2, r7
    52f0:	subs	r7, #32
    52f2:	lsr.w	r7, r3, r7
    52f6:	orr.w	r1, r1, lr
    52fa:	ldr	r3, [r6, #28]
    52fc:	orrs	r1, r7
    52fe:	add	r3, r1
    5300:	cmp	r5, r3
    5302:	bcc.w	5470 <ExFatFile::write(void const*, unsigned int)+0x208>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    5306:	mov	r0, r6
    5308:	bl	4dc8 <ExFatFile::addCluster()>
    530c:	cmp	r0, #0
    530e:	beq.n	527a <ExFatFile::write(void const*, unsigned int)+0x12>
    5310:	ldr	r0, [r6, #32]
    5312:	ldr	r5, [r6, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    5314:	ldr.w	r7, [r0, #1060]	; 0x424
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    5318:	ldrb.w	lr, [r0, #1085]	; 0x43d
    531c:	lsrs	r4, r4, #9
    531e:	subs	r5, #2
    5320:	adds	r1, r4, r7
    5322:	lsl.w	r5, r5, lr
    5326:	add	r1, r5

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    5328:	cmp.w	r9, #0
    532c:	bne.w	5434 <ExFatFile::write(void const*, unsigned int)+0x1cc>
    5330:	cmp.w	r8, #512	; 0x200
    5334:	bcs.n	53e6 <ExFatFile::write(void const*, unsigned int)+0x17e>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    5336:	ldrd	r2, r3, [r6, #16]
    533a:	ldrd	r4, r5, [r6]
    533e:	cmp.w	r8, #512	; 0x200
    5342:	mov	r7, r8
    5344:	it	cs
    5346:	movcs.w	r7, #512	; 0x200
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    534a:	cmp	r5, r3
    534c:	it	eq
    534e:	cmpeq	r4, r2
    5350:	ite	cc
    5352:	movcc	r2, #1
    5354:	movcs	r2, #3
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    5356:	add.w	r0, r0, #524	; 0x20c
    535a:	bl	4890 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    535e:	cmp	r0, #0
    5360:	beq.n	527a <ExFatFile::write(void const*, unsigned int)+0x12>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    5362:	add	r0, r9
    5364:	mov	r2, r7
    5366:	mov	r1, sl
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5368:	add	r9, r7
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    536a:	bl	81f4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    536e:	cmp.w	r9, #512	; 0x200
    5372:	beq.w	549a <ExFatFile::write(void const*, unsigned int)+0x232>
    5376:	mov	r0, r7
    5378:	movs	r1, #0
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    537a:	ldrd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    537e:	ldrd	r4, r5, [r6, #16]
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5382:	adds.w	fp, r2, r0
    5386:	adc.w	ip, r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    538a:	cmp	r5, ip
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    538c:	mov	r2, fp
    538e:	mov	r3, ip
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5390:	it	eq
    5392:	cmpeq	r4, fp
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    5394:	add	sl, r7
    toWrite -= n;
    5396:	rsb	r8, r7, r8
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    539a:	strd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    539e:	bcs.n	53b4 <ExFatFile::write(void const*, unsigned int)+0x14c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    53a0:	ldrb.w	r1, [r6, #51]	; 0x33
      m_validLength = m_curPosition;
    53a4:	mov	r4, ip
    53a6:	mov	r3, fp
    53a8:	strd	r3, r4, [r6, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    53ac:	orn	r1, r1, #127	; 0x7f
    53b0:	strb.w	r1, [r6, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    53b4:	cmp.w	r8, #0
    53b8:	bne.w	52ae <ExFatFile::write(void const*, unsigned int)+0x46>
    53bc:	mov	r2, fp
    53be:	mov	r3, ip
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    53c0:	ldrd	r0, r1, [r6, #8]
    53c4:	cmp	r1, r3
    53c6:	it	eq
    53c8:	cmpeq	r0, r2
    53ca:	bcc.n	54cc <ExFatFile::write(void const*, unsigned int)+0x264>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    53cc:	ldr	r3, [pc, #284]	; (54ec <ExFatFile::write(void const*, unsigned int)+0x284>)
    53ce:	ldr	r3, [r3, #0]
    53d0:	cmp	r3, #0
    53d2:	beq.w	54e0 <ExFatFile::write(void const*, unsigned int)+0x278>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    53d6:	ldrb.w	r3, [r6, #51]	; 0x33
    53da:	ldr	r0, [sp, #4]
    53dc:	orn	r3, r3, #127	; 0x7f
    53e0:	strb.w	r3, [r6, #51]	; 0x33
    53e4:	b.n	528a <ExFatFile::write(void const*, unsigned int)+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    53e6:	cmp.w	r8, #1024	; 0x400
    53ea:	bcc.n	544a <ExFatFile::write(void const*, unsigned int)+0x1e2>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    53ec:	movs	r3, #1
    53ee:	lsl.w	lr, r3, lr
    53f2:	rsb	lr, r4, lr
    53f6:	ldr.w	r3, [r0, #532]	; 0x214
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    53fa:	mov.w	r4, r8, lsr #9
    53fe:	cmp	r4, lr
    5400:	it	cs
    5402:	movcs	r4, lr
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    5404:	cmp	r1, r3
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    5406:	mov.w	r7, r4, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    540a:	bhi.n	5420 <ExFatFile::write(void const*, unsigned int)+0x1b8>
    540c:	adds	r2, r4, r1
    540e:	cmp	r2, r3
    5410:	bls.n	5420 <ExFatFile::write(void const*, unsigned int)+0x1b8>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    5412:	add.w	r0, r0, #524	; 0x20c
    5416:	str	r1, [sp, #8]
    5418:	bl	4884 <FsCache::invalidate()>
    541c:	ldr	r0, [r6, #32]
    541e:	ldr	r1, [sp, #8]
    5420:	ldr.w	r0, [r0, #1080]	; 0x438
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t count) {
    return m_blockDev->writeSectors(sector, src, count);
    5424:	ldr	r5, [r0, #0]
    5426:	mov	r3, r4
    5428:	mov	r2, sl
    542a:	ldr	r4, [r5, #28]
    542c:	blx	r4
        // Invalidate cache if cache sector is in the range.
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, ns)) {
    542e:	cmp	r0, #0
    5430:	bne.n	5376 <ExFatFile::write(void const*, unsigned int)+0x10e>
    5432:	b.n	527a <ExFatFile::write(void const*, unsigned int)+0x12>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    5434:	rsb	r7, r9, #512	; 0x200
    5438:	cmp	r7, r8
    543a:	it	cs
    543c:	movcs	r7, r8
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    543e:	movs	r2, #1
    5440:	b.n	5356 <ExFatFile::write(void const*, unsigned int)+0xee>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    5442:	ldr	r5, [r6, #28]
    5444:	cbz	r5, 5476 <ExFatFile::write(void const*, unsigned int)+0x20e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    5446:	str	r5, [r6, #24]
    5448:	b.n	5314 <ExFatFile::write(void const*, unsigned int)+0xac>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
    544a:	ldr.w	r3, [r0, #532]	; 0x214
    544e:	cmp	r1, r3
    5450:	beq.n	54ac <ExFatFile::write(void const*, unsigned int)+0x244>
    5452:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5456:	ldr	r3, [r0, #0]
    5458:	mov	r2, sl
    545a:	ldr	r3, [r3, #24]
    545c:	blx	r3
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    545e:	cmp	r0, #0
    5460:	beq.w	527a <ExFatFile::write(void const*, unsigned int)+0x12>
    5464:	mov.w	r0, #512	; 0x200
    5468:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    546a:	mov.w	r7, #512	; 0x200
    546e:	b.n	537a <ExFatFile::write(void const*, unsigned int)+0x112>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    5470:	adds	r5, #1
    5472:	str	r5, [r6, #24]
    5474:	b.n	5314 <ExFatFile::write(void const*, unsigned int)+0xac>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    5476:	mov	r0, r6
    5478:	bl	4dc8 <ExFatFile::addCluster()>
    547c:	cmp	r0, #0
    547e:	beq.w	527a <ExFatFile::write(void const*, unsigned int)+0x12>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    5482:	ldr	r5, [r6, #24]
    5484:	str	r5, [r6, #28]
    5486:	ldr	r0, [r6, #32]
    5488:	b.n	5314 <ExFatFile::write(void const*, unsigned int)+0xac>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    548a:	mov	r1, r5
    548c:	ldr	r2, [sp, #12]
    548e:	bl	4c64 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    5492:	cmp	r0, #0
    5494:	bne.w	5310 <ExFatFile::write(void const*, unsigned int)+0xa8>
    5498:	b.n	5306 <ExFatFile::write(void const*, unsigned int)+0x9e>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    549a:	ldr	r0, [r6, #32]
    549c:	add.w	r0, r0, #524	; 0x20c
    54a0:	bl	4950 <FsCache::sync()>
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    54a4:	cmp	r0, #0
    54a6:	bne.w	5376 <ExFatFile::write(void const*, unsigned int)+0x10e>
    54aa:	b.n	527a <ExFatFile::write(void const*, unsigned int)+0x12>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    54ac:	add.w	r0, r0, #524	; 0x20c
    54b0:	str	r1, [sp, #8]
    54b2:	bl	4884 <FsCache::invalidate()>
    54b6:	ldr	r0, [r6, #32]
    54b8:	ldr	r1, [sp, #8]
    54ba:	b.n	5452 <ExFatFile::write(void const*, unsigned int)+0x1ea>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    54bc:	ldrd	r2, r3, [r0, #16]
    54c0:	bl	4280 <ExFatFile::seekSet(unsigned long long)>
    54c4:	cmp	r0, #0
    54c6:	beq.w	527a <ExFatFile::write(void const*, unsigned int)+0x12>
    54ca:	b.n	5298 <ExFatFile::write(void const*, unsigned int)+0x30>
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    54cc:	ldrb.w	r1, [r6, #51]	; 0x33
    54d0:	ldr	r0, [sp, #4]
    54d2:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    54d6:	strd	r2, r3, [r6, #8]
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    54da:	strb.w	r1, [r6, #51]	; 0x33
    54de:	b.n	528a <ExFatFile::write(void const*, unsigned int)+0x22>
    54e0:	ldr	r0, [sp, #4]
    54e2:	b.n	528a <ExFatFile::write(void const*, unsigned int)+0x22>
    54e4:	ldrd	r2, r3, [r6]
    54e8:	b.n	53c0 <ExFatFile::write(void const*, unsigned int)+0x158>
    54ea:	nop
    54ec:	.word	0x2001c8f8

000054f0 <FatFile::openRoot(FatVolume*) [clone .part.36]>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    54f0:	push	{r3, r4, r5, lr}
    54f2:	mov	r4, r0
    54f4:	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    54f6:	movs	r2, #36	; 0x24
    54f8:	movs	r1, #0
    54fa:	bl	c10c <memset>

  m_vol = vol;
    54fe:	str	r5, [r4, #8]
  switch (vol->fatType()) {
    5500:	ldrb	r3, [r5, #7]
    5502:	cmp	r3, #16
    5504:	beq.n	5518 <FatFile::openRoot(FatVolume*) [clone .part.36]+0x28>
    5506:	cmp	r3, #32
    5508:	bne.n	5514 <FatFile::openRoot(FatVolume*) [clone .part.36]+0x24>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    550a:	movs	r3, #64	; 0x40
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    550c:	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    550e:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5510:	strb	r0, [r4, #2]
    5512:	pop	{r3, r4, r5, pc}
  return true;

fail:
  return false;
    5514:	movs	r0, #0
}
    5516:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    5518:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    551a:	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    551c:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    551e:	strb	r0, [r4, #2]
    5520:	pop	{r3, r4, r5, pc}
    5522:	nop

00005524 <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    5524:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    5526:	push	{r3, r4, r5, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    5528:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    552c:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    552e:	mov	r1, r5
    5530:	ldr	r0, [r0, #8]
    5532:	bl	5f68 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    5536:	cbz	r0, 554e <FatFile::addCluster()+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    5538:	cbz	r5, 5550 <FatFile::addCluster()+0x2c>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    553a:	ldr	r3, [r4, #16]
    553c:	adds	r5, #1
    553e:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    5540:	ldrb	r3, [r4, #2]
    5542:	it	ne
    5544:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5548:	orn	r3, r3, #127	; 0x7f
    554c:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    554e:	pop	{r3, r4, r5, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    5550:	ldrb	r3, [r4, #2]
    5552:	orr.w	r3, r3, #64	; 0x40
    5556:	b.n	5548 <FatFile::addCluster()+0x24>

00005558 <FatFile::addDirCluster()>:
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    5558:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    555c:	ldrb	r3, [r0, #0]
    555e:	and.w	r3, r3, #32
    5562:	cbnz	r3, 5570 <FatFile::addDirCluster()+0x18>
    5564:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    5568:	ldr	r1, [r0, #20]
    556a:	ldr	r3, [pc, #124]	; (55e8 <FatFile::addDirCluster()+0x90>)
    556c:	cmp	r1, r3
    556e:	bls.n	5578 <FatFile::addDirCluster()+0x20>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    5570:	movs	r6, #0
}
    5572:	mov	r0, r6
    5574:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5578:	mov	r5, r0
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    557a:	bl	5524 <FatFile::addCluster()>
    557e:	mov	r6, r0
    5580:	cmp	r0, #0
    5582:	beq.n	5570 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    5584:	ldr	r1, [r5, #16]
    5586:	ldr	r0, [r5, #8]
    5588:	bl	5e84 <FatPartition::clusterStartSector(unsigned long) const>
    558c:	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    558e:	ldr	r0, [r5, #8]
    5590:	mov	r1, r7
    5592:	adds	r0, #36	; 0x24
    5594:	movs	r2, #5
    5596:	bl	5e14 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    559a:	mov	r8, r0
    559c:	cmp	r0, #0
    559e:	beq.n	5570 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    55a0:	mov.w	r2, #512	; 0x200
    55a4:	mov	r1, r4
    55a6:	bl	c10c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    55aa:	ldr	r3, [r5, #8]
    55ac:	ldrb	r2, [r3, #4]
    55ae:	cmp	r2, #1
    55b0:	bls.n	55d4 <FatFile::addDirCluster()+0x7c>
    55b2:	movs	r4, #1
    55b4:	b.n	55be <FatFile::addDirCluster()+0x66>
    55b6:	ldr	r3, [r5, #8]
    55b8:	ldrb	r2, [r3, #4]
    55ba:	cmp	r2, r4
    55bc:	bls.n	55d4 <FatFile::addDirCluster()+0x7c>
    55be:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    55c0:	ldr	r3, [r0, #0]
    55c2:	adds	r1, r4, r7
    55c4:	ldr	r3, [r3, #24]
    55c6:	mov	r2, r8
    55c8:	blx	r3
    55ca:	adds	r4, #1
    55cc:	uxtb	r4, r4
    if (!m_vol->writeSector(sector + i, pc->data)) {
    55ce:	cmp	r0, #0
    55d0:	bne.n	55b6 <FatFile::addDirCluster()+0x5e>
    55d2:	b.n	5570 <FatFile::addDirCluster()+0x18>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    55d4:	ldrb	r3, [r3, #6]
    55d6:	ldr	r1, [r5, #20]
    55d8:	mov.w	r2, #512	; 0x200
    55dc:	lsl.w	r3, r2, r3
    55e0:	uxtah	r3, r1, r3
    55e4:	str	r3, [r5, #20]
    55e6:	b.n	5572 <FatFile::addDirCluster()+0x1a>
    55e8:	.word	0x001ffdff

000055ec <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    55ec:	push	{r4, lr}
    55ee:	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    55f0:	ldr	r0, [r0, #8]
    55f2:	mov	r2, r1
    55f4:	adds	r0, #36	; 0x24
    55f6:	ldr	r1, [r4, #24]
    55f8:	bl	5e14 <FatCache::read(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    55fc:	cbz	r0, 5608 <FatFile::cacheDirEntry(unsigned char)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    55fe:	ldrh	r3, [r4, #4]
    5600:	and.w	r3, r3, #15
    5604:	add.w	r0, r0, r3, lsl #5

fail:
  return nullptr;
}
    5608:	pop	{r4, pc}
    560a:	nop

0000560c <FatFile::sync() [clone .part.40]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    560c:	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    560e:	ldrsb.w	r3, [r0, #2]
    5612:	cmp	r3, #0
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5614:	sub	sp, #8
    5616:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5618:	blt.n	564e <FatFile::sync() [clone .part.40]+0x42>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    561a:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    561c:	add.w	r0, r5, #36	; 0x24
    5620:	bl	5e74 <FatCache::sync()>
    5624:	cbnz	r0, 5634 <FatFile::sync() [clone .part.40]+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    5626:	ldrb	r3, [r4, #1]
    5628:	orr.w	r3, r3, #1
    562c:	strb	r3, [r4, #1]
  return false;
    562e:	movs	r0, #0
}
    5630:	add	sp, #8
    5632:	pop	{r4, r5, r6, pc}
    5634:	add.w	r0, r5, #560	; 0x230
    5638:	bl	5e74 <FatCache::sync()>
    563c:	cmp	r0, #0
    563e:	beq.n	5626 <FatFile::sync() [clone .part.40]+0x1a>
    5640:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5642:	ldr	r3, [r0, #0]
    5644:	ldr	r3, [r3, #20]
    5646:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5648:	cmp	r0, #0
    564a:	beq.n	5626 <FatFile::sync() [clone .part.40]+0x1a>
    564c:	b.n	5630 <FatFile::sync() [clone .part.40]+0x24>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    564e:	movs	r1, #1
    5650:	bl	55ec <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    5654:	mov	r5, r0
    5656:	cmp	r0, #0
    5658:	beq.n	5626 <FatFile::sync() [clone .part.40]+0x1a>
    565a:	ldrb	r3, [r0, #0]
    565c:	cmp	r3, #229	; 0xe5
    565e:	beq.n	5626 <FatFile::sync() [clone .part.40]+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    5660:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    5662:	ldr	r2, [pc, #56]	; (569c <FatFile::sync() [clone .part.40]+0x90>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    5664:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    5666:	itt	mi
    5668:	ldrmi	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    566a:	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    566c:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    566e:	ldr	r6, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5670:	strh	r3, [r0, #26]
    5672:	lsrs	r3, r3, #16
    5674:	strh	r3, [r0, #20]
    5676:	cbz	r6, 5692 <FatFile::sync() [clone .part.40]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    5678:	add.w	r2, sp, #3
    567c:	add.w	r1, sp, #6
    5680:	add	r0, sp, #4
    5682:	blx	r6
      setLe16(dir->modifyDate, date);
    5684:	ldrh.w	r3, [sp, #4]
    5688:	ldrh.w	r2, [sp, #6]
    568c:	strh	r3, [r5, #24]
    568e:	strh	r3, [r5, #18]
    5690:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5692:	ldrb	r3, [r4, #2]
    5694:	and.w	r3, r3, #127	; 0x7f
    5698:	strb	r3, [r4, #2]
    569a:	b.n	561a <FatFile::sync() [clone .part.40]+0xe>
    569c:	.word	0x2001c8f8

000056a0 <FatFile::close()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    56a0:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    56a2:	ldrb	r3, [r0, #0]

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    56a4:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    56a6:	cbnz	r3, 56b2 <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    56a8:	movs	r3, #0
    56aa:	strb	r3, [r4, #0]
  m_flags = 0;
    56ac:	strb	r3, [r4, #2]
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    56ae:	movs	r0, #1
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return rtn;
}
    56b0:	pop	{r4, pc}
    56b2:	bl	560c <FatFile::sync() [clone .part.40]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    56b6:	movs	r3, #0
    56b8:	strb	r3, [r4, #0]
  m_flags = 0;
    56ba:	strb	r3, [r4, #2]
  return rtn;
}
    56bc:	pop	{r4, pc}
    56be:	nop

000056c0 <FatFile::preAllocate(unsigned long)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    56c0:	cbnz	r1, 56c6 <FatFile::preAllocate(unsigned long)+0x6>
  m_flags |= FILE_FLAG_DIR_DIRTY;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
    56c2:	movs	r0, #0
}
    56c4:	bx	lr
  close();
fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
    56c6:	push	{r3, r4, r5, lr}
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    56c8:	ldrb	r3, [r0, #2]
    56ca:	lsls	r3, r3, #30
    56cc:	bmi.n	56d2 <FatFile::preAllocate(unsigned long)+0x12>
  m_flags |= FILE_FLAG_DIR_DIRTY;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
    56ce:	movs	r0, #0
    56d0:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    56d2:	ldr	r3, [r0, #32]
    56d4:	cmp	r3, #0
    56d6:	bne.n	56ce <FatFile::preAllocate(unsigned long)+0xe>
    56d8:	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
    56da:	ldr	r0, [r0, #8]
  // allocate clusters
  if (!m_vol->allocContiguous(need, &m_firstCluster)) {
    56dc:	ldrb	r3, [r0, #6]
    56de:	adds	r3, #9
    56e0:	mov	r5, r1
    56e2:	uxtb	r3, r3
    56e4:	subs	r1, #1
    56e6:	lsrs	r1, r3
    56e8:	adds	r1, #1
    56ea:	add.w	r2, r4, #32
    56ee:	bl	5fec <FatPartition::allocContiguous(unsigned long, unsigned long*)>
    56f2:	cmp	r0, #0
    56f4:	beq.n	56ce <FatFile::preAllocate(unsigned long)+0xe>
  }
  m_fileSize = length;

#if USE_FAT_FILE_FLAG_CONTIGUOUS
  // Mark contiguous and insure sync() will update dir entry
  m_flags |= FILE_FLAG_PREALLOCATE | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    56f6:	ldrb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    56f8:	ldrb	r2, [r4, #0]
  // allocate clusters
  if (!m_vol->allocContiguous(need, &m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fileSize = length;
    56fa:	str	r5, [r4, #28]

#if USE_FAT_FILE_FLAG_CONTIGUOUS
  // Mark contiguous and insure sync() will update dir entry
  m_flags |= FILE_FLAG_PREALLOCATE | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    56fc:	orn	r3, r3, #31
    5700:	strb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5702:	cbnz	r2, 5706 <FatFile::preAllocate(unsigned long)+0x46>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
}
    5704:	pop	{r3, r4, r5, pc}
    5706:	mov	r0, r4
    5708:	ldmia.w	sp!, {r3, r4, r5, lr}
    570c:	b.w	560c <FatFile::sync() [clone .part.40]>

00005710 <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5710:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5714:	mov	r6, r0
    5716:	sub	sp, #72	; 0x48
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    5718:	ldrb	r5, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    571a:	str	r2, [sp, #4]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    571c:	movs	r0, #0
    571e:	strb.w	r0, [sp, #36]	; 0x24
    5722:	strb.w	r0, [sp, #37]	; 0x25
    5726:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    572a:	cbnz	r5, 5738 <FatFile::open(FatFile*, char const*, int)+0x28>
    572c:	mov	r8, r3
    572e:	ldrb	r3, [r1, #0]
    5730:	tst.w	r3, #112	; 0x70
    5734:	mov	r4, r1
    5736:	bne.n	5740 <FatFile::open(FatFile*, char const*, int)+0x30>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    5738:	movs	r0, #0
}
    573a:	add	sp, #72	; 0x48
    573c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    5740:	ldrb	r3, [r2, #0]
    5742:	cmp	r3, #47	; 0x2f
    5744:	mov	r0, r2
    5746:	beq.n	5794 <FatFile::open(FatFile*, char const*, int)+0x84>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5748:	movs	r7, #0
    574a:	b.n	5754 <FatFile::open(FatFile*, char const*, int)+0x44>
    574c:	ldr	r0, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    574e:	strb	r7, [r6, #0]
  m_flags = 0;
    5750:	strb	r7, [r6, #2]
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    5752:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5754:	add	r2, sp, #4
    5756:	add	r1, sp, #12
    5758:	bl	620c <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    575c:	add	r2, sp, #12
    575e:	mov	r1, r4
    5760:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5762:	cmp	r0, #0
    5764:	beq.n	5738 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    5766:	ldr	r5, [sp, #4]
    5768:	ldrb	r5, [r5, #0]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    576a:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    576c:	cbz	r5, 57b2 <FatFile::open(FatFile*, char const*, int)+0xa2>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    576e:	bl	6510 <FatFile::open(FatFile*, fname_t*, int)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5772:	mov	r5, r6
    5774:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5776:	cmp	r0, #0
    5778:	beq.n	5738 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    577a:	ldmia	r5!, {r0, r1, r2, r3}
    577c:	stmia	r4!, {r0, r1, r2, r3}
    577e:	ldmia	r5!, {r0, r1, r2, r3}
    5780:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5782:	ldrb	r3, [r6, #0]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5784:	ldr	r2, [r5, #0]
    5786:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5788:	cmp	r3, #0
    578a:	beq.n	574c <FatFile::open(FatFile*, char const*, int)+0x3c>
    578c:	mov	r0, r6
    578e:	bl	560c <FatFile::sync() [clone .part.40]>
    5792:	b.n	574c <FatFile::open(FatFile*, char const*, int)+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    5794:	adds	r0, #1
    5796:	str	r0, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    5798:	ldrb	r3, [r0, #0]
    579a:	cmp	r3, #47	; 0x2f
    579c:	beq.n	5794 <FatFile::open(FatFile*, char const*, int)+0x84>
      path++;
    }
    if (*path == 0) {
    579e:	cbz	r3, 57c4 <FatFile::open(FatFile*, char const*, int)+0xb4>
    57a0:	ldr	r1, [r4, #8]
    57a2:	add	r0, sp, #36	; 0x24
    57a4:	bl	54f0 <FatFile::openRoot(FatVolume*) [clone .part.36]>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    57a8:	cmp	r0, #0
    57aa:	beq.n	5738 <FatFile::open(FatFile*, char const*, int)+0x28>
    57ac:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    57ae:	add	r4, sp, #36	; 0x24
    57b0:	b.n	5748 <FatFile::open(FatFile*, char const*, int)+0x38>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    57b2:	mov	r3, r8
    57b4:	add	r2, sp, #12
    57b6:	mov	r1, r4
    57b8:	mov	r0, r6
    57ba:	bl	6510 <FatFile::open(FatFile*, fname_t*, int)>

fail:
  return false;
}
    57be:	add	sp, #72	; 0x48
    57c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    57c4:	ldr	r1, [r4, #8]
    57c6:	mov	r0, r6
    57c8:	bl	54f0 <FatFile::openRoot(FatVolume*) [clone .part.36]>
    57cc:	b.n	573a <FatFile::open(FatFile*, char const*, int)+0x2a>
    57ce:	nop

000057d0 <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    57d0:	cbz	r1, 57da <FatFile::open(FatVolume*, char const*, int)+0xa>
    57d2:	addw	r1, r1, #1084	; 0x43c
    57d6:	b.w	5710 <FatFile::open(FatFile*, char const*, int)>
}
    57da:	mov	r0, r1
    57dc:	bx	lr
    57de:	nop

000057e0 <FatFile::openRoot(FatVolume*)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    57e0:	ldrb	r3, [r0, #0]
    57e2:	cbz	r3, 57e8 <FatFile::openRoot(FatVolume*)+0x8>
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
}
    57e4:	movs	r0, #0
    57e6:	bx	lr
    57e8:	b.w	54f0 <FatFile::openRoot(FatVolume*) [clone .part.36]>

000057ec <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    57ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    57f0:	ldrb	r3, [r0, #2]
    57f2:	lsls	r7, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    57f4:	sub	sp, #12
    57f6:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    57f8:	bpl.w	591a <FatFile::read(void*, unsigned int)+0x12e>
    57fc:	mov	r7, r1
    57fe:	ldrb	r1, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    5800:	lsls	r6, r1, #28
    5802:	mov	r9, r2
    5804:	bmi.w	592c <FatFile::read(void*, unsigned int)+0x140>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    5808:	lsls	r4, r1, #26
    580a:	bpl.n	581e <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    580c:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    580e:	ldr	r3, [r0, #20]
    5810:	ldrh	r2, [r2, #8]
    5812:	rsb	r3, r3, r2, lsl #5
    5816:	uxth	r3, r3
    5818:	cmp	r9, r3
    581a:	it	cs
    581c:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    581e:	cmp.w	r9, #0
    5822:	beq.w	5978 <FatFile::read(void*, unsigned int)+0x18c>
    5826:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5828:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    582a:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    582c:	mov	r6, r9
    582e:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5832:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5836:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    583a:	bpl.n	58ba <FatFile::read(void*, unsigned int)+0xce>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    583c:	ldr	r1, [r2, #32]
    583e:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    5842:	cmp.w	fp, #0
    5846:	bne.n	58ee <FatFile::read(void*, unsigned int)+0x102>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    5848:	cmp.w	r6, #512	; 0x200
    584c:	bcc.n	58ee <FatFile::read(void*, unsigned int)+0x102>
    584e:	ldr	r3, [r2, #44]	; 0x2c
        || sector == m_vol->cacheSectorNumber()) {
    5850:	cmp	r1, r3
    5852:	beq.n	58ee <FatFile::read(void*, unsigned int)+0x102>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    5854:	cmp.w	r6, #1024	; 0x400
    5858:	bcc.n	593e <FatFile::read(void*, unsigned int)+0x152>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    585a:	ldrb	r0, [r5, #0]
    585c:	lsls	r0, r0, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    585e:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    5862:	bmi.n	5870 <FatFile::read(void*, unsigned int)+0x84>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    5864:	ldrb	r0, [r2, #4]
    5866:	rsb	r0, r8, r0
    586a:	cmp	fp, r0
    586c:	it	cs
    586e:	movcs	fp, r0
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    5870:	cmp	r1, r3
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    5872:	mov.w	r4, fp, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    5876:	bhi.n	5890 <FatFile::read(void*, unsigned int)+0xa4>
    5878:	add	r3, fp
    587a:	cmp	r1, r3
    587c:	bcs.n	5890 <FatFile::read(void*, unsigned int)+0xa4>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    587e:	add.w	r0, r2, #36	; 0x24
    5882:	str	r1, [sp, #4]
    5884:	bl	5e74 <FatCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->cacheSyncData()) {
    5888:	cmp	r0, #0
    588a:	beq.n	591a <FatFile::read(void*, unsigned int)+0x12e>
    588c:	ldr	r2, [r5, #8]
    588e:	ldr	r1, [sp, #4]
    5890:	ldr	r0, [r2, #0]
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
    5892:	ldr	r2, [r0, #0]
    5894:	mov	r3, fp
    5896:	ldr.w	fp, [r2, #12]
    589a:	mov	r2, r7
    589c:	blx	fp
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    589e:	cmp	r0, #0
    58a0:	beq.n	591a <FatFile::read(void*, unsigned int)+0x12e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    58a2:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    58a4:	subs	r6, r6, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    58a6:	add	r3, r4
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    58a8:	add	r7, r4
    m_curPosition += n;
    58aa:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    58ac:	beq.n	5978 <FatFile::read(void*, unsigned int)+0x18c>
    58ae:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    58b0:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    58b2:	lsls	r0, r1, #26
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    58b4:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    58b8:	bmi.n	583c <FatFile::read(void*, unsigned int)+0x50>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    58ba:	ldrb.w	r8, [r2, #5]
    58be:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    58c2:	cmp.w	fp, #0
    58c6:	bne.n	593a <FatFile::read(void*, unsigned int)+0x14e>
    58c8:	cmp.w	r8, #0
    58cc:	bne.n	593a <FatFile::read(void*, unsigned int)+0x14e>
        // start of new cluster
        if (m_curPosition == 0) {
    58ce:	cmp	r3, #0
    58d0:	bne.n	5952 <FatFile::read(void*, unsigned int)+0x166>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    58d2:	lsls	r1, r1, #25
    58d4:	ite	mi
    58d6:	ldrmi	r1, [r2, #32]
    58d8:	ldrpl	r1, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    58da:	str	r1, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    58dc:	mov	r0, r2
    58de:	bl	5e84 <FatPartition::clusterStartSector(unsigned long) const>
    58e2:	ldr	r2, [r5, #8]
    58e4:	add.w	r1, r8, r0
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    58e8:	cmp.w	fp, #0
    58ec:	beq.n	5848 <FatFile::read(void*, unsigned int)+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    58ee:	add.w	r0, r2, #36	; 0x24
    58f2:	movs	r2, #0
    58f4:	bl	5e14 <FatCache::read(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
    58f8:	cbz	r0, 591a <FatFile::read(void*, unsigned int)+0x12e>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    58fa:	rsb	r4, fp, #512	; 0x200
    58fe:	cmp	r4, r6
    5900:	it	cs
    5902:	movcs	r4, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    5904:	add.w	r1, r0, fp
    5908:	mov	r2, r4
    590a:	mov	r0, r7
    590c:	bl	81f4 <memcpy>
    5910:	b.n	58a2 <FatFile::read(void*, unsigned int)+0xb6>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    5912:	ldrb	r3, [r5, #0]
    5914:	tst.w	r3, #112	; 0x70
    5918:	bne.n	597a <FatFile::read(void*, unsigned int)+0x18e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    591a:	ldrb	r3, [r5, #1]
  return -1;
    591c:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    5920:	orr.w	r3, r3, #2
    5924:	strb	r3, [r5, #1]
  return -1;
}
    5926:	add	sp, #12
    5928:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    592c:	ldr	r3, [r0, #28]
    592e:	ldr	r2, [r0, #20]
    5930:	subs	r3, r3, r2
    5932:	cmp	r9, r3
    5934:	it	cs
    5936:	movcs	r9, r3
    5938:	b.n	581e <FatFile::read(void*, unsigned int)+0x32>
    593a:	ldr	r1, [r5, #16]
    593c:	b.n	58dc <FatFile::read(void*, unsigned int)+0xf0>
    593e:	ldr	r0, [r2, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5940:	ldr	r3, [r0, #0]
    5942:	mov	r2, r7
    5944:	ldr	r3, [r3, #8]
    5946:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    5948:	cmp	r0, #0
    594a:	beq.n	591a <FatFile::read(void*, unsigned int)+0x12e>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    594c:	mov.w	r4, #512	; 0x200
    5950:	b.n	58a2 <FatFile::read(void*, unsigned int)+0xb6>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    5952:	lsls	r3, r1, #28
    5954:	bpl.n	5962 <FatFile::read(void*, unsigned int)+0x176>
    5956:	ldrb	r3, [r5, #2]
    5958:	lsls	r4, r3, #25
    595a:	bpl.n	5962 <FatFile::read(void*, unsigned int)+0x176>
          m_curCluster++;
    595c:	ldr	r1, [r5, #16]
    595e:	adds	r1, #1
    5960:	b.n	58da <FatFile::read(void*, unsigned int)+0xee>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5962:	mov	r0, r2
    5964:	ldr	r1, [r5, #16]
    5966:	mov	r2, sl
    5968:	bl	5e90 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    596c:	cmp	r0, #0
    596e:	blt.n	591a <FatFile::read(void*, unsigned int)+0x12e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    5970:	beq.n	5912 <FatFile::read(void*, unsigned int)+0x126>
    5972:	ldr	r2, [r5, #8]
    5974:	ldr	r1, [r5, #16]
    5976:	b.n	58dc <FatFile::read(void*, unsigned int)+0xf0>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    5978:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    597a:	rsb	r0, r6, r9

fail:
  m_error |= READ_ERROR;
  return -1;
}
    597e:	add	sp, #12
    5980:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00005984 <FatFile::peek()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    5984:	push	{r4, r5, r6, lr}
    5986:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    5988:	movs	r2, #1
    598a:	add.w	r1, sp, #7
    598e:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    5990:	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    5992:	ldr	r5, [r0, #16]
    5994:	bl	57ec <FatFile::read(void*, unsigned int)>
    5998:	cmp	r0, #1
    599a:	it	eq
    599c:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
    59a0:	str	r6, [r4, #20]
    59a2:	it	ne
    59a4:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    59a8:	str	r5, [r4, #16]
  return c;
}
    59aa:	add	sp, #8
    59ac:	pop	{r4, r5, r6, pc}
    59ae:	nop

000059b0 <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    59b0:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    59b2:	ldr	r3, [r0, #20]
    59b4:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    59b8:	sub	sp, #12
    59ba:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    59bc:	cbz	r5, 59c0 <FatFile::readDirCache(bool)+0x10>
    59be:	cbnz	r1, 59e4 <FatFile::readDirCache(bool)+0x34>
    int8_t n = read(&n, 1);
    59c0:	movs	r2, #1
    59c2:	add.w	r1, sp, #7
    59c6:	mov	r0, r4
    59c8:	bl	57ec <FatFile::read(void*, unsigned int)>
    59cc:	sxtb	r0, r0
    if  (n != 1) {
    59ce:	cmp	r0, #1
    59d0:	bne.n	59ea <FatFile::readDirCache(bool)+0x3a>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    59d2:	ldr	r3, [r4, #20]
    59d4:	adds	r3, #31
    59d6:	str	r3, [r4, #20]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    59d8:	ldr	r0, [r4, #8]
    59da:	adds	r0, #48	; 0x30
  } else {
    m_curPosition += 32;
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    59dc:	add.w	r0, r0, r5, lsl #5

fail:
  return nullptr;
}
    59e0:	add	sp, #12
    59e2:	pop	{r4, r5, pc}
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    59e4:	adds	r3, #32
    59e6:	str	r3, [r0, #20]
    59e8:	b.n	59d8 <FatFile::readDirCache(bool)+0x28>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
    59ea:	movs	r0, #0
}
    59ec:	add	sp, #12
    59ee:	pop	{r4, r5, pc}

000059f0 <FatFile::seekSet(unsigned long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    59f0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59f4:	ldrb	r3, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    59f6:	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    59f8:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    59fa:	cbz	r3, 5a2a <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    59fc:	ldr	r2, [r0, #20]
    59fe:	cmp	r2, r1
    5a00:	mov	r6, r1
    5a02:	beq.n	5a7a <FatFile::seekSet(unsigned long)+0x8a>
    return true;
  }
  if (pos == 0) {
    5a04:	cbnz	r1, 5a18 <FatFile::seekSet(unsigned long)+0x28>
    // set position to start of file
    m_curCluster = 0;
    5a06:	str	r1, [r4, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5a08:	ldrb	r3, [r4, #2]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    5a0a:	str	r6, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5a0c:	bic.w	r3, r3, #32
    5a10:	strb	r3, [r4, #2]
  return true;
    5a12:	movs	r0, #1
    5a14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    5a18:	lsls	r0, r3, #28
    5a1a:	bmi.n	5a32 <FatFile::seekSet(unsigned long)+0x42>
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    5a1c:	lsls	r1, r3, #26
    5a1e:	bpl.n	5a38 <FatFile::seekSet(unsigned long)+0x48>
    5a20:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    5a22:	ldrh	r3, [r3, #8]
    5a24:	cmp.w	r6, r3, lsl #5
    5a28:	bls.n	5a08 <FatFile::seekSet(unsigned long)+0x18>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

fail:
  m_curCluster = tmp;
    5a2a:	str	r7, [r4, #16]
  return false;
    5a2c:	movs	r0, #0
    5a2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
    5a32:	ldr	r1, [r4, #28]
    5a34:	cmp	r6, r1
    5a36:	bhi.n	5a2a <FatFile::seekSet(unsigned long)+0x3a>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    5a38:	ldr.w	lr, [r4, #8]
    5a3c:	ldrb.w	r5, [lr, #6]
    5a40:	adds	r5, #9
    5a42:	uxtb	r1, r5
    5a44:	subs	r0, r2, #1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    5a46:	subs	r5, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    5a48:	lsrs	r0, r1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    5a4a:	lsrs	r5, r1

  if (nNew < nCur || m_curPosition == 0) {
    5a4c:	cmp	r0, r5
    5a4e:	bhi.n	5a52 <FatFile::seekSet(unsigned long)+0x62>
    5a50:	cbnz	r2, 5a80 <FatFile::seekSet(unsigned long)+0x90>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    5a52:	lsls	r3, r3, #25
    5a54:	ite	mi
    5a56:	ldrmi.w	r3, [lr, #32]
    5a5a:	ldrpl	r3, [r4, #32]
    5a5c:	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5a5e:	add.w	r8, r4, #16
    5a62:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    5a64:	cmp	r5, #0
    5a66:	beq.n	5a08 <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5a68:	ldr	r1, [r4, #16]
    5a6a:	ldr	r0, [r4, #8]
    5a6c:	bl	5e90 <FatPartition::fatGet(unsigned long, unsigned long*)>
    5a70:	cmp	r0, #0
    5a72:	add.w	r5, r5, #4294967295
    5a76:	bgt.n	5a62 <FatFile::seekSet(unsigned long)+0x72>
    5a78:	b.n	5a2a <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    5a7a:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    5a7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    5a80:	subs	r5, r5, r0
    5a82:	b.n	5a5e <FatFile::seekSet(unsigned long)+0x6e>

00005a84 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    5a84:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a88:	mov	r5, r1
    5a8a:	mov	r8, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    5a8c:	movs	r1, #0
    5a8e:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    5a90:	mov	r4, r0
    5a92:	mov	r7, r3
    5a94:	ldrb.w	r6, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    5a98:	bl	c10c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    5a9c:	ldr	r0, [r5, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    5a9e:	ldr	r3, [r5, #32]
    5aa0:	str	r3, [r4, #12]
    5aa2:	add.w	r2, r0, #48	; 0x30
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    5aa6:	and.w	r3, r8, #15
    5aaa:	add.w	r2, r2, r3, lsl #5
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    5aae:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
    5ab0:	strh.w	r8, [r4, #4]
    5ab4:	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    5ab6:	lsls	r5, r1, #28
    5ab8:	bmi.n	5ae0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    5aba:	and.w	r1, r1, #23
    5abe:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    5ac0:	ldrb	r3, [r2, #11]
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    5ac2:	strb	r6, [r4, #3]
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    5ac4:	tst.w	r3, #24
    m_attributes |= FILE_ATTR_FILE;
    5ac8:	it	eq
    5aca:	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    5ace:	and.w	r3, r7, #3
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    5ad2:	it	eq
    5ad4:	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    5ad6:	cmp	r3, #1
    5ad8:	beq.n	5aea <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
    5ada:	cmp	r3, #2
    5adc:	beq.n	5b32 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    5ade:	cbz	r3, 5b28 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    5ae0:	movs	r0, #0
    5ae2:	strb	r0, [r4, #0]
  m_flags = 0;
    5ae4:	strb	r0, [r4, #2]
  return false;
    5ae6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    5aea:	movs	r3, #2
    5aec:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    5aee:	ldrb	r1, [r4, #0]
    5af0:	tst.w	r1, #17
    5af4:	bne.n	5ae0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    5af6:	sxtb	r1, r3
    5af8:	and.w	r5, r7, #1024	; 0x400
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    5afc:	and.w	r3, r7, #8
    5b00:	orrs	r3, r1
    5b02:	uxtb	r3, r3
    5b04:	strb	r3, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    5b06:	ldrh.w	lr, [r2, #20]
    5b0a:	ldrh	r1, [r2, #26]
    5b0c:	ldr	r6, [r0, #44]	; 0x2c
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    5b0e:	str	r6, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    5b10:	orr.w	r1, r1, lr, lsl #16

  if (oflag & O_TRUNC) {
    5b14:	cbz	r5, 5b38 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    5b16:	cbnz	r1, 5b4e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xca>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5b18:	orn	r3, r3, #127	; 0x7f
    5b1c:	strb	r3, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    5b1e:	lsls	r3, r7, #17
    5b20:	bmi.n	5b40 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    5b22:	movs	r0, #1
    5b24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    5b28:	ands.w	r5, r7, #1024	; 0x400
    5b2c:	bne.n	5ae0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    5b2e:	movs	r1, #1
    5b30:	b.n	5afc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x78>
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    5b32:	movs	r3, #3
    5b34:	strb	r3, [r4, #2]
      break;
    5b36:	b.n	5aee <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    5b38:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    5b3a:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    5b3c:	str	r3, [r4, #28]
    5b3e:	b.n	5b1e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9a>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    5b40:	ldr	r1, [r4, #28]
    5b42:	mov	r0, r4
    5b44:	bl	59f0 <FatFile::seekSet(unsigned long)>
    5b48:	cmp	r0, #0
    5b4a:	bne.n	5b22 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
    5b4c:	b.n	5ae0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    5b4e:	bl	6094 <FatPartition::freeChain(unsigned long)>
    5b52:	cmp	r0, #0
    5b54:	beq.n	5ae0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    5b56:	ldrb	r3, [r4, #2]
    5b58:	b.n	5b18 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    5b5a:	nop

00005b5c <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5b5c:	ldrb	r3, [r0, #0]
    5b5e:	cbz	r3, 5b64 <FatFile::sync()+0x8>
    5b60:	b.w	560c <FatFile::sync() [clone .part.40]>
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    5b64:	movs	r0, #1
    5b66:	bx	lr

00005b68 <FatFile::truncate()>:
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    5b68:	ldrb	r3, [r0, #2]
    5b6a:	lsls	r3, r3, #30
    5b6c:	bpl.n	5ba4 <FatFile::truncate()+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    5b6e:	ldr	r3, [r0, #32]
    5b70:	cbz	r3, 5ba0 <FatFile::truncate()+0x38>

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    5b72:	push	{r4, lr}
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    5b74:	ldr	r1, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    5b76:	sub	sp, #8
    5b78:	mov	r4, r0
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    5b7a:	cbnz	r1, 5bba <FatFile::truncate()+0x52>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    5b7c:	str	r3, [sp, #4]
    m_firstCluster = 0;
    5b7e:	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    5b80:	mov	r1, r3
    5b82:	ldr	r0, [r4, #8]
    5b84:	bl	6094 <FatPartition::freeChain(unsigned long)>
    5b88:	cbz	r0, 5bb6 <FatFile::truncate()+0x4e>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5b8a:	ldrb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5b8c:	ldrb	r2, [r4, #0]
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    5b8e:	ldr	r1, [r4, #20]
    5b90:	str	r1, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5b92:	orn	r3, r3, #127	; 0x7f
    5b96:	strb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5b98:	cbnz	r2, 5bd6 <FatFile::truncate()+0x6e>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    5b9a:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    5b9c:	add	sp, #8
    5b9e:	pop	{r4, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    5ba0:	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    5ba2:	bx	lr
    goto fail;
  }
  return true;

 fail:
  return false;
    5ba4:	movs	r0, #0
}
    5ba6:	bx	lr
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    5ba8:	mvn.w	r2, #4026531840	; 0xf0000000
    5bac:	ldr	r1, [r4, #16]
    5bae:	ldr	r0, [r4, #8]
    5bb0:	bl	5f00 <FatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
      // current cluster is end of chain
      if (!m_vol->fatPutEOC(m_curCluster)) {
    5bb4:	cbnz	r0, 5bce <FatFile::truncate()+0x66>
    goto fail;
  }
  return true;

 fail:
  return false;
    5bb6:	movs	r0, #0
    5bb8:	b.n	5b9c <FatFile::truncate()+0x34>
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    toFree = 0;
    5bba:	add	r2, sp, #8
    5bbc:	movs	r3, #0
    5bbe:	str.w	r3, [r2, #-4]!
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    5bc2:	ldr	r0, [r0, #8]
    5bc4:	bl	5e90 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    5bc8:	cmp	r0, #0
    5bca:	blt.n	5bb6 <FatFile::truncate()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
    5bcc:	bne.n	5ba8 <FatFile::truncate()+0x40>
    }
  } else {
    toFree = m_firstCluster;
    m_firstCluster = 0;
  }
  if (toFree) {
    5bce:	ldr	r3, [sp, #4]
    5bd0:	cmp	r3, #0
    5bd2:	beq.n	5b8a <FatFile::truncate()+0x22>
    5bd4:	b.n	5b80 <FatFile::truncate()+0x18>
    5bd6:	mov	r0, r4
    5bd8:	bl	560c <FatFile::sync() [clone .part.40]>
    5bdc:	b.n	5b9c <FatFile::truncate()+0x34>
    5bde:	nop

00005be0 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    5be0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5be4:	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    5be6:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    5be8:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    5bea:	bmi.n	5bfc <FatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    5bec:	ldrb	r3, [r4, #1]
    5bee:	orr.w	r3, r3, #1
    5bf2:	strb	r3, [r4, #1]
  return -1;
    5bf4:	mov.w	r0, #4294967295
    5bf8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5bfc:	mov	r9, r2
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    5bfe:	lsls	r2, r3, #28
    5c00:	mov	r8, r1
    5c02:	bmi.w	5d84 <FatFile::write(void const*, unsigned int)+0x1a4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    5c06:	ldr	r2, [r4, #20]
    5c08:	mvns	r3, r2
    5c0a:	cmp	r9, r3
    5c0c:	bhi.n	5bec <FatFile::write(void const*, unsigned int)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    5c0e:	cmp.w	r9, #0
    5c12:	beq.w	5d92 <FatFile::write(void const*, unsigned int)+0x1b2>
    5c16:	mov	r6, r9
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5c18:	mov.w	sl, #0
    5c1c:	b.n	5c80 <FatFile::write(void const*, unsigned int)+0xa0>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    5c1e:	cmp	r1, #0
    5c20:	beq.n	5d16 <FatFile::write(void const*, unsigned int)+0x136>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    5c22:	ldrb	r3, [r4, #2]
    5c24:	lsls	r3, r3, #25
    5c26:	bpl.n	5d24 <FatFile::write(void const*, unsigned int)+0x144>
    5c28:	ldr	r3, [r4, #28]
    5c2a:	cmp	r3, r2
    5c2c:	bls.n	5d24 <FatFile::write(void const*, unsigned int)+0x144>
          m_curCluster++;
    5c2e:	adds	r1, #1
    5c30:	str	r1, [r4, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5c32:	bl	5e84 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    5c36:	cmp.w	r6, #512	; 0x200
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5c3a:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    5c3c:	bcs.n	5cba <FatFile::write(void const*, unsigned int)+0xda>
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    5c3e:	ldr	r2, [r4, #20]
    5c40:	ldr	r3, [r4, #28]
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    5c42:	ldr	r0, [r4, #8]
    5c44:	cmp.w	r6, #512	; 0x200
    5c48:	mov	r5, r6
    5c4a:	it	cs
    5c4c:	movcs.w	r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    5c50:	cmp	r2, r3
    5c52:	bcc.n	5d46 <FatFile::write(void const*, unsigned int)+0x166>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    5c54:	movs	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5c56:	adds	r0, #36	; 0x24
    5c58:	bl	5e14 <FatCache::read(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    5c5c:	cmp	r0, #0
    5c5e:	beq.n	5bec <FatFile::write(void const*, unsigned int)+0xc>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    5c60:	add	r0, r7
    5c62:	mov	r2, r5
    5c64:	mov	r1, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5c66:	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    5c68:	bl	81f4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5c6c:	cmp.w	r7, #512	; 0x200
    5c70:	beq.n	5d62 <FatFile::write(void const*, unsigned int)+0x182>
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5c72:	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    5c74:	subs	r6, r6, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5c76:	add	r2, r5
    src += n;
    5c78:	add	r8, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5c7a:	str	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    5c7c:	beq.w	5d92 <FatFile::write(void const*, unsigned int)+0x1b2>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    5c80:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    5c82:	ldr	r1, [r4, #16]
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    5c84:	ldrb	r3, [r0, #5]
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    5c86:	ands.w	r5, r3, r2, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    5c8a:	ubfx	r7, r2, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    5c8e:	bne.n	5caa <FatFile::write(void const*, unsigned int)+0xca>
    5c90:	cmp	r7, #0
    5c92:	beq.n	5c1e <FatFile::write(void const*, unsigned int)+0x3e>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5c94:	bl	5e84 <FatPartition::clusterStartSector(unsigned long) const>
    5c98:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    5c9a:	rsb	r5, r7, #512	; 0x200
    5c9e:	cmp	r5, r6
    5ca0:	it	cs
    5ca2:	movcs	r5, r6
    5ca4:	ldr	r0, [r4, #8]
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
    5ca6:	movs	r2, #1
    5ca8:	b.n	5c56 <FatFile::write(void const*, unsigned int)+0x76>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5caa:	bl	5e84 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;
    5cae:	adds	r1, r5, r0

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    5cb0:	cmp	r7, #0
    5cb2:	bne.n	5c9a <FatFile::write(void const*, unsigned int)+0xba>
    5cb4:	cmp.w	r6, #512	; 0x200
    5cb8:	bcc.n	5c3e <FatFile::write(void const*, unsigned int)+0x5e>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    5cba:	cmp.w	r6, #1024	; 0x400
    5cbe:	ldr	r2, [r4, #8]
    5cc0:	bcc.n	5cfa <FatFile::write(void const*, unsigned int)+0x11a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    5cc2:	ldrb	r3, [r2, #4]
    5cc4:	ldr	r7, [r2, #44]	; 0x2c
    5cc6:	subs	r3, r3, r5
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    5cc8:	lsrs	r0, r6, #9
    5cca:	cmp	r3, r0
    5ccc:	it	cs
    5cce:	movcs	r3, r0
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    5cd0:	cmp	r7, r1
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    5cd2:	mov.w	r5, r3, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    5cd6:	bcc.n	5cea <FatFile::write(void const*, unsigned int)+0x10a>
    5cd8:	add	r7, r3
    5cda:	cmp	r7, r1
    5cdc:	bls.n	5cea <FatFile::write(void const*, unsigned int)+0x10a>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5cde:	strb.w	sl, [r2, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    5ce2:	mov.w	r0, #4294967295
    5ce6:	str	r0, [r2, #44]	; 0x2c
    5ce8:	ldr	r2, [r4, #8]
    5cea:	ldr	r0, [r2, #0]
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    return m_blockDev->writeSectors(sector, src, ns);
    5cec:	ldr	r2, [r0, #0]
    5cee:	ldr	r7, [r2, #28]
    5cf0:	mov	r2, r8
    5cf2:	blx	r7
        // Invalidate cache if cache sector is in the range.
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, nSector)) {
    5cf4:	cmp	r0, #0
    5cf6:	bne.n	5c72 <FatFile::write(void const*, unsigned int)+0x92>
    5cf8:	b.n	5bec <FatFile::write(void const*, unsigned int)+0xc>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
    5cfa:	ldr	r3, [r2, #44]	; 0x2c
    5cfc:	cmp	r3, r1
    5cfe:	beq.n	5d54 <FatFile::write(void const*, unsigned int)+0x174>
    5d00:	ldr	r0, [r2, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5d02:	ldr	r3, [r0, #0]
    5d04:	mov	r2, r8
    5d06:	ldr	r3, [r3, #24]
    5d08:	blx	r3
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    5d0a:	cmp	r0, #0
    5d0c:	beq.w	5bec <FatFile::write(void const*, unsigned int)+0xc>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    5d10:	mov.w	r5, #512	; 0x200
    5d14:	b.n	5c72 <FatFile::write(void const*, unsigned int)+0x92>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    5d16:	ldr	r1, [r4, #32]
    5d18:	cbz	r1, 5d70 <FatFile::write(void const*, unsigned int)+0x190>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    5d1a:	str	r1, [r4, #16]
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    5d1c:	bl	5e84 <FatPartition::clusterStartSector(unsigned long) const>
    5d20:	mov	r1, r0
    5d22:	b.n	5cb4 <FatFile::write(void const*, unsigned int)+0xd4>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5d24:	add.w	r2, r4, #16
    5d28:	bl	5e90 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    5d2c:	cmp	r0, #0
    5d2e:	blt.w	5bec <FatFile::write(void const*, unsigned int)+0xc>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    5d32:	bne.n	5d40 <FatFile::write(void const*, unsigned int)+0x160>
          // add cluster if at end of chain
          if (!addCluster()) {
    5d34:	mov	r0, r4
    5d36:	bl	5524 <FatFile::addCluster()>
    5d3a:	cmp	r0, #0
    5d3c:	beq.w	5bec <FatFile::write(void const*, unsigned int)+0xc>
    5d40:	ldr	r0, [r4, #8]
    5d42:	ldr	r1, [r4, #16]
    5d44:	b.n	5d1c <FatFile::write(void const*, unsigned int)+0x13c>
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    5d46:	ldrb	r3, [r4, #2]
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    5d48:	tst.w	r3, #32
    5d4c:	ite	eq
    5d4e:	moveq	r2, #1
    5d50:	movne	r2, #5
    5d52:	b.n	5c56 <FatFile::write(void const*, unsigned int)+0x76>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    5d54:	strb.w	sl, [r2, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    5d58:	mov.w	r3, #4294967295
    5d5c:	str	r3, [r2, #44]	; 0x2c
    5d5e:	ldr	r2, [r4, #8]
    5d60:	b.n	5d00 <FatFile::write(void const*, unsigned int)+0x120>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    5d62:	ldr	r0, [r4, #8]
    5d64:	adds	r0, #36	; 0x24
    5d66:	bl	5e74 <FatCache::sync()>
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    5d6a:	cmp	r0, #0
    5d6c:	bne.n	5c72 <FatFile::write(void const*, unsigned int)+0x92>
    5d6e:	b.n	5bec <FatFile::write(void const*, unsigned int)+0xc>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    5d70:	mov	r0, r4
    5d72:	bl	5524 <FatFile::addCluster()>
    5d76:	cmp	r0, #0
    5d78:	beq.w	5bec <FatFile::write(void const*, unsigned int)+0xc>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    5d7c:	ldr	r1, [r4, #16]
    5d7e:	str	r1, [r4, #32]
    5d80:	ldr	r0, [r4, #8]
    5d82:	b.n	5d1c <FatFile::write(void const*, unsigned int)+0x13c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    5d84:	ldr	r1, [r0, #28]
    5d86:	bl	59f0 <FatFile::seekSet(unsigned long)>
    5d8a:	cmp	r0, #0
    5d8c:	beq.w	5bec <FatFile::write(void const*, unsigned int)+0xc>
    5d90:	b.n	5c06 <FatFile::write(void const*, unsigned int)+0x26>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    5d92:	ldr	r3, [r4, #28]
    5d94:	cmp	r3, r2
    5d96:	bcc.n	5dac <FatFile::write(void const*, unsigned int)+0x1cc>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    5d98:	ldr	r3, [pc, #40]	; (5dc4 <FatFile::write(void const*, unsigned int)+0x1e4>)
    5d9a:	ldr	r3, [r3, #0]
    5d9c:	cbz	r3, 5dbc <FatFile::write(void const*, unsigned int)+0x1dc>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5d9e:	ldrb	r3, [r4, #2]
    5da0:	orn	r3, r3, #127	; 0x7f
    5da4:	strb	r3, [r4, #2]
    5da6:	mov	r0, r9
    5da8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5dac:	ldrb	r3, [r4, #2]
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    5dae:	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5db0:	orn	r3, r3, #127	; 0x7f
    5db4:	strb	r3, [r4, #2]
    5db6:	mov	r0, r9
    5db8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5dbc:	mov	r0, r9
    5dbe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5dc2:	nop
    5dc4:	.word	0x2001c8f8

00005dc8 <FatCache::sync() [clone .part.8]>:
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    5dc8:	push	{r3, r4, r5, r6, r7, lr}
    5dca:	ldr	r3, [r0, #4]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5dcc:	ldr	r1, [r0, #8]
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5dce:	add.w	r6, r0, #12
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    5dd2:	mov	r4, r0
    5dd4:	ldr	r0, [r3, #0]
    5dd6:	ldr	r3, [r0, #0]
    5dd8:	mov	r2, r6
    5dda:	ldr	r3, [r3, #24]
    5ddc:	blx	r3
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    5dde:	cbz	r0, 5df2 <FatCache::sync() [clone .part.8]+0x2a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5de0:	ldrb	r3, [r4, #0]
    5de2:	lsls	r2, r3, #30
    5de4:	mov	r5, r0
    5de6:	bmi.n	5df8 <FatCache::sync() [clone .part.8]+0x30>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    5de8:	bic.w	r3, r3, #1
    5dec:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    5dee:	mov	r0, r5
    5df0:	pop	{r3, r4, r5, r6, r7, pc}
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
    5df2:	movs	r5, #0
}
    5df4:	mov	r0, r5
    5df6:	pop	{r3, r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    5df8:	ldr	r3, [r4, #4]
    5dfa:	ldr	r1, [r4, #8]
    5dfc:	ldr	r0, [r3, #0]
    5dfe:	ldr	r7, [r3, #16]
    5e00:	ldr	r3, [r0, #0]
    5e02:	mov	r2, r6
    5e04:	add	r1, r7
    5e06:	ldr	r3, [r3, #24]
    5e08:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    5e0a:	cmp	r0, #0
    5e0c:	beq.n	5df2 <FatCache::sync() [clone .part.8]+0x2a>
    5e0e:	ldrb	r3, [r4, #0]
    5e10:	b.n	5de8 <FatCache::sync() [clone .part.8]+0x20>
    5e12:	nop

00005e14 <FatCache::read(unsigned long, unsigned char)>:
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    5e14:	push	{r3, r4, r5, r6, r7, lr}
  if (m_lbn != sector) {
    5e16:	ldr	r3, [r0, #8]
    5e18:	cmp	r3, r1
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    5e1a:	mov	r6, r0
    5e1c:	mov	r4, r2
  if (m_lbn != sector) {
    5e1e:	beq.n	5e40 <FatCache::read(unsigned long, unsigned char)+0x2c>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5e20:	ldrb	r3, [r0, #0]
    5e22:	lsls	r2, r3, #31
    5e24:	mov	r7, r1
    5e26:	bmi.n	5e4e <FatCache::read(unsigned long, unsigned char)+0x3a>
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    5e28:	lsls	r3, r4, #29
    5e2a:	bpl.n	5e5a <FatCache::read(unsigned long, unsigned char)+0x46>
    5e2c:	add.w	r5, r6, #12
    5e30:	movs	r3, #0
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    5e32:	and.w	r4, r4, #3
    5e36:	orrs	r4, r3
    5e38:	strb	r4, [r6, #0]
    5e3a:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    5e3c:	str	r7, [r6, #8]
  return &m_buffer;

fail:

  return nullptr;
}
    5e3e:	pop	{r3, r4, r5, r6, r7, pc}
    5e40:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    5e44:	and.w	r4, r4, #3
    5e48:	orrs	r4, r3
    5e4a:	strb	r4, [r6, #0]
  return &m_buffer;

fail:

  return nullptr;
}
    5e4c:	pop	{r3, r4, r5, r6, r7, pc}
    5e4e:	bl	5dc8 <FatCache::sync() [clone .part.8]>
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    if (!sync()) {
    5e52:	cmp	r0, #0
    5e54:	bne.n	5e28 <FatCache::read(unsigned long, unsigned char)+0x14>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    5e56:	movs	r0, #0
    5e58:	pop	{r3, r4, r5, r6, r7, pc}
    5e5a:	ldr	r3, [r6, #4]
    5e5c:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5e5e:	ldr	r3, [r0, #0]
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    5e60:	add.w	r5, r6, #12
    5e64:	ldr	r3, [r3, #8]
    5e66:	mov	r2, r5
    5e68:	mov	r1, r7
    5e6a:	blx	r3
    5e6c:	cmp	r0, #0
    5e6e:	bne.n	5e30 <FatCache::read(unsigned long, unsigned char)+0x1c>
    5e70:	b.n	5e56 <FatCache::read(unsigned long, unsigned char)+0x42>
    5e72:	nop

00005e74 <FatCache::sync()>:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    5e74:	ldrb	r3, [r0, #0]
    5e76:	lsls	r3, r3, #31
    5e78:	bmi.n	5e7e <FatCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    5e7a:	movs	r0, #1
    5e7c:	bx	lr
    5e7e:	b.w	5dc8 <FatCache::sync() [clone .part.8]>
    5e82:	nop

00005e84 <FatPartition::clusterStartSector(unsigned long) const>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5e84:	ldrb	r3, [r0, #6]
    5e86:	ldr	r0, [r0, #20]
    5e88:	subs	r1, #2
    5e8a:	lsls	r1, r3
}
    5e8c:	add	r0, r1
    5e8e:	bx	lr

00005e90 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    5e90:	cmp	r1, #1
    5e92:	bls.n	5ef8 <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
    5e94:	ldr	r3, [r0, #28]
    5e96:	cmp	r1, r3
    5e98:	bhi.n	5ef8 <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    5e9a:	push	{r4, r5, r6, lr}
    5e9c:	ldrb	r3, [r0, #7]
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    5e9e:	cmp	r3, #32
    5ea0:	mov	r6, r2
    5ea2:	mov	r5, r0
    5ea4:	mov	r4, r1
    5ea6:	beq.n	5eda <FatPartition::fatGet(unsigned long, unsigned long*)+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    5ea8:	cmp	r3, #16
    5eaa:	bne.n	5ed4 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    5eac:	ldr	r3, [r0, #24]
    5eae:	ubfx	r1, r1, #8, #8
    5eb2:	add	r1, r3
    5eb4:	movs	r2, #2
    5eb6:	add.w	r0, r0, #560	; 0x230
    5eba:	bl	5e14 <FatCache::read(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    5ebe:	cbz	r0, 5ed4 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    5ec0:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    5ec2:	ldrh.w	r3, [r0, r1, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    5ec6:	ldr	r2, [r5, #28]
    5ec8:	cmp	r3, r2
    return 0;
  }
  *value = next;
  return 1;
    5eca:	itte	ls
    5ecc:	movls	r0, #1
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
  }
  *value = next;
    5ece:	strls	r3, [r6, #0]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    5ed0:	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
    5ed2:	pop	{r4, r5, r6, pc}
  }
  *value = next;
  return 1;

fail:
  return -1;
    5ed4:	mov.w	r0, #4294967295
    5ed8:	pop	{r4, r5, r6, pc}
    5eda:	ldr	r1, [r0, #24]
    5edc:	movs	r2, #2
    5ede:	add.w	r1, r1, r4, lsr #7
    5ee2:	add.w	r0, r0, #560	; 0x230
    5ee6:	bl	5e14 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    5eea:	cmp	r0, #0
    5eec:	beq.n	5ed4 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    5eee:	and.w	r1, r4, #127	; 0x7f
    5ef2:	ldr.w	r3, [r0, r1, lsl #2]
    5ef6:	b.n	5ec6 <FatPartition::fatGet(unsigned long, unsigned long*)+0x36>
  }
  *value = next;
  return 1;

fail:
  return -1;
    5ef8:	mov.w	r0, #4294967295
}
    5efc:	bx	lr
    5efe:	nop

00005f00 <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    5f00:	cmp	r1, #1
    5f02:	bls.n	5f40 <FatPartition::fatPut(unsigned long, unsigned long)+0x40>
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    5f04:	push	{r3, r4, r5, lr}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    5f06:	ldr	r3, [r0, #28]
    5f08:	cmp	r1, r3
    5f0a:	bhi.n	5f1a <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    5f0c:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    5f0e:	cmp	r3, #32
    5f10:	mov	r5, r2
    5f12:	mov	r4, r1
    5f14:	beq.n	5f44 <FatPartition::fatPut(unsigned long, unsigned long)+0x44>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    5f16:	cmp	r3, #16
    5f18:	beq.n	5f1e <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    5f1a:	movs	r0, #0
    5f1c:	pop	{r3, r4, r5, pc}
    5f1e:	ldr	r3, [r0, #24]
    5f20:	ubfx	r1, r1, #8, #8
    5f24:	add	r1, r3
    5f26:	add.w	r0, r0, #560	; 0x230
    5f2a:	movs	r2, #3
    5f2c:	bl	5e14 <FatCache::read(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    5f30:	mov	r3, r0
    5f32:	cmp	r0, #0
    5f34:	beq.n	5f1a <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5f36:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    5f38:	movs	r0, #1
    5f3a:	strh.w	r5, [r3, r1, lsl #1]
    goto fail;
  }

fail:
  return false;
}
    5f3e:	pop	{r3, r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    5f40:	movs	r0, #0
}
    5f42:	bx	lr
    5f44:	ldr	r1, [r0, #24]
    5f46:	movs	r2, #3
    5f48:	add.w	r0, r0, #560	; 0x230
    5f4c:	add.w	r1, r1, r4, lsr #7
    5f50:	bl	5e14 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    5f54:	mov	r3, r0
    5f56:	cmp	r0, #0
    5f58:	beq.n	5f1a <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5f5a:	and.w	r1, r4, #127	; 0x7f
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    5f5e:	movs	r0, #1
    5f60:	str.w	r5, [r3, r1, lsl #2]
    5f64:	pop	{r3, r4, r5, pc}
    5f66:	nop

00005f68 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    5f68:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    5f6c:	ldr	r4, [r0, #12]
    5f6e:	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    5f70:	sub	sp, #8
    5f72:	mov	r5, r0
    5f74:	mov	r7, r1
    5f76:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    5f78:	itte	cc
    5f7a:	movcc	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    5f7c:	movcc	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
    5f7e:	movcs	r6, #1
    5f80:	ldr	r3, [r5, #28]
  }
  while (1) {
    find++;
    5f82:	adds	r4, #1
    if (find > m_lastCluster) {
    5f84:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    5f86:	add	r2, sp, #4
    5f88:	mov	r0, r5
    5f8a:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    5f8c:	bls.n	5fa2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x3a>
      if (setStart) {
    5f8e:	cbnz	r6, 5fe0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    5f90:	ldr	r4, [r5, #12]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    5f92:	adds	r4, #1
    if (find > m_lastCluster) {
    5f94:	cmp	r4, r3
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
      setStart = true;
    5f96:	mov.w	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    5f9a:	add	r2, sp, #4
    5f9c:	mov	r0, r5
    5f9e:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    5fa0:	bhi.n	5f8e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    5fa2:	cmp	r7, r4
    5fa4:	beq.n	5fe0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    5fa6:	bl	5e90 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    5faa:	cmp	r0, #0
    5fac:	blt.n	5fe0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    5fae:	beq.n	5f80 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    5fb0:	ldr	r3, [sp, #4]
    5fb2:	cmp	r3, #0
    5fb4:	bne.n	5f80 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
      break;
    }
  }
  if (setStart) {
    5fb6:	cbz	r6, 5fba <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x52>
    m_allocSearchStart = find;
    5fb8:	str	r4, [r5, #12]
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    5fba:	mvn.w	r2, #4026531840	; 0xf0000000
    5fbe:	mov	r1, r4
    5fc0:	mov	r0, r5
    5fc2:	bl	5f00 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    5fc6:	mov	r6, r0
    5fc8:	cbz	r0, 5fe0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    5fca:	cbnz	r7, 5fd2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6a>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    5fcc:	str.w	r4, [r8]
  return true;
    5fd0:	b.n	5fe2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    5fd2:	mov	r1, r7
    5fd4:	mov	r0, r5
    5fd6:	mov	r2, r4
    5fd8:	bl	5f00 <FatPartition::fatPut(unsigned long, unsigned long)>
    5fdc:	cmp	r0, #0
    5fde:	bne.n	5fcc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x64>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    5fe0:	movs	r6, #0
}
    5fe2:	mov	r0, r6
    5fe4:	add	sp, #8
    5fe6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5fea:	nop

00005fec <FatPartition::allocContiguous(unsigned long, unsigned long*)>:
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool FatPartition::allocContiguous(uint32_t count, uint32_t* firstCluster) {
    5fec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  // start of group
  uint32_t bgnCluster;
  // end of group
  uint32_t endCluster;
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;
    5ff0:	ldr	r4, [r0, #12]

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    5ff2:	ldr	r3, [r0, #28]
  // start of group
  uint32_t bgnCluster;
  // end of group
  uint32_t endCluster;
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;
    5ff4:	adds	r7, r4, #1

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    5ff6:	cmp	r7, r3
fail:
  return false;
}
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool FatPartition::allocContiguous(uint32_t count, uint32_t* firstCluster) {
    5ff8:	sub	sp, #8
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    5ffa:	bhi.n	604a <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
    5ffc:	mov	sl, r2
    5ffe:	mov	r9, r1
    6000:	mov	r6, r0
    6002:	adds	r4, #2
    6004:	mov.w	r8, #1
    6008:	b.n	601e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x32>
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    600a:	subs	r2, r4, r7
    600c:	mov	r3, r4
    int8_t fg = fatGet(endCluster, &f);
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (f || fg == 0) {
    600e:	cbz	r0, 6034 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x48>
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    6010:	cmp	r2, r9
    6012:	beq.n	6054 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x68>
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    6014:	ldr	r2, [r6, #28]
    6016:	cmp	r3, r2
    6018:	add.w	r4, r4, #1
    601c:	bhi.n	604a <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
    601e:	subs	r5, r4, #1
      // Can't find space.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(endCluster, &f);
    6020:	mov	r1, r5
    6022:	add	r2, sp, #4
    6024:	mov	r0, r6
    6026:	bl	5e90 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    602a:	cmp	r0, #0
    602c:	blt.n	604a <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (f || fg == 0) {
    602e:	ldr	r3, [sp, #4]
    6030:	cmp	r3, #0
    6032:	beq.n	600a <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x1e>
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    6034:	ldr	r2, [r6, #28]
      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    6036:	mov	r3, r4
      goto fail;
    }
    if (f || fg == 0) {
      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) {
        setStart = false;
    6038:	cmp	r7, r5
    603a:	it	ne
    603c:	movne.w	r8, #0
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    6040:	cmp	r3, r2
      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    6042:	mov	r7, r4
    6044:	add.w	r4, r4, #1
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    6048:	bls.n	601e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x32>
  // return first cluster number to caller
  *firstCluster = bgnCluster;
  return true;

fail:
  return false;
    604a:	movs	r4, #0
}
    604c:	mov	r0, r4
    604e:	add	sp, #8
    6050:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      break;
    }
    endCluster++;
  }
  // Remember possible next free cluster.
  if (setStart) {
    6054:	cmp.w	r8, #0
    6058:	beq.n	605c <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x70>
    m_allocSearchStart = endCluster;
    605a:	str	r5, [r6, #12]
    605c:	mvn.w	r2, #4026531840	; 0xf0000000
    6060:	mov	r1, r5
    6062:	mov	r0, r6
    6064:	bl	5f00 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) {
    6068:	mov	r4, r0
    606a:	cmp	r0, #0
    606c:	beq.n	604a <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // link clusters
  while (endCluster > bgnCluster) {
    606e:	cmp	r7, r5
    6070:	bcc.n	6078 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x8c>
    6072:	b.n	608e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xa2>
    6074:	cmp	r5, r7
    6076:	bls.n	608e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xa2>
    if (!fatPut(endCluster - 1, endCluster)) {
    6078:	add.w	r8, r5, #4294967295
    607c:	mov	r2, r5
    607e:	mov	r1, r8
    6080:	mov	r0, r6
    6082:	bl	5f00 <FatPartition::fatPut(unsigned long, unsigned long)>
    6086:	mov	r5, r8
    6088:	cmp	r0, #0
    608a:	bne.n	6074 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x88>
    608c:	b.n	604a <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x5e>
  }
  // Maintain count of free clusters.
  updateFreeClusterCount(-count);

  // return first cluster number to caller
  *firstCluster = bgnCluster;
    608e:	str.w	r7, [sl]
  return true;
    6092:	b.n	604c <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x60>

00006094 <FatPartition::freeChain(unsigned long)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    6094:	push	{r4, r5, r6, lr}
    6096:	mov	r5, r0
    6098:	sub	sp, #8
    609a:	mov	r4, r1
    609c:	b.n	60b4 <FatPartition::freeChain(unsigned long)+0x20>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    609e:	bl	5f00 <FatPartition::fatPut(unsigned long, unsigned long)>
    60a2:	cbz	r0, 60ca <FatPartition::freeChain(unsigned long)+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    60a4:	ldr	r3, [r5, #12]
    60a6:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    60a8:	itt	cc
    60aa:	addcc.w	r4, r4, #4294967295
    60ae:	strcc	r4, [r5, #12]
    }
    cluster = next;
    60b0:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    60b2:	cbz	r6, 60cc <FatPartition::freeChain(unsigned long)+0x38>
    fg = fatGet(cluster, &next);
    60b4:	add	r2, sp, #4
    60b6:	mov	r1, r4
    60b8:	mov	r0, r5
    60ba:	bl	5e90 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    60be:	subs	r6, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    60c0:	mov	r1, r4
    60c2:	mov.w	r2, #0
    60c6:	mov	r0, r5
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    60c8:	bge.n	609e <FatPartition::freeChain(unsigned long)+0xa>
  } while (fg);

  return true;

fail:
  return false;
    60ca:	movs	r0, #0
}
    60cc:	add	sp, #8
    60ce:	pop	{r4, r5, r6, pc}

000060d0 <FatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    60d0:	push	{r3, r4, r5, r6, r7, lr}
    60d2:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    60d4:	movs	r3, #0
  m_allocSearchStart = 1;
    60d6:	movs	r5, #1
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
    60d8:	mov.w	r0, #4294967295
    60dc:	str	r5, [r4, #12]
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    60de:	str	r1, [r4, #0]
  }
  /** Initialize the cache.
   * \param[in] vol FatPartition that owns this FatCache.
   */
  void init(FatPartition *vol) {
    m_part = vol;
    60e0:	str	r4, [r4, #40]	; 0x28
    60e2:	str.w	r4, [r4, #564]	; 0x234
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    60e6:	strb	r3, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    60e8:	strb.w	r3, [r4, #36]	; 0x24
    60ec:	strb.w	r3, [r4, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
    60f0:	str	r0, [r4, #44]	; 0x2c
    60f2:	str.w	r0, [r4, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    60f6:	mov	r5, r2
    60f8:	cbz	r2, 6132 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    60fa:	cmp	r2, #4
    60fc:	bls.n	6102 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x32>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    60fe:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    6100:	pop	{r3, r4, r5, r6, r7, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    6102:	add.w	r6, r4, #36	; 0x24
    6106:	mov	r2, r3
    6108:	mov	r1, r3
    610a:	mov	r0, r6
    610c:	bl	5e14 <FatCache::read(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;
    6110:	add.w	r5, r5, #268435456	; 0x10000000
    6114:	subs	r5, #1
    6116:	lsls	r5, r5, #4
    6118:	add.w	r3, r0, #446	; 0x1be
    611c:	adds	r2, r3, r5

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    611e:	cmp	r0, #0
    6120:	beq.n	60fe <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    6122:	ldrb	r1, [r2, #4]
    6124:	cmp	r1, #0
    6126:	beq.n	60fe <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    6128:	ldrb	r3, [r3, r5]
    612a:	lsls	r3, r3, #25
    612c:	bne.n	60fe <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    612e:	ldr	r5, [r2, #8]
    6130:	b.n	6136 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x66>
    6132:	add.w	r6, r4, #36	; 0x24
    6136:	mov	r0, r6
    6138:	movs	r2, #0
    613a:	mov	r1, r5
    613c:	bl	5e14 <FatCache::read(unsigned long, unsigned char)>
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    6140:	cmp	r0, #0
    6142:	beq.n	60fe <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    6144:	ldrb	r3, [r0, #16]
    6146:	cmp	r3, #2
    6148:	bne.n	60fe <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    614a:	ldrh.w	r3, [r0, #11]
    614e:	cmp.w	r3, #512	; 0x200
    6152:	bne.n	60fe <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    6154:	ldrb	r6, [r0, #13]
    6156:	strb	r6, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6158:	subs	r3, r6, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    615a:	movs	r2, #0
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    615c:	cmp	r6, #1
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    615e:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    6160:	strb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6162:	beq.n	6184 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb4>
    6164:	movs	r2, #1
    6166:	mov	r1, r2
    6168:	b.n	616c <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9c>
    616a:	mov	r2, r3
    616c:	lsls	r1, r1, #1
    616e:	uxtb	r1, r1
    6170:	adds	r3, r2, #1
    6172:	cmp	r6, r1
    6174:	uxtb	r3, r3
    6176:	beq.n	6182 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb2>
    if (tmp == 0) {
    6178:	cmp	r3, #9
    617a:	bne.n	616a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9a>
    617c:	strb	r2, [r4, #6]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    617e:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    6180:	pop	{r3, r4, r5, r6, r7, pc}
    6182:	strb	r2, [r4, #6]
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    6184:	ldrh	r1, [r0, #22]
    6186:	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    6188:	cbnz	r1, 618e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xbe>
    618a:	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    618c:	str	r1, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    618e:	ldrh	r7, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6190:	ldrh.w	r3, [r0, #17]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    6194:	strh	r3, [r4, #8]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    6196:	add	r7, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6198:	lsls	r3, r3, #5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    619a:	add.w	r6, r7, r1, lsl #1
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    619e:	addw	r3, r3, #511	; 0x1ff
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    61a2:	ldrh.w	r1, [r0, #19]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    61a6:	str	r7, [r4, #24]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    61a8:	add.w	r3, r6, r3, asr #9

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    61ac:	str	r6, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    61ae:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    61b0:	cbnz	r1, 61b4 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe4>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    61b2:	ldr	r1, [r0, #32]
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    61b4:	subs	r5, r5, r3
    61b6:	add	r5, r1

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    61b8:	lsr.w	r2, r5, r2
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    61bc:	movw	r3, #4084	; 0xff4
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    61c0:	adds	r1, r2, #1

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    61c2:	cmp	r2, r3
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    61c4:	str	r1, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    61c6:	bls.n	61de <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x10e>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    61c8:	movw	r3, #65524	; 0xfff4
    61cc:	cmp	r2, r3
    61ce:	ittet	hi
    61d0:	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    61d2:	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    61d4:	movls	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    61d6:	movhi	r3, #32
    61d8:	strb	r3, [r4, #7]
  }
  return true;
    61da:	movs	r0, #1
    61dc:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    61de:	movs	r3, #12
    61e0:	strb	r3, [r4, #7]
    61e2:	b.n	60fe <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>

000061e4 <lfnGetChar(DirLfn_t*, unsigned char)>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    61e4:	cmp	r1, #4
    61e6:	bls.n	6202 <lfnGetChar(DirLfn_t*, unsigned char)+0x1e>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    61e8:	cmp	r1, #10
    61ea:	bls.n	61fa <lfnGetChar(DirLfn_t*, unsigned char)+0x16>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    61ec:	cmp	r1, #12
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    61ee:	itte	ls
    61f0:	addls.w	r1, r0, r1, lsl #1
    61f4:	ldrhls	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  return 0;
    61f6:	movhi	r0, #0
}
    61f8:	bx	lr
    61fa:	add.w	r1, r0, r1, lsl #1
    61fe:	ldrh	r0, [r1, #4]
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    6200:	bx	lr
    6202:	add.w	r1, r0, r1, lsl #1
    6206:	ldrh.w	r0, [r1, #1]
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    620a:	bx	lr

0000620c <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    620c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    6210:	ldrb	r3, [r0, #0]
    6212:	cmp	r3, #32
    6214:	bne.n	621e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    6216:	ldrb.w	r3, [r0, #1]!
    621a:	cmp	r3, #32
    621c:	beq.n	6216 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    621e:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    6220:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    6222:	cmp	r3, #0
    6224:	beq.w	6436 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x22a>
    6228:	cmp	r3, #47	; 0x2f
    622a:	beq.n	628c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x80>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    622c:	cmp	r3, #92	; 0x5c
    622e:	beq.n	6276 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    6230:	sub.w	r4, r3, #34	; 0x22
    6234:	uxtb	r4, r4
    6236:	cmp	r4, #29
    6238:	bls.n	627c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x70>
    623a:	ldr.w	lr, [pc, #536]	; 6454 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>
    623e:	adds	r6, r0, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    6240:	movs	r4, #0
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    6242:	cmp	r3, #124	; 0x7c
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    6244:	sub.w	r5, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    6248:	mov	r7, r6
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    624a:	beq.n	6276 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    624c:	cmp	r5, #94	; 0x5e
    624e:	bhi.n	6276 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    6250:	ldrb.w	r3, [r6], #1
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6254:	sub.w	r5, r3, #34	; 0x22
    6258:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    625a:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    625c:	cmp	r3, #0
    625e:	beq.w	6408 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fc>
    6262:	cmp	r3, #47	; 0x2f
    6264:	beq.n	628e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x82>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6266:	cmp	r3, #92	; 0x5c
    6268:	lsr.w	r7, lr, r5
    626c:	beq.n	6276 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    626e:	cmp	r5, #29
    6270:	bhi.n	6242 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    6272:	lsls	r7, r7, #31
    6274:	bpl.n	6242 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    6276:	movs	r0, #0
    6278:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    627c:	ldr	r5, [pc, #468]	; (6454 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>)
    627e:	lsr.w	r4, r5, r4
    6282:	lsls	r4, r4, #31
    6284:	bpl.n	623a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2e>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    6286:	movs	r0, #0
    6288:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    628c:	movs	r4, #0
    628e:	adds	r7, r0, r4
    6290:	mov	r6, r7
    6292:	mov	r5, r4
    6294:	movs	r3, #47	; 0x2f
    6296:	b.n	629e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x92>
    6298:	ldrb.w	r3, [r6, #1]!
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    629c:	adds	r5, #1
    629e:	cmp	r3, #32
    62a0:	beq.n	6298 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
    62a2:	cmp	r3, #47	; 0x2f
    62a4:	beq.n	6298 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
  *ptr = &path[end];
    62a6:	add	r5, r0
    62a8:	str	r5, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    62aa:	cbz	r4, 62c0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb4>
    62ac:	mov	r2, r7
    c = path[len - 1];
    62ae:	ldrb.w	r3, [r2, #-1]!
    if (c != '.' && c != ' ') {
    62b2:	cmp	r3, #46	; 0x2e
    62b4:	beq.n	62bc <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb0>
    62b6:	cmp	r3, #32
    62b8:	bne.w	640e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x202>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    62bc:	subs	r4, #1
    62be:	bne.n	62ae <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa2>
    62c0:	mov.w	r5, #4294967295
    62c4:	mov	r3, r4
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
    62c6:	str	r3, [r1, #4]
    62c8:	add.w	r6, r1, #23
    62cc:	add.w	r3, r1, #12
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    62d0:	movs	r2, #32
    62d2:	strb.w	r2, [r3, #1]!
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    62d6:	cmp	r3, r6
    62d8:	bne.n	62d2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc6>
    62da:	subs	r6, r0, #1
    62dc:	movs	r2, #0
    62de:	b.n	62e2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd6>
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    62e0:	adds	r2, #1
    62e2:	ldrb.w	r3, [r6, #1]!
    62e6:	cmp	r3, #46	; 0x2e
    62e8:	beq.n	62e0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
    62ea:	cmp	r3, #32
    62ec:	beq.n	62e0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
  // Not 8.3 if leading dot or space.
  is83 = !si;
    62ee:	clz	ip, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    62f2:	adds	r6, r5, #1
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
    62f4:	mov.w	ip, ip, lsr #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    62f8:	beq.n	6314 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    62fa:	ldrb	r7, [r0, r5]
    62fc:	cmp	r7, #46	; 0x2e
    62fe:	add.w	r6, r0, r5
    6302:	bne.n	630e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x102>
    6304:	b.n	6314 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    6306:	ldrb.w	r7, [r6, #-1]!
    630a:	cmp	r7, #46	; 0x2e
    630c:	beq.n	6314 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    630e:	adds.w	r5, r5, #4294967295
    6312:	bcs.n	6306 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xfa>
  for (; si < len; si++) {
    6314:	cmp	r2, r4
    6316:	mov.w	r9, #0
    631a:	bge.w	6440 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x234>
    631e:	mov	r6, r9
    6320:	mov	sl, r9
    6322:	movs	r7, #7
    6324:	mov.w	r8, #8
    6328:	b.n	6376 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16a>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    632a:	cmp	r3, #46	; 0x2e
    632c:	beq.n	63be <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b2>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    632e:	cmp	r3, #34	; 0x22
    6330:	beq.n	634a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    6332:	cmp	r3, #124	; 0x7c
    6334:	beq.n	634a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    6336:	sub.w	lr, r3, #42	; 0x2a
    633a:	cmp.w	lr, #5
    633e:	bls.n	63d2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c6>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    6340:	sub.w	lr, r3, #58	; 0x3a
    6344:	cmp.w	lr, #5
    6348:	bhi.n	63fc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f0>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    634a:	cmp	r5, r2
    634c:	beq.n	63c2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    634e:	cmp	r7, r6
    6350:	bcc.n	63a6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    6352:	mov.w	ip, #0
      c = '_';
    6356:	movs	r3, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    6358:	add.w	lr, r6, #1
    635c:	add.w	fp, r1, r6
    6360:	uxtb.w	r6, lr
      if (i < 7) {
    6364:	cmp	r6, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    6366:	strb.w	r3, [fp, #13]
      if (i < 7) {
    636a:	bhi.n	636e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
        fname->seqPos = i;
    636c:	strb	r6, [r1, #12]
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    636e:	adds	r2, #1
    6370:	cmp	r2, r4
    6372:	bge.n	6384 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
    6374:	ldrb	r3, [r0, r2]
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    6376:	cmp	r3, #32
    6378:	bne.n	632a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x11e>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    637a:	adds	r2, #1
    637c:	cmp	r2, r4
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
    637e:	mov.w	ip, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    6382:	blt.n	6374 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x168>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    6384:	ldrb	r3, [r1, #13]
    6386:	cmp	r3, #32
    6388:	beq.w	6276 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    638c:	cmp.w	ip, #0
    6390:	beq.n	6422 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x216>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    6392:	tst.w	sl, r9
    6396:	it	ne
    6398:	movne.w	r9, #2
    639c:	strb.w	r9, [r1]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    63a0:	movs	r0, #1
    63a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    63a6:	cmp	r7, #10
    63a8:	beq.n	641a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    63aa:	cmp	r5, r2
    63ac:	blt.n	641a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    63ae:	mov	r2, r5
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    63b0:	movs	r7, #10
      i = 8;    // Place for extension.
    63b2:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    63b4:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    63b8:	mov.w	ip, #0
    63bc:	b.n	636e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    63be:	cmp	r5, r2
    63c0:	bne.n	637a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    63c2:	cmp	r7, #10
    63c4:	beq.n	641a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    63c6:	mov	r2, r5
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    63c8:	movs	r7, #10
      i = 8;    // Place for extension.
    63ca:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    63cc:	mov.w	r8, #16
    63d0:	b.n	636e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    63d2:	cmp	r3, #45	; 0x2d
    63d4:	bne.n	634a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    63d6:	sub.w	lr, r3, #33	; 0x21
    63da:	cmp.w	lr, #93	; 0x5d
    63de:	bhi.n	634a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    63e0:	cmp	r5, r2
    63e2:	beq.n	63c2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
    63e4:	cmp	r7, r6
    63e6:	bcc.n	63a6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    63e8:	sub.w	lr, r3, #97	; 0x61
    63ec:	cmp.w	lr, #25
    63f0:	bhi.n	6444 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x238>
        c += 'A' - 'a';
    63f2:	subs	r3, #32
    63f4:	uxtb	r3, r3
        lc |= bit;
    63f6:	orr.w	r9, r8, r9
    63fa:	b.n	6358 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    63fc:	sub.w	lr, r3, #91	; 0x5b
    6400:	cmp.w	lr, #2
    6404:	bls.n	634a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    6406:	b.n	63d6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ca>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    6408:	str	r7, [r2, #0]
    640a:	adds	r7, r0, r4
    640c:	b.n	62ac <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa0>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    640e:	cmp	r4, #255	; 0xff
    6410:	bgt.w	6276 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    6414:	subs	r5, r4, #1
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    c = path[len - 1];
    6416:	mov	r3, r4
    6418:	b.n	62c6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    641a:	ldrb	r3, [r1, #13]
    641c:	cmp	r3, #32
    641e:	beq.w	6276 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    6422:	ldrb	r3, [r1, #12]
    6424:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    6426:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    6428:	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    642a:	movs	r2, #49	; 0x31
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    642c:	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    642e:	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    6430:	strb	r2, [r3, #14]
    6432:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    6436:	str	r0, [r2, #0]
    6438:	mov	r4, r3
    643a:	mov.w	r5, #4294967295
    643e:	b.n	62c6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    6440:	mov	sl, r9
    6442:	b.n	6384 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    6444:	sub.w	lr, r3, #65	; 0x41
    6448:	cmp.w	lr, #25
        uc |= bit;
    644c:	it	ls
    644e:	orrls.w	sl, r8, sl
    6452:	b.n	6358 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    6454:	.word	0x35000101

00006458 <FatFile::lfnUniqueSfn(fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    6458:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    645c:	ldrb	r7, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    645e:	mov	r6, r1
    6460:	mov	r4, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6462:	add.w	r5, r1, #13
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    6466:	mov.w	r8, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    646a:	mov.w	r9, #126	; 0x7e
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    646e:	ldr	r0, [r6, #4]
    6470:	ldr	r1, [r6, #8]
    6472:	add.w	r3, r8, r0
    6476:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    6478:	cbz	r0, 648c <FatFile::lfnUniqueSfn(fname_t*)+0x34>
    647a:	add	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    647c:	ldrb.w	r2, [r1], #1
    6480:	add.w	r3, r3, r3, lsl #5
    6484:	eors	r3, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    6486:	cmp	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    6488:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    648a:	bne.n	647c <FatFile::lfnUniqueSfn(fname_t*)+0x24>
    648c:	cmp	r7, #3
    648e:	it	cs
    6490:	movcs	r7, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6492:	adds	r2, r7, #4
    6494:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
    6496:	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    649a:	adds	r0, r6, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    649c:	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    649e:	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    64a0:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    64a2:	ite	ls
    64a4:	addls	r1, #48	; 0x30
    64a6:	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    64a8:	cmp	r7, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
    64aa:	mov.w	r3, r3, lsr #4
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    64ae:	strb	r1, [r0, #13]
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    64b0:	bcc.n	6496 <FatFile::lfnUniqueSfn(fname_t*)+0x3e>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    64b2:	adds	r3, r6, r7
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    64b4:	movs	r1, #0
    64b6:	strb.w	r9, [r3, #13]
    64ba:	mov	r0, r4
    64bc:	bl	59f0 <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    64c0:	movs	r1, #1
    64c2:	mov	r0, r4
    64c4:	bl	59b0 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    64c8:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    64ca:	mov	r3, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    64cc:	mov	r1, r0
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    64ce:	cbz	r0, 64fc <FatFile::lfnUniqueSfn(fname_t*)+0xa4>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    64d0:	ldrb.w	lr, [r3]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    64d4:	mov	r0, r5
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    64d6:	cmp.w	lr, #0
    64da:	beq.n	6508 <FatFile::lfnUniqueSfn(fname_t*)+0xb0>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    64dc:	ldrb	r3, [r3, #11]
    64de:	lsls	r3, r3, #28
    64e0:	bmi.n	64c0 <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    64e2:	bl	bfe0 <memcmp>
    64e6:	cmp	r0, #0
    64e8:	bne.n	64c0 <FatFile::lfnUniqueSfn(fname_t*)+0x68>
    64ea:	add.w	r8, r8, #1
    64ee:	uxth.w	r8, r8
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    64f2:	cmp.w	r8, #100	; 0x64
    64f6:	bne.n	646e <FatFile::lfnUniqueSfn(fname_t*)+0x16>
fail:
  return false;

done:
  return true;
}
    64f8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    64fc:	ldrb	r0, [r4, #1]
    64fe:	clz	r0, r0
    6502:	lsrs	r0, r0, #5
    6504:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

fail:
  return false;

done:
  return true;
    6508:	movs	r0, #1
    650a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    650e:	nop

00006510 <FatFile::open(FatFile*, fname_t*, int)>:
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    6510:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    6514:	ldrb	r4, [r1, #0]
    6516:	tst.w	r4, #112	; 0x70
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    651a:	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    651c:	beq.n	6522 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    651e:	ldrb	r4, [r0, #0]
    6520:	cbz	r4, 652a <FatFile::open(FatFile*, fname_t*, int)+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
    6522:	movs	r0, #0
}
    6524:	add	sp, #52	; 0x34
    6526:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    652a:	ldrb	r4, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;
    652c:	ldr.w	sl, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    6530:	lsls	r4, r4, #30
    6532:	bne.n	65ba <FatFile::open(FatFile*, fname_t*, int)+0xaa>
    6534:	mov.w	r8, #1
    6538:	mov	r6, r1
    653a:	mov	fp, r2
    653c:	str	r0, [sp, #36]	; 0x24
    653e:	movs	r1, #0
    6540:	mov	r0, r6
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint16_t freeIndex = 0;
    6542:	mov	r7, r1
    6544:	str	r3, [sp, #28]
    6546:	bl	59f0 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    654a:	add.w	r3, fp, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    654e:	str	r7, [sp, #24]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    6550:	str	r7, [sp, #12]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    6552:	mov	r4, r7
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    6554:	mov	r9, r7
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    6556:	str	r7, [sp, #20]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6558:	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    655a:	movs	r1, #1
    655c:	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    655e:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache(true);
    6560:	bl	59b0 <FatFile::readDirCache(bool)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    6564:	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache(true);
    if (!dir) {
    6568:	mov	r3, r0
    656a:	cmp	r0, #0
    656c:	beq.w	6688 <FatFile::open(FatFile*, fname_t*, int)+0x178>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    6570:	ldrb	r2, [r0, #0]
    6572:	cmp	r2, #229	; 0xe5
    6574:	beq.n	65ec <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    6576:	cmp	r2, #0
    6578:	beq.n	65ec <FatFile::open(FatFile*, fname_t*, int)+0xdc>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    657a:	cmp	r4, r8
    657c:	it	cc
    657e:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    6580:	cmp	r2, #46	; 0x2e
    6582:	beq.n	65e6 <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    6584:	ldrb	r1, [r3, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    6586:	cmp	r1, #15
    6588:	beq.n	6608 <FatFile::open(FatFile*, fname_t*, int)+0xf8>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    658a:	and.w	r1, r1, #8
    658e:	and.w	r2, r1, #255	; 0xff
    6592:	cbnz	r1, 65e6 <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (lfnOrd) {
    6594:	cmp.w	r9, #0
    6598:	bne.w	6860 <FatFile::open(FatFile*, fname_t*, int)+0x350>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    659c:	mov	r0, r3
    659e:	movs	r2, #11
    65a0:	ldr	r1, [sp, #16]
    65a2:	bl	bfe0 <memcmp>
    65a6:	cmp	r0, #0
    65a8:	bne.n	655a <FatFile::open(FatFile*, fname_t*, int)+0x4a>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    65aa:	ldrb.w	r3, [fp]
    65ae:	lsls	r0, r3, #31
    65b0:	bpl.w	6888 <FatFile::open(FatFile*, fname_t*, int)+0x378>
          goto found;
        }
        fnameFound = true;
    65b4:	movs	r3, #1
    65b6:	str	r3, [sp, #20]
    65b8:	b.n	655a <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    65ba:	ldr	r5, [pc, #724]	; (6890 <FatFile::open(FatFile*, fname_t*, int)+0x380>)
    65bc:	add.w	r4, sl, #12
    65c0:	umull	r4, r8, r5, r4
    65c4:	mov.w	r8, r8, lsr #2
    65c8:	add.w	r8, r8, #1
    65cc:	uxtb.w	r8, r8
    65d0:	b.n	6538 <FatFile::open(FatFile*, fname_t*, int)+0x28>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    65d2:	ldr	r1, [sp, #12]
    65d4:	subs	r1, #1
    65d6:	uxtb	r1, r1
    65d8:	cmp	r2, r1
    65da:	str	r1, [sp, #12]
    65dc:	bne.n	65e6 <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    65de:	ldrb	r2, [r3, #13]
    65e0:	ldr	r1, [sp, #24]
    65e2:	cmp	r1, r2
    65e4:	beq.n	661e <FatFile::open(FatFile*, fname_t*, int)+0x10e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    65e6:	mov.w	r9, #0
    65ea:	b.n	655a <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    65ec:	cmp	r4, #0
    65ee:	it	eq
    65f0:	moveq	r7, r5
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    65f2:	cmp	r4, r8
        freeFound++;
    65f4:	itt	cc
    65f6:	addcc	r4, #1
    65f8:	uxtbcc	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    65fa:	cmp	r2, #0
    65fc:	beq.n	6690 <FatFile::open(FatFile*, fname_t*, int)+0x180>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    65fe:	cmp	r2, #229	; 0xe5
    6600:	bne.n	6580 <FatFile::open(FatFile*, fname_t*, int)+0x70>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    6602:	mov.w	r9, #0
    6606:	b.n	655a <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    6608:	cmp.w	r9, #0
    660c:	bne.n	65d2 <FatFile::open(FatFile*, fname_t*, int)+0xc2>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    660e:	lsls	r5, r2, #25
    6610:	bpl.n	655a <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    6612:	and.w	r9, r2, #31
        checksum = ldir->checksum;
    6616:	ldrb	r2, [r3, #13]
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    6618:	str.w	r9, [sp, #12]
        checksum = ldir->checksum;
    661c:	str	r2, [sp, #24]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    661e:	ldr	r2, [sp, #12]
    6620:	subs	r2, #1
    6622:	add.w	r5, r2, r2, lsl #1
    6626:	add.w	r5, r2, r5, lsl #2
      if (k >= len) {
    662a:	cmp	sl, r5
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    662c:	mov	r2, r5
      if (k >= len) {
    662e:	bls.n	65e6 <FatFile::open(FatFile*, fname_t*, int)+0xd6>
    6630:	add.w	r1, r5, #13
    6634:	str.w	r9, [sp, #32]
    6638:	mov	r9, r1
    663a:	b.n	6664 <FatFile::open(FatFile*, fname_t*, int)+0x154>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    663c:	ldr.w	r0, [fp, #8]
    6640:	ldrb	r2, [r0, r2]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    6642:	cmp.w	ip, #25
    6646:	it	ls
    6648:	addls	r1, #32
    664a:	sub.w	r0, r2, #65	; 0x41
    664e:	it	ls
    6650:	uxtbls	r1, r1
    6652:	cmp	r0, #25
    6654:	itt	ls
    6656:	addls	r2, #32
    6658:	uxtbls	r2, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    665a:	cmp	r2, r1
    665c:	bne.n	65e6 <FatFile::open(FatFile*, fname_t*, int)+0xd6>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    665e:	cmp	lr, r9
    6660:	beq.n	66e8 <FatFile::open(FatFile*, fname_t*, int)+0x1d8>
    6662:	mov	r2, lr
        uint16_t u = lfnGetChar(ldir, i);
    6664:	subs	r1, r2, r5
    6666:	uxtb	r1, r1
    6668:	mov	r0, r3
    666a:	bl	61e4 <lfnGetChar(DirLfn_t*, unsigned char)>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    666e:	uxtb	r1, r0
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    6670:	cmp	sl, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    6672:	sub.w	ip, r1, #65	; 0x41
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6676:	add.w	lr, r2, #1
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    667a:	beq.w	6852 <FatFile::open(FatFile*, fname_t*, int)+0x342>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    667e:	cmp	r0, #255	; 0xff
    6680:	bls.n	663c <FatFile::open(FatFile*, fname_t*, int)+0x12c>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    6682:	mov.w	r9, #0
    6686:	b.n	655a <FatFile::open(FatFile*, fname_t*, int)+0x4a>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    6688:	ldrb	r3, [r6, #1]
    668a:	cmp	r3, #0
    668c:	bne.w	6522 <FatFile::open(FatFile*, fname_t*, int)+0x12>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    6690:	ldr	r2, [sp, #28]
    6692:	mov	r3, r2
    6694:	lsls	r2, r3, #22
    6696:	bpl.w	6522 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    669a:	and.w	r3, r3, #3
    669e:	subs	r3, #1
    66a0:	cmp	r3, #1
    66a2:	bhi.w	6522 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    66a6:	cmp	r4, #0
    66a8:	it	eq
    66aa:	moveq	r7, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    66ac:	cmp	r4, r8
    66ae:	bcc.n	66b8 <FatFile::open(FatFile*, fname_t*, int)+0x1a8>
    66b0:	b.n	66ee <FatFile::open(FatFile*, fname_t*, int)+0x1de>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    66b2:	uxtb	r4, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    66b4:	cmp	r8, r4
    66b6:	bls.n	66ee <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    dir = dirFile->readDirCache();
    66b8:	movs	r1, #0
    66ba:	mov	r0, r6
    66bc:	bl	59b0 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    66c0:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    66c2:	cmp	r0, #0
    66c4:	bne.n	66b2 <FatFile::open(FatFile*, fname_t*, int)+0x1a2>
      if (dirFile->getError()) {
    66c6:	ldrb	r3, [r6, #1]
    66c8:	cbz	r3, 66d4 <FatFile::open(FatFile*, fname_t*, int)+0x1c4>
    66ca:	b.n	6522 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    66cc:	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    66ce:	ldrb	r3, [r3, #4]
    66d0:	cmp	r3, #1
    66d2:	bhi.n	66ee <FatFile::open(FatFile*, fname_t*, int)+0x1de>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    66d4:	cmp	r8, r4
    66d6:	bls.n	66ee <FatFile::open(FatFile*, fname_t*, int)+0x1de>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    66d8:	mov	r0, r6
    66da:	bl	5558 <FatFile::addDirCluster()>
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    66de:	adds	r4, #16
    66e0:	uxtb	r4, r4
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    66e2:	cmp	r0, #0
    66e4:	bne.n	66cc <FatFile::open(FatFile*, fname_t*, int)+0x1bc>
    66e6:	b.n	6522 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    66e8:	ldr.w	r9, [sp, #32]
    66ec:	b.n	655a <FatFile::open(FatFile*, fname_t*, int)+0x4a>
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    66ee:	ldr	r3, [sp, #20]
    66f0:	cbz	r3, 6700 <FatFile::open(FatFile*, fname_t*, int)+0x1f0>
    if (!dirFile->lfnUniqueSfn(fname)) {
    66f2:	mov	r1, fp
    66f4:	mov	r0, r6
    66f6:	bl	6458 <FatFile::lfnUniqueSfn(fname_t*)>
    66fa:	cmp	r0, #0
    66fc:	beq.w	6522 <FatFile::open(FatFile*, fname_t*, int)+0x12>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    6700:	lsls	r1, r7, #5
    6702:	mov	r0, r6
    6704:	bl	59f0 <FatFile::seekSet(unsigned long)>
    6708:	cmp	r0, #0
    670a:	beq.w	6522 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    670e:	add.w	r8, r8, #4294967295
  for (order = lfnOrd ; order ; order--) {
    6712:	ands.w	r9, r8, #255	; 0xff
    6716:	beq.n	67cc <FatFile::open(FatFile*, fname_t*, int)+0x2bc>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6718:	orr.w	r4, r9, #64	; 0x40
    671c:	uxtb	r4, r4
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    671e:	mov	r5, r9
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    6720:	movs	r7, #0
    6722:	movs	r1, #0
    6724:	mov	r0, r6
    6726:	bl	59b0 <FatFile::readDirCache(bool)>
    if (!ldir) {
    672a:	cmp	r0, #0
    672c:	beq.w	6522 <FatFile::open(FatFile*, fname_t*, int)+0x12>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    6730:	ldr	r2, [r6, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    6732:	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6736:	cmp	r9, r5
    6738:	orr.w	r3, r3, #1
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    673c:	mov.w	ip, #15
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6740:	ite	ne
    6742:	movne	r1, r5
    6744:	moveq	r1, r4
    6746:	strb.w	r3, [r2, #36]	; 0x24
    674a:	add.w	lr, fp, #12
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    674e:	strb.w	ip, [r0, #11]
    ldir->mustBeZero1 = 0;
    6752:	strb	r7, [r0, #12]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6754:	strb	r1, [r0, #0]
    6756:	add.w	ip, fp, #23
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    675a:	movs	r3, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    675c:	ldrb.w	r8, [lr, #1]!
    6760:	lsrs	r2, r3, #1
    6762:	orr.w	r3, r2, r3, lsl #7
    6766:	uxtab	r3, r8, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    676a:	cmp	lr, ip
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    676c:	uxtb	r3, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    676e:	bne.n	675c <FatFile::open(FatFile*, fname_t*, int)+0x24c>
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6770:	and.w	r1, r1, #31
    6774:	subs	r1, #1
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    6776:	strb	r3, [r0, #13]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6778:	add.w	r2, r1, r1, lsl #1
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    677c:	ldr.w	lr, [fp, #8]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    6780:	strh	r7, [r0, #26]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6782:	add.w	r2, r1, r2, lsl #2
    6786:	adds	r0, #4
  for (uint8_t i = 0; i < 13; i++, k++) {
    6788:	movs	r3, #0
    678a:	b.n	67ac <FatFile::open(FatFile*, fname_t*, int)+0x29c>
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    678c:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    678e:	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6792:	bls.n	67be <FatFile::open(FatFile*, fname_t*, int)+0x2ae>
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    6794:	cmp	r3, #10
    6796:	ite	ls
    6798:	strhls	r1, [r0, #0]
    679a:	strhhi	r1, [r0, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    679c:	adds	r3, #1
    679e:	uxtb	r3, r3
    67a0:	cmp	r3, #13
    67a2:	add.w	r2, r2, #1
    67a6:	add.w	r0, r0, #2
    67aa:	beq.n	67c4 <FatFile::open(FatFile*, fname_t*, int)+0x2b4>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    67ac:	cmp	sl, r2
    67ae:	bhi.n	678c <FatFile::open(FatFile*, fname_t*, int)+0x27c>
    67b0:	ite	ne
    67b2:	movne.w	r1, #4294967295
    67b6:	moveq	r1, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    67b8:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    67ba:	uxth	r1, r1
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    67bc:	bhi.n	6794 <FatFile::open(FatFile*, fname_t*, int)+0x284>
    67be:	strh.w	r1, [r0, #-3]
    67c2:	b.n	679c <FatFile::open(FatFile*, fname_t*, int)+0x28c>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    67c4:	subs	r5, #1
    67c6:	ands.w	r5, r5, #255	; 0xff
    67ca:	bne.n	6722 <FatFile::open(FatFile*, fname_t*, int)+0x212>
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
    67cc:	movs	r1, #0
    67ce:	mov	r0, r6
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    67d0:	ldr	r5, [r6, #20]
  dir = dirFile->readDirCache();
    67d2:	bl	59b0 <FatFile::readDirCache(bool)>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    67d6:	ubfx	r5, r5, #5, #16
  dir = dirFile->readDirCache();
  if (!dir) {
    67da:	mov	r4, r0
    67dc:	cmp	r0, #0
    67de:	beq.w	6522 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    67e2:	movs	r2, #32
    67e4:	movs	r1, #0
    67e6:	bl	c10c <memset>
  memcpy(dir->name, fname->sfn, 11);
    67ea:	mov	r3, fp

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // set timestamps
  if (FsDateTime::callback) {
    67ec:	ldr	r2, [pc, #164]	; (6894 <FatFile::open(FatFile*, fname_t*, int)+0x384>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    67ee:	ldr.w	r1, [r3, #13]!
    67f2:	ldr	r0, [r3, #4]
    67f4:	str	r0, [r4, #4]
    67f6:	str	r1, [r4, #0]
    67f8:	ldrh	r1, [r3, #8]
    67fa:	ldrb	r3, [r3, #10]
    67fc:	strb	r3, [r4, #10]
    67fe:	strh	r1, [r4, #8]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    6800:	ldrb.w	r3, [fp]

  // set timestamps
  if (FsDateTime::callback) {
    6804:	ldr	r7, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    6806:	and.w	r3, r3, #24
    680a:	strb	r3, [r4, #12]

  // set timestamps
  if (FsDateTime::callback) {
    680c:	cbz	r7, 6832 <FatFile::open(FatFile*, fname_t*, int)+0x322>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    680e:	add.w	r2, sp, #43	; 0x2b
    6812:	add.w	r1, sp, #46	; 0x2e
    6816:	add	r0, sp, #44	; 0x2c
    6818:	blx	r7
    dir->createTimeMs = ms10;
    setLe16(dir->createDate, date);
    681a:	ldrh.w	r3, [sp, #44]	; 0x2c
    setLe16(dir->createTime, time);
    681e:	ldrh.w	r2, [sp, #46]	; 0x2e

  // set timestamps
  if (FsDateTime::callback) {
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    dir->createTimeMs = ms10;
    6822:	ldrb.w	r1, [sp, #43]	; 0x2b
    6826:	strb	r1, [r4, #13]
    6828:	strh	r3, [r4, #16]
    682a:	strh	r3, [r4, #18]
    682c:	strh	r3, [r4, #24]
    682e:	strh	r2, [r4, #14]
    6830:	strh	r2, [r4, #22]
    setLe16(dir->accessDate, date);
    setLe16(dir->modifyDate, date);
    setLe16(dir->modifyTime, time);;
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    6832:	ldr	r2, [r6, #8]
    6834:	ldrb.w	r3, [r2, #36]	; 0x24
    6838:	orr.w	r3, r3, #1
    683c:	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    6840:	str.w	r9, [sp]
    6844:	ldr	r3, [sp, #28]
    6846:	ldr	r0, [sp, #36]	; 0x24
    6848:	mov	r2, r5
    684a:	mov	r1, r6
    684c:	bl	5a84 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    6850:	b.n	6524 <FatFile::open(FatFile*, fname_t*, int)+0x14>
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    6852:	cmp	r0, #0
    6854:	ldr.w	r9, [sp, #32]
    6858:	it	ne
    685a:	movne.w	r9, #0
    685e:	b.n	655a <FatFile::open(FatFile*, fname_t*, int)+0x4a>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    6860:	ldr	r1, [sp, #12]
    6862:	cmp	r1, #1
    6864:	bne.w	6522 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6868:	subs	r4, r3, #1
    686a:	adds	r3, #10
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    686c:	ldrb.w	r0, [r4, #1]!
    6870:	lsrs	r1, r2, #1
    6872:	orr.w	r2, r1, r2, lsl #7
    6876:	uxtab	r2, r0, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    687a:	cmp	r4, r3
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    687c:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    687e:	bne.n	686c <FatFile::open(FatFile*, fname_t*, int)+0x35c>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    6880:	ldr	r3, [sp, #24]
    6882:	cmp	r3, r2
    6884:	bne.w	6522 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    6888:	ldr	r3, [sp, #28]
    688a:	lsls	r1, r3, #20
    688c:	bpl.n	6840 <FatFile::open(FatFile*, fname_t*, int)+0x330>
    688e:	b.n	6522 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6890:	.word	0x4ec4ec4f
    6894:	.word	0x2001c8f8

00006898 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    6898:	push	{r4, lr}
    689a:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    689c:	ldr	r0, [r0, #56]	; 0x38
    689e:	cbz	r0, 68ac <FsBaseFile::close()+0x14>
    68a0:	bl	56a0 <FatFile::close()>
    68a4:	cbz	r0, 68ac <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    68a6:	movs	r3, #0
    68a8:	str	r3, [r4, #56]	; 0x38
    return true;
    68aa:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    68ac:	ldr	r0, [r4, #60]	; 0x3c
    68ae:	cbz	r0, 68bc <FsBaseFile::close()+0x24>
    68b0:	bl	3fb0 <ExFatFile::close()>
    68b4:	cbz	r0, 68bc <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    68b6:	movs	r3, #0
    68b8:	str	r3, [r4, #60]	; 0x3c
    68ba:	pop	{r4, pc}
    return true;
  }
  return false;
    68bc:	movs	r0, #0
}
    68be:	pop	{r4, pc}

000068c0 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    68c0:	cbz	r1, 6936 <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    68c2:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68c6:	mov	r4, r1
    68c8:	mov	r5, r0
    68ca:	mov	r8, r3
    68cc:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    68ce:	bl	6898 <FsBaseFile::close()>
  if (vol->m_fVol) {
    68d2:	ldr.w	r6, [r4, #1144]	; 0x478
    68d6:	cbz	r6, 6904 <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    m_fFile = new (m_fileMem) FatFile;
    68d8:	mov	r1, r5
    68da:	movs	r0, #36	; 0x24
    68dc:	bl	6a04 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    68e0:	movs	r1, #0
    68e2:	strb	r1, [r0, #0]
    68e4:	strb	r1, [r0, #1]
    68e6:	strb	r1, [r0, #2]
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    68e8:	ldr.w	r1, [r4, #1144]	; 0x478
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    68ec:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    68ee:	mov	r3, r8
    68f0:	mov	r2, r7
    68f2:	bl	57d0 <FatFile::open(FatVolume*, char const*, int)>
    68f6:	cbz	r0, 68fe <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    68f8:	movs	r0, #1
    68fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    68fe:	str	r0, [r5, #56]	; 0x38
    return false;
    6900:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    6904:	ldr.w	r3, [r4, #1148]	; 0x47c
    6908:	cbz	r3, 693a <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    690a:	mov	r1, r5
    690c:	movs	r0, #56	; 0x38
    690e:	bl	6a04 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    6912:	strb.w	r6, [r0, #49]	; 0x31
    6916:	strb.w	r6, [r0, #50]	; 0x32
    691a:	strb.w	r6, [r0, #51]	; 0x33
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    691e:	ldr.w	r1, [r4, #1148]	; 0x47c
      return true;
    }
    m_fFile = nullptr;
    return false;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    6922:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    6924:	mov	r3, r8
    6926:	mov	r2, r7
    6928:	bl	4854 <ExFatFile::open(ExFatVolume*, char const*, int)>
    692c:	cmp	r0, #0
    692e:	bne.n	68f8 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    6930:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    6932:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    6936:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    6938:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    693a:	movs	r0, #0
    693c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006940 <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    6940:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    6942:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    6944:	mov	r5, r0
  m_blockDev = blockDev;
    6946:	str.w	r1, [r0, #1152]	; 0x480
  m_fVol = nullptr;
    694a:	str.w	r6, [r0, #1144]	; 0x478
  m_xVol = new (m_volMem) ExFatVolume;
    694e:	mov	r1, r0
    6950:	mov.w	r0, #1144	; 0x478
    6954:	bl	6a04 <operator new(unsigned int, unsigned long*)>
    6958:	mov	r4, r0
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    695a:	str	r6, [r0, #4]
    invalidate();
    695c:	bl	4884 <FsCache::invalidate()>
    6960:	add.w	r0, r4, #524	; 0x20c
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    6964:	str.w	r6, [r4, #528]	; 0x210
    invalidate();
    6968:	bl	4884 <FsCache::invalidate()>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() : m_fatType(0) {}
    696c:	strb.w	r6, [r4, #1084]	; 0x43c
    6970:	strb.w	r6, [r4, #1137]	; 0x471
    6974:	strb.w	r6, [r4, #1138]	; 0x472
    6978:	strb.w	r6, [r4, #1139]	; 0x473
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    697c:	ldr.w	r1, [r5, #1152]	; 0x480
    6980:	str.w	r4, [r5, #1148]	; 0x47c
    6984:	mov	r0, r4
    6986:	movs	r2, #1
    6988:	bl	4a14 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    698c:	cbnz	r0, 69ca <FsVolume::begin(BlockDeviceInterface*)+0x8a>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    698e:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    6990:	mov	r1, r5
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    6992:	str.w	r6, [r5, #1148]	; 0x47c
  m_fVol = new (m_volMem) FatVolume;
    6996:	mov.w	r0, #1120	; 0x460
    699a:	bl	6a04 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() : m_fatType(0) {}
    699e:	strb	r6, [r0, #7]
    69a0:	strb.w	r6, [r0, #1084]	; 0x43c
    69a4:	strb.w	r6, [r0, #1085]	; 0x43d
    69a8:	strb.w	r6, [r0, #1086]	; 0x43e
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    69ac:	movs	r2, #1
    69ae:	ldr.w	r1, [r5, #1152]	; 0x480
    69b2:	str.w	r0, [r5, #1144]	; 0x478
    69b6:	mov	r4, r0
    69b8:	bl	60d0 <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    69bc:	cbnz	r0, 69e8 <FsVolume::begin(BlockDeviceInterface*)+0xa8>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    69be:	ldr	r3, [pc, #64]	; (6a00 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
    69c0:	movs	r0, #0
    69c2:	str	r0, [r3, #0]
  m_fVol = nullptr;
    69c4:	str.w	r0, [r5, #1144]	; 0x478
  return false;
    69c8:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    69ca:	add.w	r6, r4, #1088	; 0x440
    69ce:	mov	r0, r6
    69d0:	bl	3fb0 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    69d4:	mov	r1, r4
    69d6:	mov	r0, r6
    69d8:	bl	3fc4 <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    69dc:	cmp	r0, #0
    69de:	beq.n	698e <FsVolume::begin(BlockDeviceInterface*)+0x4e>

 done:
  m_cwv = this;
    69e0:	ldr	r3, [pc, #28]	; (6a00 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
  return true;
    69e2:	movs	r0, #1
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    69e4:	str	r5, [r3, #0]
  return true;
    69e6:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    69e8:	addw	r6, r4, #1084	; 0x43c
    69ec:	mov	r0, r6
    69ee:	bl	56a0 <FatFile::close()>
    return m_vwd.openRoot(this);
    69f2:	mov	r1, r4
    69f4:	mov	r0, r6
    69f6:	bl	57e0 <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    69fa:	cmp	r0, #0
    69fc:	bne.n	69e0 <FsVolume::begin(BlockDeviceInterface*)+0xa0>
    69fe:	b.n	69be <FsVolume::begin(BlockDeviceInterface*)+0x7e>
    6a00:	.word	0x2001c8fc

00006a04 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    6a04:	mov	r0, r1
    6a06:	bx	lr

00006a08 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    6a08:	ldrb	r0, [r0, #19]
    6a0a:	bx	lr

00006a0c <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    6a0c:	ldrb	r0, [r0, #21]
    6a0e:	bx	lr

00006a10 <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    6a10:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    6a12:	ldr	r4, [r0, #0]
    6a14:	ldr	r4, [r4, #12]
    6a16:	movs	r3, #1
    6a18:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    6a1a:	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    6a1e:	bx	ip

00006a20 <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    6a20:	ldrb	r0, [r0, #22]
    6a22:	bx	lr

00006a24 <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    6a24:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    6a26:	ldr	r4, [r0, #0]
    6a28:	ldr	r4, [r4, #28]
    6a2a:	movs	r3, #1
    6a2c:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return writeSingle(sector, src);
#endif  // ENABLE_DEDICATED_SPI
  }
    6a2e:	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    6a32:	bx	ip

00006a34 <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    6a34:	bx	lr
    6a36:	nop

00006a38 <SdSpiCard::~SdSpiCard()>:
    6a38:	push	{r4, lr}
    6a3a:	movs	r1, #24
    6a3c:	mov	r4, r0
    6a3e:	bl	a1f4 <operator delete(void*, unsigned int)>
    6a42:	mov	r0, r4
    6a44:	pop	{r4, pc}
    6a46:	nop

00006a48 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    6a48:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a4c:	mov	r6, r1
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    6a4e:	ldrb	r1, [r0, #16]
    6a50:	cmp	r1, #2
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    6a52:	mov	r4, r0
    6a54:	mov	r5, r2
    6a56:	mov	r7, r3
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    6a58:	beq.n	6a6a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x22>
    if (!syncDevice()) {
    6a5a:	ldr	r3, [r4, #0]
    6a5c:	mov	r0, r4
    6a5e:	ldr	r3, [r3, #20]
    6a60:	blx	r3
    6a62:	cbnz	r0, 6a9c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
      return false;
    6a64:	movs	r0, #0
    6a66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    6a6a:	ldr	r3, [r0, #12]
    6a6c:	cmp	r3, r6
    6a6e:	bne.n	6a5a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    6a70:	movs	r6, #0
    6a72:	cbz	r7, 6a8c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    6a74:	ldr	r3, [r4, #0]
    6a76:	mov	r1, r5
    6a78:	ldr	r3, [r3, #68]	; 0x44
    6a7a:	mov	r0, r4
    6a7c:	blx	r3
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    6a7e:	adds	r6, #1
    6a80:	add.w	r5, r5, #512	; 0x200
    if (!writeData(src)) {
    6a84:	cmp	r0, #0
    6a86:	beq.n	6a64 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    6a88:	cmp	r7, r6
    6a8a:	bne.n	6a74 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    6a8c:	ldr	r3, [r4, #12]
  return m_sharedSpi ? syncDevice() : true;
    6a8e:	ldrb	r2, [r4, #17]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    6a90:	add	r7, r3
    6a92:	str	r7, [r4, #12]
  return m_sharedSpi ? syncDevice() : true;
    6a94:	cbnz	r2, 6ab2 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6a>
    6a96:	movs	r0, #1
    6a98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    6a9c:	ldr	r3, [r4, #0]
    6a9e:	mov	r1, r6
    6aa0:	ldr	r3, [r3, #72]	; 0x48
    6aa2:	mov	r0, r4
    6aa4:	blx	r3
    6aa6:	cmp	r0, #0
    6aa8:	beq.n	6a64 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    6aaa:	movs	r3, #2
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    }
    m_curSector = sector;
    6aac:	str	r6, [r4, #12]
    m_curState = WRITE_STATE;
    6aae:	strb	r3, [r4, #16]
    6ab0:	b.n	6a70 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x28>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    6ab2:	ldr	r3, [r4, #0]
    6ab4:	mov	r0, r4
    6ab6:	ldr	r3, [r3, #20]

 fail:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
    6ab8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    6abc:	bx	r3
    6abe:	nop

00006ac0 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    6ac0:	push	{r4, lr}
    6ac2:	mov	r4, r0
  bool waitNotBusy(SdMillis_t timeoutMS);
  bool writeData(uint8_t token, const uint8_t* src);

#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
    6ac4:	adds	r0, #4
    6ac6:	bl	8070 <SdSpiArduinoDriver::activate()>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    6aca:	ldrb	r0, [r4, #18]
    6acc:	movs	r1, #0
    6ace:	bl	81f0 <sdCsWrite(unsigned char, bool)>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    6ad2:	movs	r3, #1
    6ad4:	strb	r3, [r4, #20]
    6ad6:	pop	{r4, pc}

00006ad8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    6ad8:	push	{r3, r4, r5, lr}
    6ada:	mov	r4, r0
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    6adc:	movs	r1, #1
    6ade:	ldrb	r0, [r0, #18]
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    6ae0:	adds	r5, r4, #4
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    6ae2:	bl	81f0 <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    6ae6:	mov	r0, r5
    6ae8:	movs	r1, #255	; 0xff
    6aea:	bl	8184 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
    6aee:	mov	r0, r5
    6af0:	bl	8100 <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    6af4:	movs	r3, #0
    6af6:	strb	r3, [r4, #20]
    6af8:	pop	{r3, r4, r5, pc}
    6afa:	nop

00006afc <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    6afc:	push	{r3, r4, r5, r6, r7, lr}
  bool rtn = true;
  bool spiActive = m_spiActive;
    6afe:	ldrb	r7, [r0, #20]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    6b00:	mov	r6, r0
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    6b02:	cbnz	r7, 6b08 <SdSpiCard::isBusy()+0xc>
    6b04:	bl	6ac0 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
    6b08:	adds	r5, r6, #4
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    6b0a:	movs	r4, #8
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    6b0c:	mov	r0, r5
    6b0e:	bl	8148 <SdSpiArduinoDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    6b12:	cmp	r0, #255	; 0xff
    6b14:	add.w	r3, r4, #4294967295
    6b18:	beq.n	6b36 <SdSpiCard::isBusy()+0x3a>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    6b1a:	ands.w	r4, r3, #255	; 0xff
    6b1e:	bne.n	6b0c <SdSpiCard::isBusy()+0x10>
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
  bool rtn = true;
    6b20:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    6b22:	cbnz	r7, 6b28 <SdSpiCard::isBusy()+0x2c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6b24:	ldrb	r3, [r6, #20]
    6b26:	cbnz	r3, 6b2c <SdSpiCard::isBusy()+0x30>
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    6b28:	mov	r0, r4
    6b2a:	pop	{r3, r4, r5, r6, r7, pc}
    6b2c:	mov	r0, r6
    6b2e:	bl	6ad8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    6b32:	mov	r0, r4
    6b34:	pop	{r3, r4, r5, r6, r7, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    6b36:	movs	r4, #0
    6b38:	b.n	6b22 <SdSpiCard::isBusy()+0x26>
    6b3a:	nop

00006b3c <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    6b3c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6b40:	ldr	r6, [pc, #116]	; (6bb8 <SdSpiCard::readData(unsigned char*, unsigned int)+0x7c>)
    6b42:	sub	sp, #12
    6b44:	ldr	r3, [r6, #0]
    6b46:	str	r3, [sp, #0]
	return ret;
    6b48:	ldr	r5, [sp, #0]
    6b4a:	mov	r4, r0
    6b4c:	mov	r8, r1
    6b4e:	mov	r9, r2

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    6b50:	uxth	r5, r5
    6b52:	adds	r7, r0, #4
    6b54:	b.n	6b66 <SdSpiCard::readData(unsigned char*, unsigned int)+0x2a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6b56:	ldr	r3, [r6, #0]
    6b58:	str	r3, [sp, #4]
	return ret;
    6b5a:	ldr	r3, [sp, #4]
    6b5c:	uxth	r3, r3
    6b5e:	subs	r3, r3, r5
    6b60:	cmp.w	r3, #300	; 0x12c
    6b64:	bgt.n	6b8c <SdSpiCard::readData(unsigned char*, unsigned int)+0x50>
    6b66:	mov	r0, r7
    6b68:	bl	8148 <SdSpiArduinoDriver::receive()>
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    6b6c:	cmp	r0, #255	; 0xff
    6b6e:	strb	r0, [r4, #21]
    6b70:	beq.n	6b56 <SdSpiCard::readData(unsigned char*, unsigned int)+0x1a>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    6b72:	cmp	r0, #254	; 0xfe
    6b74:	beq.n	6b92 <SdSpiCard::readData(unsigned char*, unsigned int)+0x56>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6b76:	movs	r3, #24
    6b78:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6b7a:	ldrb	r0, [r4, #20]
    6b7c:	cbz	r0, 6b86 <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    6b7e:	mov	r0, r4
    6b80:	bl	6ad8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
  return false;
    6b84:	movs	r0, #0
}
    6b86:	add	sp, #12
    6b88:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6b8c:	movs	r3, #29
    6b8e:	strb	r3, [r4, #19]
    6b90:	b.n	6b7a <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
    6b92:	mov	r2, r9
    6b94:	mov	r1, r8
    6b96:	mov	r0, r7
    6b98:	bl	8164 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    6b9c:	strb	r0, [r4, #21]
    6b9e:	cbz	r0, 6ba6 <SdSpiCard::readData(unsigned char*, unsigned int)+0x6a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6ba0:	movs	r3, #36	; 0x24
    6ba2:	strb	r3, [r4, #19]
    6ba4:	b.n	6b7a <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    6ba6:	mov	r0, r7
    6ba8:	bl	8148 <SdSpiArduinoDriver::receive()>
    6bac:	mov	r0, r7
    6bae:	bl	8148 <SdSpiArduinoDriver::receive()>
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    6bb2:	movs	r0, #1
    6bb4:	b.n	6b86 <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    6bb6:	nop
    6bb8:	.word	0x2001c95c

00006bbc <SdSpiCard::waitNotBusy(unsigned short)>:
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    6bbc:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6bbe:	ldr	r5, [pc, #52]	; (6bf4 <SdSpiCard::waitNotBusy(unsigned short)+0x38>)
    6bc0:	sub	sp, #12
    6bc2:	ldr	r3, [r5, #0]
    6bc4:	str	r3, [sp, #0]
	return ret;
    6bc6:	ldr	r4, [sp, #0]
    6bc8:	mov	r7, r1
    6bca:	adds	r6, r0, #4
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    6bcc:	uxth	r4, r4
    6bce:	b.n	6bde <SdSpiCard::waitNotBusy(unsigned short)+0x22>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6bd0:	ldr	r3, [r5, #0]
    6bd2:	str	r3, [sp, #4]
	return ret;
    6bd4:	ldr	r3, [sp, #4]
    6bd6:	uxth	r3, r3
    6bd8:	subs	r3, r3, r4
    6bda:	cmp	r3, r7
    6bdc:	bgt.n	6bee <SdSpiCard::waitNotBusy(unsigned short)+0x32>
    6bde:	mov	r0, r6
    6be0:	bl	8148 <SdSpiArduinoDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    6be4:	cmp	r0, #255	; 0xff
    6be6:	bne.n	6bd0 <SdSpiCard::waitNotBusy(unsigned short)+0x14>
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    }
  }
  return true;
    6be8:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    6bea:	add	sp, #12
    6bec:	pop	{r4, r5, r6, r7, pc}
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    6bee:	movs	r0, #0
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
    6bf0:	add	sp, #12
    6bf2:	pop	{r4, r5, r6, r7, pc}
    6bf4:	.word	0x2001c95c

00006bf8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    6bf8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // select card
  if (!m_spiActive) {
    6bfc:	ldrb	r3, [r0, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    6bfe:	sub	sp, #8
    6c00:	mov	r6, r0
    6c02:	mov	r8, r1
    6c04:	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
    6c06:	cbnz	r3, 6c0c <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x14>
    6c08:	bl	6ac0 <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    6c0c:	cmp.w	r8, #0
    6c10:	bne.n	6c68 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x70>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    6c12:	adds	r4, r6, #4
    6c14:	mov	r0, r4
    6c16:	orr.w	r1, r8, #64	; 0x40
    6c1a:	bl	8184 <SdSpiArduinoDriver::send(unsigned char)>
    6c1e:	add	r7, sp, #4
    6c20:	add	r5, sp, #8
    6c22:	ldrb.w	r1, [r5, #-1]!
    6c26:	mov	r0, r4
    6c28:	bl	8184 <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    6c2c:	cmp	r5, r7
    6c2e:	bne.n	6c22 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2a>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    6c30:	cmp.w	r8, #0
    6c34:	ite	eq
    6c36:	moveq	r1, #149	; 0x95
    6c38:	movne	r1, #135	; 0x87
    6c3a:	mov	r0, r4
    6c3c:	bl	8184 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    6c40:	mov	r0, r4
    6c42:	bl	8148 <SdSpiArduinoDriver::receive()>
    6c46:	movs	r5, #11
    6c48:	mov	r0, r4
    6c4a:	bl	8148 <SdSpiArduinoDriver::receive()>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    6c4e:	lsls	r3, r0, #24
    6c50:	strb	r0, [r6, #21]
    6c52:	bmi.n	6c5a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  }
  return m_status;
}
    6c54:	add	sp, #8
    6c56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6c5a:	subs	r3, r5, #1

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    6c5c:	ands.w	r5, r3, #255	; 0xff
    6c60:	bne.n	6c48 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
  }
  return m_status;
}
    6c62:	add	sp, #8
    6c64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    6c68:	mov.w	r1, #300	; 0x12c
    6c6c:	mov	r0, r6
    6c6e:	bl	6bbc <SdSpiCard::waitNotBusy(unsigned short)>
    6c72:	b.n	6c12 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>

00006c74 <SdSpiCard::readOCR(unsigned long*)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    6c74:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    6c76:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    6c78:	mov	r5, r0
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    6c7a:	ldr	r3, [r3, #20]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    6c7c:	mov	r6, r1
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    6c7e:	blx	r3
  if (cardCommand(CMD58, 0)) {
    6c80:	mov	r0, r5
    6c82:	movs	r2, #0
    6c84:	movs	r1, #58	; 0x3a
    6c86:	bl	6bf8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6c8a:	cbnz	r0, 6ca8 <SdSpiCard::readOCR(unsigned long*)+0x34>
    6c8c:	adds	r7, r5, #4
    6c8e:	adds	r4, r6, #4
    6c90:	mov	r0, r7
    6c92:	bl	8148 <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    6c96:	strb.w	r0, [r4, #-1]!
  syncDevice();
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    6c9a:	cmp	r6, r4
    6c9c:	bne.n	6c90 <SdSpiCard::readOCR(unsigned long*)+0x1c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6c9e:	ldrb	r4, [r5, #20]
    6ca0:	cbnz	r4, 6cbe <SdSpiCard::readOCR(unsigned long*)+0x4a>
    6ca2:	movs	r4, #1
  return true;

fail:
  spiStop();
  return false;
}
    6ca4:	mov	r0, r4
    6ca6:	pop	{r3, r4, r5, r6, r7, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6ca8:	ldrb	r4, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6caa:	movs	r3, #18
    6cac:	strb	r3, [r5, #19]
    6cae:	cmp	r4, #0
    6cb0:	beq.n	6ca4 <SdSpiCard::readOCR(unsigned long*)+0x30>
    6cb2:	mov	r0, r5
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    6cb4:	movs	r4, #0
    6cb6:	bl	6ad8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
}
    6cba:	mov	r0, r4
    6cbc:	pop	{r3, r4, r5, r6, r7, pc}
    6cbe:	mov	r0, r5
    6cc0:	bl	6ad8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    6cc4:	mov	r0, r4
    6cc6:	pop	{r3, r4, r5, r6, r7, pc}

00006cc8 <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    6cc8:	ldr	r3, [r0, #0]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    6cca:	push	{r4, r5, r6, lr}
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    6ccc:	ldr	r3, [r3, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    6cce:	mov	r4, r0
    6cd0:	mov	r5, r1
    6cd2:	mov	r6, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    6cd4:	blx	r3
  if (cardCommand(cmd, 0)) {
    6cd6:	mov	r1, r5
    6cd8:	mov	r0, r4
    6cda:	movs	r2, #0
    6cdc:	bl	6bf8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6ce0:	cbz	r0, 6cf4 <SdSpiCard::readRegister(unsigned char, void*)+0x2c>
    6ce2:	movs	r3, #27
    6ce4:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6ce6:	ldrb	r0, [r4, #20]
    6ce8:	cbz	r0, 6cf2 <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    6cea:	mov	r0, r4
    6cec:	bl	6ad8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    6cf0:	movs	r0, #0
}
    6cf2:	pop	{r4, r5, r6, pc}
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    6cf4:	mov	r1, r6
    6cf6:	movs	r2, #16
    6cf8:	mov	r0, r4
    6cfa:	bl	6b3c <SdSpiCard::readData(unsigned char*, unsigned int)>
    6cfe:	cmp	r0, #0
    6d00:	beq.n	6ce6 <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6d02:	ldrb	r5, [r4, #20]
    6d04:	cmp	r5, #0
    6d06:	beq.n	6cf2 <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    6d08:	mov	r0, r4
    6d0a:	bl	6ad8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    6d0e:	mov	r0, r5
    6d10:	pop	{r4, r5, r6, pc}
    6d12:	nop

00006d14 <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    6d14:	mov	r2, r1
    6d16:	movs	r1, #9
    6d18:	b.w	6cc8 <SdSpiCard::readRegister(unsigned char, void*)>

00006d1c <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    6d1c:	mov	r2, r1
    6d1e:	movs	r1, #10
    6d20:	b.w	6cc8 <SdSpiCard::readRegister(unsigned char, void*)>

00006d24 <SdSpiCard::sectorCount()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    6d24:	push	{r4, r5, lr}
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    6d26:	ldr	r3, [r0, #0]
    6d28:	ldr	r2, [pc, #140]	; (6db8 <SdSpiCard::sectorCount()+0x94>)
    6d2a:	ldr	r3, [r3, #52]	; 0x34
    6d2c:	cmp	r3, r2
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    6d2e:	sub	sp, #20
    6d30:	bne.n	6d92 <SdSpiCard::sectorCount()+0x6e>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    6d32:	mov	r2, sp
    6d34:	movs	r1, #9
    6d36:	bl	6cc8 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    6d3a:	cbz	r0, 6d4c <SdSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    6d3c:	ldrb.w	r3, [sp]
    6d40:	ands.w	r3, r3, #192	; 0xc0
    6d44:	beq.n	6d50 <SdSpiCard::sectorCount()+0x2c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    6d46:	cmp	r3, #64	; 0x40
    6d48:	beq.n	6d98 <SdSpiCard::sectorCount()+0x74>
    6d4a:	movs	r0, #0
}
    6d4c:	add	sp, #20
    6d4e:	pop	{r4, r5, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    6d50:	ldrb.w	r4, [sp, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    6d54:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    6d58:	ldrb.w	r2, [sp, #7]
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    6d5c:	ldrb.w	r0, [sp, #10]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    6d60:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    6d64:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    6d68:	and.w	r4, r4, #3
    6d6c:	lsls	r4, r4, #1
    6d6e:	lsls	r2, r2, #2
    6d70:	and.w	r3, r3, #3
    6d74:	orr.w	r0, r4, r0, lsr #7
    6d78:	and.w	r1, r1, #15
    6d7c:	orr.w	r3, r2, r3, lsl #10
    6d80:	add	r0, r1
    6d82:	orr.w	r3, r3, r5, lsr #6
    6d86:	adds	r3, #1
    6d88:	subs	r0, #7
    6d8a:	lsl.w	r0, r3, r0
    6d8e:	add	sp, #20
    6d90:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    6d92:	mov	r1, sp
    6d94:	blx	r3
    6d96:	b.n	6d3a <SdSpiCard::sectorCount()+0x16>
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    6d98:	ldrb.w	r3, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    6d9c:	ldrb.w	r1, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    6da0:	ldrb.w	r0, [sp, #8]
    6da4:	adds	r2, r3, #1
    6da6:	and.w	r3, r1, #63	; 0x3f
    6daa:	add.w	r3, r2, r3, lsl #16
    6dae:	add.w	r0, r3, r0, lsl #8
    6db2:	lsls	r0, r0, #10
}
    6db4:	add	sp, #20
    6db6:	pop	{r4, r5, pc}
    6db8:	.word	0x00006d15

00006dbc <SdSpiCard::readStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    6dbc:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    6dbe:	ldr	r3, [r0, #0]
    6dc0:	ldr	r5, [pc, #68]	; (6e08 <SdSpiCard::readStart(unsigned long)+0x4c>)
    6dc2:	ldr	r3, [r3, #64]	; 0x40
    6dc4:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    6dc6:	sub	sp, #12
    6dc8:	mov	r4, r0
    6dca:	mov	r2, r1
    6dcc:	bne.n	6dfe <SdSpiCard::readStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    6dce:	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    6dd0:	cmp	r0, #3
    sector <<= 9;
    6dd2:	it	ne
    6dd4:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    6dd6:	movs	r1, #18
    6dd8:	mov	r0, r4
    6dda:	bl	6bf8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6dde:	cbz	r0, 6df8 <SdSpiCard::readStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6de0:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6de2:	movs	r3, #12
    6de4:	strb	r3, [r4, #19]
    6de6:	cbnz	r0, 6dec <SdSpiCard::readStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    6de8:	add	sp, #12
    6dea:	pop	{r4, r5, pc}
    6dec:	mov	r0, r4
    6dee:	bl	6ad8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    6df2:	movs	r0, #0
    6df4:	add	sp, #12
    6df6:	pop	{r4, r5, pc}
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
    6df8:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    6dfa:	add	sp, #12
    6dfc:	pop	{r4, r5, pc}
    6dfe:	str	r1, [sp, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    6e00:	blx	r3
    6e02:	ldr	r2, [sp, #4]
    6e04:	b.n	6dd0 <SdSpiCard::readStart(unsigned long)+0x14>
    6e06:	nop
    6e08:	.word	0x00006a21

00006e0c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    6e0c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e10:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    6e12:	ldrb	r1, [r0, #16]
    6e14:	cmp	r1, #1
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    6e16:	mov	r6, r0
    6e18:	mov	r4, r2
    6e1a:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    6e1c:	beq.n	6e2e <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!syncDevice()) {
    6e1e:	ldr	r3, [r6, #0]
    6e20:	mov	r0, r6
    6e22:	ldr	r3, [r3, #20]
    6e24:	blx	r3
    6e26:	cbnz	r0, 6e62 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
      return false;
    6e28:	movs	r0, #0
    6e2a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    6e2e:	ldr	r3, [r0, #12]
    6e30:	cmp	r3, r5
    6e32:	bne.n	6e1e <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    6e34:	movs	r5, #0
    6e36:	cbz	r7, 6e52 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readData(dst, 512)) {
    6e38:	mov	r1, r4
    6e3a:	mov.w	r2, #512	; 0x200
    6e3e:	mov	r0, r6
    6e40:	bl	6b3c <SdSpiCard::readData(unsigned char*, unsigned int)>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    6e44:	adds	r5, #1
    6e46:	add.w	r4, r4, #512	; 0x200
    if (!readData(dst, 512)) {
    6e4a:	cmp	r0, #0
    6e4c:	beq.n	6e28 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    6e4e:	cmp	r7, r5
    6e50:	bne.n	6e38 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    6e52:	ldr	r3, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    6e54:	ldrb	r2, [r6, #17]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    6e56:	add	r7, r3
    6e58:	str	r7, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    6e5a:	cbnz	r2, 6e76 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x6a>
    6e5c:	movs	r0, #1
    6e5e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!syncDevice()) {
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
    6e62:	mov	r1, r5
    6e64:	mov	r0, r6
    6e66:	bl	6dbc <SdSpiCard::readStart(unsigned long)>
    6e6a:	cmp	r0, #0
    6e6c:	beq.n	6e28 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    6e6e:	movs	r3, #1
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    6e70:	str	r5, [r6, #12]
    m_curState = READ_STATE;
    6e72:	strb	r3, [r6, #16]
    6e74:	b.n	6e34 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    6e76:	ldr	r3, [r6, #0]
    6e78:	mov	r0, r6
    6e7a:	ldr	r3, [r3, #20]
      return false;
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
    6e7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    6e80:	bx	r3
    6e82:	nop

00006e84 <SdSpiCard::readStop()>:
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    6e84:	push	{r3, r4, r5, lr}
  if (cardCommand(CMD12, 0)) {
    6e86:	movs	r2, #0
    6e88:	movs	r1, #12
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    6e8a:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    6e8c:	bl	6bf8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6e90:	ldrb	r4, [r5, #20]
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    6e92:	cbz	r0, 6e9e <SdSpiCard::readStop()+0x1a>
    6e94:	movs	r3, #9
    6e96:	strb	r3, [r5, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6e98:	cbnz	r4, 6eb0 <SdSpiCard::readStop()+0x2c>
  return true;

fail:
  spiStop();
  return false;
}
    6e9a:	mov	r0, r4
    6e9c:	pop	{r3, r4, r5, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6e9e:	cbnz	r4, 6ea6 <SdSpiCard::readStop()+0x22>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    6ea0:	movs	r4, #1

fail:
  spiStop();
  return false;
}
    6ea2:	mov	r0, r4
    6ea4:	pop	{r3, r4, r5, pc}
    6ea6:	mov	r0, r5
    6ea8:	bl	6ad8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    6eac:	mov	r0, r4
    6eae:	pop	{r3, r4, r5, pc}
    6eb0:	mov	r0, r5
    6eb2:	movs	r4, #0
    6eb4:	bl	6ad8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    6eb8:	mov	r0, r4
    6eba:	pop	{r3, r4, r5, pc}

00006ebc <SdSpiCard::writeStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    6ebc:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    6ebe:	ldr	r3, [r0, #0]
    6ec0:	ldr	r5, [pc, #68]	; (6f08 <SdSpiCard::writeStart(unsigned long)+0x4c>)
    6ec2:	ldr	r3, [r3, #64]	; 0x40
    6ec4:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    6ec6:	sub	sp, #12
    6ec8:	mov	r4, r0
    6eca:	mov	r2, r1
    6ecc:	bne.n	6efe <SdSpiCard::writeStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    6ece:	ldrb	r0, [r0, #22]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    6ed0:	cmp	r0, #3
    sector <<= 9;
    6ed2:	it	ne
    6ed4:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    6ed6:	movs	r1, #25
    6ed8:	mov	r0, r4
    6eda:	bl	6bf8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6ede:	cbz	r0, 6ef8 <SdSpiCard::writeStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6ee0:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6ee2:	movs	r3, #14
    6ee4:	strb	r3, [r4, #19]
    6ee6:	cbnz	r0, 6eec <SdSpiCard::writeStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    6ee8:	add	sp, #12
    6eea:	pop	{r4, r5, pc}
    6eec:	mov	r0, r4
    6eee:	bl	6ad8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    6ef2:	movs	r0, #0
    6ef4:	add	sp, #12
    6ef6:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    6ef8:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    6efa:	add	sp, #12
    6efc:	pop	{r4, r5, pc}
    6efe:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    6f00:	blx	r3
    6f02:	ldr	r2, [sp, #4]
    6f04:	b.n	6ed0 <SdSpiCard::writeStart(unsigned long)+0x14>
    6f06:	nop
    6f08:	.word	0x00006a21

00006f0c <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    6f0c:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    6f0e:	ldr	r3, [r0, #0]
    6f10:	ldr	r7, [pc, #172]	; (6fc0 <SdSpiCard::erase(unsigned long, unsigned long)+0xb4>)
    6f12:	ldr	r3, [r3, #52]	; 0x34
    6f14:	cmp	r3, r7
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    6f16:	sub	sp, #20
    6f18:	mov	r4, r0
    6f1a:	mov	r5, r1
    6f1c:	mov	r6, r2
    6f1e:	bne.n	6f7c <SdSpiCard::erase(unsigned long, unsigned long)+0x70>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    6f20:	mov	r2, sp
    6f22:	movs	r1, #9
    6f24:	bl	6cc8 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  if (!readCSD(&csd)) {
    6f28:	cbz	r0, 6f50 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    6f2a:	ldrb.w	r3, [sp, #10]
    6f2e:	lsls	r2, r3, #25
    6f30:	bpl.n	6f60 <SdSpiCard::erase(unsigned long, unsigned long)+0x54>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    6f32:	ldrb	r3, [r4, #22]
    6f34:	cmp	r3, #3
    firstSector <<= 9;
    6f36:	it	ne
    6f38:	lslne	r5, r5, #9
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
    6f3a:	mov	r2, r5
    6f3c:	mov.w	r1, #32
    6f40:	mov	r0, r4
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
    6f42:	it	ne
    6f44:	lslne	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    6f46:	bl	6bf8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    6f4a:	cbz	r0, 6f82 <SdSpiCard::erase(unsigned long, unsigned long)+0x76>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    6f4c:	movs	r3, #37	; 0x25
    6f4e:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6f50:	ldrb	r0, [r4, #20]
    6f52:	cbz	r0, 6f5c <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    6f54:	mov	r0, r4
    6f56:	bl	6ad8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    6f5a:	movs	r0, #0
}
    6f5c:	add	sp, #20
    6f5e:	pop	{r4, r5, r6, r7, pc}
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    6f60:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    6f64:	ldrb.w	r1, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    6f68:	lsls	r3, r3, #1
    6f6a:	adds	r2, r6, #1
    6f6c:	orr.w	r3, r3, r1, lsr #7
    6f70:	orrs	r2, r5
    6f72:	tst	r3, r2
    6f74:	beq.n	6f32 <SdSpiCard::erase(unsigned long, unsigned long)+0x26>
    6f76:	movs	r3, #38	; 0x26
    6f78:	strb	r3, [r4, #19]
    6f7a:	b.n	6f50 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    6f7c:	mov	r1, sp
    6f7e:	blx	r3
    6f80:	b.n	6f28 <SdSpiCard::erase(unsigned long, unsigned long)+0x1c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    6f82:	mov	r2, r6
    6f84:	movs	r1, #33	; 0x21
    6f86:	mov	r0, r4
    6f88:	bl	6bf8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6f8c:	cmp	r0, #0
    6f8e:	bne.n	6f4c <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
      || cardCommand(CMD38, 0)) {
    6f90:	mov	r2, r0
    6f92:	movs	r1, #38	; 0x26
    6f94:	mov	r0, r4
    6f96:	bl	6bf8 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    6f9a:	cmp	r0, #0
    6f9c:	bne.n	6f4c <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    6f9e:	movw	r1, #10000	; 0x2710
    6fa2:	mov	r0, r4
    6fa4:	bl	6bbc <SdSpiCard::waitNotBusy(unsigned short)>
    6fa8:	cbnz	r0, 6fb0 <SdSpiCard::erase(unsigned long, unsigned long)+0xa4>
    6faa:	movs	r3, #39	; 0x27
    6fac:	strb	r3, [r4, #19]
    6fae:	b.n	6f50 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6fb0:	ldrb	r5, [r4, #20]
    6fb2:	cmp	r5, #0
    6fb4:	beq.n	6f5c <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    6fb6:	mov	r0, r4
    6fb8:	bl	6ad8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;
    6fbc:	mov	r0, r5
    6fbe:	b.n	6f5c <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    6fc0:	.word	0x00006d15

00006fc4 <SdSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    6fc4:	push	{r4, r5, r6, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    6fc6:	mov.w	r1, #600	; 0x258
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    6fca:	mov	r5, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    6fcc:	bl	6bbc <SdSpiCard::waitNotBusy(unsigned short)>
    6fd0:	mov	r6, r0
    6fd2:	cbnz	r0, 6fec <SdSpiCard::writeStop()+0x28>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6fd4:	ldrb	r4, [r5, #20]
    6fd6:	movs	r3, #30
    6fd8:	strb	r3, [r5, #19]
    6fda:	cbnz	r4, 6fe0 <SdSpiCard::writeStop()+0x1c>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    6fdc:	mov	r0, r4
    6fde:	pop	{r4, r5, r6, pc}
    6fe0:	mov	r0, r5
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    6fe2:	mov	r4, r6
    6fe4:	bl	6ad8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
}
    6fe8:	mov	r0, r4
    6fea:	pop	{r4, r5, r6, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    6fec:	movs	r1, #253	; 0xfd
    6fee:	adds	r0, r5, #4
    6ff0:	bl	8184 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    6ff4:	ldrb	r4, [r5, #20]
    6ff6:	cbnz	r4, 6ffe <SdSpiCard::writeStop()+0x3a>
    6ff8:	mov	r4, r6

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    6ffa:	mov	r0, r4
    6ffc:	pop	{r4, r5, r6, pc}
    6ffe:	mov	r0, r5
    7000:	bl	6ad8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    7004:	b.n	6fdc <SdSpiCard::writeStop()+0x18>
    7006:	nop

00007008 <SdSpiCard::syncDevice()>:
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    7008:	push	{r4, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    700a:	ldrb	r3, [r0, #16]
    700c:	cmp	r3, #1
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    700e:	mov	r4, r0
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    7010:	beq.n	701e <SdSpiCard::syncDevice()+0x16>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    7012:	cmp	r3, #2
    7014:	beq.n	702a <SdSpiCard::syncDevice()+0x22>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    7016:	movs	r3, #0
    7018:	strb	r3, [r4, #16]
#endif  // ENABLE_DEDICATED_SPI
  return true;
    701a:	movs	r0, #1
    701c:	pop	{r4, pc}
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    if (!SdSpiCard::readStop()) {
    701e:	bl	6e84 <SdSpiCard::readStop()>
    7022:	cmp	r0, #0
    7024:	bne.n	7016 <SdSpiCard::syncDevice()+0xe>
      return false;
    7026:	movs	r0, #0
    7028:	pop	{r4, pc}
    }
  } else if (m_curState == WRITE_STATE) {
    if (!SdSpiCard::writeStop()) {
    702a:	bl	6fc4 <SdSpiCard::writeStop()>
    702e:	cmp	r0, #0
    7030:	bne.n	7016 <SdSpiCard::syncDevice()+0xe>
    7032:	b.n	7026 <SdSpiCard::syncDevice()+0x1e>

00007034 <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    7034:	push	{r4, r5, r6, lr}
    7036:	adds	r4, r0, #4
    7038:	mov	r6, r2
    703a:	mov	r5, r0
    703c:	mov	r0, r4
    703e:	bl	8184 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver.send(buf, n);
    7042:	mov.w	r2, #512	; 0x200
    7046:	mov	r1, r6
    7048:	mov	r0, r4
    704a:	bl	819c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    704e:	mov	r0, r4
    7050:	movs	r1, #255	; 0xff
    7052:	bl	8184 <SdSpiArduinoDriver::send(unsigned char)>
    7056:	mov	r0, r4
    7058:	movs	r1, #255	; 0xff
    705a:	bl	8184 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    705e:	mov	r0, r4
    7060:	bl	8148 <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    7064:	and.w	r3, r0, #31
    7068:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    706a:	strb	r0, [r5, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    706c:	beq.n	7082 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    706e:	ldrb	r0, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7070:	movs	r3, #31
    7072:	strb	r3, [r5, #19]
    7074:	cbnz	r0, 7078 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

fail:
  spiStop();
  return false;
}
    7076:	pop	{r4, r5, r6, pc}
    7078:	mov	r0, r5
    707a:	bl	6ad8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  }
  return true;

fail:
  spiStop();
  return false;
    707e:	movs	r0, #0
    7080:	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    7082:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    7084:	pop	{r4, r5, r6, pc}
    7086:	nop

00007088 <SdSpiCard::writeData(unsigned char const*)>:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    7088:	push	{r3, r4, r5, lr}
    708a:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    708c:	mov.w	r1, #600	; 0x258
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    7090:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    7092:	bl	6bbc <SdSpiCard::waitNotBusy(unsigned short)>
    7096:	cbnz	r0, 70aa <SdSpiCard::writeData(unsigned char const*)+0x22>
    7098:	movs	r3, #35	; 0x23
    709a:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    709c:	ldrb	r0, [r4, #20]
    709e:	cbz	r0, 70a8 <SdSpiCard::writeData(unsigned char const*)+0x20>
    70a0:	mov	r0, r4
    70a2:	bl	6ad8 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  }
  return true;

fail:
  spiStop();
  return false;
    70a6:	movs	r0, #0
}
    70a8:	pop	{r3, r4, r5, pc}
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    70aa:	mov	r2, r5
    70ac:	movs	r1, #252	; 0xfc
    70ae:	mov	r0, r4
    70b0:	bl	7034 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    70b4:	cmp	r0, #0
    70b6:	beq.n	709c <SdSpiCard::writeData(unsigned char const*)+0x14>
  return true;

fail:
  spiStop();
  return false;
}
    70b8:	pop	{r3, r4, r5, pc}
    70ba:	nop

000070bc <sdIrs()>:
#endif  // USE_DEBUG_MODE
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
    70bc:	push	{r4}
  SDHC_IRQSIGEN = 0;
    70be:	ldr	r4, [pc, #28]	; (70dc <sdIrs()+0x20>)
  m_irqstat = SDHC_IRQSTAT;
    70c0:	ldr	r2, [pc, #28]	; (70e0 <sdIrs()+0x24>)
    70c2:	ldr	r1, [pc, #32]	; (70e4 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    70c4:	ldr	r0, [pc, #32]	; (70e8 <sdIrs()+0x2c>)
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    70c6:	movs	r3, #0
    70c8:	str	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    70ca:	ldr	r4, [r2, #0]
    70cc:	str	r4, [r1, #0]
  SDHC_IRQSTAT = m_irqstat;
    70ce:	ldr	r1, [r1, #0]
    70d0:	str	r1, [r2, #0]
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
}
    70d2:	ldr.w	r4, [sp], #4
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    70d6:	strb	r3, [r0, #0]
}
    70d8:	bx	lr
    70da:	nop
    70dc:	.word	0x400b1038
    70e0:	.word	0x400b1030
    70e4:	.word	0x2001c924
    70e8:	.word	0x2001c93c

000070ec <isBusyCommandComplete()>:
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    70ec:	ldr	r3, [pc, #12]	; (70fc <isBusyCommandComplete()+0x10>)
    70ee:	ldr	r0, [pc, #16]	; (7100 <isBusyCommandComplete()+0x14>)
    70f0:	ldr	r3, [r3, #0]
    70f2:	ands	r0, r3
}
    70f4:	clz	r0, r0
    70f8:	lsrs	r0, r0, #5
    70fa:	bx	lr
    70fc:	.word	0x400b1030
    7100:	.word	0x000f0001

00007104 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    7104:	ldr	r3, [pc, #8]	; (7110 <isBusyCommandInhibit()+0xc>)
    7106:	ldr	r0, [r3, #0]
}
    7108:	and.w	r0, r0, #1
    710c:	bx	lr
    710e:	nop
    7110:	.word	0x400b1024

00007114 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    7114:	ldr	r3, [pc, #4]	; (711c <isBusyDMA()+0x8>)
    7116:	ldrb	r0, [r3, #0]
}
    7118:	bx	lr
    711a:	nop
    711c:	.word	0x2001c93c

00007120 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    7120:	ldr	r3, [pc, #12]	; (7130 <isBusyFifoRead()+0x10>)
    7122:	ldr	r0, [r3, #0]
    7124:	eor.w	r0, r0, #2048	; 0x800
}
    7128:	ubfx	r0, r0, #11, #1
    712c:	bx	lr
    712e:	nop
    7130:	.word	0x400b1024

00007134 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    7134:	ldr	r3, [pc, #12]	; (7144 <isBusyFifoWrite()+0x10>)
    7136:	ldr	r0, [r3, #0]
    7138:	eor.w	r0, r0, #1024	; 0x400
}
    713c:	ubfx	r0, r0, #10, #1
    7140:	bx	lr
    7142:	nop
    7144:	.word	0x400b1024

00007148 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    7148:	ldr	r3, [pc, #12]	; (7158 <isBusyTransferComplete()+0x10>)
    714a:	ldr	r0, [pc, #16]	; (715c <isBusyTransferComplete()+0x14>)
    714c:	ldr	r3, [r3, #0]
    714e:	ands	r0, r3
}
    7150:	clz	r0, r0
    7154:	lsrs	r0, r0, #5
    7156:	bx	lr
    7158:	.word	0x400b1030
    715c:	.word	0x117f0002

00007160 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    7160:	mov.w	r2, #1000	; 0x3e8
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7164:	ldr	r3, [pc, #176]	; (7218 <setSdclk(unsigned long)+0xb8>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    7166:	mul.w	r0, r2, r0
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    716a:	cmp	r0, r3
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    716c:	push	{r4, r5, r6, r7}
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    716e:	bhi.n	7208 <setSdclk(unsigned long)+0xa8>
    7170:	ldr	r5, [pc, #168]	; (721c <setSdclk(unsigned long)+0xbc>)
    7172:	movs	r2, #8
    7174:	movs	r1, #1
    sdclkfs <<= 1;
    7176:	lsls	r1, r1, #1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7178:	lsls	r3, r1, #4
    717a:	udiv	r3, r5, r3
    717e:	cmp	r0, r3
    7180:	ldr	r4, [pc, #152]	; (721c <setSdclk(unsigned long)+0xbc>)
    7182:	bcs.n	7200 <setSdclk(unsigned long)+0xa0>
    7184:	subs	r2, #1
    7186:	bne.n	7176 <setSdclk(unsigned long)+0x16>
    7188:	udiv	r4, r4, r1
    718c:	lsrs	r3, r1, #1
    718e:	lsls	r7, r3, #8
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    7190:	cmp	r0, r4
    7192:	bcs.n	7210 <setSdclk(unsigned long)+0xb0>
    7194:	ldr	r6, [pc, #132]	; (721c <setSdclk(unsigned long)+0xbc>)
    7196:	lsls	r3, r1, #1
    7198:	movs	r2, #1
    719a:	b.n	719e <setSdclk(unsigned long)+0x3e>
    719c:	mov	r3, r4
    719e:	udiv	r4, r6, r3
    71a2:	cmp	r0, r4
    dvs++;
    71a4:	add.w	r5, r2, #1
    71a8:	add.w	r4, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    71ac:	bcs.n	71fc <setSdclk(unsigned long)+0x9c>
    71ae:	cmp	r5, #16
    71b0:	mov	r2, r5
    71b2:	bne.n	719c <setSdclk(unsigned long)+0x3c>
    71b4:	movs	r2, #240	; 0xf0
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    71b6:	ldr	r6, [pc, #104]	; (7220 <setSdclk(unsigned long)+0xc0>)
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    71b8:	ldr	r4, [pc, #104]	; (7224 <setSdclk(unsigned long)+0xc4>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    71ba:	ldr	r0, [pc, #96]	; (721c <setSdclk(unsigned long)+0xbc>)

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    71bc:	ldr	r1, [pc, #104]	; (7228 <setSdclk(unsigned long)+0xc8>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    71be:	mov.w	r5, #1000	; 0x3e8
    71c2:	mul.w	r3, r5, r3
    71c6:	udiv	r3, r0, r3
    71ca:	str	r3, [r6, #0]
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    71cc:	ldr	r3, [r4, #0]
    71ce:	bic.w	r3, r3, #8
    71d2:	str	r3, [r4, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    71d4:	ldr	r0, [r4, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    71d6:	bic.w	r3, r0, #1044480	; 0xff000
    71da:	bic.w	r3, r3, #4080	; 0xff0
    71de:	orr.w	r3, r3, #917504	; 0xe0000
    71e2:	orrs	r3, r7
    71e4:	orrs	r2, r3
    71e6:	str	r2, [r4, #0]

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    71e8:	ldr	r3, [r1, #0]
    71ea:	lsls	r3, r3, #28
    71ec:	bpl.n	71e8 <setSdclk(unsigned long)+0x88>
  }

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    71ee:	ldr	r2, [pc, #52]	; (7224 <setSdclk(unsigned long)+0xc4>)
    71f0:	ldr	r3, [r2, #0]
    71f2:	orr.w	r3, r3, #8
    71f6:	str	r3, [r2, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    71f8:	pop	{r4, r5, r6, r7}
    71fa:	bx	lr
    71fc:	lsls	r2, r2, #4
    71fe:	b.n	71b6 <setSdclk(unsigned long)+0x56>
    7200:	udiv	r4, r4, r1
    7204:	lsls	r7, r1, #7
    7206:	b.n	7190 <setSdclk(unsigned long)+0x30>
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7208:	ldr	r4, [pc, #16]	; (721c <setSdclk(unsigned long)+0xbc>)
    720a:	movs	r7, #0
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    720c:	movs	r1, #1
    720e:	b.n	7190 <setSdclk(unsigned long)+0x30>
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    7210:	mov	r3, r1
    7212:	movs	r2, #0
    7214:	b.n	71b6 <setSdclk(unsigned long)+0x56>
    7216:	nop
    7218:	.word	0x005b8d7f
    721c:	.word	0x05b8d800
    7220:	.word	0x2001c940
    7224:	.word	0x400b102c
    7228:	.word	0x400b1024

0000722c <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    722c:	ldr	r3, [pc, #4]	; (7234 <SdioCard::errorCode() const+0x8>)
}
    722e:	ldrb	r0, [r3, #0]
    7230:	bx	lr
    7232:	nop
    7234:	.word	0x20016f18

00007238 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    7238:	ldr	r3, [pc, #4]	; (7240 <SdioCard::errorData() const+0x8>)
    723a:	ldr	r0, [r3, #0]
}
    723c:	bx	lr
    723e:	nop
    7240:	.word	0x2001c924

00007244 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    7244:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    7246:	ldr	r4, [pc, #20]	; (725c <SdioCard::readCID(CID*)+0x18>)
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    7248:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    724a:	ldmia	r4!, {r0, r1, r2, r3}
    724c:	str	r0, [r5, #0]
    724e:	str	r1, [r5, #4]
    7250:	str	r2, [r5, #8]
    7252:	str	r3, [r5, #12]
  return true;
}
    7254:	movs	r0, #1
    7256:	pop	{r4, r5}
    7258:	bx	lr
    725a:	nop
    725c:	.word	0x2001c904

00007260 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    7260:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    7262:	ldr	r4, [pc, #20]	; (7278 <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    7264:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    7266:	ldmia	r4!, {r0, r1, r2, r3}
    7268:	str	r0, [r5, #0]
    726a:	str	r1, [r5, #4]
    726c:	str	r2, [r5, #8]
    726e:	str	r3, [r5, #12]
  return true;
}
    7270:	movs	r0, #1
    7272:	pop	{r4, r5}
    7274:	bx	lr
    7276:	nop
    7278:	.word	0x2001c92c

0000727c <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    727c:	ldr	r3, [pc, #8]	; (7288 <SdioCard::readOCR(unsigned long*)+0xc>)
    727e:	ldr	r3, [r3, #0]
    7280:	str	r3, [r1, #0]
  return true;
}
    7282:	movs	r0, #1
    7284:	bx	lr
    7286:	nop
    7288:	.word	0x2001c91c

0000728c <SdioCard::~SdioCard()>:
    728c:	bx	lr
    728e:	nop

00007290 <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    7290:	push	{r3, r4, r5, r6, r7, lr}
    7292:	mov	r5, r0
  uint32_t m = micros();
    7294:	bl	88a4 <micros>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7298:	ldr	r7, [pc, #24]	; (72b4 <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    729a:	mov	r6, r0
    729c:	b.n	72a8 <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    729e:	bl	88a4 <micros>
    72a2:	subs	r0, r0, r6
    72a4:	cmp	r0, r7
    72a6:	bhi.n	72b0 <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    72a8:	blx	r5
    72aa:	mov	r4, r0
    72ac:	cmp	r0, #0
    72ae:	bne.n	729e <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    72b0:	mov	r0, r4
    72b2:	pop	{r3, r4, r5, r6, r7, pc}
    72b4:	.word	0x000f4240

000072b8 <yieldTimeout(bool (*)())>:
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    72b8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    72bc:	ldr.w	r8, [pc, #64]	; 7300 <yieldTimeout(bool (*)())+0x48>
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    72c0:	ldr	r7, [pc, #56]	; (72fc <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    72c2:	str.w	r0, [r8]
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    72c6:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
    72c8:	bl	88a4 <micros>
    72cc:	mov	r6, r0
    72ce:	b.n	72de <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    72d0:	bl	88a4 <micros>
    72d4:	subs	r0, r0, r6
    72d6:	cmp	r0, r7
    72d8:	bhi.n	72f0 <yieldTimeout(bool (*)())+0x38>
    72da:	bl	9bcc <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    72de:	blx	r5
    72e0:	mov	r4, r0
    72e2:	cmp	r0, #0
    72e4:	bne.n	72d0 <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    72e6:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    72ea:	mov	r0, r4
    72ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    72f0:	movs	r3, #0
    72f2:	str.w	r3, [r8]
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    72f6:	mov	r0, r4
    72f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72fc:	.word	0x000f4240
    7300:	.word	0x2001c914

00007304 <SdioCard::~SdioCard()>:
    7304:	push	{r4, lr}
    7306:	movs	r1, #12
    7308:	mov	r4, r0
    730a:	bl	a1f4 <operator delete(void*, unsigned int)>
    730e:	mov	r0, r4
    7310:	pop	{r4, pc}
    7312:	nop

00007314 <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    7314:	ldr	r3, [pc, #20]	; (732c <SdioCard::type() const+0x18>)
    7316:	ldrb	r3, [r3, #0]
    7318:	cbz	r3, 7328 <SdioCard::type() const+0x14>
    731a:	ldr	r3, [pc, #20]	; (7330 <SdioCard::type() const+0x1c>)
    731c:	ldrb	r3, [r3, #0]
    731e:	cmp	r3, #0
    7320:	ite	ne
    7322:	movne	r0, #3
    7324:	moveq	r0, #2
    7326:	bx	lr
    7328:	movs	r0, #1
}
    732a:	bx	lr
    732c:	.word	0x2001c900
    7330:	.word	0x2001c918

00007334 <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    7334:	push	{r3, r4, r5, lr}
    7336:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    7338:	ldr	r0, [pc, #60]	; (7378 <cardCommand(unsigned long, unsigned long)+0x44>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    733a:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    733c:	bl	7290 <waitTimeout(bool (*)())>
    7340:	cbz	r0, 7346 <cardCommand(unsigned long, unsigned long)+0x12>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    7342:	movs	r0, #0
    7344:	pop	{r3, r4, r5, pc}
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    7346:	ldr	r2, [pc, #52]	; (737c <cardCommand(unsigned long, unsigned long)+0x48>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    7348:	ldr	r3, [pc, #52]	; (7380 <cardCommand(unsigned long, unsigned long)+0x4c>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    734a:	str	r5, [r2, #0]
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
  if (waitTimeout(isBusyCommandComplete)) {
    734c:	ldr	r0, [pc, #52]	; (7384 <cardCommand(unsigned long, unsigned long)+0x50>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    734e:	str	r4, [r3, #0]
  if (waitTimeout(isBusyCommandComplete)) {
    7350:	bl	7290 <waitTimeout(bool (*)())>
    7354:	cmp	r0, #0
    7356:	bne.n	7342 <cardCommand(unsigned long, unsigned long)+0xe>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    7358:	ldr	r2, [pc, #44]	; (7388 <cardCommand(unsigned long, unsigned long)+0x54>)
    735a:	ldr	r3, [pc, #48]	; (738c <cardCommand(unsigned long, unsigned long)+0x58>)
    735c:	ldr	r1, [r2, #0]
    735e:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    7360:	ldr	r1, [r3, #0]
    7362:	str	r1, [r2, #0]

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    7364:	ldr	r2, [r3, #0]
    7366:	lsls	r2, r2, #31
    7368:	bpl.n	7342 <cardCommand(unsigned long, unsigned long)+0xe>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    736a:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    736c:	tst.w	r3, #983040	; 0xf0000
    7370:	bne.n	7342 <cardCommand(unsigned long, unsigned long)+0xe>
    7372:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    7374:	pop	{r3, r4, r5, pc}
    7376:	nop
    7378:	.word	0x00007105
    737c:	.word	0x400b1008
    7380:	.word	0x400b100c
    7384:	.word	0x000070ed
    7388:	.word	0x400b1030
    738c:	.word	0x2001c924

00007390 <SdioCard::status()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
    7390:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    7392:	ldr	r3, [pc, #16]	; (73a4 <SdioCard::status()+0x14>)
    7394:	ldr	r0, [pc, #16]	; (73a8 <SdioCard::status()+0x18>)
    7396:	ldr	r1, [r3, #0]
    7398:	bl	7334 <cardCommand(unsigned long, unsigned long)>
    739c:	cbz	r0, 73a2 <SdioCard::status()+0x12>
    739e:	ldr	r3, [pc, #12]	; (73ac <SdioCard::status()+0x1c>)
    73a0:	ldr	r0, [r3, #0]
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    73a2:	pop	{r3, pc}
    73a4:	.word	0x2001c920
    73a8:	.word	0x0d1a0000
    73ac:	.word	0x400b1010

000073b0 <readReg16(unsigned long, void*)>:
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    73b0:	push	{r4, r5, lr}
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    73b2:	ldr	r3, [pc, #84]	; (7408 <readReg16(unsigned long, void*)+0x58>)
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    73b4:	sub	sp, #20
    73b6:	mov	r5, r1
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    73b8:	ldr	r1, [r3, #0]
    73ba:	bl	7334 <cardCommand(unsigned long, unsigned long)>
    73be:	cbz	r0, 7402 <readReg16(unsigned long, void*)+0x52>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    73c0:	ldr	r2, [pc, #72]	; (740c <readReg16(unsigned long, void*)+0x5c>)
    73c2:	ldr	r3, [pc, #76]	; (7410 <readReg16(unsigned long, void*)+0x60>)
    73c4:	ldr	r2, [r2, #0]
    73c6:	str	r2, [sp, #0]
    73c8:	ldr	r1, [r3, #0]
    73ca:	str	r1, [sp, #4]
    73cc:	ldr	r1, [r3, #4]
    73ce:	str	r1, [sp, #8]
    73d0:	adds	r3, #8
    73d2:	add.w	r4, r5, #15
    73d6:	ldr	r3, [r3, #0]
    73d8:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    73da:	movs	r3, #0
    73dc:	b.n	73e2 <readReg16(unsigned long, void*)+0x32>
    73de:	ldr.w	r2, [r1, #-16]
    d[14 - i] = sr[i/4] >> 8*(i%4);
    73e2:	and.w	r1, r3, #3
    73e6:	lsls	r1, r1, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    73e8:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    73ea:	lsrs	r2, r1
    73ec:	add.w	lr, sp, #16
    73f0:	bic.w	r1, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    73f4:	cmp	r3, #15
    73f6:	add	r1, lr
    d[14 - i] = sr[i/4] >> 8*(i%4);
    73f8:	strb.w	r2, [r4, #-1]!
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    73fc:	bne.n	73de <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    73fe:	movs	r3, #0
    7400:	strb	r3, [r5, #15]
  return true;
}
    7402:	add	sp, #20
    7404:	pop	{r4, r5, pc}
    7406:	nop
    7408:	.word	0x2001c920
    740c:	.word	0x400b1010
    7410:	.word	0x400b1014

00007414 <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    7414:	push	{r3, lr}
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    7416:	ldr	r3, [pc, #28]	; (7434 <isBusyCMD13()+0x20>)
    7418:	ldr	r0, [pc, #28]	; (7438 <isBusyCMD13()+0x24>)
    741a:	ldr	r1, [r3, #0]
    741c:	bl	7334 <cardCommand(unsigned long, unsigned long)>
    7420:	cbz	r0, 7430 <isBusyCMD13()+0x1c>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    7422:	ldr	r3, [pc, #24]	; (743c <isBusyCMD13()+0x28>)
    7424:	ldr	r0, [r3, #0]
    7426:	eor.w	r0, r0, #256	; 0x100
    742a:	ubfx	r0, r0, #8, #1
    742e:	pop	{r3, pc}
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
    7430:	movs	r0, #1
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
    7432:	pop	{r3, pc}
    7434:	.word	0x2001c920
    7438:	.word	0x0d1a0000
    743c:	.word	0x400b1010

00007440 <SdioCard::isBusy()>:
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    7440:	ldr	r3, [pc, #16]	; (7454 <SdioCard::isBusy()+0x14>)
    7442:	ldr	r3, [r3, #0]
    7444:	cbz	r3, 7448 <SdioCard::isBusy()+0x8>
    7446:	bx	r3
    7448:	ldr	r3, [pc, #12]	; (7458 <SdioCard::isBusy()+0x18>)
    744a:	ldrb	r0, [r3, #0]
    744c:	cbnz	r0, 7450 <SdioCard::isBusy()+0x10>
}
    744e:	bx	lr
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    7450:	b.w	7414 <isBusyCMD13()>
    7454:	.word	0x2001c914
    7458:	.word	0x2001c928

0000745c <waitDmaStatus() [clone .part.6]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    745c:	ldr	r3, [pc, #20]	; (7474 <waitDmaStatus() [clone .part.6]+0x18>)
    745e:	ldr	r0, [r3, #0]
    7460:	ands.w	r0, r0, #2
    7464:	beq.n	7472 <waitDmaStatus() [clone .part.6]+0x16>
    7466:	ldr	r3, [r3, #0]
    7468:	ldr	r0, [pc, #12]	; (7478 <waitDmaStatus() [clone .part.6]+0x1c>)
    746a:	ands	r0, r3
    746c:	clz	r0, r0
    7470:	lsrs	r0, r0, #5
}
    7472:	bx	lr
    7474:	.word	0x2001c924
    7478:	.word	0x117f0000

0000747c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    747c:	push	{r3, r4, r5, r6, r7, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    747e:	lsls	r4, r2, #30
    7480:	bne.n	7484 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8>
    7482:	cbnz	r3, 7496 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7484:	ldr	r1, [pc, #124]	; (7504 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    7486:	ldr	r3, [pc, #128]	; (7508 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7488:	movs	r0, #36	; 0x24
  m_errorLine = line;
    748a:	mov.w	r2, #470	; 0x1d6
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    748e:	strb	r0, [r1, #0]
  m_errorLine = line;
    7490:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    7492:	movs	r0, #0
    7494:	pop	{r3, r4, r5, r6, r7, pc}
    7496:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    7498:	ldr	r0, [pc, #112]	; (750c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    749a:	mov	r4, r3
    749c:	mov	r7, r1
    749e:	mov	r5, r2
    74a0:	bl	72b8 <yieldTimeout(bool (*)())>
    74a4:	cbnz	r0, 74ee <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x72>
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    74a6:	ldr	r1, [pc, #104]	; (7510 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    74a8:	ldr	r2, [pc, #104]	; (7514 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    74aa:	ldr.w	lr, [pc, #128]	; 752c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb0>
    74ae:	mov.w	ip, #1
    74b2:	strb.w	ip, [lr]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    74b6:	lsls	r3, r4, #16
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    74b8:	str	r0, [r1, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    74ba:	ldr	r4, [pc, #92]	; (7518 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    74bc:	str	r5, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    74be:	ldr	r2, [pc, #92]	; (751c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    74c0:	ldr	r1, [pc, #92]	; (7520 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
    74c2:	ldr	r0, [pc, #96]	; (7524 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    74c4:	orr.w	r3, r3, #512	; 0x200
    74c8:	str	r3, [r4, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    74ca:	ldrb	r3, [r2, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    74cc:	str	r0, [r1, #0]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    74ce:	cbnz	r3, 74fe <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x82>
    74d0:	lsls	r1, r7, #9
    74d2:	mov	r0, r6
    74d4:	bl	7334 <cardCommand(unsigned long, unsigned long)>
    74d8:	cmp	r0, #0
    74da:	beq.n	7492 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    74dc:	ldr	r0, [pc, #72]	; (7528 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
    74de:	bl	72b8 <yieldTimeout(bool (*)())>
    74e2:	cmp	r0, #0
    74e4:	bne.n	7492 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    74e6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    74ea:	b.w	745c <waitDmaStatus() [clone .part.6]>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    74ee:	ldr	r1, [pc, #20]	; (7504 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    74f0:	ldr	r3, [pc, #20]	; (7508 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    74f2:	movs	r0, #10
  m_errorLine = line;
    74f4:	movw	r2, #473	; 0x1d9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    74f8:	strb	r0, [r1, #0]
  m_errorLine = line;
    74fa:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    74fc:	b.n	7492 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    74fe:	mov	r1, r7
    7500:	b.n	74d2 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    7502:	nop
    7504:	.word	0x20016f18
    7508:	.word	0x2001c944
    750c:	.word	0x00007415
    7510:	.word	0x2001c924
    7514:	.word	0x400b1000
    7518:	.word	0x400b1004
    751c:	.word	0x2001c918
    7520:	.word	0x400b1038
    7524:	.word	0x117f0002
    7528:	.word	0x00007115
    752c:	.word	0x2001c93c

00007530 <SdioCard::sectorCount()>:
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    7530:	push	{r4, r5, r6}
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    7532:	ldr	r1, [pc, #100]	; (7598 <SdioCard::sectorCount()+0x68>)
    7534:	ldrb	r3, [r1, #0]
    7536:	ands.w	r3, r3, #192	; 0xc0
    753a:	beq.n	7560 <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    753c:	cmp	r3, #64	; 0x40
    753e:	beq.n	7546 <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    7540:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    7542:	pop	{r4, r5, r6}
    7544:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7546:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    7548:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    754a:	ldrb	r0, [r1, #8]
    754c:	adds	r2, r3, #1
    754e:	and.w	r3, r4, #63	; 0x3f
    7552:	add.w	r3, r2, r3, lsl #16
    7556:	add.w	r0, r3, r0, lsl #8
    755a:	lsls	r0, r0, #10
    755c:	pop	{r4, r5, r6}
    755e:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    7560:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    7562:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7564:	ldrb	r2, [r1, #7]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    7566:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    7568:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    756a:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    756c:	and.w	r1, r5, #3
    7570:	lsls	r1, r1, #1
    7572:	and.w	r3, r3, #3
    7576:	lsls	r2, r2, #2
    7578:	orr.w	r0, r1, r0, lsr #7
    757c:	orr.w	r3, r2, r3, lsl #10
    7580:	and.w	r1, r4, #15
    7584:	orr.w	r3, r3, r6, lsr #6
    7588:	add	r0, r1
    758a:	subs	r0, #7
    758c:	adds	r3, #1
    758e:	lsl.w	r0, r3, r0
    7592:	pop	{r4, r5, r6}
    7594:	bx	lr
    7596:	nop
    7598:	.word	0x2001c92c

0000759c <SdioCard::erase(unsigned long, unsigned long)>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    759c:	push	{r4, r5, r6, lr}
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    759e:	ldr	r6, [pc, #176]	; (7650 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    75a0:	ldrb	r3, [r6, #10]
    75a2:	and.w	r0, r3, #64	; 0x40
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    75a6:	mov	r5, r2
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    75a8:	cbnz	r0, 75c2 <SdioCard::erase(unsigned long, unsigned long)+0x26>
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    75aa:	and.w	r3, r3, #63	; 0x3f
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    75ae:	ldrb	r2, [r6, #11]
    75b0:	and.w	r4, r0, #255	; 0xff
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    75b4:	lsls	r3, r3, #1
    75b6:	adds	r0, r5, #1
    75b8:	orr.w	r3, r3, r2, lsr #7
    75bc:	orrs	r0, r1
    75be:	tst	r3, r0
    75c0:	bne.n	7606 <SdioCard::erase(unsigned long, unsigned long)+0x6a>
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    75c2:	ldr	r3, [pc, #144]	; (7654 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    75c4:	ldrb	r3, [r3, #0]
    75c6:	cbnz	r3, 75cc <SdioCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    75c8:	lsls	r1, r1, #9
    lastSector <<= 9;
    75ca:	lsls	r5, r5, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    75cc:	ldr	r0, [pc, #136]	; (7658 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    75ce:	bl	7334 <cardCommand(unsigned long, unsigned long)>
    75d2:	mov	r4, r0
    75d4:	cbnz	r0, 75e8 <SdioCard::erase(unsigned long, unsigned long)+0x4c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    75d6:	ldr	r1, [pc, #132]	; (765c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    75d8:	ldr	r3, [pc, #132]	; (7660 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    75da:	movs	r0, #15
  m_errorLine = line;
    75dc:	mov.w	r2, #692	; 0x2b4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    75e0:	strb	r0, [r1, #0]
  m_errorLine = line;
    75e2:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    75e4:	mov	r0, r4
    75e6:	pop	{r4, r5, r6, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    75e8:	mov	r1, r5
    75ea:	ldr	r0, [pc, #120]	; (7664 <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    75ec:	bl	7334 <cardCommand(unsigned long, unsigned long)>
    75f0:	mov	r4, r0
    75f2:	cbnz	r0, 7618 <SdioCard::erase(unsigned long, unsigned long)+0x7c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    75f4:	ldr	r1, [pc, #100]	; (765c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    75f6:	ldr	r3, [pc, #104]	; (7660 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    75f8:	movs	r0, #16
  m_errorLine = line;
    75fa:	movw	r2, #695	; 0x2b7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    75fe:	strb	r0, [r1, #0]
  m_errorLine = line;
    7600:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    7602:	mov	r0, r4
    7604:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7606:	ldr	r1, [pc, #84]	; (765c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    7608:	ldr	r3, [pc, #84]	; (7660 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    760a:	movs	r0, #38	; 0x26
  m_errorLine = line;
    760c:	mov.w	r2, #684	; 0x2ac
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7610:	strb	r0, [r1, #0]
  m_errorLine = line;
    7612:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    7614:	mov	r0, r4
    7616:	pop	{r4, r5, r6, pc}
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    7618:	movs	r1, #0
    761a:	ldr	r0, [pc, #76]	; (7668 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    761c:	bl	7334 <cardCommand(unsigned long, unsigned long)>
    7620:	mov	r4, r0
    7622:	cbnz	r0, 7634 <SdioCard::erase(unsigned long, unsigned long)+0x98>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7624:	ldr	r1, [pc, #52]	; (765c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    7626:	ldr	r3, [pc, #56]	; (7660 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7628:	movs	r0, #17
  m_errorLine = line;
    762a:	movw	r2, #698	; 0x2ba
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    762e:	strb	r0, [r1, #0]
  m_errorLine = line;
    7630:	str	r2, [r3, #0]
    7632:	b.n	75e4 <SdioCard::erase(unsigned long, unsigned long)+0x48>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    7634:	ldr	r0, [pc, #52]	; (766c <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    7636:	bl	7290 <waitTimeout(bool (*)())>
    763a:	cmp	r0, #0
    763c:	beq.n	75e4 <SdioCard::erase(unsigned long, unsigned long)+0x48>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    763e:	ldr	r1, [pc, #28]	; (765c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    7640:	ldr	r3, [pc, #28]	; (7660 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7642:	movs	r0, #39	; 0x27
  m_errorLine = line;
    7644:	movw	r2, #701	; 0x2bd
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7648:	strb	r0, [r1, #0]
  m_errorLine = line;
    764a:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    764c:	movs	r4, #0
    764e:	b.n	75e4 <SdioCard::erase(unsigned long, unsigned long)+0x48>
    7650:	.word	0x2001c92c
    7654:	.word	0x2001c918
    7658:	.word	0x201a0000
    765c:	.word	0x20016f18
    7660:	.word	0x2001c944
    7664:	.word	0x211a0000
    7668:	.word	0x261b0000
    766c:	.word	0x00007415

00007670 <transferStop()>:
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
    7670:	push	{r4, r5, r6, lr}
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    7672:	movs	r1, #0
    7674:	ldr	r0, [pc, #84]	; (76cc <transferStop()+0x5c>)
    7676:	bl	7334 <cardCommand(unsigned long, unsigned long)>
    767a:	mov	r4, r0
    767c:	cbnz	r0, 7690 <transferStop()+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    767e:	ldr	r1, [pc, #80]	; (76d0 <transferStop()+0x60>)
  m_errorLine = line;
    7680:	ldr	r3, [pc, #80]	; (76d4 <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7682:	movs	r0, #9
  m_errorLine = line;
    7684:	mov.w	r2, #540	; 0x21c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7688:	strb	r0, [r1, #0]
  m_errorLine = line;
    768a:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    768c:	mov	r0, r4
    768e:	pop	{r4, r5, r6, pc}
//------------------------------------------------------------------------------
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    7690:	ldr	r0, [pc, #68]	; (76d8 <transferStop()+0x68>)
    7692:	bl	72b8 <yieldTimeout(bool (*)())>
    7696:	cbnz	r0, 76b6 <transferStop()+0x46>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    7698:	ldr	r0, [pc, #64]	; (76dc <transferStop()+0x6c>)
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    769a:	ldr	r1, [pc, #68]	; (76e0 <transferStop()+0x70>)
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    769c:	ldr	r5, [pc, #68]	; (76e4 <transferStop()+0x74>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    769e:	ldr	r6, [r0, #0]
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    76a0:	ldr	r3, [r1, #0]
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    76a2:	ldr	r2, [r5, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    76a4:	bic.w	r3, r3, #65536	; 0x10000
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    76a8:	orr.w	r2, r2, #67108864	; 0x4000000
    76ac:	str	r2, [r5, #0]
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
    76ae:	str	r6, [r0, #0]
  SDHC_PROCTL = proctl;
    76b0:	str	r3, [r1, #0]
  return true;
}
    76b2:	mov	r0, r4
    76b4:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    76b6:	ldr	r1, [pc, #24]	; (76d0 <transferStop()+0x60>)
  m_errorLine = line;
    76b8:	ldr	r3, [pc, #24]	; (76d4 <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    76ba:	movs	r0, #10
  m_errorLine = line;
    76bc:	movw	r2, #543	; 0x21f
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    76c0:	strb	r0, [r1, #0]
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    76c2:	movs	r4, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    76c4:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    76c6:	mov	r0, r4
    76c8:	pop	{r4, r5, r6, pc}
    76ca:	nop
    76cc:	.word	0x0cdb0000
    76d0:	.word	0x20016f18
    76d4:	.word	0x2001c944
    76d8:	.word	0x00007415
    76dc:	.word	0x400b1034
    76e0:	.word	0x400b1028
    76e4:	.word	0x400b102c

000076e8 <SdioCard::readStop()>:
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    76e8:	b.w	7670 <transferStop()>

000076ec <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    76ec:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    76ee:	ldr	r3, [pc, #160]	; (7790 <SdioCard::writeData(unsigned char const*)+0xa4>)
    76f0:	ldr	r3, [r3, #0]
    76f2:	lsls	r0, r3, #23
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    76f4:	mov	r5, r1
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    76f6:	bmi.n	770a <SdioCard::writeData(unsigned char const*)+0x1e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    76f8:	ldr	r3, [pc, #152]	; (7794 <SdioCard::writeData(unsigned char const*)+0xa8>)
    76fa:	ldr	r2, [r3, #0]
    76fc:	bic.w	r2, r2, #65536	; 0x10000
    7700:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    7702:	ldr	r2, [r3, #0]
    7704:	orr.w	r2, r2, #131072	; 0x20000
    7708:	str	r2, [r3, #0]
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    770a:	ldr	r2, [pc, #136]	; (7794 <SdioCard::writeData(unsigned char const*)+0xa8>)
  if (waitTimeout(isBusyFifoWrite)) {
    770c:	ldr	r0, [pc, #136]	; (7798 <SdioCard::writeData(unsigned char const*)+0xac>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    770e:	ldr	r3, [r2, #0]
    7710:	orr.w	r3, r3, #65536	; 0x10000
    7714:	str	r3, [r2, #0]
  if (waitTimeout(isBusyFifoWrite)) {
    7716:	bl	7290 <waitTimeout(bool (*)())>
    771a:	cmp	r0, #0
    771c:	bne.n	777c <SdioCard::writeData(unsigned char const*)+0x90>
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    771e:	ldr	r4, [pc, #112]	; (7790 <SdioCard::writeData(unsigned char const*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    7720:	ldr	r0, [pc, #120]	; (779c <SdioCard::writeData(unsigned char const*)+0xb0>)
    7722:	subs	r3, r5, #4
    7724:	add.w	r5, r5, #508	; 0x1fc
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    7728:	ldr	r2, [r4, #0]
    772a:	lsls	r1, r2, #21
    772c:	bpl.n	7728 <SdioCard::writeData(unsigned char const*)+0x3c>
    772e:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    7732:	ldr.w	r2, [r3, #4]!
    7736:	str	r2, [r0, #0]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    7738:	cmp	r1, r3
    773a:	bne.n	7732 <SdioCard::writeData(unsigned char const*)+0x46>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    773c:	cmp	r5, r1
    773e:	mov	r3, r1
    7740:	bne.n	7728 <SdioCard::writeData(unsigned char const*)+0x3c>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    7742:	ldr	r0, [pc, #92]	; (77a0 <SdioCard::writeData(unsigned char const*)+0xb4>)
    7744:	bl	7290 <waitTimeout(bool (*)())>
    7748:	cbnz	r0, 776a <SdioCard::writeData(unsigned char const*)+0x7e>
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    774a:	ldr	r2, [pc, #88]	; (77a4 <SdioCard::writeData(unsigned char const*)+0xb8>)
    774c:	ldr	r3, [pc, #88]	; (77a8 <SdioCard::writeData(unsigned char const*)+0xbc>)
    774e:	ldr	r1, [r2, #0]
    7750:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    7752:	ldr	r1, [r3, #0]
    7754:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    7756:	ldr	r2, [r3, #0]
    7758:	lsls	r2, r2, #30
    775a:	bpl.n	778c <SdioCard::writeData(unsigned char const*)+0xa0>
    775c:	ldr	r3, [r3, #0]
    775e:	ldr	r0, [pc, #76]	; (77ac <SdioCard::writeData(unsigned char const*)+0xc0>)
    7760:	ands	r0, r3
    7762:	clz	r0, r0
    7766:	lsrs	r0, r0, #5
    7768:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    776a:	ldr	r1, [pc, #68]	; (77b0 <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    776c:	ldr	r3, [pc, #68]	; (77b4 <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    776e:	movs	r0, #35	; 0x23
  m_errorLine = line;
    7770:	movw	r2, #905	; 0x389
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7774:	strb	r0, [r1, #0]
  m_errorLine = line;
    7776:	str	r2, [r3, #0]
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
    7778:	movs	r0, #0
    777a:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    777c:	ldr	r1, [pc, #48]	; (77b0 <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    777e:	ldr	r3, [pc, #52]	; (77b4 <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7780:	movs	r0, #32
  m_errorLine = line;
    7782:	movw	r2, #894	; 0x37e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7786:	strb	r0, [r1, #0]
  m_errorLine = line;
    7788:	str	r2, [r3, #0]
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    778a:	movs	r0, #0
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    778c:	pop	{r3, r4, r5, pc}
    778e:	nop
    7790:	.word	0x400b1024
    7794:	.word	0x400b1028
    7798:	.word	0x00007135
    779c:	.word	0x400b1020
    77a0:	.word	0x00007149
    77a4:	.word	0x400b1030
    77a8:	.word	0x2001c924
    77ac:	.word	0x117f0000
    77b0:	.word	0x20016f18
    77b4:	.word	0x2001c944

000077b8 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    77b8:	push	{r3, r4, r5, lr}
  if (yieldTimeout(isBusyCMD13)) {
    77ba:	ldr	r0, [pc, #80]	; (780c <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    77bc:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    77be:	bl	72b8 <yieldTimeout(bool (*)())>
    77c2:	cbnz	r0, 77f8 <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    77c4:	ldr	r2, [pc, #72]	; (7810 <SdioCard::writeStart(unsigned long)+0x58>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    77c6:	ldr	r1, [pc, #76]	; (7814 <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    77c8:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    77ca:	ldr	r0, [pc, #76]	; (7818 <SdioCard::writeStart(unsigned long)+0x60>)
    77cc:	ldr	r5, [pc, #76]	; (781c <SdioCard::writeStart(unsigned long)+0x64>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    77ce:	bic.w	r3, r3, #65536	; 0x10000
    77d2:	str	r3, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    77d4:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    77d6:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    77d8:	cbnz	r3, 77f4 <SdioCard::writeStart(unsigned long)+0x3c>
    77da:	lsls	r1, r4, #9
    77dc:	ldr	r0, [pc, #64]	; (7820 <SdioCard::writeStart(unsigned long)+0x68>)
    77de:	bl	7334 <cardCommand(unsigned long, unsigned long)>
    77e2:	cbnz	r0, 77f2 <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    77e4:	ldr	r1, [pc, #60]	; (7824 <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    77e6:	ldr	r3, [pc, #64]	; (7828 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    77e8:	movs	r4, #14
  m_errorLine = line;
    77ea:	movw	r2, #990	; 0x3de
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    77ee:	strb	r4, [r1, #0]
  m_errorLine = line;
    77f0:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    77f2:	pop	{r3, r4, r5, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    77f4:	mov	r1, r4
    77f6:	b.n	77dc <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    77f8:	ldr	r1, [pc, #40]	; (7824 <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    77fa:	ldr	r3, [pc, #44]	; (7828 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    77fc:	movs	r0, #10
  m_errorLine = line;
    77fe:	movw	r2, #978	; 0x3d2
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7802:	strb	r0, [r1, #0]
  m_errorLine = line;
    7804:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7806:	movs	r0, #0
    7808:	pop	{r3, r4, r5, pc}
    780a:	nop
    780c:	.word	0x00007415
    7810:	.word	0x400b1028
    7814:	.word	0x2001c918
    7818:	.word	0x400b1004
    781c:	.word	0xffff0200
    7820:	.word	0x193a0022
    7824:	.word	0x20016f18
    7828:	.word	0x2001c944

0000782c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    782c:	push	{r3, r4, r5, r6, r7, lr}
    782e:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    7830:	ldrb	r0, [r0, #8]
    7832:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    7834:	mov	r4, r1
    7836:	mov	r5, r2
    7838:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    783a:	bmi.n	7864 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    783c:	cbz	r3, 7860 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    783e:	add	r7, r1
    7840:	b.n	7846 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    7842:	cmp	r4, r7
    7844:	beq.n	7860 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    7846:	ldr	r3, [r6, #0]
    7848:	mov	r2, r5
    784a:	mov	r1, r4
    784c:	ldr	r3, [r3, #8]
    784e:	mov	r0, r6
    7850:	blx	r3
    7852:	adds	r4, #1
    7854:	add.w	r5, r5, #512	; 0x200
    7858:	cmp	r0, #0
    785a:	bne.n	7842 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    785c:	movs	r0, #0
    785e:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    7860:	movs	r0, #1
    7862:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    7864:	lsls	r0, r2, #30
    7866:	beq.n	788e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    7868:	cmp	r3, #0
    786a:	beq.n	7860 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    786c:	add	r7, r1
    786e:	b.n	7874 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    7870:	cmp	r7, r4
    7872:	beq.n	7860 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    7874:	ldr	r3, [r6, #0]
    7876:	mov	r2, r5
    7878:	mov	r1, r4
    787a:	ldr	r3, [r3, #8]
    787c:	mov	r0, r6
    787e:	blx	r3
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    7880:	adds	r4, #1
    7882:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    7886:	cmp	r0, #0
    7888:	bne.n	7870 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    788a:	movs	r0, #0
    788c:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    788e:	ldr	r0, [pc, #24]	; (78a8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    7890:	bl	747c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    7894:	cmp	r0, #0
    7896:	bne.n	7860 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7898:	ldr	r1, [pc, #16]	; (78ac <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
  m_errorLine = line;
    789a:	ldr	r3, [pc, #20]	; (78b0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    789c:	movs	r4, #12
  m_errorLine = line;
    789e:	mov.w	r2, #820	; 0x334
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    78a2:	strb	r4, [r1, #0]
  m_errorLine = line;
    78a4:	str	r2, [r3, #0]
    78a6:	pop	{r3, r4, r5, r6, r7, pc}
    78a8:	.word	0x123a0037
    78ac:	.word	0x20016f18
    78b0:	.word	0x2001c944

000078b4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    78b4:	push	{r3, r4, r5, r6, r7, lr}
    78b6:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    78b8:	ldrb	r0, [r0, #8]
    78ba:	lsls	r0, r0, #31
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    78bc:	mov	r4, r1
    78be:	mov	r5, r2
    78c0:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    78c2:	bmi.n	78ec <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    78c4:	cbz	r3, 78e8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    78c6:	add	r7, r1
    78c8:	b.n	78ce <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    78ca:	cmp	r4, r7
    78cc:	beq.n	78e8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    78ce:	ldr	r3, [r6, #0]
    78d0:	mov	r2, r5
    78d2:	mov	r1, r4
    78d4:	ldr	r3, [r3, #24]
    78d6:	mov	r0, r6
    78d8:	blx	r3
    78da:	adds	r4, #1
    78dc:	add.w	r5, r5, #512	; 0x200
    78e0:	cmp	r0, #0
    78e2:	bne.n	78ca <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    78e4:	movs	r0, #0
    78e6:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    78e8:	movs	r0, #1
    78ea:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    78ec:	lsls	r0, r2, #30
    78ee:	beq.n	7916 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    78f0:	cmp	r3, #0
    78f2:	beq.n	78e8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    78f4:	add	r7, r1
    78f6:	b.n	78fc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    78f8:	cmp	r7, r4
    78fa:	beq.n	78e8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    78fc:	ldr	r3, [r6, #0]
    78fe:	mov	r2, r5
    7900:	mov	r1, r4
    7902:	ldr	r3, [r3, #24]
    7904:	mov	r0, r6
    7906:	blx	r3
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    7908:	adds	r4, #1
    790a:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    790e:	cmp	r0, #0
    7910:	bne.n	78f8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    7912:	movs	r0, #0
    7914:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    7916:	ldr	r0, [pc, #24]	; (7930 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    7918:	bl	747c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    791c:	cmp	r0, #0
    791e:	bne.n	78e8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7920:	ldr	r1, [pc, #16]	; (7934 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
  m_errorLine = line;
    7922:	ldr	r3, [pc, #20]	; (7938 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7924:	movs	r4, #14
  m_errorLine = line;
    7926:	mov.w	r2, #964	; 0x3c4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    792a:	strb	r4, [r1, #0]
  m_errorLine = line;
    792c:	str	r2, [r3, #0]
    792e:	pop	{r3, r4, r5, r6, r7, pc}
    7930:	.word	0x193a0027
    7934:	.word	0x20016f18
    7938:	.word	0x2001c944

0000793c <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    793c:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    793e:	ldrb	r3, [r0, #8]
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    7940:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    7942:	lsls	r2, r3, #31
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    7944:	sub.w	sp, sp, #512	; 0x200
    7948:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    794a:	bpl.n	7980 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    794c:	lsls	r3, r5, #30
    794e:	beq.n	795e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    7950:	mov	r1, r5
    7952:	mov	r0, sp
    7954:	mov.w	r2, #512	; 0x200
    7958:	bl	81f4 <memcpy>
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    795c:	mov	r5, sp
      memcpy(aligned, src, 512);
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    795e:	mov	r2, r5
    7960:	mov	r1, r6
    7962:	movs	r3, #1
    7964:	ldr	r0, [pc, #120]	; (79e0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>)
    7966:	bl	747c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    796a:	cbnz	r0, 797a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    796c:	ldr	r1, [pc, #116]	; (79e4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa8>)
  m_errorLine = line;
    796e:	ldr	r3, [pc, #120]	; (79e8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xac>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7970:	movs	r4, #13
  m_errorLine = line;
    7972:	movw	r2, #923	; 0x39b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7976:	strb	r4, [r1, #0]
  m_errorLine = line;
    7978:	str	r2, [r3, #0]
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    797a:	add.w	sp, sp, #512	; 0x200
    797e:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    7980:	ldrb	r3, [r0, #9]
    7982:	cmp	r3, #2
    7984:	mov	r4, r0
    7986:	beq.n	799a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
      if (!syncDevice()) {
    7988:	ldr	r3, [r4, #0]
    798a:	mov	r0, r4
    798c:	ldr	r3, [r3, #20]
    798e:	blx	r3
    7990:	cbnz	r0, 79ca <SdioCard::writeSector(unsigned long, unsigned char const*)+0x8e>
        return false;
    7992:	movs	r0, #0
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    7994:	add.w	sp, sp, #512	; 0x200
    7998:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    799a:	ldr	r3, [r0, #4]
    799c:	cmp	r1, r3
    799e:	bne.n	7988 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
    79a0:	ldr	r3, [r4, #0]
    79a2:	mov	r1, r5
    79a4:	ldr	r3, [r3, #68]	; 0x44
    79a6:	mov	r0, r4
    79a8:	blx	r3
    79aa:	cmp	r0, #0
    79ac:	beq.n	7992 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
      return false;
    }
    m_curSector++;
    79ae:	ldr	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    79b0:	ldr	r2, [pc, #56]	; (79ec <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb0>)
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
      return false;
    }
    m_curSector++;
    79b2:	adds	r3, #1
    79b4:	str	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    79b6:	ldr	r3, [r2, #0]
    79b8:	lsrs	r3, r3, #16
    79ba:	lsls	r3, r3, #16
    79bc:	cmp	r3, #0
    79be:	bne.n	797a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
      if (!syncDevice()) {
    79c0:	ldr	r3, [r4, #0]
    79c2:	mov	r0, r4
    79c4:	ldr	r3, [r3, #20]
    79c6:	blx	r3
    79c8:	b.n	797a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector )) {
    79ca:	ldr	r3, [r4, #0]
    79cc:	mov	r1, r6
    79ce:	ldr	r3, [r3, #72]	; 0x48
    79d0:	mov	r0, r4
    79d2:	blx	r3
    79d4:	cmp	r0, #0
    79d6:	beq.n	7992 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    79d8:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    79da:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    79dc:	strb	r3, [r4, #9]
    79de:	b.n	79a0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x64>
    79e0:	.word	0x183a0001
    79e4:	.word	0x20016f18
    79e8:	.word	0x2001c944
    79ec:	.word	0x400b1004

000079f0 <SdioCard::syncDevice()>:
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    79f0:	ldrb	r3, [r0, #9]
    79f2:	cmp	r3, #1
    79f4:	beq.n	7a10 <SdioCard::syncDevice()+0x20>
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    79f6:	cmp	r3, #2
    79f8:	beq.n	79fe <SdioCard::syncDevice()+0xe>
    if (!writeStop()) {
      return false;
    }
  }
  return true;
}
    79fa:	movs	r0, #1
    79fc:	bx	lr
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    79fe:	movs	r1, #0
    if (!writeStop()) {
    7a00:	ldr	r3, [r0, #0]
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    7a02:	strb	r1, [r0, #9]
    if (!writeStop()) {
    7a04:	ldr	r3, [r3, #76]	; 0x4c
    7a06:	ldr	r2, [pc, #20]	; (7a1c <SdioCard::syncDevice()+0x2c>)
    7a08:	cmp	r3, r2
    7a0a:	bne.n	7a18 <SdioCard::syncDevice()+0x28>
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    7a0c:	b.w	7670 <transferStop()>
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    7a10:	movs	r3, #0
    7a12:	strb	r3, [r0, #9]
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    7a14:	b.w	7670 <transferStop()>
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    if (!writeStop()) {
    7a18:	bx	r3
    7a1a:	nop
    7a1c:	.word	0x000076e9

00007a20 <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    7a20:	push	{r3, r4, r5, r6, r7, lr}
    7a22:	mov	r5, r0
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    7a24:	ldr	r0, [pc, #116]	; (7a9c <cardCMD6(unsigned long, unsigned char*)+0x7c>)

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    7a26:	mov	r4, r1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    7a28:	bl	7290 <waitTimeout(bool (*)())>
    7a2c:	cbz	r0, 7a40 <cardCMD6(unsigned long, unsigned char*)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a2e:	ldr	r1, [pc, #112]	; (7aa0 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    7a30:	ldr	r3, [pc, #112]	; (7aa4 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a32:	movs	r0, #10
  m_errorLine = line;
    7a34:	movw	r2, #377	; 0x179
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a38:	strb	r0, [r1, #0]
  m_errorLine = line;
    7a3a:	str	r2, [r3, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7a3c:	movs	r0, #0
    7a3e:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    7a40:	ldr	r2, [pc, #100]	; (7aa8 <cardCMD6(unsigned long, unsigned char*)+0x88>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    7a42:	ldr.w	lr, [pc, #132]	; 7ac8 <cardCMD6(unsigned long, unsigned char*)+0xa8>
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    7a46:	ldr	r7, [pc, #100]	; (7aac <cardCMD6(unsigned long, unsigned char*)+0x8c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    7a48:	ldr	r6, [pc, #100]	; (7ab0 <cardCMD6(unsigned long, unsigned char*)+0x90>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7a4a:	ldr	r3, [pc, #104]	; (7ab4 <cardCMD6(unsigned long, unsigned char*)+0x94>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    7a4c:	mov.w	ip, #1
    7a50:	strb.w	ip, [lr]
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    7a54:	mov	r1, r5
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    7a56:	str	r0, [r2, #0]
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    7a58:	ldr	r5, [pc, #92]	; (7ab8 <cardCMD6(unsigned long, unsigned char*)+0x98>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7a5a:	ldr	r2, [pc, #96]	; (7abc <cardCMD6(unsigned long, unsigned char*)+0x9c>)
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    7a5c:	str	r4, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    7a5e:	ldr	r0, [pc, #96]	; (7ac0 <cardCMD6(unsigned long, unsigned char*)+0xa0>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    7a60:	str	r5, [r6, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7a62:	str	r2, [r3, #0]
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    7a64:	bl	7334 <cardCommand(unsigned long, unsigned long)>
    7a68:	cbnz	r0, 7a7a <cardCMD6(unsigned long, unsigned char*)+0x5a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a6a:	ldr	r1, [pc, #52]	; (7aa0 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    7a6c:	ldr	r3, [pc, #52]	; (7aa4 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a6e:	movs	r4, #4
  m_errorLine = line;
    7a70:	mov.w	r2, #384	; 0x180
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a74:	strb	r4, [r1, #0]
  m_errorLine = line;
    7a76:	str	r2, [r3, #0]
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
    7a78:	pop	{r3, r4, r5, r6, r7, pc}
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    7a7a:	ldr	r0, [pc, #72]	; (7ac4 <cardCMD6(unsigned long, unsigned char*)+0xa4>)
    7a7c:	bl	72b8 <yieldTimeout(bool (*)())>
    7a80:	cbnz	r0, 7a8a <cardCMD6(unsigned long, unsigned char*)+0x6a>
    7a82:	bl	745c <waitDmaStatus() [clone .part.6]>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    7a86:	cbz	r0, 7a8a <cardCMD6(unsigned long, unsigned char*)+0x6a>
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
    7a88:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a8a:	ldr	r1, [pc, #20]	; (7aa0 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    7a8c:	ldr	r3, [pc, #20]	; (7aa4 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a8e:	movs	r0, #36	; 0x24
  m_errorLine = line;
    7a90:	movw	r2, #387	; 0x183
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a94:	strb	r0, [r1, #0]
  m_errorLine = line;
    7a96:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_DMA);
    7a98:	movs	r0, #0
    7a9a:	pop	{r3, r4, r5, r6, r7, pc}
    7a9c:	.word	0x00007415
    7aa0:	.word	0x20016f18
    7aa4:	.word	0x2001c944
    7aa8:	.word	0x2001c924
    7aac:	.word	0x400b1000
    7ab0:	.word	0x400b1004
    7ab4:	.word	0x400b1038
    7ab8:	.word	0x00010040
    7abc:	.word	0x117f0002
    7ac0:	.word	0x063a0011
    7ac4:	.word	0x00007115
    7ac8:	.word	0x2001c93c

00007acc <SdioCard::begin(SdioConfig)>:
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    7acc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    7ad0:	ldr	r5, [pc, #568]	; (7d0c <SdioCard::begin(SdioConfig)+0x240>)
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    7ad2:	ldr	r4, [pc, #572]	; (7d10 <SdioCard::begin(SdioConfig)+0x244>)
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    7ad4:	ldr.w	r8, [pc, #684]	; 7d84 <SdioCard::begin(SdioConfig)+0x2b8>
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    7ad8:	ldr	r7, [pc, #568]	; (7d14 <SdioCard::begin(SdioConfig)+0x248>)
  m_version2 = false;
    7ada:	ldr	r6, [pc, #572]	; (7d18 <SdioCard::begin(SdioConfig)+0x24c>)
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    7adc:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    7ade:	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    7ae0:	strb	r3, [r5, #0]
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    7ae2:	strb	r3, [r0, #9]
  m_initDone = false;
    7ae4:	strb.w	r3, [r8]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    7ae8:	strb	r3, [r7, #0]
  m_version2 = false;
    7aea:	strb	r3, [r6, #0]
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    7aec:	ldr	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    7aee:	ldr	r2, [pc, #556]	; (7d1c <SdioCard::begin(SdioConfig)+0x250>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    7af0:	ldr	r0, [pc, #556]	; (7d20 <SdioCard::begin(SdioConfig)+0x254>)
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    7af2:	ldr	r1, [pc, #560]	; (7d24 <SdioCard::begin(SdioConfig)+0x258>)
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    7af4:	ldr.w	lr, [pc, #656]	; 7d88 <SdioCard::begin(SdioConfig)+0x2bc>
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    7af8:	orr.w	r3, r3, #201326592	; 0xc000000
    7afc:	str	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    7afe:	ldr	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    7b00:	add.w	r4, r4, #260096	; 0x3f800
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    7b04:	orr.w	r3, r3, #131072	; 0x20000
    7b08:	str	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    7b0a:	adds	r4, #12
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    7b0c:	add.w	r2, r2, #428032	; 0x68800
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    7b10:	movw	r3, #259	; 0x103
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    7b14:	addw	r2, r2, #2044	; 0x7fc
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    7b18:	str	r3, [r0, #0]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    7b1a:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    7b1e:	str	r3, [r1, #0]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    7b20:	str	r3, [r4, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    7b22:	str	r3, [r0, #16]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    7b24:	str	r3, [r1, #12]
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    7b26:	ldr	r3, [r2, #0]
    7b28:	orr.w	r3, r3, #16777216	; 0x1000000
    7b2c:	orr.w	r3, r3, #32768	; 0x8000
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    7b30:	sub	sp, #68	; 0x44
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    7b32:	str	r3, [r2, #0]

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    7b34:	ldr	r3, [r2, #0]
    7b36:	ldr	r4, [pc, #496]	; (7d28 <SdioCard::begin(SdioConfig)+0x25c>)
    7b38:	lsls	r1, r3, #7
    7b3a:	bmi.n	7b34 <SdioCard::begin(SdioConfig)+0x68>
  }

  // Set initial SCK rate.
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    7b3c:	mov.w	r0, #400	; 0x190
    7b40:	bl	7160 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    7b44:	ldr.w	ip, [pc, #472]	; 7d20 <SdioCard::begin(SdioConfig)+0x254>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    7b48:	ldr.w	lr, [pc, #572]	; 7d88 <SdioCard::begin(SdioConfig)+0x2bc>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    7b4c:	ldr	r1, [pc, #468]	; (7d24 <SdioCard::begin(SdioConfig)+0x258>)
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    7b4e:	ldr	r2, [pc, #476]	; (7d2c <SdioCard::begin(SdioConfig)+0x260>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    7b50:	ldr	r0, [pc, #476]	; (7d30 <SdioCard::begin(SdioConfig)+0x264>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    7b52:	movw	r3, #1091	; 0x443
    7b56:	str.w	r3, [ip]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    7b5a:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    7b5e:	mov.w	lr, #1088	; 0x440
    7b62:	str.w	lr, [r1]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    7b66:	str	r3, [r2, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    7b68:	add.w	r2, r2, #409600	; 0x64000
    7b6c:	adds	r2, #40	; 0x28

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    7b6e:	str	r3, [r0, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    7b70:	ldr	r0, [pc, #448]	; (7d34 <SdioCard::begin(SdioConfig)+0x268>)
  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    7b72:	str	r3, [r1, #12]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    7b74:	str	r0, [r2, #0]

  attachInterruptVector(IRQ_SDHC, sdIrs);
    7b76:	ldr	r1, [pc, #448]	; (7d38 <SdioCard::begin(SdioConfig)+0x26c>)
    7b78:	movs	r0, #81	; 0x51
    7b7a:	bl	8830 <attachInterruptVector>
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    7b7e:	ldr	r3, [pc, #444]	; (7d3c <SdioCard::begin(SdioConfig)+0x270>)

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    7b80:	ldr	r1, [pc, #444]	; (7d40 <SdioCard::begin(SdioConfig)+0x274>)
    7b82:	movs	r0, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    7b84:	mov.w	r2, #131072	; 0x20000

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    7b88:	strb	r0, [r1, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    7b8a:	str	r2, [r3, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    7b8c:	ldr	r3, [r4, #0]
    7b8e:	orr.w	r3, r3, #134217728	; 0x8000000
    7b92:	str	r3, [r4, #0]
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    7b94:	ldr	r1, [r4, #0]
    7b96:	ands.w	r1, r1, #134217728	; 0x8000000
    7b9a:	bne.n	7b94 <SdioCard::begin(SdioConfig)+0xc8>
  m_highCapacity = false;
  m_version2 = false;

  // initialize controller.
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    7b9c:	mov	r0, r1
    7b9e:	bl	7334 <cardCommand(unsigned long, unsigned long)>
    7ba2:	mov	r4, r0
    7ba4:	cmp	r0, #0
    7ba6:	beq.n	7c46 <SdioCard::begin(SdioConfig)+0x17a>
    7ba8:	movs	r4, #3
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    7baa:	mov.w	r1, #426	; 0x1aa
    7bae:	ldr	r0, [pc, #404]	; (7d44 <SdioCard::begin(SdioConfig)+0x278>)
    7bb0:	bl	7334 <cardCommand(unsigned long, unsigned long)>
    7bb4:	cmp	r0, #0
    7bb6:	bne.n	7c74 <SdioCard::begin(SdioConfig)+0x1a8>
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    7bb8:	subs	r4, #1
    7bba:	bne.n	7baa <SdioCard::begin(SdioConfig)+0xde>
      }
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    7bbc:	ldrb	r3, [r6, #0]
    7bbe:	ldr	r6, [pc, #392]	; (7d48 <SdioCard::begin(SdioConfig)+0x27c>)
    7bc0:	cmp	r3, #0
    7bc2:	it	eq
    7bc4:	moveq.w	r6, #3145728	; 0x300000
  int m = micros();
    7bc8:	bl	88a4 <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    7bcc:	ldr	r4, [pc, #380]	; (7d4c <SdioCard::begin(SdioConfig)+0x280>)
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
    7bce:	mov	r9, r0
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    7bd0:	movs	r1, #0
    7bd2:	ldr	r0, [pc, #380]	; (7d50 <SdioCard::begin(SdioConfig)+0x284>)
    7bd4:	bl	7334 <cardCommand(unsigned long, unsigned long)>
    7bd8:	cbnz	r0, 7bf0 <SdioCard::begin(SdioConfig)+0x124>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7bda:	ldr	r2, [pc, #376]	; (7d54 <SdioCard::begin(SdioConfig)+0x288>)
    7bdc:	movw	r1, #621	; 0x26d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7be0:	movs	r3, #23
  m_errorLine = line;
    7be2:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7be4:	strb	r3, [r5, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    7be6:	movs	r4, #0

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    7be8:	mov	r0, r4
    7bea:	add	sp, #68	; 0x44
    7bec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    7bf0:	mov	r1, r6
    7bf2:	ldr	r0, [pc, #356]	; (7d58 <SdioCard::begin(SdioConfig)+0x28c>)
    7bf4:	bl	7334 <cardCommand(unsigned long, unsigned long)>
    7bf8:	cmp	r0, #0
    7bfa:	beq.n	7bda <SdioCard::begin(SdioConfig)+0x10e>
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    7bfc:	bl	88a4 <micros>
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    7c00:	ldr	r3, [pc, #344]	; (7d5c <SdioCard::begin(SdioConfig)+0x290>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    7c02:	ldr	r2, [pc, #328]	; (7d4c <SdioCard::begin(SdioConfig)+0x280>)
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    7c04:	rsb	r0, r9, r0
    7c08:	cmp	r0, r3
    7c0a:	bhi.n	7bda <SdioCard::begin(SdioConfig)+0x10e>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    7c0c:	ldr	r3, [r4, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    7c0e:	cmp	r3, #0
    7c10:	bge.n	7bd0 <SdioCard::begin(SdioConfig)+0x104>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    7c12:	ldr	r3, [pc, #332]	; (7d60 <SdioCard::begin(SdioConfig)+0x294>)
    7c14:	ldr	r1, [r2, #0]
    7c16:	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    7c18:	ldr	r3, [r2, #0]
    // Is high capacity.
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    7c1a:	ldr	r0, [pc, #328]	; (7d64 <SdioCard::begin(SdioConfig)+0x298>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    7c1c:	lsls	r2, r3, #1
    // Is high capacity.
    m_highCapacity = true;
    7c1e:	it	mi
    7c20:	movmi	r3, #1
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    7c22:	mov.w	r1, #0
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    // Is high capacity.
    m_highCapacity = true;
    7c26:	it	mi
    7c28:	strbmi	r3, [r7, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    7c2a:	bl	7334 <cardCommand(unsigned long, unsigned long)>
    7c2e:	mov	r4, r0
    7c30:	cbnz	r0, 7c5a <SdioCard::begin(SdioConfig)+0x18e>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7c32:	ldr	r2, [pc, #288]	; (7d54 <SdioCard::begin(SdioConfig)+0x288>)
    7c34:	movw	r1, #630	; 0x276
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c38:	movs	r3, #2

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    7c3a:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7c3c:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c3e:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    7c40:	add	sp, #68	; 0x44
    7c42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7c46:	ldr	r2, [pc, #268]	; (7d54 <SdioCard::begin(SdioConfig)+0x288>)
    7c48:	mov.w	r1, #604	; 0x25c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c4c:	movs	r3, #1

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    7c4e:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7c50:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c52:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    7c54:	add	sp, #68	; 0x44
    7c56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    7c5a:	movs	r1, #0
    7c5c:	ldr	r0, [pc, #264]	; (7d68 <SdioCard::begin(SdioConfig)+0x29c>)
    7c5e:	bl	7334 <cardCommand(unsigned long, unsigned long)>
    7c62:	mov	r4, r0
    7c64:	cbnz	r0, 7c96 <SdioCard::begin(SdioConfig)+0x1ca>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7c66:	ldr	r2, [pc, #236]	; (7d54 <SdioCard::begin(SdioConfig)+0x288>)
    7c68:	movw	r1, #633	; 0x279
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c6c:	movs	r3, #3
  m_errorLine = line;
    7c6e:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c70:	strb	r3, [r5, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    7c72:	b.n	7be8 <SdioCard::begin(SdioConfig)+0x11c>
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    7c74:	ldr	r3, [pc, #212]	; (7d4c <SdioCard::begin(SdioConfig)+0x280>)
    7c76:	ldr	r3, [r3, #0]
    7c78:	cmp.w	r3, #426	; 0x1aa
    7c7c:	beq.n	7c8e <SdioCard::begin(SdioConfig)+0x1c2>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7c7e:	ldr	r2, [pc, #212]	; (7d54 <SdioCard::begin(SdioConfig)+0x288>)
    7c80:	movw	r1, #610	; 0x262
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c84:	movs	r3, #6
  m_errorLine = line;
    7c86:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c88:	strb	r3, [r5, #0]
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    7c8a:	movs	r4, #0
    7c8c:	b.n	7be8 <SdioCard::begin(SdioConfig)+0x11c>
      }
      m_version2 = true;
    7c8e:	movs	r3, #1
    7c90:	strb	r3, [r6, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    7c92:	ldr	r6, [pc, #180]	; (7d48 <SdioCard::begin(SdioConfig)+0x27c>)
    7c94:	b.n	7bc8 <SdioCard::begin(SdioConfig)+0xfc>
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    7c96:	ldr	r3, [pc, #180]	; (7d4c <SdioCard::begin(SdioConfig)+0x280>)
    7c98:	ldr	r6, [pc, #208]	; (7d6c <SdioCard::begin(SdioConfig)+0x2a0>)
    7c9a:	ldr	r3, [r3, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    7c9c:	ldr	r1, [pc, #208]	; (7d70 <SdioCard::begin(SdioConfig)+0x2a4>)
    7c9e:	ldr	r0, [pc, #212]	; (7d74 <SdioCard::begin(SdioConfig)+0x2a8>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    7ca0:	lsrs	r3, r3, #16
    7ca2:	lsls	r3, r3, #16
    7ca4:	str	r3, [r6, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    7ca6:	bl	73b0 <readReg16(unsigned long, void*)>
    7caa:	mov	r4, r0
    7cac:	cbnz	r0, 7cbc <SdioCard::begin(SdioConfig)+0x1f0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7cae:	ldr	r2, [pc, #164]	; (7d54 <SdioCard::begin(SdioConfig)+0x288>)
    7cb0:	movw	r1, #638	; 0x27e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7cb4:	movs	r3, #7
  m_errorLine = line;
    7cb6:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7cb8:	strb	r3, [r5, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    7cba:	b.n	7be8 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    7cbc:	ldr	r1, [pc, #184]	; (7d78 <SdioCard::begin(SdioConfig)+0x2ac>)
    7cbe:	ldr	r0, [pc, #188]	; (7d7c <SdioCard::begin(SdioConfig)+0x2b0>)
    7cc0:	bl	73b0 <readReg16(unsigned long, void*)>
    7cc4:	mov	r4, r0
    7cc6:	cbnz	r0, 7cd6 <SdioCard::begin(SdioConfig)+0x20a>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7cc8:	ldr	r2, [pc, #136]	; (7d54 <SdioCard::begin(SdioConfig)+0x288>)
    7cca:	movw	r1, #641	; 0x281
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7cce:	movs	r3, #8
  m_errorLine = line;
    7cd0:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7cd2:	strb	r3, [r5, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    7cd4:	b.n	7be8 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    7cd6:	ldr	r1, [r6, #0]
    7cd8:	ldr	r0, [pc, #164]	; (7d80 <SdioCard::begin(SdioConfig)+0x2b4>)
    7cda:	bl	7334 <cardCommand(unsigned long, unsigned long)>
    7cde:	mov	r4, r0
    7ce0:	cbnz	r0, 7cf0 <SdioCard::begin(SdioConfig)+0x224>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7ce2:	ldr	r2, [pc, #112]	; (7d54 <SdioCard::begin(SdioConfig)+0x288>)
    7ce4:	mov.w	r1, #644	; 0x284
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ce8:	movs	r3, #5
  m_errorLine = line;
    7cea:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7cec:	strb	r3, [r5, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    7cee:	b.n	7be8 <SdioCard::begin(SdioConfig)+0x11c>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    7cf0:	ldr	r1, [r6, #0]
    7cf2:	ldr	r0, [pc, #92]	; (7d50 <SdioCard::begin(SdioConfig)+0x284>)
    7cf4:	bl	7334 <cardCommand(unsigned long, unsigned long)>
    7cf8:	cmp	r0, #0
    7cfa:	bne.n	7d8c <SdioCard::begin(SdioConfig)+0x2c0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7cfc:	ldr	r2, [pc, #84]	; (7d54 <SdioCard::begin(SdioConfig)+0x288>)
    7cfe:	mov.w	r1, #648	; 0x288
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d02:	movs	r3, #20
  m_errorLine = line;
    7d04:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d06:	strb	r3, [r5, #0]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    7d08:	movs	r4, #0
    7d0a:	b.n	7be8 <SdioCard::begin(SdioConfig)+0x11c>
    7d0c:	.word	0x20016f18
    7d10:	.word	0x4000d800
    7d14:	.word	0x2001c918
    7d18:	.word	0x2001c900
    7d1c:	.word	0x40048030
    7d20:	.word	0x4004d000
    7d24:	.word	0x4004d008
    7d28:	.word	0x400b102c
    7d2c:	.word	0x4004d00c
    7d30:	.word	0x4004d010
    7d34:	.word	0x117f000b
    7d38:	.word	0x000070bd
    7d3c:	.word	0xe000e108
    7d40:	.word	0xe000e451
    7d44:	.word	0x081a0000
    7d48:	.word	0x40300000
    7d4c:	.word	0x400b1010
    7d50:	.word	0x371a0000
    7d54:	.word	0x2001c944
    7d58:	.word	0x29020000
    7d5c:	.word	0x000f4240
    7d60:	.word	0x2001c91c
    7d64:	.word	0x02090000
    7d68:	.word	0x031a0000
    7d6c:	.word	0x2001c920
    7d70:	.word	0x2001c92c
    7d74:	.word	0x09090000
    7d78:	.word	0x2001c904
    7d7c:	.word	0x0a090000
    7d80:	.word	0x071b0000
    7d84:	.word	0x2001c928
    7d88:	.word	0x4004d004
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    7d8c:	movs	r1, #2
    7d8e:	ldr	r0, [pc, #168]	; (7e38 <SdioCard::begin(SdioConfig)+0x36c>)
    7d90:	bl	7334 <cardCommand(unsigned long, unsigned long)>
    7d94:	mov	r4, r0
    7d96:	cmp	r0, #0
    7d98:	beq.n	7cfc <SdioCard::begin(SdioConfig)+0x230>
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    7d9a:	ldr	r3, [pc, #160]	; (7e3c <SdioCard::begin(SdioConfig)+0x370>)
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    7d9c:	ldr	r0, [pc, #160]	; (7e40 <SdioCard::begin(SdioConfig)+0x374>)
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    7d9e:	ldr	r2, [r3, #0]
    7da0:	bic.w	r2, r2, #6
    7da4:	str	r2, [r3, #0]
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    7da6:	ldr	r2, [r3, #0]

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    7da8:	mov.w	r5, #1048592	; 0x100010
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    7dac:	orr.w	r2, r2, #2
    7db0:	str	r2, [r3, #0]
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    7db2:	mov	r1, sp
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    7db4:	str	r5, [r0, #0]

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    7db6:	mvn.w	r0, #4278190080	; 0xff000000
    7dba:	bl	7a20 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    7dbe:	cbz	r0, 7dc8 <SdioCard::begin(SdioConfig)+0x2fc>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    7dc0:	ldrb.w	r3, [sp, #13]
    7dc4:	lsls	r3, r3, #30
    7dc6:	bmi.n	7e1a <SdioCard::begin(SdioConfig)+0x34e>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    kHzSdClk = 50000;
  } else {
    kHzSdClk = 25000;
    7dc8:	movw	r0, #25000	; 0x61a8
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    7dcc:	ldr.w	fp, [pc, #132]	; 7e54 <SdioCard::begin(SdioConfig)+0x388>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    7dd0:	ldr.w	sl, [pc, #132]	; 7e58 <SdioCard::begin(SdioConfig)+0x38c>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    7dd4:	ldr.w	r9, [pc, #132]	; 7e5c <SdioCard::begin(SdioConfig)+0x390>
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    7dd8:	ldr	r7, [pc, #104]	; (7e44 <SdioCard::begin(SdioConfig)+0x378>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    7dda:	ldr	r6, [pc, #108]	; (7e48 <SdioCard::begin(SdioConfig)+0x37c>)
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    7ddc:	ldr	r5, [pc, #108]	; (7e4c <SdioCard::begin(SdioConfig)+0x380>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    7dde:	movw	r3, #259	; 0x103
    7de2:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    7de6:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    7dea:	str.w	r3, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    7dee:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    7df0:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    7df2:	str	r3, [r5, #0]
  }
  // Disable GPIO.
  enableGPIO(false);

  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);
    7df4:	bl	7160 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    7df8:	movw	r3, #1091	; 0x443
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    7dfc:	mov.w	r1, #1088	; 0x440
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    7e00:	movs	r2, #1
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    7e02:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    7e06:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    7e0a:	str.w	r1, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    7e0e:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    7e10:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    7e12:	str	r3, [r5, #0]
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    7e14:	strb.w	r2, [r8]
  return true;
    7e18:	b.n	7be8 <SdioCard::begin(SdioConfig)+0x11c>

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    7e1a:	mov	r1, sp
    7e1c:	ldr	r0, [pc, #48]	; (7e50 <SdioCard::begin(SdioConfig)+0x384>)
    7e1e:	bl	7a20 <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    7e22:	cmp	r0, #0
    7e24:	beq.n	7dc8 <SdioCard::begin(SdioConfig)+0x2fc>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    7e26:	ldrb.w	r3, [sp, #16]
    7e2a:	and.w	r3, r3, #15
    7e2e:	cmp	r3, #1
    7e30:	bne.n	7dc8 <SdioCard::begin(SdioConfig)+0x2fc>
    kHzSdClk = 50000;
    7e32:	movw	r0, #50000	; 0xc350
    7e36:	b.n	7dcc <SdioCard::begin(SdioConfig)+0x300>
    7e38:	.word	0x061a0000
    7e3c:	.word	0x400b1028
    7e40:	.word	0x400b1044
    7e44:	.word	0x4004d00c
    7e48:	.word	0x4004d010
    7e4c:	.word	0x4004d014
    7e50:	.word	0x80fffff1
    7e54:	.word	0x4004d000
    7e58:	.word	0x4004d004
    7e5c:	.word	0x4004d008

00007e60 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    7e60:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    7e62:	ldr	r3, [pc, #160]	; (7f04 <SdioCard::readData(unsigned char*)+0xa4>)
    7e64:	ldr	r3, [r3, #0]
    7e66:	lsls	r0, r3, #22
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    7e68:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    7e6a:	bmi.n	7e8a <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7e6c:	ldr	r3, [pc, #152]	; (7f08 <SdioCard::readData(unsigned char*)+0xa8>)
    7e6e:	ldr	r2, [r3, #0]
    7e70:	bic.w	r2, r2, #65536	; 0x10000
    7e74:	str	r2, [r3, #0]
    noInterrupts();
    7e76:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    7e78:	ldr	r2, [r3, #0]
    7e7a:	orr.w	r2, r2, #131072	; 0x20000
    7e7e:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    7e80:	ldr	r2, [r3, #0]
    7e82:	orr.w	r2, r2, #65536	; 0x10000
    7e86:	str	r2, [r3, #0]
    interrupts();
    7e88:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    7e8a:	ldr	r0, [pc, #128]	; (7f0c <SdioCard::readData(unsigned char*)+0xac>)
    7e8c:	bl	7290 <waitTimeout(bool (*)())>
    7e90:	cmp	r0, #0
    7e92:	bne.n	7ef2 <SdioCard::readData(unsigned char*)+0x92>
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    7e94:	ldr	r4, [pc, #108]	; (7f04 <SdioCard::readData(unsigned char*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    7e96:	ldr	r0, [pc, #120]	; (7f10 <SdioCard::readData(unsigned char*)+0xb0>)
    7e98:	subs	r3, r5, #4
    7e9a:	add.w	r5, r5, #508	; 0x1fc
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    7e9e:	ldr	r2, [r4, #0]
    7ea0:	lsls	r1, r2, #20
    7ea2:	bpl.n	7e9e <SdioCard::readData(unsigned char*)+0x3e>
    7ea4:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    7ea8:	ldr	r2, [r0, #0]
    7eaa:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    7eae:	cmp	r1, r3
    7eb0:	bne.n	7ea8 <SdioCard::readData(unsigned char*)+0x48>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    7eb2:	cmp	r5, r1
    7eb4:	mov	r3, r1
    7eb6:	bne.n	7e9e <SdioCard::readData(unsigned char*)+0x3e>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    7eb8:	ldr	r0, [pc, #88]	; (7f14 <SdioCard::readData(unsigned char*)+0xb4>)
    7eba:	bl	7290 <waitTimeout(bool (*)())>
    7ebe:	cbnz	r0, 7ee0 <SdioCard::readData(unsigned char*)+0x80>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    7ec0:	ldr	r2, [pc, #84]	; (7f18 <SdioCard::readData(unsigned char*)+0xb8>)
    7ec2:	ldr	r3, [pc, #88]	; (7f1c <SdioCard::readData(unsigned char*)+0xbc>)
    7ec4:	ldr	r1, [r2, #0]
    7ec6:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    7ec8:	ldr	r1, [r3, #0]
    7eca:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    7ecc:	ldr	r2, [r3, #0]
    7ece:	lsls	r2, r2, #30
    7ed0:	bpl.n	7f02 <SdioCard::readData(unsigned char*)+0xa2>
    7ed2:	ldr	r3, [r3, #0]
    7ed4:	ldr	r0, [pc, #72]	; (7f20 <SdioCard::readData(unsigned char*)+0xc0>)
    7ed6:	ands	r0, r3
    7ed8:	clz	r0, r0
    7edc:	lsrs	r0, r0, #5
    7ede:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ee0:	ldr	r1, [pc, #64]	; (7f24 <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    7ee2:	ldr	r3, [pc, #68]	; (7f28 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ee4:	movs	r0, #29
  m_errorLine = line;
    7ee6:	movw	r2, #759	; 0x2f7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7eea:	strb	r0, [r1, #0]
  m_errorLine = line;
    7eec:	str	r2, [r3, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    7eee:	movs	r0, #0
    7ef0:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ef2:	ldr	r1, [pc, #48]	; (7f24 <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    7ef4:	ldr	r3, [pc, #48]	; (7f28 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ef6:	movs	r0, #26
  m_errorLine = line;
    7ef8:	mov.w	r2, #748	; 0x2ec
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7efc:	strb	r0, [r1, #0]
  m_errorLine = line;
    7efe:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    7f00:	movs	r0, #0
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    7f02:	pop	{r3, r4, r5, pc}
    7f04:	.word	0x400b1024
    7f08:	.word	0x400b1028
    7f0c:	.word	0x00007121
    7f10:	.word	0x400b1020
    7f14:	.word	0x00007149
    7f18:	.word	0x400b1030
    7f1c:	.word	0x2001c924
    7f20:	.word	0x117f0000
    7f24:	.word	0x20016f18
    7f28:	.word	0x2001c944

00007f2c <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    7f2c:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    7f2e:	ldr	r0, [pc, #80]	; (7f80 <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    7f30:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    7f32:	bl	72b8 <yieldTimeout(bool (*)())>
    7f36:	cbnz	r0, 7f6c <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    7f38:	ldr	r2, [pc, #72]	; (7f84 <SdioCard::readStart(unsigned long)+0x58>)
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7f3a:	ldr	r1, [pc, #76]	; (7f88 <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    7f3c:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    7f3e:	ldr	r0, [pc, #76]	; (7f8c <SdioCard::readStart(unsigned long)+0x60>)
    7f40:	ldr	r5, [pc, #76]	; (7f90 <SdioCard::readStart(unsigned long)+0x64>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    7f42:	orr.w	r3, r3, #65536	; 0x10000
    7f46:	str	r3, [r2, #0]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7f48:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    7f4a:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7f4c:	cbnz	r3, 7f68 <SdioCard::readStart(unsigned long)+0x3c>
    7f4e:	lsls	r1, r4, #9
    7f50:	ldr	r0, [pc, #64]	; (7f94 <SdioCard::readStart(unsigned long)+0x68>)
    7f52:	bl	7334 <cardCommand(unsigned long, unsigned long)>
    7f56:	cbnz	r0, 7f66 <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f58:	ldr	r1, [pc, #60]	; (7f98 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    7f5a:	ldr	r3, [pc, #64]	; (7f9c <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f5c:	movs	r4, #12
  m_errorLine = line;
    7f5e:	mov.w	r2, #848	; 0x350
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f62:	strb	r4, [r1, #0]
  m_errorLine = line;
    7f64:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    7f66:	pop	{r3, r4, r5, pc}
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7f68:	mov	r1, r4
    7f6a:	b.n	7f50 <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f6c:	ldr	r1, [pc, #40]	; (7f98 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    7f6e:	ldr	r3, [pc, #44]	; (7f9c <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f70:	movs	r0, #10
  m_errorLine = line;
    7f72:	mov.w	r2, #836	; 0x344
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f76:	strb	r0, [r1, #0]
  m_errorLine = line;
    7f78:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7f7a:	movs	r0, #0
    7f7c:	pop	{r3, r4, r5, pc}
    7f7e:	nop
    7f80:	.word	0x00007415
    7f84:	.word	0x400b1028
    7f88:	.word	0x2001c918
    7f8c:	.word	0x400b1004
    7f90:	.word	0xffff0200
    7f94:	.word	0x123a0032
    7f98:	.word	0x20016f18
    7f9c:	.word	0x2001c944

00007fa0 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    7fa0:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    7fa2:	ldrb	r3, [r0, #8]
    7fa4:	lsls	r4, r3, #31
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    7fa6:	sub.w	sp, sp, #512	; 0x200
    7faa:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    7fac:	bpl.n	7fd4 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    7fae:	lsls	r3, r2, #30
    7fb0:	beq.n	7ff2 <SdioCard::readSector(unsigned long, unsigned char*)+0x52>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    7fb2:	mov	r2, sp
    7fb4:	movs	r3, #1
    7fb6:	ldr	r0, [pc, #168]	; (8060 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    7fb8:	bl	747c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    7fbc:	cbz	r0, 7ffe <SdioCard::readSector(unsigned long, unsigned char*)+0x5e>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    7fbe:	mov	r1, sp
    7fc0:	mov	r0, r5
    7fc2:	mov.w	r2, #512	; 0x200
    7fc6:	bl	81f4 <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    7fca:	movs	r5, #1
}
    7fcc:	mov	r0, r5
    7fce:	add.w	sp, sp, #512	; 0x200
    7fd2:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    7fd4:	ldrb	r3, [r0, #9]
    7fd6:	cmp	r3, #1
    7fd8:	mov	r4, r0
    7fda:	mov	r6, r1
    7fdc:	beq.n	8016 <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
      if (!syncDevice()) {
    7fde:	ldr	r3, [r4, #0]
    7fe0:	mov	r0, r4
    7fe2:	ldr	r3, [r3, #20]
    7fe4:	blx	r3
    7fe6:	cbnz	r0, 803c <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
        return false;
    7fe8:	movs	r5, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    7fea:	mov	r0, r5
    7fec:	add.w	sp, sp, #512	; 0x200
    7ff0:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    7ff2:	movs	r3, #1
    7ff4:	ldr	r0, [pc, #104]	; (8060 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    7ff6:	bl	747c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    7ffa:	cmp	r0, #0
    7ffc:	bne.n	7fca <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ffe:	ldr	r1, [pc, #100]	; (8064 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>)
  m_errorLine = line;
    8000:	ldr	r3, [pc, #100]	; (8068 <SdioCard::readSector(unsigned long, unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8002:	movs	r0, #11
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    8004:	movs	r5, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8006:	movw	r2, #778	; 0x30a
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    800a:	strb	r0, [r1, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    800c:	mov	r0, r5
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    800e:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    8010:	add.w	sp, sp, #512	; 0x200
    8014:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    8016:	ldr	r3, [r0, #4]
    8018:	cmp	r1, r3
    801a:	bne.n	7fde <SdioCard::readSector(unsigned long, unsigned char*)+0x3e>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    }
    if (!readData(dst)) {
    801c:	mov	r1, r5
    801e:	mov	r0, r4
    8020:	bl	7e60 <SdioCard::readData(unsigned char*)>
    8024:	mov	r5, r0
    8026:	cmp	r0, #0
    8028:	beq.n	7fe8 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    802a:	ldr	r3, [pc, #64]	; (806c <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>)
    802c:	ldr	r3, [r3, #0]
    802e:	lsrs	r3, r3, #16
    8030:	lsls	r3, r3, #16
    8032:	cbz	r3, 8050 <SdioCard::readSector(unsigned long, unsigned char*)+0xb0>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    8034:	ldr	r3, [r4, #4]
    8036:	adds	r3, #1
    8038:	str	r3, [r4, #4]
    803a:	b.n	7fea <SdioCard::readSector(unsigned long, unsigned char*)+0x4a>
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    803c:	mov	r1, r6
    803e:	mov	r0, r4
    8040:	bl	7f2c <SdioCard::readStart(unsigned long)>
    8044:	cmp	r0, #0
    8046:	beq.n	7fe8 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    8048:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    804a:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    804c:	strb	r3, [r4, #9]
    804e:	b.n	801c <SdioCard::readSector(unsigned long, unsigned char*)+0x7c>
    if (!readData(dst)) {
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
      if (!syncDevice()) {
    8050:	ldr	r3, [r4, #0]
    8052:	mov	r0, r4
    8054:	ldr	r3, [r3, #20]
    8056:	blx	r3
    8058:	cmp	r0, #0
    805a:	bne.n	8034 <SdioCard::readSector(unsigned long, unsigned char*)+0x94>
    805c:	b.n	7fe8 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
    805e:	nop
    8060:	.word	0x113a0011
    8064:	.word	0x20016f18
    8068:	.word	0x2001c944
    806c:	.word	0x400b1004

00008070 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    8070:	push	{r4}
  m_spi->beginTransaction(m_spiSettings);
    8072:	ldr	r3, [r0, #0]
    8074:	ldr	r2, [r0, #4]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    8076:	ldrb	r1, [r3, #11]
    8078:	cbz	r1, 80ba <SdSpiArduinoDriver::activate()+0x4a>
			__disable_irq();
    807a:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    807c:	ldrb	r1, [r3, #11]
    807e:	lsls	r0, r1, #31
    8080:	bpl.n	8090 <SdSpiArduinoDriver::activate()+0x20>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    8082:	ldr	r0, [pc, #100]	; (80e8 <SdSpiArduinoDriver::activate()+0x78>)
    8084:	ldr	r1, [r3, #12]
    8086:	ldr	r4, [r0, #0]
    8088:	ands	r1, r4
    808a:	str	r1, [r3, #28]
				NVIC_ICER0 = interruptSave[0];
    808c:	str	r1, [r0, #0]
    808e:	ldrb	r1, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    8090:	lsls	r4, r1, #30
    8092:	bpl.n	80a2 <SdSpiArduinoDriver::activate()+0x32>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    8094:	ldr	r0, [pc, #84]	; (80ec <SdSpiArduinoDriver::activate()+0x7c>)
    8096:	ldr	r1, [r3, #16]
    8098:	ldr	r4, [r0, #0]
    809a:	ands	r1, r4
    809c:	str	r1, [r3, #32]
				NVIC_ICER1 = interruptSave[1];
    809e:	str	r1, [r0, #0]
    80a0:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    80a2:	lsls	r0, r1, #29
    80a4:	bpl.n	80b4 <SdSpiArduinoDriver::activate()+0x44>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    80a6:	ldr	r0, [pc, #72]	; (80f0 <SdSpiArduinoDriver::activate()+0x80>)
    80a8:	ldr	r1, [r3, #20]
    80aa:	ldr	r4, [r0, #0]
    80ac:	ands	r1, r4
    80ae:	str	r1, [r3, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    80b0:	str	r1, [r0, #0]
    80b2:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    80b4:	lsls	r1, r1, #28
    80b6:	bmi.n	80d8 <SdSpiArduinoDriver::activate()+0x68>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    80b8:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    80ba:	ldr	r3, [r3, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    80bc:	ldr	r1, [r3, #12]
    80be:	cmp	r1, r2
    80c0:	beq.n	80d2 <SdSpiArduinoDriver::activate()+0x62>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    80c2:	ldr	r0, [pc, #48]	; (80f4 <SdSpiArduinoDriver::activate()+0x84>)
    80c4:	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    80c6:	ldr	r1, [pc, #48]	; (80f8 <SdSpiArduinoDriver::activate()+0x88>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    80c8:	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    80ca:	orr.w	r0, r2, #1073741824	; 0x40000000
    80ce:	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    80d0:	str	r1, [r3, #0]
}
    80d2:	ldr.w	r4, [sp], #4
    80d6:	bx	lr
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    80d8:	ldr	r0, [pc, #32]	; (80fc <SdSpiArduinoDriver::activate()+0x8c>)
    80da:	ldr	r1, [r3, #24]
    80dc:	ldr	r4, [r0, #0]
    80de:	ands	r1, r4
    80e0:	str	r1, [r3, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    80e2:	str	r1, [r0, #0]
    80e4:	b.n	80b8 <SdSpiArduinoDriver::activate()+0x48>
    80e6:	nop
    80e8:	.word	0xe000e180
    80ec:	.word	0xe000e184
    80f0:	.word	0xe000e188
    80f4:	.word	0x003f4001
    80f8:	.word	0x803f0000
    80fc:	.word	0xe000e18c

00008100 <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    8100:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    8102:	ldrb	r3, [r2, #11]
    8104:	cbz	r3, 8134 <SdSpiArduinoDriver::deactivate()+0x34>
			if (interruptMasksUsed & 0x01) {
    8106:	lsls	r1, r3, #31
    8108:	bpl.n	8112 <SdSpiArduinoDriver::deactivate()+0x12>
				NVIC_ISER0 = interruptSave[0];
    810a:	ldr	r3, [pc, #44]	; (8138 <SdSpiArduinoDriver::deactivate()+0x38>)
    810c:	ldr	r1, [r2, #28]
    810e:	str	r1, [r3, #0]
    8110:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    8112:	lsls	r0, r3, #30
    8114:	bpl.n	811e <SdSpiArduinoDriver::deactivate()+0x1e>
				NVIC_ISER1 = interruptSave[1];
    8116:	ldr	r3, [pc, #36]	; (813c <SdSpiArduinoDriver::deactivate()+0x3c>)
    8118:	ldr	r1, [r2, #32]
    811a:	str	r1, [r3, #0]
    811c:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    811e:	lsls	r1, r3, #29
    8120:	bpl.n	812a <SdSpiArduinoDriver::deactivate()+0x2a>
				NVIC_ISER2 = interruptSave[2];
    8122:	ldr	r3, [pc, #28]	; (8140 <SdSpiArduinoDriver::deactivate()+0x40>)
    8124:	ldr	r1, [r2, #36]	; 0x24
    8126:	str	r1, [r3, #0]
    8128:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    812a:	lsls	r3, r3, #28
    812c:	bpl.n	8134 <SdSpiArduinoDriver::deactivate()+0x34>
				NVIC_ISER3 = interruptSave[3];
    812e:	ldr	r3, [pc, #20]	; (8144 <SdSpiArduinoDriver::deactivate()+0x44>)
    8130:	ldr	r2, [r2, #40]	; 0x28
    8132:	str	r2, [r3, #0]
    8134:	bx	lr
    8136:	nop
    8138:	.word	0xe000e100
    813c:	.word	0xe000e104
    8140:	.word	0xe000e108
    8144:	.word	0xe000e10c

00008148 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
    8148:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    814a:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    814c:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    8150:	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8152:	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data;
    8154:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    8156:	ldr	r3, [r2, #44]	; 0x2c
    8158:	cmp	r3, #0
    815a:	bge.n	8156 <SdSpiArduinoDriver::receive()+0xe>
		return port().POPR;
    815c:	ldr	r0, [r2, #56]	; 0x38
  return m_spi->transfer(0XFF);
}
    815e:	uxtb	r0, r0
    8160:	bx	lr
    8162:	nop

00008164 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    8164:	push	{r4, r5, r6, lr}
    8166:	mov	r5, r0
    8168:	mov	r4, r1
    816a:	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    816c:	mov	r0, r1
    816e:	movs	r1, #255	; 0xff
    8170:	bl	c10c <memset>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    8174:	ldr	r0, [r5, #0]
    8176:	mov	r3, r6
    8178:	mov	r2, r4
    817a:	mov	r1, r4
    817c:	bl	2644 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    8180:	movs	r0, #0
    8182:	pop	{r4, r5, r6, pc}

00008184 <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
    8184:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    8186:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8188:	mov.w	r3, #2147483648	; 0x80000000
    818c:	str	r3, [r2, #44]	; 0x2c
		port().PUSHR = data;
    818e:	str	r1, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    8190:	ldr	r3, [r2, #44]	; 0x2c
    8192:	cmp	r3, #0
    8194:	bge.n	8190 <SdSpiArduinoDriver::send(unsigned char)+0xc>
		return port().POPR;
    8196:	ldr	r3, [r2, #56]	; 0x38
    8198:	bx	lr
    819a:	nop

0000819c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    819c:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    819e:	subs	r5, r2, #1
    81a0:	cmp.w	r5, #512	; 0x200
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    81a4:	sub.w	sp, sp, #516	; 0x204
    81a8:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    81aa:	bcc.n	81d2 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    81ac:	cbz	r2, 81cc <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
    81ae:	ldr	r2, [r0, #0]
    81b0:	ldr	r2, [r2, #0]
    81b2:	adds	r0, r1, r3
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    81b4:	mov.w	r4, #2147483648	; 0x80000000
    m_spi->transfer(buf[i]);
    81b8:	ldrb.w	r3, [r1], #1
    81bc:	str	r4, [r2, #44]	; 0x2c
		port().PUSHR = data;
    81be:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    81c0:	ldr	r3, [r2, #44]	; 0x2c
    81c2:	cmp	r3, #0
    81c4:	bge.n	81c0 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x24>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    81c6:	cmp	r1, r0
		return port().POPR;
    81c8:	ldr	r3, [r2, #56]	; 0x38
    81ca:	bne.n	81b8 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    81cc:	add.w	sp, sp, #516	; 0x204
    81d0:	pop	{r4, r5, pc}
    81d2:	mov	r5, r0
    81d4:	mov	r4, r2
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    81d6:	mov	r0, sp
    81d8:	bl	81f4 <memcpy>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    81dc:	mov	r3, r4
    81de:	mov	r2, sp
    81e0:	mov	r1, sp
    81e2:	ldr	r0, [r5, #0]
    81e4:	bl	2644 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    81e8:	add.w	sp, sp, #516	; 0x204
    81ec:	pop	{r4, r5, pc}
    81ee:	nop

000081f0 <sdCsWrite(unsigned char, bool)>:
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
__attribute__((weak))
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    81f0:	b.w	8870 <digitalWrite>

000081f4 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    81f4:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    81f6:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    81fa:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    81fe:	bne.n	82dc <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8200:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    8202:	bcc.n	8288 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8204:	ldr.w	r3, [r1], #4
    8208:	str.w	r3, [r0], #4
    820c:	ldr.w	r3, [r1], #4
    8210:	str.w	r3, [r0], #4
    8214:	ldr.w	r3, [r1], #4
    8218:	str.w	r3, [r0], #4
    821c:	ldr.w	r3, [r1], #4
    8220:	str.w	r3, [r0], #4
    8224:	ldr.w	r3, [r1], #4
    8228:	str.w	r3, [r0], #4
    822c:	ldr.w	r3, [r1], #4
    8230:	str.w	r3, [r0], #4
    8234:	ldr.w	r3, [r1], #4
    8238:	str.w	r3, [r0], #4
    823c:	ldr.w	r3, [r1], #4
    8240:	str.w	r3, [r0], #4
    8244:	ldr.w	r3, [r1], #4
    8248:	str.w	r3, [r0], #4
    824c:	ldr.w	r3, [r1], #4
    8250:	str.w	r3, [r0], #4
    8254:	ldr.w	r3, [r1], #4
    8258:	str.w	r3, [r0], #4
    825c:	ldr.w	r3, [r1], #4
    8260:	str.w	r3, [r0], #4
    8264:	ldr.w	r3, [r1], #4
    8268:	str.w	r3, [r0], #4
    826c:	ldr.w	r3, [r1], #4
    8270:	str.w	r3, [r0], #4
    8274:	ldr.w	r3, [r1], #4
    8278:	str.w	r3, [r0], #4
    827c:	ldr.w	r3, [r1], #4
    8280:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8284:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    8286:	bcs.n	8204 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    8288:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    828a:	bcc.n	82b0 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    828c:	ldr.w	r3, [r1], #4
    8290:	str.w	r3, [r0], #4
    8294:	ldr.w	r3, [r1], #4
    8298:	str.w	r3, [r0], #4
    829c:	ldr.w	r3, [r1], #4
    82a0:	str.w	r3, [r0], #4
    82a4:	ldr.w	r3, [r1], #4
    82a8:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    82ac:	subs	r2, #16
	bhs	.Lmid_block_loop
    82ae:	bcs.n	828c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    82b0:	adds	r2, #12
	blo	.Lcopy_less_than_4
    82b2:	bcc.n	82c0 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    82b4:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    82b8:	str.w	r3, [r0], #4
	subs	r2, #4
    82bc:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    82be:	bcs.n	82b4 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    82c0:	adds	r2, #4
	beq	.Ldone
    82c2:	beq.n	82d6 <memcpy+0xe2>

	lsls	r2, r2, #31
    82c4:	lsls	r2, r2, #31
	itt ne
    82c6:	itt	ne
	ldrbne  r3, [r1], #1
    82c8:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    82cc:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    82d0:	bcc.n	82d6 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    82d2:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    82d4:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    82d6:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    82d8:	bx	lr
    82da:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    82dc:	cmp	r2, #8
	blo	.Lbyte_copy
    82de:	bcc.n	8308 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    82e0:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    82e2:	beq.n	8200 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    82e4:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    82e8:	beq.n	8200 <memcpy+0xc>

	rsb	r3, #4
    82ea:	rsb	r3, r3, #4
	subs	r2, r3
    82ee:	subs	r2, r2, r3

	lsls    r3, r3, #31
    82f0:	lsls	r3, r3, #31
	itt ne
    82f2:	itt	ne
	ldrbne  r3, [r1], #1
    82f4:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    82f8:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    82fc:	bcc.n	8200 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    82fe:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    8302:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    8306:	b.n	8200 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    8308:	subs	r2, #4
	blo	.Lcopy_less_than_4
    830a:	bcc.n	82c0 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    830c:	subs	r2, #1
	ldrb    r3, [r1], #1
    830e:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    8312:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    8316:	bcs.n	830c <memcpy+0x118>

	ldrb	r3, [r1]
    8318:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    831a:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    831c:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    831e:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    8320:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    8322:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    8324:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    8326:	bx	lr

00008328 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    8328:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    832a:	ldr	r5, [pc, #60]	; (8368 <usb_serial_getchar+0x40>)
    832c:	ldr	r0, [r5, #0]
    832e:	cbz	r0, 8350 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    8330:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    8332:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    8334:	adds	r1, r0, r3
    8336:	adds	r3, #1
	if (i >= rx_packet->len) {
    8338:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    833a:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    833c:	bcs.n	8344 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    833e:	strh	r3, [r0, #2]
	}
	return c;
    8340:	mov	r0, r4
}
    8342:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    8344:	bl	8b30 <usb_free>
		rx_packet = NULL;
    8348:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    834a:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    834c:	str	r3, [r5, #0]
    834e:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    8350:	ldr	r3, [pc, #24]	; (836c <usb_serial_getchar+0x44>)
    8352:	ldrb	r3, [r3, #0]
    8354:	cbz	r3, 8362 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    8356:	movs	r0, #3
    8358:	bl	8b7c <usb_rx>
    835c:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    835e:	cmp	r0, #0
    8360:	bne.n	8330 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    8362:	mov.w	r0, #4294967295
    8366:	pop	{r3, r4, r5, pc}
    8368:	.word	0x2001c954
    836c:	.word	0x2001ca40

00008370 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    8370:	push	{r4, lr}
	if (!rx_packet) {
    8372:	ldr	r4, [pc, #36]	; (8398 <usb_serial_peekchar+0x28>)
    8374:	ldr	r0, [r4, #0]
    8376:	cbz	r0, 8380 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    8378:	ldrh	r3, [r0, #2]
    837a:	add	r0, r3
    837c:	ldrb	r0, [r0, #8]
}
    837e:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    8380:	ldr	r3, [pc, #24]	; (839c <usb_serial_peekchar+0x2c>)
    8382:	ldrb	r3, [r3, #0]
    8384:	cbz	r3, 8392 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    8386:	movs	r0, #3
    8388:	bl	8b7c <usb_rx>
    838c:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    838e:	cmp	r0, #0
    8390:	bne.n	8378 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    8392:	mov.w	r0, #4294967295
    8396:	pop	{r4, pc}
    8398:	.word	0x2001c954
    839c:	.word	0x2001ca40

000083a0 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    83a0:	ldr	r3, [pc, #16]	; (83b4 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    83a2:	ldr	r2, [pc, #20]	; (83b8 <usb_serial_available+0x18>)
    83a4:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    83a6:	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    83a8:	cbz	r3, 83b2 <usb_serial_available+0x12>
    83aa:	ldrh	r2, [r3, #0]
    83ac:	ldrh	r3, [r3, #2]
    83ae:	subs	r3, r2, r3
    83b0:	add	r0, r3
	return count;
}
    83b2:	bx	lr
    83b4:	.word	0x2001c954
    83b8:	.word	0x2001ce34

000083bc <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    83bc:	ldr	r3, [pc, #44]	; (83ec <usb_serial_flush_input+0x30>)
    83be:	ldrb	r3, [r3, #0]
    83c0:	cbz	r3, 83ea <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    83c2:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    83c4:	ldr	r4, [pc, #40]	; (83f0 <usb_serial_flush_input+0x34>)
    83c6:	ldr	r0, [r4, #0]
    83c8:	cbz	r0, 83de <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    83ca:	bl	8b30 <usb_free>
		rx_packet = NULL;
    83ce:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    83d0:	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    83d2:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    83d4:	bl	8b7c <usb_rx>
		if (!rx) break;
    83d8:	cbz	r0, 83e8 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    83da:	bl	8b30 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    83de:	movs	r0, #3
    83e0:	bl	8b7c <usb_rx>
		if (!rx) break;
    83e4:	cmp	r0, #0
    83e6:	bne.n	83da <usb_serial_flush_input+0x1e>
    83e8:	pop	{r4, pc}
    83ea:	bx	lr
    83ec:	.word	0x2001ca40
    83f0:	.word	0x2001c954

000083f4 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    83f4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    83f8:	ldr.w	r9, [pc, #248]	; 84f4 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    83fc:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    83fe:	movs	r2, #1
    8400:	strb.w	r2, [r9]
	while (size > 0) {
    8404:	str	r1, [sp, #4]
    8406:	cbz	r1, 8464 <usb_serial_write+0x70>
    8408:	ldr.w	r8, [pc, #236]	; 84f8 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    840c:	ldr	r7, [pc, #216]	; (84e8 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    840e:	ldr	r6, [sp, #4]
    8410:	mov	fp, r0
		if (!tx_packet) {
    8412:	ldr.w	r0, [r8]
    8416:	cbz	r0, 8486 <usb_serial_write+0x92>
    8418:	ldr	r5, [pc, #208]	; (84ec <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    841a:	ldrh	r4, [r0, #2]
    841c:	rsb	r1, r4, #64	; 0x40
    8420:	cmp	r1, r6
    8422:	it	cs
    8424:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    8426:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    842a:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    842c:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    8430:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    8432:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    8434:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    8438:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    843c:	cbz	r1, 8454 <usb_serial_write+0x60>
    843e:	subs	r4, #1
    8440:	add	r2, r4
    8442:	add	r1, fp
    8444:	ldrb.w	r4, [fp], #1
    8448:	strb.w	r4, [r2, #1]!
    844c:	cmp	fp, r1
    844e:	bne.n	8444 <usb_serial_write+0x50>
    8450:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    8454:	cmp.w	lr, #63	; 0x3f
    8458:	bhi.n	8472 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    845a:	ldr	r2, [pc, #148]	; (84f0 <usb_serial_write+0xfc>)
    845c:	movs	r1, #5
    845e:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    8460:	cmp	r6, #0
    8462:	bne.n	8412 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    8464:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    8466:	movs	r3, #0
    8468:	strb.w	r3, [r9]
	return ret;
}
    846c:	add	sp, #12
    846e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    8472:	movs	r2, #64	; 0x40
    8474:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    8476:	mov	r1, r0
    8478:	movs	r0, #4
    847a:	bl	8cac <usb_tx>
			tx_packet = NULL;
    847e:	movs	r2, #0
    8480:	str.w	r2, [r8]
    8484:	b.n	845a <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    8486:	ldrb	r2, [r7, #0]
    8488:	cbz	r2, 84d6 <usb_serial_write+0xe2>
    848a:	ldr	r5, [pc, #96]	; (84ec <usb_serial_write+0xf8>)
    848c:	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    8490:	mov.w	sl, #1
    8494:	b.n	84a6 <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    8496:	subs	r4, #1
    8498:	beq.n	84c8 <usb_serial_write+0xd4>
    849a:	ldrb	r2, [r5, #0]
    849c:	cbnz	r2, 84c8 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    849e:	bl	9bcc <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    84a2:	ldrb	r2, [r7, #0]
    84a4:	cbz	r2, 84d6 <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    84a6:	movs	r0, #4
    84a8:	bl	8bb8 <usb_tx_packet_count>
    84ac:	cmp	r0, #7
    84ae:	bhi.n	8496 <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    84b0:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    84b4:	bl	8af0 <usb_malloc>
    84b8:	str.w	r0, [r8]
					if (tx_packet) break;
    84bc:	cmp	r0, #0
    84be:	bne.n	841a <usb_serial_write+0x26>
					tx_noautoflush = 0;
    84c0:	ldr	r3, [pc, #48]	; (84f4 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    84c2:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    84c4:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    84c6:	bne.n	849a <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    84c8:	movs	r3, #1
					return -1;
    84ca:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    84ce:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    84d0:	add	sp, #12
    84d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    84d6:	movs	r3, #0
					return -1;
    84d8:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    84dc:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    84e0:	add	sp, #12
    84e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    84e6:	nop
    84e8:	.word	0x2001ca40
    84ec:	.word	0x2001c950
    84f0:	.word	0x2001c948
    84f4:	.word	0x2001c949
    84f8:	.word	0x2001c94c

000084fc <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    84fc:	push	{lr}
    84fe:	sub	sp, #12
    8500:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    8502:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    8504:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    8508:	mov	r0, r3
    850a:	bl	83f4 <usb_serial_write>
}
    850e:	add	sp, #12
    8510:	ldr.w	pc, [sp], #4

00008514 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    8514:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    8516:	ldr	r5, [pc, #56]	; (8550 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    8518:	ldr	r4, [pc, #56]	; (8554 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    851a:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    851c:	movs	r3, #1
    851e:	strb	r3, [r4, #0]
	if (!tx_packet) {
    8520:	cbz	r0, 852e <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    8522:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    8524:	movs	r3, #0
    8526:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    8528:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    852c:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    852e:	ldr	r3, [pc, #40]	; (8558 <usb_serial_write_buffer_free+0x44>)
    8530:	ldrb	r3, [r3, #0]
    8532:	cbnz	r3, 853a <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    8534:	movs	r0, #0
    8536:	strb	r0, [r4, #0]
			return 0;
    8538:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    853a:	movs	r0, #4
    853c:	bl	8bb8 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    8540:	cmp	r0, #7
    8542:	bhi.n	8534 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    8544:	bl	8af0 <usb_malloc>
    8548:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    854a:	cmp	r0, #0
    854c:	bne.n	8522 <usb_serial_write_buffer_free+0xe>
    854e:	b.n	8534 <usb_serial_write_buffer_free+0x20>
    8550:	.word	0x2001c94c
    8554:	.word	0x2001c949
    8558:	.word	0x2001ca40

0000855c <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    855c:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    855e:	ldr	r3, [pc, #68]	; (85a4 <usb_serial_flush_output+0x48>)
    8560:	ldrb	r3, [r3, #0]
    8562:	cbz	r3, 8588 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    8564:	ldr	r6, [pc, #64]	; (85a8 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    8566:	ldr	r5, [pc, #68]	; (85ac <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    8568:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    856a:	movs	r7, #1
    856c:	strb	r7, [r5, #0]
	if (tx_packet) {
    856e:	cbz	r4, 858a <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    8570:	ldr	r2, [pc, #60]	; (85b0 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    8572:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    8574:	movs	r7, #0
    8576:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    8578:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    857a:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    857c:	movs	r0, #4
    857e:	bl	8cac <usb_tx>
		tx_packet = NULL;
    8582:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    8584:	movs	r3, #0
    8586:	strb	r3, [r5, #0]
    8588:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    858a:	bl	8af0 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    858e:	ldr	r3, [pc, #32]	; (85b0 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    8590:	cbz	r0, 859e <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    8592:	mov	r1, r0
    8594:	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    8596:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    8598:	bl	8cac <usb_tx>
    859c:	b.n	8584 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    859e:	strb	r7, [r3, #0]
    85a0:	b.n	8584 <usb_serial_flush_output+0x28>
    85a2:	nop
    85a4:	.word	0x2001ca40
    85a8:	.word	0x2001c94c
    85ac:	.word	0x2001c949
    85b0:	.word	0x2001c948

000085b4 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    85b4:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    85b6:	ldr	r3, [pc, #56]	; (85f0 <usb_serial_flush_callback+0x3c>)
    85b8:	ldrb	r3, [r3, #0]
    85ba:	cbnz	r3, 85da <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    85bc:	ldr	r4, [pc, #52]	; (85f4 <usb_serial_flush_callback+0x40>)
    85be:	ldr	r1, [r4, #0]
    85c0:	cbz	r1, 85dc <usb_serial_flush_callback+0x28>
    85c2:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    85c6:	ldrh	r3, [r1, #2]
    85c8:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    85ca:	movs	r0, #4
    85cc:	bl	8cac <usb_tx>
		tx_packet = NULL;
    85d0:	str	r5, [r4, #0]
    85d2:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    85d4:	ldr	r3, [pc, #32]	; (85f8 <usb_serial_flush_callback+0x44>)
    85d6:	movs	r2, #1
    85d8:	strb	r2, [r3, #0]
    85da:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    85dc:	bl	8af0 <usb_malloc>
		if (tx) {
    85e0:	cmp	r0, #0
    85e2:	beq.n	85d4 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    85e4:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    85e6:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    85ea:	movs	r0, #4
    85ec:	b.w	8cac <usb_tx>
    85f0:	.word	0x2001c949
    85f4:	.word	0x2001c94c
    85f8:	.word	0x2001c948

000085fc <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    85fc:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    85fe:	ldr	r0, [pc, #164]	; (86a4 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    8600:	ldr	r2, [pc, #164]	; (86a8 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    8602:	ldr	r3, [pc, #168]	; (86ac <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8604:	ldr	r5, [pc, #168]	; (86b0 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    8606:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    8608:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    860a:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    860c:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    860e:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8610:	ldr	r4, [pc, #160]	; (86b4 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    8612:	cmp	r3, #8
    8614:	beq.n	8678 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    8616:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    8618:	ldr	r0, [pc, #156]	; (86b8 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    861a:	ldr	r1, [pc, #160]	; (86bc <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    861c:	beq.n	868e <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    861e:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    8620:	ite	eq
    8622:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    8624:	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    8626:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    8628:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    862a:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    862c:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    862e:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    8630:	ldr	r3, [pc, #140]	; (86c0 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    8632:	ldr	r1, [pc, #144]	; (86c4 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    8634:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    8636:	ldr	r2, [pc, #144]	; (86c8 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    8638:	cbz	r3, 866a <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    863a:	movs	r3, #1
    863c:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    863e:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    8640:	ldr	r3, [pc, #136]	; (86cc <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    8642:	ldr	r1, [pc, #140]	; (86d0 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    8644:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    8646:	ldr	r2, [pc, #140]	; (86d4 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    8648:	cmp	r3, #1
    864a:	bls.n	869a <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    864c:	cmp	r3, #4
    864e:	bls.n	8670 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    8650:	cmp	r3, #8
    8652:	bls.n	8692 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    8654:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    8656:	ite	ls
    8658:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    865a:	movhi	r3, #135	; 0x87
    865c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    865e:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    8660:	ldr	r3, [pc, #116]	; (86d8 <analog_init+0xdc>)
    8662:	movs	r2, #1
    8664:	strb	r2, [r3, #0]
}
    8666:	pop	{r4, r5}
    8668:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    866a:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    866c:	str	r3, [r2, #0]
    866e:	b.n	8640 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    8670:	movs	r3, #132	; 0x84
    8672:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    8674:	str	r3, [r2, #0]
    8676:	b.n	8660 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8678:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    867c:	ldr	r1, [pc, #60]	; (86bc <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    867e:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8680:	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8682:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    8684:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8686:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    8688:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    868a:	str	r3, [r1, #0]
    868c:	b.n	8630 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    868e:	movs	r2, #57	; 0x39
    8690:	b.n	8682 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    8692:	movs	r3, #133	; 0x85
    8694:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    8696:	str	r3, [r2, #0]
    8698:	b.n	8660 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    869a:	movs	r3, #128	; 0x80
    869c:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    869e:	str	r3, [r2, #0]
    86a0:	b.n	8660 <analog_init+0x64>
    86a2:	nop
    86a4:	.word	0x40074000
    86a8:	.word	0x40074001
    86ac:	.word	0x20016f19
    86b0:	.word	0x4003b008
    86b4:	.word	0x4003b00c
    86b8:	.word	0x400bb008
    86bc:	.word	0x400bb00c
    86c0:	.word	0x2001c95a
    86c4:	.word	0x4003b020
    86c8:	.word	0x400bb020
    86cc:	.word	0x20016f1a
    86d0:	.word	0x4003b024
    86d4:	.word	0x400bb024
    86d8:	.word	0x2001c959

000086dc <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    86dc:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    86de:	ldr	r4, [pc, #64]	; (8720 <fault_isr+0x44>)
    86e0:	b.n	86f4 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    86e2:	ldr	r3, [r4, #0]
    86e4:	lsls	r1, r3, #21
    86e6:	bmi.n	8704 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    86e8:	ldr	r3, [r4, #0]
    86ea:	lsls	r2, r3, #20
    86ec:	bmi.n	870e <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    86ee:	ldr	r3, [r4, #0]
    86f0:	lsls	r3, r3, #19
    86f2:	bmi.n	8718 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    86f4:	ldr	r3, [r4, #0]
    86f6:	lsls	r0, r3, #13
    86f8:	bpl.n	86e2 <fault_isr+0x6>
    86fa:	bl	8d30 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    86fe:	ldr	r3, [r4, #0]
    8700:	lsls	r1, r3, #21
    8702:	bpl.n	86e8 <fault_isr+0xc>
    8704:	bl	a534 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    8708:	ldr	r3, [r4, #0]
    870a:	lsls	r2, r3, #20
    870c:	bpl.n	86ee <fault_isr+0x12>
    870e:	bl	a310 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    8712:	ldr	r3, [r4, #0]
    8714:	lsls	r3, r3, #19
    8716:	bpl.n	86f4 <fault_isr+0x18>
    8718:	bl	a82c <uart2_status_isr>
    871c:	b.n	86f4 <fault_isr+0x18>
    871e:	nop
    8720:	.word	0x40048034

00008724 <unused_isr>:
	}
}

void unused_isr(void)
{
    8724:	push	{r3, lr}
	fault_isr();
    8726:	bl	86dc <fault_isr>
    872a:	nop

0000872c <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    872c:	ldr	r3, [pc, #4]	; (8734 <startup_early_hook+0x8>)
    872e:	movs	r2, #16
    8730:	strh	r2, [r3, #0]
    8732:	bx	lr
    8734:	.word	0x40052000

00008738 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    8738:	bx	lr
    873a:	nop

0000873c <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    873c:	ldr	r1, [pc, #36]	; (8764 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    873e:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    8740:	ldr	r3, [r1, #0]
	if (incr != 0) {
    8742:	cbz	r0, 8752 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    8744:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    8746:	add	r0, r3
    8748:	sub.w	r2, r2, #8192	; 0x2000
    874c:	cmp	r0, r2
    874e:	bcs.n	8756 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    8750:	str	r0, [r1, #0]
	}
	return prev;
    8752:	mov	r0, r3
}
    8754:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    8756:	bl	b8d0 <__errno>
    875a:	movs	r3, #12
    875c:	str	r3, [r0, #0]
			return (void *)-1;
    875e:	mov.w	r0, #4294967295
    8762:	pop	{r3, pc}
    8764:	.word	0x20016f1c

00008768 <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
    8768:	b.n	8768 <__cxa_pure_virtual>
    876a:	nop

0000876c <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    876c:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    876e:	ldr	r3, [pc, #68]	; (87b4 <digitalWrite.part.1+0x48>)
    8770:	ldr.w	r2, [r3, r0, lsl #3]
    8774:	ldrb.w	r4, [r2, #640]	; 0x280
    8778:	cbz	r4, 8788 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    877a:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    877c:	cbz	r1, 879e <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    877e:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    8782:	ldr.w	r4, [sp], #4
    8786:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    8788:	add.w	r3, r3, r0, lsl #3
    878c:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    878e:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    8790:	cbnz	r1, 87a8 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    8792:	bic.w	r2, r2, #2
    8796:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    8798:	ldr.w	r4, [sp], #4
    879c:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    879e:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    87a2:	ldr.w	r4, [sp], #4
    87a6:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    87a8:	orr.w	r2, r2, #3
    87ac:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    87ae:	ldr.w	r4, [sp], #4
    87b2:	bx	lr
    87b4:	.word	0x000134f4

000087b8 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    87b8:	ldr	r2, [pc, #112]	; (882c <pinMode.part.2+0x74>)
    87ba:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    87be:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    87c0:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    87c2:	beq.n	87e8 <pinMode.part.2+0x30>
    87c4:	cmp	r1, #4
    87c6:	beq.n	8800 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    87c8:	ldr.w	r0, [r2, r0, lsl #3]
    87cc:	movs	r2, #0
    87ce:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    87d2:	cbz	r1, 87e0 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    87d4:	cmp	r1, #2
    87d6:	beq.n	881a <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    87d8:	cmp	r1, #3
    87da:	beq.n	8822 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    87dc:	str	r2, [r3, #0]
    87de:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    87e0:	mov.w	r2, #256	; 0x100
    87e4:	str	r2, [r3, #0]
    87e6:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    87e8:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    87ec:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    87f0:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    87f4:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    87f6:	ldr	r2, [r3, #0]
    87f8:	bic.w	r2, r2, #32
    87fc:	str	r2, [r3, #0]
    87fe:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    8800:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    8804:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    8808:	movs	r0, #1
    880a:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    880e:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    8810:	ldr	r2, [r3, #0]
    8812:	orr.w	r2, r2, #32
    8816:	str	r2, [r3, #0]
    8818:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    881a:	movw	r2, #259	; 0x103
    881e:	str	r2, [r3, #0]
    8820:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    8822:	mov.w	r2, #258	; 0x102
    8826:	str	r2, [r3, #0]
    8828:	bx	lr
    882a:	nop
    882c:	.word	0x000134f4

00008830 <attachInterruptVector>:
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    8830:	adds	r0, #16
    8832:	ldr	r3, [pc, #8]	; (883c <attachInterruptVector+0xc>)
    8834:	str.w	r1, [r3, r0, lsl #2]
    8838:	bx	lr
    883a:	nop
    883c:	.word	0x20016800

00008840 <rtc_get>:

#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)

unsigned long rtc_get(void)
{
	return RTC_TSR;
    8840:	ldr	r3, [pc, #4]	; (8848 <rtc_get+0x8>)
    8842:	ldr	r0, [r3, #0]
}
    8844:	bx	lr
    8846:	nop
    8848:	.word	0x4003d000

0000884c <rtc_set>:

void rtc_set(unsigned long t)
{
    884c:	push	{r4, r5}
	RTC_SR = 0;
    884e:	ldr	r3, [pc, #20]	; (8864 <rtc_set+0x18>)
	RTC_TPR = 0;
    8850:	ldr	r5, [pc, #20]	; (8868 <rtc_set+0x1c>)
	RTC_TSR = t;
    8852:	ldr	r4, [pc, #24]	; (886c <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    8854:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    8856:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    8858:	str	r2, [r3, #0]
	RTC_TPR = 0;
    885a:	str	r2, [r5, #0]
	RTC_TSR = t;
    885c:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    885e:	str	r1, [r3, #0]
}
    8860:	pop	{r4, r5}
    8862:	bx	lr
    8864:	.word	0x4003d014
    8868:	.word	0x4003d004
    886c:	.word	0x4003d000

00008870 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    8870:	cmp	r0, #63	; 0x3f
    8872:	bhi.n	8878 <digitalWrite+0x8>
    8874:	b.w	876c <digitalWrite.part.1>
    8878:	bx	lr
    887a:	nop

0000887c <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    887c:	cmp	r0, #63	; 0x3f
    887e:	bhi.n	888e <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    8880:	ldr	r3, [pc, #16]	; (8894 <digitalRead+0x18>)
    8882:	ldr.w	r3, [r3, r0, lsl #3]
    8886:	ldrb.w	r0, [r3, #512]	; 0x200
    888a:	uxtb	r0, r0
    888c:	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    888e:	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    8890:	bx	lr
    8892:	nop
    8894:	.word	0x000134f4

00008898 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    8898:	cmp	r0, #63	; 0x3f
    889a:	bhi.n	88a0 <pinMode+0x8>
    889c:	b.w	87b8 <pinMode.part.2>
    88a0:	bx	lr
    88a2:	nop

000088a4 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    88a4:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    88a6:	ldr	r1, [pc, #48]	; (88d8 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    88a8:	ldr	r3, [pc, #48]	; (88dc <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    88aa:	ldr	r2, [pc, #52]	; (88e0 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    88ac:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    88ae:	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    88b0:	ldr	r2, [r2, #0]
	__enable_irq();
    88b2:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    88b4:	lsls	r2, r2, #5
    88b6:	bpl.n	88be <micros+0x1a>
    88b8:	cmp	r3, #50	; 0x32
    88ba:	it	hi
    88bc:	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    88be:	ldr	r1, [pc, #36]	; (88e4 <micros+0x40>)
    88c0:	rsb	r3, r3, #95744	; 0x17600
    88c4:	mov.w	r2, #1000	; 0x3e8
    88c8:	adds	r3, #255	; 0xff
    88ca:	umull	r1, r3, r1, r3
    88ce:	mul.w	r0, r2, r0
}
    88d2:	add.w	r0, r0, r3, lsr #6
    88d6:	bx	lr
    88d8:	.word	0x2001c95c
    88dc:	.word	0xe000e018
    88e0:	.word	0xe000ed04
    88e4:	.word	0xaaaaaaab

000088e8 <delay>:

void delay(uint32_t ms)
{
    88e8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    88ec:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    88ee:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    88f0:	ldr	r7, [pc, #128]	; (8974 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    88f2:	ldr	r3, [pc, #132]	; (8978 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    88f4:	ldr	r2, [pc, #132]	; (897c <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    88f6:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    88f8:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    88fa:	ldr	r2, [r2, #0]
	__enable_irq();
    88fc:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    88fe:	lsls	r2, r2, #5
    8900:	bpl.n	8908 <delay+0x20>
    8902:	cmp	r3, #50	; 0x32
    8904:	it	hi
    8906:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    8908:	cbz	r5, 8970 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    890a:	rsb	r3, r3, #95744	; 0x17600
    890e:	ldr	r6, [pc, #112]	; (8980 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    8910:	ldr.w	r9, [pc, #100]	; 8978 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    8914:	ldr.w	r8, [pc, #100]	; 897c <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    8918:	adds	r3, #255	; 0xff
    891a:	mov.w	r2, #1000	; 0x3e8
    891e:	umull	r1, r3, r6, r3
    8922:	mul.w	r4, r2, r4
    8926:	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    892a:	cpsid	i
	current = SYST_CVR;
    892c:	ldr.w	r1, [r9]
	count = systick_millis_count;
    8930:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    8932:	ldr.w	lr, [r8]
	__enable_irq();
    8936:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    8938:	rsb	r3, r1, #95744	; 0x17600
    893c:	adds	r3, #255	; 0xff
    893e:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    8942:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    8946:	rsb	r3, r4, r3, lsr #6
    894a:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    894e:	beq.n	8956 <delay+0x6e>
    8950:	cmp	r1, #50	; 0x32
    8952:	it	hi
    8954:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    8956:	mla	r3, r0, r2, r3
    895a:	cmp.w	r3, #1000	; 0x3e8
    895e:	bcc.n	896a <delay+0x82>
				ms--;
				if (ms == 0) return;
    8960:	subs	r5, #1
    8962:	beq.n	8970 <delay+0x88>
				start += 1000;
    8964:	add.w	r4, r4, #1000	; 0x3e8
    8968:	b.n	892a <delay+0x42>
			}
			yield();
    896a:	bl	9bcc <yield>
		}
    896e:	b.n	892a <delay+0x42>
    8970:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8974:	.word	0x2001c95c
    8978:	.word	0xe000e018
    897c:	.word	0xe000ed04
    8980:	.word	0xaaaaaaab

00008984 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    8984:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    8986:	ldr	r3, [pc, #312]	; (8ac0 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    8988:	ldr	r0, [pc, #312]	; (8ac4 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    898a:	ldr.w	ip, [pc, #348]	; 8ae8 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    898e:	ldr	r4, [pc, #312]	; (8ac8 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    8990:	ldr	r1, [pc, #312]	; (8acc <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    8992:	ldr.w	lr, [pc, #344]	; 8aec <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    8996:	ldr	r6, [pc, #312]	; (8ad0 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    8998:	ldr	r5, [pc, #312]	; (8ad4 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    899a:	ldr	r7, [pc, #316]	; (8ad8 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    899c:	mov.w	r2, #134217728	; 0x8000000
    89a0:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    89a2:	mov.w	r2, #268435456	; 0x10000000
    89a6:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    89a8:	mov.w	r2, #536870912	; 0x20000000
    89ac:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    89ae:	mov.w	r2, #1073741824	; 0x40000000
    89b2:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    89b4:	mov.w	r2, #2147483648	; 0x80000000
    89b8:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    89ba:	movs	r2, #0
    89bc:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    89be:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    89c0:	movw	r0, #49151	; 0xbfff
    89c4:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    89c8:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    89cc:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    89ce:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    89d2:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    89d4:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    89d6:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    89d8:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    89dc:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    89de:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    89e2:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    89e4:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    89e8:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    89ea:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    89ee:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    89f2:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    89f6:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    89fa:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    89fe:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    8a00:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    8a04:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    8a06:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    8a08:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    8a0a:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    8a0e:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    8a10:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    8a12:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    8a14:	ldr	r4, [pc, #196]	; (8adc <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    8a16:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    8a18:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    8a1a:	movs	r1, #9
    8a1c:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    8a1e:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    8a22:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    8a26:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    8a28:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    8a2a:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    8a2c:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    8a2e:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    8a30:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    8a32:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    8a36:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    8a3a:	add.w	r7, r7, #520192	; 0x7f000
    8a3e:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    8a40:	addw	r4, r4, #2044	; 0x7fc
    8a44:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    8a46:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    8a48:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    8a4a:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    8a4c:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    8a50:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    8a52:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    8a56:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    8a5a:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    8a5c:	sub.w	r4, r4, #460800	; 0x70800
    8a60:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    8a64:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    8a66:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    8a68:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    8a6c:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    8a6e:	ldr	r0, [pc, #112]	; (8ae0 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    8a70:	orr.w	r1, r1, #512	; 0x200
    8a74:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    8a76:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    8a78:	ldr	r4, [pc, #104]	; (8ae4 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    8a7a:	add.w	lr, lr, #65280	; 0xff00
    8a7e:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    8a82:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    8a86:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    8a8a:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    8a8e:	orr.w	r1, r1, #33554432	; 0x2000000
    8a92:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    8a94:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    8a98:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    8a9c:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    8a9e:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    8aa0:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    8aa2:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    8aa4:	str	r2, [r4, #0]
#endif
	analog_init();
    8aa6:	bl	85fc <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    8aaa:	movs	r0, #25
    8aac:	bl	88e8 <delay>
	usb_init();
    8ab0:	bl	97fc <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    8ab4:	movw	r0, #275	; 0x113
}
    8ab8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    8abc:	b.w	88e8 <delay>
    8ac0:	.word	0xe000e104
    8ac4:	.word	0x40038004
    8ac8:	.word	0x40038014
    8acc:	.word	0x4003801c
    8ad0:	.word	0x40038024
    8ad4:	.word	0x4003802c
    8ad8:	.word	0x40038034
    8adc:	.word	0x40038000
    8ae0:	.word	0x40048004
    8ae4:	.word	0x400c9000
    8ae8:	.word	0x40038008
    8aec:	.word	0x4003800c

00008af0 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    8af0:	cpsid	i
	avail = usb_buffer_available;
    8af2:	ldr	r0, [pc, #52]	; (8b28 <usb_malloc+0x38>)
    8af4:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    8af6:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    8afa:	cmp	r3, #11
    8afc:	bgt.n	8b20 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    8afe:	mov.w	r1, #2147483648	; 0x80000000
    8b02:	lsrs	r1, r3
    8b04:	bic.w	r2, r2, r1
    8b08:	str	r2, [r0, #0]
	__enable_irq();
    8b0a:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    8b0c:	ldr	r0, [pc, #28]	; (8b2c <usb_malloc+0x3c>)
    8b0e:	add.w	r3, r3, r3, lsl #3
    8b12:	lsls	r3, r3, #3
    8b14:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    8b16:	movs	r1, #0
    8b18:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    8b1a:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    8b1c:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    8b1e:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    8b20:	cpsie	i
		return NULL;
    8b22:	movs	r0, #0
    8b24:	bx	lr
    8b26:	nop
    8b28:	.word	0x20016f20
    8b2c:	.word	0x200169d0

00008b30 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    8b30:	ldr	r3, [pc, #52]	; (8b68 <usb_free+0x38>)
    8b32:	ldr	r2, [pc, #56]	; (8b6c <usb_free+0x3c>)
    8b34:	subs	r3, r0, r3
    8b36:	umull	r2, r3, r2, r3
    8b3a:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    8b3c:	cmp	r3, #11
    8b3e:	bhi.n	8b5a <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    8b40:	ldr	r2, [pc, #44]	; (8b70 <usb_free+0x40>)
    8b42:	ldrb	r2, [r2, #0]
    8b44:	cbnz	r2, 8b5c <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    8b46:	cpsid	i
	usb_buffer_available |= mask;
    8b48:	ldr	r0, [pc, #40]	; (8b74 <usb_free+0x44>)
    8b4a:	mov.w	r1, #2147483648	; 0x80000000
    8b4e:	ldr	r2, [r0, #0]
    8b50:	lsr.w	r3, r1, r3
    8b54:	orrs	r2, r3
    8b56:	str	r2, [r0, #0]
	__enable_irq();
    8b58:	cpsie	i
    8b5a:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    8b5c:	ldr	r2, [pc, #24]	; (8b78 <usb_free+0x48>)
    8b5e:	ldrb	r2, [r2, #0]
    8b60:	cmp	r2, #0
    8b62:	beq.n	8b46 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    8b64:	b.w	8be4 <usb_rx_memory>
    8b68:	.word	0x200169d0
    8b6c:	.word	0x38e38e39
    8b70:	.word	0x2001ca35
    8b74:	.word	0x20016f20
    8b78:	.word	0x2001ca40

00008b7c <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    8b7c:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    8b7e:	cmp	r3, #3
    8b80:	bhi.n	8bac <usb_rx+0x30>
	__disable_irq();
    8b82:	cpsid	i
	ret = rx_first[endpoint];
    8b84:	ldr	r1, [pc, #40]	; (8bb0 <usb_rx+0x34>)
    8b86:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    8b8a:	cbz	r0, 8ba8 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    8b8c:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    8b8e:	ldr	r4, [pc, #36]	; (8bb4 <usb_rx+0x38>)
    8b90:	ldrh	r5, [r0, #0]
    8b92:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    8b96:	ldr	r6, [r0, #4]
    8b98:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    8b9c:	subs	r2, r2, r5
    8b9e:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    8ba2:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    8ba4:	pop	{r4, r5, r6}
    8ba6:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    8ba8:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    8baa:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    8bac:	movs	r0, #0
    8bae:	bx	lr
    8bb0:	.word	0x2001c9b8
    8bb4:	.word	0x2001ce34

00008bb8 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    8bb8:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    8bba:	cmp	r0, #3
    8bbc:	bhi.n	8bd6 <usb_tx_packet_count+0x1e>
	__disable_irq();
    8bbe:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    8bc0:	ldr	r3, [pc, #28]	; (8be0 <usb_tx_packet_count+0x28>)
    8bc2:	ldr.w	r3, [r3, r0, lsl #2]
    8bc6:	cbz	r3, 8bda <usb_tx_packet_count+0x22>
    8bc8:	movs	r0, #0
    8bca:	ldr	r3, [r3, #4]
    8bcc:	adds	r0, #1
    8bce:	cmp	r3, #0
    8bd0:	bne.n	8bca <usb_tx_packet_count+0x12>
	__enable_irq();
    8bd2:	cpsie	i
	return count;
    8bd4:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    8bd6:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    8bd8:	bx	lr
// https://forum.pjrc.com/threads/58663?p=223513&viewfull=1#post223513
//
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    8bda:	mov	r0, r3
    8bdc:	b.n	8bd2 <usb_tx_packet_count+0x1a>
    8bde:	nop
    8be0:	.word	0x2001ca0c

00008be4 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    8be4:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    8be6:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    8be8:	ldr	r2, [pc, #172]	; (8c98 <usb_rx_memory+0xb4>)
    8bea:	ldrb	r3, [r2, #0]
    8bec:	lsls	r5, r3, #28
    8bee:	bpl.n	8bfe <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    8bf0:	ldr	r3, [pc, #168]	; (8c9c <usb_rx_memory+0xb8>)
    8bf2:	ldr	r1, [r3, #32]
    8bf4:	cmp	r1, #0
    8bf6:	beq.n	8c66 <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    8bf8:	ldr	r1, [r3, #40]	; 0x28
    8bfa:	cmp	r1, #0
    8bfc:	beq.n	8c82 <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    8bfe:	ldrb	r3, [r2, #1]
    8c00:	lsls	r4, r3, #28
    8c02:	bpl.n	8c12 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    8c04:	ldr	r3, [pc, #148]	; (8c9c <usb_rx_memory+0xb8>)
    8c06:	ldr	r1, [r3, #64]	; 0x40
    8c08:	cmp	r1, #0
    8c0a:	beq.n	8c8a <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    8c0c:	ldr	r1, [r3, #72]	; 0x48
    8c0e:	cmp	r1, #0
    8c10:	beq.n	8c86 <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    8c12:	ldrb	r3, [r2, #2]
    8c14:	lsls	r1, r3, #28
    8c16:	bpl.n	8c24 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    8c18:	ldr	r3, [pc, #128]	; (8c9c <usb_rx_memory+0xb8>)
    8c1a:	ldr	r1, [r3, #96]	; 0x60
    8c1c:	cmp	r1, #0
    8c1e:	beq.n	8c8e <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    8c20:	ldr	r1, [r3, #104]	; 0x68
    8c22:	cbz	r1, 8c48 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    8c24:	ldrb	r3, [r2, #3]
    8c26:	lsls	r3, r3, #28
    8c28:	bpl.n	8c3a <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    8c2a:	ldr	r3, [pc, #112]	; (8c9c <usb_rx_memory+0xb8>)
    8c2c:	ldr.w	r2, [r3, #128]	; 0x80
    8c30:	cbz	r2, 8c92 <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    8c32:	ldr.w	r2, [r3, #136]	; 0x88
    8c36:	movs	r1, #17
    8c38:	cbz	r2, 8c4a <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    8c3a:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    8c3c:	ldr	r3, [pc, #96]	; (8ca0 <usb_rx_memory+0xbc>)
    8c3e:	movs	r2, #0
    8c40:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    8c42:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    8c44:	b.w	8b30 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    8c48:	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    8c4a:	ldr	r4, [pc, #84]	; (8ca0 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    8c4c:	ldr	r5, [pc, #84]	; (8ca4 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    8c4e:	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    8c50:	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    8c54:	add.w	r3, r3, r1, lsl #3
    8c58:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    8c5a:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    8c5c:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    8c5e:	strb	r2, [r4, #0]
				__enable_irq();
    8c60:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    8c62:	pop	{r4, r5}
    8c64:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    8c66:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    8c68:	ldr	r4, [pc, #52]	; (8ca0 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    8c6a:	ldr	r5, [pc, #60]	; (8ca8 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    8c6c:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    8c6e:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    8c72:	add.w	r3, r3, r2, lsl #3
    8c76:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    8c78:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    8c7a:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    8c7c:	strb	r2, [r4, #0]
				__enable_irq();
    8c7e:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    8c80:	b.n	8c62 <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    8c82:	movs	r1, #5
    8c84:	b.n	8c4a <usb_rx_memory+0x66>
    8c86:	movs	r1, #9
    8c88:	b.n	8c4a <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    8c8a:	movs	r2, #8
    8c8c:	b.n	8c68 <usb_rx_memory+0x84>
    8c8e:	movs	r2, #12
    8c90:	b.n	8c68 <usb_rx_memory+0x84>
    8c92:	movs	r2, #16
    8c94:	b.n	8c68 <usb_rx_memory+0x84>
    8c96:	nop
    8c98:	.word	0x00013720
    8c9c:	.word	0x1fff0000
    8ca0:	.word	0x2001ca35
    8ca4:	.word	0x004000c8
    8ca8:	.word	0x00400088

00008cac <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    8cac:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    8cae:	cmp	r3, #3
    8cb0:	bhi.n	8cee <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    8cb2:	ldr	r2, [pc, #108]	; (8d20 <usb_tx+0x74>)
    8cb4:	lsls	r0, r0, #5
    8cb6:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    8cba:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    8cbc:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    8cbe:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    8cc0:	ldr	r4, [pc, #96]	; (8d24 <usb_tx+0x78>)
    8cc2:	ldrb	r2, [r4, r3]
    8cc4:	cmp	r2, #3
    8cc6:	bhi.n	8d00 <usb_tx+0x54>
    8cc8:	tbb	[pc, r2]
    8ccc:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    8cd0:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    8cd2:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    8cd4:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    8cd6:	tst.w	r0, #8
    8cda:	ite	ne
    8cdc:	movne	r3, #200	; 0xc8
    8cde:	moveq	r3, #136	; 0x88
    8ce0:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    8ce4:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    8ce6:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    8ce8:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    8cea:	cpsie	i
}
    8cec:	pop	{r4, r5}
    8cee:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    8cf0:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    8cf2:	movs	r2, #2
		break;
    8cf4:	b.n	8cd2 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    8cf6:	movs	r2, #5
    8cf8:	b.n	8cd2 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    8cfa:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    8cfc:	movs	r2, #4
		break;
    8cfe:	b.n	8cd2 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    8d00:	ldr	r2, [pc, #36]	; (8d28 <usb_tx+0x7c>)
    8d02:	ldr.w	r0, [r2, r3, lsl #2]
    8d06:	cbz	r0, 8d18 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    8d08:	ldr	r2, [pc, #32]	; (8d2c <usb_tx+0x80>)
    8d0a:	ldr.w	r0, [r2, r3, lsl #2]
    8d0e:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    8d10:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    8d14:	cpsie	i
		return;
    8d16:	b.n	8cec <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    8d18:	str.w	r1, [r2, r3, lsl #2]
    8d1c:	ldr	r2, [pc, #12]	; (8d2c <usb_tx+0x80>)
    8d1e:	b.n	8d10 <usb_tx+0x64>
    8d20:	.word	0x1fff0000
    8d24:	.word	0x2001ca44
    8d28:	.word	0x2001ca0c
    8d2c:	.word	0x2001ca1c

00008d30 <usb_isr>:
}



void usb_isr(void)
{
    8d30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    8d34:	ldr.w	fp, [pc, #792]	; 9050 <usb_isr+0x320>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    8d38:	ldr.w	sl, [pc, #792]	; 9054 <usb_isr+0x324>
}



void usb_isr(void)
{
    8d3c:	sub	sp, #28
    8d3e:	b.n	8dca <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    8d40:	ldr	r7, [pc, #696]	; (8ffc <usb_isr+0x2cc>)
    8d42:	mov.w	r8, r3, lsr #2
    8d46:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    8d4a:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    8d4c:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    8d50:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    8d54:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    8d56:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    8d5a:	and.w	r4, r3, #255	; 0xff
    8d5e:	cmp	r3, #0
    8d60:	bne.w	8f6c <usb_isr+0x23c>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    8d64:	ldr.w	r3, [r7, r8, lsl #3]
    8d68:	lsrs	r3, r3, #16
    8d6a:	uxth	r1, r3
    8d6c:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    8d70:	cmp	r3, #0
    8d72:	beq.w	8f5a <usb_isr+0x22a>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    8d76:	ldr	r3, [pc, #648]	; (9000 <usb_isr+0x2d0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    8d78:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    8d7c:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    8d80:	ldr.w	r2, [r3, r6, lsl #2]
    8d84:	cmp	r2, #0
    8d86:	beq.w	9066 <usb_isr+0x336>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    8d8a:	ldr	r5, [pc, #632]	; (9004 <usb_isr+0x2d4>)
    8d8c:	ldr.w	r3, [r5, r6, lsl #2]
    8d90:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    8d92:	ldr	r4, [pc, #628]	; (9008 <usb_isr+0x2d8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    8d94:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    8d98:	ldrh.w	r3, [r4, r6, lsl #1]
    8d9c:	add	r1, r3
    8d9e:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    8da2:	bl	8af0 <usb_malloc>
					if (packet) {
    8da6:	cmp	r0, #0
    8da8:	beq.w	9058 <usb_isr+0x328>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    8dac:	ldr	r2, [pc, #604]	; (900c <usb_isr+0x2dc>)
    8dae:	ldr	r3, [pc, #608]	; (9010 <usb_isr+0x2e0>)
    8db0:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    8db4:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    8db8:	it	ne
    8dba:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    8dbc:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    8dc0:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    8dc4:	movs	r3, #8
    8dc6:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    8dca:	ldrb.w	r4, [fp]
    8dce:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    8dd0:	lsls	r1, r4, #29
    8dd2:	bpl.n	8e0c <usb_isr+0xdc>
		if (usb_configuration) {
    8dd4:	ldr	r3, [pc, #572]	; (9014 <usb_isr+0x2e4>)
    8dd6:	ldrb	r3, [r3, #0]
    8dd8:	cbz	r3, 8e06 <usb_isr+0xd6>
			t = usb_reboot_timer;
    8dda:	ldr	r1, [pc, #572]	; (9018 <usb_isr+0x2e8>)
    8ddc:	ldrb	r2, [r1, #0]
			if (t) {
    8dde:	and.w	r3, r2, #255	; 0xff
    8de2:	cbz	r2, 8df0 <usb_isr+0xc0>
				usb_reboot_timer = --t;
    8de4:	subs	r3, #1
    8de6:	uxtb	r3, r3
    8de8:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    8dea:	cmp	r3, #0
    8dec:	beq.w	97ce <usb_isr+0xa9e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    8df0:	ldr	r1, [pc, #552]	; (901c <usb_isr+0x2ec>)
    8df2:	ldrb	r2, [r1, #0]
			if (t) {
    8df4:	and.w	r3, r2, #255	; 0xff
    8df8:	cbz	r2, 8e06 <usb_isr+0xd6>
				usb_cdc_transmit_flush_timer = --t;
    8dfa:	subs	r3, #1
    8dfc:	uxtb	r3, r3
    8dfe:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    8e00:	cmp	r3, #0
    8e02:	beq.w	8ff4 <usb_isr+0x2c4>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    8e06:	movs	r3, #4
    8e08:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    8e0c:	and.w	r3, r4, #8
    8e10:	and.w	r2, r3, #255	; 0xff
    8e14:	cmp	r3, #0
    8e16:	beq.w	8fc6 <usb_isr+0x296>
		uint8_t endpoint;
		stat = USB0_STAT;
    8e1a:	ldrb.w	r3, [sl]
    8e1e:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    8e20:	lsrs	r6, r3, #4
    8e22:	bne.n	8d40 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    8e24:	lsrs	r4, r3, #2
    8e26:	ldr.w	r9, [pc, #468]	; 8ffc <usb_isr+0x2cc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    8e2a:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    8e2e:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    8e32:	ubfx	r2, r2, #2, #4
    8e36:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    8e38:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    8e3a:	cmp	r2, #12
    8e3c:	bhi.n	8f3c <usb_isr+0x20c>
    8e3e:	tbb	[pc, r2]
    8e42:	.short	0x8181
    8e44:	.word	0x7d7d7d7d
    8e48:	.word	0x7d477d7d
    8e4c:	.short	0x7d7d
    8e4e:	.byte	0x07
    8e4f:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    8e50:	ldr	r0, [r1, #0]
    8e52:	ldr	r5, [pc, #460]	; (9020 <usb_isr+0x2f0>)
		setup.word2 = *(uint32_t *)(buf + 4);
    8e54:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    8e56:	ldr	r7, [pc, #460]	; (9024 <usb_isr+0x2f4>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    8e58:	ldr	r6, [pc, #460]	; (9028 <usb_isr+0x2f8>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    8e5a:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    8e5c:	uxth	r1, r0
    8e5e:	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    8e62:	ldr	r3, [pc, #424]	; (900c <usb_isr+0x2dc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    8e64:	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    8e66:	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    8e6a:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    8e6c:	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    8e6e:	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    8e72:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    8e74:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    8e78:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    8e7c:	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    8e80:	ldr	r4, [pc, #376]	; (8ffc <usb_isr+0x2cc>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    8e82:	bhi.w	906e <usb_isr+0x33e>
    8e86:	cmp.w	r1, #1664	; 0x680
    8e8a:	bcs.w	957e <usb_isr+0x84e>
    8e8e:	cmp.w	r1, #258	; 0x102
    8e92:	beq.w	955a <usb_isr+0x82a>
    8e96:	bhi.w	93a8 <usb_isr+0x678>
    8e9a:	cmp	r1, #128	; 0x80
    8e9c:	beq.w	9478 <usb_isr+0x748>
    8ea0:	cmp	r1, #130	; 0x82
    8ea2:	bne.w	94e2 <usb_isr+0x7b2>
    8ea6:	ldrh	r1, [r5, #4]
    8ea8:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    8eac:	cmp	r1, #4
    8eae:	bhi.w	94e2 <usb_isr+0x7b2>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    8eb2:	ldr	r0, [pc, #376]	; (902c <usb_isr+0x2fc>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    8eb4:	ldr	r4, [pc, #376]	; (9030 <usb_isr+0x300>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    8eb6:	lsls	r1, r1, #2
    8eb8:	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    8eba:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    8ebc:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    8ebe:	ldrb	r2, [r0, #0]
    8ec0:	lsls	r3, r2, #30
    8ec2:	bpl.w	95b8 <usb_isr+0x888>
    8ec6:	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    8eca:	mov.w	lr, #2
    8ece:	b.n	9482 <usb_isr+0x752>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    8ed0:	ldr	r7, [pc, #336]	; (9024 <usb_isr+0x2f4>)
    8ed2:	ldr	r2, [r7, #0]
		if (data) {
    8ed4:	cbz	r2, 8f28 <usb_isr+0x1f8>
			size = ep0_tx_len;
    8ed6:	ldr	r3, [pc, #348]	; (9034 <usb_isr+0x304>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8ed8:	ldr	r6, [pc, #332]	; (9028 <usb_isr+0x2f8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8eda:	ldr	r1, [pc, #348]	; (9038 <usb_isr+0x308>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    8edc:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8ede:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8ee0:	ldrb	r5, [r1, #0]
    8ee2:	cmp	r0, #64	; 0x40
    8ee4:	mov	lr, r0
    8ee6:	orr.w	r8, r5, #2
    8eea:	it	cs
    8eec:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8ef0:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    8ef2:	eor.w	r4, r4, #1
    8ef6:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    8ef8:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8efc:	ite	eq
    8efe:	moveq	r4, #136	; 0x88
    8f00:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8f02:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    8f06:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    8f08:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8f0c:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    8f10:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    8f12:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    8f14:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    8f18:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    8f1a:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    8f1c:	cbnz	r0, 8f26 <usb_isr+0x1f6>
    8f1e:	cmp.w	lr, #64	; 0x40
    8f22:	it	ne
    8f24:	movne	r2, #0
    8f26:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    8f28:	ldr	r3, [pc, #244]	; (9020 <usb_isr+0x2f0>)
    8f2a:	ldrh	r2, [r3, #0]
    8f2c:	cmp.w	r2, #1280	; 0x500
    8f30:	bne.n	8f3c <usb_isr+0x20c>
			setup.bRequest = 0;
    8f32:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    8f34:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    8f36:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    8f38:	ldr	r3, [pc, #256]	; (903c <usb_isr+0x30c>)
    8f3a:	strb	r2, [r3, #0]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    8f3c:	ldr	r2, [pc, #256]	; (9040 <usb_isr+0x310>)
    8f3e:	movs	r3, #1
    8f40:	strb	r3, [r2, #0]
    8f42:	b.n	8dc4 <usb_isr+0x94>
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    8f44:	ldr	r2, [pc, #216]	; (9020 <usb_isr+0x2f0>)
    8f46:	ldrh	r5, [r2, #0]
    8f48:	movw	r0, #8225	; 0x2021
    8f4c:	cmp	r5, r0
    8f4e:	beq.w	9350 <usb_isr+0x620>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    8f52:	ldr	r2, [pc, #184]	; (900c <usb_isr+0x2dc>)
    8f54:	str.w	r2, [r9, r4, lsl #3]
    8f58:	b.n	8f3c <usb_isr+0x20c>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    8f5a:	ldr	r2, [pc, #176]	; (900c <usb_isr+0x2dc>)
    8f5c:	ldr	r3, [pc, #176]	; (9010 <usb_isr+0x2e0>)
    8f5e:	tst.w	r9, #8
    8f62:	it	ne
    8f64:	movne	r3, r2
    8f66:	str.w	r3, [r7, r8, lsl #3]
    8f6a:	b.n	8dc4 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    8f6c:	bl	8b30 <usb_free>
				packet = tx_first[endpoint];
    8f70:	ldr	r2, [pc, #208]	; (9044 <usb_isr+0x314>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    8f72:	ldr	r1, [pc, #212]	; (9048 <usb_isr+0x318>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    8f74:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    8f78:	cmp	r3, #0
    8f7a:	beq.w	92ea <usb_isr+0x5ba>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    8f7e:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    8f80:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    8f82:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    8f86:	add.w	r2, r3, #8
    8f8a:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    8f8e:	cmp	r4, #3
    8f90:	bhi.n	8f9e <usb_isr+0x26e>
    8f92:	tbb	[pc, r4]
    8f96:	.short	0x0f12
    8f98:	.short	0x0215
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    8f9a:	movs	r2, #4
    8f9c:	strb	r2, [r1, r6]
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    8f9e:	ldrh	r2, [r3, #0]
    8fa0:	tst.w	r9, #8
    8fa4:	ite	eq
    8fa6:	moveq	r3, #136	; 0x88
    8fa8:	movne	r3, #200	; 0xc8
    8faa:	orr.w	r3, r3, r2, lsl #16
    8fae:	str.w	r3, [r7, r8, lsl #3]
    8fb2:	b.n	8dc4 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    8fb4:	movs	r2, #2
    8fb6:	strb	r2, [r1, r6]
						break;
    8fb8:	b.n	8f9e <usb_isr+0x26e>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    8fba:	movs	r2, #3
    8fbc:	strb	r2, [r1, r6]
						break;
    8fbe:	b.n	8f9e <usb_isr+0x26e>
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    8fc0:	movs	r2, #5
    8fc2:	strb	r2, [r1, r6]
						break;
    8fc4:	b.n	8f9e <usb_isr+0x26e>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    8fc6:	lsls	r0, r4, #31
    8fc8:	bmi.w	9400 <usb_isr+0x6d0>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    8fcc:	lsls	r1, r4, #24
    8fce:	bmi.w	9464 <usb_isr+0x734>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    8fd2:	lsls	r2, r4, #30
    8fd4:	bpl.n	8fe4 <usb_isr+0x2b4>
		uint8_t err = USB0_ERRSTAT;
    8fd6:	ldr	r2, [pc, #116]	; (904c <usb_isr+0x31c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    8fd8:	ldr	r1, [pc, #116]	; (9050 <usb_isr+0x320>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    8fda:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    8fdc:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    8fde:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    8fe0:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    8fe2:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    8fe4:	lsls	r3, r4, #27
    8fe6:	bpl.n	8fee <usb_isr+0x2be>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    8fe8:	ldr	r3, [pc, #100]	; (9050 <usb_isr+0x320>)
    8fea:	movs	r2, #16
    8fec:	strb	r2, [r3, #0]
	}

}
    8fee:	add	sp, #28
    8ff0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    8ff4:	bl	85b4 <usb_serial_flush_callback>
    8ff8:	b.n	8e06 <usb_isr+0xd6>
    8ffa:	nop
    8ffc:	.word	0x1fff0000
    9000:	.word	0x2001c9b8
    9004:	.word	0x2001c964
    9008:	.word	0x2001ce34
    900c:	.word	0x004000c8
    9010:	.word	0x00400088
    9014:	.word	0x2001ca40
    9018:	.word	0x2001c9c9
    901c:	.word	0x2001c948
    9020:	.word	0x2001ca2c
    9024:	.word	0x2001c960
    9028:	.word	0x2001c9c8
    902c:	.word	0x400720c0
    9030:	.word	0x2001ca38
    9034:	.word	0x2001c974
    9038:	.word	0x2001ca34
    903c:	.word	0x40072098
    9040:	.word	0x40072094
    9044:	.word	0x2001ca0c
    9048:	.word	0x2001ca44
    904c:	.word	0x40072088
    9050:	.word	0x40072080
    9054:	.word	0x40072090
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    9058:	ldr	r2, [pc, #684]	; (9308 <usb_isr+0x5d8>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    905a:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    905e:	ldrb	r3, [r2, #0]
    9060:	adds	r3, #1
    9062:	strb	r3, [r2, #0]
    9064:	b.n	8dc4 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    9066:	str.w	r0, [r3, r6, lsl #2]
    906a:	ldr	r5, [pc, #672]	; (930c <usb_isr+0x5dc>)
    906c:	b.n	8d92 <usb_isr+0x62>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    906e:	movw	r0, #8225	; 0x2021
    9072:	cmp	r1, r0
    9074:	beq.w	92e2 <usb_isr+0x5b2>
    9078:	bhi.w	93da <usb_isr+0x6aa>
    907c:	cmp.w	r1, #2176	; 0x880
    9080:	beq.w	94ba <usb_isr+0x78a>
    9084:	cmp.w	r1, #2304	; 0x900
    9088:	bne.w	94e2 <usb_isr+0x7b2>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    908c:	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    908e:	ldr	r1, [pc, #640]	; (9310 <usb_isr+0x5e0>)
    9090:	ldrb	r0, [r5, #2]
    9092:	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    9094:	lsls	r2, r2, #24
    9096:	bmi.w	9724 <usb_isr+0x9f4>
    909a:	ldr.w	r2, [r9, #40]	; 0x28
    909e:	ldr	r1, [pc, #628]	; (9314 <usb_isr+0x5e4>)
    90a0:	lsls	r3, r2, #24
    90a2:	bmi.w	971a <usb_isr+0x9ea>
    90a6:	ldr.w	r2, [r9, #48]	; 0x30
    90aa:	ldr	r1, [pc, #616]	; (9314 <usb_isr+0x5e4>)
    90ac:	lsls	r5, r2, #24
    90ae:	bmi.w	9710 <usb_isr+0x9e0>
    90b2:	ldr.w	r2, [r9, #56]	; 0x38
    90b6:	ldr	r1, [pc, #604]	; (9314 <usb_isr+0x5e4>)
    90b8:	lsls	r4, r2, #24
    90ba:	bmi.w	9706 <usb_isr+0x9d6>
    90be:	ldr.w	r2, [r9, #64]	; 0x40
    90c2:	ldr	r1, [pc, #592]	; (9314 <usb_isr+0x5e4>)
    90c4:	lsls	r0, r2, #24
    90c6:	bmi.w	96fc <usb_isr+0x9cc>
    90ca:	ldr.w	r2, [r9, #72]	; 0x48
    90ce:	ldr	r1, [pc, #580]	; (9314 <usb_isr+0x5e4>)
    90d0:	lsls	r2, r2, #24
    90d2:	bmi.w	96f2 <usb_isr+0x9c2>
    90d6:	ldr.w	r2, [r9, #80]	; 0x50
    90da:	ldr	r1, [pc, #568]	; (9314 <usb_isr+0x5e4>)
    90dc:	lsls	r3, r2, #24
    90de:	bmi.w	96e8 <usb_isr+0x9b8>
    90e2:	ldr.w	r2, [r9, #88]	; 0x58
    90e6:	ldr	r1, [pc, #556]	; (9314 <usb_isr+0x5e4>)
    90e8:	lsls	r5, r2, #24
    90ea:	bmi.w	96de <usb_isr+0x9ae>
    90ee:	ldr.w	r2, [r9, #96]	; 0x60
    90f2:	ldr	r1, [pc, #544]	; (9314 <usb_isr+0x5e4>)
    90f4:	lsls	r4, r2, #24
    90f6:	bmi.w	974c <usb_isr+0xa1c>
    90fa:	ldr.w	r2, [r9, #104]	; 0x68
    90fe:	ldr	r1, [pc, #532]	; (9314 <usb_isr+0x5e4>)
    9100:	lsls	r0, r2, #24
    9102:	bmi.w	9742 <usb_isr+0xa12>
    9106:	ldr.w	r2, [r9, #112]	; 0x70
    910a:	ldr	r1, [pc, #520]	; (9314 <usb_isr+0x5e4>)
    910c:	lsls	r2, r2, #24
    910e:	bmi.w	9738 <usb_isr+0xa08>
    9112:	ldr.w	r2, [r9, #120]	; 0x78
    9116:	ldr	r1, [pc, #508]	; (9314 <usb_isr+0x5e4>)
    9118:	lsls	r3, r2, #24
    911a:	bmi.w	972e <usb_isr+0x9fe>
    911e:	ldr.w	r2, [r9, #128]	; 0x80
    9122:	ldr	r1, [pc, #496]	; (9314 <usb_isr+0x5e4>)
    9124:	lsls	r5, r2, #24
    9126:	bmi.w	9762 <usb_isr+0xa32>
    912a:	ldr.w	r2, [r9, #136]	; 0x88
    912e:	ldr	r1, [pc, #484]	; (9314 <usb_isr+0x5e4>)
    9130:	lsls	r4, r2, #24
    9132:	bmi.w	9756 <usb_isr+0xa26>
    9136:	ldr.w	r2, [r9, #144]	; 0x90
    913a:	ldr	r1, [pc, #472]	; (9314 <usb_isr+0x5e4>)
    913c:	lsls	r0, r2, #24
    913e:	bmi.w	96d2 <usb_isr+0x9a2>
    9142:	ldr.w	r2, [r9, #152]	; 0x98
    9146:	ldr	r1, [pc, #460]	; (9314 <usb_isr+0x5e4>)
    9148:	lsls	r2, r2, #24
    914a:	bmi.w	96c6 <usb_isr+0x996>
    914e:	ldr	r0, [pc, #456]	; (9318 <usb_isr+0x5e8>)
    9150:	ldr	r2, [pc, #456]	; (931c <usb_isr+0x5ec>)
    9152:	ldr	r1, [pc, #460]	; (9320 <usb_isr+0x5f0>)
    9154:	str	r0, [sp, #4]
    9156:	ldr	r0, [pc, #460]	; (9324 <usb_isr+0x5f4>)
    9158:	ldr	r5, [pc, #432]	; (930c <usb_isr+0x5dc>)
    915a:	ldr	r4, [pc, #460]	; (9328 <usb_isr+0x5f8>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    915c:	str	r7, [sp, #16]
}



void usb_isr(void)
{
    915e:	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9160:	str	r6, [sp, #20]
    9162:	str	r5, [sp, #8]
    9164:	mov	r8, r0
    9166:	mov	r7, r2
    9168:	mov	r6, r1
    916a:	mov	r5, r3
    916c:	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    916e:	ldr	r0, [r7, #0]
			while (p) {
    9170:	cbz	r0, 917e <usb_isr+0x44e>
				n = p->next;
    9172:	ldr	r4, [r0, #4]
				usb_free(p);
    9174:	bl	8b30 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    9178:	mov	r0, r4
    917a:	cmp	r4, #0
    917c:	bne.n	9172 <usb_isr+0x442>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    917e:	movs	r3, #0
    9180:	str	r3, [r7, #0]
			rx_last[i] = NULL;
    9182:	ldr	r3, [sp, #8]
			p = tx_first[i];
    9184:	ldr	r0, [r6, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    9186:	mov	r2, r3
    9188:	movs	r3, #0
    918a:	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    918e:	cbz	r0, 919c <usb_isr+0x46c>
				n = p->next;
    9190:	ldr	r4, [r0, #4]
				usb_free(p);
    9192:	bl	8b30 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    9196:	mov	r0, r4
    9198:	cmp	r4, #0
    919a:	bne.n	9190 <usb_isr+0x460>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    919c:	movs	r2, #0
    919e:	str	r2, [r6, #0]
			tx_last[i] = NULL;
    91a0:	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    91a2:	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    91a6:	mov	r1, r2
    91a8:	movs	r2, #0
    91aa:	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    91ae:	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    91b0:	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    91b2:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    91b4:	mov.w	r1, #0
    91b8:	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    91bc:	cmp	r3, #3
    91be:	bhi.n	91d4 <usb_isr+0x4a4>
    91c0:	tbh	[pc, r3, lsl #1]
    91c4:	.word	0x0004014b
    91c8:	.word	0x0004014b
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    91cc:	mov.w	r3, #1
    91d0:	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    91d4:	adds	r5, #1
    91d6:	cmp	r5, #4
    91d8:	add.w	r7, r7, #4
    91dc:	add.w	r6, r6, #4
    91e0:	add.w	r8, r8, #1
    91e4:	bne.n	916e <usb_isr+0x43e>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    91e6:	ldr	r4, [pc, #324]	; (932c <usb_isr+0x5fc>)
			*reg = epconf;
    91e8:	ldr	r3, [pc, #324]	; (9330 <usb_isr+0x600>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    91ea:	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    91ec:	ldr	r5, [pc, #280]	; (9308 <usb_isr+0x5d8>)
    91ee:	ldr	r7, [sp, #16]
    91f0:	ldr	r6, [sp, #20]
    91f2:	movs	r1, #0
    91f4:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    91f6:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    91f8:	lsls	r3, r2, #28
    91fa:	bmi.w	969c <usb_isr+0x96c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    91fe:	ldrb	r2, [r4, #1]
			*reg = epconf;
    9200:	ldr	r1, [pc, #304]	; (9334 <usb_isr+0x604>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9202:	ldr.w	r8, [pc, #272]	; 9314 <usb_isr+0x5e4>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    9206:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9208:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    920a:	mov.w	r1, #0
    920e:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    9212:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9216:	bmi.w	9670 <usb_isr+0x940>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    921a:	ldr	r1, [pc, #284]	; (9338 <usb_isr+0x608>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    921c:	ldrb	r2, [r4, #2]
			*reg = epconf;
    921e:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9220:	movs	r1, #0
    9222:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    9226:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    922a:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    922c:	ldr.w	r8, [pc, #228]	; 9314 <usb_isr+0x5e4>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9230:	bmi.w	95ec <usb_isr+0x8bc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9234:	ldrb	r2, [r4, #3]
			*reg = epconf;
    9236:	ldr	r1, [pc, #260]	; (933c <usb_isr+0x60c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9238:	ldr	r4, [pc, #216]	; (9314 <usb_isr+0x5e4>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    923a:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    923c:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    923e:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9240:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    9244:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9248:	bmi.w	95be <usb_isr+0x88e>
    924c:	ldrb	r3, [r6, #0]
    924e:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9250:	movs	r1, #0
    9252:	eor.w	r2, r3, #1
    9256:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    925a:	str.w	r1, [r9, #152]	; 0x98
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    925e:	movs	r0, #0
    9260:	str	r0, [sp, #8]
    9262:	mov	r8, r0
    9264:	mov	ip, r0
    9266:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9268:	ldr	r1, [pc, #212]	; (9340 <usb_isr+0x610>)
    926a:	ldrb	r5, [r1, #0]
    926c:	orr.w	lr, r5, #2
    9270:	add.w	r3, r9, lr, lsl #3
    9274:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9276:	ldr	r3, [sp, #4]
    9278:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    927a:	ldr	r3, [sp, #12]
    927c:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    927e:	ite	eq
    9280:	moveq	r4, #136	; 0x88
    9282:	movne	r4, #200	; 0xc8
    9284:	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9288:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    928c:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    9290:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    9292:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9294:	ldr.w	lr, [pc, #124]	; 9314 <usb_isr+0x5e4>
	ep0_tx_data_toggle ^= 1;
    9298:	ldr	r3, [pc, #168]	; (9344 <usb_isr+0x614>)
	ep0_tx_bdt_bank ^= 1;
    929a:	ldr.w	r8, [pc, #164]	; 9340 <usb_isr+0x610>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    929e:	cmp	r0, #0
    92a0:	bne.w	94f0 <usb_isr+0x7c0>
    92a4:	cmp.w	ip, #64	; 0x40
    92a8:	bne.n	92e2 <usb_isr+0x5b2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    92aa:	orr.w	ip, r4, #2
    92ae:	add.w	r3, r9, ip, lsl #3
    92b2:	ldr	r4, [sp, #8]
    92b4:	ldr.w	lr, [pc, #92]	; 9314 <usb_isr+0x5e4>
    92b8:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    92ba:	cmp	r2, #0
    92bc:	bne.w	951c <usb_isr+0x7ec>
    92c0:	lsls	r2, r0, #16
    92c2:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    92c6:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    92ca:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    92ce:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    92d0:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    92d2:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    92d4:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    92d6:	cmp	r0, #64	; 0x40
    92d8:	bne.n	92e2 <usb_isr+0x5b2>
    92da:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    92dc:	ldr	r2, [pc, #104]	; (9348 <usb_isr+0x618>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    92de:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    92e0:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    92e2:	ldr	r2, [pc, #104]	; (934c <usb_isr+0x61c>)
    92e4:	movs	r3, #1
    92e6:	strb	r3, [r2, #0]
    92e8:	b.n	8f3c <usb_isr+0x20c>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    92ea:	ldrb	r3, [r1, r6]
    92ec:	cmp	r3, #3
    92ee:	bhi.w	954c <usb_isr+0x81c>
    92f2:	add	r2, pc, #4	; (adr r2, 92f8 <usb_isr+0x5c8>)
    92f4:	ldr.w	pc, [r2, r3, lsl #2]
    92f8:	.word	0x00008dc5
    92fc:	.word	0x00008dc5
    9300:	.word	0x0000944f
    9304:	.word	0x00009455
    9308:	.word	0x2001ca35
    930c:	.word	0x2001c964
    9310:	.word	0x2001ca40
    9314:	.word	0x1fff0000
    9318:	.word	0x2001ca1c
    931c:	.word	0x2001c9b8
    9320:	.word	0x2001ca0c
    9324:	.word	0x2001ca44
    9328:	.word	0x2001ce34
    932c:	.word	0x00013720
    9330:	.word	0x400720c4
    9334:	.word	0x400720c8
    9338:	.word	0x400720cc
    933c:	.word	0x400720d0
    9340:	.word	0x2001ca34
    9344:	.word	0x2001c9c8
    9348:	.word	0x2001c974
    934c:	.word	0x40072094
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint32_t *line_coding = NULL;
			switch (setup.wIndex) {
    9350:	ldrh	r2, [r2, #4]
    9352:	cbnz	r2, 937a <usb_isr+0x64a>
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    9354:	ldr	r2, [pc, #708]	; (961c <usb_isr+0x8ec>)
    9356:	ldrb	r5, [r1, #0]
    9358:	ldrb	r0, [r1, #1]
    935a:	strb	r5, [r2, #0]
    935c:	strb	r0, [r2, #1]
    935e:	ldrb	r5, [r1, #2]
    9360:	ldrb	r0, [r1, #3]
    9362:	strb	r5, [r2, #2]
    9364:	strb	r0, [r2, #3]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    9366:	ldr	r0, [r2, #0]
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    9368:	ldrb	r5, [r1, #4]
    936a:	strb	r5, [r2, #4]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    936c:	cmp	r0, #134	; 0x86
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    936e:	ldrb	r5, [r1, #5]
    9370:	ldrb	r1, [r1, #6]
    9372:	strb	r5, [r2, #5]
    9374:	strb	r1, [r2, #6]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    9376:	beq.w	94c4 <usb_isr+0x794>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    937a:	ldr	r1, [pc, #676]	; (9620 <usb_isr+0x8f0>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    937c:	ldr	r6, [pc, #676]	; (9624 <usb_isr+0x8f4>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    937e:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9380:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9382:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9386:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9388:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    938c:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    938e:	ite	eq
    9390:	moveq	r1, #136	; 0x88
    9392:	movne	r1, #200	; 0xc8
    9394:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9398:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    939c:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    93a0:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    93a2:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    93a4:	str	r1, [r2, #4]
    93a6:	b.n	8f52 <usb_isr+0x222>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    93a8:	movw	r2, #770	; 0x302
    93ac:	cmp	r1, r2
    93ae:	bne.w	94cc <usb_isr+0x79c>
    93b2:	ldrh	r1, [r5, #4]
    93b4:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    93b8:	cmp	r1, #4
    93ba:	bhi.w	94e2 <usb_isr+0x7b2>
    93be:	ldrh	r2, [r5, #2]
    93c0:	cmp	r2, #0
    93c2:	bne.w	94e2 <usb_isr+0x7b2>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    93c6:	ldr	r0, [pc, #608]	; (9628 <usb_isr+0x8f8>)
    93c8:	str.w	lr, [sp, #4]
    93cc:	lsls	r1, r1, #2
    93ce:	add	r0, r1
    93d0:	ldrb	r1, [r0, #0]
    93d2:	orr.w	r1, r1, #2
    93d6:	strb	r1, [r0, #0]
    93d8:	b.n	925e <usb_isr+0x52e>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    93da:	movw	r0, #8737	; 0x2221
    93de:	cmp	r1, r0
    93e0:	bne.n	94da <usb_isr+0x7aa>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    93e2:	ldrh	r1, [r5, #4]
    93e4:	cmp	r1, #0
    93e6:	bne.w	95b2 <usb_isr+0x882>
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    93ea:	ldr	r3, [pc, #576]	; (962c <usb_isr+0x8fc>)
    93ec:	ldr	r2, [pc, #576]	; (9630 <usb_isr+0x900>)
			usb_cdc_line_rtsdtr = setup.wValue;
    93ee:	ldr	r0, [pc, #580]	; (9634 <usb_isr+0x904>)
    93f0:	ldrb	r4, [r5, #2]
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    93f2:	ldr	r5, [r3, #0]
    93f4:	str	r5, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    93f6:	str.w	lr, [sp, #4]
    93fa:	mov	r2, r1
    93fc:	strb	r4, [r0, #0]
    93fe:	b.n	925e <usb_isr+0x52e>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    9400:	ldr	r3, [pc, #564]	; (9638 <usb_isr+0x908>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    9402:	ldr	r0, [pc, #568]	; (963c <usb_isr+0x90c>)
		ep0_tx_bdt_bank = 0;
    9404:	ldr	r1, [pc, #536]	; (9620 <usb_isr+0x8f0>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    9406:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    9408:	mov.w	lr, #2
    940c:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9410:	ldr	r7, [pc, #532]	; (9628 <usb_isr+0x8f8>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    9412:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    9414:	ldr	r1, [pc, #552]	; (9640 <usb_isr+0x910>)
    9416:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    9418:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    941a:	ldr	r6, [pc, #552]	; (9644 <usb_isr+0x914>)
		USB0_ISTAT = 0xFF;
    941c:	ldr	r5, [pc, #552]	; (9648 <usb_isr+0x918>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    941e:	ldr	r4, [pc, #556]	; (964c <usb_isr+0x91c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    9420:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9422:	movs	r1, #13
    9424:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    9426:	movs	r1, #255	; 0xff
    9428:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    942a:	ldr.w	lr, [pc, #576]	; 966c <usb_isr+0x93c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    942e:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    9430:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    9432:	ldr	r5, [pc, #540]	; (9650 <usb_isr+0x920>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    9434:	ldr	r2, [pc, #540]	; (9654 <usb_isr+0x924>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    9436:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    943a:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    943c:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    943e:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    9442:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    9444:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    9446:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    9448:	add	sp, #28
    944a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    944e:	movs	r3, #0
    9450:	strb	r3, [r1, r6]
						break;
    9452:	b.n	8dc4 <usb_isr+0x94>
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9454:	movs	r3, #1
    9456:	strb	r3, [r1, r6]
						break;
    9458:	b.n	8dc4 <usb_isr+0x94>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    945a:	mov.w	r3, #0
    945e:	strb.w	r3, [r8]
    9462:	b.n	91d4 <usb_isr+0x4a4>
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9464:	ldr	r1, [pc, #448]	; (9628 <usb_isr+0x8f8>)
		USB0_ISTAT = USB_ISTAT_STALL;
    9466:	ldr	r3, [pc, #480]	; (9648 <usb_isr+0x918>)
    9468:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    946a:	movs	r0, #13
    946c:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    946e:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    9470:	lsls	r2, r4, #30
    9472:	bpl.w	8fe4 <usb_isr+0x2b4>
    9476:	b.n	8fd6 <usb_isr+0x2a6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    9478:	ldr	r4, [pc, #476]	; (9658 <usb_isr+0x928>)
		reply_buffer[1] = 0;
		datalen = 2;
    947a:	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    947e:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    9480:	strb	r2, [r4, #1]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    9482:	ldrh	r2, [r5, #6]
    9484:	cmp	r2, lr
    9486:	bcs.w	97d0 <usb_isr+0xaa0>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    948a:	ldr	r1, [pc, #404]	; (9620 <usb_isr+0x8f0>)
    948c:	ldrb	r5, [r1, #0]
    948e:	cmp	r2, #64	; 0x40
    9490:	mov	ip, r2
    9492:	orr.w	lr, r5, #2
    9496:	it	cs
    9498:	movcs.w	ip, #64	; 0x40
    949c:	add.w	r3, r4, ip
    94a0:	add.w	r0, r9, lr, lsl #3
    94a4:	str	r3, [sp, #8]
    94a6:	movs	r3, #1
    94a8:	str	r4, [r0, #4]
    94aa:	mov.w	r8, ip, lsl #16
    94ae:	rsb	r0, ip, r2
    94b2:	str	r3, [sp, #4]
    94b4:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    94b6:	movs	r4, #200	; 0xc8
    94b8:	b.n	9284 <usb_isr+0x554>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    94ba:	ldr	r2, [pc, #416]	; (965c <usb_isr+0x92c>)
    94bc:	ldr	r4, [pc, #408]	; (9658 <usb_isr+0x928>)
    94be:	ldrb	r2, [r2, #0]
    94c0:	strb	r2, [r4, #0]
    94c2:	b.n	9482 <usb_isr+0x752>
					//serial_phex(*buf);
					*dst++ = *buf++;
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    94c4:	ldr	r2, [pc, #408]	; (9660 <usb_isr+0x930>)
    94c6:	movs	r1, #15
    94c8:	strb	r1, [r2, #0]
    94ca:	b.n	937a <usb_isr+0x64a>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    94cc:	cmp.w	r1, #1280	; 0x500
    94d0:	bne.n	94e2 <usb_isr+0x7b2>
    94d2:	movs	r3, #1
    94d4:	movs	r2, #0
    94d6:	str	r3, [sp, #4]
    94d8:	b.n	925e <usb_isr+0x52e>
    94da:	movw	r2, #8993	; 0x2321
    94de:	cmp	r1, r2
    94e0:	beq.n	94d2 <usb_isr+0x7a2>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    94e2:	ldr	r2, [pc, #324]	; (9628 <usb_isr+0x8f8>)
    94e4:	movs	r3, #15
    94e6:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    94e8:	ldr	r2, [pc, #336]	; (963c <usb_isr+0x90c>)
    94ea:	movs	r3, #1
    94ec:	strb	r3, [r2, #0]
    94ee:	b.n	8f3c <usb_isr+0x20c>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    94f0:	cmp	r0, #64	; 0x40
    94f2:	bls.w	92aa <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    94f6:	orr.w	r4, r4, #2
    94fa:	add.w	r1, lr, r4, lsl #3
    94fe:	ldr	r6, [sp, #8]
    9500:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9502:	cbz	r2, 9534 <usb_isr+0x804>
	ep0_tx_data_toggle ^= 1;
    9504:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9508:	ldr	r2, [pc, #344]	; (9664 <usb_isr+0x934>)
	ep0_tx_data_toggle ^= 1;
    950a:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    950c:	mov	r3, r6
    950e:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9510:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9514:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9516:	str.w	r2, [lr, r4, lsl #3]
    951a:	b.n	92dc <usb_isr+0x5ac>
	ep0_tx_data_toggle ^= 1;
    951c:	ldrb.w	r3, [sp, #4]
    9520:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9522:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9524:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9526:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9528:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    952c:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    952e:	str.w	r2, [lr, ip, lsl #3]
    9532:	b.n	92d6 <usb_isr+0x5a6>
	ep0_tx_data_toggle ^= 1;
    9534:	ldrb.w	r1, [sp, #4]
    9538:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    953a:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    953c:	ldr	r2, [pc, #256]	; (9640 <usb_isr+0x910>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    953e:	strb.w	r5, [r8]
    9542:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9544:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9546:	str.w	r2, [lr, r4, lsl #3]
    954a:	b.n	92dc <usb_isr+0x5ac>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    954c:	tst.w	r9, #8
    9550:	ite	eq
    9552:	moveq	r3, #2
    9554:	movne	r3, #3
    9556:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    9558:	b.n	8dc4 <usb_isr+0x94>
    955a:	ldrh	r1, [r5, #4]
    955c:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    9560:	cmp	r1, #4
    9562:	bhi.n	94e2 <usb_isr+0x7b2>
    9564:	ldrh	r2, [r5, #2]
    9566:	cmp	r2, #0
    9568:	bne.n	94e2 <usb_isr+0x7b2>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    956a:	ldr	r0, [pc, #188]	; (9628 <usb_isr+0x8f8>)
    956c:	str.w	lr, [sp, #4]
    9570:	lsls	r1, r1, #2
    9572:	add	r0, r1
    9574:	ldrb	r1, [r0, #0]
    9576:	bic.w	r1, r1, #2
    957a:	strb	r1, [r0, #0]
    957c:	b.n	925e <usb_isr+0x52e>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    957e:	ldr	r2, [pc, #232]	; (9668 <usb_isr+0x938>)
    9580:	ldr	r4, [r2, #4]
    9582:	cmp	r4, #0
    9584:	beq.n	94e2 <usb_isr+0x7b2>
    9586:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9588:	ldrh.w	lr, [r5, #4]
    958c:	b.n	9596 <usb_isr+0x866>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    958e:	adds	r2, #12
			if (list->addr == NULL) break;
    9590:	ldr	r4, [r2, #4]
    9592:	cmp	r4, #0
    9594:	beq.n	94e2 <usb_isr+0x7b2>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9596:	ldrh	r3, [r2, #0]
    9598:	cmp	r3, r0
    959a:	bne.n	958e <usb_isr+0x85e>
    959c:	ldrh	r3, [r2, #2]
    959e:	cmp	r3, lr
    95a0:	bne.n	958e <usb_isr+0x85e>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    95a2:	lsrs	r0, r0, #8
    95a4:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    95a6:	ite	eq
    95a8:	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    95ac:	ldrhne.w	lr, [r2, #8]
    95b0:	b.n	9482 <usb_isr+0x752>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    95b2:	str.w	lr, [sp, #4]
    95b6:	b.n	925e <usb_isr+0x52e>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    95b8:	mov.w	lr, #2
    95bc:	b.n	9482 <usb_isr+0x752>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    95be:	bl	8af0 <usb_malloc>
				if (p) {
    95c2:	cmp	r0, #0
    95c4:	beq.w	97aa <usb_isr+0xa7a>
					table[index(i, RX, EVEN)].addr = p->buf;
    95c8:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    95ca:	ldr	r2, [pc, #116]	; (9640 <usb_isr+0x910>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    95cc:	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    95d0:	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    95d4:	bl	8af0 <usb_malloc>
				if (p) {
    95d8:	cmp	r0, #0
    95da:	beq.w	979e <usb_isr+0xa6e>
					table[index(i, RX, ODD)].addr = p->buf;
    95de:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    95e0:	ldr	r2, [pc, #128]	; (9664 <usb_isr+0x934>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    95e2:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    95e6:	str.w	r2, [r9, #136]	; 0x88
    95ea:	b.n	924c <usb_isr+0x51c>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    95ec:	bl	8af0 <usb_malloc>
				if (p) {
    95f0:	cmp	r0, #0
    95f2:	beq.w	97c2 <usb_isr+0xa92>
					table[index(i, RX, EVEN)].addr = p->buf;
    95f6:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    95f8:	ldr	r2, [pc, #68]	; (9640 <usb_isr+0x910>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    95fa:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    95fe:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    9602:	bl	8af0 <usb_malloc>
				if (p) {
    9606:	cmp	r0, #0
    9608:	beq.w	97b6 <usb_isr+0xa86>
					table[index(i, RX, ODD)].addr = p->buf;
    960c:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    960e:	ldr	r2, [pc, #84]	; (9664 <usb_isr+0x934>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    9610:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9614:	str.w	r2, [r9, #104]	; 0x68
    9618:	b.n	9234 <usb_isr+0x504>
    961a:	nop
    961c:	.word	0x2001ce28
    9620:	.word	0x2001ca34
    9624:	.word	0x2001c9c8
    9628:	.word	0x400720c0
    962c:	.word	0x2001c95c
    9630:	.word	0x2001ce30
    9634:	.word	0x2001c958
    9638:	.word	0x1fff0000
    963c:	.word	0x40072094
    9640:	.word	0x00400088
    9644:	.word	0x40072088
    9648:	.word	0x40072080
    964c:	.word	0x40072098
    9650:	.word	0x2001c978
    9654:	.word	0x2001c9cc
    9658:	.word	0x2001ca38
    965c:	.word	0x2001ca40
    9660:	.word	0x2001c9c9
    9664:	.word	0x004000c8
    9668:	.word	0x00013724
    966c:	.word	0x4007208c
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    9670:	bl	8af0 <usb_malloc>
				if (p) {
    9674:	cmp	r0, #0
    9676:	beq.w	9792 <usb_isr+0xa62>
					table[index(i, RX, EVEN)].addr = p->buf;
    967a:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    967c:	ldr	r2, [pc, #372]	; (97f4 <usb_isr+0xac4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    967e:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9682:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    9686:	bl	8af0 <usb_malloc>
				if (p) {
    968a:	cmp	r0, #0
    968c:	beq.n	9786 <usb_isr+0xa56>
					table[index(i, RX, ODD)].addr = p->buf;
    968e:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9690:	ldr	r2, [pc, #356]	; (97f8 <usb_isr+0xac8>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    9692:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9696:	str.w	r2, [r9, #72]	; 0x48
    969a:	b.n	921a <usb_isr+0x4ea>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    969c:	bl	8af0 <usb_malloc>
				if (p) {
    96a0:	cmp	r0, #0
    96a2:	beq.n	977a <usb_isr+0xa4a>
					table[index(i, RX, EVEN)].addr = p->buf;
    96a4:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    96a6:	ldr	r2, [pc, #332]	; (97f4 <usb_isr+0xac4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    96a8:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    96ac:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    96b0:	bl	8af0 <usb_malloc>
				if (p) {
    96b4:	cmp	r0, #0
    96b6:	beq.n	976e <usb_isr+0xa3e>
					table[index(i, RX, ODD)].addr = p->buf;
    96b8:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    96ba:	ldr	r2, [pc, #316]	; (97f8 <usb_isr+0xac8>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    96bc:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    96c0:	str.w	r2, [r9, #40]	; 0x28
    96c4:	b.n	91fe <usb_isr+0x4ce>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    96c6:	ldr.w	r0, [r1, #156]	; 0x9c
    96ca:	subs	r0, #8
    96cc:	bl	8b30 <usb_free>
    96d0:	b.n	914e <usb_isr+0x41e>
    96d2:	ldr.w	r0, [r1, #148]	; 0x94
    96d6:	subs	r0, #8
    96d8:	bl	8b30 <usb_free>
    96dc:	b.n	9142 <usb_isr+0x412>
    96de:	ldr	r0, [r1, #92]	; 0x5c
    96e0:	subs	r0, #8
    96e2:	bl	8b30 <usb_free>
    96e6:	b.n	90ee <usb_isr+0x3be>
    96e8:	ldr	r0, [r1, #84]	; 0x54
    96ea:	subs	r0, #8
    96ec:	bl	8b30 <usb_free>
    96f0:	b.n	90e2 <usb_isr+0x3b2>
    96f2:	ldr	r0, [r1, #76]	; 0x4c
    96f4:	subs	r0, #8
    96f6:	bl	8b30 <usb_free>
    96fa:	b.n	90d6 <usb_isr+0x3a6>
    96fc:	ldr	r0, [r1, #68]	; 0x44
    96fe:	subs	r0, #8
    9700:	bl	8b30 <usb_free>
    9704:	b.n	90ca <usb_isr+0x39a>
    9706:	ldr	r0, [r1, #60]	; 0x3c
    9708:	subs	r0, #8
    970a:	bl	8b30 <usb_free>
    970e:	b.n	90be <usb_isr+0x38e>
    9710:	ldr	r0, [r1, #52]	; 0x34
    9712:	subs	r0, #8
    9714:	bl	8b30 <usb_free>
    9718:	b.n	90b2 <usb_isr+0x382>
    971a:	ldr	r0, [r1, #44]	; 0x2c
    971c:	subs	r0, #8
    971e:	bl	8b30 <usb_free>
    9722:	b.n	90a6 <usb_isr+0x376>
    9724:	ldr	r0, [r4, #36]	; 0x24
    9726:	subs	r0, #8
    9728:	bl	8b30 <usb_free>
    972c:	b.n	909a <usb_isr+0x36a>
    972e:	ldr	r0, [r1, #124]	; 0x7c
    9730:	subs	r0, #8
    9732:	bl	8b30 <usb_free>
    9736:	b.n	911e <usb_isr+0x3ee>
    9738:	ldr	r0, [r1, #116]	; 0x74
    973a:	subs	r0, #8
    973c:	bl	8b30 <usb_free>
    9740:	b.n	9112 <usb_isr+0x3e2>
    9742:	ldr	r0, [r1, #108]	; 0x6c
    9744:	subs	r0, #8
    9746:	bl	8b30 <usb_free>
    974a:	b.n	9106 <usb_isr+0x3d6>
    974c:	ldr	r0, [r1, #100]	; 0x64
    974e:	subs	r0, #8
    9750:	bl	8b30 <usb_free>
    9754:	b.n	90fa <usb_isr+0x3ca>
    9756:	ldr.w	r0, [r1, #140]	; 0x8c
    975a:	subs	r0, #8
    975c:	bl	8b30 <usb_free>
    9760:	b.n	9136 <usb_isr+0x406>
    9762:	ldr.w	r0, [r1, #132]	; 0x84
    9766:	subs	r0, #8
    9768:	bl	8b30 <usb_free>
    976c:	b.n	912a <usb_isr+0x3fa>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    976e:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    9770:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    9774:	adds	r2, #1
    9776:	strb	r2, [r5, #0]
    9778:	b.n	91fe <usb_isr+0x4ce>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    977a:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    977c:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    9780:	adds	r2, #1
    9782:	strb	r2, [r5, #0]
    9784:	b.n	96b0 <usb_isr+0x980>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    9786:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    9788:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    978c:	adds	r2, #1
    978e:	strb	r2, [r5, #0]
    9790:	b.n	921a <usb_isr+0x4ea>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    9792:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    9794:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    9798:	adds	r2, #1
    979a:	strb	r2, [r5, #0]
    979c:	b.n	9686 <usb_isr+0x956>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    979e:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    97a0:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    97a4:	adds	r2, #1
    97a6:	strb	r2, [r5, #0]
    97a8:	b.n	924c <usb_isr+0x51c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    97aa:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    97ac:	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    97b0:	adds	r2, #1
    97b2:	strb	r2, [r5, #0]
    97b4:	b.n	95d4 <usb_isr+0x8a4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    97b6:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    97b8:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    97bc:	adds	r2, #1
    97be:	strb	r2, [r5, #0]
    97c0:	b.n	9234 <usb_isr+0x504>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    97c2:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    97c4:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    97c8:	adds	r2, #1
    97ca:	strb	r2, [r5, #0]
    97cc:	b.n	9602 <usb_isr+0x8d2>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    97ce:	bkpt	0x0000
    97d0:	cmp.w	lr, #64	; 0x40
    97d4:	mov	ip, lr
    97d6:	it	cs
    97d8:	movcs.w	ip, #64	; 0x40
    97dc:	add.w	r3, r4, ip
    97e0:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    97e2:	movs	r3, #1
    97e4:	rsb	r0, ip, lr
    97e8:	mov.w	r8, ip, lsl #16
    97ec:	movs	r2, #0
    97ee:	str	r3, [sp, #4]
    97f0:	b.n	9268 <usb_isr+0x538>
    97f2:	nop
    97f4:	.word	0x00400088
    97f8:	.word	0x004000c8

000097fc <usb_init>:
}



void usb_init(void)
{
    97fc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    9800:	bl	a744 <usb_init_serialnumber>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    9804:	ldr	r4, [pc, #188]	; (98c4 <usb_init+0xc8>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9806:	ldr	r3, [pc, #192]	; (98c8 <usb_init+0xcc>)

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    9808:	ldr	r0, [pc, #192]	; (98cc <usb_init+0xd0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    980a:	ldr.w	r8, [pc, #216]	; 98e4 <usb_init+0xe8>
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    980e:	ldr	r7, [pc, #192]	; (98d0 <usb_init+0xd4>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    9810:	ldr	r5, [pc, #192]	; (98d4 <usb_init+0xd8>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    9812:	ldr	r6, [pc, #196]	; (98d8 <usb_init+0xdc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    9814:	ldr.w	ip, [pc, #208]	; 98e8 <usb_init+0xec>
	USB0_ERRSTAT = 0xFF;
    9818:	ldr.w	lr, [pc, #208]	; 98ec <usb_init+0xf0>
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    981c:	movs	r2, #0
    981e:	str	r2, [r3, #0]
		table[i].addr = 0;
    9820:	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9822:	str	r2, [r3, #8]
		table[i].addr = 0;
    9824:	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9826:	str	r2, [r3, #16]
		table[i].addr = 0;
    9828:	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    982a:	str	r2, [r3, #24]
		table[i].addr = 0;
    982c:	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    982e:	str	r2, [r3, #32]
		table[i].addr = 0;
    9830:	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9832:	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    9834:	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9836:	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    9838:	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    983a:	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    983c:	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    983e:	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    9840:	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9842:	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    9844:	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9846:	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    9848:	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    984a:	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    984c:	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    984e:	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    9850:	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9852:	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    9854:	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    9856:	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    9858:	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    985a:	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    985c:	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    985e:	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    9862:	ldr	r1, [r4, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    9864:	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    9868:	orr.w	r1, r1, #262144	; 0x40000
    986c:	str	r1, [r4, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    986e:	ldr	r1, [r0, #0]
    9870:	orr.w	r1, r1, #50331648	; 0x3000000
    9874:	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    9876:	ubfx	r1, r3, #8, #8
    987a:	strb.w	r1, [r8]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    987e:	add.w	r4, r4, #172032	; 0x2a000
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    9882:	ubfx	r1, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    9886:	lsrs	r3, r3, #24
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    9888:	strb	r1, [r7, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    988a:	adds	r4, #204	; 0xcc
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    988c:	strb	r3, [r5, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    988e:	add.w	r0, r0, #2684354560	; 0xa0000000
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    9892:	movs	r3, #255	; 0xff
    9894:	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    9898:	ldr	r5, [pc, #64]	; (98dc <usb_init+0xe0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    989a:	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    989e:	addw	r0, r0, #2308	; 0x904
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    98a2:	strb	r3, [r6, #0]
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    98a4:	ldr	r1, [pc, #56]	; (98e0 <usb_init+0xe4>)
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    98a6:	movs	r3, #1
    98a8:	strb.w	r3, [r8, #-8]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    98ac:	movs	r6, #112	; 0x70

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    98ae:	strb	r2, [r4, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    98b0:	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    98b4:	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    98b6:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    98ba:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    98bc:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    98be:	strb	r2, [r1, #0]
    98c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    98c4:	.word	0x40048034
    98c8:	.word	0x1fff0000
    98cc:	.word	0x4000d800
    98d0:	.word	0x400720b0
    98d4:	.word	0x400720b4
    98d8:	.word	0x40072010
    98dc:	.word	0xe000e435
    98e0:	.word	0x40072108
    98e4:	.word	0x4007209c
    98e8:	.word	0x40072080
    98ec:	.word	0x40072088

000098f0 <DMAChannel::begin(bool)>:
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    98f0:	push	{r4, r5, r6, r7, lr}
	uint32_t ch = 0;

	__disable_irq();
    98f2:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    98f4:	cbnz	r1, 991e <DMAChannel::begin(bool)+0x2e>
    98f6:	ldr	r2, [r0, #0]
    98f8:	cbz	r2, 991e <DMAChannel::begin(bool)+0x2e>
    98fa:	ldrb	r3, [r0, #4]
    98fc:	cmp	r3, #15
    98fe:	bhi.n	991e <DMAChannel::begin(bool)+0x2e>
	  && (dma_channel_allocated_mask & (1 << channel))
    9900:	ldr	r4, [pc, #160]	; (99a4 <DMAChannel::begin(bool)+0xb4>)
    9902:	ldrh	r1, [r4, #0]
    9904:	asr.w	r5, r1, r3
    9908:	lsls	r5, r5, #31
    990a:	bpl.n	9922 <DMAChannel::begin(bool)+0x32>
	  && (uint32_t)TCD == (uint32_t)(0x40009000 + channel * 32)) {
    990c:	add.w	r3, r3, #33554432	; 0x2000000
    9910:	add.w	r3, r3, #1152	; 0x480
    9914:	cmp.w	r2, r3, lsl #5
    9918:	bne.n	9922 <DMAChannel::begin(bool)+0x32>
		// DMA channel already allocated
		__enable_irq();
    991a:	cpsie	i
		return;
    991c:	pop	{r4, r5, r6, r7, pc}
    991e:	ldr	r4, [pc, #132]	; (99a4 <DMAChannel::begin(bool)+0xb4>)
    9920:	ldrh	r1, [r4, #0]
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    9922:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    9924:	asr.w	r2, r1, r3
    9928:	ands.w	r2, r2, #1
    992c:	beq.n	993e <DMAChannel::begin(bool)+0x4e>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    992e:	adds	r3, #1
    9930:	cmp	r3, #16
    9932:	bne.n	9924 <DMAChannel::begin(bool)+0x34>
			__enable_irq();
    9934:	cpsie	i
			TCD = (TCD_t *)0;
    9936:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    9938:	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    993a:	str	r2, [r0, #0]
    993c:	pop	{r4, r5, r6, r7, pc}
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    993e:	movs	r5, #1
    9940:	lsls	r5, r3
    9942:	orrs	r1, r5
    9944:	strh	r1, [r4, #0]
			__enable_irq();
    9946:	cpsie	i
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    9948:	ldr	r6, [pc, #92]	; (99a8 <DMAChannel::begin(bool)+0xb8>)
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    994a:	ldr	r5, [pc, #96]	; (99ac <DMAChannel::begin(bool)+0xbc>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    994c:	ldr	r7, [pc, #96]	; (99b0 <DMAChannel::begin(bool)+0xc0>)
#endif
	DMA_CERQ = ch;
    994e:	ldr.w	lr, [pc, #104]	; 99b8 <DMAChannel::begin(bool)+0xc8>
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    9952:	uxtb	r1, r3
    9954:	strb	r1, [r0, #4]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    9956:	ldr	r4, [r6, #0]
    9958:	orr.w	r4, r4, #2
    995c:	str	r4, [r6, #0]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    995e:	ldr	r4, [r5, #0]
    9960:	orr.w	r4, r4, #2
    9964:	str	r4, [r5, #0]
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    9966:	sub.w	r6, r6, #262144	; 0x40000
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    996a:	movw	r4, #1154	; 0x482
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
    996e:	sub.w	r5, r5, #262144	; 0x40000
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    9972:	add.w	r3, r3, #33554432	; 0x2000000
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    9976:	str	r4, [r7, #0]
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    9978:	add.w	r3, r3, #1152	; 0x480
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    997c:	subs	r6, #34	; 0x22
	DMA_CEEI = ch;
    997e:	subs	r5, #36	; 0x24
	DMA_CINT = ch;
    9980:	ldr	r4, [pc, #48]	; (99b4 <DMAChannel::begin(bool)+0xc4>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
    9982:	strb.w	r1, [lr]
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    9986:	lsls	r3, r3, #5
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    9988:	strb	r1, [r6, #0]
	DMA_CEEI = ch;
    998a:	strb	r1, [r5, #0]
	DMA_CINT = ch;
    998c:	strb	r1, [r4, #0]
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    998e:	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    9990:	str	r2, [r3, #0]
	*p++ = 0;
    9992:	str	r2, [r3, #4]
	*p++ = 0;
    9994:	str	r2, [r3, #8]
	*p++ = 0;
    9996:	str	r2, [r3, #12]
	*p++ = 0;
    9998:	str	r2, [r3, #16]
	*p++ = 0;
    999a:	str	r2, [r3, #20]
	*p++ = 0;
    999c:	str	r2, [r3, #24]
	*p++ = 0;
    999e:	str	r2, [r3, #28]
    99a0:	pop	{r4, r5, r6, r7, pc}
    99a2:	nop
    99a4:	.word	0x2001ca48
    99a8:	.word	0x40048040
    99ac:	.word	0x4004803c
    99b0:	.word	0x40008000
    99b4:	.word	0x4000801f
    99b8:	.word	0x4000801a

000099bc <DMAChannel::release()>:
}

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    99bc:	ldrb	r3, [r0, #4]
    99be:	cmp	r3, #15
    99c0:	bhi.n	99e8 <DMAChannel::release()+0x2c>
	DMA_CERQ = channel;
    99c2:	ldr	r2, [pc, #40]	; (99ec <DMAChannel::release()+0x30>)
	*p++ = 0;
	*p++ = 0;
}

void DMAChannel::release(void)
{
    99c4:	push	{r4}
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
    99c6:	strb	r3, [r2, #0]
	__disable_irq();
    99c8:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    99ca:	ldr	r1, [pc, #36]	; (99f0 <DMAChannel::release()+0x34>)
    99cc:	ldrb	r4, [r0, #4]
    99ce:	ldrh	r2, [r1, #0]
    99d0:	movs	r3, #1
    99d2:	lsls	r3, r4
    99d4:	bic.w	r3, r2, r3
    99d8:	strh	r3, [r1, #0]
	__enable_irq();
    99da:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    99dc:	movs	r2, #16
	TCD = (TCD_t *)0;
    99de:	movs	r3, #0
}
    99e0:	ldr.w	r4, [sp], #4
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
    99e4:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    99e6:	str	r3, [r0, #0]
}
    99e8:	bx	lr
    99ea:	nop
    99ec:	.word	0x4000801a
    99f0:	.word	0x2001ca48

000099f4 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    99f4:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    99f6:	mrs	r2, PRIMASK
		__disable_irq();
    99fa:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    99fc:	ldrb	r3, [r0, #29]
    99fe:	cbnz	r3, 9a0e <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    9a00:	ldrb	r1, [r0, #28]
    9a02:	cmp	r1, #1
    9a04:	beq.n	9a18 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    9a06:	cmp	r1, #3
    9a08:	beq.n	9a2c <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    9a0a:	movs	r3, #1
    9a0c:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9a0e:	cbnz	r2, 9a12 <EventResponder::triggerEventNotImmediate()+0x1e>
    9a10:	cpsie	i
	}
	enableInterrupts(irq);
}
    9a12:	ldr.w	r4, [sp], #4
    9a16:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    9a18:	ldr	r4, [pc, #68]	; (9a60 <EventResponder::triggerEventNotImmediate()+0x6c>)
    9a1a:	ldr	r1, [r4, #0]
    9a1c:	cbz	r1, 9a48 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    9a1e:	ldr	r1, [pc, #68]	; (9a64 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    9a20:	str	r3, [r0, #20]
				_prev = lastYield;
    9a22:	ldr	r3, [r1, #0]
    9a24:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    9a26:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    9a28:	str	r0, [r3, #20]
    9a2a:	b.n	9a0a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    9a2c:	ldr	r4, [pc, #56]	; (9a68 <EventResponder::triggerEventNotImmediate()+0x74>)
    9a2e:	ldr	r1, [r4, #0]
    9a30:	cbz	r1, 9a54 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    9a32:	ldr	r1, [pc, #56]	; (9a6c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    9a34:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    9a36:	ldr	r3, [r1, #0]
    9a38:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    9a3a:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    9a3c:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    9a3e:	ldr	r3, [pc, #48]	; (9a70 <EventResponder::triggerEventNotImmediate()+0x7c>)
    9a40:	mov.w	r1, #268435456	; 0x10000000
    9a44:	str	r1, [r3, #0]
    9a46:	b.n	9a0a <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    9a48:	ldr	r3, [pc, #24]	; (9a64 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    9a4a:	str	r1, [r0, #20]
				_prev = nullptr;
    9a4c:	str	r1, [r0, #24]
				firstYield = this;
    9a4e:	str	r0, [r4, #0]
				lastYield = this;
    9a50:	str	r0, [r3, #0]
    9a52:	b.n	9a0a <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    9a54:	ldr	r3, [pc, #20]	; (9a6c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    9a56:	str	r1, [r0, #20]
				_prev = nullptr;
    9a58:	str	r1, [r0, #24]
				firstInterrupt = this;
    9a5a:	str	r0, [r4, #0]
				lastInterrupt = this;
    9a5c:	str	r0, [r3, #0]
    9a5e:	b.n	9a3e <EventResponder::triggerEventNotImmediate()+0x4a>
    9a60:	.word	0x2001ca5c
    9a64:	.word	0x2001ca58
    9a68:	.word	0x2001ca4c
    9a6c:	.word	0x2001ca50
    9a70:	.word	0xe000ed04

00009a74 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    9a74:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9a76:	mrs	r2, PRIMASK
		__disable_irq();
    9a7a:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    9a7c:	ldr	r4, [pc, #48]	; (9ab0 <EventResponder::runFromInterrupt()+0x3c>)
    9a7e:	ldr	r0, [r4, #0]
		if (first) {
    9a80:	cbz	r0, 9aa4 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    9a82:	ldr	r6, [pc, #48]	; (9ab4 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    9a84:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    9a86:	ldr	r3, [r0, #20]
    9a88:	str	r3, [r4, #0]
			if (firstInterrupt) {
    9a8a:	cbz	r3, 9aaa <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    9a8c:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9a8e:	cbnz	r2, 9a92 <EventResponder::runFromInterrupt()+0x1e>
    9a90:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    9a92:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    9a94:	ldr	r3, [r0, #8]
    9a96:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9a98:	mrs	r2, PRIMASK
		__disable_irq();
    9a9c:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    9a9e:	ldr	r0, [r4, #0]
		if (first) {
    9aa0:	cmp	r0, #0
    9aa2:	bne.n	9a86 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9aa4:	cbnz	r2, 9aa8 <EventResponder::runFromInterrupt()+0x34>
    9aa6:	cpsie	i
    9aa8:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    9aaa:	str	r3, [r6, #0]
    9aac:	b.n	9a8e <EventResponder::runFromInterrupt()+0x1a>
    9aae:	nop
    9ab0:	.word	0x2001ca4c
    9ab4:	.word	0x2001ca50

00009ab8 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    9ab8:	b.w	9a74 <EventResponder::runFromInterrupt()>

00009abc <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    9abc:	ldr	r2, [pc, #96]	; (9b20 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    9abe:	push	{r4, r5}
	if (listActive == nullptr) {
    9ac0:	ldr	r4, [r2, #0]
    9ac2:	cmp	r4, #0
    9ac4:	beq.n	9b16 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    9ac6:	ldr	r3, [r0, #0]
    9ac8:	ldr	r1, [r4, #0]
    9aca:	cmp	r3, r1
    9acc:	bcs.n	9aec <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    9ace:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    9ad0:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    9ad2:	str	r4, [r0, #8]
		_prev = nullptr;
    9ad4:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    9ad6:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    9ad8:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    9ada:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    9adc:	movs	r3, #2
    9ade:	strb	r3, [r0, #20]
}
    9ae0:	pop	{r4, r5}
    9ae2:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    9ae4:	ldr	r1, [r2, #0]
    9ae6:	cmp	r3, r1
    9ae8:	mov	r4, r2
    9aea:	bcc.n	9afe <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    9aec:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    9aee:	subs	r3, r3, r1
    9af0:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    9af2:	cmp	r2, #0
    9af4:	bne.n	9ae4 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    9af6:	str	r2, [r0, #8]
		_prev = timer;
    9af8:	str	r4, [r0, #12]
		timer->_next = this;
    9afa:	str	r0, [r4, #8]
    9afc:	b.n	9adc <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    9afe:	ldr	r2, [r2, #12]
    9b00:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    9b02:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    9b04:	str	r0, [r4, #12]
				_prev->_next = this;
    9b06:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    9b08:	subs	r3, r1, r3
				_state = TimerActive;
    9b0a:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    9b0c:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    9b0e:	str	r3, [r4, #0]
				_state = TimerActive;
    9b10:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    9b12:	pop	{r4, r5}
    9b14:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    9b16:	str	r4, [r0, #8]
		_prev = nullptr;
    9b18:	str	r4, [r0, #12]
		listActive = this;
    9b1a:	str	r0, [r2, #0]
    9b1c:	b.n	9adc <MillisTimer::addToActiveList()+0x20>
    9b1e:	nop
    9b20:	.word	0x2001ca54

00009b24 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    9b24:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    9b26:	ldr	r6, [pc, #136]	; (9bb0 <MillisTimer::runFromTimer()+0x8c>)
    9b28:	ldr	r4, [r6, #0]
	while (timer) {
    9b2a:	cbz	r4, 9b78 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    9b2c:	ldr	r3, [r4, #0]
    9b2e:	cmp	r3, #0
    9b30:	bne.n	9ba8 <MillisTimer::runFromTimer()+0x84>
    9b32:	ldr	r7, [pc, #128]	; (9bb4 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    9b34:	mov	r5, r3
    9b36:	b.n	9b42 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    9b38:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    9b3a:	cbz	r4, 9b78 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    9b3c:	ldr	r3, [r4, #0]
    9b3e:	cmp	r3, #0
    9b40:	bne.n	9ba8 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    9b42:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    9b44:	cbz	r3, 9b48 <MillisTimer::runFromTimer()+0x24>
    9b46:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    9b48:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    9b4a:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    9b4c:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    9b4e:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    9b50:	ldr	r3, [r3, #0]
    9b52:	cmp	r3, r7
    9b54:	bne.n	9b9a <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    9b56:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    9b58:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    9b5a:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    9b5c:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    9b5e:	beq.n	9ba2 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    9b60:	bl	99f4 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    9b64:	ldr	r3, [r4, #4]
    9b66:	cmp	r3, #0
    9b68:	beq.n	9b38 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    9b6a:	str	r3, [r4, #0]
				timer->addToActiveList();
    9b6c:	mov	r0, r4
    9b6e:	bl	9abc <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    9b72:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    9b74:	cmp	r4, #0
    9b76:	bne.n	9b3c <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9b78:	mrs	r3, PRIMASK
		__disable_irq();
    9b7c:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    9b7e:	ldr	r2, [pc, #56]	; (9bb8 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    9b80:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    9b82:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    9b84:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    9b86:	cbnz	r3, 9b8a <MillisTimer::runFromTimer()+0x66>
    9b88:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    9b8a:	cbz	r0, 9b98 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    9b8c:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    9b8e:	bl	9abc <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    9b92:	mov	r0, r4
    9b94:	cmp	r0, #0
    9b96:	bne.n	9b8c <MillisTimer::runFromTimer()+0x68>
    9b98:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    9b9a:	mov	r2, r4
    9b9c:	movs	r1, #0
    9b9e:	blx	r3
    9ba0:	b.n	9b64 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    9ba2:	ldr	r3, [r0, #8]
    9ba4:	blx	r3
    9ba6:	b.n	9b64 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    9ba8:	subs	r3, #1
    9baa:	str	r3, [r4, #0]
			break;
    9bac:	b.n	9b78 <MillisTimer::runFromTimer()+0x54>
    9bae:	nop
    9bb0:	.word	0x2001ca54
    9bb4:	.word	0x000022fd
    9bb8:	.word	0x2001ca64

00009bbc <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    9bbc:	ldr	r2, [pc, #8]	; (9bc8 <systick_isr+0xc>)
    9bbe:	ldr	r3, [r2, #0]
    9bc0:	adds	r3, #1
    9bc2:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    9bc4:	b.w	9b24 <MillisTimer::runFromTimer()>
    9bc8:	.word	0x2001c95c

00009bcc <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    9bcc:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    9bce:	ldr	r4, [pc, #176]	; (9c80 <yield+0xb4>)
    9bd0:	ldrb	r3, [r4, #0]
    9bd2:	cbz	r3, 9bd6 <yield+0xa>
    9bd4:	pop	{r3, r4, r5, pc}
	running = 1;
    9bd6:	movs	r3, #1
    9bd8:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    9bda:	bl	83a0 <usb_serial_available>
	if (Serial.available()) serialEvent();
    9bde:	cmp	r0, #0
    9be0:	bne.n	9c68 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    9be2:	bl	a514 <serial_available>
	if (SerialUSB1.available()) serialEventUSB1();
#endif
#ifdef USB_TRIPLE_SERIAL
	if (SerialUSB2.available()) serialEventUSB2();
#endif
	if (Serial1.available()) serialEvent1();
    9be6:	cmp	r0, #0
    9be8:	bne.n	9c62 <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    9bea:	bl	a2f0 <serial2_available>
	if (Serial2.available()) serialEvent2();
    9bee:	cmp	r0, #0
    9bf0:	bne.n	9c5c <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    9bf2:	bl	a80c <serial3_available>
	if (Serial3.available()) serialEvent3();
    9bf6:	cbnz	r0, 9c56 <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    9bf8:	bl	a41c <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    9bfc:	cbnz	r0, 9c50 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    9bfe:	bl	a1f8 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    9c02:	cbnz	r0, 9c4a <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    9c04:	bl	a640 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    9c08:	cbnz	r0, 9c44 <yield+0x78>
#endif
	running = 0;
    9c0a:	movs	r3, #0
    9c0c:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    9c0e:	mrs	r3, IPSR
		if (ipsr != 0) return;
    9c12:	cmp	r3, #0
    9c14:	bne.n	9bd4 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9c16:	mrs	r1, PRIMASK
		__disable_irq();
    9c1a:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    9c1c:	ldr	r3, [pc, #100]	; (9c84 <yield+0xb8>)
    9c1e:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    9c20:	cbz	r0, 9c6e <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    9c22:	ldr	r4, [pc, #100]	; (9c88 <yield+0xbc>)
    9c24:	ldrb	r2, [r4, #0]
    9c26:	cbnz	r2, 9c6e <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    9c28:	ldr	r5, [r0, #20]
    9c2a:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    9c2c:	movs	r3, #1
    9c2e:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    9c30:	cbz	r5, 9c76 <yield+0xaa>
			firstYield->_prev = nullptr;
    9c32:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9c34:	cbnz	r1, 9c38 <yield+0x6c>
    9c36:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    9c38:	movs	r5, #0
    9c3a:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    9c3c:	ldr	r3, [r0, #8]
    9c3e:	blx	r3
		runningFromYield = false;
    9c40:	strb	r5, [r4, #0]
    9c42:	b.n	9bd4 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    9c44:	bl	a1ec <serialEvent6()>
    9c48:	b.n	9c0a <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    9c4a:	bl	9c90 <serialEvent5()>
    9c4e:	b.n	9c04 <yield+0x38>
#endif
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    9c50:	bl	9dbc <serialEvent4()>
    9c54:	b.n	9bfe <yield+0x32>
#ifdef USB_TRIPLE_SERIAL
	if (SerialUSB2.available()) serialEventUSB2();
#endif
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    9c56:	bl	a904 <serialEvent3()>
    9c5a:	b.n	9bf8 <yield+0x2c>
#endif
#ifdef USB_TRIPLE_SERIAL
	if (SerialUSB2.available()) serialEventUSB2();
#endif
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    9c5c:	bl	9db8 <serialEvent2()>
    9c60:	b.n	9bf2 <yield+0x26>
	if (SerialUSB1.available()) serialEventUSB1();
#endif
#ifdef USB_TRIPLE_SERIAL
	if (SerialUSB2.available()) serialEventUSB2();
#endif
	if (Serial1.available()) serialEvent1();
    9c62:	bl	9dd0 <serialEvent1()>
    9c66:	b.n	9bea <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    9c68:	bl	9cbc <serialEvent()>
    9c6c:	b.n	9be2 <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9c6e:	cmp	r1, #0
    9c70:	bne.n	9bd4 <yield+0x8>
    9c72:	cpsie	i
    9c74:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    9c76:	ldr	r3, [pc, #20]	; (9c8c <yield+0xc0>)
    9c78:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9c7a:	cmp	r1, #0
    9c7c:	bne.n	9c38 <yield+0x6c>
    9c7e:	b.n	9c36 <yield+0x6a>
    9c80:	.word	0x2001ca68
    9c84:	.word	0x2001ca5c
    9c88:	.word	0x2001ca60
    9c8c:	.word	0x2001ca58

00009c90 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    9c90:	bx	lr
    9c92:	nop

00009c94 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    9c94:	b.w	83bc <usb_serial_flush_input>

00009c98 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    9c98:	b.w	8370 <usb_serial_peekchar>

00009c9c <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    9c9c:	b.w	8328 <usb_serial_getchar>

00009ca0 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    9ca0:	b.w	83a0 <usb_serial_available>

00009ca4 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    9ca4:	b.w	855c <usb_serial_flush_output>

00009ca8 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    9ca8:	b.w	8514 <usb_serial_write_buffer_free>

00009cac <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9cac:	mov	r0, r1
    9cae:	mov	r1, r2
    9cb0:	b.w	83f4 <usb_serial_write>

00009cb4 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9cb4:	mov	r0, r1
    9cb6:	b.w	84fc <usb_serial_putchar>
    9cba:	nop

00009cbc <serialEvent()>:
    9cbc:	bx	lr
    9cbe:	nop

00009cc0 <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    9cc0:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    9cc2:	mov	r6, r1
    9cc4:	cbz	r1, 9ce4 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    9cc6:	cbz	r2, 9ce8 <Print::write(unsigned char const*, unsigned int)+0x28>
    9cc8:	mov	r7, r0
    9cca:	mov	r4, r2
    9ccc:	movs	r5, #0
    9cce:	ldr	r3, [r7, #0]
    9cd0:	ldrb.w	r1, [r6], #1
    9cd4:	ldr	r3, [r3, #0]
    9cd6:	mov	r0, r7
    9cd8:	blx	r3
    9cda:	subs	r4, #1
    9cdc:	add	r5, r0
    9cde:	bne.n	9cce <Print::write(unsigned char const*, unsigned int)+0xe>
    9ce0:	mov	r0, r5
    9ce2:	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    9ce4:	mov	r0, r1
    9ce6:	pop	{r3, r4, r5, r6, r7, pc}
    9ce8:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    9cea:	pop	{r3, r4, r5, r6, r7, pc}

00009cec <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    9cec:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    9cee:	ldr	r2, [pc, #24]	; (9d08 <Print::println()+0x1c>)
	return write(buf, 2);
    9cf0:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    9cf2:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    9cf4:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    9cf6:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    9cf8:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    9cfa:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    9cfe:	movs	r2, #2
    9d00:	blx	r3
}
    9d02:	add	sp, #12
    9d04:	ldr.w	pc, [sp], #4
    9d08:	.word	0x0001371c

00009d0c <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    9d0c:	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    9d0e:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    9d10:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    9d12:	ldr	r3, [r3, #4]
    9d14:	blx	r3
	return len;
}
    9d16:	mov	r0, r4
    9d18:	pop	{r4, pc}
    9d1a:	nop

00009d1c <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    9d1c:	push	{r1, r2, r3}
    9d1e:	push	{lr}
    9d20:	sub	sp, #8
    9d22:	add	r2, sp, #12
    9d24:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    9d28:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    9d2a:	bl	ffc8 <vdprintf>
#endif
}
    9d2e:	add	sp, #8
    9d30:	ldr.w	lr, [sp], #4
    9d34:	add	sp, #12
    9d36:	bx	lr

00009d38 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    9d38:	push	{r4, r5, r6, r7, lr}
    9d3a:	mov	r7, r0
    9d3c:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    9d3e:	cmp	r2, #0
    9d40:	beq.n	9daa <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    9d42:	cmp	r2, #1
    9d44:	it	eq
    9d46:	moveq	r2, #10
	}


	if (n == 0) {
    9d48:	cbz	r1, 9da0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    9d4a:	movs	r4, #33	; 0x21
    9d4c:	b.n	9d50 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    9d4e:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    9d50:	udiv	r5, r1, r2
    9d54:	mls	r1, r2, r5, r1
    9d58:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9d5a:	cmp	r1, #9
    9d5c:	add.w	r1, r0, #48	; 0x30
    9d60:	it	ls
    9d62:	uxtbls	r0, r1
    9d64:	add	r1, sp, #40	; 0x28
    9d66:	it	hi
    9d68:	addhi	r0, #55	; 0x37
    9d6a:	add	r1, r4
    9d6c:	it	hi
    9d6e:	uxtbhi	r0, r0
    9d70:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    9d74:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    9d76:	mov	r1, r5
    9d78:	cmp	r5, #0
    9d7a:	bne.n	9d4e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    9d7c:	cbz	r3, 9d8c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    9d7e:	subs	r4, #1
    9d80:	uxtb	r4, r4
		buf[i] = '-';
    9d82:	add	r3, sp, #40	; 0x28
    9d84:	add	r3, r4
    9d86:	movs	r2, #45	; 0x2d
    9d88:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    9d8c:	ldr	r3, [r7, #0]
    9d8e:	add	r2, sp, #4
    9d90:	adds	r1, r2, r4
    9d92:	ldr	r3, [r3, #4]
    9d94:	mov	r0, r7
    9d96:	rsb	r2, r4, #34	; 0x22
    9d9a:	blx	r3
}
    9d9c:	add	sp, #44	; 0x2c
    9d9e:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    9da0:	movs	r2, #48	; 0x30
    9da2:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    9da6:	movs	r4, #33	; 0x21
    9da8:	b.n	9d7c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    9daa:	ldr	r3, [r0, #0]
    9dac:	uxtb	r1, r1
    9dae:	ldr	r3, [r3, #0]
    9db0:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    9db2:	add	sp, #44	; 0x2c
    9db4:	pop	{r4, r5, r6, r7, pc}
    9db6:	nop

00009db8 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    9db8:	bx	lr
    9dba:	nop

00009dbc <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    9dbc:	bx	lr
    9dbe:	nop

00009dc0 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    9dc0:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    9dc2:	bl	19bc <setup>
	while (1) {
		loop();
    9dc6:	bl	1d20 <loop>
		yield();
    9dca:	bl	9bcc <yield>
    9dce:	b.n	9dc6 <main+0x6>

00009dd0 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    9dd0:	bx	lr
    9dd2:	nop

00009dd4 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:


// Set up the pool of audio data blocks
// placing them all onto the free list
void AudioStream::initialize_memory(audio_block_t *data, unsigned int num)
{
    9dd4:	cmp.w	r1, #896	; 0x380
    9dd8:	push	{r4, r5, r6, r7}
    9dda:	it	cs
    9ddc:	movcs.w	r1, #896	; 0x380
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
    9de0:	cpsid	i
	memory_pool = data;
    9de2:	ldr	r2, [pc, #76]	; (9e30 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5c>)
	memory_pool_first_mask = 0;
    9de4:	ldr	r4, [pc, #76]	; (9e34 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x60>)
    9de6:	ldr	r3, [pc, #80]	; (9e38 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x64>)

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
    9de8:	str	r0, [r2, #0]
	memory_pool_first_mask = 0;
    9dea:	movs	r2, #0
    9dec:	strh	r2, [r4, #0]
    9dee:	add.w	r4, r3, #112	; 0x70
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
    9df2:	str.w	r2, [r3, #4]!
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
    9df6:	cmp	r3, r4
    9df8:	bne.n	9df2 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x1e>
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    9dfa:	cbz	r1, 9e2a <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x56>
    9dfc:	ldr	r6, [pc, #60]	; (9e3c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x68>)
    9dfe:	movs	r3, #0
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    9e00:	movs	r7, #1
    9e02:	lsrs	r5, r3, #5
    9e04:	and.w	r4, r3, #31
    9e08:	ldr.w	r2, [r6, r5, lsl #2]
    9e0c:	lsl.w	r4, r7, r4
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    9e10:	adds	r3, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    9e12:	orrs	r2, r4
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    9e14:	cmp	r3, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    9e16:	str.w	r2, [r6, r5, lsl #2]
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    9e1a:	bne.n	9e02 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x2e>
    9e1c:	movs	r3, #0
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
    9e1e:	strh	r3, [r0, #2]
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
    9e20:	adds	r3, #1
    9e22:	cmp	r3, r1
    9e24:	add.w	r0, r0, #260	; 0x104
    9e28:	bne.n	9e1e <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x4a>
		data[i].memory_pool_index = i;
	}
	__enable_irq();
    9e2a:	cpsie	i

}
    9e2c:	pop	{r4, r5, r6, r7}
    9e2e:	bx	lr
    9e30:	.word	0x2001ca74
    9e34:	.word	0x2001caee
    9e38:	.word	0x2001ca78
    9e3c:	.word	0x2001ca7c

00009e40 <AudioStream::allocate()>:

// Allocate 1 audio data block.  If successful
// the caller is the only owner of this new block
audio_block_t * AudioStream::allocate(void)
{
    9e40:	push	{r4, r5, r6, r7}
	audio_block_t *block;
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
    9e42:	cpsid	i
	index = memory_pool_first_mask;
    9e44:	ldr	r7, [pc, #140]	; (9ed4 <AudioStream::allocate()+0x94>)
	p += index;
    9e46:	ldr	r6, [pc, #144]	; (9ed8 <AudioStream::allocate()+0x98>)
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
    9e48:	ldrh	r4, [r7, #0]
	p += index;
	while (1) {
		if (p >= end) {
    9e4a:	add.w	r3, r6, #112	; 0x70

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
    9e4e:	add.w	r0, r6, r4, lsl #2
	while (1) {
		if (p >= end) {
    9e52:	cmp	r0, r3
    9e54:	bcs.n	9e7c <AudioStream::allocate()+0x3c>
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    9e56:	ldr.w	r1, [r6, r4, lsl #2]
		if (avail) break;
    9e5a:	cbnz	r1, 9e84 <AudioStream::allocate()+0x44>
    9e5c:	adds	r2, r0, #4
    9e5e:	add.w	r5, r6, #115	; 0x73
    9e62:	adds	r3, r4, #1
    9e64:	subs	r5, r5, r2
    9e66:	add.w	r5, r3, r5, lsr #2
    9e6a:	b.n	9e74 <AudioStream::allocate()+0x34>
		if (p >= end) {
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    9e6c:	ldr.w	r1, [r2], #4
		if (avail) break;
    9e70:	cbnz	r1, 9e84 <AudioStream::allocate()+0x44>
    9e72:	adds	r3, #1
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    9e74:	cmp	r3, r5
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
		if (avail) break;
		index++;
    9e76:	mov	r4, r3
		p++;
    9e78:	mov	r0, r2
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    9e7a:	bne.n	9e6c <AudioStream::allocate()+0x2c>
			__enable_irq();
    9e7c:	cpsie	i
			//Serial.println("alloc:null");
			return NULL;
    9e7e:	movs	r0, #0
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    9e80:	pop	{r4, r5, r6, r7}
    9e82:	bx	lr
		avail = *p;
		if (avail) break;
		index++;
		p++;
	}
	n = __builtin_clz(avail);
    9e84:	clz	r3, r1
	avail &= ~(0x80000000 >> n);
    9e88:	mov.w	r2, #2147483648	; 0x80000000
    9e8c:	lsrs	r2, r3
    9e8e:	bic.w	r1, r1, r2
	*p = avail;
    9e92:	str	r1, [r0, #0]
	if (!avail) index++;
    9e94:	cbnz	r1, 9e98 <AudioStream::allocate()+0x58>
    9e96:	adds	r4, #1
	memory_pool_first_mask = index;
	used = memory_used + 1;
    9e98:	ldr	r1, [pc, #64]	; (9edc <AudioStream::allocate()+0x9c>)
	}
	n = __builtin_clz(avail);
	avail &= ~(0x80000000 >> n);
	*p = avail;
	if (!avail) index++;
	memory_pool_first_mask = index;
    9e9a:	strh	r4, [r7, #0]
	used = memory_used + 1;
    9e9c:	ldrh	r2, [r1, #0]
    9e9e:	adds	r2, #1
	memory_used = used;
    9ea0:	uxth	r4, r2
    9ea2:	strh	r4, [r1, #0]
	__enable_irq();
    9ea4:	cpsie	i
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    9ea6:	subs	r0, r0, r6
    9ea8:	asrs	r0, r0, #2
    9eaa:	rsb	r0, r3, r0, lsl #5
    9eae:	add.w	r0, r0, r0, lsl #6
    9eb2:	lsls	r3, r0, #2
    9eb4:	ldr	r0, [pc, #40]	; (9ee0 <AudioStream::allocate()+0xa0>)
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    9eb6:	ldr	r1, [pc, #44]	; (9ee4 <AudioStream::allocate()+0xa4>)
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    9eb8:	ldr	r0, [r0, #0]
    9eba:	add.w	r3, r3, #8032	; 0x1f60
    9ebe:	adds	r3, #28
	block->ref_count = 1;
    9ec0:	movs	r5, #1
    9ec2:	strb	r5, [r0, r3]
	if (used > memory_used_max) memory_used_max = used;
    9ec4:	ldrh	r5, [r1, #0]
    9ec6:	cmp	r2, r5
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    9ec8:	add	r0, r3
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    9eca:	it	hi
    9ecc:	strhhi	r4, [r1, #0]
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    9ece:	pop	{r4, r5, r6, r7}
    9ed0:	bx	lr
    9ed2:	nop
    9ed4:	.word	0x2001caee
    9ed8:	.word	0x2001ca7c
    9edc:	.word	0x2001caf0
    9ee0:	.word	0x2001ca74
    9ee4:	.word	0x2001ca70

00009ee8 <AudioStream::release(audio_block_struct*)>:
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    9ee8:	ldrh	r2, [r0, #2]
	uint32_t index = block->memory_pool_index >> 5;

	__disable_irq();
    9eea:	cpsid	i
	if (block->ref_count > 1) {
    9eec:	ldrb	r3, [r0, #0]
    9eee:	cmp	r3, #1
    9ef0:	bls.n	9efa <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
    9ef2:	subs	r3, #1
    9ef4:	strb	r3, [r0, #0]
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
	}
	__enable_irq();
    9ef6:	cpsie	i
    9ef8:	bx	lr
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
	uint32_t index = block->memory_pool_index >> 5;
    9efa:	asrs	r3, r2, #5

// Release ownership of a data block.  If no
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
    9efc:	push	{r4, r5, r6}
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    9efe:	ldr	r4, [pc, #48]	; (9f30 <AudioStream::release(audio_block_struct*)+0x48>)
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    9f00:	ldr	r5, [pc, #48]	; (9f34 <AudioStream::release(audio_block_struct*)+0x4c>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    9f02:	ldr.w	r1, [r4, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    9f06:	ldrh	r6, [r5, #0]
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    9f08:	mvns	r2, r2
    9f0a:	mov.w	r0, #2147483648	; 0x80000000
    9f0e:	and.w	r2, r2, #31
    9f12:	lsr.w	r2, r0, r2
    9f16:	orrs	r1, r2
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
    9f18:	ldr	r2, [pc, #28]	; (9f38 <AudioStream::release(audio_block_struct*)+0x50>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    9f1a:	str.w	r1, [r4, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    9f1e:	cmp	r3, r6
    9f20:	it	cc
    9f22:	strhcc	r3, [r5, #0]
		memory_used--;
    9f24:	ldrh	r3, [r2, #0]
    9f26:	subs	r3, #1
    9f28:	strh	r3, [r2, #0]
	}
	__enable_irq();
    9f2a:	cpsie	i
}
    9f2c:	pop	{r4, r5, r6}
    9f2e:	bx	lr
    9f30:	.word	0x2001ca7c
    9f34:	.word	0x2001caee
    9f38:	.word	0x2001caf0

00009f3c <AudioStream::transmit(audio_block_struct*, unsigned char)>:
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    9f3c:	ldr	r3, [r0, #12]
    9f3e:	cbz	r3, 9f6e <AudioStream::transmit(audio_block_struct*, unsigned char)+0x32>
// owned by this object.  Normally, a block must be released
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
    9f40:	push	{r4, r5}
    9f42:	b.n	9f48 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    9f44:	ldr	r3, [r3, #12]
    9f46:	cbz	r3, 9f6c <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
    9f48:	ldrb	r0, [r3, #8]
    9f4a:	cmp	r0, r2
    9f4c:	bne.n	9f44 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
			if (c->dst.inputQueue[c->dest_index] == NULL) {
    9f4e:	ldr	r0, [r3, #4]
    9f50:	ldrb	r4, [r3, #9]
    9f52:	ldr	r0, [r0, #16]
    9f54:	ldr.w	r5, [r0, r4, lsl #2]
    9f58:	cmp	r5, #0
    9f5a:	bne.n	9f44 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
				c->dst.inputQueue[c->dest_index] = block;
    9f5c:	str.w	r1, [r0, r4, lsl #2]
				block->ref_count++;
    9f60:	ldrb	r0, [r1, #0]
    9f62:	adds	r0, #1
    9f64:	strb	r0, [r1, #0]
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    9f66:	ldr	r3, [r3, #12]
    9f68:	cmp	r3, #0
    9f6a:	bne.n	9f48 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
				c->dst.inputQueue[c->dest_index] = block;
				block->ref_count++;
			}
		}
	}
}
    9f6c:	pop	{r4, r5}
    9f6e:	bx	lr

00009f70 <AudioStream::receiveReadOnly(unsigned int)>:
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    9f70:	ldrb	r3, [r0, #9]
    9f72:	cmp	r3, r1
    9f74:	bls.n	9f84 <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
    9f76:	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    9f78:	movs	r2, #0
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
    9f7a:	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    9f7e:	str.w	r2, [r3, r1, lsl #2]
	return in;
    9f82:	bx	lr
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    9f84:	movs	r0, #0
	in = inputQueue[index];
	inputQueue[index] = NULL;
	return in;
}
    9f86:	bx	lr

00009f88 <AudioConnection::connect()>:

void AudioConnection::connect(void)
{
	AudioConnection *p;

	if (isConnected) return;
    9f88:	ldrb	r3, [r0, #16]
    9f8a:	cbnz	r3, 9fd6 <AudioConnection::connect()+0x4e>
	if (dest_index > dst.num_inputs) return;
    9f8c:	ldr	r3, [r0, #4]
    9f8e:	ldrb	r2, [r0, #9]
    9f90:	ldrb	r3, [r3, #9]
    9f92:	cmp	r2, r3
    9f94:	bhi.n	9fd6 <AudioConnection::connect()+0x4e>
	return in;
}


void AudioConnection::connect(void)
{
    9f96:	push	{r4, r5}
	AudioConnection *p;

	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
    9f98:	cpsid	i
	p = src.destination_list;
    9f9a:	ldr	r4, [r0, #0]
    9f9c:	ldr	r3, [r4, #12]
	if (p == NULL) {
    9f9e:	cbz	r3, 9fec <AudioConnection::connect()+0x64>
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    9fa0:	ldr	r2, [r3, #12]
    9fa2:	cbz	r2, 9fb2 <AudioConnection::connect()+0x2a>
			if (&p->src == &this->src && &p->dst == &this->dst
    9fa4:	ldr	r1, [r3, #0]
    9fa6:	cmp	r4, r1
    9fa8:	beq.n	9fd8 <AudioConnection::connect()+0x50>
	return in;
}


void AudioConnection::connect(void)
{
    9faa:	mov	r3, r2
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    9fac:	ldr	r2, [r3, #12]
    9fae:	cmp	r2, #0
    9fb0:	bne.n	9fa4 <AudioConnection::connect()+0x1c>
				__enable_irq();
				return;
			}
			p = p->next_dest;
		}
		p->next_dest = this;
    9fb2:	str	r0, [r3, #12]
	}
	this->next_dest = NULL;
    9fb4:	movs	r3, #0
    9fb6:	str	r3, [r0, #12]
	src.numConnections++;
    9fb8:	ldrb	r3, [r4, #10]
    9fba:	adds	r3, #1
    9fbc:	strb	r3, [r4, #10]
	src.active = true;
    9fbe:	ldr	r2, [r0, #0]

	dst.numConnections++;
    9fc0:	ldr	r1, [r0, #4]
		}
		p->next_dest = this;
	}
	this->next_dest = NULL;
	src.numConnections++;
	src.active = true;
    9fc2:	movs	r3, #1
    9fc4:	strb	r3, [r2, #8]

	dst.numConnections++;
    9fc6:	ldrb	r2, [r1, #10]
    9fc8:	add	r2, r3
    9fca:	strb	r2, [r1, #10]
	dst.active = true;
    9fcc:	ldr	r2, [r0, #4]
    9fce:	strb	r3, [r2, #8]

	isConnected = true;
    9fd0:	strb	r3, [r0, #16]

	__enable_irq();
    9fd2:	cpsie	i
}
    9fd4:	pop	{r4, r5}
    9fd6:	bx	lr
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
			if (&p->src == &this->src && &p->dst == &this->dst
    9fd8:	ldr	r5, [r3, #4]
    9fda:	ldr	r1, [r0, #4]
    9fdc:	cmp	r5, r1
    9fde:	bne.n	9faa <AudioConnection::connect()+0x22>
				&& p->src_index == this->src_index && p->dest_index == this->dest_index) {
    9fe0:	ldrh	r1, [r3, #8]
    9fe2:	ldrh	r3, [r0, #8]
    9fe4:	cmp	r1, r3
    9fe6:	beq.n	9fd2 <AudioConnection::connect()+0x4a>
	return in;
}


void AudioConnection::connect(void)
{
    9fe8:	mov	r3, r2
    9fea:	b.n	9fac <AudioConnection::connect()+0x24>
	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
    9fec:	str	r0, [r4, #12]
    9fee:	b.n	9fb4 <AudioConnection::connect()+0x2c>

00009ff0 <AudioConnection::disconnect()>:

void AudioConnection::disconnect(void)
{
	AudioConnection *p;

	if (!isConnected) return;
    9ff0:	ldrb	r3, [r0, #16]

	__enable_irq();
}

void AudioConnection::disconnect(void)
{
    9ff2:	push	{r4, lr}
	AudioConnection *p;

	if (!isConnected) return;
    9ff4:	cmp	r3, #0
    9ff6:	beq.n	a05e <AudioConnection::disconnect()+0x6e>
	if (dest_index > dst.num_inputs) return;
    9ff8:	ldr	r3, [r0, #4]
    9ffa:	ldrb	r2, [r0, #9]
    9ffc:	ldrb	r3, [r3, #9]
    9ffe:	cmp	r2, r3
    a000:	bhi.n	a05e <AudioConnection::disconnect()+0x6e>
	__disable_irq();
    a002:	cpsid	i
	// Remove destination from source list
	p = src.destination_list;
    a004:	ldr	r2, [r0, #0]
    a006:	ldr	r3, [r2, #12]
	if (p == NULL) {
    a008:	cbz	r3, a05c <AudioConnection::disconnect()+0x6c>
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
    a00a:	cmp	r0, r3
    a00c:	bne.n	a014 <AudioConnection::disconnect()+0x24>
    a00e:	b.n	a064 <AudioConnection::disconnect()+0x74>
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
			if (p == this) {
    a010:	cmp	r0, r3
    a012:	beq.n	a01a <AudioConnection::disconnect()+0x2a>
				} else {
					p = NULL;
					break;
				}
			}
			p = p->next_dest;
    a014:	ldr	r3, [r3, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
    a016:	cmp	r3, #0
    a018:	bne.n	a010 <AudioConnection::disconnect()+0x20>
			p = p->next_dest;
		}
	}
//>>> PAH release the audio buffer properly
	//Remove possible pending src block from destination
	if(dst.inputQueue[dest_index] != NULL) {
    a01a:	ldr	r3, [r0, #4]
    a01c:	ldrb	r1, [r0, #9]
    a01e:	ldr	r3, [r3, #16]
    a020:	mov	r4, r0
    a022:	ldr.w	r0, [r3, r1, lsl #2]
    a026:	cbz	r0, a03c <AudioConnection::disconnect()+0x4c>
		AudioStream::release(dst.inputQueue[dest_index]);
    a028:	bl	9ee8 <AudioStream::release(audio_block_struct*)>
		// release() re-enables the IRQ. Need it to be disabled a little longer
		__disable_irq();
    a02c:	cpsid	i
		dst.inputQueue[dest_index] = NULL;
    a02e:	ldr	r3, [r4, #4]
    a030:	ldrb	r2, [r4, #9]
    a032:	ldr	r3, [r3, #16]
    a034:	movs	r1, #0
    a036:	str.w	r1, [r3, r2, lsl #2]
    a03a:	ldr	r2, [r4, #0]
	}

	//Check if the disconnected AudioStream objects should still be active
	src.numConnections--;
    a03c:	ldrb	r3, [r2, #10]
    a03e:	subs	r3, #1
    a040:	strb	r3, [r2, #10]
	if (src.numConnections == 0) {
    a042:	ldr	r3, [r4, #0]
    a044:	ldrb	r2, [r3, #10]
    a046:	cbnz	r2, a04a <AudioConnection::disconnect()+0x5a>
		src.active = false;
    a048:	strb	r2, [r3, #8]
	}

	dst.numConnections--;
    a04a:	ldr	r2, [r4, #4]
    a04c:	ldrb	r3, [r2, #10]
    a04e:	subs	r3, #1
    a050:	strb	r3, [r2, #10]
	if (dst.numConnections == 0) {
    a052:	ldr	r3, [r4, #4]
    a054:	ldrb	r2, [r3, #10]
    a056:	cbz	r2, a060 <AudioConnection::disconnect()+0x70>
		dst.active = false;
	}

	isConnected = false;
    a058:	movs	r3, #0
    a05a:	strb	r3, [r4, #16]

	__enable_irq();
    a05c:	cpsie	i
    a05e:	pop	{r4, pc}
		src.active = false;
	}

	dst.numConnections--;
	if (dst.numConnections == 0) {
		dst.active = false;
    a060:	strb	r2, [r3, #8]
    a062:	b.n	a058 <AudioConnection::disconnect()+0x68>
	if (p == NULL) {
//>>> PAH re-enable the IRQ
		__enable_irq();
		return;
	} else if (p == this) {
		if (p->next_dest) {
    a064:	ldr	r3, [r0, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
    a066:	str	r3, [r2, #12]
    a068:	b.n	a01a <AudioConnection::disconnect()+0x2a>
    a06a:	nop

0000a06c <AudioStream::update_setup()>:
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    a06c:	ldr	r3, [pc, #32]	; (a090 <AudioStream::update_setup()+0x24>)
    a06e:	ldrb	r2, [r3, #0]
    a070:	cbnz	r2, a08a <AudioStream::update_setup()+0x1e>
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    a072:	ldr	r0, [pc, #32]	; (a094 <AudioStream::update_setup()+0x28>)
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    a074:	ldr	r1, [pc, #32]	; (a098 <AudioStream::update_setup()+0x2c>)
// input and output based on interrupts, must check this variable in
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
    a076:	push	{r4}
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    a078:	movs	r4, #208	; 0xd0
    a07a:	strb	r4, [r0, #0]
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    a07c:	movs	r2, #1
	update_scheduled = true;
	return true;
    a07e:	mov	r0, r2

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    a080:	str	r2, [r1, #0]
	update_scheduled = true;
    a082:	strb	r2, [r3, #0]
	return true;
}
    a084:	ldr.w	r4, [sp], #4
    a088:	bx	lr
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    a08a:	movs	r0, #0
    a08c:	bx	lr
    a08e:	nop
    a090:	.word	0x2001ca78
    a094:	.word	0xe000e440
    a098:	.word	0xe000e108

0000a09c <software_isr>:

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    a09c:	ldr	r1, [pc, #104]	; (a108 <software_isr+0x6c>)
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    a09e:	ldr	r2, [pc, #108]	; (a10c <software_isr+0x70>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    a0a0:	ldr	r0, [pc, #108]	; (a110 <software_isr+0x74>)
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    a0a2:	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    a0a4:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    a0a6:	ldr	r5, [pc, #108]	; (a114 <software_isr+0x78>)
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    a0a8:	ldr	r4, [r0, #0]

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    a0aa:	orr.w	r3, r3, #16777216	; 0x1000000
    a0ae:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    a0b0:	ldr	r3, [r2, #0]
    a0b2:	orr.w	r3, r3, #1
    a0b6:	str	r3, [r2, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    a0b8:	ldr	r6, [r5, #0]
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    a0ba:	cbnz	r4, a0c2 <software_isr+0x26>
    a0bc:	b.n	a0ea <software_isr+0x4e>
    a0be:	ldr	r4, [r4, #20]
    a0c0:	cbz	r4, a0ea <software_isr+0x4e>
		if (p->active) {
    a0c2:	ldrb	r3, [r4, #8]
    a0c4:	cmp	r3, #0
    a0c6:	beq.n	a0be <software_isr+0x22>
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    a0c8:	ldr	r3, [r4, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
    a0ca:	ldr	r7, [r5, #0]
			p->update();
    a0cc:	ldr	r3, [r3, #0]
    a0ce:	mov	r0, r4
    a0d0:	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    a0d2:	ldr	r3, [r5, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    a0d4:	ldrh	r1, [r4, #6]
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    a0d6:	subs	r3, r3, r7
    a0d8:	lsrs	r3, r3, #4
			p->cpu_cycles = cycles;
    a0da:	uxth	r2, r3
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    a0dc:	cmp	r3, r1
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
			p->cpu_cycles = cycles;
    a0de:	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    a0e0:	it	hi
    a0e2:	strhhi	r2, [r4, #6]

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    a0e4:	ldr	r4, [r4, #20]
    a0e6:	cmp	r4, #0
    a0e8:	bne.n	a0c2 <software_isr+0x26>
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    a0ea:	ldr	r3, [pc, #40]	; (a114 <software_isr+0x78>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    a0ec:	ldr	r2, [pc, #40]	; (a118 <software_isr+0x7c>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    a0ee:	ldr	r3, [r3, #0]
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    a0f0:	ldrh	r0, [r2, #0]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
	AudioStream::cpu_cycles_total = totalcycles;
    a0f2:	ldr	r4, [pc, #40]	; (a11c <software_isr+0x80>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    a0f4:	subs	r3, r3, r6
    a0f6:	lsrs	r3, r3, #4
	AudioStream::cpu_cycles_total = totalcycles;
    a0f8:	uxth	r1, r3
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    a0fa:	cmp	r3, r0
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
	AudioStream::cpu_cycles_total = totalcycles;
    a0fc:	strh	r1, [r4, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    a0fe:	bls.n	a104 <software_isr+0x68>
		AudioStream::cpu_cycles_total_max = totalcycles;
    a100:	strh	r1, [r2, #0]
    a102:	pop	{r3, r4, r5, r6, r7, pc}
    a104:	pop	{r3, r4, r5, r6, r7, pc}
    a106:	nop
    a108:	.word	0xe000edfc
    a10c:	.word	0xe0001000
    a110:	.word	0x2001ca6c
    a114:	.word	0xe0001004
    a118:	.word	0x2001caec
    a11c:	.word	0x2001caf2

0000a120 <Stream::timedPeek()>:
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
{
    a120:	push	{r4, r5, r6, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    a122:	ldr	r5, [pc, #56]	; (a15c <Stream::timedPeek()+0x3c>)
    a124:	sub	sp, #8
    a126:	ldr	r3, [r5, #0]
    a128:	str	r3, [sp, #0]
	return ret;
    a12a:	ldr	r6, [sp, #0]
    a12c:	mov	r4, r0
    a12e:	b.n	a142 <Stream::timedPeek()+0x22>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    a130:	bl	9bcc <yield>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    a134:	ldr	r3, [r5, #0]
    a136:	str	r3, [sp, #4]
	return ret;
    a138:	ldr	r3, [sp, #4]
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  unsigned long startMillis = millis();
  do {
    a13a:	ldr	r2, [r4, #8]
    a13c:	subs	r3, r3, r6
    a13e:	cmp	r3, r2
    a140:	bcs.n	a152 <Stream::timedPeek()+0x32>
    c = peek();
    a142:	ldr	r3, [r4, #0]
    a144:	mov	r0, r4
    a146:	ldr	r3, [r3, #24]
    a148:	blx	r3
    if (c >= 0) return c;
    a14a:	cmp	r0, #0
    a14c:	blt.n	a130 <Stream::timedPeek()+0x10>
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
}
    a14e:	add	sp, #8
    a150:	pop	{r4, r5, r6, pc}
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
    a152:	mov.w	r0, #4294967295
}
    a156:	add	sp, #8
    a158:	pop	{r4, r5, r6, pc}
    a15a:	nop
    a15c:	.word	0x2001c95c

0000a160 <Stream::peekNextDigit()>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
    a160:	push	{r4, lr}
    a162:	mov	r4, r0
    a164:	b.n	a174 <Stream::peekNextDigit()+0x14>
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    if (c == '-') return c;
    a166:	cmp	r3, #45	; 0x2d
    a168:	beq.n	a184 <Stream::peekNextDigit()+0x24>
    if (c >= '0' && c <= '9') return c;
    a16a:	cmp	r2, #9
    a16c:	bls.n	a184 <Stream::peekNextDigit()+0x24>
    read();  // discard non-numeric
    a16e:	ldr	r3, [r4, #0]
    a170:	ldr	r3, [r3, #20]
    a172:	blx	r3
// discards non-numeric characters
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    c = timedPeek();
    a174:	mov	r0, r4
    a176:	bl	a120 <Stream::timedPeek()>
    if (c < 0) return c;  // timeout
    a17a:	subs	r3, r0, #0
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    a17c:	sub.w	r2, r3, #48	; 0x30
    read();  // discard non-numeric
    a180:	mov	r0, r4
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    a182:	bge.n	a166 <Stream::peekNextDigit()+0x6>
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    read();  // discard non-numeric
  }
}
    a184:	mov	r0, r3
    a186:	pop	{r4, pc}

0000a188 <Stream::parseInt(char)>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
    a188:	push	{r3, r4, r5, r6, r7, lr}
    a18a:	mov	r5, r1
    a18c:	mov	r4, r0
  boolean isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit();
    a18e:	bl	a160 <Stream::peekNextDigit()>
  // ignore non numeric leading characters
  if(c < 0)
    a192:	cmp	r0, #0
    a194:	blt.n	a1de <Stream::parseInt(char)+0x56>
    a196:	movs	r6, #0
    a198:	mov	r7, r6
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    a19a:	cmp	r0, r5
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    a19c:	sub.w	r2, r0, #48	; 0x30
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    a1a0:	beq.n	a1b6 <Stream::parseInt(char)+0x2e>
      ; // ignore this charactor
    else if(c == '-')
    a1a2:	cmp	r0, #45	; 0x2d
    a1a4:	beq.n	a1d6 <Stream::parseInt(char)+0x4e>
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
      value = value * 10 + c - '0';
    a1a6:	add.w	r3, r6, r6, lsl #2
  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    a1aa:	cmp	r2, #9
      value = value * 10 + c - '0';
    a1ac:	add.w	r0, r0, r3, lsl #1
  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    a1b0:	bhi.n	a1b6 <Stream::parseInt(char)+0x2e>
      value = value * 10 + c - '0';
    a1b2:	sub.w	r6, r0, #48	; 0x30
    read();  // consume the character we got with peek
    a1b6:	ldr	r3, [r4, #0]
    a1b8:	mov	r0, r4
    a1ba:	ldr	r3, [r3, #20]
    a1bc:	blx	r3
    c = timedPeek();
    a1be:	mov	r0, r4
    a1c0:	bl	a120 <Stream::timedPeek()>
  }
  while( (c >= '0' && c <= '9') || c == skipChar );
    a1c4:	sub.w	r3, r0, #48	; 0x30
    a1c8:	cmp	r3, #9
    a1ca:	bls.n	a19a <Stream::parseInt(char)+0x12>
    a1cc:	cmp	r0, r5
    a1ce:	beq.n	a19a <Stream::parseInt(char)+0x12>

  if(isNegative)
    a1d0:	cbz	r7, a1da <Stream::parseInt(char)+0x52>
    value = -value;
    a1d2:	negs	r0, r6
    a1d4:	pop	{r3, r4, r5, r6, r7, pc}

  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    a1d6:	movs	r7, #1
    a1d8:	b.n	a1b6 <Stream::parseInt(char)+0x2e>
    a1da:	mov	r0, r6
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
    a1dc:	pop	{r3, r4, r5, r6, r7, pc}
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    a1de:	movs	r0, #0
    a1e0:	pop	{r3, r4, r5, r6, r7, pc}
    a1e2:	nop

0000a1e4 <Stream::parseInt()>:
// returns the first valid (long) integer value from the current position.
// initial characters that are not digits (or the minus sign) are skipped
// function is terminated by the first character that is not a digit.
long Stream::parseInt()
{
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    a1e4:	movs	r1, #1
    a1e6:	b.w	a188 <Stream::parseInt(char)>
    a1ea:	nop

0000a1ec <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    a1ec:	bx	lr
    a1ee:	nop

0000a1f0 <operator new[](unsigned int)>:
  return malloc(size);
}

void * operator new[](size_t size)
{
  return malloc(size);
    a1f0:	b.w	b97c <malloc>

0000a1f4 <operator delete(void*, unsigned int)>:
    a1f4:	b.w	b98c <free>

0000a1f8 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a1f8:	ldr	r2, [pc, #20]	; (a210 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    a1fa:	ldr	r3, [pc, #24]	; (a214 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a1fc:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    a1fe:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a200:	uxtb	r0, r0
	tail = rx_buffer_tail;
    a202:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    a204:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    a206:	it	cc
    a208:	addcc	r0, #64	; 0x40
    a20a:	subs	r0, r0, r3
}
    a20c:	bx	lr
    a20e:	nop
    a210:	.word	0x2001caf8
    a214:	.word	0x2001caf9

0000a218 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    a218:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    a21a:	ldr	r3, [pc, #172]	; (a2c8 <uart4_status_isr+0xb0>)
    a21c:	ldrb	r2, [r3, #4]
    a21e:	lsls	r4, r2, #26
    a220:	bpl.n	a262 <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    a222:	ldr	r0, [pc, #168]	; (a2cc <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    a224:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    a226:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a228:	ldr	r1, [pc, #164]	; (a2d0 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    a22a:	adds	r3, #1
    a22c:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a22e:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    a230:	it	gt
    a232:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a234:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    a236:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a238:	beq.n	a242 <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    a23a:	ldr	r4, [pc, #152]	; (a2d4 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    a23c:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    a23e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    a240:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    a242:	ldr	r2, [pc, #148]	; (a2d8 <uart4_status_isr+0xc0>)
    a244:	ldr	r1, [r2, #0]
    a246:	cbz	r1, a262 <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    a248:	ldr	r2, [pc, #144]	; (a2dc <uart4_status_isr+0xc4>)
    a24a:	ldrb	r2, [r2, #0]
    a24c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    a24e:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    a250:	itet	cc
    a252:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    a256:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    a258:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    a25a:	cmp	r3, #39	; 0x27
    a25c:	itt	gt
    a25e:	movgt	r3, #1
    a260:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    a262:	ldr	r2, [pc, #100]	; (a2c8 <uart4_status_isr+0xb0>)
    a264:	ldrb	r3, [r2, #3]
    a266:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    a268:	lsls	r0, r3, #24
    a26a:	bmi.n	a290 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    a26c:	lsls	r2, r3, #25
    a26e:	bpl.n	a28c <uart4_status_isr+0x74>
    a270:	ldr	r3, [pc, #84]	; (a2c8 <uart4_status_isr+0xb0>)
    a272:	ldrb	r3, [r3, #4]
    a274:	lsls	r3, r3, #25
    a276:	bpl.n	a28c <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a278:	ldr	r3, [pc, #100]	; (a2e0 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    a27a:	ldr	r1, [pc, #104]	; (a2e4 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    a27c:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    a27e:	movs	r2, #0
    a280:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a282:	cbz	r3, a286 <uart4_status_isr+0x6e>
    a284:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    a286:	ldr	r3, [pc, #64]	; (a2c8 <uart4_status_isr+0xb0>)
    a288:	movs	r2, #44	; 0x2c
    a28a:	strb	r2, [r3, #3]
	}
}
    a28c:	pop	{r4, r5}
    a28e:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    a290:	ldrb	r1, [r2, #4]
    a292:	lsls	r1, r1, #24
    a294:	bpl.n	a26c <uart4_status_isr+0x54>
		head = tx_buffer_head;
    a296:	ldr	r1, [pc, #80]	; (a2e8 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    a298:	ldr	r0, [pc, #64]	; (a2dc <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a29a:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    a29c:	ldrb	r1, [r0, #0]
    a29e:	uxtb	r1, r1
		if (head == tail) {
    a2a0:	cmp	r4, r1
    a2a2:	beq.n	a2c0 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    a2a4:	adds	r2, r1, #1
    a2a6:	cmp	r2, #39	; 0x27
    a2a8:	itt	hi
    a2aa:	movhi	r1, #0
    a2ac:	movhi	r2, r1
			n = tx_buffer[tail];
    a2ae:	ldr	r5, [pc, #60]	; (a2ec <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    a2b0:	ldr	r4, [pc, #20]	; (a2c8 <uart4_status_isr+0xb0>)
    a2b2:	it	ls
    a2b4:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    a2b6:	ldrb	r2, [r5, r2]
    a2b8:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    a2ba:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    a2bc:	strb	r1, [r0, #0]
    a2be:	b.n	a26c <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    a2c0:	movs	r1, #108	; 0x6c
    a2c2:	strb	r1, [r2, #3]
    a2c4:	b.n	a26c <uart4_status_isr+0x54>
    a2c6:	nop
    a2c8:	.word	0x400ea000
    a2cc:	.word	0x2001caf8
    a2d0:	.word	0x2001caf9
    a2d4:	.word	0x2001cb24
    a2d8:	.word	0x2001caf4
    a2dc:	.word	0x2001cb65
    a2e0:	.word	0x2001cb68
    a2e4:	.word	0x2001cb64
    a2e8:	.word	0x2001cb6c
    a2ec:	.word	0x2001cafc

0000a2f0 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a2f0:	ldr	r2, [pc, #20]	; (a308 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    a2f2:	ldr	r3, [pc, #24]	; (a30c <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a2f4:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    a2f6:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a2f8:	uxtb	r0, r0
	tail = rx_buffer_tail;
    a2fa:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    a2fc:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    a2fe:	it	cc
    a300:	addcc	r0, #64	; 0x40
    a302:	subs	r0, r0, r3
}
    a304:	bx	lr
    a306:	nop
    a308:	.word	0x2001cbe0
    a30c:	.word	0x2001cb75

0000a310 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    a310:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    a312:	ldr	r3, [pc, #224]	; (a3f4 <uart1_status_isr+0xe4>)
    a314:	ldrb	r2, [r3, #4]
    a316:	tst.w	r2, #48	; 0x30
    a31a:	beq.n	a376 <uart1_status_isr+0x66>
		__disable_irq();
    a31c:	cpsid	i
		avail = UART1_RCFIFO;
    a31e:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    a320:	and.w	r2, r1, #255	; 0xff
    a324:	cmp	r1, #0
    a326:	beq.n	a3a4 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    a328:	cpsie	i
			head = rx_buffer_head;
    a32a:	ldr	r7, [pc, #204]	; (a3f8 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    a32c:	ldr	r1, [pc, #204]	; (a3fc <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    a32e:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    a330:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    a332:	ldr	r6, [pc, #204]	; (a400 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    a334:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    a336:	uxtb	r0, r0
			tail = rx_buffer_tail;
    a338:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    a33a:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    a33c:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    a33e:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    a340:	it	cs
    a342:	movcs	r3, #0
				if (newhead != tail) {
    a344:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    a346:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    a34a:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    a34c:	itt	ne
    a34e:	strbne	r1, [r6, r3]
    a350:	movne	r0, r3
				}
			} while (--avail > 0);
    a352:	ands.w	r2, r2, #255	; 0xff
    a356:	bne.n	a33a <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    a358:	ldr	r3, [pc, #168]	; (a404 <uart1_status_isr+0xf4>)
    a35a:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    a35c:	uxtb	r2, r0
    a35e:	strb	r2, [r7, #0]
			if (rts_pin) {
    a360:	cbz	r3, a376 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    a362:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    a364:	itet	cc
    a366:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    a36a:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    a36c:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    a36e:	cmp	r0, #39	; 0x27
    a370:	itt	gt
    a372:	movgt	r2, #1
    a374:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    a376:	ldr	r1, [pc, #124]	; (a3f4 <uart1_status_isr+0xe4>)
    a378:	ldrb	r2, [r1, #3]
    a37a:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    a37c:	lsls	r5, r2, #24
    a37e:	bmi.n	a3ae <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    a380:	lsls	r2, r2, #25
    a382:	bpl.n	a3a0 <uart1_status_isr+0x90>
    a384:	ldr	r3, [pc, #108]	; (a3f4 <uart1_status_isr+0xe4>)
    a386:	ldrb	r3, [r3, #4]
    a388:	lsls	r3, r3, #25
    a38a:	bpl.n	a3a0 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a38c:	ldr	r3, [pc, #120]	; (a408 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    a38e:	ldr	r1, [pc, #124]	; (a40c <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    a390:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    a392:	movs	r2, #0
    a394:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a396:	cbz	r3, a39a <uart1_status_isr+0x8a>
    a398:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    a39a:	ldr	r3, [pc, #88]	; (a3f4 <uart1_status_isr+0xe4>)
    a39c:	movs	r2, #60	; 0x3c
    a39e:	strb	r2, [r3, #3]
	}
}
    a3a0:	pop	{r4, r5, r6, r7}
    a3a2:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    a3a4:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    a3a6:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    a3a8:	strb	r2, [r3, #17]
			__enable_irq();
    a3aa:	cpsie	i
    a3ac:	b.n	a376 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    a3ae:	ldrb	r3, [r1, #4]
    a3b0:	lsls	r4, r3, #24
    a3b2:	bpl.n	a380 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    a3b4:	ldr	r3, [pc, #88]	; (a410 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    a3b6:	ldr	r6, [pc, #92]	; (a414 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a3b8:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    a3ba:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a3bc:	uxtb	r4, r4
		tail = tx_buffer_tail;
    a3be:	uxtb	r3, r3
		do {
			if (tail == head) break;
    a3c0:	cmp	r4, r3
    a3c2:	beq.n	a3e2 <uart1_status_isr+0xd2>
    a3c4:	ldr	r5, [pc, #80]	; (a418 <uart1_status_isr+0x108>)
    a3c6:	b.n	a3cc <uart1_status_isr+0xbc>
    a3c8:	cmp	r3, r4
    a3ca:	beq.n	a3e2 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    a3cc:	adds	r3, #1
    a3ce:	cmp	r3, #40	; 0x28
    a3d0:	it	cs
    a3d2:	movcs	r3, #0
			avail = UART1_S1;
    a3d4:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    a3d6:	ldrb	r0, [r5, r3]
    a3d8:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    a3da:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    a3dc:	ldrb	r0, [r1, #20]
    a3de:	cmp	r0, #7
    a3e0:	bls.n	a3c8 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    a3e2:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    a3e4:	ldr	r1, [pc, #12]	; (a3f4 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    a3e6:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    a3e8:	ldrb	r3, [r1, #4]
    a3ea:	lsls	r0, r3, #24
    a3ec:	itt	mi
    a3ee:	movmi	r3, #124	; 0x7c
    a3f0:	strbmi	r3, [r1, #3]
    a3f2:	b.n	a380 <uart1_status_isr+0x70>
    a3f4:	.word	0x4006b000
    a3f8:	.word	0x2001cbe0
    a3fc:	.word	0x2001cb75
    a400:	.word	0x2001cba0
    a404:	.word	0x2001cb70
    a408:	.word	0x2001cbe4
    a40c:	.word	0x2001cb74
    a410:	.word	0x2001cbe8
    a414:	.word	0x2001cbe1
    a418:	.word	0x2001cb78

0000a41c <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a41c:	ldr	r2, [pc, #20]	; (a434 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    a41e:	ldr	r3, [pc, #24]	; (a438 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a420:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    a422:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a424:	uxtb	r0, r0
	tail = rx_buffer_tail;
    a426:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    a428:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    a42a:	it	cc
    a42c:	addcc	r0, #64	; 0x40
    a42e:	subs	r0, r0, r3
}
    a430:	bx	lr
    a432:	nop
    a434:	.word	0x2001cbf0
    a438:	.word	0x2001cbf1

0000a43c <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    a43c:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    a43e:	ldr	r3, [pc, #172]	; (a4ec <uart3_status_isr+0xb0>)
    a440:	ldrb	r2, [r3, #4]
    a442:	lsls	r4, r2, #26
    a444:	bpl.n	a486 <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    a446:	ldr	r0, [pc, #168]	; (a4f0 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    a448:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    a44a:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a44c:	ldr	r1, [pc, #164]	; (a4f4 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    a44e:	adds	r3, #1
    a450:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a452:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    a454:	it	gt
    a456:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a458:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    a45a:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a45c:	beq.n	a466 <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    a45e:	ldr	r4, [pc, #152]	; (a4f8 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    a460:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    a462:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    a464:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    a466:	ldr	r2, [pc, #148]	; (a4fc <uart3_status_isr+0xc0>)
    a468:	ldr	r1, [r2, #0]
    a46a:	cbz	r1, a486 <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    a46c:	ldr	r2, [pc, #144]	; (a500 <uart3_status_isr+0xc4>)
    a46e:	ldrb	r2, [r2, #0]
    a470:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    a472:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    a474:	itet	cc
    a476:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    a47a:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    a47c:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    a47e:	cmp	r3, #39	; 0x27
    a480:	itt	gt
    a482:	movgt	r3, #1
    a484:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    a486:	ldr	r2, [pc, #100]	; (a4ec <uart3_status_isr+0xb0>)
    a488:	ldrb	r3, [r2, #3]
    a48a:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    a48c:	lsls	r0, r3, #24
    a48e:	bmi.n	a4b4 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    a490:	lsls	r2, r3, #25
    a492:	bpl.n	a4b0 <uart3_status_isr+0x74>
    a494:	ldr	r3, [pc, #84]	; (a4ec <uart3_status_isr+0xb0>)
    a496:	ldrb	r3, [r3, #4]
    a498:	lsls	r3, r3, #25
    a49a:	bpl.n	a4b0 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a49c:	ldr	r3, [pc, #100]	; (a504 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    a49e:	ldr	r1, [pc, #104]	; (a508 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    a4a0:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    a4a2:	movs	r2, #0
    a4a4:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a4a6:	cbz	r3, a4aa <uart3_status_isr+0x6e>
    a4a8:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    a4aa:	ldr	r3, [pc, #64]	; (a4ec <uart3_status_isr+0xb0>)
    a4ac:	movs	r2, #44	; 0x2c
    a4ae:	strb	r2, [r3, #3]
	}
}
    a4b0:	pop	{r4, r5}
    a4b2:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    a4b4:	ldrb	r1, [r2, #4]
    a4b6:	lsls	r1, r1, #24
    a4b8:	bpl.n	a490 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    a4ba:	ldr	r1, [pc, #80]	; (a50c <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    a4bc:	ldr	r0, [pc, #64]	; (a500 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a4be:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    a4c0:	ldrb	r1, [r0, #0]
    a4c2:	uxtb	r1, r1
		if (head == tail) {
    a4c4:	cmp	r4, r1
    a4c6:	beq.n	a4e4 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    a4c8:	adds	r2, r1, #1
    a4ca:	cmp	r2, #39	; 0x27
    a4cc:	itt	hi
    a4ce:	movhi	r1, #0
    a4d0:	movhi	r2, r1
			n = tx_buffer[tail];
    a4d2:	ldr	r5, [pc, #60]	; (a510 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    a4d4:	ldr	r4, [pc, #20]	; (a4ec <uart3_status_isr+0xb0>)
    a4d6:	it	ls
    a4d8:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    a4da:	ldrb	r2, [r5, r2]
    a4dc:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    a4de:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    a4e0:	strb	r1, [r0, #0]
    a4e2:	b.n	a490 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    a4e4:	movs	r1, #108	; 0x6c
    a4e6:	strb	r1, [r2, #3]
    a4e8:	b.n	a490 <uart3_status_isr+0x54>
    a4ea:	nop
    a4ec:	.word	0x4006d000
    a4f0:	.word	0x2001cbf0
    a4f4:	.word	0x2001cbf1
    a4f8:	.word	0x2001cc1c
    a4fc:	.word	0x2001cbec
    a500:	.word	0x2001cc5d
    a504:	.word	0x2001cc60
    a508:	.word	0x2001cc5c
    a50c:	.word	0x2001cc64
    a510:	.word	0x2001cbf4

0000a514 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a514:	ldr	r2, [pc, #20]	; (a52c <serial_available+0x18>)
	tail = rx_buffer_tail;
    a516:	ldr	r3, [pc, #24]	; (a530 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a518:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    a51a:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a51c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    a51e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    a520:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    a522:	it	cc
    a524:	addcc	r0, #64	; 0x40
    a526:	subs	r0, r0, r3
}
    a528:	bx	lr
    a52a:	nop
    a52c:	.word	0x2001cc6c
    a530:	.word	0x2001cc6d

0000a534 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    a534:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    a536:	ldr	r3, [pc, #224]	; (a618 <uart0_status_isr+0xe4>)
    a538:	ldrb	r2, [r3, #4]
    a53a:	tst.w	r2, #48	; 0x30
    a53e:	beq.n	a59a <uart0_status_isr+0x66>
		__disable_irq();
    a540:	cpsid	i
		avail = UART0_RCFIFO;
    a542:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    a544:	and.w	r2, r1, #255	; 0xff
    a548:	cmp	r1, #0
    a54a:	beq.n	a5c8 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    a54c:	cpsie	i
			head = rx_buffer_head;
    a54e:	ldr	r7, [pc, #204]	; (a61c <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    a550:	ldr	r1, [pc, #204]	; (a620 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    a552:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    a554:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    a556:	ldr	r6, [pc, #204]	; (a624 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    a558:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    a55a:	uxtb	r0, r0
			tail = rx_buffer_tail;
    a55c:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    a55e:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    a560:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    a562:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    a564:	it	cs
    a566:	movcs	r3, #0
				if (newhead != tail) {
    a568:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    a56a:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    a56e:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    a570:	itt	ne
    a572:	strbne	r1, [r6, r3]
    a574:	movne	r0, r3
				}
			} while (--avail > 0);
    a576:	ands.w	r2, r2, #255	; 0xff
    a57a:	bne.n	a55e <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    a57c:	ldr	r3, [pc, #168]	; (a628 <uart0_status_isr+0xf4>)
    a57e:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    a580:	uxtb	r2, r0
    a582:	strb	r2, [r7, #0]
			if (rts_pin) {
    a584:	cbz	r3, a59a <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    a586:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    a588:	itet	cc
    a58a:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    a58e:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    a590:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    a592:	cmp	r0, #39	; 0x27
    a594:	itt	gt
    a596:	movgt	r2, #1
    a598:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    a59a:	ldr	r1, [pc, #124]	; (a618 <uart0_status_isr+0xe4>)
    a59c:	ldrb	r2, [r1, #3]
    a59e:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    a5a0:	lsls	r5, r2, #24
    a5a2:	bmi.n	a5d2 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    a5a4:	lsls	r2, r2, #25
    a5a6:	bpl.n	a5c4 <uart0_status_isr+0x90>
    a5a8:	ldr	r3, [pc, #108]	; (a618 <uart0_status_isr+0xe4>)
    a5aa:	ldrb	r3, [r3, #4]
    a5ac:	lsls	r3, r3, #25
    a5ae:	bpl.n	a5c4 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a5b0:	ldr	r3, [pc, #120]	; (a62c <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    a5b2:	ldr	r1, [pc, #124]	; (a630 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    a5b4:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    a5b6:	movs	r2, #0
    a5b8:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a5ba:	cbz	r3, a5be <uart0_status_isr+0x8a>
    a5bc:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    a5be:	ldr	r3, [pc, #88]	; (a618 <uart0_status_isr+0xe4>)
    a5c0:	movs	r2, #60	; 0x3c
    a5c2:	strb	r2, [r3, #3]
	}
}
    a5c4:	pop	{r4, r5, r6, r7}
    a5c6:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    a5c8:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    a5ca:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    a5cc:	strb	r2, [r3, #17]
			__enable_irq();
    a5ce:	cpsie	i
    a5d0:	b.n	a59a <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    a5d2:	ldrb	r3, [r1, #4]
    a5d4:	lsls	r4, r3, #24
    a5d6:	bpl.n	a5a4 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    a5d8:	ldr	r3, [pc, #88]	; (a634 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    a5da:	ldr	r6, [pc, #92]	; (a638 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a5dc:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    a5de:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a5e0:	uxtb	r4, r4
		tail = tx_buffer_tail;
    a5e2:	uxtb	r3, r3
		do {
			if (tail == head) break;
    a5e4:	cmp	r4, r3
    a5e6:	beq.n	a606 <uart0_status_isr+0xd2>
    a5e8:	ldr	r5, [pc, #80]	; (a63c <uart0_status_isr+0x108>)
    a5ea:	b.n	a5f0 <uart0_status_isr+0xbc>
    a5ec:	cmp	r3, r4
    a5ee:	beq.n	a606 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    a5f0:	adds	r3, #1
    a5f2:	cmp	r3, #64	; 0x40
    a5f4:	it	cs
    a5f6:	movcs	r3, #0
			avail = UART0_S1;
    a5f8:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    a5fa:	ldrb	r0, [r5, r3]
    a5fc:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    a5fe:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    a600:	ldrb	r0, [r1, #20]
    a602:	cmp	r0, #7
    a604:	bls.n	a5ec <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    a606:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    a608:	ldr	r1, [pc, #12]	; (a618 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    a60a:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    a60c:	ldrb	r3, [r1, #4]
    a60e:	lsls	r0, r3, #24
    a610:	itt	mi
    a612:	movmi	r3, #124	; 0x7c
    a614:	strbmi	r3, [r1, #3]
    a616:	b.n	a5a4 <uart0_status_isr+0x70>
    a618:	.word	0x4006a000
    a61c:	.word	0x2001cc6c
    a620:	.word	0x2001cc6d
    a624:	.word	0x2001ccb0
    a628:	.word	0x2001cc68
    a62c:	.word	0x2001ccf4
    a630:	.word	0x2001ccf0
    a634:	.word	0x2001ccf8
    a638:	.word	0x2001ccf1
    a63c:	.word	0x2001cc70

0000a640 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a640:	ldr	r2, [pc, #20]	; (a658 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    a642:	ldr	r3, [pc, #24]	; (a65c <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a644:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    a646:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a648:	uxtb	r0, r0
	tail = rx_buffer_tail;
    a64a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    a64c:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    a64e:	it	cc
    a650:	addcc	r0, #64	; 0x40
    a652:	subs	r0, r0, r3
}
    a654:	bx	lr
    a656:	nop
    a658:	.word	0x2001cd00
    a65c:	.word	0x2001cd01

0000a660 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    a660:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    a662:	ldr	r3, [pc, #176]	; (a714 <lpuart0_status_isr+0xb4>)
    a664:	ldr	r2, [r3, #4]
    a666:	lsls	r4, r2, #10
    a668:	bpl.n	a6aa <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    a66a:	ldr	r0, [pc, #172]	; (a718 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    a66c:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    a66e:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a670:	ldr	r1, [pc, #168]	; (a71c <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    a672:	adds	r3, #1
    a674:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a676:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    a678:	it	gt
    a67a:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a67c:	cmp	r3, r1
    a67e:	beq.n	a68a <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    a680:	ldr	r4, [pc, #156]	; (a720 <lpuart0_status_isr+0xc0>)
    a682:	uxtb	r2, r2
			rx_buffer_head = head;
    a684:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    a686:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    a688:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    a68a:	ldr	r2, [pc, #152]	; (a724 <lpuart0_status_isr+0xc4>)
    a68c:	ldr	r1, [r2, #0]
    a68e:	cbz	r1, a6aa <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    a690:	ldr	r2, [pc, #148]	; (a728 <lpuart0_status_isr+0xc8>)
    a692:	ldrb	r2, [r2, #0]
    a694:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    a696:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    a698:	itet	cc
    a69a:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    a69e:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    a6a0:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    a6a2:	cmp	r3, #39	; 0x27
    a6a4:	itt	gt
    a6a6:	movgt	r3, #1
    a6a8:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    a6aa:	ldr	r2, [pc, #104]	; (a714 <lpuart0_status_isr+0xb4>)
    a6ac:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    a6ae:	lsls	r0, r3, #8
    a6b0:	bpl.n	a6b8 <lpuart0_status_isr+0x58>
    a6b2:	ldr	r2, [r2, #4]
    a6b4:	lsls	r1, r2, #8
    a6b6:	bmi.n	a6dc <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    a6b8:	lsls	r2, r3, #9
    a6ba:	bpl.n	a6d8 <lpuart0_status_isr+0x78>
    a6bc:	ldr	r3, [pc, #84]	; (a714 <lpuart0_status_isr+0xb4>)
    a6be:	ldr	r3, [r3, #4]
    a6c0:	lsls	r3, r3, #9
    a6c2:	bpl.n	a6d8 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a6c4:	ldr	r3, [pc, #100]	; (a72c <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    a6c6:	ldr	r1, [pc, #104]	; (a730 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    a6c8:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    a6ca:	movs	r2, #0
    a6cc:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a6ce:	cbz	r3, a6d2 <lpuart0_status_isr+0x72>
    a6d0:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    a6d2:	ldr	r3, [pc, #96]	; (a734 <lpuart0_status_isr+0xd4>)
    a6d4:	movs	r2, #0
    a6d6:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    a6d8:	pop	{r4, r5}
    a6da:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    a6dc:	ldr	r2, [pc, #88]	; (a738 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    a6de:	ldr	r1, [pc, #72]	; (a728 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    a6e0:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    a6e2:	ldrb	r2, [r1, #0]
    a6e4:	uxtb	r2, r2
		if (head == tail) {
    a6e6:	cmp	r0, r2
    a6e8:	beq.n	a706 <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    a6ea:	adds	r2, #1
    a6ec:	cmp	r2, #39	; 0x27
    a6ee:	itt	hi
    a6f0:	movhi	r0, #0
    a6f2:	movhi	r2, r0
			n = tx_buffer[tail];
    a6f4:	ldr	r5, [pc, #68]	; (a73c <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    a6f6:	ldr	r4, [pc, #28]	; (a714 <lpuart0_status_isr+0xb4>)
    a6f8:	it	ls
    a6fa:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    a6fc:	ldrb	r2, [r5, r2]
    a6fe:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    a700:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    a702:	strb	r0, [r1, #0]
    a704:	b.n	a6b8 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    a706:	ldr	r0, [pc, #56]	; (a740 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    a708:	ldr	r2, [pc, #40]	; (a734 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    a70a:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    a70c:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    a70e:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    a710:	str	r1, [r2, #0]
    a712:	b.n	a6b8 <lpuart0_status_isr+0x58>
    a714:	.word	0x400c4000
    a718:	.word	0x2001cd00
    a71c:	.word	0x2001cd01
    a720:	.word	0x2001cd2c
    a724:	.word	0x2001ccfc
    a728:	.word	0x2001cd6d
    a72c:	.word	0x2001cd70
    a730:	.word	0x2001cd6c
    a734:	.word	0x43880158
    a738:	.word	0x2001cd74
    a73c:	.word	0x2001cd04
    a740:	.word	0x4388015c

0000a744 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    a744:	cpsid	i
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    a746:	ldr	r2, [pc, #96]	; (a7a8 <usb_init_serialnumber+0x64>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    a748:	ldr	r3, [pc, #96]	; (a7ac <usb_init_serialnumber+0x68>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    a74a:	ldr	r1, [pc, #100]	; (a7b0 <usb_init_serialnumber+0x6c>)
    a74c:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    a74e:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    a750:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    a752:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    a754:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    a756:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    a758:	ldrb	r3, [r2, #0]
    a75a:	lsls	r3, r3, #24
    a75c:	bpl.n	a758 <usb_init_serialnumber+0x14>
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    a75e:	push	{r4, lr}
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    a760:	ldr	r3, [pc, #80]	; (a7b4 <usb_init_serialnumber+0x70>)
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    a762:	sub	sp, #16
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    a764:	ldr	r0, [r3, #0]
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    a766:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    a768:	ldr	r3, [pc, #76]	; (a7b8 <usb_init_serialnumber+0x74>)
    a76a:	ldr	r4, [pc, #80]	; (a7bc <usb_init_serialnumber+0x78>)
    a76c:	cmp	r0, r3
    a76e:	it	ls
    a770:	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    a774:	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    a776:	it	ls
    a778:	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    a77a:	movs	r2, #10
    a77c:	bl	a7c0 <ultoa>
    a780:	add	r1, sp, #4
    a782:	mov	r0, r4
	for (i=0; i<10; i++) {
    a784:	movs	r3, #0
		char c = buf[i];
    a786:	ldrb.w	r2, [r1], #1
    a78a:	adds	r3, #1
		if (!c) break;
    a78c:	cbz	r2, a79e <usb_init_serialnumber+0x5a>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    a78e:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    a790:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    a794:	bne.n	a786 <usb_init_serialnumber+0x42>
    a796:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    a798:	strb	r3, [r4, #0]
}
    a79a:	add	sp, #16
    a79c:	pop	{r4, pc}
    a79e:	lsls	r3, r3, #1
    a7a0:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    a7a2:	strb	r3, [r4, #0]
}
    a7a4:	add	sp, #16
    a7a6:	pop	{r4, pc}
    a7a8:	.word	0x40020004
    a7ac:	.word	0x40020000
    a7b0:	.word	0x41070000
    a7b4:	.word	0x4002000c
    a7b8:	.word	0x0098967f
    a7bc:	.word	0x20016fc0

0000a7c0 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    a7c0:	push	{r4, r5, r6, r7}
    a7c2:	subs	r5, r1, #1
    a7c4:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    a7c6:	movs	r4, #0
    a7c8:	b.n	a7cc <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    a7ca:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    a7cc:	udiv	r3, r0, r2
    a7d0:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a7d4:	cmp	r0, #9
    a7d6:	add.w	r7, r0, #48	; 0x30
    a7da:	itet	hi
    a7dc:	addhi	r0, #55	; 0x37
    a7de:	uxtbls	r0, r7
    a7e0:	uxtbhi	r0, r0
    a7e2:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    a7e6:	mov	r0, r3
    a7e8:	cmp	r3, #0
    a7ea:	bne.n	a7ca <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    a7ec:	adds	r2, r1, r4
    a7ee:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    a7f0:	cbz	r4, a806 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    a7f2:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    a7f4:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    a7f8:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    a7fa:	adds	r3, #1
    a7fc:	subs	r0, r4, r3
    a7fe:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    a800:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    a804:	blt.n	a7f2 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    a806:	mov	r0, r1
    a808:	pop	{r4, r5, r6, r7}
    a80a:	bx	lr

0000a80c <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a80c:	ldr	r2, [pc, #20]	; (a824 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    a80e:	ldr	r3, [pc, #24]	; (a828 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a810:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    a812:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a814:	uxtb	r0, r0
	tail = rx_buffer_tail;
    a816:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    a818:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    a81a:	it	cc
    a81c:	addcc	r0, #64	; 0x40
    a81e:	subs	r0, r0, r3
}
    a820:	bx	lr
    a822:	nop
    a824:	.word	0x2001cd7c
    a828:	.word	0x2001cd7d

0000a82c <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    a82c:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    a82e:	ldr	r3, [pc, #172]	; (a8dc <uart2_status_isr+0xb0>)
    a830:	ldrb	r2, [r3, #4]
    a832:	lsls	r4, r2, #26
    a834:	bpl.n	a876 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    a836:	ldr	r0, [pc, #168]	; (a8e0 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    a838:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    a83a:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a83c:	ldr	r1, [pc, #164]	; (a8e4 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    a83e:	adds	r3, #1
    a840:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a842:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    a844:	it	gt
    a846:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a848:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    a84a:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a84c:	beq.n	a856 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    a84e:	ldr	r4, [pc, #152]	; (a8e8 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    a850:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    a852:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    a854:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    a856:	ldr	r2, [pc, #148]	; (a8ec <uart2_status_isr+0xc0>)
    a858:	ldr	r1, [r2, #0]
    a85a:	cbz	r1, a876 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    a85c:	ldr	r2, [pc, #144]	; (a8f0 <uart2_status_isr+0xc4>)
    a85e:	ldrb	r2, [r2, #0]
    a860:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    a862:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    a864:	itet	cc
    a866:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    a86a:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    a86c:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    a86e:	cmp	r3, #39	; 0x27
    a870:	itt	gt
    a872:	movgt	r3, #1
    a874:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    a876:	ldr	r2, [pc, #100]	; (a8dc <uart2_status_isr+0xb0>)
    a878:	ldrb	r3, [r2, #3]
    a87a:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    a87c:	lsls	r0, r3, #24
    a87e:	bmi.n	a8a4 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    a880:	lsls	r2, r3, #25
    a882:	bpl.n	a8a0 <uart2_status_isr+0x74>
    a884:	ldr	r3, [pc, #84]	; (a8dc <uart2_status_isr+0xb0>)
    a886:	ldrb	r3, [r3, #4]
    a888:	lsls	r3, r3, #25
    a88a:	bpl.n	a8a0 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a88c:	ldr	r3, [pc, #100]	; (a8f4 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    a88e:	ldr	r1, [pc, #104]	; (a8f8 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    a890:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    a892:	movs	r2, #0
    a894:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a896:	cbz	r3, a89a <uart2_status_isr+0x6e>
    a898:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    a89a:	ldr	r3, [pc, #64]	; (a8dc <uart2_status_isr+0xb0>)
    a89c:	movs	r2, #44	; 0x2c
    a89e:	strb	r2, [r3, #3]
	}
}
    a8a0:	pop	{r4, r5}
    a8a2:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    a8a4:	ldrb	r1, [r2, #4]
    a8a6:	lsls	r1, r1, #24
    a8a8:	bpl.n	a880 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    a8aa:	ldr	r1, [pc, #80]	; (a8fc <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    a8ac:	ldr	r0, [pc, #64]	; (a8f0 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a8ae:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    a8b0:	ldrb	r1, [r0, #0]
    a8b2:	uxtb	r1, r1
		if (head == tail) {
    a8b4:	cmp	r4, r1
    a8b6:	beq.n	a8d4 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    a8b8:	adds	r2, r1, #1
    a8ba:	cmp	r2, #39	; 0x27
    a8bc:	itt	hi
    a8be:	movhi	r1, #0
    a8c0:	movhi	r2, r1
			n = tx_buffer[tail];
    a8c2:	ldr	r5, [pc, #60]	; (a900 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    a8c4:	ldr	r4, [pc, #20]	; (a8dc <uart2_status_isr+0xb0>)
    a8c6:	it	ls
    a8c8:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    a8ca:	ldrb	r2, [r5, r2]
    a8cc:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    a8ce:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    a8d0:	strb	r1, [r0, #0]
    a8d2:	b.n	a880 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    a8d4:	movs	r1, #108	; 0x6c
    a8d6:	strb	r1, [r2, #3]
    a8d8:	b.n	a880 <uart2_status_isr+0x54>
    a8da:	nop
    a8dc:	.word	0x4006c000
    a8e0:	.word	0x2001cd7c
    a8e4:	.word	0x2001cd7d
    a8e8:	.word	0x2001cda8
    a8ec:	.word	0x2001cd78
    a8f0:	.word	0x2001cde9
    a8f4:	.word	0x2001cdec
    a8f8:	.word	0x2001cde8
    a8fc:	.word	0x2001cdf0
    a900:	.word	0x2001cd80

0000a904 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    a904:	bx	lr
    a906:	nop

0000a908 <nanf>:
    a908:	vldr	s0, [pc, #4]	; a910 <nanf+0x8>
    a90c:	bx	lr
    a90e:	nop
    a910:	.word	0x7fc00000

0000a914 <__aeabi_atexit>:
    a914:	mov	r3, r1
    a916:	mov	r1, r0
    a918:	mov	r0, r3
    a91a:	b.w	b8c4 <__cxa_atexit>
    a91e:	nop

0000a920 <__aeabi_drsub>:
    a920:	eor.w	r1, r1, #2147483648	; 0x80000000
    a924:	b.n	a92c <__adddf3>
    a926:	nop

0000a928 <__aeabi_dsub>:
    a928:	eor.w	r3, r3, #2147483648	; 0x80000000

0000a92c <__adddf3>:
    a92c:	push	{r4, r5, lr}
    a92e:	mov.w	r4, r1, lsl #1
    a932:	mov.w	r5, r3, lsl #1
    a936:	teq	r4, r5
    a93a:	it	eq
    a93c:	teqeq	r0, r2
    a940:	itttt	ne
    a942:	orrsne.w	ip, r4, r0
    a946:	orrsne.w	ip, r5, r2
    a94a:	mvnsne.w	ip, r4, asr #21
    a94e:	mvnsne.w	ip, r5, asr #21
    a952:	beq.w	ab1a <__adddf3+0x1ee>
    a956:	mov.w	r4, r4, lsr #21
    a95a:	rsbs	r5, r4, r5, lsr #21
    a95e:	it	lt
    a960:	neglt	r5, r5
    a962:	ble.n	a97e <__adddf3+0x52>
    a964:	add	r4, r5
    a966:	eor.w	r2, r0, r2
    a96a:	eor.w	r3, r1, r3
    a96e:	eor.w	r0, r2, r0
    a972:	eor.w	r1, r3, r1
    a976:	eor.w	r2, r0, r2
    a97a:	eor.w	r3, r1, r3
    a97e:	cmp	r5, #54	; 0x36
    a980:	it	hi
    a982:	pophi	{r4, r5, pc}
    a984:	tst.w	r1, #2147483648	; 0x80000000
    a988:	mov.w	r1, r1, lsl #12
    a98c:	mov.w	ip, #1048576	; 0x100000
    a990:	orr.w	r1, ip, r1, lsr #12
    a994:	beq.n	a99c <__adddf3+0x70>
    a996:	negs	r0, r0
    a998:	sbc.w	r1, r1, r1, lsl #1
    a99c:	tst.w	r3, #2147483648	; 0x80000000
    a9a0:	mov.w	r3, r3, lsl #12
    a9a4:	orr.w	r3, ip, r3, lsr #12
    a9a8:	beq.n	a9b0 <__adddf3+0x84>
    a9aa:	negs	r2, r2
    a9ac:	sbc.w	r3, r3, r3, lsl #1
    a9b0:	teq	r4, r5
    a9b4:	beq.w	ab06 <__adddf3+0x1da>
    a9b8:	sub.w	r4, r4, #1
    a9bc:	rsbs	lr, r5, #32
    a9c0:	blt.n	a9de <__adddf3+0xb2>
    a9c2:	lsl.w	ip, r2, lr
    a9c6:	lsr.w	r2, r2, r5
    a9ca:	adds	r0, r0, r2
    a9cc:	adc.w	r1, r1, #0
    a9d0:	lsl.w	r2, r3, lr
    a9d4:	adds	r0, r0, r2
    a9d6:	asr.w	r3, r3, r5
    a9da:	adcs	r1, r3
    a9dc:	b.n	a9fc <__adddf3+0xd0>
    a9de:	sub.w	r5, r5, #32
    a9e2:	add.w	lr, lr, #32
    a9e6:	cmp	r2, #1
    a9e8:	lsl.w	ip, r3, lr
    a9ec:	it	cs
    a9ee:	orrcs.w	ip, ip, #2
    a9f2:	asr.w	r3, r3, r5
    a9f6:	adds	r0, r0, r3
    a9f8:	adcs.w	r1, r1, r3, asr #31
    a9fc:	and.w	r5, r1, #2147483648	; 0x80000000
    aa00:	bpl.n	aa12 <__adddf3+0xe6>
    aa02:	mov.w	lr, #0
    aa06:	rsbs	ip, ip, #0
    aa0a:	sbcs.w	r0, lr, r0
    aa0e:	sbc.w	r1, lr, r1
    aa12:	cmp.w	r1, #1048576	; 0x100000
    aa16:	bcc.n	aa50 <__adddf3+0x124>
    aa18:	cmp.w	r1, #2097152	; 0x200000
    aa1c:	bcc.n	aa38 <__adddf3+0x10c>
    aa1e:	lsrs	r1, r1, #1
    aa20:	movs.w	r0, r0, rrx
    aa24:	mov.w	ip, ip, rrx
    aa28:	add.w	r4, r4, #1
    aa2c:	mov.w	r2, r4, lsl #21
    aa30:	cmn.w	r2, #4194304	; 0x400000
    aa34:	bcs.w	ab6c <__adddf3+0x240>
    aa38:	cmp.w	ip, #2147483648	; 0x80000000
    aa3c:	it	eq
    aa3e:	movseq.w	ip, r0, lsr #1
    aa42:	adcs.w	r0, r0, #0
    aa46:	adc.w	r1, r1, r4, lsl #20
    aa4a:	orr.w	r1, r1, r5
    aa4e:	pop	{r4, r5, pc}
    aa50:	movs.w	ip, ip, lsl #1
    aa54:	adcs	r0, r0
    aa56:	adc.w	r1, r1, r1
    aa5a:	tst.w	r1, #1048576	; 0x100000
    aa5e:	sub.w	r4, r4, #1
    aa62:	bne.n	aa38 <__adddf3+0x10c>
    aa64:	teq	r1, #0
    aa68:	itt	eq
    aa6a:	moveq	r1, r0
    aa6c:	moveq	r0, #0
    aa6e:	clz	r3, r1
    aa72:	it	eq
    aa74:	addeq	r3, #32
    aa76:	sub.w	r3, r3, #11
    aa7a:	subs.w	r2, r3, #32
    aa7e:	bge.n	aa9a <__adddf3+0x16e>
    aa80:	adds	r2, #12
    aa82:	ble.n	aa96 <__adddf3+0x16a>
    aa84:	add.w	ip, r2, #20
    aa88:	rsb	r2, r2, #12
    aa8c:	lsl.w	r0, r1, ip
    aa90:	lsr.w	r1, r1, r2
    aa94:	b.n	aab0 <__adddf3+0x184>
    aa96:	add.w	r2, r2, #20
    aa9a:	it	le
    aa9c:	rsble	ip, r2, #32
    aaa0:	lsl.w	r1, r1, r2
    aaa4:	lsr.w	ip, r0, ip
    aaa8:	itt	le
    aaaa:	orrle.w	r1, r1, ip
    aaae:	lslle	r0, r2
    aab0:	subs	r4, r4, r3
    aab2:	ittt	ge
    aab4:	addge.w	r1, r1, r4, lsl #20
    aab8:	orrge	r1, r5
    aaba:	popge	{r4, r5, pc}
    aabc:	mvn.w	r4, r4
    aac0:	subs	r4, #31
    aac2:	bge.n	aafe <__adddf3+0x1d2>
    aac4:	adds	r4, #12
    aac6:	bgt.n	aae6 <__adddf3+0x1ba>
    aac8:	add.w	r4, r4, #20
    aacc:	rsb	r2, r4, #32
    aad0:	lsr.w	r0, r0, r4
    aad4:	lsl.w	r3, r1, r2
    aad8:	orr.w	r0, r0, r3
    aadc:	lsr.w	r3, r1, r4
    aae0:	orr.w	r1, r5, r3
    aae4:	pop	{r4, r5, pc}
    aae6:	rsb	r4, r4, #12
    aaea:	rsb	r2, r4, #32
    aaee:	lsr.w	r0, r0, r2
    aaf2:	lsl.w	r3, r1, r4
    aaf6:	orr.w	r0, r0, r3
    aafa:	mov	r1, r5
    aafc:	pop	{r4, r5, pc}
    aafe:	lsr.w	r0, r1, r4
    ab02:	mov	r1, r5
    ab04:	pop	{r4, r5, pc}
    ab06:	teq	r4, #0
    ab0a:	eor.w	r3, r3, #1048576	; 0x100000
    ab0e:	itte	eq
    ab10:	eoreq.w	r1, r1, #1048576	; 0x100000
    ab14:	addeq	r4, #1
    ab16:	subne	r5, #1
    ab18:	b.n	a9b8 <__adddf3+0x8c>
    ab1a:	mvns.w	ip, r4, asr #21
    ab1e:	it	ne
    ab20:	mvnsne.w	ip, r5, asr #21
    ab24:	beq.n	ab7a <__adddf3+0x24e>
    ab26:	teq	r4, r5
    ab2a:	it	eq
    ab2c:	teqeq	r0, r2
    ab30:	beq.n	ab3e <__adddf3+0x212>
    ab32:	orrs.w	ip, r4, r0
    ab36:	itt	eq
    ab38:	moveq	r1, r3
    ab3a:	moveq	r0, r2
    ab3c:	pop	{r4, r5, pc}
    ab3e:	teq	r1, r3
    ab42:	ittt	ne
    ab44:	movne	r1, #0
    ab46:	movne	r0, #0
    ab48:	popne	{r4, r5, pc}
    ab4a:	movs.w	ip, r4, lsr #21
    ab4e:	bne.n	ab5c <__adddf3+0x230>
    ab50:	lsls	r0, r0, #1
    ab52:	adcs	r1, r1
    ab54:	it	cs
    ab56:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    ab5a:	pop	{r4, r5, pc}
    ab5c:	adds.w	r4, r4, #4194304	; 0x400000
    ab60:	itt	cc
    ab62:	addcc.w	r1, r1, #1048576	; 0x100000
    ab66:	popcc	{r4, r5, pc}
    ab68:	and.w	r5, r1, #2147483648	; 0x80000000
    ab6c:	orr.w	r1, r5, #2130706432	; 0x7f000000
    ab70:	orr.w	r1, r1, #15728640	; 0xf00000
    ab74:	mov.w	r0, #0
    ab78:	pop	{r4, r5, pc}
    ab7a:	mvns.w	ip, r4, asr #21
    ab7e:	itte	ne
    ab80:	movne	r1, r3
    ab82:	movne	r0, r2
    ab84:	mvnseq.w	ip, r5, asr #21
    ab88:	itt	ne
    ab8a:	movne	r3, r1
    ab8c:	movne	r2, r0
    ab8e:	orrs.w	r4, r0, r1, lsl #12
    ab92:	itte	eq
    ab94:	orrseq.w	r5, r2, r3, lsl #12
    ab98:	teqeq	r1, r3
    ab9c:	orrne.w	r1, r1, #524288	; 0x80000
    aba0:	pop	{r4, r5, pc}
    aba2:	nop

0000aba4 <__aeabi_ui2d>:
    aba4:	teq	r0, #0
    aba8:	itt	eq
    abaa:	moveq	r1, #0
    abac:	bxeq	lr
    abae:	push	{r4, r5, lr}
    abb0:	mov.w	r4, #1024	; 0x400
    abb4:	add.w	r4, r4, #50	; 0x32
    abb8:	mov.w	r5, #0
    abbc:	mov.w	r1, #0
    abc0:	b.n	aa64 <__adddf3+0x138>
    abc2:	nop

0000abc4 <__aeabi_i2d>:
    abc4:	teq	r0, #0
    abc8:	itt	eq
    abca:	moveq	r1, #0
    abcc:	bxeq	lr
    abce:	push	{r4, r5, lr}
    abd0:	mov.w	r4, #1024	; 0x400
    abd4:	add.w	r4, r4, #50	; 0x32
    abd8:	ands.w	r5, r0, #2147483648	; 0x80000000
    abdc:	it	mi
    abde:	negmi	r0, r0
    abe0:	mov.w	r1, #0
    abe4:	b.n	aa64 <__adddf3+0x138>
    abe6:	nop

0000abe8 <__aeabi_f2d>:
    abe8:	lsls	r2, r0, #1
    abea:	mov.w	r1, r2, asr #3
    abee:	mov.w	r1, r1, rrx
    abf2:	mov.w	r0, r2, lsl #28
    abf6:	itttt	ne
    abf8:	andsne.w	r3, r2, #4278190080	; 0xff000000
    abfc:	teqne	r3, #4278190080	; 0xff000000
    ac00:	eorne.w	r1, r1, #939524096	; 0x38000000
    ac04:	bxne	lr
    ac06:	teq	r2, #0
    ac0a:	ite	ne
    ac0c:	teqne	r3, #4278190080	; 0xff000000
    ac10:	bxeq	lr
    ac12:	push	{r4, r5, lr}
    ac14:	mov.w	r4, #896	; 0x380
    ac18:	and.w	r5, r1, #2147483648	; 0x80000000
    ac1c:	bic.w	r1, r1, #2147483648	; 0x80000000
    ac20:	b.n	aa64 <__adddf3+0x138>
    ac22:	nop

0000ac24 <__aeabi_ul2d>:
    ac24:	orrs.w	r2, r0, r1
    ac28:	it	eq
    ac2a:	bxeq	lr
    ac2c:	push	{r4, r5, lr}
    ac2e:	mov.w	r5, #0
    ac32:	b.n	ac4a <__aeabi_l2d+0x16>

0000ac34 <__aeabi_l2d>:
    ac34:	orrs.w	r2, r0, r1
    ac38:	it	eq
    ac3a:	bxeq	lr
    ac3c:	push	{r4, r5, lr}
    ac3e:	ands.w	r5, r1, #2147483648	; 0x80000000
    ac42:	bpl.n	ac4a <__aeabi_l2d+0x16>
    ac44:	negs	r0, r0
    ac46:	sbc.w	r1, r1, r1, lsl #1
    ac4a:	mov.w	r4, #1024	; 0x400
    ac4e:	add.w	r4, r4, #50	; 0x32
    ac52:	movs.w	ip, r1, lsr #22
    ac56:	beq.w	aa12 <__adddf3+0xe6>
    ac5a:	mov.w	r2, #3
    ac5e:	movs.w	ip, ip, lsr #3
    ac62:	it	ne
    ac64:	addne	r2, #3
    ac66:	movs.w	ip, ip, lsr #3
    ac6a:	it	ne
    ac6c:	addne	r2, #3
    ac6e:	add.w	r2, r2, ip, lsr #3
    ac72:	rsb	r3, r2, #32
    ac76:	lsl.w	ip, r0, r3
    ac7a:	lsr.w	r0, r0, r2
    ac7e:	lsl.w	lr, r1, r3
    ac82:	orr.w	r0, r0, lr
    ac86:	lsr.w	r1, r1, r2
    ac8a:	add	r4, r2
    ac8c:	b.n	aa12 <__adddf3+0xe6>
    ac8e:	nop

0000ac90 <__aeabi_dmul>:
    ac90:	push	{r4, r5, r6, lr}
    ac92:	mov.w	ip, #255	; 0xff
    ac96:	orr.w	ip, ip, #1792	; 0x700
    ac9a:	ands.w	r4, ip, r1, lsr #20
    ac9e:	ittte	ne
    aca0:	andsne.w	r5, ip, r3, lsr #20
    aca4:	teqne	r4, ip
    aca8:	teqne	r5, ip
    acac:	bleq	ae6c <__aeabi_dmul+0x1dc>
    acb0:	add	r4, r5
    acb2:	eor.w	r6, r1, r3
    acb6:	bic.w	r1, r1, ip, lsl #21
    acba:	bic.w	r3, r3, ip, lsl #21
    acbe:	orrs.w	r5, r0, r1, lsl #12
    acc2:	it	ne
    acc4:	orrsne.w	r5, r2, r3, lsl #12
    acc8:	orr.w	r1, r1, #1048576	; 0x100000
    accc:	orr.w	r3, r3, #1048576	; 0x100000
    acd0:	beq.n	ad44 <__aeabi_dmul+0xb4>
    acd2:	umull	ip, lr, r0, r2
    acd6:	mov.w	r5, #0
    acda:	umlal	lr, r5, r1, r2
    acde:	and.w	r2, r6, #2147483648	; 0x80000000
    ace2:	umlal	lr, r5, r0, r3
    ace6:	mov.w	r6, #0
    acea:	umlal	r5, r6, r1, r3
    acee:	teq	ip, #0
    acf2:	it	ne
    acf4:	orrne.w	lr, lr, #1
    acf8:	sub.w	r4, r4, #255	; 0xff
    acfc:	cmp.w	r6, #512	; 0x200
    ad00:	sbc.w	r4, r4, #768	; 0x300
    ad04:	bcs.n	ad10 <__aeabi_dmul+0x80>
    ad06:	movs.w	lr, lr, lsl #1
    ad0a:	adcs	r5, r5
    ad0c:	adc.w	r6, r6, r6
    ad10:	orr.w	r1, r2, r6, lsl #11
    ad14:	orr.w	r1, r1, r5, lsr #21
    ad18:	mov.w	r0, r5, lsl #11
    ad1c:	orr.w	r0, r0, lr, lsr #21
    ad20:	mov.w	lr, lr, lsl #11
    ad24:	subs.w	ip, r4, #253	; 0xfd
    ad28:	it	hi
    ad2a:	cmphi.w	ip, #1792	; 0x700
    ad2e:	bhi.n	ad6e <__aeabi_dmul+0xde>
    ad30:	cmp.w	lr, #2147483648	; 0x80000000
    ad34:	it	eq
    ad36:	movseq.w	lr, r0, lsr #1
    ad3a:	adcs.w	r0, r0, #0
    ad3e:	adc.w	r1, r1, r4, lsl #20
    ad42:	pop	{r4, r5, r6, pc}
    ad44:	and.w	r6, r6, #2147483648	; 0x80000000
    ad48:	orr.w	r1, r6, r1
    ad4c:	orr.w	r0, r0, r2
    ad50:	eor.w	r1, r1, r3
    ad54:	subs.w	r4, r4, ip, lsr #1
    ad58:	ittt	gt
    ad5a:	rsbsgt	r5, r4, ip
    ad5e:	orrgt.w	r1, r1, r4, lsl #20
    ad62:	popgt	{r4, r5, r6, pc}
    ad64:	orr.w	r1, r1, #1048576	; 0x100000
    ad68:	mov.w	lr, #0
    ad6c:	subs	r4, #1
    ad6e:	bgt.w	aec8 <__aeabi_dmul+0x238>
    ad72:	cmn.w	r4, #54	; 0x36
    ad76:	ittt	le
    ad78:	movle	r0, #0
    ad7a:	andle.w	r1, r1, #2147483648	; 0x80000000
    ad7e:	pople	{r4, r5, r6, pc}
    ad80:	rsb	r4, r4, #0
    ad84:	subs	r4, #32
    ad86:	bge.n	adf4 <__aeabi_dmul+0x164>
    ad88:	adds	r4, #12
    ad8a:	bgt.n	adc4 <__aeabi_dmul+0x134>
    ad8c:	add.w	r4, r4, #20
    ad90:	rsb	r5, r4, #32
    ad94:	lsl.w	r3, r0, r5
    ad98:	lsr.w	r0, r0, r4
    ad9c:	lsl.w	r2, r1, r5
    ada0:	orr.w	r0, r0, r2
    ada4:	and.w	r2, r1, #2147483648	; 0x80000000
    ada8:	bic.w	r1, r1, #2147483648	; 0x80000000
    adac:	adds.w	r0, r0, r3, lsr #31
    adb0:	lsr.w	r6, r1, r4
    adb4:	adc.w	r1, r2, r6
    adb8:	orrs.w	lr, lr, r3, lsl #1
    adbc:	it	eq
    adbe:	biceq.w	r0, r0, r3, lsr #31
    adc2:	pop	{r4, r5, r6, pc}
    adc4:	rsb	r4, r4, #12
    adc8:	rsb	r5, r4, #32
    adcc:	lsl.w	r3, r0, r4
    add0:	lsr.w	r0, r0, r5
    add4:	lsl.w	r2, r1, r4
    add8:	orr.w	r0, r0, r2
    addc:	and.w	r1, r1, #2147483648	; 0x80000000
    ade0:	adds.w	r0, r0, r3, lsr #31
    ade4:	adc.w	r1, r1, #0
    ade8:	orrs.w	lr, lr, r3, lsl #1
    adec:	it	eq
    adee:	biceq.w	r0, r0, r3, lsr #31
    adf2:	pop	{r4, r5, r6, pc}
    adf4:	rsb	r5, r4, #32
    adf8:	lsl.w	r2, r0, r5
    adfc:	orr.w	lr, lr, r2
    ae00:	lsr.w	r3, r0, r4
    ae04:	lsl.w	r2, r1, r5
    ae08:	orr.w	r3, r3, r2
    ae0c:	lsr.w	r0, r1, r4
    ae10:	and.w	r1, r1, #2147483648	; 0x80000000
    ae14:	lsr.w	r2, r1, r4
    ae18:	bic.w	r0, r0, r2
    ae1c:	add.w	r0, r0, r3, lsr #31
    ae20:	orrs.w	lr, lr, r3, lsl #1
    ae24:	it	eq
    ae26:	biceq.w	r0, r0, r3, lsr #31
    ae2a:	pop	{r4, r5, r6, pc}
    ae2c:	teq	r4, #0
    ae30:	bne.n	ae52 <__aeabi_dmul+0x1c2>
    ae32:	and.w	r6, r1, #2147483648	; 0x80000000
    ae36:	lsls	r0, r0, #1
    ae38:	adc.w	r1, r1, r1
    ae3c:	tst.w	r1, #1048576	; 0x100000
    ae40:	it	eq
    ae42:	subeq	r4, #1
    ae44:	beq.n	ae36 <__aeabi_dmul+0x1a6>
    ae46:	orr.w	r1, r1, r6
    ae4a:	teq	r5, #0
    ae4e:	it	ne
    ae50:	bxne	lr
    ae52:	and.w	r6, r3, #2147483648	; 0x80000000
    ae56:	lsls	r2, r2, #1
    ae58:	adc.w	r3, r3, r3
    ae5c:	tst.w	r3, #1048576	; 0x100000
    ae60:	it	eq
    ae62:	subeq	r5, #1
    ae64:	beq.n	ae56 <__aeabi_dmul+0x1c6>
    ae66:	orr.w	r3, r3, r6
    ae6a:	bx	lr
    ae6c:	teq	r4, ip
    ae70:	and.w	r5, ip, r3, lsr #20
    ae74:	it	ne
    ae76:	teqne	r5, ip
    ae7a:	beq.n	ae96 <__aeabi_dmul+0x206>
    ae7c:	orrs.w	r6, r0, r1, lsl #1
    ae80:	it	ne
    ae82:	orrsne.w	r6, r2, r3, lsl #1
    ae86:	bne.n	ae2c <__aeabi_dmul+0x19c>
    ae88:	eor.w	r1, r1, r3
    ae8c:	and.w	r1, r1, #2147483648	; 0x80000000
    ae90:	mov.w	r0, #0
    ae94:	pop	{r4, r5, r6, pc}
    ae96:	orrs.w	r6, r0, r1, lsl #1
    ae9a:	itte	eq
    ae9c:	moveq	r0, r2
    ae9e:	moveq	r1, r3
    aea0:	orrsne.w	r6, r2, r3, lsl #1
    aea4:	beq.n	aeda <__aeabi_dmul+0x24a>
    aea6:	teq	r4, ip
    aeaa:	bne.n	aeb2 <__aeabi_dmul+0x222>
    aeac:	orrs.w	r6, r0, r1, lsl #12
    aeb0:	bne.n	aeda <__aeabi_dmul+0x24a>
    aeb2:	teq	r5, ip
    aeb6:	bne.n	aec4 <__aeabi_dmul+0x234>
    aeb8:	orrs.w	r6, r2, r3, lsl #12
    aebc:	itt	ne
    aebe:	movne	r0, r2
    aec0:	movne	r1, r3
    aec2:	bne.n	aeda <__aeabi_dmul+0x24a>
    aec4:	eor.w	r1, r1, r3
    aec8:	and.w	r1, r1, #2147483648	; 0x80000000
    aecc:	orr.w	r1, r1, #2130706432	; 0x7f000000
    aed0:	orr.w	r1, r1, #15728640	; 0xf00000
    aed4:	mov.w	r0, #0
    aed8:	pop	{r4, r5, r6, pc}
    aeda:	orr.w	r1, r1, #2130706432	; 0x7f000000
    aede:	orr.w	r1, r1, #16252928	; 0xf80000
    aee2:	pop	{r4, r5, r6, pc}

0000aee4 <__aeabi_ddiv>:
    aee4:	push	{r4, r5, r6, lr}
    aee6:	mov.w	ip, #255	; 0xff
    aeea:	orr.w	ip, ip, #1792	; 0x700
    aeee:	ands.w	r4, ip, r1, lsr #20
    aef2:	ittte	ne
    aef4:	andsne.w	r5, ip, r3, lsr #20
    aef8:	teqne	r4, ip
    aefc:	teqne	r5, ip
    af00:	bleq	b052 <__aeabi_ddiv+0x16e>
    af04:	sub.w	r4, r4, r5
    af08:	eor.w	lr, r1, r3
    af0c:	orrs.w	r5, r2, r3, lsl #12
    af10:	mov.w	r1, r1, lsl #12
    af14:	beq.w	b028 <__aeabi_ddiv+0x144>
    af18:	mov.w	r3, r3, lsl #12
    af1c:	mov.w	r5, #268435456	; 0x10000000
    af20:	orr.w	r3, r5, r3, lsr #4
    af24:	orr.w	r3, r3, r2, lsr #24
    af28:	mov.w	r2, r2, lsl #8
    af2c:	orr.w	r5, r5, r1, lsr #4
    af30:	orr.w	r5, r5, r0, lsr #24
    af34:	mov.w	r6, r0, lsl #8
    af38:	and.w	r1, lr, #2147483648	; 0x80000000
    af3c:	cmp	r5, r3
    af3e:	it	eq
    af40:	cmpeq	r6, r2
    af42:	adc.w	r4, r4, #253	; 0xfd
    af46:	add.w	r4, r4, #768	; 0x300
    af4a:	bcs.n	af52 <__aeabi_ddiv+0x6e>
    af4c:	lsrs	r3, r3, #1
    af4e:	mov.w	r2, r2, rrx
    af52:	subs	r6, r6, r2
    af54:	sbc.w	r5, r5, r3
    af58:	lsrs	r3, r3, #1
    af5a:	mov.w	r2, r2, rrx
    af5e:	mov.w	r0, #1048576	; 0x100000
    af62:	mov.w	ip, #524288	; 0x80000
    af66:	subs.w	lr, r6, r2
    af6a:	sbcs.w	lr, r5, r3
    af6e:	ittt	cs
    af70:	subcs	r6, r6, r2
    af72:	movcs	r5, lr
    af74:	orrcs.w	r0, r0, ip
    af78:	lsrs	r3, r3, #1
    af7a:	mov.w	r2, r2, rrx
    af7e:	subs.w	lr, r6, r2
    af82:	sbcs.w	lr, r5, r3
    af86:	ittt	cs
    af88:	subcs	r6, r6, r2
    af8a:	movcs	r5, lr
    af8c:	orrcs.w	r0, r0, ip, lsr #1
    af90:	lsrs	r3, r3, #1
    af92:	mov.w	r2, r2, rrx
    af96:	subs.w	lr, r6, r2
    af9a:	sbcs.w	lr, r5, r3
    af9e:	ittt	cs
    afa0:	subcs	r6, r6, r2
    afa2:	movcs	r5, lr
    afa4:	orrcs.w	r0, r0, ip, lsr #2
    afa8:	lsrs	r3, r3, #1
    afaa:	mov.w	r2, r2, rrx
    afae:	subs.w	lr, r6, r2
    afb2:	sbcs.w	lr, r5, r3
    afb6:	ittt	cs
    afb8:	subcs	r6, r6, r2
    afba:	movcs	r5, lr
    afbc:	orrcs.w	r0, r0, ip, lsr #3
    afc0:	orrs.w	lr, r5, r6
    afc4:	beq.n	aff8 <__aeabi_ddiv+0x114>
    afc6:	mov.w	r5, r5, lsl #4
    afca:	orr.w	r5, r5, r6, lsr #28
    afce:	mov.w	r6, r6, lsl #4
    afd2:	mov.w	r3, r3, lsl #3
    afd6:	orr.w	r3, r3, r2, lsr #29
    afda:	mov.w	r2, r2, lsl #3
    afde:	movs.w	ip, ip, lsr #4
    afe2:	bne.n	af66 <__aeabi_ddiv+0x82>
    afe4:	tst.w	r1, #1048576	; 0x100000
    afe8:	bne.n	b002 <__aeabi_ddiv+0x11e>
    afea:	orr.w	r1, r1, r0
    afee:	mov.w	r0, #0
    aff2:	mov.w	ip, #2147483648	; 0x80000000
    aff6:	b.n	af66 <__aeabi_ddiv+0x82>
    aff8:	tst.w	r1, #1048576	; 0x100000
    affc:	itt	eq
    affe:	orreq	r1, r0
    b000:	moveq	r0, #0
    b002:	subs.w	ip, r4, #253	; 0xfd
    b006:	it	hi
    b008:	cmphi.w	ip, #1792	; 0x700
    b00c:	bhi.w	ad6e <__aeabi_dmul+0xde>
    b010:	subs.w	ip, r5, r3
    b014:	itt	eq
    b016:	subseq.w	ip, r6, r2
    b01a:	movseq.w	ip, r0, lsr #1
    b01e:	adcs.w	r0, r0, #0
    b022:	adc.w	r1, r1, r4, lsl #20
    b026:	pop	{r4, r5, r6, pc}
    b028:	and.w	lr, lr, #2147483648	; 0x80000000
    b02c:	orr.w	r1, lr, r1, lsr #12
    b030:	adds.w	r4, r4, ip, lsr #1
    b034:	ittt	gt
    b036:	rsbsgt	r5, r4, ip
    b03a:	orrgt.w	r1, r1, r4, lsl #20
    b03e:	popgt	{r4, r5, r6, pc}
    b040:	orr.w	r1, r1, #1048576	; 0x100000
    b044:	mov.w	lr, #0
    b048:	subs	r4, #1
    b04a:	b.n	ad6e <__aeabi_dmul+0xde>
    b04c:	orr.w	lr, r5, r6
    b050:	b.n	ad6e <__aeabi_dmul+0xde>
    b052:	and.w	r5, ip, r3, lsr #20
    b056:	teq	r4, ip
    b05a:	it	eq
    b05c:	teqeq	r5, ip
    b060:	beq.w	aeda <__aeabi_dmul+0x24a>
    b064:	teq	r4, ip
    b068:	bne.n	b080 <__aeabi_ddiv+0x19c>
    b06a:	orrs.w	r4, r0, r1, lsl #12
    b06e:	bne.w	aeda <__aeabi_dmul+0x24a>
    b072:	teq	r5, ip
    b076:	bne.w	aec4 <__aeabi_dmul+0x234>
    b07a:	mov	r0, r2
    b07c:	mov	r1, r3
    b07e:	b.n	aeda <__aeabi_dmul+0x24a>
    b080:	teq	r5, ip
    b084:	bne.n	b094 <__aeabi_ddiv+0x1b0>
    b086:	orrs.w	r5, r2, r3, lsl #12
    b08a:	beq.w	ae88 <__aeabi_dmul+0x1f8>
    b08e:	mov	r0, r2
    b090:	mov	r1, r3
    b092:	b.n	aeda <__aeabi_dmul+0x24a>
    b094:	orrs.w	r6, r0, r1, lsl #1
    b098:	it	ne
    b09a:	orrsne.w	r6, r2, r3, lsl #1
    b09e:	bne.w	ae2c <__aeabi_dmul+0x19c>
    b0a2:	orrs.w	r4, r0, r1, lsl #1
    b0a6:	bne.w	aec4 <__aeabi_dmul+0x234>
    b0aa:	orrs.w	r5, r2, r3, lsl #1
    b0ae:	bne.w	ae88 <__aeabi_dmul+0x1f8>
    b0b2:	b.n	aeda <__aeabi_dmul+0x24a>

0000b0b4 <__gedf2>:
    b0b4:	mov.w	ip, #4294967295
    b0b8:	b.n	b0c8 <__cmpdf2+0x4>
    b0ba:	nop

0000b0bc <__ledf2>:
    b0bc:	mov.w	ip, #1
    b0c0:	b.n	b0c8 <__cmpdf2+0x4>
    b0c2:	nop

0000b0c4 <__cmpdf2>:
    b0c4:	mov.w	ip, #1
    b0c8:	str.w	ip, [sp, #-4]!
    b0cc:	mov.w	ip, r1, lsl #1
    b0d0:	mvns.w	ip, ip, asr #21
    b0d4:	mov.w	ip, r3, lsl #1
    b0d8:	it	ne
    b0da:	mvnsne.w	ip, ip, asr #21
    b0de:	beq.n	b118 <__cmpdf2+0x54>
    b0e0:	add	sp, #4
    b0e2:	orrs.w	ip, r0, r1, lsl #1
    b0e6:	ite	eq
    b0e8:	orrseq.w	ip, r2, r3, lsl #1
    b0ec:	teqne	r1, r3
    b0f0:	ittt	eq
    b0f2:	teqeq	r0, r2
    b0f6:	moveq	r0, #0
    b0f8:	bxeq	lr
    b0fa:	cmn.w	r0, #0
    b0fe:	teq	r1, r3
    b102:	it	pl
    b104:	cmppl	r1, r3
    b106:	it	eq
    b108:	cmpeq	r0, r2
    b10a:	ite	cs
    b10c:	asrcs	r0, r3, #31
    b10e:	mvncc.w	r0, r3, asr #31
    b112:	orr.w	r0, r0, #1
    b116:	bx	lr
    b118:	mov.w	ip, r1, lsl #1
    b11c:	mvns.w	ip, ip, asr #21
    b120:	bne.n	b128 <__cmpdf2+0x64>
    b122:	orrs.w	ip, r0, r1, lsl #12
    b126:	bne.n	b138 <__cmpdf2+0x74>
    b128:	mov.w	ip, r3, lsl #1
    b12c:	mvns.w	ip, ip, asr #21
    b130:	bne.n	b0e0 <__cmpdf2+0x1c>
    b132:	orrs.w	ip, r2, r3, lsl #12
    b136:	beq.n	b0e0 <__cmpdf2+0x1c>
    b138:	ldr.w	r0, [sp], #4
    b13c:	bx	lr
    b13e:	nop

0000b140 <__aeabi_cdrcmple>:
    b140:	mov	ip, r0
    b142:	mov	r0, r2
    b144:	mov	r2, ip
    b146:	mov	ip, r1
    b148:	mov	r1, r3
    b14a:	mov	r3, ip
    b14c:	b.n	b150 <__aeabi_cdcmpeq>
    b14e:	nop

0000b150 <__aeabi_cdcmpeq>:
    b150:	push	{r0, lr}
    b152:	bl	b0c4 <__cmpdf2>
    b156:	cmp	r0, #0
    b158:	it	mi
    b15a:	cmnmi.w	r0, #0
    b15e:	pop	{r0, pc}

0000b160 <__aeabi_dcmpeq>:
    b160:	str.w	lr, [sp, #-8]!
    b164:	bl	b150 <__aeabi_cdcmpeq>
    b168:	ite	eq
    b16a:	moveq	r0, #1
    b16c:	movne	r0, #0
    b16e:	ldr.w	pc, [sp], #8
    b172:	nop

0000b174 <__aeabi_dcmplt>:
    b174:	str.w	lr, [sp, #-8]!
    b178:	bl	b150 <__aeabi_cdcmpeq>
    b17c:	ite	cc
    b17e:	movcc	r0, #1
    b180:	movcs	r0, #0
    b182:	ldr.w	pc, [sp], #8
    b186:	nop

0000b188 <__aeabi_dcmple>:
    b188:	str.w	lr, [sp, #-8]!
    b18c:	bl	b150 <__aeabi_cdcmpeq>
    b190:	ite	ls
    b192:	movls	r0, #1
    b194:	movhi	r0, #0
    b196:	ldr.w	pc, [sp], #8
    b19a:	nop

0000b19c <__aeabi_dcmpge>:
    b19c:	str.w	lr, [sp, #-8]!
    b1a0:	bl	b140 <__aeabi_cdrcmple>
    b1a4:	ite	ls
    b1a6:	movls	r0, #1
    b1a8:	movhi	r0, #0
    b1aa:	ldr.w	pc, [sp], #8
    b1ae:	nop

0000b1b0 <__aeabi_dcmpgt>:
    b1b0:	str.w	lr, [sp, #-8]!
    b1b4:	bl	b140 <__aeabi_cdrcmple>
    b1b8:	ite	cc
    b1ba:	movcc	r0, #1
    b1bc:	movcs	r0, #0
    b1be:	ldr.w	pc, [sp], #8
    b1c2:	nop

0000b1c4 <__aeabi_dcmpun>:
    b1c4:	mov.w	ip, r1, lsl #1
    b1c8:	mvns.w	ip, ip, asr #21
    b1cc:	bne.n	b1d4 <__aeabi_dcmpun+0x10>
    b1ce:	orrs.w	ip, r0, r1, lsl #12
    b1d2:	bne.n	b1ea <__aeabi_dcmpun+0x26>
    b1d4:	mov.w	ip, r3, lsl #1
    b1d8:	mvns.w	ip, ip, asr #21
    b1dc:	bne.n	b1e4 <__aeabi_dcmpun+0x20>
    b1de:	orrs.w	ip, r2, r3, lsl #12
    b1e2:	bne.n	b1ea <__aeabi_dcmpun+0x26>
    b1e4:	mov.w	r0, #0
    b1e8:	bx	lr
    b1ea:	mov.w	r0, #1
    b1ee:	bx	lr

0000b1f0 <__aeabi_d2iz>:
    b1f0:	mov.w	r2, r1, lsl #1
    b1f4:	adds.w	r2, r2, #2097152	; 0x200000
    b1f8:	bcs.n	b226 <__aeabi_d2iz+0x36>
    b1fa:	bpl.n	b220 <__aeabi_d2iz+0x30>
    b1fc:	mvn.w	r3, #992	; 0x3e0
    b200:	subs.w	r2, r3, r2, asr #21
    b204:	bls.n	b22c <__aeabi_d2iz+0x3c>
    b206:	mov.w	r3, r1, lsl #11
    b20a:	orr.w	r3, r3, #2147483648	; 0x80000000
    b20e:	orr.w	r3, r3, r0, lsr #21
    b212:	tst.w	r1, #2147483648	; 0x80000000
    b216:	lsr.w	r0, r3, r2
    b21a:	it	ne
    b21c:	negne	r0, r0
    b21e:	bx	lr
    b220:	mov.w	r0, #0
    b224:	bx	lr
    b226:	orrs.w	r0, r0, r1, lsl #12
    b22a:	bne.n	b238 <__aeabi_d2iz+0x48>
    b22c:	ands.w	r0, r1, #2147483648	; 0x80000000
    b230:	it	eq
    b232:	mvneq.w	r0, #2147483648	; 0x80000000
    b236:	bx	lr
    b238:	mov.w	r0, #0
    b23c:	bx	lr
    b23e:	nop

0000b240 <__aeabi_d2uiz>:
    b240:	lsls	r2, r1, #1
    b242:	bcs.n	b268 <__aeabi_d2uiz+0x28>
    b244:	adds.w	r2, r2, #2097152	; 0x200000
    b248:	bcs.n	b26e <__aeabi_d2uiz+0x2e>
    b24a:	bpl.n	b268 <__aeabi_d2uiz+0x28>
    b24c:	mvn.w	r3, #992	; 0x3e0
    b250:	subs.w	r2, r3, r2, asr #21
    b254:	bmi.n	b274 <__aeabi_d2uiz+0x34>
    b256:	mov.w	r3, r1, lsl #11
    b25a:	orr.w	r3, r3, #2147483648	; 0x80000000
    b25e:	orr.w	r3, r3, r0, lsr #21
    b262:	lsr.w	r0, r3, r2
    b266:	bx	lr
    b268:	mov.w	r0, #0
    b26c:	bx	lr
    b26e:	orrs.w	r0, r0, r1, lsl #12
    b272:	bne.n	b27a <__aeabi_d2uiz+0x3a>
    b274:	mov.w	r0, #4294967295
    b278:	bx	lr
    b27a:	mov.w	r0, #0
    b27e:	bx	lr

0000b280 <__aeabi_d2f>:
    b280:	mov.w	r2, r1, lsl #1
    b284:	subs.w	r3, r2, #1879048192	; 0x70000000
    b288:	itt	cs
    b28a:	subscs.w	ip, r3, #2097152	; 0x200000
    b28e:	rsbscs	ip, ip, #532676608	; 0x1fc00000
    b292:	bls.n	b2b0 <__aeabi_d2f+0x30>
    b294:	and.w	ip, r1, #2147483648	; 0x80000000
    b298:	mov.w	r2, r0, lsl #3
    b29c:	orr.w	r0, ip, r0, lsr #29
    b2a0:	cmp.w	r2, #2147483648	; 0x80000000
    b2a4:	adc.w	r0, r0, r3, lsl #2
    b2a8:	it	eq
    b2aa:	biceq.w	r0, r0, #1
    b2ae:	bx	lr
    b2b0:	tst.w	r1, #1073741824	; 0x40000000
    b2b4:	bne.n	b2fa <__aeabi_d2f+0x7a>
    b2b6:	adds.w	r2, r3, #48234496	; 0x2e00000
    b2ba:	itt	lt
    b2bc:	andlt.w	r0, r1, #2147483648	; 0x80000000
    b2c0:	bxlt	lr
    b2c2:	orr.w	r1, r1, #1048576	; 0x100000
    b2c6:	mov.w	r2, r2, lsr #21
    b2ca:	rsb	r2, r2, #24
    b2ce:	rsb	ip, r2, #32
    b2d2:	lsls.w	r3, r0, ip
    b2d6:	lsr.w	r0, r0, r2
    b2da:	it	ne
    b2dc:	orrne.w	r0, r0, #1
    b2e0:	mov.w	r3, r1, lsl #11
    b2e4:	mov.w	r3, r3, lsr #11
    b2e8:	lsl.w	ip, r3, ip
    b2ec:	orr.w	r0, r0, ip
    b2f0:	lsr.w	r3, r3, r2
    b2f4:	mov.w	r3, r3, lsl #1
    b2f8:	b.n	b294 <__aeabi_d2f+0x14>
    b2fa:	mvns.w	r3, r2, asr #21
    b2fe:	bne.n	b310 <__aeabi_d2f+0x90>
    b300:	orrs.w	r3, r0, r1, lsl #12
    b304:	ittt	ne
    b306:	movne.w	r0, #2130706432	; 0x7f000000
    b30a:	orrne.w	r0, r0, #12582912	; 0xc00000
    b30e:	bxne	lr
    b310:	and.w	r0, r1, #2147483648	; 0x80000000
    b314:	orr.w	r0, r0, #2130706432	; 0x7f000000
    b318:	orr.w	r0, r0, #8388608	; 0x800000
    b31c:	bx	lr
    b31e:	nop

0000b320 <__aeabi_frsub>:
    b320:	eor.w	r0, r0, #2147483648	; 0x80000000
    b324:	b.n	b32c <__addsf3>
    b326:	nop

0000b328 <__aeabi_fsub>:
    b328:	eor.w	r1, r1, #2147483648	; 0x80000000

0000b32c <__addsf3>:
    b32c:	lsls	r2, r0, #1
    b32e:	itttt	ne
    b330:	movsne.w	r3, r1, lsl #1
    b334:	teqne	r2, r3
    b338:	mvnsne.w	ip, r2, asr #24
    b33c:	mvnsne.w	ip, r3, asr #24
    b340:	beq.n	b418 <__addsf3+0xec>
    b342:	mov.w	r2, r2, lsr #24
    b346:	rsbs	r3, r2, r3, lsr #24
    b34a:	itttt	gt
    b34c:	addgt	r2, r2, r3
    b34e:	eorgt	r1, r0
    b350:	eorgt	r0, r1
    b352:	eorgt	r1, r0
    b354:	it	lt
    b356:	neglt	r3, r3
    b358:	cmp	r3, #25
    b35a:	it	hi
    b35c:	bxhi	lr
    b35e:	tst.w	r0, #2147483648	; 0x80000000
    b362:	orr.w	r0, r0, #8388608	; 0x800000
    b366:	bic.w	r0, r0, #4278190080	; 0xff000000
    b36a:	it	ne
    b36c:	negne	r0, r0
    b36e:	tst.w	r1, #2147483648	; 0x80000000
    b372:	orr.w	r1, r1, #8388608	; 0x800000
    b376:	bic.w	r1, r1, #4278190080	; 0xff000000
    b37a:	it	ne
    b37c:	negne	r1, r1
    b37e:	teq	r2, r3
    b382:	beq.n	b404 <__addsf3+0xd8>
    b384:	sub.w	r2, r2, #1
    b388:	asr.w	ip, r1, r3
    b38c:	adds.w	r0, r0, ip
    b390:	rsb	r3, r3, #32
    b394:	lsl.w	r1, r1, r3
    b398:	and.w	r3, r0, #2147483648	; 0x80000000
    b39c:	bpl.n	b3a4 <__addsf3+0x78>
    b39e:	negs	r1, r1
    b3a0:	sbc.w	r0, r0, r0, lsl #1
    b3a4:	cmp.w	r0, #8388608	; 0x800000
    b3a8:	bcc.n	b3d2 <__addsf3+0xa6>
    b3aa:	cmp.w	r0, #16777216	; 0x1000000
    b3ae:	bcc.n	b3be <__addsf3+0x92>
    b3b0:	lsrs	r0, r0, #1
    b3b2:	mov.w	r1, r1, rrx
    b3b6:	add.w	r2, r2, #1
    b3ba:	cmp	r2, #254	; 0xfe
    b3bc:	bcs.n	b462 <__addsf3+0x136>
    b3be:	cmp.w	r1, #2147483648	; 0x80000000
    b3c2:	adc.w	r0, r0, r2, lsl #23
    b3c6:	it	eq
    b3c8:	biceq.w	r0, r0, #1
    b3cc:	orr.w	r0, r0, r3
    b3d0:	bx	lr
    b3d2:	lsls	r1, r1, #1
    b3d4:	adc.w	r0, r0, r0
    b3d8:	tst.w	r0, #8388608	; 0x800000
    b3dc:	sub.w	r2, r2, #1
    b3e0:	bne.n	b3be <__addsf3+0x92>
    b3e2:	clz	ip, r0
    b3e6:	sub.w	ip, ip, #8
    b3ea:	subs.w	r2, r2, ip
    b3ee:	lsl.w	r0, r0, ip
    b3f2:	itet	ge
    b3f4:	addge.w	r0, r0, r2, lsl #23
    b3f8:	neglt	r2, r2
    b3fa:	orrge	r0, r3
    b3fc:	itt	lt
    b3fe:	lsrlt	r0, r2
    b400:	orrlt	r0, r3
    b402:	bx	lr
    b404:	teq	r2, #0
    b408:	eor.w	r1, r1, #8388608	; 0x800000
    b40c:	itte	eq
    b40e:	eoreq.w	r0, r0, #8388608	; 0x800000
    b412:	addeq	r2, #1
    b414:	subne	r3, #1
    b416:	b.n	b384 <__addsf3+0x58>
    b418:	mov.w	r3, r1, lsl #1
    b41c:	mvns.w	ip, r2, asr #24
    b420:	it	ne
    b422:	mvnsne.w	ip, r3, asr #24
    b426:	beq.n	b46c <__addsf3+0x140>
    b428:	teq	r2, r3
    b42c:	beq.n	b438 <__addsf3+0x10c>
    b42e:	teq	r2, #0
    b432:	it	eq
    b434:	moveq	r0, r1
    b436:	bx	lr
    b438:	teq	r0, r1
    b43c:	itt	ne
    b43e:	movne	r0, #0
    b440:	bxne	lr
    b442:	tst.w	r2, #4278190080	; 0xff000000
    b446:	bne.n	b452 <__addsf3+0x126>
    b448:	lsls	r0, r0, #1
    b44a:	it	cs
    b44c:	orrcs.w	r0, r0, #2147483648	; 0x80000000
    b450:	bx	lr
    b452:	adds.w	r2, r2, #33554432	; 0x2000000
    b456:	itt	cc
    b458:	addcc.w	r0, r0, #8388608	; 0x800000
    b45c:	bxcc	lr
    b45e:	and.w	r3, r0, #2147483648	; 0x80000000
    b462:	orr.w	r0, r3, #2130706432	; 0x7f000000
    b466:	orr.w	r0, r0, #8388608	; 0x800000
    b46a:	bx	lr
    b46c:	mvns.w	r2, r2, asr #24
    b470:	itet	ne
    b472:	movne	r0, r1
    b474:	mvnseq.w	r3, r3, asr #24
    b478:	movne	r1, r0
    b47a:	lsls	r2, r0, #9
    b47c:	itte	eq
    b47e:	movseq.w	r3, r1, lsl #9
    b482:	teqeq	r0, r1
    b486:	orrne.w	r0, r0, #4194304	; 0x400000
    b48a:	bx	lr

0000b48c <__aeabi_ui2f>:
    b48c:	mov.w	r3, #0
    b490:	b.n	b49c <__aeabi_i2f+0x8>
    b492:	nop

0000b494 <__aeabi_i2f>:
    b494:	ands.w	r3, r0, #2147483648	; 0x80000000
    b498:	it	mi
    b49a:	negmi	r0, r0
    b49c:	movs.w	ip, r0
    b4a0:	it	eq
    b4a2:	bxeq	lr
    b4a4:	orr.w	r3, r3, #1258291200	; 0x4b000000
    b4a8:	mov	r1, r0
    b4aa:	mov.w	r0, #0
    b4ae:	b.n	b4ea <__aeabi_l2f+0x2a>

0000b4b0 <__aeabi_ul2f>:
    b4b0:	orrs.w	r2, r0, r1
    b4b4:	it	eq
    b4b6:	bxeq	lr
    b4b8:	mov.w	r3, #0
    b4bc:	b.n	b4d4 <__aeabi_l2f+0x14>
    b4be:	nop

0000b4c0 <__aeabi_l2f>:
    b4c0:	orrs.w	r2, r0, r1
    b4c4:	it	eq
    b4c6:	bxeq	lr
    b4c8:	ands.w	r3, r1, #2147483648	; 0x80000000
    b4cc:	bpl.n	b4d4 <__aeabi_l2f+0x14>
    b4ce:	negs	r0, r0
    b4d0:	sbc.w	r1, r1, r1, lsl #1
    b4d4:	movs.w	ip, r1
    b4d8:	ittt	eq
    b4da:	moveq	ip, r0
    b4dc:	moveq	r1, r0
    b4de:	moveq	r0, #0
    b4e0:	orr.w	r3, r3, #1526726656	; 0x5b000000
    b4e4:	it	eq
    b4e6:	subeq.w	r3, r3, #268435456	; 0x10000000
    b4ea:	sub.w	r3, r3, #8388608	; 0x800000
    b4ee:	clz	r2, ip
    b4f2:	subs	r2, #8
    b4f4:	sub.w	r3, r3, r2, lsl #23
    b4f8:	blt.n	b51c <__aeabi_l2f+0x5c>
    b4fa:	lsl.w	ip, r1, r2
    b4fe:	add	r3, ip
    b500:	lsl.w	ip, r0, r2
    b504:	rsb	r2, r2, #32
    b508:	cmp.w	ip, #2147483648	; 0x80000000
    b50c:	lsr.w	r2, r0, r2
    b510:	adc.w	r0, r3, r2
    b514:	it	eq
    b516:	biceq.w	r0, r0, #1
    b51a:	bx	lr
    b51c:	add.w	r2, r2, #32
    b520:	lsl.w	ip, r1, r2
    b524:	rsb	r2, r2, #32
    b528:	orrs.w	r0, r0, ip, lsl #1
    b52c:	lsr.w	r2, r1, r2
    b530:	adc.w	r0, r3, r2
    b534:	it	eq
    b536:	biceq.w	r0, r0, ip, lsr #31
    b53a:	bx	lr

0000b53c <__aeabi_uldivmod>:
    b53c:	cbnz	r3, b554 <__aeabi_uldivmod+0x18>
    b53e:	cbnz	r2, b554 <__aeabi_uldivmod+0x18>
    b540:	cmp	r1, #0
    b542:	it	eq
    b544:	cmpeq	r0, #0
    b546:	itt	ne
    b548:	movne.w	r1, #4294967295
    b54c:	movne.w	r0, #4294967295
    b550:	b.w	b8c0 <__aeabi_idiv0>
    b554:	sub.w	ip, sp, #8
    b558:	strd	ip, lr, [sp, #-16]!
    b55c:	bl	b5dc <__udivmoddi4>
    b560:	ldr.w	lr, [sp, #4]
    b564:	ldrd	r2, r3, [sp, #8]
    b568:	add	sp, #16
    b56a:	bx	lr

0000b56c <__aeabi_f2lz>:
    b56c:	vmov	s15, r0
    b570:	vcmpe.f32	s15, #0.0
    b574:	vmrs	APSR_nzcv, fpscr
    b578:	bmi.n	b57e <__aeabi_f2lz+0x12>
    b57a:	b.w	b590 <__aeabi_f2ulz>
    b57e:	push	{r3, lr}
    b580:	eor.w	r0, r0, #2147483648	; 0x80000000
    b584:	bl	b590 <__aeabi_f2ulz>
    b588:	negs	r0, r0
    b58a:	sbc.w	r1, r1, r1, lsl #1
    b58e:	pop	{r3, pc}

0000b590 <__aeabi_f2ulz>:
    b590:	push	{r4, r6, r7, lr}
    b592:	bl	abe8 <__aeabi_f2d>
    b596:	movs	r2, #0
    b598:	ldr	r3, [pc, #56]	; (b5d4 <__aeabi_f2ulz+0x44>)
    b59a:	mov	r6, r0
    b59c:	mov	r7, r1
    b59e:	bl	ac90 <__aeabi_dmul>
    b5a2:	bl	b240 <__aeabi_d2uiz>
    b5a6:	mov	r4, r0
    b5a8:	bl	aba4 <__aeabi_ui2d>
    b5ac:	movs	r2, #0
    b5ae:	ldr	r3, [pc, #40]	; (b5d8 <__aeabi_f2ulz+0x48>)
    b5b0:	bl	ac90 <__aeabi_dmul>
    b5b4:	mov	r2, r0
    b5b6:	mov	r3, r1
    b5b8:	mov	r0, r6
    b5ba:	mov	r1, r7
    b5bc:	bl	a928 <__aeabi_dsub>
    b5c0:	bl	b240 <__aeabi_d2uiz>
    b5c4:	mov	r3, r4
    b5c6:	movs	r2, #0
    b5c8:	orr.w	r2, r2, r0
    b5cc:	mov	r0, r2
    b5ce:	mov	r1, r3
    b5d0:	pop	{r4, r6, r7, pc}
    b5d2:	nop
    b5d4:	.word	0x3df00000
    b5d8:	.word	0x41f00000

0000b5dc <__udivmoddi4>:
    b5dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b5e0:	mov	ip, r1
    b5e2:	mov	r6, r1
    b5e4:	mov	r4, r0
    b5e6:	ldr	r5, [sp, #32]
    b5e8:	cmp	r3, #0
    b5ea:	bne.n	b68e <__udivmoddi4+0xb2>
    b5ec:	cmp	r2, r1
    b5ee:	mov	r7, r2
    b5f0:	bls.n	b6cc <__udivmoddi4+0xf0>
    b5f2:	clz	lr, r2
    b5f6:	cmp.w	lr, #0
    b5fa:	beq.n	b614 <__udivmoddi4+0x38>
    b5fc:	rsb	r4, lr, #32
    b600:	lsr.w	r4, r0, r4
    b604:	lsl.w	r6, r1, lr
    b608:	orr.w	ip, r4, r6
    b60c:	lsl.w	r7, r2, lr
    b610:	lsl.w	r4, r0, lr
    b614:	mov.w	r9, r7, lsr #16
    b618:	lsrs	r2, r4, #16
    b61a:	udiv	r0, ip, r9
    b61e:	uxth.w	r8, r7
    b622:	mls	r6, r9, r0, ip
    b626:	orr.w	r6, r2, r6, lsl #16
    b62a:	mul.w	r3, r0, r8
    b62e:	cmp	r3, r6
    b630:	bls.n	b646 <__udivmoddi4+0x6a>
    b632:	adds	r6, r6, r7
    b634:	add.w	r2, r0, #4294967295
    b638:	bcs.w	b880 <__udivmoddi4+0x2a4>
    b63c:	cmp	r3, r6
    b63e:	bls.w	b880 <__udivmoddi4+0x2a4>
    b642:	subs	r0, #2
    b644:	add	r6, r7
    b646:	subs	r6, r6, r3
    b648:	uxth	r2, r4
    b64a:	udiv	r3, r6, r9
    b64e:	mls	r6, r9, r3, r6
    b652:	orr.w	r4, r2, r6, lsl #16
    b656:	mul.w	r8, r3, r8
    b65a:	cmp	r8, r4
    b65c:	bls.n	b672 <__udivmoddi4+0x96>
    b65e:	adds	r4, r4, r7
    b660:	add.w	r2, r3, #4294967295
    b664:	bcs.w	b87c <__udivmoddi4+0x2a0>
    b668:	cmp	r8, r4
    b66a:	bls.w	b87c <__udivmoddi4+0x2a0>
    b66e:	subs	r3, #2
    b670:	add	r4, r7
    b672:	rsb	r4, r8, r4
    b676:	orr.w	r0, r3, r0, lsl #16
    b67a:	movs	r1, #0
    b67c:	cmp	r5, #0
    b67e:	beq.n	b746 <__udivmoddi4+0x16a>
    b680:	lsr.w	r4, r4, lr
    b684:	movs	r3, #0
    b686:	str	r4, [r5, #0]
    b688:	str	r3, [r5, #4]
    b68a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b68e:	cmp	r3, r1
    b690:	bls.n	b6a2 <__udivmoddi4+0xc6>
    b692:	cmp	r5, #0
    b694:	beq.n	b742 <__udivmoddi4+0x166>
    b696:	movs	r1, #0
    b698:	stmia.w	r5, {r0, r6}
    b69c:	mov	r0, r1
    b69e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b6a2:	clz	r1, r3
    b6a6:	cmp	r1, #0
    b6a8:	bne.w	b7cc <__udivmoddi4+0x1f0>
    b6ac:	cmp	r3, r6
    b6ae:	bcc.n	b6b6 <__udivmoddi4+0xda>
    b6b0:	cmp	r2, r0
    b6b2:	bhi.w	b8a6 <__udivmoddi4+0x2ca>
    b6b6:	subs	r4, r0, r2
    b6b8:	sbc.w	r6, r6, r3
    b6bc:	movs	r0, #1
    b6be:	mov	ip, r6
    b6c0:	cmp	r5, #0
    b6c2:	beq.n	b746 <__udivmoddi4+0x16a>
    b6c4:	stmia.w	r5, {r4, ip}
    b6c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b6cc:	cbnz	r2, b6d4 <__udivmoddi4+0xf8>
    b6ce:	movs	r7, #1
    b6d0:	udiv	r7, r7, r2
    b6d4:	clz	lr, r7
    b6d8:	cmp.w	lr, #0
    b6dc:	bne.n	b74a <__udivmoddi4+0x16e>
    b6de:	subs	r3, r6, r7
    b6e0:	mov.w	r8, r7, lsr #16
    b6e4:	uxth.w	ip, r7
    b6e8:	movs	r1, #1
    b6ea:	udiv	r0, r3, r8
    b6ee:	lsrs	r2, r4, #16
    b6f0:	mls	r6, r8, r0, r3
    b6f4:	orr.w	r6, r2, r6, lsl #16
    b6f8:	mul.w	r3, ip, r0
    b6fc:	cmp	r3, r6
    b6fe:	bls.n	b710 <__udivmoddi4+0x134>
    b700:	adds	r6, r6, r7
    b702:	add.w	r2, r0, #4294967295
    b706:	bcs.n	b70e <__udivmoddi4+0x132>
    b708:	cmp	r3, r6
    b70a:	bhi.w	b8aa <__udivmoddi4+0x2ce>
    b70e:	mov	r0, r2
    b710:	subs	r6, r6, r3
    b712:	uxth	r2, r4
    b714:	udiv	r3, r6, r8
    b718:	mls	r6, r8, r3, r6
    b71c:	orr.w	r4, r2, r6, lsl #16
    b720:	mul.w	ip, ip, r3
    b724:	cmp	ip, r4
    b726:	bls.n	b738 <__udivmoddi4+0x15c>
    b728:	adds	r4, r4, r7
    b72a:	add.w	r2, r3, #4294967295
    b72e:	bcs.n	b736 <__udivmoddi4+0x15a>
    b730:	cmp	ip, r4
    b732:	bhi.w	b8a0 <__udivmoddi4+0x2c4>
    b736:	mov	r3, r2
    b738:	rsb	r4, ip, r4
    b73c:	orr.w	r0, r3, r0, lsl #16
    b740:	b.n	b67c <__udivmoddi4+0xa0>
    b742:	mov	r1, r5
    b744:	mov	r0, r5
    b746:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b74a:	rsb	r1, lr, #32
    b74e:	lsl.w	r3, r6, lr
    b752:	lsl.w	r7, r7, lr
    b756:	lsr.w	r9, r0, r1
    b75a:	mov.w	r8, r7, lsr #16
    b75e:	lsrs	r6, r1
    b760:	orr.w	r9, r9, r3
    b764:	udiv	sl, r6, r8
    b768:	mov.w	r4, r9, lsr #16
    b76c:	mls	r6, r8, sl, r6
    b770:	uxth.w	ip, r7
    b774:	orr.w	r3, r4, r6, lsl #16
    b778:	mul.w	r2, sl, ip
    b77c:	cmp	r2, r3
    b77e:	lsl.w	r4, r0, lr
    b782:	bls.n	b79a <__udivmoddi4+0x1be>
    b784:	adds	r3, r3, r7
    b786:	add.w	r1, sl, #4294967295
    b78a:	bcs.w	b89c <__udivmoddi4+0x2c0>
    b78e:	cmp	r2, r3
    b790:	bls.w	b89c <__udivmoddi4+0x2c0>
    b794:	sub.w	sl, sl, #2
    b798:	add	r3, r7
    b79a:	subs	r3, r3, r2
    b79c:	uxth.w	r9, r9
    b7a0:	udiv	r1, r3, r8
    b7a4:	mls	r3, r8, r1, r3
    b7a8:	orr.w	r3, r9, r3, lsl #16
    b7ac:	mul.w	r6, r1, ip
    b7b0:	cmp	r6, r3
    b7b2:	bls.n	b7c4 <__udivmoddi4+0x1e8>
    b7b4:	adds	r3, r3, r7
    b7b6:	add.w	r2, r1, #4294967295
    b7ba:	bcs.n	b894 <__udivmoddi4+0x2b8>
    b7bc:	cmp	r6, r3
    b7be:	bls.n	b894 <__udivmoddi4+0x2b8>
    b7c0:	subs	r1, #2
    b7c2:	add	r3, r7
    b7c4:	subs	r3, r3, r6
    b7c6:	orr.w	r1, r1, sl, lsl #16
    b7ca:	b.n	b6ea <__udivmoddi4+0x10e>
    b7cc:	rsb	lr, r1, #32
    b7d0:	lsr.w	r4, r2, lr
    b7d4:	lsls	r3, r1
    b7d6:	orrs	r3, r4
    b7d8:	lsr.w	r7, r0, lr
    b7dc:	lsl.w	r4, r6, r1
    b7e0:	mov.w	ip, r3, lsr #16
    b7e4:	lsr.w	r6, r6, lr
    b7e8:	orrs	r4, r7
    b7ea:	udiv	r9, r6, ip
    b7ee:	lsrs	r7, r4, #16
    b7f0:	mls	r6, ip, r9, r6
    b7f4:	uxth.w	r8, r3
    b7f8:	orr.w	r6, r7, r6, lsl #16
    b7fc:	mul.w	r7, r9, r8
    b800:	cmp	r7, r6
    b802:	lsl.w	r2, r2, r1
    b806:	lsl.w	sl, r0, r1
    b80a:	bls.n	b81e <__udivmoddi4+0x242>
    b80c:	adds	r6, r6, r3
    b80e:	add.w	r0, r9, #4294967295
    b812:	bcs.n	b898 <__udivmoddi4+0x2bc>
    b814:	cmp	r7, r6
    b816:	bls.n	b898 <__udivmoddi4+0x2bc>
    b818:	sub.w	r9, r9, #2
    b81c:	add	r6, r3
    b81e:	subs	r6, r6, r7
    b820:	uxth	r0, r4
    b822:	udiv	r4, r6, ip
    b826:	mls	r6, ip, r4, r6
    b82a:	orr.w	r7, r0, r6, lsl #16
    b82e:	mul.w	r8, r4, r8
    b832:	cmp	r8, r7
    b834:	bls.n	b846 <__udivmoddi4+0x26a>
    b836:	adds	r7, r7, r3
    b838:	add.w	r0, r4, #4294967295
    b83c:	bcs.n	b890 <__udivmoddi4+0x2b4>
    b83e:	cmp	r8, r7
    b840:	bls.n	b890 <__udivmoddi4+0x2b4>
    b842:	subs	r4, #2
    b844:	add	r7, r3
    b846:	orr.w	r0, r4, r9, lsl #16
    b84a:	rsb	r7, r8, r7
    b84e:	umull	r8, r9, r0, r2
    b852:	cmp	r7, r9
    b854:	mov	r4, r8
    b856:	mov	r6, r9
    b858:	bcc.n	b884 <__udivmoddi4+0x2a8>
    b85a:	beq.n	b8b0 <__udivmoddi4+0x2d4>
    b85c:	cbz	r5, b8b8 <__udivmoddi4+0x2dc>
    b85e:	subs.w	r3, sl, r4
    b862:	sbc.w	r7, r7, r6
    b866:	lsl.w	lr, r7, lr
    b86a:	lsrs	r3, r1
    b86c:	lsrs	r7, r1
    b86e:	orr.w	r3, lr, r3
    b872:	stmia.w	r5, {r3, r7}
    b876:	movs	r1, #0
    b878:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b87c:	mov	r3, r2
    b87e:	b.n	b672 <__udivmoddi4+0x96>
    b880:	mov	r0, r2
    b882:	b.n	b646 <__udivmoddi4+0x6a>
    b884:	subs.w	r4, r8, r2
    b888:	sbc.w	r6, r9, r3
    b88c:	subs	r0, #1
    b88e:	b.n	b85c <__udivmoddi4+0x280>
    b890:	mov	r4, r0
    b892:	b.n	b846 <__udivmoddi4+0x26a>
    b894:	mov	r1, r2
    b896:	b.n	b7c4 <__udivmoddi4+0x1e8>
    b898:	mov	r9, r0
    b89a:	b.n	b81e <__udivmoddi4+0x242>
    b89c:	mov	sl, r1
    b89e:	b.n	b79a <__udivmoddi4+0x1be>
    b8a0:	subs	r3, #2
    b8a2:	add	r4, r7
    b8a4:	b.n	b738 <__udivmoddi4+0x15c>
    b8a6:	mov	r0, r1
    b8a8:	b.n	b6c0 <__udivmoddi4+0xe4>
    b8aa:	subs	r0, #2
    b8ac:	add	r6, r7
    b8ae:	b.n	b710 <__udivmoddi4+0x134>
    b8b0:	cmp	sl, r8
    b8b2:	bcc.n	b884 <__udivmoddi4+0x2a8>
    b8b4:	mov	r6, r7
    b8b6:	b.n	b85c <__udivmoddi4+0x280>
    b8b8:	mov	r1, r5
    b8ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b8be:	nop

0000b8c0 <__aeabi_idiv0>:
    b8c0:	bx	lr
    b8c2:	nop

0000b8c4 <__cxa_atexit>:
    b8c4:	mov	r3, r2
    b8c6:	mov	r2, r1
    b8c8:	mov	r1, r0
    b8ca:	movs	r0, #2
    b8cc:	b.w	10028 <__register_exitproc>

0000b8d0 <__errno>:
    b8d0:	ldr	r3, [pc, #4]	; (b8d8 <__errno+0x8>)
    b8d2:	ldr	r0, [r3, #0]
    b8d4:	bx	lr
    b8d6:	nop
    b8d8:	.word	0x20017400

0000b8dc <__libc_init_array>:
    b8dc:	push	{r4, r5, r6, lr}
    b8de:	ldr	r6, [pc, #60]	; (b91c <__libc_init_array+0x40>)
    b8e0:	ldr	r5, [pc, #60]	; (b920 <__libc_init_array+0x44>)
    b8e2:	subs	r6, r6, r5
    b8e4:	asrs	r6, r6, #2
    b8e6:	it	ne
    b8e8:	movne	r4, #0
    b8ea:	beq.n	b8f8 <__libc_init_array+0x1c>
    b8ec:	adds	r4, #1
    b8ee:	ldr.w	r3, [r5], #4
    b8f2:	blx	r3
    b8f4:	cmp	r6, r4
    b8f6:	bne.n	b8ec <__libc_init_array+0x10>
    b8f8:	ldr	r6, [pc, #40]	; (b924 <__libc_init_array+0x48>)
    b8fa:	ldr	r5, [pc, #44]	; (b928 <__libc_init_array+0x4c>)
    b8fc:	subs	r6, r6, r5
    b8fe:	bl	13b94 <_init>
    b902:	asrs	r6, r6, #2
    b904:	it	ne
    b906:	movne	r4, #0
    b908:	beq.n	b918 <__libc_init_array+0x3c>
    b90a:	adds	r4, #1
    b90c:	ldr.w	r3, [r5], #4
    b910:	blx	r3
    b912:	cmp	r6, r4
    b914:	bne.n	b90a <__libc_init_array+0x2e>
    b916:	pop	{r4, r5, r6, pc}
    b918:	pop	{r4, r5, r6, pc}
    b91a:	nop
    b91c:	.word	0x00013ba0
    b920:	.word	0x00013ba0
    b924:	.word	0x00013bf8
    b928:	.word	0x00013ba0

0000b92c <__get_current_locale>:
    b92c:	ldr	r2, [pc, #12]	; (b93c <__get_current_locale+0x10>)
    b92e:	ldr	r3, [pc, #16]	; (b940 <__get_current_locale+0x14>)
    b930:	ldr	r2, [r2, #0]
    b932:	ldr	r0, [r2, #52]	; 0x34
    b934:	cmp	r0, #0
    b936:	it	eq
    b938:	moveq	r0, r3
    b93a:	bx	lr
    b93c:	.word	0x20017400
    b940:	.word	0x20017404

0000b944 <__locale_mb_cur_max>:
    b944:	ldr	r3, [pc, #16]	; (b958 <__locale_mb_cur_max+0x14>)
    b946:	ldr	r2, [pc, #20]	; (b95c <__locale_mb_cur_max+0x18>)
    b948:	ldr	r3, [r3, #0]
    b94a:	ldr	r3, [r3, #52]	; 0x34
    b94c:	cmp	r3, #0
    b94e:	it	eq
    b950:	moveq	r3, r2
    b952:	ldrb.w	r0, [r3, #296]	; 0x128
    b956:	bx	lr
    b958:	.word	0x20017400
    b95c:	.word	0x20017404

0000b960 <__locale_ctype_ptr_l>:
    b960:	ldr.w	r0, [r0, #236]	; 0xec
    b964:	bx	lr
    b966:	nop

0000b968 <__locale_ctype_ptr>:
    b968:	push	{r3, lr}
    b96a:	ldr	r3, [pc, #12]	; (b978 <__locale_ctype_ptr+0x10>)
    b96c:	ldr	r0, [r3, #0]
    b96e:	bl	b92c <__get_current_locale>
    b972:	ldr.w	r0, [r0, #236]	; 0xec
    b976:	pop	{r3, pc}
    b978:	.word	0x20017400

0000b97c <malloc>:
    b97c:	ldr	r3, [pc, #8]	; (b988 <malloc+0xc>)
    b97e:	mov	r1, r0
    b980:	ldr	r0, [r3, #0]
    b982:	b.w	b99c <_malloc_r>
    b986:	nop
    b988:	.word	0x20017400

0000b98c <free>:
    b98c:	ldr	r3, [pc, #8]	; (b998 <free+0xc>)
    b98e:	mov	r1, r0
    b990:	ldr	r0, [r3, #0]
    b992:	b.w	11110 <_free_r>
    b996:	nop
    b998:	.word	0x20017400

0000b99c <_malloc_r>:
    b99c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b9a0:	add.w	r5, r1, #11
    b9a4:	cmp	r5, #22
    b9a6:	sub	sp, #12
    b9a8:	mov	r6, r0
    b9aa:	bls.w	baec <_malloc_r+0x150>
    b9ae:	bics.w	r5, r5, #7
    b9b2:	bmi.w	bb34 <_malloc_r+0x198>
    b9b6:	cmp	r1, r5
    b9b8:	bhi.w	bb34 <_malloc_r+0x198>
    b9bc:	bl	c1a8 <__malloc_lock>
    b9c0:	cmp.w	r5, #504	; 0x1f8
    b9c4:	bcc.w	bf00 <_malloc_r+0x564>
    b9c8:	lsrs	r3, r5, #9
    b9ca:	beq.w	bb42 <_malloc_r+0x1a6>
    b9ce:	cmp	r3, #4
    b9d0:	bhi.w	bcda <_malloc_r+0x33e>
    b9d4:	lsrs	r0, r5, #6
    b9d6:	add.w	lr, r0, #57	; 0x39
    b9da:	mov.w	r3, lr, lsl #1
    b9de:	adds	r0, #56	; 0x38
    b9e0:	ldr	r7, [pc, #784]	; (bcf4 <_malloc_r+0x358>)
    b9e2:	add.w	r3, r7, r3, lsl #2
    b9e6:	sub.w	r1, r3, #8
    b9ea:	ldr	r4, [r3, #4]
    b9ec:	cmp	r1, r4
    b9ee:	bne.n	ba00 <_malloc_r+0x64>
    b9f0:	b.n	bb4c <_malloc_r+0x1b0>
    b9f2:	cmp	r2, #0
    b9f4:	bge.w	bb50 <_malloc_r+0x1b4>
    b9f8:	ldr	r4, [r4, #12]
    b9fa:	cmp	r1, r4
    b9fc:	beq.w	bb4c <_malloc_r+0x1b0>
    ba00:	ldr	r3, [r4, #4]
    ba02:	bic.w	r3, r3, #3
    ba06:	subs	r2, r3, r5
    ba08:	cmp	r2, #15
    ba0a:	ble.n	b9f2 <_malloc_r+0x56>
    ba0c:	ldr	r1, [pc, #740]	; (bcf4 <_malloc_r+0x358>)
    ba0e:	ldr	r4, [r7, #16]
    ba10:	add.w	lr, r1, #8
    ba14:	cmp	r4, lr
    ba16:	beq.w	bd80 <_malloc_r+0x3e4>
    ba1a:	ldr	r3, [r4, #4]
    ba1c:	bic.w	r3, r3, #3
    ba20:	subs	r2, r3, r5
    ba22:	cmp	r2, #15
    ba24:	bgt.w	bd5a <_malloc_r+0x3be>
    ba28:	cmp	r2, #0
    ba2a:	str.w	lr, [r1, #20]
    ba2e:	str.w	lr, [r1, #16]
    ba32:	bge.w	bb72 <_malloc_r+0x1d6>
    ba36:	cmp.w	r3, #512	; 0x200
    ba3a:	bcs.w	bd0c <_malloc_r+0x370>
    ba3e:	lsrs	r3, r3, #3
    ba40:	add.w	ip, r3, #1
    ba44:	movs	r2, #1
    ba46:	asrs	r3, r3, #2
    ba48:	lsl.w	r3, r2, r3
    ba4c:	ldr	r2, [r1, #4]
    ba4e:	ldr.w	r8, [r1, ip, lsl #3]
    ba52:	str.w	r8, [r4, #8]
    ba56:	add.w	r9, r1, ip, lsl #3
    ba5a:	orrs	r2, r3
    ba5c:	sub.w	r3, r9, #8
    ba60:	str	r3, [r4, #12]
    ba62:	str	r2, [r1, #4]
    ba64:	str.w	r4, [r1, ip, lsl #3]
    ba68:	str.w	r4, [r8, #12]
    ba6c:	asrs	r3, r0, #2
    ba6e:	movs	r4, #1
    ba70:	lsls	r4, r3
    ba72:	cmp	r4, r2
    ba74:	bhi.w	bb8c <_malloc_r+0x1f0>
    ba78:	tst	r4, r2
    ba7a:	bne.n	ba8a <_malloc_r+0xee>
    ba7c:	bic.w	r0, r0, #3
    ba80:	lsls	r4, r4, #1
    ba82:	tst	r4, r2
    ba84:	add.w	r0, r0, #4
    ba88:	beq.n	ba80 <_malloc_r+0xe4>
    ba8a:	add.w	r9, r7, r0, lsl #3
    ba8e:	mov	ip, r9
    ba90:	mov	r8, r0
    ba92:	ldr.w	r1, [ip, #12]
    ba96:	cmp	ip, r1
    ba98:	bne.n	baaa <_malloc_r+0x10e>
    ba9a:	b.n	bd84 <_malloc_r+0x3e8>
    ba9c:	cmp	r2, #0
    ba9e:	bge.w	bda4 <_malloc_r+0x408>
    baa2:	ldr	r1, [r1, #12]
    baa4:	cmp	ip, r1
    baa6:	beq.w	bd84 <_malloc_r+0x3e8>
    baaa:	ldr	r3, [r1, #4]
    baac:	bic.w	r3, r3, #3
    bab0:	subs	r2, r3, r5
    bab2:	cmp	r2, #15
    bab4:	ble.n	ba9c <_malloc_r+0x100>
    bab6:	mov	r4, r1
    bab8:	ldr.w	ip, [r1, #12]
    babc:	ldr.w	r8, [r4, #8]!
    bac0:	adds	r3, r1, r5
    bac2:	orr.w	r5, r5, #1
    bac6:	str	r5, [r1, #4]
    bac8:	orr.w	r1, r2, #1
    bacc:	str.w	ip, [r8, #12]
    bad0:	mov	r0, r6
    bad2:	str.w	r8, [ip, #8]
    bad6:	str	r3, [r7, #20]
    bad8:	str	r3, [r7, #16]
    bada:	str.w	lr, [r3, #12]
    bade:	str.w	lr, [r3, #8]
    bae2:	str	r1, [r3, #4]
    bae4:	str	r2, [r3, r2]
    bae6:	bl	c1ac <__malloc_unlock>
    baea:	b.n	bb2c <_malloc_r+0x190>
    baec:	cmp	r1, #16
    baee:	bhi.n	bb34 <_malloc_r+0x198>
    baf0:	bl	c1a8 <__malloc_lock>
    baf4:	movs	r5, #16
    baf6:	movs	r3, #6
    baf8:	movs	r0, #2
    bafa:	ldr	r7, [pc, #504]	; (bcf4 <_malloc_r+0x358>)
    bafc:	add.w	r3, r7, r3, lsl #2
    bb00:	sub.w	r2, r3, #8
    bb04:	ldr	r4, [r3, #4]
    bb06:	cmp	r4, r2
    bb08:	beq.w	bd96 <_malloc_r+0x3fa>
    bb0c:	ldr	r3, [r4, #4]
    bb0e:	ldr	r1, [r4, #12]
    bb10:	ldr	r5, [r4, #8]
    bb12:	bic.w	r3, r3, #3
    bb16:	add	r3, r4
    bb18:	mov	r0, r6
    bb1a:	ldr	r2, [r3, #4]
    bb1c:	str	r1, [r5, #12]
    bb1e:	orr.w	r2, r2, #1
    bb22:	str	r5, [r1, #8]
    bb24:	str	r2, [r3, #4]
    bb26:	bl	c1ac <__malloc_unlock>
    bb2a:	adds	r4, #8
    bb2c:	mov	r0, r4
    bb2e:	add	sp, #12
    bb30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb34:	movs	r4, #0
    bb36:	movs	r3, #12
    bb38:	mov	r0, r4
    bb3a:	str	r3, [r6, #0]
    bb3c:	add	sp, #12
    bb3e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb42:	movs	r3, #128	; 0x80
    bb44:	mov.w	lr, #64	; 0x40
    bb48:	movs	r0, #63	; 0x3f
    bb4a:	b.n	b9e0 <_malloc_r+0x44>
    bb4c:	mov	r0, lr
    bb4e:	b.n	ba0c <_malloc_r+0x70>
    bb50:	add	r3, r4
    bb52:	ldr	r1, [r4, #12]
    bb54:	ldr	r2, [r3, #4]
    bb56:	ldr	r5, [r4, #8]
    bb58:	orr.w	r2, r2, #1
    bb5c:	str	r1, [r5, #12]
    bb5e:	mov	r0, r6
    bb60:	str	r5, [r1, #8]
    bb62:	str	r2, [r3, #4]
    bb64:	bl	c1ac <__malloc_unlock>
    bb68:	adds	r4, #8
    bb6a:	mov	r0, r4
    bb6c:	add	sp, #12
    bb6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb72:	add	r3, r4
    bb74:	mov	r0, r6
    bb76:	ldr	r2, [r3, #4]
    bb78:	orr.w	r2, r2, #1
    bb7c:	str	r2, [r3, #4]
    bb7e:	bl	c1ac <__malloc_unlock>
    bb82:	adds	r4, #8
    bb84:	mov	r0, r4
    bb86:	add	sp, #12
    bb88:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb8c:	ldr	r4, [r7, #8]
    bb8e:	ldr	r3, [r4, #4]
    bb90:	bic.w	r8, r3, #3
    bb94:	cmp	r8, r5
    bb96:	bcc.n	bba2 <_malloc_r+0x206>
    bb98:	rsb	r3, r5, r8
    bb9c:	cmp	r3, #15
    bb9e:	bgt.w	bcba <_malloc_r+0x31e>
    bba2:	ldr	r3, [pc, #340]	; (bcf8 <_malloc_r+0x35c>)
    bba4:	ldr.w	r9, [pc, #352]	; bd08 <_malloc_r+0x36c>
    bba8:	ldr	r2, [r3, #0]
    bbaa:	ldr.w	r3, [r9]
    bbae:	adds	r3, #1
    bbb0:	add	r2, r5
    bbb2:	add.w	sl, r4, r8
    bbb6:	beq.w	be7a <_malloc_r+0x4de>
    bbba:	add.w	r2, r2, #4096	; 0x1000
    bbbe:	adds	r2, #15
    bbc0:	bic.w	r2, r2, #4080	; 0xff0
    bbc4:	bic.w	r2, r2, #15
    bbc8:	mov	r1, r2
    bbca:	mov	r0, r6
    bbcc:	str	r2, [sp, #4]
    bbce:	bl	c590 <_sbrk_r>
    bbd2:	cmp.w	r0, #4294967295
    bbd6:	mov	fp, r0
    bbd8:	ldr	r2, [sp, #4]
    bbda:	beq.w	be8e <_malloc_r+0x4f2>
    bbde:	cmp	sl, r0
    bbe0:	bhi.w	bddc <_malloc_r+0x440>
    bbe4:	ldr	r3, [pc, #276]	; (bcfc <_malloc_r+0x360>)
    bbe6:	ldr	r1, [r3, #0]
    bbe8:	cmp	sl, fp
    bbea:	add	r1, r2
    bbec:	str	r1, [r3, #0]
    bbee:	beq.w	be98 <_malloc_r+0x4fc>
    bbf2:	ldr.w	r0, [r9]
    bbf6:	ldr.w	lr, [pc, #272]	; bd08 <_malloc_r+0x36c>
    bbfa:	adds	r0, #1
    bbfc:	ittet	ne
    bbfe:	rsbne	sl, sl, fp
    bc02:	addne	r1, sl
    bc04:	streq.w	fp, [lr]
    bc08:	strne	r1, [r3, #0]
    bc0a:	ands.w	r1, fp, #7
    bc0e:	beq.w	be40 <_malloc_r+0x4a4>
    bc12:	rsb	r0, r1, #8
    bc16:	rsb	r1, r1, #4096	; 0x1000
    bc1a:	add	fp, r0
    bc1c:	adds	r1, #8
    bc1e:	add	r2, fp
    bc20:	ubfx	r2, r2, #0, #12
    bc24:	rsb	r9, r2, r1
    bc28:	mov	r1, r9
    bc2a:	mov	r0, r6
    bc2c:	str	r3, [sp, #4]
    bc2e:	bl	c590 <_sbrk_r>
    bc32:	adds	r3, r0, #1
    bc34:	ldr	r3, [sp, #4]
    bc36:	beq.w	beb8 <_malloc_r+0x51c>
    bc3a:	rsb	r2, fp, r0
    bc3e:	add	r2, r9
    bc40:	orr.w	r2, r2, #1
    bc44:	ldr	r1, [r3, #0]
    bc46:	str.w	fp, [r7, #8]
    bc4a:	add	r1, r9
    bc4c:	cmp	r4, r7
    bc4e:	str.w	r2, [fp, #4]
    bc52:	str	r1, [r3, #0]
    bc54:	ldr.w	r9, [pc, #164]	; bcfc <_malloc_r+0x360>
    bc58:	beq.n	bc88 <_malloc_r+0x2ec>
    bc5a:	cmp.w	r8, #15
    bc5e:	bls.w	be5c <_malloc_r+0x4c0>
    bc62:	ldr	r2, [r4, #4]
    bc64:	sub.w	r3, r8, #12
    bc68:	bic.w	r3, r3, #7
    bc6c:	adds	r0, r4, r3
    bc6e:	and.w	r2, r2, #1
    bc72:	mov.w	lr, #5
    bc76:	orrs	r2, r3
    bc78:	cmp	r3, #15
    bc7a:	str	r2, [r4, #4]
    bc7c:	str.w	lr, [r0, #4]
    bc80:	str.w	lr, [r0, #8]
    bc84:	bhi.w	bec0 <_malloc_r+0x524>
    bc88:	ldr	r3, [pc, #116]	; (bd00 <_malloc_r+0x364>)
    bc8a:	ldr	r4, [r7, #8]
    bc8c:	ldr	r2, [r3, #0]
    bc8e:	cmp	r1, r2
    bc90:	it	hi
    bc92:	strhi	r1, [r3, #0]
    bc94:	ldr	r3, [pc, #108]	; (bd04 <_malloc_r+0x368>)
    bc96:	ldr	r2, [r3, #0]
    bc98:	cmp	r1, r2
    bc9a:	ldr	r2, [r4, #4]
    bc9c:	it	hi
    bc9e:	strhi	r1, [r3, #0]
    bca0:	bic.w	r2, r2, #3
    bca4:	cmp	r5, r2
    bca6:	sub.w	r3, r2, r5
    bcaa:	bhi.n	bcb0 <_malloc_r+0x314>
    bcac:	cmp	r3, #15
    bcae:	bgt.n	bcba <_malloc_r+0x31e>
    bcb0:	mov	r0, r6
    bcb2:	bl	c1ac <__malloc_unlock>
    bcb6:	movs	r4, #0
    bcb8:	b.n	bb2c <_malloc_r+0x190>
    bcba:	adds	r2, r4, r5
    bcbc:	orr.w	r3, r3, #1
    bcc0:	orr.w	r5, r5, #1
    bcc4:	str	r5, [r4, #4]
    bcc6:	mov	r0, r6
    bcc8:	str	r2, [r7, #8]
    bcca:	str	r3, [r2, #4]
    bccc:	bl	c1ac <__malloc_unlock>
    bcd0:	adds	r4, #8
    bcd2:	mov	r0, r4
    bcd4:	add	sp, #12
    bcd6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bcda:	cmp	r3, #20
    bcdc:	bls.n	bdc2 <_malloc_r+0x426>
    bcde:	cmp	r3, #84	; 0x54
    bce0:	bhi.w	be2c <_malloc_r+0x490>
    bce4:	lsrs	r0, r5, #12
    bce6:	add.w	lr, r0, #111	; 0x6f
    bcea:	mov.w	r3, lr, lsl #1
    bcee:	adds	r0, #110	; 0x6e
    bcf0:	b.n	b9e0 <_malloc_r+0x44>
    bcf2:	nop
    bcf4:	.word	0x20017570
    bcf8:	.word	0x2001cdfc
    bcfc:	.word	0x2001ce00
    bd00:	.word	0x2001cdf8
    bd04:	.word	0x2001cdf4
    bd08:	.word	0x2001797c
    bd0c:	lsrs	r2, r3, #9
    bd0e:	cmp	r2, #4
    bd10:	bls.n	bdd0 <_malloc_r+0x434>
    bd12:	cmp	r2, #20
    bd14:	bhi.w	be7e <_malloc_r+0x4e2>
    bd18:	add.w	r1, r2, #92	; 0x5c
    bd1c:	lsls	r1, r1, #1
    bd1e:	adds	r2, #91	; 0x5b
    bd20:	add.w	ip, r7, r1, lsl #2
    bd24:	ldr.w	r1, [r7, r1, lsl #2]
    bd28:	ldr.w	r8, [pc, #476]	; bf08 <_malloc_r+0x56c>
    bd2c:	sub.w	ip, ip, #8
    bd30:	cmp	ip, r1
    bd32:	beq.w	be46 <_malloc_r+0x4aa>
    bd36:	ldr	r2, [r1, #4]
    bd38:	bic.w	r2, r2, #3
    bd3c:	cmp	r3, r2
    bd3e:	bcs.n	bd46 <_malloc_r+0x3aa>
    bd40:	ldr	r1, [r1, #8]
    bd42:	cmp	ip, r1
    bd44:	bne.n	bd36 <_malloc_r+0x39a>
    bd46:	ldr.w	ip, [r1, #12]
    bd4a:	ldr	r2, [r7, #4]
    bd4c:	str.w	ip, [r4, #12]
    bd50:	str	r1, [r4, #8]
    bd52:	str.w	r4, [ip, #8]
    bd56:	str	r4, [r1, #12]
    bd58:	b.n	ba6c <_malloc_r+0xd0>
    bd5a:	adds	r3, r4, r5
    bd5c:	orr.w	r7, r2, #1
    bd60:	orr.w	r5, r5, #1
    bd64:	str	r5, [r4, #4]
    bd66:	mov	r0, r6
    bd68:	str	r3, [r1, #20]
    bd6a:	str	r3, [r1, #16]
    bd6c:	str.w	lr, [r3, #12]
    bd70:	str.w	lr, [r3, #8]
    bd74:	str	r7, [r3, #4]
    bd76:	str	r2, [r3, r2]
    bd78:	adds	r4, #8
    bd7a:	bl	c1ac <__malloc_unlock>
    bd7e:	b.n	bb2c <_malloc_r+0x190>
    bd80:	ldr	r2, [r1, #4]
    bd82:	b.n	ba6c <_malloc_r+0xd0>
    bd84:	add.w	r8, r8, #1
    bd88:	tst.w	r8, #3
    bd8c:	add.w	ip, ip, #8
    bd90:	bne.w	ba92 <_malloc_r+0xf6>
    bd94:	b.n	bdf8 <_malloc_r+0x45c>
    bd96:	ldr	r4, [r3, #12]
    bd98:	cmp	r3, r4
    bd9a:	it	eq
    bd9c:	addeq	r0, #2
    bd9e:	beq.w	ba0c <_malloc_r+0x70>
    bda2:	b.n	bb0c <_malloc_r+0x170>
    bda4:	add	r3, r1
    bda6:	mov	r4, r1
    bda8:	ldr	r2, [r3, #4]
    bdaa:	ldr	r1, [r1, #12]
    bdac:	ldr.w	r5, [r4, #8]!
    bdb0:	orr.w	r2, r2, #1
    bdb4:	str	r2, [r3, #4]
    bdb6:	mov	r0, r6
    bdb8:	str	r1, [r5, #12]
    bdba:	str	r5, [r1, #8]
    bdbc:	bl	c1ac <__malloc_unlock>
    bdc0:	b.n	bb2c <_malloc_r+0x190>
    bdc2:	add.w	lr, r3, #92	; 0x5c
    bdc6:	add.w	r0, r3, #91	; 0x5b
    bdca:	mov.w	r3, lr, lsl #1
    bdce:	b.n	b9e0 <_malloc_r+0x44>
    bdd0:	lsrs	r2, r3, #6
    bdd2:	add.w	r1, r2, #57	; 0x39
    bdd6:	lsls	r1, r1, #1
    bdd8:	adds	r2, #56	; 0x38
    bdda:	b.n	bd20 <_malloc_r+0x384>
    bddc:	cmp	r4, r7
    bdde:	ldr	r3, [pc, #296]	; (bf08 <_malloc_r+0x56c>)
    bde0:	beq.w	bbe4 <_malloc_r+0x248>
    bde4:	ldr	r4, [r3, #8]
    bde6:	ldr	r2, [r4, #4]
    bde8:	bic.w	r2, r2, #3
    bdec:	b.n	bca4 <_malloc_r+0x308>
    bdee:	ldr.w	r3, [r9], #-8
    bdf2:	cmp	r9, r3
    bdf4:	bne.w	befc <_malloc_r+0x560>
    bdf8:	tst.w	r0, #3
    bdfc:	add.w	r0, r0, #4294967295
    be00:	bne.n	bdee <_malloc_r+0x452>
    be02:	ldr	r3, [r7, #4]
    be04:	bic.w	r3, r3, r4
    be08:	str	r3, [r7, #4]
    be0a:	lsls	r4, r4, #1
    be0c:	cmp	r4, r3
    be0e:	bhi.w	bb8c <_malloc_r+0x1f0>
    be12:	cmp	r4, #0
    be14:	beq.w	bb8c <_malloc_r+0x1f0>
    be18:	tst	r4, r3
    be1a:	mov	r0, r8
    be1c:	bne.w	ba8a <_malloc_r+0xee>
    be20:	lsls	r4, r4, #1
    be22:	tst	r4, r3
    be24:	add.w	r0, r0, #4
    be28:	beq.n	be20 <_malloc_r+0x484>
    be2a:	b.n	ba8a <_malloc_r+0xee>
    be2c:	cmp.w	r3, #340	; 0x154
    be30:	bhi.n	be64 <_malloc_r+0x4c8>
    be32:	lsrs	r0, r5, #15
    be34:	add.w	lr, r0, #120	; 0x78
    be38:	mov.w	r3, lr, lsl #1
    be3c:	adds	r0, #119	; 0x77
    be3e:	b.n	b9e0 <_malloc_r+0x44>
    be40:	mov.w	r1, #4096	; 0x1000
    be44:	b.n	bc1e <_malloc_r+0x282>
    be46:	movs	r1, #1
    be48:	ldr.w	r3, [r8, #4]
    be4c:	asrs	r2, r2, #2
    be4e:	lsl.w	r2, r1, r2
    be52:	orrs	r2, r3
    be54:	str.w	r2, [r8, #4]
    be58:	mov	r1, ip
    be5a:	b.n	bd4c <_malloc_r+0x3b0>
    be5c:	movs	r3, #1
    be5e:	str.w	r3, [fp, #4]
    be62:	b.n	bcb0 <_malloc_r+0x314>
    be64:	movw	r2, #1364	; 0x554
    be68:	cmp	r3, r2
    be6a:	bhi.n	beae <_malloc_r+0x512>
    be6c:	lsrs	r0, r5, #18
    be6e:	add.w	lr, r0, #125	; 0x7d
    be72:	mov.w	r3, lr, lsl #1
    be76:	adds	r0, #124	; 0x7c
    be78:	b.n	b9e0 <_malloc_r+0x44>
    be7a:	adds	r2, #16
    be7c:	b.n	bbc8 <_malloc_r+0x22c>
    be7e:	cmp	r2, #84	; 0x54
    be80:	bhi.n	bed0 <_malloc_r+0x534>
    be82:	lsrs	r2, r3, #12
    be84:	add.w	r1, r2, #111	; 0x6f
    be88:	lsls	r1, r1, #1
    be8a:	adds	r2, #110	; 0x6e
    be8c:	b.n	bd20 <_malloc_r+0x384>
    be8e:	ldr	r4, [r7, #8]
    be90:	ldr	r2, [r4, #4]
    be92:	bic.w	r2, r2, #3
    be96:	b.n	bca4 <_malloc_r+0x308>
    be98:	ubfx	r0, sl, #0, #12
    be9c:	cmp	r0, #0
    be9e:	bne.w	bbf2 <_malloc_r+0x256>
    bea2:	add	r2, r8
    bea4:	ldr	r3, [r7, #8]
    bea6:	orr.w	r2, r2, #1
    beaa:	str	r2, [r3, #4]
    beac:	b.n	bc88 <_malloc_r+0x2ec>
    beae:	movs	r3, #254	; 0xfe
    beb0:	mov.w	lr, #127	; 0x7f
    beb4:	movs	r0, #126	; 0x7e
    beb6:	b.n	b9e0 <_malloc_r+0x44>
    beb8:	movs	r2, #1
    beba:	mov.w	r9, #0
    bebe:	b.n	bc44 <_malloc_r+0x2a8>
    bec0:	add.w	r1, r4, #8
    bec4:	mov	r0, r6
    bec6:	bl	11110 <_free_r>
    beca:	ldr.w	r1, [r9]
    bece:	b.n	bc88 <_malloc_r+0x2ec>
    bed0:	cmp.w	r2, #340	; 0x154
    bed4:	bhi.n	bee2 <_malloc_r+0x546>
    bed6:	lsrs	r2, r3, #15
    bed8:	add.w	r1, r2, #120	; 0x78
    bedc:	lsls	r1, r1, #1
    bede:	adds	r2, #119	; 0x77
    bee0:	b.n	bd20 <_malloc_r+0x384>
    bee2:	movw	r1, #1364	; 0x554
    bee6:	cmp	r2, r1
    bee8:	bhi.n	bef6 <_malloc_r+0x55a>
    beea:	lsrs	r2, r3, #18
    beec:	add.w	r1, r2, #125	; 0x7d
    bef0:	lsls	r1, r1, #1
    bef2:	adds	r2, #124	; 0x7c
    bef4:	b.n	bd20 <_malloc_r+0x384>
    bef6:	movs	r1, #254	; 0xfe
    bef8:	movs	r2, #126	; 0x7e
    befa:	b.n	bd20 <_malloc_r+0x384>
    befc:	ldr	r3, [r7, #4]
    befe:	b.n	be0a <_malloc_r+0x46e>
    bf00:	lsrs	r0, r5, #3
    bf02:	adds	r3, r0, #1
    bf04:	lsls	r3, r3, #1
    bf06:	b.n	bafa <_malloc_r+0x15e>
    bf08:	.word	0x20017570

0000bf0c <__ascii_mbtowc>:
    bf0c:	sub	sp, #8
    bf0e:	cbz	r1, bf24 <__ascii_mbtowc+0x18>
    bf10:	cbz	r2, bf2a <__ascii_mbtowc+0x1e>
    bf12:	cbz	r3, bf30 <__ascii_mbtowc+0x24>
    bf14:	ldrb	r3, [r2, #0]
    bf16:	str	r3, [r1, #0]
    bf18:	ldrb	r2, [r2, #0]
    bf1a:	adds	r0, r2, #0
    bf1c:	it	ne
    bf1e:	movne	r0, #1
    bf20:	add	sp, #8
    bf22:	bx	lr
    bf24:	add	r1, sp, #4
    bf26:	cmp	r2, #0
    bf28:	bne.n	bf12 <__ascii_mbtowc+0x6>
    bf2a:	mov	r0, r2
    bf2c:	add	sp, #8
    bf2e:	bx	lr
    bf30:	mvn.w	r0, #1
    bf34:	b.n	bf20 <__ascii_mbtowc+0x14>
    bf36:	nop
    bf38:			; <UNDEFINED> instruction: 0xffffffff
    bf3c:			; <UNDEFINED> instruction: 0xffffffff

0000bf40 <memchr>:
    bf40:	and.w	r1, r1, #255	; 0xff
    bf44:	cmp	r2, #16
    bf46:	blt.n	bfa0 <memchr+0x60>
    bf48:	tst.w	r0, #7
    bf4c:	beq.n	bf60 <memchr+0x20>
    bf4e:	ldrb.w	r3, [r0], #1
    bf52:	subs	r2, #1
    bf54:	cmp	r3, r1
    bf56:	beq.n	bfb4 <memchr+0x74>
    bf58:	tst.w	r0, #7
    bf5c:	cbz	r2, bfb0 <memchr+0x70>
    bf5e:	bne.n	bf4e <memchr+0xe>
    bf60:	push	{r4, r5, r6, r7}
    bf62:	orr.w	r1, r1, r1, lsl #8
    bf66:	orr.w	r1, r1, r1, lsl #16
    bf6a:	bic.w	r4, r2, #7
    bf6e:	mvns.w	r7, #0
    bf72:	movs	r3, #0
    bf74:	ldrd	r5, r6, [r0], #8
    bf78:	subs	r4, #8
    bf7a:	eor.w	r5, r5, r1
    bf7e:	eor.w	r6, r6, r1
    bf82:	uadd8	r5, r5, r7
    bf86:	sel	r5, r3, r7
    bf8a:	uadd8	r6, r6, r7
    bf8e:	sel	r6, r5, r7
    bf92:	cbnz	r6, bfb8 <memchr+0x78>
    bf94:	bne.n	bf74 <memchr+0x34>
    bf96:	pop	{r4, r5, r6, r7}
    bf98:	and.w	r1, r1, #255	; 0xff
    bf9c:	and.w	r2, r2, #7
    bfa0:	cbz	r2, bfb0 <memchr+0x70>
    bfa2:	ldrb.w	r3, [r0], #1
    bfa6:	subs	r2, #1
    bfa8:	eor.w	r3, r3, r1
    bfac:	cbz	r3, bfb4 <memchr+0x74>
    bfae:	bne.n	bfa2 <memchr+0x62>
    bfb0:	movs	r0, #0
    bfb2:	bx	lr
    bfb4:	subs	r0, #1
    bfb6:	bx	lr
    bfb8:	cmp	r5, #0
    bfba:	itte	eq
    bfbc:	moveq	r5, r6
    bfbe:	subeq	r0, #3
    bfc0:	subne	r0, #7
    bfc2:	tst.w	r5, #1
    bfc6:	bne.n	bfd8 <memchr+0x98>
    bfc8:	adds	r0, #1
    bfca:	tst.w	r5, #256	; 0x100
    bfce:	ittt	eq
    bfd0:	addeq	r0, #1
    bfd2:	tsteq.w	r5, #98304	; 0x18000
    bfd6:	addeq	r0, #1
    bfd8:	pop	{r4, r5, r6, r7}
    bfda:	subs	r0, #1
    bfdc:	bx	lr
    bfde:	nop

0000bfe0 <memcmp>:
    bfe0:	cmp	r2, #3
    bfe2:	push	{r4, r5, r6}
    bfe4:	bls.n	c034 <memcmp+0x54>
    bfe6:	orr.w	r3, r0, r1
    bfea:	lsls	r3, r3, #30
    bfec:	beq.n	c012 <memcmp+0x32>
    bfee:	ldrb	r4, [r0, #0]
    bff0:	ldrb	r5, [r1, #0]
    bff2:	cmp	r4, r5
    bff4:	bne.n	c03c <memcmp+0x5c>
    bff6:	add	r2, r0
    bff8:	adds	r3, r0, #1
    bffa:	b.n	c008 <memcmp+0x28>
    bffc:	ldrb.w	r4, [r3], #1
    c000:	ldrb.w	r5, [r1, #1]!
    c004:	cmp	r4, r5
    c006:	bne.n	c03c <memcmp+0x5c>
    c008:	cmp	r3, r2
    c00a:	bne.n	bffc <memcmp+0x1c>
    c00c:	movs	r0, #0
    c00e:	pop	{r4, r5, r6}
    c010:	bx	lr
    c012:	mov	r4, r1
    c014:	mov	r3, r0
    c016:	ldr	r6, [r3, #0]
    c018:	ldr	r5, [r4, #0]
    c01a:	cmp	r6, r5
    c01c:	mov	r0, r3
    c01e:	mov	r1, r4
    c020:	add.w	r3, r3, #4
    c024:	add.w	r4, r4, #4
    c028:	bne.n	bfee <memcmp+0xe>
    c02a:	subs	r2, #4
    c02c:	cmp	r2, #3
    c02e:	mov	r0, r3
    c030:	mov	r1, r4
    c032:	bhi.n	c016 <memcmp+0x36>
    c034:	cmp	r2, #0
    c036:	bne.n	bfee <memcmp+0xe>
    c038:	mov	r0, r2
    c03a:	b.n	c00e <memcmp+0x2e>
    c03c:	subs	r0, r4, r5
    c03e:	pop	{r4, r5, r6}
    c040:	bx	lr
    c042:	nop

0000c044 <memmove>:
    c044:	cmp	r0, r1
    c046:	push	{r4, r5, r6, r7, lr}
    c048:	bls.n	c066 <memmove+0x22>
    c04a:	adds	r3, r1, r2
    c04c:	cmp	r0, r3
    c04e:	bcs.n	c066 <memmove+0x22>
    c050:	adds	r1, r0, r2
    c052:	cmp	r2, #0
    c054:	beq.n	c0fa <memmove+0xb6>
    c056:	subs	r2, r3, r2
    c058:	ldrb.w	r4, [r3, #-1]!
    c05c:	strb.w	r4, [r1, #-1]!
    c060:	cmp	r3, r2
    c062:	bne.n	c058 <memmove+0x14>
    c064:	pop	{r4, r5, r6, r7, pc}
    c066:	cmp	r2, #15
    c068:	bls.n	c0fc <memmove+0xb8>
    c06a:	orr.w	r3, r1, r0
    c06e:	lsls	r3, r3, #30
    c070:	bne.n	c100 <memmove+0xbc>
    c072:	add.w	r4, r0, #16
    c076:	add.w	r3, r1, #16
    c07a:	mov	r5, r2
    c07c:	ldr.w	r6, [r3, #-16]
    c080:	str.w	r6, [r4, #-16]
    c084:	ldr.w	r6, [r3, #-12]
    c088:	str.w	r6, [r4, #-12]
    c08c:	ldr.w	r6, [r3, #-8]
    c090:	str.w	r6, [r4, #-8]
    c094:	subs	r5, #16
    c096:	ldr.w	r6, [r3, #-4]
    c09a:	str.w	r6, [r4, #-4]
    c09e:	cmp	r5, #15
    c0a0:	add.w	r3, r3, #16
    c0a4:	add.w	r4, r4, #16
    c0a8:	bhi.n	c07c <memmove+0x38>
    c0aa:	sub.w	r3, r2, #16
    c0ae:	bic.w	r3, r3, #15
    c0b2:	and.w	lr, r2, #15
    c0b6:	adds	r3, #16
    c0b8:	cmp.w	lr, #3
    c0bc:	add	r1, r3
    c0be:	add	r3, r0
    c0c0:	bls.n	c106 <memmove+0xc2>
    c0c2:	subs	r6, r3, #4
    c0c4:	mov	r5, r1
    c0c6:	mov	r4, lr
    c0c8:	subs	r4, #4
    c0ca:	ldr.w	r7, [r5], #4
    c0ce:	str.w	r7, [r6, #4]!
    c0d2:	cmp	r4, #3
    c0d4:	bhi.n	c0c8 <memmove+0x84>
    c0d6:	sub.w	r4, lr, #4
    c0da:	bic.w	r4, r4, #3
    c0de:	adds	r4, #4
    c0e0:	add	r3, r4
    c0e2:	add	r1, r4
    c0e4:	and.w	r2, r2, #3
    c0e8:	cbz	r2, c104 <memmove+0xc0>
    c0ea:	subs	r3, #1
    c0ec:	add	r2, r1
    c0ee:	ldrb.w	r4, [r1], #1
    c0f2:	strb.w	r4, [r3, #1]!
    c0f6:	cmp	r2, r1
    c0f8:	bne.n	c0ee <memmove+0xaa>
    c0fa:	pop	{r4, r5, r6, r7, pc}
    c0fc:	mov	r3, r0
    c0fe:	b.n	c0e8 <memmove+0xa4>
    c100:	mov	r3, r0
    c102:	b.n	c0ea <memmove+0xa6>
    c104:	pop	{r4, r5, r6, r7, pc}
    c106:	mov	r2, lr
    c108:	b.n	c0e8 <memmove+0xa4>
    c10a:	nop

0000c10c <memset>:
    c10c:	push	{r4, r5, r6}
    c10e:	lsls	r4, r0, #30
    c110:	beq.n	c1a0 <memset+0x94>
    c112:	subs	r4, r2, #1
    c114:	cmp	r2, #0
    c116:	beq.n	c19c <memset+0x90>
    c118:	uxtb	r5, r1
    c11a:	mov	r3, r0
    c11c:	b.n	c124 <memset+0x18>
    c11e:	subs	r2, r4, #1
    c120:	cbz	r4, c19c <memset+0x90>
    c122:	mov	r4, r2
    c124:	strb.w	r5, [r3], #1
    c128:	lsls	r2, r3, #30
    c12a:	bne.n	c11e <memset+0x12>
    c12c:	cmp	r4, #3
    c12e:	bls.n	c18e <memset+0x82>
    c130:	uxtb	r5, r1
    c132:	orr.w	r5, r5, r5, lsl #8
    c136:	cmp	r4, #15
    c138:	orr.w	r5, r5, r5, lsl #16
    c13c:	bls.n	c172 <memset+0x66>
    c13e:	add.w	r2, r3, #16
    c142:	mov	r6, r4
    c144:	subs	r6, #16
    c146:	cmp	r6, #15
    c148:	str.w	r5, [r2, #-16]
    c14c:	str.w	r5, [r2, #-12]
    c150:	str.w	r5, [r2, #-8]
    c154:	str.w	r5, [r2, #-4]
    c158:	add.w	r2, r2, #16
    c15c:	bhi.n	c144 <memset+0x38>
    c15e:	sub.w	r2, r4, #16
    c162:	bic.w	r2, r2, #15
    c166:	and.w	r4, r4, #15
    c16a:	adds	r2, #16
    c16c:	cmp	r4, #3
    c16e:	add	r3, r2
    c170:	bls.n	c18e <memset+0x82>
    c172:	mov	r6, r3
    c174:	mov	r2, r4
    c176:	subs	r2, #4
    c178:	cmp	r2, #3
    c17a:	str.w	r5, [r6], #4
    c17e:	bhi.n	c176 <memset+0x6a>
    c180:	subs	r2, r4, #4
    c182:	bic.w	r2, r2, #3
    c186:	adds	r2, #4
    c188:	add	r3, r2
    c18a:	and.w	r4, r4, #3
    c18e:	cbz	r4, c19c <memset+0x90>
    c190:	uxtb	r1, r1
    c192:	add	r4, r3
    c194:	strb.w	r1, [r3], #1
    c198:	cmp	r3, r4
    c19a:	bne.n	c194 <memset+0x88>
    c19c:	pop	{r4, r5, r6}
    c19e:	bx	lr
    c1a0:	mov	r4, r2
    c1a2:	mov	r3, r0
    c1a4:	b.n	c12c <memset+0x20>
    c1a6:	nop

0000c1a8 <__malloc_lock>:
    c1a8:	bx	lr
    c1aa:	nop

0000c1ac <__malloc_unlock>:
    c1ac:	bx	lr
    c1ae:	nop

0000c1b0 <_realloc_r>:
    c1b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c1b4:	mov	r7, r2
    c1b6:	sub	sp, #12
    c1b8:	cmp	r1, #0
    c1ba:	beq.w	c340 <_realloc_r+0x190>
    c1be:	mov	r6, r1
    c1c0:	mov	r9, r0
    c1c2:	add.w	r5, r7, #11
    c1c6:	bl	c1a8 <__malloc_lock>
    c1ca:	ldr.w	lr, [r6, #-4]
    c1ce:	cmp	r5, #22
    c1d0:	bic.w	r4, lr, #3
    c1d4:	sub.w	r8, r6, #8
    c1d8:	bhi.n	c25c <_realloc_r+0xac>
    c1da:	movs	r2, #16
    c1dc:	mov	r5, r2
    c1de:	cmp	r7, r5
    c1e0:	bhi.n	c266 <_realloc_r+0xb6>
    c1e2:	cmp	r4, r2
    c1e4:	bge.n	c2d2 <_realloc_r+0x122>
    c1e6:	ldr	r3, [pc, #804]	; (c50c <_realloc_r+0x35c>)
    c1e8:	ldr	r1, [r3, #8]
    c1ea:	add.w	r0, r8, r4
    c1ee:	cmp	r0, r1
    c1f0:	ldr	r1, [r0, #4]
    c1f2:	beq.w	c3a8 <_realloc_r+0x1f8>
    c1f6:	bic.w	r3, r1, #1
    c1fa:	add	r3, r0
    c1fc:	ldr	r3, [r3, #4]
    c1fe:	lsls	r3, r3, #31
    c200:	bpl.n	c2fe <_realloc_r+0x14e>
    c202:	tst.w	lr, #1
    c206:	beq.n	c274 <_realloc_r+0xc4>
    c208:	mov	r1, r7
    c20a:	mov	r0, r9
    c20c:	bl	b99c <_malloc_r>
    c210:	mov	r7, r0
    c212:	cbz	r0, c24e <_realloc_r+0x9e>
    c214:	ldr.w	r3, [r6, #-4]
    c218:	bic.w	r3, r3, #1
    c21c:	add	r3, r8
    c21e:	sub.w	r2, r0, #8
    c222:	cmp	r2, r3
    c224:	beq.w	c4b0 <_realloc_r+0x300>
    c228:	subs	r2, r4, #4
    c22a:	cmp	r2, #36	; 0x24
    c22c:	bhi.w	c492 <_realloc_r+0x2e2>
    c230:	cmp	r2, #19
    c232:	bhi.w	c43e <_realloc_r+0x28e>
    c236:	mov	r3, r0
    c238:	mov	r2, r6
    c23a:	ldr	r1, [r2, #0]
    c23c:	str	r1, [r3, #0]
    c23e:	ldr	r1, [r2, #4]
    c240:	str	r1, [r3, #4]
    c242:	ldr	r2, [r2, #8]
    c244:	str	r2, [r3, #8]
    c246:	mov	r1, r6
    c248:	mov	r0, r9
    c24a:	bl	11110 <_free_r>
    c24e:	mov	r0, r9
    c250:	bl	c1ac <__malloc_unlock>
    c254:	mov	r0, r7
    c256:	add	sp, #12
    c258:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c25c:	bic.w	r5, r5, #7
    c260:	cmp	r5, #0
    c262:	mov	r2, r5
    c264:	bge.n	c1de <_realloc_r+0x2e>
    c266:	movs	r3, #12
    c268:	movs	r0, #0
    c26a:	str.w	r3, [r9]
    c26e:	add	sp, #12
    c270:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c274:	ldr.w	r3, [r6, #-8]
    c278:	rsb	sl, r3, r8
    c27c:	ldr.w	r3, [sl, #4]
    c280:	bic.w	ip, r3, #3
    c284:	add.w	r3, r4, ip
    c288:	cmp	r3, r2
    c28a:	blt.n	c208 <_realloc_r+0x58>
    c28c:	mov	r7, sl
    c28e:	ldr.w	r1, [sl, #12]
    c292:	ldr.w	r0, [r7, #8]!
    c296:	subs	r2, r4, #4
    c298:	cmp	r2, #36	; 0x24
    c29a:	str	r1, [r0, #12]
    c29c:	str	r0, [r1, #8]
    c29e:	bhi.w	c4d0 <_realloc_r+0x320>
    c2a2:	cmp	r2, #19
    c2a4:	bls.w	c4cc <_realloc_r+0x31c>
    c2a8:	ldr	r1, [r6, #0]
    c2aa:	str.w	r1, [sl, #8]
    c2ae:	ldr	r1, [r6, #4]
    c2b0:	str.w	r1, [sl, #12]
    c2b4:	cmp	r2, #27
    c2b6:	bhi.w	c510 <_realloc_r+0x360>
    c2ba:	adds	r6, #8
    c2bc:	add.w	r2, sl, #16
    c2c0:	ldr	r1, [r6, #0]
    c2c2:	str	r1, [r2, #0]
    c2c4:	ldr	r1, [r6, #4]
    c2c6:	str	r1, [r2, #4]
    c2c8:	ldr	r1, [r6, #8]
    c2ca:	str	r1, [r2, #8]
    c2cc:	mov	r6, r7
    c2ce:	mov	r4, r3
    c2d0:	mov	r8, sl
    c2d2:	subs	r3, r4, r5
    c2d4:	cmp	r3, #15
    c2d6:	bhi.n	c314 <_realloc_r+0x164>
    c2d8:	ldr.w	r3, [r8, #4]
    c2dc:	and.w	r3, r3, #1
    c2e0:	orrs	r3, r4
    c2e2:	add	r4, r8
    c2e4:	str.w	r3, [r8, #4]
    c2e8:	ldr	r3, [r4, #4]
    c2ea:	orr.w	r3, r3, #1
    c2ee:	str	r3, [r4, #4]
    c2f0:	mov	r0, r9
    c2f2:	bl	c1ac <__malloc_unlock>
    c2f6:	mov	r0, r6
    c2f8:	add	sp, #12
    c2fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c2fe:	bic.w	r1, r1, #3
    c302:	add	r1, r4
    c304:	cmp	r1, r2
    c306:	blt.n	c34c <_realloc_r+0x19c>
    c308:	ldr	r3, [r0, #12]
    c30a:	ldr	r2, [r0, #8]
    c30c:	mov	r4, r1
    c30e:	str	r3, [r2, #12]
    c310:	str	r2, [r3, #8]
    c312:	b.n	c2d2 <_realloc_r+0x122>
    c314:	ldr.w	r2, [r8, #4]
    c318:	add.w	r1, r8, r5
    c31c:	and.w	r2, r2, #1
    c320:	orrs	r5, r2
    c322:	orr.w	r2, r3, #1
    c326:	add	r3, r1
    c328:	str.w	r5, [r8, #4]
    c32c:	str	r2, [r1, #4]
    c32e:	ldr	r2, [r3, #4]
    c330:	orr.w	r2, r2, #1
    c334:	adds	r1, #8
    c336:	str	r2, [r3, #4]
    c338:	mov	r0, r9
    c33a:	bl	11110 <_free_r>
    c33e:	b.n	c2f0 <_realloc_r+0x140>
    c340:	mov	r1, r2
    c342:	add	sp, #12
    c344:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c348:	b.w	b99c <_malloc_r>
    c34c:	tst.w	lr, #1
    c350:	bne.w	c208 <_realloc_r+0x58>
    c354:	ldr.w	r3, [r6, #-8]
    c358:	rsb	sl, r3, r8
    c35c:	ldr.w	r3, [sl, #4]
    c360:	bic.w	ip, r3, #3
    c364:	add.w	lr, r1, ip
    c368:	cmp	lr, r2
    c36a:	blt.n	c284 <_realloc_r+0xd4>
    c36c:	ldr	r3, [r0, #12]
    c36e:	ldr	r2, [r0, #8]
    c370:	mov	r7, sl
    c372:	str	r3, [r2, #12]
    c374:	str	r2, [r3, #8]
    c376:	ldr.w	r1, [r7, #8]!
    c37a:	ldr.w	r3, [sl, #12]
    c37e:	str	r3, [r1, #12]
    c380:	subs	r2, r4, #4
    c382:	cmp	r2, #36	; 0x24
    c384:	str	r1, [r3, #8]
    c386:	bhi.w	c4bc <_realloc_r+0x30c>
    c38a:	cmp	r2, #19
    c38c:	bls.n	c454 <_realloc_r+0x2a4>
    c38e:	ldr	r3, [r6, #0]
    c390:	str.w	r3, [sl, #8]
    c394:	ldr	r3, [r6, #4]
    c396:	str.w	r3, [sl, #12]
    c39a:	cmp	r2, #27
    c39c:	bhi.w	c4e0 <_realloc_r+0x330>
    c3a0:	adds	r6, #8
    c3a2:	add.w	r3, sl, #16
    c3a6:	b.n	c456 <_realloc_r+0x2a6>
    c3a8:	bic.w	fp, r1, #3
    c3ac:	add	fp, r4
    c3ae:	add.w	r0, r5, #16
    c3b2:	cmp	fp, r0
    c3b4:	bge.n	c46a <_realloc_r+0x2ba>
    c3b6:	tst.w	lr, #1
    c3ba:	bne.w	c208 <_realloc_r+0x58>
    c3be:	ldr.w	r1, [r6, #-8]
    c3c2:	rsb	sl, r1, r8
    c3c6:	ldr.w	r1, [sl, #4]
    c3ca:	bic.w	ip, r1, #3
    c3ce:	add	fp, ip
    c3d0:	cmp	r0, fp
    c3d2:	bgt.w	c284 <_realloc_r+0xd4>
    c3d6:	mov	r7, sl
    c3d8:	ldr.w	r1, [sl, #12]
    c3dc:	ldr.w	r0, [r7, #8]!
    c3e0:	subs	r2, r4, #4
    c3e2:	cmp	r2, #36	; 0x24
    c3e4:	str	r1, [r0, #12]
    c3e6:	str	r0, [r1, #8]
    c3e8:	bhi.w	c554 <_realloc_r+0x3a4>
    c3ec:	cmp	r2, #19
    c3ee:	bls.w	c53c <_realloc_r+0x38c>
    c3f2:	ldr	r1, [r6, #0]
    c3f4:	str.w	r1, [sl, #8]
    c3f8:	ldr	r1, [r6, #4]
    c3fa:	str.w	r1, [sl, #12]
    c3fe:	cmp	r2, #27
    c400:	bhi.w	c562 <_realloc_r+0x3b2>
    c404:	adds	r6, #8
    c406:	add.w	r2, sl, #16
    c40a:	ldr	r1, [r6, #0]
    c40c:	str	r1, [r2, #0]
    c40e:	ldr	r1, [r6, #4]
    c410:	str	r1, [r2, #4]
    c412:	ldr	r1, [r6, #8]
    c414:	str	r1, [r2, #8]
    c416:	add.w	r1, sl, r5
    c41a:	rsb	r2, r5, fp
    c41e:	orr.w	r2, r2, #1
    c422:	str	r1, [r3, #8]
    c424:	str	r2, [r1, #4]
    c426:	ldr.w	r3, [sl, #4]
    c42a:	and.w	r3, r3, #1
    c42e:	orrs	r5, r3
    c430:	mov	r0, r9
    c432:	str.w	r5, [sl, #4]
    c436:	bl	c1ac <__malloc_unlock>
    c43a:	mov	r0, r7
    c43c:	b.n	c2f8 <_realloc_r+0x148>
    c43e:	ldr	r3, [r6, #0]
    c440:	str	r3, [r0, #0]
    c442:	ldr	r3, [r6, #4]
    c444:	str	r3, [r0, #4]
    c446:	cmp	r2, #27
    c448:	bhi.n	c49a <_realloc_r+0x2ea>
    c44a:	add.w	r3, r0, #8
    c44e:	add.w	r2, r6, #8
    c452:	b.n	c23a <_realloc_r+0x8a>
    c454:	mov	r3, r7
    c456:	ldr	r2, [r6, #0]
    c458:	str	r2, [r3, #0]
    c45a:	ldr	r2, [r6, #4]
    c45c:	str	r2, [r3, #4]
    c45e:	ldr	r2, [r6, #8]
    c460:	str	r2, [r3, #8]
    c462:	mov	r6, r7
    c464:	mov	r4, lr
    c466:	mov	r8, sl
    c468:	b.n	c2d2 <_realloc_r+0x122>
    c46a:	add.w	r1, r8, r5
    c46e:	rsb	fp, r5, fp
    c472:	orr.w	r2, fp, #1
    c476:	str	r1, [r3, #8]
    c478:	str	r2, [r1, #4]
    c47a:	ldr.w	r3, [r6, #-4]
    c47e:	and.w	r3, r3, #1
    c482:	orrs	r5, r3
    c484:	mov	r0, r9
    c486:	str.w	r5, [r6, #-4]
    c48a:	bl	c1ac <__malloc_unlock>
    c48e:	mov	r0, r6
    c490:	b.n	c2f8 <_realloc_r+0x148>
    c492:	mov	r1, r6
    c494:	bl	c044 <memmove>
    c498:	b.n	c246 <_realloc_r+0x96>
    c49a:	ldr	r3, [r6, #8]
    c49c:	str	r3, [r0, #8]
    c49e:	ldr	r3, [r6, #12]
    c4a0:	str	r3, [r0, #12]
    c4a2:	cmp	r2, #36	; 0x24
    c4a4:	beq.n	c4f8 <_realloc_r+0x348>
    c4a6:	add.w	r3, r0, #16
    c4aa:	add.w	r2, r6, #16
    c4ae:	b.n	c23a <_realloc_r+0x8a>
    c4b0:	ldr.w	r3, [r0, #-4]
    c4b4:	bic.w	r3, r3, #3
    c4b8:	add	r4, r3
    c4ba:	b.n	c2d2 <_realloc_r+0x122>
    c4bc:	mov	r1, r6
    c4be:	mov	r0, r7
    c4c0:	mov	r4, lr
    c4c2:	mov	r8, sl
    c4c4:	bl	c044 <memmove>
    c4c8:	mov	r6, r7
    c4ca:	b.n	c2d2 <_realloc_r+0x122>
    c4cc:	mov	r2, r7
    c4ce:	b.n	c2c0 <_realloc_r+0x110>
    c4d0:	mov	r1, r6
    c4d2:	mov	r0, r7
    c4d4:	mov	r4, r3
    c4d6:	mov	r8, sl
    c4d8:	bl	c044 <memmove>
    c4dc:	mov	r6, r7
    c4de:	b.n	c2d2 <_realloc_r+0x122>
    c4e0:	ldr	r3, [r6, #8]
    c4e2:	str.w	r3, [sl, #16]
    c4e6:	ldr	r3, [r6, #12]
    c4e8:	str.w	r3, [sl, #20]
    c4ec:	cmp	r2, #36	; 0x24
    c4ee:	beq.n	c528 <_realloc_r+0x378>
    c4f0:	adds	r6, #16
    c4f2:	add.w	r3, sl, #24
    c4f6:	b.n	c456 <_realloc_r+0x2a6>
    c4f8:	ldr	r3, [r6, #16]
    c4fa:	str	r3, [r0, #16]
    c4fc:	ldr	r3, [r6, #20]
    c4fe:	str	r3, [r0, #20]
    c500:	add.w	r2, r6, #24
    c504:	add.w	r3, r0, #24
    c508:	b.n	c23a <_realloc_r+0x8a>
    c50a:	nop
    c50c:	.word	0x20017570
    c510:	ldr	r1, [r6, #8]
    c512:	str.w	r1, [sl, #16]
    c516:	ldr	r1, [r6, #12]
    c518:	str.w	r1, [sl, #20]
    c51c:	cmp	r2, #36	; 0x24
    c51e:	beq.n	c540 <_realloc_r+0x390>
    c520:	adds	r6, #16
    c522:	add.w	r2, sl, #24
    c526:	b.n	c2c0 <_realloc_r+0x110>
    c528:	ldr	r3, [r6, #16]
    c52a:	str.w	r3, [sl, #24]
    c52e:	ldr	r3, [r6, #20]
    c530:	str.w	r3, [sl, #28]
    c534:	adds	r6, #24
    c536:	add.w	r3, sl, #32
    c53a:	b.n	c456 <_realloc_r+0x2a6>
    c53c:	mov	r2, r7
    c53e:	b.n	c40a <_realloc_r+0x25a>
    c540:	ldr	r2, [r6, #16]
    c542:	str.w	r2, [sl, #24]
    c546:	ldr	r2, [r6, #20]
    c548:	str.w	r2, [sl, #28]
    c54c:	adds	r6, #24
    c54e:	add.w	r2, sl, #32
    c552:	b.n	c2c0 <_realloc_r+0x110>
    c554:	mov	r1, r6
    c556:	mov	r0, r7
    c558:	str	r3, [sp, #4]
    c55a:	bl	c044 <memmove>
    c55e:	ldr	r3, [sp, #4]
    c560:	b.n	c416 <_realloc_r+0x266>
    c562:	ldr	r1, [r6, #8]
    c564:	str.w	r1, [sl, #16]
    c568:	ldr	r1, [r6, #12]
    c56a:	str.w	r1, [sl, #20]
    c56e:	cmp	r2, #36	; 0x24
    c570:	beq.n	c57a <_realloc_r+0x3ca>
    c572:	adds	r6, #16
    c574:	add.w	r2, sl, #24
    c578:	b.n	c40a <_realloc_r+0x25a>
    c57a:	ldr	r2, [r6, #16]
    c57c:	str.w	r2, [sl, #24]
    c580:	ldr	r2, [r6, #20]
    c582:	str.w	r2, [sl, #28]
    c586:	adds	r6, #24
    c588:	add.w	r2, sl, #32
    c58c:	b.n	c40a <_realloc_r+0x25a>
    c58e:	nop

0000c590 <_sbrk_r>:
    c590:	push	{r3, r4, r5, lr}
    c592:	ldr	r4, [pc, #28]	; (c5b0 <_sbrk_r+0x20>)
    c594:	movs	r3, #0
    c596:	mov	r5, r0
    c598:	mov	r0, r1
    c59a:	str	r3, [r4, #0]
    c59c:	bl	873c <_sbrk>
    c5a0:	adds	r3, r0, #1
    c5a2:	beq.n	c5a6 <_sbrk_r+0x16>
    c5a4:	pop	{r3, r4, r5, pc}
    c5a6:	ldr	r3, [r4, #0]
    c5a8:	cmp	r3, #0
    c5aa:	beq.n	c5a4 <_sbrk_r+0x14>
    c5ac:	str	r3, [r5, #0]
    c5ae:	pop	{r3, r4, r5, pc}
    c5b0:	.word	0x2001ce3c

0000c5b4 <sprintf>:
    c5b4:	push	{r1, r2, r3}
    c5b6:	push	{r4, r5, r6, r7, lr}
    c5b8:	sub	sp, #112	; 0x70
    c5ba:	add	r3, sp, #132	; 0x84
    c5bc:	ldr	r1, [pc, #60]	; (c5fc <sprintf+0x48>)
    c5be:	ldr.w	r2, [r3], #4
    c5c2:	str	r3, [sp, #4]
    c5c4:	mov	r5, r0
    c5c6:	mvn.w	r4, #2147483648	; 0x80000000
    c5ca:	ldr	r0, [r1, #0]
    c5cc:	str	r5, [sp, #8]
    c5ce:	mov.w	r7, #520	; 0x208
    c5d2:	movw	r6, #65535	; 0xffff
    c5d6:	add	r1, sp, #8
    c5d8:	str	r5, [sp, #24]
    c5da:	strh.w	r7, [sp, #20]
    c5de:	str	r4, [sp, #16]
    c5e0:	str	r4, [sp, #28]
    c5e2:	strh.w	r6, [sp, #22]
    c5e6:	bl	da10 <_svfprintf_r>
    c5ea:	ldr	r3, [sp, #8]
    c5ec:	movs	r2, #0
    c5ee:	strb	r2, [r3, #0]
    c5f0:	add	sp, #112	; 0x70
    c5f2:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    c5f6:	add	sp, #12
    c5f8:	bx	lr
    c5fa:	nop
    c5fc:	.word	0x20017400

0000c600 <sscanf>:
    c600:	push	{r1, r2, r3}
    c602:	push	{r4, r5, r6, r7, lr}
    c604:	sub	sp, #112	; 0x70
    c606:	add	r4, sp, #132	; 0x84
    c608:	mov.w	r2, #516	; 0x204
    c60c:	ldr.w	r6, [r4], #4
    c610:	strh.w	r2, [sp, #20]
    c614:	str	r0, [sp, #8]
    c616:	str	r0, [sp, #24]
    c618:	bl	c800 <strlen>
    c61c:	ldr	r3, [pc, #48]	; (c650 <sscanf+0x50>)
    c61e:	str	r4, [sp, #4]
    c620:	mov	r5, r0
    c622:	mov	r2, r6
    c624:	ldr	r7, [pc, #44]	; (c654 <sscanf+0x54>)
    c626:	ldr	r0, [r3, #0]
    c628:	str	r5, [sp, #12]
    c62a:	mov	r3, r4
    c62c:	movw	r6, #65535	; 0xffff
    c630:	movs	r4, #0
    c632:	add	r1, sp, #8
    c634:	str	r5, [sp, #28]
    c636:	str	r7, [sp, #40]	; 0x28
    c638:	str	r4, [sp, #56]	; 0x38
    c63a:	str	r4, [sp, #76]	; 0x4c
    c63c:	strh.w	r6, [sp, #22]
    c640:	bl	f0f4 <__ssvfscanf_r>
    c644:	add	sp, #112	; 0x70
    c646:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    c64a:	add	sp, #12
    c64c:	bx	lr
    c64e:	nop
    c650:	.word	0x20017400
    c654:	.word	0x0000c659

0000c658 <__seofread>:
    c658:	movs	r0, #0
    c65a:	bx	lr

0000c65c <strchr>:
    c65c:	push	{r4, r5, r6}
    c65e:	ands.w	r4, r1, #255	; 0xff
    c662:	beq.n	c6ce <strchr+0x72>
    c664:	lsls	r5, r0, #30
    c666:	beq.n	c688 <strchr+0x2c>
    c668:	ldrb	r3, [r0, #0]
    c66a:	cmp	r3, #0
    c66c:	beq.n	c724 <strchr+0xc8>
    c66e:	cmp	r4, r3
    c670:	beq.n	c6ca <strchr+0x6e>
    c672:	adds	r3, r0, #1
    c674:	b.n	c682 <strchr+0x26>
    c676:	ldrb.w	r2, [r3], #1
    c67a:	cmp	r2, #0
    c67c:	beq.n	c71e <strchr+0xc2>
    c67e:	cmp	r4, r2
    c680:	beq.n	c6ca <strchr+0x6e>
    c682:	lsls	r2, r3, #30
    c684:	mov	r0, r3
    c686:	bne.n	c676 <strchr+0x1a>
    c688:	lsls	r6, r1, #8
    c68a:	and.w	r6, r6, #65280	; 0xff00
    c68e:	orrs	r6, r4
    c690:	ldr	r3, [r0, #0]
    c692:	orr.w	r6, r6, r6, lsl #16
    c696:	b.n	c69c <strchr+0x40>
    c698:	ldr.w	r3, [r0, #4]!
    c69c:	eor.w	r5, r6, r3
    c6a0:	sub.w	r2, r5, #16843009	; 0x1010101
    c6a4:	sub.w	r1, r3, #16843009	; 0x1010101
    c6a8:	bic.w	r2, r2, r5
    c6ac:	bic.w	r3, r1, r3
    c6b0:	orrs	r3, r2
    c6b2:	tst.w	r3, #2155905152	; 0x80808080
    c6b6:	beq.n	c698 <strchr+0x3c>
    c6b8:	ldrb	r3, [r0, #0]
    c6ba:	cbnz	r3, c6c6 <strchr+0x6a>
    c6bc:	b.n	c724 <strchr+0xc8>
    c6be:	ldrb.w	r3, [r0, #1]!
    c6c2:	cmp	r3, #0
    c6c4:	beq.n	c724 <strchr+0xc8>
    c6c6:	cmp	r4, r3
    c6c8:	bne.n	c6be <strchr+0x62>
    c6ca:	pop	{r4, r5, r6}
    c6cc:	bx	lr
    c6ce:	lsls	r4, r0, #30
    c6d0:	beq.n	c6ea <strchr+0x8e>
    c6d2:	ldrb	r3, [r0, #0]
    c6d4:	cmp	r3, #0
    c6d6:	beq.n	c6ca <strchr+0x6e>
    c6d8:	adds	r3, r0, #1
    c6da:	b.n	c6e4 <strchr+0x88>
    c6dc:	ldrb	r2, [r0, #0]
    c6de:	adds	r3, #1
    c6e0:	cmp	r2, #0
    c6e2:	beq.n	c6ca <strchr+0x6e>
    c6e4:	lsls	r1, r3, #30
    c6e6:	mov	r0, r3
    c6e8:	bne.n	c6dc <strchr+0x80>
    c6ea:	ldr	r2, [r0, #0]
    c6ec:	sub.w	r3, r2, #16843009	; 0x1010101
    c6f0:	bic.w	r3, r3, r2
    c6f4:	tst.w	r3, #2155905152	; 0x80808080
    c6f8:	bne.n	c70c <strchr+0xb0>
    c6fa:	ldr.w	r2, [r0, #4]!
    c6fe:	sub.w	r3, r2, #16843009	; 0x1010101
    c702:	bic.w	r3, r3, r2
    c706:	tst.w	r3, #2155905152	; 0x80808080
    c70a:	beq.n	c6fa <strchr+0x9e>
    c70c:	ldrb	r3, [r0, #0]
    c70e:	cmp	r3, #0
    c710:	beq.n	c6ca <strchr+0x6e>
    c712:	ldrb.w	r3, [r0, #1]!
    c716:	cmp	r3, #0
    c718:	bne.n	c712 <strchr+0xb6>
    c71a:	pop	{r4, r5, r6}
    c71c:	bx	lr
    c71e:	mov	r0, r2
    c720:	pop	{r4, r5, r6}
    c722:	bx	lr
    c724:	mov	r0, r3
    c726:	pop	{r4, r5, r6}
    c728:	bx	lr
    c72a:	nop

0000c72c <strcpy>:
    c72c:	eor.w	r2, r0, r1
    c730:	mov	ip, r0
    c732:	tst.w	r2, #3
    c736:	bne.n	c7d8 <strcpy+0xac>
    c738:	tst.w	r1, #3
    c73c:	bne.n	c7a4 <strcpy+0x78>
    c73e:	str.w	r4, [sp, #-4]!
    c742:	tst.w	r1, #4
    c746:	ldr.w	r3, [r1], #4
    c74a:	beq.n	c764 <strcpy+0x38>
    c74c:	sub.w	r2, r3, #16843009	; 0x1010101
    c750:	bics	r2, r3
    c752:	tst.w	r2, #2155905152	; 0x80808080
    c756:	itt	eq
    c758:	streq.w	r3, [ip], #4
    c75c:	ldreq.w	r3, [r1], #4
    c760:	bne.n	c790 <strcpy+0x64>
    c762:	nop
    c764:	ldr.w	r4, [r1], #4
    c768:	sub.w	r2, r3, #16843009	; 0x1010101
    c76c:	bics	r2, r3
    c76e:	tst.w	r2, #2155905152	; 0x80808080
    c772:	sub.w	r2, r4, #16843009	; 0x1010101
    c776:	bne.n	c790 <strcpy+0x64>
    c778:	str.w	r3, [ip], #4
    c77c:	bics	r2, r4
    c77e:	tst.w	r2, #2155905152	; 0x80808080
    c782:	itt	eq
    c784:	ldreq.w	r3, [r1], #4
    c788:	streq.w	r4, [ip], #4
    c78c:	beq.n	c764 <strcpy+0x38>
    c78e:	mov	r3, r4
    c790:	strb.w	r3, [ip], #1
    c794:	tst.w	r3, #255	; 0xff
    c798:	mov.w	r3, r3, ror #8
    c79c:	bne.n	c790 <strcpy+0x64>
    c79e:	ldr.w	r4, [sp], #4
    c7a2:	bx	lr
    c7a4:	tst.w	r1, #1
    c7a8:	beq.n	c7b8 <strcpy+0x8c>
    c7aa:	ldrb.w	r2, [r1], #1
    c7ae:	strb.w	r2, [ip], #1
    c7b2:	cmp	r2, #0
    c7b4:	it	eq
    c7b6:	bxeq	lr
    c7b8:	tst.w	r1, #2
    c7bc:	beq.n	c73e <strcpy+0x12>
    c7be:	ldrh.w	r2, [r1], #2
    c7c2:	tst.w	r2, #255	; 0xff
    c7c6:	itet	ne
    c7c8:	strhne.w	r2, [ip], #2
    c7cc:	strbeq.w	r2, [ip]
    c7d0:	tstne.w	r2, #65280	; 0xff00
    c7d4:	bne.n	c73e <strcpy+0x12>
    c7d6:	bx	lr
    c7d8:	ldrb.w	r2, [r1], #1
    c7dc:	strb.w	r2, [ip], #1
    c7e0:	cmp	r2, #0
    c7e2:	bne.n	c7d8 <strcpy+0xac>
    c7e4:	bx	lr
    c7e6:	nop
    c7e8:			; <UNDEFINED> instruction: 0xffffffff
    c7ec:			; <UNDEFINED> instruction: 0xffffffff
    c7f0:			; <UNDEFINED> instruction: 0xffffffff
    c7f4:			; <UNDEFINED> instruction: 0xffffffff
    c7f8:			; <UNDEFINED> instruction: 0xffffffff
    c7fc:			; <UNDEFINED> instruction: 0xffffffff

0000c800 <strlen>:
    c800:	pld	[r0]
    c804:	strd	r4, r5, [sp, #-8]!
    c808:	bic.w	r1, r0, #7
    c80c:	mvn.w	ip, #0
    c810:	ands.w	r4, r0, #7
    c814:	pld	[r1, #32]
    c818:	bne.w	c8ae <strlen+0xae>
    c81c:	mov.w	r4, #0
    c820:	mvn.w	r0, #7
    c824:	ldrd	r2, r3, [r1]
    c828:	pld	[r1, #64]	; 0x40
    c82c:	add.w	r0, r0, #8
    c830:	uadd8	r2, r2, ip
    c834:	sel	r2, r4, ip
    c838:	uadd8	r3, r3, ip
    c83c:	sel	r3, r2, ip
    c840:	cbnz	r3, c896 <strlen+0x96>
    c842:	ldrd	r2, r3, [r1, #8]
    c846:	uadd8	r2, r2, ip
    c84a:	add.w	r0, r0, #8
    c84e:	sel	r2, r4, ip
    c852:	uadd8	r3, r3, ip
    c856:	sel	r3, r2, ip
    c85a:	cbnz	r3, c896 <strlen+0x96>
    c85c:	ldrd	r2, r3, [r1, #16]
    c860:	uadd8	r2, r2, ip
    c864:	add.w	r0, r0, #8
    c868:	sel	r2, r4, ip
    c86c:	uadd8	r3, r3, ip
    c870:	sel	r3, r2, ip
    c874:	cbnz	r3, c896 <strlen+0x96>
    c876:	ldrd	r2, r3, [r1, #24]
    c87a:	add.w	r1, r1, #32
    c87e:	uadd8	r2, r2, ip
    c882:	add.w	r0, r0, #8
    c886:	sel	r2, r4, ip
    c88a:	uadd8	r3, r3, ip
    c88e:	sel	r3, r2, ip
    c892:	cmp	r3, #0
    c894:	beq.n	c824 <strlen+0x24>
    c896:	cmp	r2, #0
    c898:	itt	eq
    c89a:	addeq	r0, #4
    c89c:	moveq	r2, r3
    c89e:	rev	r2, r2
    c8a0:	clz	r2, r2
    c8a4:	ldrd	r4, r5, [sp], #8
    c8a8:	add.w	r0, r0, r2, lsr #3
    c8ac:	bx	lr
    c8ae:	ldrd	r2, r3, [r1]
    c8b2:	and.w	r5, r4, #3
    c8b6:	rsb	r0, r4, #0
    c8ba:	mov.w	r5, r5, lsl #3
    c8be:	tst.w	r4, #4
    c8c2:	pld	[r1, #64]	; 0x40
    c8c6:	lsl.w	r5, ip, r5
    c8ca:	orn	r2, r2, r5
    c8ce:	itt	ne
    c8d0:	ornne	r3, r3, r5
    c8d4:	movne	r2, ip
    c8d6:	mov.w	r4, #0
    c8da:	b.n	c830 <strlen+0x30>

0000c8dc <strncmp>:
    c8dc:	cmp	r2, #0
    c8de:	beq.n	c964 <strncmp+0x88>
    c8e0:	orr.w	r3, r0, r1
    c8e4:	ands.w	r3, r3, #3
    c8e8:	push	{r4, r5, r6, r7}
    c8ea:	bne.n	c938 <strncmp+0x5c>
    c8ec:	cmp	r2, #3
    c8ee:	bls.n	c938 <strncmp+0x5c>
    c8f0:	ldr	r4, [r0, #0]
    c8f2:	ldr	r5, [r1, #0]
    c8f4:	cmp	r4, r5
    c8f6:	bne.n	c938 <strncmp+0x5c>
    c8f8:	subs	r2, #4
    c8fa:	beq.n	c968 <strncmp+0x8c>
    c8fc:	sub.w	r5, r4, #16843009	; 0x1010101
    c900:	bic.w	r4, r5, r4
    c904:	tst.w	r4, #2155905152	; 0x80808080
    c908:	bne.n	c96e <strncmp+0x92>
    c90a:	adds	r7, r0, #4
    c90c:	adds	r5, r1, #4
    c90e:	b.n	c92c <strncmp+0x50>
    c910:	ldr.w	r3, [r7], #4
    c914:	ldr	r6, [r1, #0]
    c916:	sub.w	r4, r3, #16843009	; 0x1010101
    c91a:	cmp	r3, r6
    c91c:	bic.w	r4, r4, r3
    c920:	bne.n	c938 <strncmp+0x5c>
    c922:	subs	r2, #4
    c924:	beq.n	c968 <strncmp+0x8c>
    c926:	tst.w	r4, #2155905152	; 0x80808080
    c92a:	bne.n	c974 <strncmp+0x98>
    c92c:	cmp	r2, #3
    c92e:	mov	r1, r5
    c930:	mov	r0, r7
    c932:	add.w	r5, r5, #4
    c936:	bhi.n	c910 <strncmp+0x34>
    c938:	ldrb	r3, [r0, #0]
    c93a:	ldrb	r4, [r1, #0]
    c93c:	cmp	r4, r3
    c93e:	add.w	r2, r2, #4294967295
    c942:	bne.n	c95e <strncmp+0x82>
    c944:	cbz	r2, c968 <strncmp+0x8c>
    c946:	cbnz	r4, c94e <strncmp+0x72>
    c948:	b.n	c978 <strncmp+0x9c>
    c94a:	cbz	r2, c968 <strncmp+0x8c>
    c94c:	cbz	r3, c96e <strncmp+0x92>
    c94e:	ldrb.w	r3, [r0, #1]!
    c952:	ldrb.w	r4, [r1, #1]!
    c956:	cmp	r3, r4
    c958:	add.w	r2, r2, #4294967295
    c95c:	beq.n	c94a <strncmp+0x6e>
    c95e:	subs	r0, r3, r4
    c960:	pop	{r4, r5, r6, r7}
    c962:	bx	lr
    c964:	mov	r0, r2
    c966:	bx	lr
    c968:	mov	r0, r2
    c96a:	pop	{r4, r5, r6, r7}
    c96c:	bx	lr
    c96e:	mov	r0, r3
    c970:	pop	{r4, r5, r6, r7}
    c972:	bx	lr
    c974:	movs	r0, #0
    c976:	b.n	c960 <strncmp+0x84>
    c978:	mov	r0, r4
    c97a:	b.n	c960 <strncmp+0x84>

0000c97c <sulp>:
    c97c:	push	{r4, r5, r6, lr}
    c97e:	mov	r4, r0
    c980:	mov	r5, r1
    c982:	vmov	d0, r4, r5
    c986:	mov	r6, r2
    c988:	bl	120e0 <__ulp>
    c98c:	vmov	r0, r1, d0
    c990:	cbz	r6, c9b2 <sulp+0x36>
    c992:	ubfx	r3, r5, #20, #11
    c996:	rsb	r3, r3, #107	; 0x6b
    c99a:	cmp	r3, #0
    c99c:	ble.n	c9b2 <sulp+0x36>
    c99e:	lsls	r3, r3, #20
    c9a0:	add.w	r5, r3, #1069547520	; 0x3fc00000
    c9a4:	movs	r4, #0
    c9a6:	add.w	r5, r5, #3145728	; 0x300000
    c9aa:	mov	r2, r4
    c9ac:	mov	r3, r5
    c9ae:	bl	ac90 <__aeabi_dmul>
    c9b2:	pop	{r4, r5, r6, pc}
    c9b4:			; <UNDEFINED> instruction: 0xffffffff

0000c9b8 <_strtod_l>:
    c9b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c9bc:	mov	r5, r3
    c9be:	sub	sp, #132	; 0x84
    c9c0:	movs	r3, #0
    c9c2:	mov	fp, r0
    c9c4:	mov	r0, r5
    c9c6:	mov	r6, r1
    c9c8:	str	r2, [sp, #24]
    c9ca:	str	r3, [sp, #112]	; 0x70
    c9cc:	bl	11a64 <__localeconv_l>
    c9d0:	movs	r4, #0
    c9d2:	movs	r3, #0
    c9d4:	mov	sl, r0
    c9d6:	ldr	r0, [r0, #0]
    c9d8:	strd	r3, r4, [sp, #16]
    c9dc:	bl	c800 <strlen>
    c9e0:	str	r6, [sp, #108]	; 0x6c
    c9e2:	mov	r9, r0
    c9e4:	mov	r2, r6
    c9e6:	mov	r4, r2
    c9e8:	ldrb.w	r7, [r2], #1
    c9ec:	cmp	r7, #45	; 0x2d
    c9ee:	bhi.w	cb50 <_strtod_l+0x198>
    c9f2:	tbb	[pc, r7]
    c9f6:	.short	0xad17
    c9f8:	.word	0xadadadad
    c9fc:	.word	0x81adadad
    ca00:	.word	0x81818181
    ca04:	.word	0xadadadad
    ca08:	.word	0xadadadad
    ca0c:	.word	0xadadadad
    ca10:	.word	0xadadadad
    ca14:	.word	0xad81adad
    ca18:	.word	0xadadadad
    ca1c:	.word	0xadadadad
    ca20:	.word	0x7ead2bad
    ca24:	ldr	r3, [sp, #24]
    ca26:	mov.w	r8, #0
    ca2a:	mov.w	r9, #0
    ca2e:	cbz	r3, ca42 <_strtod_l+0x8a>
    ca30:	movs	r3, #0
    ca32:	str	r3, [sp, #28]
    ca34:	ldr	r3, [sp, #24]
    ca36:	str	r6, [r3, #0]
    ca38:	ldr	r3, [sp, #28]
    ca3a:	cbz	r3, ca42 <_strtod_l+0x8a>
    ca3c:	add.w	r3, r9, #2147483648	; 0x80000000
    ca40:	mov	r9, r3
    ca42:	vmov	d0, r8, r9
    ca46:	add	sp, #132	; 0x84
    ca48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ca4c:	movs	r3, #0
    ca4e:	str	r3, [sp, #28]
    ca50:	adds	r2, r4, #1
    ca52:	str	r2, [sp, #108]	; 0x6c
    ca54:	ldrb	r7, [r4, #1]
    ca56:	cmp	r7, #0
    ca58:	beq.n	ca24 <_strtod_l+0x6c>
    ca5a:	cmp	r7, #48	; 0x30
    ca5c:	mov	r4, r2
    ca5e:	beq.n	cb58 <_strtod_l+0x1a0>
    ca60:	movs	r3, #0
    ca62:	str	r4, [sp, #32]
    ca64:	str	r3, [sp, #40]	; 0x28
    ca66:	sub.w	r3, r7, #48	; 0x30
    ca6a:	cmp	r3, #9
    ca6c:	bhi.w	d27e <_strtod_l+0x8c6>
    ca70:	mov.w	r8, #0
    ca74:	mov	r0, r4
    ca76:	mov	r5, r8
    ca78:	mov	r4, r8
    ca7a:	cmp	r4, #8
    ca7c:	it	gt
    ca7e:	addgt.w	r8, r8, r8, lsl #2
    ca82:	add.w	r3, r5, r5, lsl #2
    ca86:	add.w	r0, r0, #1
    ca8a:	add.w	r3, r7, r3, lsl #1
    ca8e:	str	r0, [sp, #108]	; 0x6c
    ca90:	itt	gt
    ca92:	addgt.w	r7, r7, r8, lsl #1
    ca96:	subgt.w	r8, r7, #48	; 0x30
    ca9a:	ldrb	r7, [r0, #0]
    ca9c:	it	le
    ca9e:	suble.w	r5, r3, #48	; 0x30
    caa2:	sub.w	r3, r7, #48	; 0x30
    caa6:	cmp	r3, #9
    caa8:	add.w	r4, r4, #1
    caac:	bls.n	ca7a <_strtod_l+0xc2>
    caae:	ldr.w	r1, [sl]
    cab2:	mov	r2, r9
    cab4:	bl	c8dc <strncmp>
    cab8:	cbz	r0, cafc <_strtod_l+0x144>
    caba:	movs	r0, #0
    cabc:	mov	r3, r7
    cabe:	mov	r9, r0
    cac0:	mov	r7, r0
    cac2:	mov	sl, r4
    cac4:	cmp	r3, #101	; 0x65
    cac6:	beq.w	cc2e <_strtod_l+0x276>
    caca:	cmp	r3, #69	; 0x45
    cacc:	beq.w	cc2e <_strtod_l+0x276>
    cad0:	movs	r2, #0
    cad2:	cmp	r4, #0
    cad4:	bne.n	cb7c <_strtod_l+0x1c4>
    cad6:	cbnz	r0, cae0 <_strtod_l+0x128>
    cad8:	ldr	r2, [sp, #40]	; 0x28
    cada:	cmp	r2, #0
    cadc:	beq.w	d082 <_strtod_l+0x6ca>
    cae0:	mov.w	r8, #0
    cae4:	mov.w	r9, #0
    cae8:	ldr	r3, [sp, #24]
    caea:	cmp	r3, #0
    caec:	beq.n	ca38 <_strtod_l+0x80>
    caee:	ldr	r6, [sp, #108]	; 0x6c
    caf0:	b.n	ca34 <_strtod_l+0x7c>
    caf2:	movs	r3, #1
    caf4:	str	r3, [sp, #28]
    caf6:	b.n	ca50 <_strtod_l+0x98>
    caf8:	str	r2, [sp, #108]	; 0x6c
    cafa:	b.n	c9e6 <_strtod_l+0x2e>
    cafc:	ldr	r3, [sp, #108]	; 0x6c
    cafe:	add.w	r2, r3, r9
    cb02:	str	r2, [sp, #108]	; 0x6c
    cb04:	ldrb.w	r3, [r3, r9]
    cb08:	mov	r7, r0
    cb0a:	mov	sl, r4
    cb0c:	sub.w	r2, r3, #48	; 0x30
    cb10:	cmp	r2, #9
    cb12:	bhi.w	d008 <_strtod_l+0x650>
    cb16:	adds	r1, r0, #1
    cb18:	mov	r3, r2
    cb1a:	cmp	r2, #0
    cb1c:	beq.w	d85e <_strtod_l+0xea6>
    cb20:	cmp	r1, #1
    cb22:	add	r7, r1
    cb24:	it	ne
    cb26:	addne	r0, r0, r4
    cb28:	bne.n	cb36 <_strtod_l+0x17e>
    cb2a:	b.w	d856 <_strtod_l+0xe9e>
    cb2e:	lsls	r5, r1, #1
    cb30:	cmp	r4, r0
    cb32:	beq.w	d4ac <_strtod_l+0xaf4>
    cb36:	adds	r4, #1
    cb38:	subs	r1, r4, #1
    cb3a:	cmp	r1, #8
    cb3c:	add.w	r1, r5, r5, lsl #2
    cb40:	ble.n	cb2e <_strtod_l+0x176>
    cb42:	cmp	r4, #16
    cb44:	itt	le
    cb46:	addle.w	r8, r8, r8, lsl #2
    cb4a:	movle.w	r8, r8, lsl #1
    cb4e:	b.n	cb30 <_strtod_l+0x178>
    cb50:	movs	r3, #0
    cb52:	cmp	r7, #48	; 0x30
    cb54:	str	r3, [sp, #28]
    cb56:	bne.n	ca60 <_strtod_l+0xa8>
    cb58:	ldrb	r3, [r4, #1]
    cb5a:	cmp	r3, #88	; 0x58
    cb5c:	beq.w	d246 <_strtod_l+0x88e>
    cb60:	cmp	r3, #120	; 0x78
    cb62:	beq.w	d246 <_strtod_l+0x88e>
    cb66:	adds	r4, #1
    cb68:	str	r4, [sp, #108]	; 0x6c
    cb6a:	ldrb	r7, [r4, #0]
    cb6c:	cmp	r7, #48	; 0x30
    cb6e:	beq.n	cb66 <_strtod_l+0x1ae>
    cb70:	cmp	r7, #0
    cb72:	beq.n	cae0 <_strtod_l+0x128>
    cb74:	movs	r3, #1
    cb76:	str	r4, [sp, #32]
    cb78:	str	r3, [sp, #40]	; 0x28
    cb7a:	b.n	ca66 <_strtod_l+0xae>
    cb7c:	cmp	r4, #16
    cb7e:	sub.w	r3, r2, r7
    cb82:	mov	r0, r5
    cb84:	mov	r9, r4
    cb86:	str	r3, [sp, #44]	; 0x2c
    cb88:	it	ge
    cb8a:	movge.w	r9, #16
    cb8e:	bl	aba4 <__aeabi_ui2d>
    cb92:	cmp.w	sl, #0
    cb96:	it	eq
    cb98:	moveq	sl, r4
    cb9a:	cmp.w	r9, #9
    cb9e:	strd	r0, r1, [sp, #16]
    cba2:	ble.n	cbcc <_strtod_l+0x214>
    cba4:	ldr	r3, [pc, #292]	; (cccc <_strtod_l+0x314>)
    cba6:	add.w	r3, r3, r9, lsl #3
    cbaa:	ldrd	r2, r3, [r3, #-72]	; 0x48
    cbae:	bl	ac90 <__aeabi_dmul>
    cbb2:	mov	r6, r0
    cbb4:	mov	r0, r8
    cbb6:	mov	r7, r1
    cbb8:	bl	aba4 <__aeabi_ui2d>
    cbbc:	mov	r2, r0
    cbbe:	mov	r3, r1
    cbc0:	mov	r0, r6
    cbc2:	mov	r1, r7
    cbc4:	bl	a92c <__adddf3>
    cbc8:	strd	r0, r1, [sp, #16]
    cbcc:	cmp	r4, #15
    cbce:	bgt.w	ccdc <_strtod_l+0x324>
    cbd2:	ldr	r3, [sp, #44]	; 0x2c
    cbd4:	cmp	r3, #0
    cbd6:	beq.n	cc28 <_strtod_l+0x270>
    cbd8:	ble.w	d614 <_strtod_l+0xc5c>
    cbdc:	ldr	r3, [sp, #44]	; 0x2c
    cbde:	cmp	r3, #22
    cbe0:	bgt.w	d4e0 <_strtod_l+0xb28>
    cbe4:	ldr	r7, [pc, #228]	; (cccc <_strtod_l+0x314>)
    cbe6:	add.w	r7, r7, r3, lsl #3
    cbea:	ldrd	r0, r1, [r7]
    cbee:	ldrd	r2, r3, [sp, #16]
    cbf2:	bl	ac90 <__aeabi_dmul>
    cbf6:	mov	r8, r0
    cbf8:	mov	r9, r1
    cbfa:	b.n	cae8 <_strtod_l+0x130>
    cbfc:	add	r0, sp, #108	; 0x6c
    cbfe:	ldr	r1, [pc, #208]	; (ccd0 <_strtod_l+0x318>)
    cc00:	bl	11898 <__match>
    cc04:	cmp	r0, #0
    cc06:	beq.w	ca24 <_strtod_l+0x6c>
    cc0a:	ldr	r3, [sp, #108]	; 0x6c
    cc0c:	ldr	r1, [pc, #196]	; (ccd4 <_strtod_l+0x31c>)
    cc0e:	subs	r3, #1
    cc10:	add	r0, sp, #108	; 0x6c
    cc12:	str	r3, [sp, #108]	; 0x6c
    cc14:	bl	11898 <__match>
    cc18:	cbnz	r0, cc20 <_strtod_l+0x268>
    cc1a:	ldr	r3, [sp, #108]	; 0x6c
    cc1c:	adds	r3, #1
    cc1e:	str	r3, [sp, #108]	; 0x6c
    cc20:	ldr	r3, [pc, #180]	; (ccd8 <_strtod_l+0x320>)
    cc22:	str	r3, [sp, #20]
    cc24:	movs	r3, #0
    cc26:	str	r3, [sp, #16]
    cc28:	ldrd	r8, r9, [sp, #16]
    cc2c:	b.n	cae8 <_strtod_l+0x130>
    cc2e:	cmp	r4, #0
    cc30:	beq.w	cfc8 <_strtod_l+0x610>
    cc34:	ldr	r6, [sp, #108]	; 0x6c
    cc36:	adds	r3, r6, #1
    cc38:	str	r3, [sp, #108]	; 0x6c
    cc3a:	ldrb	r3, [r6, #1]
    cc3c:	cmp	r3, #43	; 0x2b
    cc3e:	beq.w	d1fc <_strtod_l+0x844>
    cc42:	cmp	r3, #45	; 0x2d
    cc44:	beq.w	d072 <_strtod_l+0x6ba>
    cc48:	mov.w	ip, #0
    cc4c:	sub.w	r2, r3, #48	; 0x30
    cc50:	cmp	r2, #9
    cc52:	bhi.w	d1f6 <_strtod_l+0x83e>
    cc56:	cmp	r3, #48	; 0x30
    cc58:	bne.n	cc66 <_strtod_l+0x2ae>
    cc5a:	ldr	r2, [sp, #108]	; 0x6c
    cc5c:	adds	r2, #1
    cc5e:	str	r2, [sp, #108]	; 0x6c
    cc60:	ldrb	r3, [r2, #0]
    cc62:	cmp	r3, #48	; 0x30
    cc64:	beq.n	cc5c <_strtod_l+0x2a4>
    cc66:	sub.w	r2, r3, #49	; 0x31
    cc6a:	cmp	r2, #8
    cc6c:	bhi.w	cad0 <_strtod_l+0x118>
    cc70:	ldr	r2, [sp, #108]	; 0x6c
    cc72:	str	r2, [sp, #48]	; 0x30
    cc74:	adds	r1, r2, #1
    cc76:	subs	r3, #48	; 0x30
    cc78:	str	r1, [sp, #108]	; 0x6c
    cc7a:	str	r3, [sp, #44]	; 0x2c
    cc7c:	ldrb	r3, [r2, #1]
    cc7e:	sub.w	lr, r3, #48	; 0x30
    cc82:	cmp.w	lr, #9
    cc86:	bhi.n	cca8 <_strtod_l+0x2f0>
    cc88:	ldr	r2, [sp, #44]	; 0x2c
    cc8a:	adds	r1, #1
    cc8c:	str	r1, [sp, #108]	; 0x6c
    cc8e:	add.w	r2, r2, r2, lsl #2
    cc92:	add.w	r2, r3, r2, lsl #1
    cc96:	ldrb	r3, [r1, #0]
    cc98:	sub.w	lr, r3, #48	; 0x30
    cc9c:	cmp.w	lr, #9
    cca0:	sub.w	r2, r2, #48	; 0x30
    cca4:	bls.n	cc8a <_strtod_l+0x2d2>
    cca6:	str	r2, [sp, #44]	; 0x2c
    cca8:	ldr	r2, [sp, #48]	; 0x30
    ccaa:	subs	r1, r1, r2
    ccac:	cmp	r1, #8
    ccae:	bgt.w	d4ce <_strtod_l+0xb16>
    ccb2:	ldr	r2, [sp, #44]	; 0x2c
    ccb4:	movw	r1, #19999	; 0x4e1f
    ccb8:	cmp	r2, r1
    ccba:	it	ge
    ccbc:	movge	r2, r1
    ccbe:	cmp.w	ip, #0
    ccc2:	beq.w	cad2 <_strtod_l+0x11a>
    ccc6:	negs	r2, r2
    ccc8:	b.n	cad2 <_strtod_l+0x11a>
    ccca:	nop
    cccc:	.word	0x00013a98
    ccd0:	.word	0x000137a0
    ccd4:	.word	0x000137a4
    ccd8:	.word	0x7ff00000
    ccdc:	ldr	r3, [sp, #44]	; 0x2c
    ccde:	rsb	r9, r9, r4
    cce2:	add	r9, r3
    cce4:	cmp.w	r9, #0
    cce8:	ble.w	d3fa <_strtod_l+0xa42>
    ccec:	ands.w	r1, r9, #15
    ccf0:	beq.n	cd08 <_strtod_l+0x350>
    ccf2:	ldr	r3, [pc, #756]	; (cfe8 <_strtod_l+0x630>)
    ccf4:	add.w	r1, r3, r1, lsl #3
    ccf8:	ldrd	r0, r1, [r1]
    ccfc:	ldrd	r2, r3, [sp, #16]
    cd00:	bl	ac90 <__aeabi_dmul>
    cd04:	strd	r0, r1, [sp, #16]
    cd08:	bics.w	r6, r9, #15
    cd0c:	bne.w	d130 <_strtod_l+0x778>
    cd10:	movs	r3, #0
    cd12:	str	r3, [sp, #40]	; 0x28
    cd14:	str	r5, [sp, #0]
    cd16:	mov	r3, r4
    cd18:	mov	r2, sl
    cd1a:	ldr	r1, [sp, #32]
    cd1c:	mov	r0, fp
    cd1e:	bl	11bc0 <__s2b>
    cd22:	str	r0, [sp, #72]	; 0x48
    cd24:	cmp	r0, #0
    cd26:	beq.w	d376 <_strtod_l+0x9be>
    cd2a:	ldr	r2, [sp, #44]	; 0x2c
    cd2c:	movs	r7, #0
    cd2e:	cmp	r2, #0
    cd30:	rsb	r3, r2, #0
    cd34:	it	ge
    cd36:	movge	r3, r7
    cd38:	str	r3, [sp, #48]	; 0x30
    cd3a:	bic.w	r3, r2, r2, asr #31
    cd3e:	str	r3, [sp, #44]	; 0x2c
    cd40:	mov	sl, r7
    cd42:	ldr	r4, [sp, #72]	; 0x48
    cd44:	mov	r0, fp
    cd46:	ldr	r1, [r4, #4]
    cd48:	bl	11ae0 <_Balloc>
    cd4c:	mov	r6, r0
    cd4e:	cmp	r0, #0
    cd50:	beq.w	d208 <_strtod_l+0x850>
    cd54:	ldr	r2, [r4, #16]
    cd56:	vldr	d7, [sp, #16]
    cd5a:	adds	r2, #2
    cd5c:	lsls	r2, r2, #2
    cd5e:	add.w	r1, r4, #12
    cd62:	adds	r0, #12
    cd64:	vstr	d7, [sp, #32]
    cd68:	bl	81f4 <memcpy>
    cd6c:	vldr	d0, [sp, #32]
    cd70:	add	r2, sp, #120	; 0x78
    cd72:	add	r1, sp, #116	; 0x74
    cd74:	mov	r0, fp
    cd76:	bl	12204 <__d2b>
    cd7a:	str	r0, [sp, #112]	; 0x70
    cd7c:	cmp	r0, #0
    cd7e:	beq.w	d20a <_strtod_l+0x852>
    cd82:	movs	r1, #1
    cd84:	mov	r0, fp
    cd86:	bl	11cf4 <__i2b>
    cd8a:	mov	sl, r0
    cd8c:	cmp	r0, #0
    cd8e:	beq.w	d208 <_strtod_l+0x850>
    cd92:	ldr	r2, [sp, #116]	; 0x74
    cd94:	cmp	r2, #0
    cd96:	blt.w	d000 <_strtod_l+0x648>
    cd9a:	ldr	r3, [sp, #48]	; 0x30
    cd9c:	ldr	r4, [sp, #44]	; 0x2c
    cd9e:	adds	r5, r3, r2
    cda0:	ldr	r0, [sp, #40]	; 0x28
    cda2:	ldr	r3, [sp, #120]	; 0x78
    cda4:	ldr	r1, [pc, #580]	; (cfec <_strtod_l+0x634>)
    cda6:	subs	r2, r2, r0
    cda8:	add	r2, r3
    cdaa:	subs	r2, #1
    cdac:	cmp	r2, r1
    cdae:	rsb	r3, r3, #54	; 0x36
    cdb2:	bge.w	cf92 <_strtod_l+0x5da>
    cdb6:	subs	r1, r1, r2
    cdb8:	cmp	r1, #31
    cdba:	sub.w	r3, r3, r1
    cdbe:	bgt.w	d00e <_strtod_l+0x656>
    cdc2:	movs	r2, #1
    cdc4:	lsls	r2, r1
    cdc6:	str	r2, [sp, #56]	; 0x38
    cdc8:	movs	r2, #0
    cdca:	str	r2, [sp, #76]	; 0x4c
    cdcc:	add.w	r9, r5, r3
    cdd0:	add	r4, r3
    cdd2:	ldr	r3, [sp, #40]	; 0x28
    cdd4:	cmp	r5, r9
    cdd6:	mov	r2, r5
    cdd8:	add	r4, r3
    cdda:	it	ge
    cddc:	movge	r2, r9
    cdde:	cmp	r2, r4
    cde0:	it	ge
    cde2:	movge	r2, r4
    cde4:	cmp	r2, #0
    cde6:	ble.n	cdf0 <_strtod_l+0x438>
    cde8:	rsb	r9, r2, r9
    cdec:	subs	r4, r4, r2
    cdee:	subs	r5, r5, r2
    cdf0:	ldr	r3, [sp, #48]	; 0x30
    cdf2:	cbz	r3, ce24 <_strtod_l+0x46c>
    cdf4:	mov	r1, sl
    cdf6:	mov	r2, r3
    cdf8:	mov	r0, fp
    cdfa:	bl	11e38 <__pow5mult>
    cdfe:	mov	sl, r0
    ce00:	cmp	r0, #0
    ce02:	beq.w	d208 <_strtod_l+0x850>
    ce06:	mov	r1, r0
    ce08:	ldr	r2, [sp, #112]	; 0x70
    ce0a:	mov	r0, fp
    ce0c:	bl	11d08 <__multiply>
    ce10:	cmp	r0, #0
    ce12:	beq.w	d208 <_strtod_l+0x850>
    ce16:	str	r0, [sp, #52]	; 0x34
    ce18:	ldr	r1, [sp, #112]	; 0x70
    ce1a:	mov	r0, fp
    ce1c:	bl	11b2c <_Bfree>
    ce20:	ldr	r2, [sp, #52]	; 0x34
    ce22:	str	r2, [sp, #112]	; 0x70
    ce24:	cmp.w	r9, #0
    ce28:	ble.n	ce3c <_strtod_l+0x484>
    ce2a:	mov	r2, r9
    ce2c:	ldr	r1, [sp, #112]	; 0x70
    ce2e:	mov	r0, fp
    ce30:	bl	11ed8 <__lshift>
    ce34:	str	r0, [sp, #112]	; 0x70
    ce36:	cmp	r0, #0
    ce38:	beq.w	d20a <_strtod_l+0x852>
    ce3c:	ldr	r3, [sp, #44]	; 0x2c
    ce3e:	cbz	r3, ce52 <_strtod_l+0x49a>
    ce40:	mov	r1, r6
    ce42:	ldr	r2, [sp, #44]	; 0x2c
    ce44:	mov	r0, fp
    ce46:	bl	11e38 <__pow5mult>
    ce4a:	mov	r6, r0
    ce4c:	cmp	r0, #0
    ce4e:	beq.w	d208 <_strtod_l+0x850>
    ce52:	cmp	r4, #0
    ce54:	ble.n	ce68 <_strtod_l+0x4b0>
    ce56:	mov	r1, r6
    ce58:	mov	r2, r4
    ce5a:	mov	r0, fp
    ce5c:	bl	11ed8 <__lshift>
    ce60:	mov	r6, r0
    ce62:	cmp	r0, #0
    ce64:	beq.w	d208 <_strtod_l+0x850>
    ce68:	cmp	r5, #0
    ce6a:	ble.n	ce7e <_strtod_l+0x4c6>
    ce6c:	mov	r1, sl
    ce6e:	mov	r2, r5
    ce70:	mov	r0, fp
    ce72:	bl	11ed8 <__lshift>
    ce76:	mov	sl, r0
    ce78:	cmp	r0, #0
    ce7a:	beq.w	d208 <_strtod_l+0x850>
    ce7e:	mov	r2, r6
    ce80:	ldr	r1, [sp, #112]	; 0x70
    ce82:	mov	r0, fp
    ce84:	bl	11fcc <__mdiff>
    ce88:	mov	r7, r0
    ce8a:	cmp	r0, #0
    ce8c:	beq.w	d208 <_strtod_l+0x850>
    ce90:	movs	r3, #0
    ce92:	ldr	r2, [r0, #12]
    ce94:	str	r3, [r0, #12]
    ce96:	mov	r1, sl
    ce98:	str	r2, [sp, #52]	; 0x34
    ce9a:	bl	11f88 <__mcmp>
    ce9e:	cmp	r0, #0
    cea0:	blt.w	d6be <_strtod_l+0xd06>
    cea4:	beq.w	d638 <_strtod_l+0xc80>
    cea8:	mov	r1, sl
    ceaa:	mov	r0, r7
    ceac:	bl	122c0 <__ratio>
    ceb0:	vmov	r4, r5, d0
    ceb4:	movs	r2, #0
    ceb6:	mov.w	r3, #1073741824	; 0x40000000
    ceba:	vmov	r0, s0
    cebe:	mov	r1, r5
    cec0:	bl	b188 <__aeabi_dcmple>
    cec4:	cmp	r0, #0
    cec6:	beq.n	cf9c <_strtod_l+0x5e4>
    cec8:	ldr	r3, [sp, #52]	; 0x34
    ceca:	cmp	r3, #0
    cecc:	beq.w	d01e <_strtod_l+0x666>
    ced0:	vldr	d7, [pc, #260]	; cfd8 <_strtod_l+0x620>
    ced4:	ldr	r3, [sp, #20]
    ced6:	ldr	r5, [pc, #280]	; (cff0 <_strtod_l+0x638>)
    ced8:	vstr	d7, [sp, #56]	; 0x38
    cedc:	movs	r4, #0
    cede:	mov	r8, r3
    cee0:	ldr.w	r9, [pc, #276]	; cff8 <_strtod_l+0x640>
    cee4:	ldr	r3, [pc, #268]	; (cff4 <_strtod_l+0x63c>)
    cee6:	and.w	r9, r8, r9
    ceea:	cmp	r9, r3
    ceec:	beq.w	d31c <_strtod_l+0x964>
    cef0:	ldr	r3, [sp, #40]	; 0x28
    cef2:	cbz	r3, cf40 <_strtod_l+0x588>
    cef4:	cmp.w	r9, #111149056	; 0x6a00000
    cef8:	bhi.n	cf40 <_strtod_l+0x588>
    cefa:	add	r3, pc, #228	; (adr r3, cfe0 <_strtod_l+0x628>)
    cefc:	ldrd	r2, r3, [r3]
    cf00:	ldrd	r0, r1, [sp, #56]	; 0x38
    cf04:	bl	b188 <__aeabi_dcmple>
    cf08:	cbz	r0, cf38 <_strtod_l+0x580>
    cf0a:	ldrd	r0, r1, [sp, #56]	; 0x38
    cf0e:	bl	b240 <__aeabi_d2uiz>
    cf12:	cmp	r0, #0
    cf14:	beq.w	d598 <_strtod_l+0xbe0>
    cf18:	bl	aba4 <__aeabi_ui2d>
    cf1c:	strd	r0, r1, [sp, #56]	; 0x38
    cf20:	ldr	r3, [sp, #52]	; 0x34
    cf22:	cmp	r3, #0
    cf24:	bne.w	d58e <_strtod_l+0xbd6>
    cf28:	ldrd	r1, r2, [sp, #56]	; 0x38
    cf2c:	add.w	r3, r2, #2147483648	; 0x80000000
    cf30:	str	r1, [sp, #80]	; 0x50
    cf32:	str	r3, [sp, #84]	; 0x54
    cf34:	ldrd	r4, r5, [sp, #80]	; 0x50
    cf38:	add.w	r3, r5, #112197632	; 0x6b00000
    cf3c:	rsb	r5, r9, r3
    cf40:	vldr	d0, [sp, #32]
    cf44:	bl	120e0 <__ulp>
    cf48:	mov	r0, r4
    cf4a:	vmov	r2, r3, d0
    cf4e:	mov	r1, r5
    cf50:	bl	ac90 <__aeabi_dmul>
    cf54:	ldrd	r2, r3, [sp, #32]
    cf58:	bl	a92c <__adddf3>
    cf5c:	strd	r0, r1, [sp, #16]
    cf60:	mov	r4, r1
    cf62:	ldr	r3, [sp, #40]	; 0x28
    cf64:	cbnz	r3, cf70 <_strtod_l+0x5b8>
    cf66:	ldr	r3, [pc, #144]	; (cff8 <_strtod_l+0x640>)
    cf68:	ands	r3, r4
    cf6a:	cmp	r9, r3
    cf6c:	beq.w	d38c <_strtod_l+0x9d4>
    cf70:	ldr	r1, [sp, #112]	; 0x70
    cf72:	mov	r0, fp
    cf74:	bl	11b2c <_Bfree>
    cf78:	mov	r1, r6
    cf7a:	mov	r0, fp
    cf7c:	bl	11b2c <_Bfree>
    cf80:	mov	r1, sl
    cf82:	mov	r0, fp
    cf84:	bl	11b2c <_Bfree>
    cf88:	mov	r1, r7
    cf8a:	mov	r0, fp
    cf8c:	bl	11b2c <_Bfree>
    cf90:	b.n	cd42 <_strtod_l+0x38a>
    cf92:	movs	r2, #0
    cf94:	str	r2, [sp, #76]	; 0x4c
    cf96:	movs	r2, #1
    cf98:	str	r2, [sp, #56]	; 0x38
    cf9a:	b.n	cdcc <_strtod_l+0x414>
    cf9c:	ldr	r3, [pc, #92]	; (cffc <_strtod_l+0x644>)
    cf9e:	mov	r0, r4
    cfa0:	mov	r1, r5
    cfa2:	movs	r2, #0
    cfa4:	bl	ac90 <__aeabi_dmul>
    cfa8:	ldr	r3, [sp, #52]	; 0x34
    cfaa:	strd	r0, r1, [sp, #56]	; 0x38
    cfae:	cmp	r3, #0
    cfb0:	bne.n	d068 <_strtod_l+0x6b0>
    cfb2:	add.w	r3, r1, #2147483648	; 0x80000000
    cfb6:	str	r0, [sp, #64]	; 0x40
    cfb8:	str	r3, [sp, #68]	; 0x44
    cfba:	ldr	r3, [sp, #20]
    cfbc:	ldrd	r4, r5, [sp, #64]	; 0x40
    cfc0:	mov	r8, r3
    cfc2:	b.n	cee0 <_strtod_l+0x528>
    cfc4:	mov.w	r9, #1
    cfc8:	cmp	r0, #0
    cfca:	bne.n	d07e <_strtod_l+0x6c6>
    cfcc:	ldr	r3, [sp, #40]	; 0x28
    cfce:	cmp	r3, #0
    cfd0:	beq.w	ca24 <_strtod_l+0x6c>
    cfd4:	mov	r4, r0
    cfd6:	b.n	cc34 <_strtod_l+0x27c>
    cfd8:	.word	0x00000000
    cfdc:	.word	0x3ff00000
    cfe0:	.word	0xffc00000
    cfe4:	.word	0x41dfffff
    cfe8:	.word	0x00013a98
    cfec:	.word	0xfffffc02
    cff0:	.word	0x3ff00000
    cff4:	.word	0x7fe00000
    cff8:	.word	0x7ff00000
    cffc:	.word	0x3fe00000
    d000:	ldr	r3, [sp, #44]	; 0x2c
    d002:	ldr	r5, [sp, #48]	; 0x30
    d004:	subs	r4, r3, r2
    d006:	b.n	cda0 <_strtod_l+0x3e8>
    d008:	mov.w	r9, #1
    d00c:	b.n	cac4 <_strtod_l+0x10c>
    d00e:	ldr	r1, [pc, #736]	; (d2f0 <_strtod_l+0x938>)
    d010:	subs	r1, r1, r2
    d012:	movs	r2, #1
    d014:	lsl.w	r1, r2, r1
    d018:	str	r1, [sp, #76]	; 0x4c
    d01a:	str	r2, [sp, #56]	; 0x38
    d01c:	b.n	cdcc <_strtod_l+0x414>
    d01e:	ldrd	r1, r2, [sp, #16]
    d022:	cmp	r1, #0
    d024:	bne.w	d1ba <_strtod_l+0x802>
    d028:	ubfx	r3, r2, #0, #20
    d02c:	mov	r8, r2
    d02e:	cmp	r3, #0
    d030:	bne.w	d1c6 <_strtod_l+0x80e>
    d034:	movs	r2, #0
    d036:	ldr	r3, [pc, #700]	; (d2f4 <_strtod_l+0x93c>)
    d038:	mov	r0, r4
    d03a:	mov	r1, r5
    d03c:	bl	b174 <__aeabi_dcmplt>
    d040:	cmp	r0, #0
    d042:	bne.w	d742 <_strtod_l+0xd8a>
    d046:	movs	r2, #0
    d048:	ldr	r3, [pc, #684]	; (d2f8 <_strtod_l+0x940>)
    d04a:	mov	r0, r4
    d04c:	mov	r1, r5
    d04e:	bl	ac90 <__aeabi_dmul>
    d052:	mov	r2, r1
    d054:	mov	r1, r0
    d056:	strd	r1, r2, [sp, #56]	; 0x38
    d05a:	add.w	r3, r2, #2147483648	; 0x80000000
    d05e:	str	r0, [sp, #96]	; 0x60
    d060:	str	r3, [sp, #100]	; 0x64
    d062:	ldrd	r4, r5, [sp, #96]	; 0x60
    d066:	b.n	cee0 <_strtod_l+0x528>
    d068:	vldr	d7, [sp, #56]	; 0x38
    d06c:	vstr	d7, [sp, #64]	; 0x40
    d070:	b.n	cfba <_strtod_l+0x602>
    d072:	mov.w	ip, #1
    d076:	adds	r3, r6, #2
    d078:	str	r3, [sp, #108]	; 0x6c
    d07a:	ldrb	r3, [r6, #2]
    d07c:	b.n	cc4c <_strtod_l+0x294>
    d07e:	movs	r4, #0
    d080:	b.n	cc34 <_strtod_l+0x27c>
    d082:	cmp.w	r9, #0
    d086:	bne.w	ca24 <_strtod_l+0x6c>
    d08a:	subs	r3, #73	; 0x49
    d08c:	cmp	r3, #37	; 0x25
    d08e:	bhi.w	ca24 <_strtod_l+0x6c>
    d092:	add	r2, pc, #4	; (adr r2, d098 <_strtod_l+0x6e0>)
    d094:	ldr.w	pc, [r2, r3, lsl #2]
    d098:	.word	0x0000cbfd
    d09c:	.word	0x0000ca25
    d0a0:	.word	0x0000ca25
    d0a4:	.word	0x0000ca25
    d0a8:	.word	0x0000ca25
    d0ac:	.word	0x0000d1d5
    d0b0:	.word	0x0000ca25
    d0b4:	.word	0x0000ca25
    d0b8:	.word	0x0000ca25
    d0bc:	.word	0x0000ca25
    d0c0:	.word	0x0000ca25
    d0c4:	.word	0x0000ca25
    d0c8:	.word	0x0000ca25
    d0cc:	.word	0x0000ca25
    d0d0:	.word	0x0000ca25
    d0d4:	.word	0x0000ca25
    d0d8:	.word	0x0000ca25
    d0dc:	.word	0x0000ca25
    d0e0:	.word	0x0000ca25
    d0e4:	.word	0x0000ca25
    d0e8:	.word	0x0000ca25
    d0ec:	.word	0x0000ca25
    d0f0:	.word	0x0000ca25
    d0f4:	.word	0x0000ca25
    d0f8:	.word	0x0000ca25
    d0fc:	.word	0x0000ca25
    d100:	.word	0x0000ca25
    d104:	.word	0x0000ca25
    d108:	.word	0x0000ca25
    d10c:	.word	0x0000ca25
    d110:	.word	0x0000ca25
    d114:	.word	0x0000ca25
    d118:	.word	0x0000cbfd
    d11c:	.word	0x0000ca25
    d120:	.word	0x0000ca25
    d124:	.word	0x0000ca25
    d128:	.word	0x0000ca25
    d12c:	.word	0x0000d1d5
    d130:	cmp.w	r6, #308	; 0x134
    d134:	bgt.w	d376 <_strtod_l+0x9be>
    d138:	asrs	r6, r6, #4
    d13a:	cmp	r6, #1
    d13c:	ldr.w	r9, [pc, #472]	; d318 <_strtod_l+0x960>
    d140:	ble.w	d776 <_strtod_l+0xdbe>
    d144:	ldrd	r0, r1, [sp, #16]
    d148:	movs	r3, #0
    d14a:	mov	r7, r9
    d14c:	mov	r8, r3
    d14e:	tst.w	r6, #1
    d152:	add.w	r8, r8, #1
    d156:	mov.w	r6, r6, asr #1
    d15a:	beq.n	d166 <_strtod_l+0x7ae>
    d15c:	ldrd	r2, r3, [r7]
    d160:	bl	ac90 <__aeabi_dmul>
    d164:	movs	r3, #1
    d166:	cmp	r6, #1
    d168:	add.w	r7, r7, #8
    d16c:	bne.n	d14e <_strtod_l+0x796>
    d16e:	cmp	r3, #0
    d170:	bne.w	d83a <_strtod_l+0xe82>
    d174:	ldr	r3, [sp, #20]
    d176:	sub.w	r3, r3, #55574528	; 0x3500000
    d17a:	str	r3, [sp, #20]
    d17c:	add.w	r8, r9, r8, lsl #3
    d180:	ldrd	r2, r3, [sp, #16]
    d184:	ldrd	r0, r1, [r8]
    d188:	bl	ac90 <__aeabi_dmul>
    d18c:	bic.w	r3, r1, #2147483648	; 0x80000000
    d190:	lsrs	r3, r3, #20
    d192:	ldr	r2, [pc, #360]	; (d2fc <_strtod_l+0x944>)
    d194:	lsls	r3, r3, #20
    d196:	cmp	r3, r2
    d198:	strd	r0, r1, [sp, #16]
    d19c:	bhi.w	d376 <_strtod_l+0x9be>
    d1a0:	sub.w	r2, r2, #1048576	; 0x100000
    d1a4:	cmp	r3, r2
    d1a6:	bls.w	d738 <_strtod_l+0xd80>
    d1aa:	ldr	r3, [pc, #340]	; (d300 <_strtod_l+0x948>)
    d1ac:	str	r3, [sp, #20]
    d1ae:	movs	r3, #0
    d1b0:	str	r3, [sp, #40]	; 0x28
    d1b2:	mov.w	r3, #4294967295
    d1b6:	str	r3, [sp, #16]
    d1b8:	b.n	cd14 <_strtod_l+0x35c>
    d1ba:	ldrd	r1, r2, [sp, #16]
    d1be:	cmp	r1, #1
    d1c0:	beq.w	d5a2 <_strtod_l+0xbea>
    d1c4:	mov	r8, r2
    d1c6:	vldr	d7, [pc, #288]	; d2e8 <_strtod_l+0x930>
    d1ca:	movs	r4, #0
    d1cc:	ldr	r5, [pc, #308]	; (d304 <_strtod_l+0x94c>)
    d1ce:	vstr	d7, [sp, #56]	; 0x38
    d1d2:	b.n	cee0 <_strtod_l+0x528>
    d1d4:	add	r0, sp, #108	; 0x6c
    d1d6:	ldr	r1, [pc, #304]	; (d308 <_strtod_l+0x950>)
    d1d8:	bl	11898 <__match>
    d1dc:	cmp	r0, #0
    d1de:	beq.w	ca24 <_strtod_l+0x6c>
    d1e2:	ldr	r3, [sp, #108]	; 0x6c
    d1e4:	ldrb	r3, [r3, #0]
    d1e6:	cmp	r3, #40	; 0x28
    d1e8:	beq.w	d7f0 <_strtod_l+0xe38>
    d1ec:	ldr	r3, [pc, #284]	; (d30c <_strtod_l+0x954>)
    d1ee:	str	r3, [sp, #20]
    d1f0:	movs	r3, #0
    d1f2:	str	r3, [sp, #16]
    d1f4:	b.n	cc28 <_strtod_l+0x270>
    d1f6:	str	r6, [sp, #108]	; 0x6c
    d1f8:	movs	r2, #0
    d1fa:	b.n	cad2 <_strtod_l+0x11a>
    d1fc:	mov.w	ip, #0
    d200:	b.n	d076 <_strtod_l+0x6be>
    d202:	adds	r3, #1
    d204:	bne.w	d7d6 <_strtod_l+0xe1e>
    d208:	ldr	r0, [sp, #112]	; 0x70
    d20a:	ldr	r3, [pc, #260]	; (d310 <_strtod_l+0x958>)
    d20c:	str	r3, [sp, #20]
    d20e:	movs	r2, #0
    d210:	str	r2, [sp, #16]
    d212:	ldrd	r8, r9, [sp, #16]
    d216:	movs	r3, #34	; 0x22
    d218:	str.w	r3, [fp]
    d21c:	mov	r1, r0
    d21e:	mov	r0, fp
    d220:	bl	11b2c <_Bfree>
    d224:	mov	r1, r6
    d226:	mov	r0, fp
    d228:	bl	11b2c <_Bfree>
    d22c:	mov	r1, sl
    d22e:	mov	r0, fp
    d230:	bl	11b2c <_Bfree>
    d234:	ldr	r1, [sp, #72]	; 0x48
    d236:	mov	r0, fp
    d238:	bl	11b2c <_Bfree>
    d23c:	mov	r1, r7
    d23e:	mov	r0, fp
    d240:	bl	11b2c <_Bfree>
    d244:	b.n	cae8 <_strtod_l+0x130>
    d246:	ldr	r2, [sp, #28]
    d248:	str	r5, [sp, #8]
    d24a:	add	r3, sp, #112	; 0x70
    d24c:	str	r2, [sp, #4]
    d24e:	str	r3, [sp, #0]
    d250:	ldr	r2, [pc, #192]	; (d314 <_strtod_l+0x95c>)
    d252:	add	r3, sp, #116	; 0x74
    d254:	add	r1, sp, #108	; 0x6c
    d256:	mov	r0, fp
    d258:	bl	11388 <__gethex>
    d25c:	ands.w	r6, r0, #7
    d260:	mov	r5, r0
    d262:	beq.w	cae0 <_strtod_l+0x128>
    d266:	cmp	r6, #6
    d268:	bne.w	d518 <_strtod_l+0xb60>
    d26c:	adds	r4, #1
    d26e:	movs	r3, #0
    d270:	str	r4, [sp, #108]	; 0x6c
    d272:	mov.w	r8, #0
    d276:	mov.w	r9, #0
    d27a:	str	r3, [sp, #28]
    d27c:	b.n	cae8 <_strtod_l+0x130>
    d27e:	ldr.w	r1, [sl]
    d282:	mov	r0, r4
    d284:	mov	r2, r9
    d286:	bl	c8dc <strncmp>
    d28a:	cbz	r0, d2a0 <_strtod_l+0x8e8>
    d28c:	mov.w	sl, #0
    d290:	mov	r3, r7
    d292:	mov	r8, sl
    d294:	mov	r5, sl
    d296:	mov	r0, sl
    d298:	mov	r7, sl
    d29a:	mov	r4, sl
    d29c:	mov	r9, sl
    d29e:	b.n	cac4 <_strtod_l+0x10c>
    d2a0:	ldr	r3, [sp, #108]	; 0x6c
    d2a2:	add.w	r2, r3, r9
    d2a6:	str	r2, [sp, #108]	; 0x6c
    d2a8:	ldrb.w	r3, [r3, r9]
    d2ac:	cmp	r3, #48	; 0x30
    d2ae:	bne.n	d2be <_strtod_l+0x906>
    d2b0:	adds	r2, #1
    d2b2:	str	r2, [sp, #108]	; 0x6c
    d2b4:	ldrb	r3, [r2, #0]
    d2b6:	cmp	r3, #48	; 0x30
    d2b8:	add.w	r0, r0, #1
    d2bc:	beq.n	d2b0 <_strtod_l+0x8f8>
    d2be:	sub.w	r2, r3, #49	; 0x31
    d2c2:	cmp	r2, #8
    d2c4:	bls.w	d5c0 <_strtod_l+0xc08>
    d2c8:	mov.w	sl, #0
    d2cc:	cmp	r3, #101	; 0x65
    d2ce:	mov	r8, sl
    d2d0:	mov	r5, sl
    d2d2:	mov	r7, sl
    d2d4:	beq.w	cfc4 <_strtod_l+0x60c>
    d2d8:	mov	r4, sl
    d2da:	mov.w	r9, #1
    d2de:	b.w	caca <_strtod_l+0x112>
    d2e2:	nop
    d2e4:	nop.w
    d2e8:	.word	0x00000000
    d2ec:	.word	0x3ff00000
    d2f0:	.word	0xfffffbe2
    d2f4:	.word	0x3ff00000
    d2f8:	.word	0x3fe00000
    d2fc:	.word	0x7ca00000
    d300:	.word	0x7fefffff
    d304:	.word	0xbff00000
    d308:	.word	0x000137ac
    d30c:	.word	0xfff80000
    d310:	.word	0x7ff00000
    d314:	.word	0x0001378c
    d318:	.word	0x00013b60
    d31c:	sub.w	r3, r8, #55574528	; 0x3500000
    d320:	str	r3, [sp, #20]
    d322:	vldr	d7, [sp, #16]
    d326:	vmov.f32	s0, s14
    d32a:	vmov.f32	s1, s15
    d32e:	bl	120e0 <__ulp>
    d332:	mov	r0, r4
    d334:	vmov	r2, r3, d0
    d338:	mov	r1, r5
    d33a:	bl	ac90 <__aeabi_dmul>
    d33e:	ldrd	r2, r3, [sp, #16]
    d342:	bl	a92c <__adddf3>
    d346:	bic.w	r3, r1, #2147483648	; 0x80000000
    d34a:	strd	r0, r1, [sp, #16]
    d34e:	lsrs	r3, r3, #20
    d350:	ldr	r2, [pc, #684]	; (d600 <_strtod_l+0xc48>)
    d352:	ldrd	r0, r1, [sp, #32]
    d356:	lsls	r3, r3, #20
    d358:	cmp	r3, r2
    d35a:	strd	r0, r1, [sp, #88]	; 0x58
    d35e:	bls.w	d4d6 <_strtod_l+0xb1e>
    d362:	ldr	r3, [pc, #672]	; (d604 <_strtod_l+0xc4c>)
    d364:	cmp	r1, r3
    d366:	beq.w	d72e <_strtod_l+0xd76>
    d36a:	ldr	r3, [pc, #664]	; (d604 <_strtod_l+0xc4c>)
    d36c:	str	r3, [sp, #20]
    d36e:	mov.w	r3, #4294967295
    d372:	str	r3, [sp, #16]
    d374:	b.n	cf70 <_strtod_l+0x5b8>
    d376:	ldr	r3, [pc, #656]	; (d608 <_strtod_l+0xc50>)
    d378:	str	r3, [sp, #20]
    d37a:	movs	r2, #0
    d37c:	movs	r3, #34	; 0x22
    d37e:	str	r2, [sp, #16]
    d380:	ldrd	r8, r9, [sp, #16]
    d384:	str.w	r3, [fp]
    d388:	b.w	cae8 <_strtod_l+0x130>
    d38c:	ldrd	r8, r9, [sp, #56]	; 0x38
    d390:	mov	r1, r9
    d392:	mov	r0, r8
    d394:	bl	b1f0 <__aeabi_d2iz>
    d398:	bl	abc4 <__aeabi_i2d>
    d39c:	mov	r3, r1
    d39e:	mov	r2, r0
    d3a0:	mov	r1, r9
    d3a2:	mov	r0, r8
    d3a4:	bl	a928 <__aeabi_dsub>
    d3a8:	ldr	r3, [sp, #52]	; 0x34
    d3aa:	mov	r8, r0
    d3ac:	mov	r9, r1
    d3ae:	cbnz	r3, d3d2 <_strtod_l+0xa1a>
    d3b0:	ldr	r3, [sp, #16]
    d3b2:	cbnz	r3, d3d2 <_strtod_l+0xa1a>
    d3b4:	ubfx	r4, r4, #0, #20
    d3b8:	cbnz	r4, d3d2 <_strtod_l+0xa1a>
    d3ba:	add	r3, pc, #548	; (adr r3, d5e0 <_strtod_l+0xc28>)
    d3bc:	ldrd	r2, r3, [r3]
    d3c0:	bl	b174 <__aeabi_dcmplt>
    d3c4:	cmp	r0, #0
    d3c6:	beq.w	cf70 <_strtod_l+0x5b8>
    d3ca:	ldrd	r8, r9, [sp, #16]
    d3ce:	ldr	r0, [sp, #112]	; 0x70
    d3d0:	b.n	d21c <_strtod_l+0x864>
    d3d2:	add	r3, pc, #532	; (adr r3, d5e8 <_strtod_l+0xc30>)
    d3d4:	ldrd	r2, r3, [r3]
    d3d8:	mov	r0, r8
    d3da:	mov	r1, r9
    d3dc:	bl	b174 <__aeabi_dcmplt>
    d3e0:	cmp	r0, #0
    d3e2:	bne.n	d3ca <_strtod_l+0xa12>
    d3e4:	mov	r0, r8
    d3e6:	mov	r1, r9
    d3e8:	add	r3, pc, #516	; (adr r3, d5f0 <_strtod_l+0xc38>)
    d3ea:	ldrd	r2, r3, [r3]
    d3ee:	bl	b1b0 <__aeabi_dcmpgt>
    d3f2:	cmp	r0, #0
    d3f4:	beq.w	cf70 <_strtod_l+0x5b8>
    d3f8:	b.n	d3ca <_strtod_l+0xa12>
    d3fa:	beq.w	cd10 <_strtod_l+0x358>
    d3fe:	rsb	r6, r9, #0
    d402:	ands.w	r2, r6, #15
    d406:	beq.n	d41e <_strtod_l+0xa66>
    d408:	ldr	r3, [pc, #512]	; (d60c <_strtod_l+0xc54>)
    d40a:	add.w	r3, r3, r2, lsl #3
    d40e:	ldrd	r0, r1, [sp, #16]
    d412:	ldrd	r2, r3, [r3]
    d416:	bl	aee4 <__aeabi_ddiv>
    d41a:	strd	r0, r1, [sp, #16]
    d41e:	asrs	r6, r6, #4
    d420:	beq.w	cd10 <_strtod_l+0x358>
    d424:	cmp	r6, #31
    d426:	bgt.n	d49a <_strtod_l+0xae2>
    d428:	ands.w	r3, r6, #16
    d42c:	beq.w	d7a0 <_strtod_l+0xde8>
    d430:	movs	r3, #106	; 0x6a
    d432:	cmp	r6, #0
    d434:	str	r3, [sp, #40]	; 0x28
    d436:	ble.n	d460 <_strtod_l+0xaa8>
    d438:	ldrd	r0, r1, [sp, #16]
    d43c:	ldr	r7, [pc, #464]	; (d610 <_strtod_l+0xc58>)
    d43e:	movs	r3, #0
    d440:	lsls	r2, r6, #31
    d442:	bpl.n	d44e <_strtod_l+0xa96>
    d444:	ldrd	r2, r3, [r7]
    d448:	bl	ac90 <__aeabi_dmul>
    d44c:	movs	r3, #1
    d44e:	asrs	r6, r6, #1
    d450:	add.w	r7, r7, #8
    d454:	bne.n	d440 <_strtod_l+0xa88>
    d456:	cmp	r3, #0
    d458:	bne.w	d840 <_strtod_l+0xe88>
    d45c:	ldr	r3, [sp, #40]	; 0x28
    d45e:	cbz	r3, d488 <_strtod_l+0xad0>
    d460:	ldrd	r1, r2, [sp, #16]
    d464:	ubfx	r3, r2, #20, #11
    d468:	rsb	r3, r3, #107	; 0x6b
    d46c:	cmp	r3, #0
    d46e:	mov	r1, r2
    d470:	ble.n	d488 <_strtod_l+0xad0>
    d472:	cmp	r3, #31
    d474:	ble.w	d82a <_strtod_l+0xe72>
    d478:	movs	r2, #0
    d47a:	cmp	r3, #52	; 0x34
    d47c:	str	r2, [sp, #16]
    d47e:	ble.w	d846 <_strtod_l+0xe8e>
    d482:	mov.w	r3, #57671680	; 0x3700000
    d486:	str	r3, [sp, #20]
    d488:	movs	r2, #0
    d48a:	movs	r3, #0
    d48c:	ldrd	r0, r1, [sp, #16]
    d490:	bl	b160 <__aeabi_dcmpeq>
    d494:	cmp	r0, #0
    d496:	beq.w	cd14 <_strtod_l+0x35c>
    d49a:	movs	r3, #34	; 0x22
    d49c:	str.w	r3, [fp]
    d4a0:	mov.w	r8, #0
    d4a4:	mov.w	r9, #0
    d4a8:	b.w	cae8 <_strtod_l+0x130>
    d4ac:	ldr	r1, [sp, #108]	; 0x6c
    d4ae:	adds	r4, #1
    d4b0:	cmp	r0, #8
    d4b2:	ble.w	d5d2 <_strtod_l+0xc1a>
    d4b6:	cmp	r4, #16
    d4b8:	itt	le
    d4ba:	addle.w	r8, r8, r8, lsl #2
    d4be:	addle.w	r8, r2, r8, lsl #1
    d4c2:	movs	r0, #0
    d4c4:	adds	r3, r1, #1
    d4c6:	str	r3, [sp, #108]	; 0x6c
    d4c8:	ldrb	r3, [r1, #1]
    d4ca:	b.w	cb0c <_strtod_l+0x154>
    d4ce:	movw	r2, #19999	; 0x4e1f
    d4d2:	b.w	ccbe <_strtod_l+0x306>
    d4d6:	ldr	r3, [sp, #20]
    d4d8:	add.w	r4, r3, #55574528	; 0x3500000
    d4dc:	str	r4, [sp, #20]
    d4de:	b.n	cf62 <_strtod_l+0x5aa>
    d4e0:	ldr	r6, [sp, #44]	; 0x2c
    d4e2:	rsb	r3, r4, #37	; 0x25
    d4e6:	cmp	r6, r3
    d4e8:	bgt.w	ccdc <_strtod_l+0x324>
    d4ec:	ldr	r5, [pc, #284]	; (d60c <_strtod_l+0xc54>)
    d4ee:	rsb	r4, r4, #15
    d4f2:	add.w	r1, r5, r4, lsl #3
    d4f6:	subs	r4, r6, r4
    d4f8:	ldrd	r2, r3, [sp, #16]
    d4fc:	ldrd	r0, r1, [r1]
    d500:	add.w	r5, r5, r4, lsl #3
    d504:	bl	ac90 <__aeabi_dmul>
    d508:	ldrd	r2, r3, [r5]
    d50c:	bl	ac90 <__aeabi_dmul>
    d510:	mov	r8, r0
    d512:	mov	r9, r1
    d514:	b.w	cae8 <_strtod_l+0x130>
    d518:	ldr	r2, [sp, #112]	; 0x70
    d51a:	cbz	r2, d52c <_strtod_l+0xb74>
    d51c:	movs	r1, #53	; 0x35
    d51e:	add	r0, sp, #120	; 0x78
    d520:	bl	12320 <__copybits>
    d524:	mov	r0, fp
    d526:	ldr	r1, [sp, #112]	; 0x70
    d528:	bl	11b2c <_Bfree>
    d52c:	cmp	r6, #6
    d52e:	bhi.n	d548 <_strtod_l+0xb90>
    d530:	tbb	[pc, r6]
    d534:	.word	0x1318211d
    d538:	.short	0x2104
    d53a:	.byte	0x1d
    d53b:	.byte	0x00
    d53c:	mvn.w	r3, #2147483648	; 0x80000000
    d540:	str	r3, [sp, #20]
    d542:	mov.w	r3, #4294967295
    d546:	str	r3, [sp, #16]
    d548:	lsls	r1, r5, #28
    d54a:	bpl.w	cc28 <_strtod_l+0x270>
    d54e:	ldr	r3, [sp, #20]
    d550:	orr.w	r3, r3, #2147483648	; 0x80000000
    d554:	str	r3, [sp, #20]
    d556:	b.w	cc28 <_strtod_l+0x270>
    d55a:	ldr	r3, [pc, #172]	; (d608 <_strtod_l+0xc50>)
    d55c:	str	r3, [sp, #20]
    d55e:	movs	r3, #0
    d560:	str	r3, [sp, #16]
    d562:	b.n	d548 <_strtod_l+0xb90>
    d564:	ldr	r3, [sp, #120]	; 0x78
    d566:	str	r3, [sp, #16]
    d568:	ldr	r3, [sp, #124]	; 0x7c
    d56a:	str	r3, [sp, #20]
    d56c:	b.n	d548 <_strtod_l+0xb90>
    d56e:	movs	r3, #0
    d570:	str	r3, [sp, #20]
    d572:	str	r3, [sp, #16]
    d574:	b.n	d548 <_strtod_l+0xb90>
    d576:	ldr	r2, [sp, #116]	; 0x74
    d578:	ldr	r3, [sp, #124]	; 0x7c
    d57a:	ldr	r1, [sp, #120]	; 0x78
    d57c:	str	r1, [sp, #16]
    d57e:	addw	r2, r2, #1075	; 0x433
    d582:	bic.w	r3, r3, #1048576	; 0x100000
    d586:	orr.w	r3, r3, r2, lsl #20
    d58a:	str	r3, [sp, #20]
    d58c:	b.n	d548 <_strtod_l+0xb90>
    d58e:	vldr	d7, [sp, #56]	; 0x38
    d592:	vstr	d7, [sp, #80]	; 0x50
    d596:	b.n	cf34 <_strtod_l+0x57c>
    d598:	vldr	d7, [pc, #92]	; d5f8 <_strtod_l+0xc40>
    d59c:	vstr	d7, [sp, #56]	; 0x38
    d5a0:	b.n	cf20 <_strtod_l+0x568>
    d5a2:	ldrd	r1, r2, [sp, #16]
    d5a6:	mov	r8, r2
    d5a8:	cmp	r2, #0
    d5aa:	bne.w	d1c6 <_strtod_l+0x80e>
    d5ae:	movs	r3, #34	; 0x22
    d5b0:	str.w	r3, [fp]
    d5b4:	ldr	r0, [sp, #112]	; 0x70
    d5b6:	mov.w	r8, #0
    d5ba:	mov.w	r9, #0
    d5be:	b.n	d21c <_strtod_l+0x864>
    d5c0:	ldr	r2, [sp, #108]	; 0x6c
    d5c2:	str	r2, [sp, #32]
    d5c4:	movs	r5, #0
    d5c6:	subs	r3, #48	; 0x30
    d5c8:	adds	r7, r0, #1
    d5ca:	mov	r1, r2
    d5cc:	mov	sl, r5
    d5ce:	mov	r8, r5
    d5d0:	movs	r4, #1
    d5d2:	add.w	r5, r5, r5, lsl #2
    d5d6:	add.w	r5, r3, r5, lsl #1
    d5da:	movs	r0, #0
    d5dc:	b.n	d4c4 <_strtod_l+0xb0c>
    d5de:	nop
    d5e0:	.word	0x94a03595
    d5e4:	.word	0x3fcfffff
    d5e8:	.word	0x94a03595
    d5ec:	.word	0x3fdfffff
    d5f0:	.word	0x35afe535
    d5f4:	.word	0x3fe00000
    d5f8:	.word	0x00000000
    d5fc:	.word	0x3ff00000
    d600:	.word	0x7c9fffff
    d604:	.word	0x7fefffff
    d608:	.word	0x7ff00000
    d60c:	.word	0x00013a98
    d610:	.word	0x000137c8
    d614:	ldr	r1, [sp, #44]	; 0x2c
    d616:	cmn.w	r1, #22
    d61a:	blt.w	ccdc <_strtod_l+0x324>
    d61e:	ldr	r2, [pc, #600]	; (d878 <_strtod_l+0xec0>)
    d620:	sub.w	r2, r2, r1, lsl #3
    d624:	ldrd	r2, r3, [r2]
    d628:	ldrd	r0, r1, [sp, #16]
    d62c:	bl	aee4 <__aeabi_ddiv>
    d630:	mov	r8, r0
    d632:	mov	r9, r1
    d634:	b.w	cae8 <_strtod_l+0x130>
    d638:	ldr	r3, [sp, #52]	; 0x34
    d63a:	ldrd	r8, r9, [sp, #32]
    d63e:	cmp	r3, #0
    d640:	beq.w	d754 <_strtod_l+0xd9c>
    d644:	ldrd	r4, r5, [sp, #16]
    d648:	ldr	r3, [pc, #560]	; (d87c <_strtod_l+0xec4>)
    d64a:	ubfx	r1, r5, #0, #20
    d64e:	cmp	r1, r3
    d650:	mov	r2, r5
    d652:	beq.w	d7aa <_strtod_l+0xdf2>
    d656:	ldr	r3, [sp, #76]	; 0x4c
    d658:	cmp	r3, #0
    d65a:	beq.w	d76c <_strtod_l+0xdb4>
    d65e:	ldr	r2, [sp, #20]
    d660:	tst	r3, r2
    d662:	beq.n	d686 <_strtod_l+0xcce>
    d664:	ldr	r3, [sp, #52]	; 0x34
    d666:	ldr	r2, [sp, #40]	; 0x28
    d668:	ldrd	r0, r1, [sp, #16]
    d66c:	cmp	r3, #0
    d66e:	beq.w	d77c <_strtod_l+0xdc4>
    d672:	bl	c97c <sulp>
    d676:	mov	r2, r0
    d678:	mov	r3, r1
    d67a:	mov	r0, r8
    d67c:	mov	r1, r9
    d67e:	bl	a92c <__adddf3>
    d682:	mov	r8, r0
    d684:	mov	r9, r1
    d686:	ldr	r3, [sp, #40]	; 0x28
    d688:	cbz	r3, d6ba <_strtod_l+0xd02>
    d68a:	ldr	r3, [pc, #500]	; (d880 <_strtod_l+0xec8>)
    d68c:	str	r3, [sp, #92]	; 0x5c
    d68e:	movs	r3, #0
    d690:	str	r3, [sp, #88]	; 0x58
    d692:	ldrd	r2, r3, [sp, #88]	; 0x58
    d696:	mov	r0, r8
    d698:	mov	r1, r9
    d69a:	bl	ac90 <__aeabi_dmul>
    d69e:	mov	r3, r0
    d6a0:	mov	r4, r1
    d6a2:	mov	r8, r0
    d6a4:	mov	r9, r1
    d6a6:	strd	r3, r4, [sp, #16]
    d6aa:	cbnz	r1, d6ba <_strtod_l+0xd02>
    d6ac:	ldr	r3, [sp, #16]
    d6ae:	cbnz	r3, d6ba <_strtod_l+0xd02>
    d6b0:	movs	r3, #34	; 0x22
    d6b2:	ldr	r0, [sp, #112]	; 0x70
    d6b4:	str.w	r3, [fp]
    d6b8:	b.n	d21c <_strtod_l+0x864>
    d6ba:	ldr	r0, [sp, #112]	; 0x70
    d6bc:	b.n	d21c <_strtod_l+0x864>
    d6be:	ldr	r3, [sp, #52]	; 0x34
    d6c0:	ldrd	r8, r9, [sp, #32]
    d6c4:	cmp	r3, #0
    d6c6:	bne.n	d686 <_strtod_l+0xcce>
    d6c8:	ldrd	r1, r2, [sp, #16]
    d6cc:	cmp	r1, #0
    d6ce:	bne.n	d686 <_strtod_l+0xcce>
    d6d0:	ubfx	r3, r2, #0, #20
    d6d4:	mov	r4, r2
    d6d6:	cmp	r3, #0
    d6d8:	bne.n	d686 <_strtod_l+0xcce>
    d6da:	bic.w	r3, r2, #2147483648	; 0x80000000
    d6de:	lsrs	r3, r3, #20
    d6e0:	lsls	r3, r3, #20
    d6e2:	cmp.w	r3, #112197632	; 0x6b00000
    d6e6:	bls.n	d686 <_strtod_l+0xcce>
    d6e8:	ldr	r3, [r7, #20]
    d6ea:	cbnz	r3, d6f2 <_strtod_l+0xd3a>
    d6ec:	ldr	r3, [r7, #16]
    d6ee:	cmp	r3, #1
    d6f0:	ble.n	d686 <_strtod_l+0xcce>
    d6f2:	mov	r1, r7
    d6f4:	movs	r2, #1
    d6f6:	mov	r0, fp
    d6f8:	bl	11ed8 <__lshift>
    d6fc:	mov	r1, sl
    d6fe:	mov	r7, r0
    d700:	bl	11f88 <__mcmp>
    d704:	cmp	r0, #0
    d706:	ble.n	d686 <_strtod_l+0xcce>
    d708:	ldr	r3, [sp, #40]	; 0x28
    d70a:	cmp	r3, #0
    d70c:	bne.w	d814 <_strtod_l+0xe5c>
    d710:	ldr	r3, [pc, #368]	; (d884 <_strtod_l+0xecc>)
    d712:	ands	r3, r4
    d714:	sub.w	r3, r3, #1048576	; 0x100000
    d718:	mvn.w	r3, r3, lsr #20
    d71c:	mvn.w	r3, r3, lsl #20
    d720:	str	r3, [sp, #20]
    d722:	mov.w	r3, #4294967295
    d726:	str	r3, [sp, #16]
    d728:	ldrd	r8, r9, [sp, #16]
    d72c:	b.n	d686 <_strtod_l+0xcce>
    d72e:	ldr	r3, [sp, #88]	; 0x58
    d730:	adds	r3, #1
    d732:	bne.w	d36a <_strtod_l+0x9b2>
    d736:	b.n	d208 <_strtod_l+0x850>
    d738:	add.w	r3, r1, #55574528	; 0x3500000
    d73c:	str	r3, [sp, #20]
    d73e:	b.w	cd10 <_strtod_l+0x358>
    d742:	vldr	d7, [pc, #292]	; d868 <_strtod_l+0xeb0>
    d746:	vstr	d7, [sp, #96]	; 0x60
    d74a:	vldr	d7, [pc, #292]	; d870 <_strtod_l+0xeb8>
    d74e:	vstr	d7, [sp, #56]	; 0x38
    d752:	b.n	d062 <_strtod_l+0x6aa>
    d754:	ldrd	r1, r2, [sp, #16]
    d758:	ubfx	r3, r2, #0, #20
    d75c:	mov	r4, r2
    d75e:	cmp	r3, #0
    d760:	bne.w	d656 <_strtod_l+0xc9e>
    d764:	cmp	r1, #0
    d766:	bne.w	d656 <_strtod_l+0xc9e>
    d76a:	b.n	d708 <_strtod_l+0xd50>
    d76c:	ldr	r3, [sp, #56]	; 0x38
    d76e:	ldr	r2, [sp, #16]
    d770:	tst	r3, r2
    d772:	beq.n	d686 <_strtod_l+0xcce>
    d774:	b.n	d664 <_strtod_l+0xcac>
    d776:	mov.w	r8, #0
    d77a:	b.n	d174 <_strtod_l+0x7bc>
    d77c:	bl	c97c <sulp>
    d780:	mov	r2, r0
    d782:	mov	r3, r1
    d784:	mov	r0, r8
    d786:	mov	r1, r9
    d788:	bl	a928 <__aeabi_dsub>
    d78c:	movs	r2, #0
    d78e:	movs	r3, #0
    d790:	mov	r8, r0
    d792:	mov	r9, r1
    d794:	bl	b160 <__aeabi_dcmpeq>
    d798:	cmp	r0, #0
    d79a:	bne.w	d5ae <_strtod_l+0xbf6>
    d79e:	b.n	d686 <_strtod_l+0xcce>
    d7a0:	cmp	r6, #0
    d7a2:	str	r3, [sp, #40]	; 0x28
    d7a4:	bgt.w	d438 <_strtod_l+0xa80>
    d7a8:	b.n	d488 <_strtod_l+0xad0>
    d7aa:	ldr	r3, [sp, #40]	; 0x28
    d7ac:	ldr	r1, [sp, #16]
    d7ae:	cbz	r3, d7ea <_strtod_l+0xe32>
    d7b0:	ldr	r3, [pc, #208]	; (d884 <_strtod_l+0xecc>)
    d7b2:	ands	r3, r5
    d7b4:	cmp.w	r3, #111149056	; 0x6a00000
    d7b8:	bhi.n	d7ea <_strtod_l+0xe32>
    d7ba:	lsrs	r3, r3, #20
    d7bc:	rsb	r3, r3, #107	; 0x6b
    d7c0:	mov.w	r0, #4294967295
    d7c4:	lsl.w	r3, r0, r3
    d7c8:	cmp	r3, r1
    d7ca:	bne.w	d656 <_strtod_l+0xc9e>
    d7ce:	ldr	r1, [pc, #184]	; (d888 <_strtod_l+0xed0>)
    d7d0:	cmp	r2, r1
    d7d2:	beq.w	d202 <_strtod_l+0x84a>
    d7d6:	ldr	r3, [pc, #172]	; (d884 <_strtod_l+0xecc>)
    d7d8:	ands	r3, r2
    d7da:	add.w	r3, r3, #1048576	; 0x100000
    d7de:	str	r3, [sp, #20]
    d7e0:	movs	r3, #0
    d7e2:	str	r3, [sp, #16]
    d7e4:	ldrd	r8, r9, [sp, #16]
    d7e8:	b.n	d686 <_strtod_l+0xcce>
    d7ea:	mov.w	r3, #4294967295
    d7ee:	b.n	d7c8 <_strtod_l+0xe10>
    d7f0:	add	r0, sp, #108	; 0x6c
    d7f2:	add	r2, sp, #120	; 0x78
    d7f4:	ldr	r1, [pc, #148]	; (d88c <_strtod_l+0xed4>)
    d7f6:	bl	118c8 <__hexnan>
    d7fa:	cmp	r0, #5
    d7fc:	bne.w	d1ec <_strtod_l+0x834>
    d800:	ldr	r3, [sp, #124]	; 0x7c
    d802:	orr.w	r3, r3, #2139095040	; 0x7f800000
    d806:	orr.w	r3, r3, #7340032	; 0x700000
    d80a:	str	r3, [sp, #20]
    d80c:	ldr	r3, [sp, #120]	; 0x78
    d80e:	str	r3, [sp, #16]
    d810:	b.w	cc28 <_strtod_l+0x270>
    d814:	ldr	r3, [pc, #108]	; (d884 <_strtod_l+0xecc>)
    d816:	ands	r3, r4
    d818:	cmp.w	r3, #112197632	; 0x6b00000
    d81c:	bgt.w	d714 <_strtod_l+0xd5c>
    d820:	cmp.w	r3, #57671680	; 0x3700000
    d824:	bgt.w	d68a <_strtod_l+0xcd2>
    d828:	b.n	d5ae <_strtod_l+0xbf6>
    d82a:	mov.w	r2, #4294967295
    d82e:	lsl.w	r3, r2, r3
    d832:	ldr	r2, [sp, #16]
    d834:	ands	r2, r3
    d836:	str	r2, [sp, #16]
    d838:	b.n	d488 <_strtod_l+0xad0>
    d83a:	strd	r0, r1, [sp, #16]
    d83e:	b.n	d174 <_strtod_l+0x7bc>
    d840:	strd	r0, r1, [sp, #16]
    d844:	b.n	d45c <_strtod_l+0xaa4>
    d846:	subs	r3, #32
    d848:	mov.w	r2, #4294967295
    d84c:	lsl.w	r3, r2, r3
    d850:	ands	r3, r1
    d852:	str	r3, [sp, #20]
    d854:	b.n	d488 <_strtod_l+0xad0>
    d856:	mov	r0, r4
    d858:	ldr	r1, [sp, #108]	; 0x6c
    d85a:	adds	r4, #1
    d85c:	b.n	d4b0 <_strtod_l+0xaf8>
    d85e:	mov	r0, r1
    d860:	ldr	r1, [sp, #108]	; 0x6c
    d862:	b.n	d4c4 <_strtod_l+0xb0c>
    d864:	nop.w
    d868:	.word	0x00000000
    d86c:	.word	0xbfe00000
    d870:	.word	0x00000000
    d874:	.word	0x3fe00000
    d878:	.word	0x00013a98
    d87c:	.word	0x000fffff
    d880:	.word	0x39500000
    d884:	.word	0x7ff00000
    d888:	.word	0x7fefffff
    d88c:	.word	0x000137b0

0000d890 <_strtod_r>:
    d890:	ldr	r3, [pc, #20]	; (d8a8 <_strtod_r+0x18>)
    d892:	ldr	r3, [r3, #0]
    d894:	push	{r4}
    d896:	ldr	r3, [r3, #52]	; 0x34
    d898:	ldr	r4, [pc, #16]	; (d8ac <_strtod_r+0x1c>)
    d89a:	cmp	r3, #0
    d89c:	it	eq
    d89e:	moveq	r3, r4
    d8a0:	ldr.w	r4, [sp], #4
    d8a4:	b.w	c9b8 <_strtod_l>
    d8a8:	.word	0x20017400
    d8ac:	.word	0x20017404

0000d8b0 <_strtol_l.isra.0>:
    d8b0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d8b4:	ldr.w	r9, [sp, #40]	; 0x28
    d8b8:	mov	r7, r1
    d8ba:	mov	r8, r0
    d8bc:	mov	r6, r2
    d8be:	mov	r5, r3
    d8c0:	mov	fp, r1
    d8c2:	b.n	d8c6 <_strtol_l.isra.0+0x16>
    d8c4:	mov	fp, r4
    d8c6:	mov	r4, fp
    d8c8:	mov	r0, r9
    d8ca:	ldrb.w	sl, [r4], #1
    d8ce:	bl	b960 <__locale_ctype_ptr_l>
    d8d2:	add	r0, sl
    d8d4:	ldrb	r1, [r0, #1]
    d8d6:	and.w	r1, r1, #8
    d8da:	and.w	ip, r1, #255	; 0xff
    d8de:	cmp	r1, #0
    d8e0:	bne.n	d8c4 <_strtol_l.isra.0+0x14>
    d8e2:	mov	r2, sl
    d8e4:	cmp	r2, #45	; 0x2d
    d8e6:	beq.n	d9ac <_strtol_l.isra.0+0xfc>
    d8e8:	cmp	r2, #43	; 0x2b
    d8ea:	itt	eq
    d8ec:	ldrbeq.w	r2, [fp, #1]
    d8f0:	addeq.w	r4, fp, #2
    d8f4:	cmp	r5, #0
    d8f6:	beq.n	d980 <_strtol_l.isra.0+0xd0>
    d8f8:	cmp	r5, #16
    d8fa:	beq.n	d9c8 <_strtol_l.isra.0+0x118>
    d8fc:	mov	r9, r5
    d8fe:	cmp.w	ip, #0
    d902:	ite	eq
    d904:	mvneq.w	sl, #2147483648	; 0x80000000
    d908:	movne.w	sl, #2147483648	; 0x80000000
    d90c:	movs	r1, #0
    d90e:	udiv	lr, sl, r9
    d912:	mov	r0, r1
    d914:	mls	sl, r9, lr, sl
    d918:	b.n	d926 <_strtol_l.isra.0+0x76>
    d91a:	beq.n	d970 <_strtol_l.isra.0+0xc0>
    d91c:	mla	r0, r9, r0, r3
    d920:	movs	r1, #1
    d922:	ldrb.w	r2, [r4], #1
    d926:	sub.w	r3, r2, #48	; 0x30
    d92a:	cmp	r3, #9
    d92c:	bls.n	d93a <_strtol_l.isra.0+0x8a>
    d92e:	sub.w	r3, r2, #65	; 0x41
    d932:	cmp	r3, #25
    d934:	bhi.n	d94c <_strtol_l.isra.0+0x9c>
    d936:	sub.w	r3, r2, #55	; 0x37
    d93a:	cmp	r5, r3
    d93c:	ble.n	d95c <_strtol_l.isra.0+0xac>
    d93e:	adds	r2, r1, #1
    d940:	beq.n	d922 <_strtol_l.isra.0+0x72>
    d942:	cmp	lr, r0
    d944:	bcs.n	d91a <_strtol_l.isra.0+0x6a>
    d946:	mov.w	r1, #4294967295
    d94a:	b.n	d922 <_strtol_l.isra.0+0x72>
    d94c:	sub.w	r3, r2, #97	; 0x61
    d950:	cmp	r3, #25
    d952:	bhi.n	d95c <_strtol_l.isra.0+0xac>
    d954:	sub.w	r3, r2, #87	; 0x57
    d958:	cmp	r5, r3
    d95a:	bgt.n	d93e <_strtol_l.isra.0+0x8e>
    d95c:	adds	r3, r1, #1
    d95e:	beq.n	d98c <_strtol_l.isra.0+0xdc>
    d960:	cmp.w	ip, #0
    d964:	bne.n	d988 <_strtol_l.isra.0+0xd8>
    d966:	cbz	r6, d97c <_strtol_l.isra.0+0xcc>
    d968:	cbnz	r1, d9a4 <_strtol_l.isra.0+0xf4>
    d96a:	str	r7, [r6, #0]
    d96c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d970:	cmp	sl, r3
    d972:	bge.n	d91c <_strtol_l.isra.0+0x6c>
    d974:	mov	r0, lr
    d976:	mov.w	r1, #4294967295
    d97a:	b.n	d922 <_strtol_l.isra.0+0x72>
    d97c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d980:	cmp	r2, #48	; 0x30
    d982:	beq.n	d9ba <_strtol_l.isra.0+0x10a>
    d984:	movs	r5, #10
    d986:	b.n	d8fc <_strtol_l.isra.0+0x4c>
    d988:	negs	r0, r0
    d98a:	b.n	d966 <_strtol_l.isra.0+0xb6>
    d98c:	cmp.w	ip, #0
    d990:	mov.w	r3, #34	; 0x22
    d994:	ite	eq
    d996:	mvneq.w	r0, #2147483648	; 0x80000000
    d99a:	movne.w	r0, #2147483648	; 0x80000000
    d99e:	str.w	r3, [r8]
    d9a2:	cbz	r6, d9e2 <_strtol_l.isra.0+0x132>
    d9a4:	subs	r7, r4, #1
    d9a6:	str	r7, [r6, #0]
    d9a8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d9ac:	add.w	r4, fp, #2
    d9b0:	ldrb.w	r2, [fp, #1]
    d9b4:	mov.w	ip, #1
    d9b8:	b.n	d8f4 <_strtol_l.isra.0+0x44>
    d9ba:	ldrb	r3, [r4, #0]
    d9bc:	and.w	r3, r3, #223	; 0xdf
    d9c0:	cmp	r3, #88	; 0x58
    d9c2:	beq.n	d9d6 <_strtol_l.isra.0+0x126>
    d9c4:	movs	r5, #8
    d9c6:	b.n	d8fc <_strtol_l.isra.0+0x4c>
    d9c8:	cmp	r2, #48	; 0x30
    d9ca:	bne.n	d8fc <_strtol_l.isra.0+0x4c>
    d9cc:	ldrb	r3, [r4, #0]
    d9ce:	and.w	r3, r3, #223	; 0xdf
    d9d2:	cmp	r3, #88	; 0x58
    d9d4:	bne.n	d8fc <_strtol_l.isra.0+0x4c>
    d9d6:	mov.w	r9, #16
    d9da:	ldrb	r2, [r4, #1]
    d9dc:	mov	r5, r9
    d9de:	adds	r4, #2
    d9e0:	b.n	d8fe <_strtol_l.isra.0+0x4e>
    d9e2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d9e6:	nop

0000d9e8 <_strtol_r>:
    d9e8:	push	{r4, r5, lr}
    d9ea:	ldr	r4, [pc, #24]	; (da04 <_strtol_r+0x1c>)
    d9ec:	ldr	r5, [pc, #24]	; (da08 <_strtol_r+0x20>)
    d9ee:	ldr	r4, [r4, #0]
    d9f0:	ldr	r4, [r4, #52]	; 0x34
    d9f2:	sub	sp, #12
    d9f4:	cmp	r4, #0
    d9f6:	it	eq
    d9f8:	moveq	r4, r5
    d9fa:	str	r4, [sp, #0]
    d9fc:	bl	d8b0 <_strtol_l.isra.0>
    da00:	add	sp, #12
    da02:	pop	{r4, r5, pc}
    da04:	.word	0x20017400
    da08:	.word	0x20017404
    da0c:	.word	0xffffffff

0000da10 <_svfprintf_r>:
    da10:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da14:	sub	sp, #260	; 0x104
    da16:	mov	r4, r1
    da18:	str	r1, [sp, #20]
    da1a:	mov	r5, r2
    da1c:	str	r3, [sp, #40]	; 0x28
    da1e:	str	r0, [sp, #24]
    da20:	bl	11a68 <_localeconv_r>
    da24:	ldr	r3, [r0, #0]
    da26:	str	r3, [sp, #76]	; 0x4c
    da28:	mov	r0, r3
    da2a:	bl	c800 <strlen>
    da2e:	ldrh	r3, [r4, #12]
    da30:	str	r0, [sp, #72]	; 0x48
    da32:	lsls	r6, r3, #24
    da34:	bpl.n	da3e <_svfprintf_r+0x2e>
    da36:	ldr	r3, [r4, #16]
    da38:	cmp	r3, #0
    da3a:	beq.w	eca0 <_svfprintf_r+0x1290>
    da3e:	vldr	d7, [pc, #664]	; dcd8 <_svfprintf_r+0x2c8>
    da42:	movs	r3, #0
    da44:	vstr	d7, [sp, #64]	; 0x40
    da48:	str	r3, [sp, #56]	; 0x38
    da4a:	str	r3, [sp, #148]	; 0x94
    da4c:	str	r3, [sp, #144]	; 0x90
    da4e:	str	r3, [sp, #84]	; 0x54
    da50:	str	r3, [sp, #28]
    da52:	ldr.w	sl, [pc, #656]	; dce4 <_svfprintf_r+0x2d4>
    da56:	add	r3, sp, #192	; 0xc0
    da58:	str	r3, [sp, #140]	; 0x8c
    da5a:	mov	r9, r3
    da5c:	mov	r8, r5
    da5e:	ldrb.w	r3, [r8]
    da62:	mov	r4, r8
    da64:	cbz	r3, daa2 <_svfprintf_r+0x92>
    da66:	cmp	r3, #37	; 0x25
    da68:	bne.n	da70 <_svfprintf_r+0x60>
    da6a:	b.n	daa2 <_svfprintf_r+0x92>
    da6c:	cmp	r3, #37	; 0x25
    da6e:	beq.n	da78 <_svfprintf_r+0x68>
    da70:	ldrb.w	r3, [r4, #1]!
    da74:	cmp	r3, #0
    da76:	bne.n	da6c <_svfprintf_r+0x5c>
    da78:	rsb	r5, r8, r4
    da7c:	cbz	r5, daa2 <_svfprintf_r+0x92>
    da7e:	ldr	r3, [sp, #144]	; 0x90
    da80:	ldr	r2, [sp, #148]	; 0x94
    da82:	str.w	r8, [r9]
    da86:	adds	r3, #1
    da88:	add	r2, r5
    da8a:	cmp	r3, #7
    da8c:	str.w	r5, [r9, #4]
    da90:	str	r2, [sp, #148]	; 0x94
    da92:	str	r3, [sp, #144]	; 0x90
    da94:	bgt.w	dbe4 <_svfprintf_r+0x1d4>
    da98:	add.w	r9, r9, #8
    da9c:	ldr	r3, [sp, #28]
    da9e:	add	r3, r5
    daa0:	str	r3, [sp, #28]
    daa2:	ldrb	r3, [r4, #0]
    daa4:	cmp	r3, #0
    daa6:	beq.w	dbf6 <_svfprintf_r+0x1e6>
    daaa:	movs	r3, #0
    daac:	mov	r2, r3
    daae:	strb.w	r3, [sp, #111]	; 0x6f
    dab2:	mov	r1, r3
    dab4:	str	r3, [sp, #32]
    dab6:	str	r3, [sp, #12]
    dab8:	mov.w	fp, #4294967295
    dabc:	ldrb	r3, [r4, #1]
    dabe:	add.w	r8, r4, #1
    dac2:	mov	r5, fp
    dac4:	add.w	r8, r8, #1
    dac8:	sub.w	r0, r3, #32
    dacc:	cmp	r0, #88	; 0x58
    dace:	bhi.w	e33a <_svfprintf_r+0x92a>
    dad2:	tbh	[pc, r0, lsl #1]
    dad6:	.short	0x03a0
    dad8:	.word	0x04320432
    dadc:	.word	0x043203a8
    dae0:	.word	0x04320432
    dae4:	.word	0x04320432
    dae8:	.word	0x03af0432
    daec:	.word	0x043203bd
    daf0:	.word	0x00e2005d
    daf4:	.word	0x01090432
    daf8:	.word	0x01100110
    dafc:	.word	0x01100110
    db00:	.word	0x01100110
    db04:	.word	0x01100110
    db08:	.word	0x04320110
    db0c:	.word	0x04320432
    db10:	.word	0x04320432
    db14:	.word	0x04320432
    db18:	.word	0x04320432
    db1c:	.word	0x01200432
    db20:	.word	0x04320286
    db24:	.word	0x04320286
    db28:	.word	0x04320432
    db2c:	.word	0x02d40432
    db30:	.word	0x04320432
    db34:	.word	0x043202e5
    db38:	.word	0x04320432
    db3c:	.word	0x04320432
    db40:	.word	0x0432030f
    db44:	.word	0x033d0432
    db48:	.word	0x04320432
    db4c:	.word	0x04320432
    db50:	.word	0x04320432
    db54:	.word	0x04320432
    db58:	.word	0x04320432
    db5c:	.word	0x0391037e
    db60:	.word	0x02860286
    db64:	.word	0x03990286
    db68:	.word	0x04320391
    db6c:	.word	0x04070432
    db70:	.word	0x04120432
    db74:	.word	0x006400a3
    db78:	.word	0x043203c2
    db7c:	.word	0x043203c9
    db80:	.word	0x043203ea
    db84:	.word	0x03f20432
    db88:	ldr	r0, [sp, #32]
    db8a:	str	r3, [sp, #40]	; 0x28
    db8c:	negs	r0, r0
    db8e:	str	r0, [sp, #32]
    db90:	ldr	r3, [sp, #12]
    db92:	orr.w	r3, r3, #4
    db96:	str	r3, [sp, #12]
    db98:	ldrb.w	r3, [r8]
    db9c:	b.n	dac4 <_svfprintf_r+0xb4>
    db9e:	ldr	r0, [sp, #40]	; 0x28
    dba0:	mov	fp, r5
    dba2:	movs	r1, #0
    dba4:	ldr	r4, [r0, #0]
    dba6:	strb.w	r1, [sp, #111]	; 0x6f
    dbaa:	adds	r7, r0, #4
    dbac:	ldr	r0, [sp, #12]
    dbae:	movs	r3, #48	; 0x30
    dbb0:	movs	r2, #120	; 0x78
    dbb2:	cmp	fp, r1
    dbb4:	strb.w	r3, [sp, #112]	; 0x70
    dbb8:	mov.w	r5, #0
    dbbc:	strb.w	r2, [sp, #113]	; 0x71
    dbc0:	orr.w	r3, r0, #2
    dbc4:	blt.w	e374 <_svfprintf_r+0x964>
    dbc8:	bic.w	r3, r0, #128	; 0x80
    dbcc:	orr.w	r3, r3, #2
    dbd0:	str	r3, [sp, #12]
    dbd2:	orrs.w	r3, r4, r5
    dbd6:	str	r7, [sp, #40]	; 0x28
    dbd8:	beq.w	e320 <_svfprintf_r+0x910>
    dbdc:	mov	r7, r1
    dbde:	str	r2, [sp, #52]	; 0x34
    dbe0:	ldr	r0, [pc, #252]	; (dce0 <_svfprintf_r+0x2d0>)
    dbe2:	b.n	e1b2 <_svfprintf_r+0x7a2>
    dbe4:	add	r2, sp, #140	; 0x8c
    dbe6:	ldr	r1, [sp, #20]
    dbe8:	ldr	r0, [sp, #24]
    dbea:	bl	129a8 <__ssprint_r>
    dbee:	cbnz	r0, dc04 <_svfprintf_r+0x1f4>
    dbf0:	add.w	r9, sp, #192	; 0xc0
    dbf4:	b.n	da9c <_svfprintf_r+0x8c>
    dbf6:	ldr	r3, [sp, #148]	; 0x94
    dbf8:	cbz	r3, dc04 <_svfprintf_r+0x1f4>
    dbfa:	ldr	r0, [sp, #24]
    dbfc:	ldr	r1, [sp, #20]
    dbfe:	add	r2, sp, #140	; 0x8c
    dc00:	bl	129a8 <__ssprint_r>
    dc04:	ldr	r3, [sp, #20]
    dc06:	ldrh	r3, [r3, #12]
    dc08:	tst.w	r3, #64	; 0x40
    dc0c:	ldr	r3, [sp, #28]
    dc0e:	it	ne
    dc10:	movne.w	r3, #4294967295
    dc14:	mov	r0, r3
    dc16:	add	sp, #260	; 0x104
    dc18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dc1c:	str	r3, [sp, #52]	; 0x34
    dc1e:	mov	fp, r5
    dc20:	cmp	r2, #0
    dc22:	bne.w	f08c <_svfprintf_r+0x167c>
    dc26:	ldr	r2, [sp, #12]
    dc28:	ands.w	r3, r2, #32
    dc2c:	beq.w	e0bc <_svfprintf_r+0x6ac>
    dc30:	ldr	r7, [sp, #40]	; 0x28
    dc32:	adds	r7, #7
    dc34:	bic.w	r3, r7, #7
    dc38:	movs	r7, #0
    dc3a:	add.w	r1, r3, #8
    dc3e:	cmp	fp, r7
    dc40:	str	r1, [sp, #40]	; 0x28
    dc42:	ldrd	r4, r5, [r3]
    dc46:	strb.w	r7, [sp, #111]	; 0x6f
    dc4a:	blt.w	eb12 <_svfprintf_r+0x1102>
    dc4e:	bic.w	r3, r2, #128	; 0x80
    dc52:	str	r3, [sp, #12]
    dc54:	orrs.w	r3, r4, r5
    dc58:	beq.w	e364 <_svfprintf_r+0x954>
    dc5c:	add	r6, sp, #192	; 0xc0
    dc5e:	lsrs	r2, r4, #3
    dc60:	orr.w	r2, r2, r5, lsl #29
    dc64:	lsrs	r1, r5, #3
    dc66:	and.w	r3, r4, #7
    dc6a:	mov	r5, r1
    dc6c:	mov	r4, r2
    dc6e:	adds	r3, #48	; 0x30
    dc70:	orrs.w	r2, r4, r5
    dc74:	strb.w	r3, [r6, #-1]!
    dc78:	bne.n	dc5e <_svfprintf_r+0x24e>
    dc7a:	ldr	r2, [sp, #12]
    dc7c:	lsls	r1, r2, #31
    dc7e:	bpl.w	dda0 <_svfprintf_r+0x390>
    dc82:	cmp	r3, #48	; 0x30
    dc84:	beq.w	dda0 <_svfprintf_r+0x390>
    dc88:	movs	r2, #48	; 0x30
    dc8a:	subs	r3, r6, #1
    dc8c:	strb.w	r2, [r6, #-1]
    dc90:	add	r2, sp, #192	; 0xc0
    dc92:	subs	r2, r2, r3
    dc94:	str	r2, [sp, #36]	; 0x24
    dc96:	mov	r6, r3
    dc98:	b.n	dda6 <_svfprintf_r+0x396>
    dc9a:	ldrb.w	r3, [r8]
    dc9e:	cmp	r3, #42	; 0x2a
    dca0:	add.w	r4, r8, #1
    dca4:	beq.w	f070 <_svfprintf_r+0x1660>
    dca8:	sub.w	r0, r3, #48	; 0x30
    dcac:	cmp	r0, #9
    dcae:	it	ls
    dcb0:	movls	r5, #0
    dcb2:	bhi.w	efc2 <_svfprintf_r+0x15b2>
    dcb6:	ldrb.w	r3, [r4], #1
    dcba:	add.w	r5, r5, r5, lsl #2
    dcbe:	add.w	r5, r0, r5, lsl #1
    dcc2:	sub.w	r0, r3, #48	; 0x30
    dcc6:	cmp	r0, #9
    dcc8:	bls.n	dcb6 <_svfprintf_r+0x2a6>
    dcca:	orr.w	r5, r5, r5, asr #31
    dcce:	mov	r8, r4
    dcd0:	b.n	dac8 <_svfprintf_r+0xb8>
    dcd2:	nop
    dcd4:	nop.w
	...
    dce0:	.word	0x00013824
    dce4:	.word	0x000137f0
    dce8:	ldr	r3, [sp, #12]
    dcea:	orr.w	r3, r3, #128	; 0x80
    dcee:	str	r3, [sp, #12]
    dcf0:	ldrb.w	r3, [r8]
    dcf4:	b.n	dac4 <_svfprintf_r+0xb4>
    dcf6:	sub.w	r0, r3, #48	; 0x30
    dcfa:	movs	r3, #0
    dcfc:	mov	r4, r3
    dcfe:	ldrb.w	r3, [r8], #1
    dd02:	add.w	r4, r4, r4, lsl #2
    dd06:	add.w	r4, r0, r4, lsl #1
    dd0a:	sub.w	r0, r3, #48	; 0x30
    dd0e:	cmp	r0, #9
    dd10:	bls.n	dcfe <_svfprintf_r+0x2ee>
    dd12:	str	r4, [sp, #32]
    dd14:	b.n	dac8 <_svfprintf_r+0xb8>
    dd16:	str	r3, [sp, #52]	; 0x34
    dd18:	mov	fp, r5
    dd1a:	cmp	r2, #0
    dd1c:	bne.w	f0a8 <_svfprintf_r+0x1698>
    dd20:	ldr	r3, [sp, #12]
    dd22:	orr.w	r3, r3, #16
    dd26:	str	r3, [sp, #12]
    dd28:	ldr	r3, [sp, #12]
    dd2a:	lsls	r4, r3, #26
    dd2c:	bpl.w	e79e <_svfprintf_r+0xd8e>
    dd30:	ldr	r7, [sp, #40]	; 0x28
    dd32:	adds	r7, #7
    dd34:	bic.w	r7, r7, #7
    dd38:	ldrd	r2, r3, [r7]
    dd3c:	add.w	r1, r7, #8
    dd40:	str	r1, [sp, #40]	; 0x28
    dd42:	mov	r4, r2
    dd44:	mov	r5, r3
    dd46:	cmp	r2, #0
    dd48:	sbcs.w	r3, r3, #0
    dd4c:	blt.w	e814 <_svfprintf_r+0xe04>
    dd50:	cmp.w	fp, #0
    dd54:	ldrb.w	r7, [sp, #111]	; 0x6f
    dd58:	blt.w	e7da <_svfprintf_r+0xdca>
    dd5c:	ldr	r3, [sp, #12]
    dd5e:	bic.w	r3, r3, #128	; 0x80
    dd62:	str	r3, [sp, #12]
    dd64:	orrs.w	r3, r4, r5
    dd68:	beq.w	e13c <_svfprintf_r+0x72c>
    dd6c:	cmp	r5, #0
    dd6e:	it	eq
    dd70:	cmpeq	r4, #10
    dd72:	bcc.w	e146 <_svfprintf_r+0x736>
    dd76:	add	r6, sp, #192	; 0xc0
    dd78:	mov	r0, r4
    dd7a:	mov	r1, r5
    dd7c:	movs	r2, #10
    dd7e:	movs	r3, #0
    dd80:	bl	b53c <__aeabi_uldivmod>
    dd84:	adds	r2, #48	; 0x30
    dd86:	strb.w	r2, [r6, #-1]!
    dd8a:	mov	r0, r4
    dd8c:	mov	r1, r5
    dd8e:	movs	r3, #0
    dd90:	movs	r2, #10
    dd92:	bl	b53c <__aeabi_uldivmod>
    dd96:	mov	r4, r0
    dd98:	mov	r5, r1
    dd9a:	orrs.w	r3, r4, r5
    dd9e:	bne.n	dd78 <_svfprintf_r+0x368>
    dda0:	add	r3, sp, #192	; 0xc0
    dda2:	subs	r3, r3, r6
    dda4:	str	r3, [sp, #36]	; 0x24
    dda6:	ldr	r3, [sp, #36]	; 0x24
    dda8:	cmp	r3, fp
    ddaa:	it	lt
    ddac:	movlt	r3, fp
    ddae:	str	r3, [sp, #16]
    ddb0:	movs	r3, #0
    ddb2:	str	r3, [sp, #60]	; 0x3c
    ddb4:	cbz	r7, ddbc <_svfprintf_r+0x3ac>
    ddb6:	ldr	r3, [sp, #16]
    ddb8:	adds	r3, #1
    ddba:	str	r3, [sp, #16]
    ddbc:	ldr	r3, [sp, #12]
    ddbe:	ands.w	r3, r3, #2
    ddc2:	str	r3, [sp, #44]	; 0x2c
    ddc4:	beq.n	ddcc <_svfprintf_r+0x3bc>
    ddc6:	ldr	r3, [sp, #16]
    ddc8:	adds	r3, #2
    ddca:	str	r3, [sp, #16]
    ddcc:	ldr	r3, [sp, #12]
    ddce:	ands.w	r3, r3, #132	; 0x84
    ddd2:	str	r3, [sp, #48]	; 0x30
    ddd4:	bne.w	e38e <_svfprintf_r+0x97e>
    ddd8:	ldr	r3, [sp, #32]
    ddda:	ldr	r2, [sp, #16]
    dddc:	subs	r5, r3, r2
    ddde:	cmp	r5, #0
    dde0:	ble.w	e38e <_svfprintf_r+0x97e>
    dde4:	cmp	r5, #16
    dde6:	ldr	r1, [sp, #148]	; 0x94
    dde8:	ldr	r2, [sp, #144]	; 0x90
    ddea:	ldr	r7, [pc, #672]	; (e08c <_svfprintf_r+0x67c>)
    ddec:	ble.n	de3e <_svfprintf_r+0x42e>
    ddee:	str	r6, [sp, #80]	; 0x50
    ddf0:	mov	r0, r9
    ddf2:	movs	r4, #16
    ddf4:	mov	r9, r7
    ddf6:	ldr	r6, [sp, #20]
    ddf8:	mov	r7, r5
    ddfa:	ldr	r5, [sp, #24]
    ddfc:	b.n	de08 <_svfprintf_r+0x3f8>
    ddfe:	subs	r7, #16
    de00:	cmp	r7, #16
    de02:	add.w	r0, r0, #8
    de06:	ble.n	de36 <_svfprintf_r+0x426>
    de08:	adds	r2, #1
    de0a:	ldr	r3, [pc, #640]	; (e08c <_svfprintf_r+0x67c>)
    de0c:	str	r2, [sp, #144]	; 0x90
    de0e:	adds	r1, #16
    de10:	cmp	r2, #7
    de12:	str	r1, [sp, #148]	; 0x94
    de14:	stmia.w	r0, {r3, r4}
    de18:	ble.n	ddfe <_svfprintf_r+0x3ee>
    de1a:	add	r2, sp, #140	; 0x8c
    de1c:	mov	r1, r6
    de1e:	mov	r0, r5
    de20:	bl	129a8 <__ssprint_r>
    de24:	cmp	r0, #0
    de26:	bne.w	dc04 <_svfprintf_r+0x1f4>
    de2a:	subs	r7, #16
    de2c:	cmp	r7, #16
    de2e:	ldr	r1, [sp, #148]	; 0x94
    de30:	ldr	r2, [sp, #144]	; 0x90
    de32:	add	r0, sp, #192	; 0xc0
    de34:	bgt.n	de08 <_svfprintf_r+0x3f8>
    de36:	ldr	r6, [sp, #80]	; 0x50
    de38:	mov	r5, r7
    de3a:	mov	r7, r9
    de3c:	mov	r9, r0
    de3e:	adds	r2, #1
    de40:	adds	r4, r5, r1
    de42:	cmp	r2, #7
    de44:	str	r4, [sp, #148]	; 0x94
    de46:	str	r2, [sp, #144]	; 0x90
    de48:	str.w	r7, [r9]
    de4c:	str.w	r5, [r9, #4]
    de50:	bgt.w	e6ae <_svfprintf_r+0xc9e>
    de54:	ldrb.w	r7, [sp, #111]	; 0x6f
    de58:	add.w	r9, r9, #8
    de5c:	cbz	r7, de7c <_svfprintf_r+0x46c>
    de5e:	ldr	r3, [sp, #144]	; 0x90
    de60:	adds	r3, #1
    de62:	adds	r4, #1
    de64:	add.w	r1, sp, #111	; 0x6f
    de68:	movs	r2, #1
    de6a:	cmp	r3, #7
    de6c:	str	r4, [sp, #148]	; 0x94
    de6e:	str	r3, [sp, #144]	; 0x90
    de70:	stmia.w	r9, {r1, r2}
    de74:	bgt.w	e5c2 <_svfprintf_r+0xbb2>
    de78:	add.w	r9, r9, #8
    de7c:	ldr	r3, [sp, #44]	; 0x2c
    de7e:	cbz	r3, de9c <_svfprintf_r+0x48c>
    de80:	ldr	r3, [sp, #144]	; 0x90
    de82:	adds	r3, #1
    de84:	adds	r4, #2
    de86:	add	r1, sp, #112	; 0x70
    de88:	movs	r2, #2
    de8a:	cmp	r3, #7
    de8c:	str	r4, [sp, #148]	; 0x94
    de8e:	str	r3, [sp, #144]	; 0x90
    de90:	stmia.w	r9, {r1, r2}
    de94:	bgt.w	e5da <_svfprintf_r+0xbca>
    de98:	add.w	r9, r9, #8
    de9c:	ldr	r3, [sp, #48]	; 0x30
    de9e:	cmp	r3, #128	; 0x80
    dea0:	beq.w	e466 <_svfprintf_r+0xa56>
    dea4:	ldr	r3, [sp, #36]	; 0x24
    dea6:	rsb	r7, r3, fp
    deaa:	cmp	r7, #0
    deac:	ble.n	df16 <_svfprintf_r+0x506>
    deae:	ldr	r2, [pc, #480]	; (e090 <_svfprintf_r+0x680>)
    deb0:	ldr	r3, [sp, #144]	; 0x90
    deb2:	str	r2, [sp, #44]	; 0x2c
    deb4:	cmp	r7, #16
    deb6:	ble.n	defe <_svfprintf_r+0x4ee>
    deb8:	mov	r2, r4
    deba:	mov.w	fp, #16
    debe:	ldr	r5, [sp, #24]
    dec0:	ldr	r4, [sp, #20]
    dec2:	b.n	dece <_svfprintf_r+0x4be>
    dec4:	subs	r7, #16
    dec6:	cmp	r7, #16
    dec8:	add.w	r9, r9, #8
    decc:	ble.n	defc <_svfprintf_r+0x4ec>
    dece:	adds	r3, #1
    ded0:	adds	r2, #16
    ded2:	cmp	r3, #7
    ded4:	str	r2, [sp, #148]	; 0x94
    ded6:	str	r3, [sp, #144]	; 0x90
    ded8:	stmia.w	r9, {sl, fp}
    dedc:	ble.n	dec4 <_svfprintf_r+0x4b4>
    dede:	add	r2, sp, #140	; 0x8c
    dee0:	mov	r1, r4
    dee2:	mov	r0, r5
    dee4:	bl	129a8 <__ssprint_r>
    dee8:	cmp	r0, #0
    deea:	bne.w	dc04 <_svfprintf_r+0x1f4>
    deee:	subs	r7, #16
    def0:	cmp	r7, #16
    def2:	ldr	r2, [sp, #148]	; 0x94
    def4:	ldr	r3, [sp, #144]	; 0x90
    def6:	add.w	r9, sp, #192	; 0xc0
    defa:	bgt.n	dece <_svfprintf_r+0x4be>
    defc:	mov	r4, r2
    defe:	adds	r3, #1
    df00:	ldr	r2, [sp, #44]	; 0x2c
    df02:	str	r3, [sp, #144]	; 0x90
    df04:	add	r4, r7
    df06:	cmp	r3, #7
    df08:	str	r4, [sp, #148]	; 0x94
    df0a:	stmia.w	r9, {r2, r7}
    df0e:	bgt.w	e5aa <_svfprintf_r+0xb9a>
    df12:	add.w	r9, r9, #8
    df16:	ldr	r3, [sp, #12]
    df18:	lsls	r2, r3, #23
    df1a:	bmi.w	e392 <_svfprintf_r+0x982>
    df1e:	ldr	r3, [sp, #144]	; 0x90
    df20:	ldr	r1, [sp, #36]	; 0x24
    df22:	str.w	r6, [r9]
    df26:	adds	r3, #1
    df28:	add	r4, r1
    df2a:	cmp	r3, #7
    df2c:	str	r4, [sp, #148]	; 0x94
    df2e:	str.w	r1, [r9, #4]
    df32:	str	r3, [sp, #144]	; 0x90
    df34:	bgt.w	e57e <_svfprintf_r+0xb6e>
    df38:	add.w	r9, r9, #8
    df3c:	ldr	r3, [sp, #12]
    df3e:	lsls	r1, r3, #29
    df40:	bpl.n	dfc2 <_svfprintf_r+0x5b2>
    df42:	ldr	r3, [sp, #32]
    df44:	ldr	r2, [sp, #16]
    df46:	subs	r5, r3, r2
    df48:	cmp	r5, #0
    df4a:	ble.n	dfc2 <_svfprintf_r+0x5b2>
    df4c:	cmp	r5, #16
    df4e:	ldr	r3, [sp, #144]	; 0x90
    df50:	ldr	r7, [pc, #312]	; (e08c <_svfprintf_r+0x67c>)
    df52:	ble.n	df9c <_svfprintf_r+0x58c>
    df54:	mov	r2, r4
    df56:	movs	r6, #16
    df58:	ldr.w	fp, [sp, #24]
    df5c:	ldr	r4, [sp, #20]
    df5e:	b.n	df6a <_svfprintf_r+0x55a>
    df60:	subs	r5, #16
    df62:	cmp	r5, #16
    df64:	add.w	r9, r9, #8
    df68:	ble.n	df9a <_svfprintf_r+0x58a>
    df6a:	adds	r3, #1
    df6c:	ldr	r1, [pc, #284]	; (e08c <_svfprintf_r+0x67c>)
    df6e:	str	r3, [sp, #144]	; 0x90
    df70:	adds	r2, #16
    df72:	cmp	r3, #7
    df74:	str	r2, [sp, #148]	; 0x94
    df76:	stmia.w	r9, {r1, r6}
    df7a:	ble.n	df60 <_svfprintf_r+0x550>
    df7c:	add	r2, sp, #140	; 0x8c
    df7e:	mov	r1, r4
    df80:	mov	r0, fp
    df82:	bl	129a8 <__ssprint_r>
    df86:	cmp	r0, #0
    df88:	bne.w	dc04 <_svfprintf_r+0x1f4>
    df8c:	subs	r5, #16
    df8e:	cmp	r5, #16
    df90:	ldr	r2, [sp, #148]	; 0x94
    df92:	ldr	r3, [sp, #144]	; 0x90
    df94:	add.w	r9, sp, #192	; 0xc0
    df98:	bgt.n	df6a <_svfprintf_r+0x55a>
    df9a:	mov	r4, r2
    df9c:	adds	r3, #1
    df9e:	add	r4, r5
    dfa0:	cmp	r3, #7
    dfa2:	str	r4, [sp, #148]	; 0x94
    dfa4:	str	r3, [sp, #144]	; 0x90
    dfa6:	str.w	r7, [r9]
    dfaa:	str.w	r5, [r9, #4]
    dfae:	ble.n	dfc2 <_svfprintf_r+0x5b2>
    dfb0:	add	r2, sp, #140	; 0x8c
    dfb2:	ldr	r1, [sp, #20]
    dfb4:	ldr	r0, [sp, #24]
    dfb6:	bl	129a8 <__ssprint_r>
    dfba:	cmp	r0, #0
    dfbc:	bne.w	dc04 <_svfprintf_r+0x1f4>
    dfc0:	ldr	r4, [sp, #148]	; 0x94
    dfc2:	ldr	r3, [sp, #28]
    dfc4:	ldr	r2, [sp, #32]
    dfc6:	ldr	r1, [sp, #16]
    dfc8:	cmp	r2, r1
    dfca:	ite	ge
    dfcc:	addge	r3, r3, r2
    dfce:	addlt	r3, r3, r1
    dfd0:	str	r3, [sp, #28]
    dfd2:	cmp	r4, #0
    dfd4:	bne.w	e596 <_svfprintf_r+0xb86>
    dfd8:	movs	r3, #0
    dfda:	str	r3, [sp, #144]	; 0x90
    dfdc:	add.w	r9, sp, #192	; 0xc0
    dfe0:	b.n	da5e <_svfprintf_r+0x4e>
    dfe2:	str	r3, [sp, #52]	; 0x34
    dfe4:	mov	fp, r5
    dfe6:	cmp	r2, #0
    dfe8:	bne.w	f0b0 <_svfprintf_r+0x16a0>
    dfec:	ldr	r3, [sp, #12]
    dfee:	ldr	r7, [sp, #40]	; 0x28
    dff0:	lsls	r2, r3, #28
    dff2:	add.w	r7, r7, #7
    dff6:	bpl.w	eae2 <_svfprintf_r+0x10d2>
    dffa:	bic.w	r3, r7, #7
    dffe:	vldr	d7, [r3]
    e002:	vstr	d7, [sp, #64]	; 0x40
    e006:	add.w	r2, r3, #8
    e00a:	str	r2, [sp, #40]	; 0x28
    e00c:	ldrd	r1, r2, [sp, #64]	; 0x40
    e010:	bic.w	r3, r2, #2147483648	; 0x80000000
    e014:	str	r1, [sp, #88]	; 0x58
    e016:	str	r3, [sp, #92]	; 0x5c
    e018:	ldrd	r4, r5, [sp, #88]	; 0x58
    e01c:	mov.w	r2, #4294967295
    e020:	mov	r0, r4
    e022:	mov	r1, r5
    e024:	ldr	r3, [pc, #108]	; (e094 <_svfprintf_r+0x684>)
    e026:	bl	b1c4 <__aeabi_dcmpun>
    e02a:	cmp	r0, #0
    e02c:	bne.w	e9e4 <_svfprintf_r+0xfd4>
    e030:	mov.w	r2, #4294967295
    e034:	ldr	r3, [pc, #92]	; (e094 <_svfprintf_r+0x684>)
    e036:	mov	r0, r4
    e038:	mov	r1, r5
    e03a:	bl	b188 <__aeabi_dcmple>
    e03e:	cmp	r0, #0
    e040:	bne.w	e9e4 <_svfprintf_r+0xfd4>
    e044:	movs	r2, #0
    e046:	movs	r3, #0
    e048:	ldrd	r0, r1, [sp, #64]	; 0x40
    e04c:	bl	b174 <__aeabi_dcmplt>
    e050:	cmp	r0, #0
    e052:	bne.w	eefa <_svfprintf_r+0x14ea>
    e056:	ldrb.w	r7, [sp, #111]	; 0x6f
    e05a:	ldr	r6, [pc, #60]	; (e098 <_svfprintf_r+0x688>)
    e05c:	ldr	r3, [pc, #60]	; (e09c <_svfprintf_r+0x68c>)
    e05e:	ldr	r1, [sp, #12]
    e060:	bic.w	r1, r1, #128	; 0x80
    e064:	str	r1, [sp, #12]
    e066:	ldr	r1, [sp, #52]	; 0x34
    e068:	movs	r2, #3
    e06a:	mov.w	fp, #0
    e06e:	str	r2, [sp, #16]
    e070:	cmp	r1, #71	; 0x47
    e072:	it	le
    e074:	movle	r6, r3
    e076:	str	r2, [sp, #36]	; 0x24
    e078:	str.w	fp, [sp, #60]	; 0x3c
    e07c:	b.n	ddb4 <_svfprintf_r+0x3a4>
    e07e:	ldr	r3, [sp, #12]
    e080:	orr.w	r3, r3, #8
    e084:	str	r3, [sp, #12]
    e086:	ldrb.w	r3, [r8]
    e08a:	b.n	dac4 <_svfprintf_r+0xb4>
    e08c:	.word	0x00013844
    e090:	.word	0x000137f0
    e094:	.word	0x7fefffff
    e098:	.word	0x00013804
    e09c:	.word	0x00013800
    e0a0:	str	r3, [sp, #52]	; 0x34
    e0a2:	mov	fp, r5
    e0a4:	cmp	r2, #0
    e0a6:	bne.w	f0c8 <_svfprintf_r+0x16b8>
    e0aa:	ldr	r3, [sp, #12]
    e0ac:	orr.w	r3, r3, #16
    e0b0:	str	r3, [sp, #12]
    e0b2:	ldr	r2, [sp, #12]
    e0b4:	ands.w	r3, r2, #32
    e0b8:	bne.w	dc30 <_svfprintf_r+0x220>
    e0bc:	ldr	r1, [sp, #12]
    e0be:	ands.w	r2, r1, #16
    e0c2:	beq.w	e97c <_svfprintf_r+0xf6c>
    e0c6:	ldr	r0, [sp, #40]	; 0x28
    e0c8:	strb.w	r3, [sp, #111]	; 0x6f
    e0cc:	cmp.w	fp, #0
    e0d0:	ldr	r4, [r0, #0]
    e0d2:	add.w	r7, r0, #4
    e0d6:	mov.w	r5, #0
    e0da:	blt.w	eb10 <_svfprintf_r+0x1100>
    e0de:	mov	r2, r1
    e0e0:	bic.w	r2, r2, #128	; 0x80
    e0e4:	str	r2, [sp, #12]
    e0e6:	orrs.w	r2, r4, r5
    e0ea:	str	r7, [sp, #40]	; 0x28
    e0ec:	beq.w	e364 <_svfprintf_r+0x954>
    e0f0:	mov	r7, r3
    e0f2:	b.n	dc5c <_svfprintf_r+0x24c>
    e0f4:	str	r3, [sp, #52]	; 0x34
    e0f6:	mov	fp, r5
    e0f8:	cmp	r2, #0
    e0fa:	bne.w	f0c0 <_svfprintf_r+0x16b0>
    e0fe:	ldr	r3, [sp, #12]
    e100:	orr.w	r3, r3, #16
    e104:	str	r3, [sp, #12]
    e106:	ldr	r2, [sp, #12]
    e108:	ands.w	r3, r2, #32
    e10c:	beq.w	e768 <_svfprintf_r+0xd58>
    e110:	ldr	r7, [sp, #40]	; 0x28
    e112:	adds	r7, #7
    e114:	bic.w	r3, r7, #7
    e118:	movs	r7, #0
    e11a:	add.w	r1, r3, #8
    e11e:	cmp	fp, r7
    e120:	str	r1, [sp, #40]	; 0x28
    e122:	ldrd	r4, r5, [r3]
    e126:	strb.w	r7, [sp, #111]	; 0x6f
    e12a:	blt.w	e7da <_svfprintf_r+0xdca>
    e12e:	bic.w	r3, r2, #128	; 0x80
    e132:	str	r3, [sp, #12]
    e134:	orrs.w	r3, r4, r5
    e138:	bne.w	dd6c <_svfprintf_r+0x35c>
    e13c:	cmp.w	fp, #0
    e140:	beq.w	e32e <_svfprintf_r+0x91e>
    e144:	movs	r4, #0
    e146:	add	r6, sp, #256	; 0x100
    e148:	adds	r4, #48	; 0x30
    e14a:	strb.w	r4, [r6, #-65]!
    e14e:	b.n	dda0 <_svfprintf_r+0x390>
    e150:	str	r3, [sp, #52]	; 0x34
    e152:	mov	fp, r5
    e154:	cmp	r2, #0
    e156:	bne.w	f0b8 <_svfprintf_r+0x16a8>
    e15a:	ldr	r3, [sp, #12]
    e15c:	ldr	r0, [pc, #700]	; (e41c <_svfprintf_r+0xa0c>)
    e15e:	lsls	r5, r3, #26
    e160:	bpl.w	e2ce <_svfprintf_r+0x8be>
    e164:	ldr	r7, [sp, #40]	; 0x28
    e166:	adds	r7, #7
    e168:	bic.w	r3, r7, #7
    e16c:	ldrd	r4, r5, [r3]
    e170:	add.w	r2, r3, #8
    e174:	str	r2, [sp, #40]	; 0x28
    e176:	ldr	r2, [sp, #12]
    e178:	ands.w	r7, r2, #1
    e17c:	beq.w	e5f2 <_svfprintf_r+0xbe2>
    e180:	orrs.w	r3, r4, r5
    e184:	beq.w	eb8c <_svfprintf_r+0x117c>
    e188:	ldrb.w	r2, [sp, #52]	; 0x34
    e18c:	strb.w	r2, [sp, #113]	; 0x71
    e190:	movs	r7, #0
    e192:	ldr	r2, [sp, #12]
    e194:	strb.w	r7, [sp, #111]	; 0x6f
    e198:	movs	r3, #48	; 0x30
    e19a:	cmp	fp, r7
    e19c:	strb.w	r3, [sp, #112]	; 0x70
    e1a0:	orr.w	r3, r2, #2
    e1a4:	blt.w	ef04 <_svfprintf_r+0x14f4>
    e1a8:	bic.w	r3, r2, #128	; 0x80
    e1ac:	orr.w	r3, r3, #2
    e1b0:	str	r3, [sp, #12]
    e1b2:	add	r6, sp, #192	; 0xc0
    e1b4:	lsrs	r3, r4, #4
    e1b6:	and.w	r1, r4, #15
    e1ba:	orr.w	r3, r3, r5, lsl #28
    e1be:	lsrs	r2, r5, #4
    e1c0:	mov	r4, r3
    e1c2:	mov	r5, r2
    e1c4:	ldrb	r3, [r0, r1]
    e1c6:	strb.w	r3, [r6, #-1]!
    e1ca:	orrs.w	r3, r4, r5
    e1ce:	bne.n	e1b4 <_svfprintf_r+0x7a4>
    e1d0:	b.n	dda0 <_svfprintf_r+0x390>
    e1d2:	ldr	r1, [sp, #40]	; 0x28
    e1d4:	str	r3, [sp, #52]	; 0x34
    e1d6:	ldr	r2, [r1, #0]
    e1d8:	strb.w	r2, [sp, #152]	; 0x98
    e1dc:	movs	r3, #0
    e1de:	mov	r2, r1
    e1e0:	mov	r7, r3
    e1e2:	strb.w	r3, [sp, #111]	; 0x6f
    e1e6:	adds	r2, #4
    e1e8:	movs	r3, #1
    e1ea:	str	r3, [sp, #16]
    e1ec:	mov	fp, r7
    e1ee:	str	r7, [sp, #60]	; 0x3c
    e1f0:	str	r2, [sp, #40]	; 0x28
    e1f2:	str	r3, [sp, #36]	; 0x24
    e1f4:	add	r6, sp, #152	; 0x98
    e1f6:	b.n	ddbc <_svfprintf_r+0x3ac>
    e1f8:	str	r3, [sp, #52]	; 0x34
    e1fa:	mov	fp, r5
    e1fc:	cmp	r2, #0
    e1fe:	beq.w	dd28 <_svfprintf_r+0x318>
    e202:	strb.w	r1, [sp, #111]	; 0x6f
    e206:	b.n	dd28 <_svfprintf_r+0x318>
    e208:	ldr	r3, [sp, #12]
    e20a:	orr.w	r3, r3, #64	; 0x40
    e20e:	str	r3, [sp, #12]
    e210:	ldrb.w	r3, [r8]
    e214:	b.n	dac4 <_svfprintf_r+0xb4>
    e216:	ldrb.w	r3, [r8]
    e21a:	cmp	r1, #0
    e21c:	bne.w	dac4 <_svfprintf_r+0xb4>
    e220:	movs	r2, #1
    e222:	movs	r1, #32
    e224:	b.n	dac4 <_svfprintf_r+0xb4>
    e226:	ldr	r3, [sp, #12]
    e228:	orr.w	r3, r3, #1
    e22c:	str	r3, [sp, #12]
    e22e:	ldrb.w	r3, [r8]
    e232:	b.n	dac4 <_svfprintf_r+0xb4>
    e234:	ldr	r4, [sp, #40]	; 0x28
    e236:	ldr	r3, [r4, #0]
    e238:	str	r3, [sp, #32]
    e23a:	mov	r0, r3
    e23c:	cmp	r0, #0
    e23e:	mov	r3, r4
    e240:	add.w	r3, r3, #4
    e244:	blt.w	db88 <_svfprintf_r+0x178>
    e248:	str	r3, [sp, #40]	; 0x28
    e24a:	ldrb.w	r3, [r8]
    e24e:	b.n	dac4 <_svfprintf_r+0xb4>
    e250:	ldrb.w	r3, [r8]
    e254:	movs	r2, #1
    e256:	movs	r1, #43	; 0x2b
    e258:	b.n	dac4 <_svfprintf_r+0xb4>
    e25a:	ldr	r3, [sp, #12]
    e25c:	orr.w	r3, r3, #32
    e260:	str	r3, [sp, #12]
    e262:	ldrb.w	r3, [r8]
    e266:	b.n	dac4 <_svfprintf_r+0xb4>
    e268:	ldr	r2, [sp, #40]	; 0x28
    e26a:	str	r3, [sp, #52]	; 0x34
    e26c:	ldr	r6, [r2, #0]
    e26e:	movs	r4, #0
    e270:	strb.w	r4, [sp, #111]	; 0x6f
    e274:	adds	r7, r2, #4
    e276:	cmp	r6, #0
    e278:	beq.w	eeb4 <_svfprintf_r+0x14a4>
    e27c:	cmp	r5, #0
    e27e:	blt.w	ed44 <_svfprintf_r+0x1334>
    e282:	mov	r2, r5
    e284:	mov	r1, r4
    e286:	mov	r0, r6
    e288:	bl	bf40 <memchr>
    e28c:	cmp	r0, #0
    e28e:	beq.w	ef58 <_svfprintf_r+0x1548>
    e292:	subs	r3, r0, r6
    e294:	str	r3, [sp, #36]	; 0x24
    e296:	mov	fp, r4
    e298:	bic.w	r3, r3, r3, asr #31
    e29c:	str	r7, [sp, #40]	; 0x28
    e29e:	str	r3, [sp, #16]
    e2a0:	str.w	fp, [sp, #60]	; 0x3c
    e2a4:	ldrb.w	r7, [sp, #111]	; 0x6f
    e2a8:	b.n	ddb4 <_svfprintf_r+0x3a4>
    e2aa:	str	r3, [sp, #52]	; 0x34
    e2ac:	mov	fp, r5
    e2ae:	cmp	r2, #0
    e2b0:	beq.w	e106 <_svfprintf_r+0x6f6>
    e2b4:	strb.w	r1, [sp, #111]	; 0x6f
    e2b8:	b.n	e106 <_svfprintf_r+0x6f6>
    e2ba:	str	r3, [sp, #52]	; 0x34
    e2bc:	mov	fp, r5
    e2be:	cmp	r2, #0
    e2c0:	bne.w	f0e0 <_svfprintf_r+0x16d0>
    e2c4:	ldr	r3, [sp, #12]
    e2c6:	ldr	r0, [pc, #344]	; (e420 <_svfprintf_r+0xa10>)
    e2c8:	lsls	r5, r3, #26
    e2ca:	bmi.w	e164 <_svfprintf_r+0x754>
    e2ce:	ldr	r3, [sp, #12]
    e2d0:	lsls	r4, r3, #27
    e2d2:	bpl.w	eb52 <_svfprintf_r+0x1142>
    e2d6:	ldr	r2, [sp, #40]	; 0x28
    e2d8:	mov	r3, r2
    e2da:	adds	r3, #4
    e2dc:	ldr	r4, [r2, #0]
    e2de:	str	r3, [sp, #40]	; 0x28
    e2e0:	movs	r5, #0
    e2e2:	b.n	e176 <_svfprintf_r+0x766>
    e2e4:	ldrb.w	r3, [r8]
    e2e8:	cmp	r3, #108	; 0x6c
    e2ea:	beq.w	ec72 <_svfprintf_r+0x1262>
    e2ee:	ldr	r0, [sp, #12]
    e2f0:	orr.w	r0, r0, #16
    e2f4:	str	r0, [sp, #12]
    e2f6:	b.w	dac4 <_svfprintf_r+0xb4>
    e2fa:	cmp	r2, #0
    e2fc:	bne.w	f0d8 <_svfprintf_r+0x16c8>
    e300:	ldr	r3, [sp, #12]
    e302:	lsls	r3, r3, #26
    e304:	bpl.w	e9b6 <_svfprintf_r+0xfa6>
    e308:	ldr	r2, [sp, #40]	; 0x28
    e30a:	ldr	r1, [sp, #28]
    e30c:	ldr	r3, [r2, #0]
    e30e:	asrs	r5, r1, #31
    e310:	mov	r0, r1
    e312:	adds	r2, #4
    e314:	mov	r1, r5
    e316:	str	r2, [sp, #40]	; 0x28
    e318:	strd	r0, r1, [r3]
    e31c:	b.w	da5e <_svfprintf_r+0x4e>
    e320:	ldr	r0, [pc, #252]	; (e420 <_svfprintf_r+0xa10>)
    e322:	str	r2, [sp, #52]	; 0x34
    e324:	cmp.w	fp, #0
    e328:	bne.w	e614 <_svfprintf_r+0xc04>
    e32c:	mov	r7, fp
    e32e:	mov.w	fp, #0
    e332:	str.w	fp, [sp, #36]	; 0x24
    e336:	add	r6, sp, #192	; 0xc0
    e338:	b.n	dda6 <_svfprintf_r+0x396>
    e33a:	str	r3, [sp, #52]	; 0x34
    e33c:	cmp	r2, #0
    e33e:	bne.w	f0d0 <_svfprintf_r+0x16c0>
    e342:	ldr	r2, [sp, #52]	; 0x34
    e344:	cmp	r2, #0
    e346:	beq.w	dbf6 <_svfprintf_r+0x1e6>
    e34a:	movs	r3, #0
    e34c:	movs	r1, #1
    e34e:	mov	r7, r3
    e350:	str	r1, [sp, #16]
    e352:	strb.w	r2, [sp, #152]	; 0x98
    e356:	strb.w	r3, [sp, #111]	; 0x6f
    e35a:	mov	fp, r3
    e35c:	str	r3, [sp, #60]	; 0x3c
    e35e:	str	r1, [sp, #36]	; 0x24
    e360:	add	r6, sp, #152	; 0x98
    e362:	b.n	ddbc <_svfprintf_r+0x3ac>
    e364:	cmp.w	fp, #0
    e368:	beq.w	ef88 <_svfprintf_r+0x1578>
    e36c:	movs	r7, #0
    e36e:	movs	r4, #0
    e370:	movs	r5, #0
    e372:	b.n	dc5c <_svfprintf_r+0x24c>
    e374:	ldr	r0, [pc, #168]	; (e420 <_svfprintf_r+0xa10>)
    e376:	str	r3, [sp, #12]
    e378:	str	r2, [sp, #52]	; 0x34
    e37a:	orrs.w	r3, r4, r5
    e37e:	str	r7, [sp, #40]	; 0x28
    e380:	mov.w	r7, #0
    e384:	bne.w	e1b2 <_svfprintf_r+0x7a2>
    e388:	movs	r4, #0
    e38a:	movs	r5, #0
    e38c:	b.n	e1b2 <_svfprintf_r+0x7a2>
    e38e:	ldr	r4, [sp, #148]	; 0x94
    e390:	b.n	de5c <_svfprintf_r+0x44c>
    e392:	ldr	r3, [sp, #52]	; 0x34
    e394:	cmp	r3, #101	; 0x65
    e396:	ble.w	e4ee <_svfprintf_r+0xade>
    e39a:	movs	r2, #0
    e39c:	movs	r3, #0
    e39e:	ldrd	r0, r1, [sp, #64]	; 0x40
    e3a2:	bl	b160 <__aeabi_dcmpeq>
    e3a6:	cmp	r0, #0
    e3a8:	beq.w	e618 <_svfprintf_r+0xc08>
    e3ac:	ldr	r3, [sp, #144]	; 0x90
    e3ae:	ldr	r2, [pc, #116]	; (e424 <_svfprintf_r+0xa14>)
    e3b0:	str.w	r2, [r9]
    e3b4:	adds	r3, #1
    e3b6:	adds	r4, #1
    e3b8:	movs	r2, #1
    e3ba:	cmp	r3, #7
    e3bc:	str	r4, [sp, #148]	; 0x94
    e3be:	str	r3, [sp, #144]	; 0x90
    e3c0:	str.w	r2, [r9, #4]
    e3c4:	bgt.w	eba4 <_svfprintf_r+0x1194>
    e3c8:	add.w	r9, r9, #8
    e3cc:	ldr	r3, [sp, #116]	; 0x74
    e3ce:	ldr	r2, [sp, #56]	; 0x38
    e3d0:	cmp	r3, r2
    e3d2:	blt.n	e3dc <_svfprintf_r+0x9cc>
    e3d4:	ldr	r3, [sp, #12]
    e3d6:	lsls	r3, r3, #31
    e3d8:	bpl.w	df3c <_svfprintf_r+0x52c>
    e3dc:	ldr	r3, [sp, #144]	; 0x90
    e3de:	ldr	r1, [sp, #72]	; 0x48
    e3e0:	ldr	r2, [sp, #76]	; 0x4c
    e3e2:	str.w	r2, [r9]
    e3e6:	adds	r3, #1
    e3e8:	add	r4, r1
    e3ea:	cmp	r3, #7
    e3ec:	str	r4, [sp, #148]	; 0x94
    e3ee:	str.w	r1, [r9, #4]
    e3f2:	str	r3, [sp, #144]	; 0x90
    e3f4:	bgt.w	ec86 <_svfprintf_r+0x1276>
    e3f8:	add.w	r9, r9, #8
    e3fc:	ldr	r3, [sp, #56]	; 0x38
    e3fe:	subs	r5, r3, #1
    e400:	cmp	r5, #0
    e402:	ble.w	df3c <_svfprintf_r+0x52c>
    e406:	ldr	r2, [pc, #32]	; (e428 <_svfprintf_r+0xa18>)
    e408:	ldr	r3, [sp, #144]	; 0x90
    e40a:	str	r2, [sp, #44]	; 0x2c
    e40c:	cmp	r5, #16
    e40e:	ble.w	e7e4 <_svfprintf_r+0xdd4>
    e412:	movs	r6, #16
    e414:	ldr	r7, [sp, #24]
    e416:	ldr.w	fp, [sp, #20]
    e41a:	b.n	e438 <_svfprintf_r+0xa28>
    e41c:	.word	0x00013810
    e420:	.word	0x00013824
    e424:	.word	0x00013840
    e428:	.word	0x000137f0
    e42c:	add.w	r9, r9, #8
    e430:	subs	r5, #16
    e432:	cmp	r5, #16
    e434:	ble.w	e7e4 <_svfprintf_r+0xdd4>
    e438:	adds	r3, #1
    e43a:	adds	r4, #16
    e43c:	cmp	r3, #7
    e43e:	str	r4, [sp, #148]	; 0x94
    e440:	str	r3, [sp, #144]	; 0x90
    e442:	str.w	sl, [r9]
    e446:	str.w	r6, [r9, #4]
    e44a:	ble.n	e42c <_svfprintf_r+0xa1c>
    e44c:	add	r2, sp, #140	; 0x8c
    e44e:	mov	r1, fp
    e450:	mov	r0, r7
    e452:	bl	129a8 <__ssprint_r>
    e456:	cmp	r0, #0
    e458:	bne.w	dc04 <_svfprintf_r+0x1f4>
    e45c:	ldr	r4, [sp, #148]	; 0x94
    e45e:	ldr	r3, [sp, #144]	; 0x90
    e460:	add.w	r9, sp, #192	; 0xc0
    e464:	b.n	e430 <_svfprintf_r+0xa20>
    e466:	ldr	r3, [sp, #32]
    e468:	ldr	r2, [sp, #16]
    e46a:	subs	r7, r3, r2
    e46c:	cmp	r7, #0
    e46e:	ble.w	dea4 <_svfprintf_r+0x494>
    e472:	ldr	r2, [pc, #752]	; (e764 <_svfprintf_r+0xd54>)
    e474:	ldr	r3, [sp, #144]	; 0x90
    e476:	str	r2, [sp, #44]	; 0x2c
    e478:	cmp	r7, #16
    e47a:	ble.n	e4d4 <_svfprintf_r+0xac4>
    e47c:	mov	r2, r9
    e47e:	mov	r1, r4
    e480:	mov	r9, r7
    e482:	movs	r5, #16
    e484:	mov	r7, r6
    e486:	ldr	r4, [sp, #24]
    e488:	ldr	r6, [sp, #20]
    e48a:	b.n	e49a <_svfprintf_r+0xa8a>
    e48c:	sub.w	r9, r9, #16
    e490:	cmp.w	r9, #16
    e494:	add.w	r2, r2, #8
    e498:	ble.n	e4cc <_svfprintf_r+0xabc>
    e49a:	adds	r3, #1
    e49c:	adds	r1, #16
    e49e:	cmp	r3, #7
    e4a0:	str	r1, [sp, #148]	; 0x94
    e4a2:	str	r3, [sp, #144]	; 0x90
    e4a4:	str.w	sl, [r2]
    e4a8:	str	r5, [r2, #4]
    e4aa:	ble.n	e48c <_svfprintf_r+0xa7c>
    e4ac:	add	r2, sp, #140	; 0x8c
    e4ae:	mov	r1, r6
    e4b0:	mov	r0, r4
    e4b2:	bl	129a8 <__ssprint_r>
    e4b6:	cmp	r0, #0
    e4b8:	bne.w	dc04 <_svfprintf_r+0x1f4>
    e4bc:	sub.w	r9, r9, #16
    e4c0:	cmp.w	r9, #16
    e4c4:	ldr	r1, [sp, #148]	; 0x94
    e4c6:	ldr	r3, [sp, #144]	; 0x90
    e4c8:	add	r2, sp, #192	; 0xc0
    e4ca:	bgt.n	e49a <_svfprintf_r+0xa8a>
    e4cc:	mov	r6, r7
    e4ce:	mov	r4, r1
    e4d0:	mov	r7, r9
    e4d2:	mov	r9, r2
    e4d4:	adds	r3, #1
    e4d6:	ldr	r2, [sp, #44]	; 0x2c
    e4d8:	str	r3, [sp, #144]	; 0x90
    e4da:	add	r4, r7
    e4dc:	cmp	r3, #7
    e4de:	str	r4, [sp, #148]	; 0x94
    e4e0:	stmia.w	r9, {r2, r7}
    e4e4:	bgt.w	e962 <_svfprintf_r+0xf52>
    e4e8:	add.w	r9, r9, #8
    e4ec:	b.n	dea4 <_svfprintf_r+0x494>
    e4ee:	ldr	r3, [sp, #56]	; 0x38
    e4f0:	ldr	r5, [sp, #144]	; 0x90
    e4f2:	cmp	r3, #1
    e4f4:	ble.w	e90c <_svfprintf_r+0xefc>
    e4f8:	adds	r5, #1
    e4fa:	adds	r4, #1
    e4fc:	movs	r3, #1
    e4fe:	cmp	r5, #7
    e500:	str	r4, [sp, #148]	; 0x94
    e502:	str	r5, [sp, #144]	; 0x90
    e504:	str.w	r6, [r9]
    e508:	str.w	r3, [r9, #4]
    e50c:	bgt.w	e92e <_svfprintf_r+0xf1e>
    e510:	add.w	r9, r9, #8
    e514:	ldr	r2, [sp, #72]	; 0x48
    e516:	ldr	r3, [sp, #76]	; 0x4c
    e518:	str.w	r3, [r9]
    e51c:	adds	r5, #1
    e51e:	add	r4, r2
    e520:	cmp	r5, #7
    e522:	str	r4, [sp, #148]	; 0x94
    e524:	str	r5, [sp, #144]	; 0x90
    e526:	str.w	r2, [r9, #4]
    e52a:	bgt.w	e948 <_svfprintf_r+0xf38>
    e52e:	add.w	r9, r9, #8
    e532:	movs	r3, #0
    e534:	movs	r2, #0
    e536:	ldrd	r0, r1, [sp, #64]	; 0x40
    e53a:	bl	b160 <__aeabi_dcmpeq>
    e53e:	ldr	r3, [sp, #56]	; 0x38
    e540:	cmp	r0, #0
    e542:	bne.w	e6cc <_svfprintf_r+0xcbc>
    e546:	subs	r3, #1
    e548:	adds	r5, #1
    e54a:	adds	r6, #1
    e54c:	add	r4, r3
    e54e:	cmp	r5, #7
    e550:	str	r5, [sp, #144]	; 0x90
    e552:	str	r4, [sp, #148]	; 0x94
    e554:	str.w	r6, [r9]
    e558:	str.w	r3, [r9, #4]
    e55c:	bgt.w	e74a <_svfprintf_r+0xd3a>
    e560:	add.w	r9, r9, #8
    e564:	ldr	r2, [sp, #84]	; 0x54
    e566:	str.w	r2, [r9, #4]
    e56a:	adds	r5, #1
    e56c:	add	r4, r2
    e56e:	add	r3, sp, #124	; 0x7c
    e570:	cmp	r5, #7
    e572:	str	r4, [sp, #148]	; 0x94
    e574:	str	r5, [sp, #144]	; 0x90
    e576:	str.w	r3, [r9]
    e57a:	ble.w	df38 <_svfprintf_r+0x528>
    e57e:	add	r2, sp, #140	; 0x8c
    e580:	ldr	r1, [sp, #20]
    e582:	ldr	r0, [sp, #24]
    e584:	bl	129a8 <__ssprint_r>
    e588:	cmp	r0, #0
    e58a:	bne.w	dc04 <_svfprintf_r+0x1f4>
    e58e:	ldr	r4, [sp, #148]	; 0x94
    e590:	add.w	r9, sp, #192	; 0xc0
    e594:	b.n	df3c <_svfprintf_r+0x52c>
    e596:	add	r2, sp, #140	; 0x8c
    e598:	ldr	r1, [sp, #20]
    e59a:	ldr	r0, [sp, #24]
    e59c:	bl	129a8 <__ssprint_r>
    e5a0:	cmp	r0, #0
    e5a2:	beq.w	dfd8 <_svfprintf_r+0x5c8>
    e5a6:	b.w	dc04 <_svfprintf_r+0x1f4>
    e5aa:	add	r2, sp, #140	; 0x8c
    e5ac:	ldr	r1, [sp, #20]
    e5ae:	ldr	r0, [sp, #24]
    e5b0:	bl	129a8 <__ssprint_r>
    e5b4:	cmp	r0, #0
    e5b6:	bne.w	dc04 <_svfprintf_r+0x1f4>
    e5ba:	ldr	r4, [sp, #148]	; 0x94
    e5bc:	add.w	r9, sp, #192	; 0xc0
    e5c0:	b.n	df16 <_svfprintf_r+0x506>
    e5c2:	add	r2, sp, #140	; 0x8c
    e5c4:	ldr	r1, [sp, #20]
    e5c6:	ldr	r0, [sp, #24]
    e5c8:	bl	129a8 <__ssprint_r>
    e5cc:	cmp	r0, #0
    e5ce:	bne.w	dc04 <_svfprintf_r+0x1f4>
    e5d2:	ldr	r4, [sp, #148]	; 0x94
    e5d4:	add.w	r9, sp, #192	; 0xc0
    e5d8:	b.n	de7c <_svfprintf_r+0x46c>
    e5da:	add	r2, sp, #140	; 0x8c
    e5dc:	ldr	r1, [sp, #20]
    e5de:	ldr	r0, [sp, #24]
    e5e0:	bl	129a8 <__ssprint_r>
    e5e4:	cmp	r0, #0
    e5e6:	bne.w	dc04 <_svfprintf_r+0x1f4>
    e5ea:	ldr	r4, [sp, #148]	; 0x94
    e5ec:	add.w	r9, sp, #192	; 0xc0
    e5f0:	b.n	de9c <_svfprintf_r+0x48c>
    e5f2:	cmp.w	fp, #0
    e5f6:	strb.w	r7, [sp, #111]	; 0x6f
    e5fa:	blt.w	ebbc <_svfprintf_r+0x11ac>
    e5fe:	bic.w	r3, r2, #128	; 0x80
    e602:	str	r3, [sp, #12]
    e604:	orrs.w	r3, r4, r5
    e608:	bne.w	e1b2 <_svfprintf_r+0x7a2>
    e60c:	cmp.w	fp, #0
    e610:	beq.w	e32c <_svfprintf_r+0x91c>
    e614:	movs	r7, #0
    e616:	b.n	e388 <_svfprintf_r+0x978>
    e618:	ldr	r5, [sp, #116]	; 0x74
    e61a:	cmp	r5, #0
    e61c:	ble.w	ebc2 <_svfprintf_r+0x11b2>
    e620:	ldr	r3, [sp, #60]	; 0x3c
    e622:	ldr	r2, [sp, #56]	; 0x38
    e624:	cmp	r3, r2
    e626:	it	ge
    e628:	movge	r3, r2
    e62a:	cmp	r3, #0
    e62c:	mov	r5, r3
    e62e:	ble.n	e64c <_svfprintf_r+0xc3c>
    e630:	ldr	r3, [sp, #144]	; 0x90
    e632:	str.w	r6, [r9]
    e636:	adds	r3, #1
    e638:	add	r4, r5
    e63a:	cmp	r3, #7
    e63c:	str	r4, [sp, #148]	; 0x94
    e63e:	str.w	r5, [r9, #4]
    e642:	str	r3, [sp, #144]	; 0x90
    e644:	bgt.w	ed9a <_svfprintf_r+0x138a>
    e648:	add.w	r9, r9, #8
    e64c:	ldr	r3, [sp, #60]	; 0x3c
    e64e:	cmp	r5, #0
    e650:	it	ge
    e652:	subge	r3, r3, r5
    e654:	cmp	r3, #0
    e656:	mov	r5, r3
    e658:	ble.w	e84c <_svfprintf_r+0xe3c>
    e65c:	ldr	r2, [pc, #260]	; (e764 <_svfprintf_r+0xd54>)
    e65e:	ldr	r3, [sp, #144]	; 0x90
    e660:	str	r2, [sp, #44]	; 0x2c
    e662:	cmp	r5, #16
    e664:	ble.w	eb6e <_svfprintf_r+0x115e>
    e668:	mov	r2, r4
    e66a:	movs	r7, #16
    e66c:	ldr.w	fp, [sp, #24]
    e670:	ldr	r4, [sp, #20]
    e672:	b.n	e680 <_svfprintf_r+0xc70>
    e674:	add.w	r9, r9, #8
    e678:	subs	r5, #16
    e67a:	cmp	r5, #16
    e67c:	ble.w	eb6c <_svfprintf_r+0x115c>
    e680:	adds	r3, #1
    e682:	adds	r2, #16
    e684:	cmp	r3, #7
    e686:	str	r2, [sp, #148]	; 0x94
    e688:	str	r3, [sp, #144]	; 0x90
    e68a:	str.w	sl, [r9]
    e68e:	str.w	r7, [r9, #4]
    e692:	ble.n	e674 <_svfprintf_r+0xc64>
    e694:	add	r2, sp, #140	; 0x8c
    e696:	mov	r1, r4
    e698:	mov	r0, fp
    e69a:	bl	129a8 <__ssprint_r>
    e69e:	cmp	r0, #0
    e6a0:	bne.w	dc04 <_svfprintf_r+0x1f4>
    e6a4:	ldr	r2, [sp, #148]	; 0x94
    e6a6:	ldr	r3, [sp, #144]	; 0x90
    e6a8:	add.w	r9, sp, #192	; 0xc0
    e6ac:	b.n	e678 <_svfprintf_r+0xc68>
    e6ae:	add	r2, sp, #140	; 0x8c
    e6b0:	ldr	r1, [sp, #20]
    e6b2:	ldr	r0, [sp, #24]
    e6b4:	bl	129a8 <__ssprint_r>
    e6b8:	cmp	r0, #0
    e6ba:	bne.w	dc04 <_svfprintf_r+0x1f4>
    e6be:	ldrb.w	r7, [sp, #111]	; 0x6f
    e6c2:	ldr	r4, [sp, #148]	; 0x94
    e6c4:	add.w	r9, sp, #192	; 0xc0
    e6c8:	b.w	de5c <_svfprintf_r+0x44c>
    e6cc:	subs	r6, r3, #1
    e6ce:	cmp	r6, #0
    e6d0:	ble.w	e564 <_svfprintf_r+0xb54>
    e6d4:	ldr	r3, [pc, #140]	; (e764 <_svfprintf_r+0xd54>)
    e6d6:	str	r3, [sp, #44]	; 0x2c
    e6d8:	cmp	r6, #16
    e6da:	ble.n	e736 <_svfprintf_r+0xd26>
    e6dc:	str.w	r8, [sp, #36]	; 0x24
    e6e0:	movs	r7, #16
    e6e2:	mov	r8, r6
    e6e4:	ldr.w	fp, [sp, #24]
    e6e8:	ldr	r6, [sp, #20]
    e6ea:	b.n	e6fa <_svfprintf_r+0xcea>
    e6ec:	sub.w	r8, r8, #16
    e6f0:	cmp.w	r8, #16
    e6f4:	add.w	r9, r9, #8
    e6f8:	ble.n	e730 <_svfprintf_r+0xd20>
    e6fa:	adds	r5, #1
    e6fc:	adds	r4, #16
    e6fe:	cmp	r5, #7
    e700:	str	r4, [sp, #148]	; 0x94
    e702:	str	r5, [sp, #144]	; 0x90
    e704:	str.w	sl, [r9]
    e708:	str.w	r7, [r9, #4]
    e70c:	ble.n	e6ec <_svfprintf_r+0xcdc>
    e70e:	add	r2, sp, #140	; 0x8c
    e710:	mov	r1, r6
    e712:	mov	r0, fp
    e714:	bl	129a8 <__ssprint_r>
    e718:	cmp	r0, #0
    e71a:	bne.w	dc04 <_svfprintf_r+0x1f4>
    e71e:	sub.w	r8, r8, #16
    e722:	cmp.w	r8, #16
    e726:	ldr	r4, [sp, #148]	; 0x94
    e728:	ldr	r5, [sp, #144]	; 0x90
    e72a:	add.w	r9, sp, #192	; 0xc0
    e72e:	bgt.n	e6fa <_svfprintf_r+0xcea>
    e730:	mov	r6, r8
    e732:	ldr.w	r8, [sp, #36]	; 0x24
    e736:	ldr	r3, [sp, #44]	; 0x2c
    e738:	adds	r5, #1
    e73a:	add	r4, r6
    e73c:	cmp	r5, #7
    e73e:	str	r4, [sp, #148]	; 0x94
    e740:	str	r5, [sp, #144]	; 0x90
    e742:	stmia.w	r9, {r3, r6}
    e746:	ble.w	e560 <_svfprintf_r+0xb50>
    e74a:	add	r2, sp, #140	; 0x8c
    e74c:	ldr	r1, [sp, #20]
    e74e:	ldr	r0, [sp, #24]
    e750:	bl	129a8 <__ssprint_r>
    e754:	cmp	r0, #0
    e756:	bne.w	dc04 <_svfprintf_r+0x1f4>
    e75a:	ldr	r4, [sp, #148]	; 0x94
    e75c:	ldr	r5, [sp, #144]	; 0x90
    e75e:	add.w	r9, sp, #192	; 0xc0
    e762:	b.n	e564 <_svfprintf_r+0xb54>
    e764:	.word	0x000137f0
    e768:	ldr	r1, [sp, #12]
    e76a:	ands.w	r2, r1, #16
    e76e:	beq.w	eb18 <_svfprintf_r+0x1108>
    e772:	ldr	r0, [sp, #40]	; 0x28
    e774:	strb.w	r3, [sp, #111]	; 0x6f
    e778:	cmp.w	fp, #0
    e77c:	ldr	r4, [r0, #0]
    e77e:	add.w	r7, r0, #4
    e782:	mov.w	r5, #0
    e786:	blt.n	e7d6 <_svfprintf_r+0xdc6>
    e788:	mov	r2, r1
    e78a:	bic.w	r2, r2, #128	; 0x80
    e78e:	str	r2, [sp, #12]
    e790:	orrs.w	r2, r4, r5
    e794:	str	r7, [sp, #40]	; 0x28
    e796:	mov	r7, r3
    e798:	bne.w	dd6c <_svfprintf_r+0x35c>
    e79c:	b.n	e13c <_svfprintf_r+0x72c>
    e79e:	ldr	r3, [sp, #12]
    e7a0:	lsls	r0, r3, #27
    e7a2:	bmi.n	e7fa <_svfprintf_r+0xdea>
    e7a4:	ldr	r3, [sp, #12]
    e7a6:	lsls	r1, r3, #25
    e7a8:	bpl.n	e7fa <_svfprintf_r+0xdea>
    e7aa:	ldr	r1, [sp, #40]	; 0x28
    e7ac:	ldrsh.w	r4, [r1]
    e7b0:	adds	r1, #4
    e7b2:	asrs	r5, r4, #31
    e7b4:	mov	r2, r4
    e7b6:	mov	r3, r5
    e7b8:	str	r1, [sp, #40]	; 0x28
    e7ba:	b.w	dd46 <_svfprintf_r+0x336>
    e7be:	ldr	r1, [sp, #40]	; 0x28
    e7c0:	strb.w	r3, [sp, #111]	; 0x6f
    e7c4:	cmp.w	fp, #0
    e7c8:	ldr	r4, [r1, #0]
    e7ca:	add.w	r7, r1, #4
    e7ce:	mov.w	r5, #0
    e7d2:	bge.w	ec6e <_svfprintf_r+0x125e>
    e7d6:	str	r7, [sp, #40]	; 0x28
    e7d8:	mov	r7, r3
    e7da:	orrs.w	r3, r4, r5
    e7de:	bne.w	dd6c <_svfprintf_r+0x35c>
    e7e2:	b.n	e146 <_svfprintf_r+0x736>
    e7e4:	adds	r3, #1
    e7e6:	ldr	r2, [sp, #44]	; 0x2c
    e7e8:	str	r3, [sp, #144]	; 0x90
    e7ea:	add	r4, r5
    e7ec:	cmp	r3, #7
    e7ee:	str	r4, [sp, #148]	; 0x94
    e7f0:	stmia.w	r9, {r2, r5}
    e7f4:	ble.w	df38 <_svfprintf_r+0x528>
    e7f8:	b.n	e57e <_svfprintf_r+0xb6e>
    e7fa:	ldr	r2, [sp, #40]	; 0x28
    e7fc:	ldr	r4, [r2, #0]
    e7fe:	mov	r3, r2
    e800:	adds	r3, #4
    e802:	asrs	r5, r4, #31
    e804:	mov	r2, r4
    e806:	str	r3, [sp, #40]	; 0x28
    e808:	cmp	r2, #0
    e80a:	mov	r3, r5
    e80c:	sbcs.w	r3, r3, #0
    e810:	bge.w	dd50 <_svfprintf_r+0x340>
    e814:	negs	r4, r4
    e816:	mov.w	r7, #45	; 0x2d
    e81a:	sbc.w	r5, r5, r5, lsl #1
    e81e:	cmp.w	fp, #0
    e822:	strb.w	r7, [sp, #111]	; 0x6f
    e826:	blt.w	dd6c <_svfprintf_r+0x35c>
    e82a:	ldr	r3, [sp, #12]
    e82c:	bic.w	r3, r3, #128	; 0x80
    e830:	str	r3, [sp, #12]
    e832:	b.w	dd6c <_svfprintf_r+0x35c>
    e836:	add	r2, sp, #140	; 0x8c
    e838:	ldr	r1, [sp, #20]
    e83a:	ldr	r0, [sp, #24]
    e83c:	bl	129a8 <__ssprint_r>
    e840:	cmp	r0, #0
    e842:	bne.w	dc04 <_svfprintf_r+0x1f4>
    e846:	ldr	r4, [sp, #148]	; 0x94
    e848:	add.w	r9, sp, #192	; 0xc0
    e84c:	ldr	r2, [sp, #60]	; 0x3c
    e84e:	ldr	r3, [sp, #116]	; 0x74
    e850:	add	r2, r6
    e852:	mov	r7, r2
    e854:	ldr	r2, [sp, #56]	; 0x38
    e856:	cmp	r3, r2
    e858:	blt.n	e8ea <_svfprintf_r+0xeda>
    e85a:	ldr	r2, [sp, #12]
    e85c:	lsls	r5, r2, #31
    e85e:	bmi.n	e8ea <_svfprintf_r+0xeda>
    e860:	ldr	r1, [sp, #56]	; 0x38
    e862:	add	r6, r1
    e864:	subs	r5, r6, r7
    e866:	subs	r3, r1, r3
    e868:	cmp	r5, r3
    e86a:	it	ge
    e86c:	movge	r5, r3
    e86e:	cmp	r5, #0
    e870:	mov	r6, r5
    e872:	ble.n	e890 <_svfprintf_r+0xe80>
    e874:	ldr	r2, [sp, #144]	; 0x90
    e876:	str.w	r7, [r9]
    e87a:	adds	r2, #1
    e87c:	add	r4, r5
    e87e:	cmp	r2, #7
    e880:	str	r4, [sp, #148]	; 0x94
    e882:	str.w	r5, [r9, #4]
    e886:	str	r2, [sp, #144]	; 0x90
    e888:	bgt.w	ee88 <_svfprintf_r+0x1478>
    e88c:	add.w	r9, r9, #8
    e890:	cmp	r6, #0
    e892:	ite	ge
    e894:	subge	r5, r3, r6
    e896:	movlt	r5, r3
    e898:	cmp	r5, #0
    e89a:	ble.w	df3c <_svfprintf_r+0x52c>
    e89e:	ldr	r2, [pc, #744]	; (eb88 <_svfprintf_r+0x1178>)
    e8a0:	ldr	r3, [sp, #144]	; 0x90
    e8a2:	str	r2, [sp, #44]	; 0x2c
    e8a4:	cmp	r5, #16
    e8a6:	ble.n	e7e4 <_svfprintf_r+0xdd4>
    e8a8:	movs	r6, #16
    e8aa:	ldr	r7, [sp, #24]
    e8ac:	ldr.w	fp, [sp, #20]
    e8b0:	b.n	e8bc <_svfprintf_r+0xeac>
    e8b2:	add.w	r9, r9, #8
    e8b6:	subs	r5, #16
    e8b8:	cmp	r5, #16
    e8ba:	ble.n	e7e4 <_svfprintf_r+0xdd4>
    e8bc:	adds	r3, #1
    e8be:	adds	r4, #16
    e8c0:	cmp	r3, #7
    e8c2:	str	r4, [sp, #148]	; 0x94
    e8c4:	str	r3, [sp, #144]	; 0x90
    e8c6:	str.w	sl, [r9]
    e8ca:	str.w	r6, [r9, #4]
    e8ce:	ble.n	e8b2 <_svfprintf_r+0xea2>
    e8d0:	add	r2, sp, #140	; 0x8c
    e8d2:	mov	r1, fp
    e8d4:	mov	r0, r7
    e8d6:	bl	129a8 <__ssprint_r>
    e8da:	cmp	r0, #0
    e8dc:	bne.w	dc04 <_svfprintf_r+0x1f4>
    e8e0:	ldr	r4, [sp, #148]	; 0x94
    e8e2:	ldr	r3, [sp, #144]	; 0x90
    e8e4:	add.w	r9, sp, #192	; 0xc0
    e8e8:	b.n	e8b6 <_svfprintf_r+0xea6>
    e8ea:	ldr	r2, [sp, #144]	; 0x90
    e8ec:	ldr	r0, [sp, #72]	; 0x48
    e8ee:	ldr	r1, [sp, #76]	; 0x4c
    e8f0:	str.w	r1, [r9]
    e8f4:	adds	r2, #1
    e8f6:	add	r4, r0
    e8f8:	cmp	r2, #7
    e8fa:	str	r4, [sp, #148]	; 0x94
    e8fc:	str.w	r0, [r9, #4]
    e900:	str	r2, [sp, #144]	; 0x90
    e902:	bgt.w	ee6e <_svfprintf_r+0x145e>
    e906:	add.w	r9, r9, #8
    e90a:	b.n	e860 <_svfprintf_r+0xe50>
    e90c:	ldr	r3, [sp, #12]
    e90e:	lsls	r0, r3, #31
    e910:	bmi.w	e4f8 <_svfprintf_r+0xae8>
    e914:	adds	r5, #1
    e916:	adds	r4, #1
    e918:	movs	r3, #1
    e91a:	cmp	r5, #7
    e91c:	str	r4, [sp, #148]	; 0x94
    e91e:	str	r5, [sp, #144]	; 0x90
    e920:	str.w	r6, [r9]
    e924:	str.w	r3, [r9, #4]
    e928:	ble.w	e560 <_svfprintf_r+0xb50>
    e92c:	b.n	e74a <_svfprintf_r+0xd3a>
    e92e:	add	r2, sp, #140	; 0x8c
    e930:	ldr	r1, [sp, #20]
    e932:	ldr	r0, [sp, #24]
    e934:	bl	129a8 <__ssprint_r>
    e938:	cmp	r0, #0
    e93a:	bne.w	dc04 <_svfprintf_r+0x1f4>
    e93e:	ldr	r4, [sp, #148]	; 0x94
    e940:	ldr	r5, [sp, #144]	; 0x90
    e942:	add.w	r9, sp, #192	; 0xc0
    e946:	b.n	e514 <_svfprintf_r+0xb04>
    e948:	add	r2, sp, #140	; 0x8c
    e94a:	ldr	r1, [sp, #20]
    e94c:	ldr	r0, [sp, #24]
    e94e:	bl	129a8 <__ssprint_r>
    e952:	cmp	r0, #0
    e954:	bne.w	dc04 <_svfprintf_r+0x1f4>
    e958:	ldr	r4, [sp, #148]	; 0x94
    e95a:	ldr	r5, [sp, #144]	; 0x90
    e95c:	add.w	r9, sp, #192	; 0xc0
    e960:	b.n	e532 <_svfprintf_r+0xb22>
    e962:	add	r2, sp, #140	; 0x8c
    e964:	ldr	r1, [sp, #20]
    e966:	ldr	r0, [sp, #24]
    e968:	bl	129a8 <__ssprint_r>
    e96c:	cmp	r0, #0
    e96e:	bne.w	dc04 <_svfprintf_r+0x1f4>
    e972:	ldr	r4, [sp, #148]	; 0x94
    e974:	add.w	r9, sp, #192	; 0xc0
    e978:	b.w	dea4 <_svfprintf_r+0x494>
    e97c:	ldr	r1, [sp, #12]
    e97e:	ands.w	r3, r1, #64	; 0x40
    e982:	beq.w	eaf8 <_svfprintf_r+0x10e8>
    e986:	ldr	r0, [sp, #40]	; 0x28
    e988:	strb.w	r2, [sp, #111]	; 0x6f
    e98c:	mov	r3, r0
    e98e:	cmp.w	fp, #0
    e992:	add.w	r3, r3, #4
    e996:	ldrh	r4, [r0, #0]
    e998:	mov.w	r5, #0
    e99c:	blt.w	ed20 <_svfprintf_r+0x1310>
    e9a0:	bic.w	r1, r1, #128	; 0x80
    e9a4:	str	r1, [sp, #12]
    e9a6:	orrs.w	r1, r4, r5
    e9aa:	str	r3, [sp, #40]	; 0x28
    e9ac:	beq.w	e364 <_svfprintf_r+0x954>
    e9b0:	mov	r7, r2
    e9b2:	b.w	dc5c <_svfprintf_r+0x24c>
    e9b6:	ldr	r3, [sp, #12]
    e9b8:	lsls	r7, r3, #27
    e9ba:	bmi.n	e9d4 <_svfprintf_r+0xfc4>
    e9bc:	ldr	r3, [sp, #12]
    e9be:	lsls	r6, r3, #25
    e9c0:	bpl.n	e9d4 <_svfprintf_r+0xfc4>
    e9c2:	ldr	r2, [sp, #40]	; 0x28
    e9c4:	ldr	r3, [r2, #0]
    e9c6:	adds	r2, #4
    e9c8:	str	r2, [sp, #40]	; 0x28
    e9ca:	ldrh.w	r2, [sp, #28]
    e9ce:	strh	r2, [r3, #0]
    e9d0:	b.w	da5e <_svfprintf_r+0x4e>
    e9d4:	ldr	r2, [sp, #40]	; 0x28
    e9d6:	ldr	r3, [r2, #0]
    e9d8:	adds	r2, #4
    e9da:	str	r2, [sp, #40]	; 0x28
    e9dc:	ldr	r2, [sp, #28]
    e9de:	str	r2, [r3, #0]
    e9e0:	b.w	da5e <_svfprintf_r+0x4e>
    e9e4:	ldrd	r0, r1, [sp, #64]	; 0x40
    e9e8:	mov	r2, r0
    e9ea:	mov	r3, r1
    e9ec:	bl	b1c4 <__aeabi_dcmpun>
    e9f0:	cmp	r0, #0
    e9f2:	bne.w	eff0 <_svfprintf_r+0x15e0>
    e9f6:	ldr	r3, [sp, #52]	; 0x34
    e9f8:	cmp.w	fp, #4294967295
    e9fc:	bic.w	r7, r3, #32
    ea00:	beq.w	eed2 <_svfprintf_r+0x14c2>
    ea04:	cmp	r7, #71	; 0x47
    ea06:	beq.w	ed0e <_svfprintf_r+0x12fe>
    ea0a:	ldr	r3, [sp, #68]	; 0x44
    ea0c:	ldr	r2, [sp, #12]
    ea0e:	cmp	r3, #0
    ea10:	orr.w	r2, r2, #256	; 0x100
    ea14:	str	r2, [sp, #44]	; 0x2c
    ea16:	blt.w	ef0a <_svfprintf_r+0x14fa>
    ea1a:	vldr	d7, [sp, #64]	; 0x40
    ea1e:	vstr	d7, [sp, #96]	; 0x60
    ea22:	movs	r3, #0
    ea24:	str	r3, [sp, #16]
    ea26:	ldr	r3, [sp, #52]	; 0x34
    ea28:	cmp	r3, #102	; 0x66
    ea2a:	beq.w	eed8 <_svfprintf_r+0x14c8>
    ea2e:	cmp	r3, #70	; 0x46
    ea30:	beq.w	ecbe <_svfprintf_r+0x12ae>
    ea34:	cmp	r7, #69	; 0x45
    ea36:	ite	eq
    ea38:	addeq.w	r5, fp, #1
    ea3c:	movne	r5, fp
    ea3e:	add	r2, sp, #132	; 0x84
    ea40:	add	r3, sp, #120	; 0x78
    ea42:	str	r2, [sp, #4]
    ea44:	str	r3, [sp, #0]
    ea46:	mov	r2, r5
    ea48:	add	r3, sp, #116	; 0x74
    ea4a:	movs	r1, #2
    ea4c:	vldr	d0, [sp, #96]	; 0x60
    ea50:	ldr	r0, [sp, #24]
    ea52:	bl	10218 <_dtoa_r>
    ea56:	ldr	r3, [sp, #52]	; 0x34
    ea58:	cmp	r3, #103	; 0x67
    ea5a:	mov	r6, r0
    ea5c:	bne.w	ef36 <_svfprintf_r+0x1526>
    ea60:	ldr	r3, [sp, #12]
    ea62:	lsls	r2, r3, #31
    ea64:	bpl.w	efda <_svfprintf_r+0x15ca>
    ea68:	adds	r4, r6, r5
    ea6a:	movs	r2, #0
    ea6c:	movs	r3, #0
    ea6e:	ldrd	r0, r1, [sp, #96]	; 0x60
    ea72:	bl	b160 <__aeabi_dcmpeq>
    ea76:	cmp	r0, #0
    ea78:	bne.w	ed96 <_svfprintf_r+0x1386>
    ea7c:	ldr	r3, [sp, #132]	; 0x84
    ea7e:	cmp	r4, r3
    ea80:	bls.n	ea90 <_svfprintf_r+0x1080>
    ea82:	movs	r1, #48	; 0x30
    ea84:	adds	r2, r3, #1
    ea86:	str	r2, [sp, #132]	; 0x84
    ea88:	strb	r1, [r3, #0]
    ea8a:	ldr	r3, [sp, #132]	; 0x84
    ea8c:	cmp	r4, r3
    ea8e:	bhi.n	ea84 <_svfprintf_r+0x1074>
    ea90:	subs	r3, r3, r6
    ea92:	cmp	r7, #71	; 0x47
    ea94:	str	r3, [sp, #56]	; 0x38
    ea96:	beq.w	ed88 <_svfprintf_r+0x1378>
    ea9a:	ldr	r3, [sp, #52]	; 0x34
    ea9c:	cmp	r3, #101	; 0x65
    ea9e:	ble.w	ef54 <_svfprintf_r+0x1544>
    eaa2:	ldr	r3, [sp, #52]	; 0x34
    eaa4:	cmp	r3, #102	; 0x66
    eaa6:	ldr	r3, [sp, #116]	; 0x74
    eaa8:	str	r3, [sp, #60]	; 0x3c
    eaaa:	beq.w	ef6e <_svfprintf_r+0x155e>
    eaae:	ldr	r2, [sp, #60]	; 0x3c
    eab0:	ldr	r1, [sp, #56]	; 0x38
    eab2:	cmp	r2, r1
    eab4:	blt.w	ef1c <_svfprintf_r+0x150c>
    eab8:	ldr	r3, [sp, #12]
    eaba:	lsls	r1, r3, #31
    eabc:	bmi.w	efde <_svfprintf_r+0x15ce>
    eac0:	bic.w	r3, r2, r2, asr #31
    eac4:	str	r2, [sp, #36]	; 0x24
    eac6:	movs	r2, #103	; 0x67
    eac8:	str	r2, [sp, #52]	; 0x34
    eaca:	ldr	r2, [sp, #16]
    eacc:	cmp	r2, #0
    eace:	bne.w	ed30 <_svfprintf_r+0x1320>
    ead2:	str	r3, [sp, #16]
    ead4:	ldr	r3, [sp, #44]	; 0x2c
    ead6:	str	r3, [sp, #12]
    ead8:	mov	fp, r2
    eada:	ldrb.w	r7, [sp, #111]	; 0x6f
    eade:	b.w	ddb4 <_svfprintf_r+0x3a4>
    eae2:	bic.w	r7, r7, #7
    eae6:	vldr	d7, [r7]
    eaea:	add.w	r3, r7, #8
    eaee:	vstr	d7, [sp, #64]	; 0x40
    eaf2:	str	r3, [sp, #40]	; 0x28
    eaf4:	b.w	e00c <_svfprintf_r+0x5fc>
    eaf8:	ldr	r1, [sp, #40]	; 0x28
    eafa:	strb.w	r3, [sp, #111]	; 0x6f
    eafe:	cmp.w	fp, #0
    eb02:	ldr	r4, [r1, #0]
    eb04:	add.w	r7, r1, #4
    eb08:	mov.w	r5, #0
    eb0c:	bge.w	ec68 <_svfprintf_r+0x1258>
    eb10:	str	r7, [sp, #40]	; 0x28
    eb12:	movs	r7, #0
    eb14:	b.w	dc5c <_svfprintf_r+0x24c>
    eb18:	ldr	r1, [sp, #12]
    eb1a:	ands.w	r3, r1, #64	; 0x40
    eb1e:	beq.w	e7be <_svfprintf_r+0xdae>
    eb22:	ldr	r0, [sp, #40]	; 0x28
    eb24:	strb.w	r2, [sp, #111]	; 0x6f
    eb28:	mov	r3, r0
    eb2a:	cmp.w	fp, #0
    eb2e:	add.w	r3, r3, #4
    eb32:	ldrh	r4, [r0, #0]
    eb34:	mov.w	r5, #0
    eb38:	blt.w	ed1a <_svfprintf_r+0x130a>
    eb3c:	bic.w	r1, r1, #128	; 0x80
    eb40:	str	r1, [sp, #12]
    eb42:	orrs.w	r1, r4, r5
    eb46:	str	r3, [sp, #40]	; 0x28
    eb48:	mov	r7, r2
    eb4a:	bne.w	dd6c <_svfprintf_r+0x35c>
    eb4e:	b.w	e13c <_svfprintf_r+0x72c>
    eb52:	ldr	r3, [sp, #12]
    eb54:	ldr	r2, [sp, #40]	; 0x28
    eb56:	tst.w	r3, #64	; 0x40
    eb5a:	mov	r3, r2
    eb5c:	beq.w	ed24 <_svfprintf_r+0x1314>
    eb60:	adds	r3, #4
    eb62:	ldrh	r4, [r2, #0]
    eb64:	str	r3, [sp, #40]	; 0x28
    eb66:	movs	r5, #0
    eb68:	b.w	e176 <_svfprintf_r+0x766>
    eb6c:	mov	r4, r2
    eb6e:	adds	r3, #1
    eb70:	ldr	r2, [sp, #44]	; 0x2c
    eb72:	str	r3, [sp, #144]	; 0x90
    eb74:	add	r4, r5
    eb76:	cmp	r3, #7
    eb78:	str	r4, [sp, #148]	; 0x94
    eb7a:	stmia.w	r9, {r2, r5}
    eb7e:	bgt.w	e836 <_svfprintf_r+0xe26>
    eb82:	add.w	r9, r9, #8
    eb86:	b.n	e84c <_svfprintf_r+0xe3c>
    eb88:	.word	0x000137f0
    eb8c:	movs	r7, #0
    eb8e:	cmp	fp, r7
    eb90:	strb.w	r7, [sp, #111]	; 0x6f
    eb94:	blt.w	e388 <_svfprintf_r+0x978>
    eb98:	ldr	r3, [sp, #12]
    eb9a:	bic.w	r3, r3, #128	; 0x80
    eb9e:	str	r3, [sp, #12]
    eba0:	b.w	e324 <_svfprintf_r+0x914>
    eba4:	add	r2, sp, #140	; 0x8c
    eba6:	ldr	r1, [sp, #20]
    eba8:	ldr	r0, [sp, #24]
    ebaa:	bl	129a8 <__ssprint_r>
    ebae:	cmp	r0, #0
    ebb0:	bne.w	dc04 <_svfprintf_r+0x1f4>
    ebb4:	ldr	r4, [sp, #148]	; 0x94
    ebb6:	add.w	r9, sp, #192	; 0xc0
    ebba:	b.n	e3cc <_svfprintf_r+0x9bc>
    ebbc:	ldr	r7, [sp, #40]	; 0x28
    ebbe:	b.w	e37a <_svfprintf_r+0x96a>
    ebc2:	ldr	r3, [sp, #144]	; 0x90
    ebc4:	ldr	r2, [pc, #736]	; (eea8 <_svfprintf_r+0x1498>)
    ebc6:	str.w	r2, [r9]
    ebca:	adds	r3, #1
    ebcc:	adds	r4, #1
    ebce:	movs	r2, #1
    ebd0:	cmp	r3, #7
    ebd2:	str	r4, [sp, #148]	; 0x94
    ebd4:	str	r3, [sp, #144]	; 0x90
    ebd6:	str.w	r2, [r9, #4]
    ebda:	bgt.w	ecf4 <_svfprintf_r+0x12e4>
    ebde:	add.w	r9, r9, #8
    ebe2:	cbnz	r5, ebf0 <_svfprintf_r+0x11e0>
    ebe4:	ldr	r3, [sp, #56]	; 0x38
    ebe6:	cbnz	r3, ebf0 <_svfprintf_r+0x11e0>
    ebe8:	ldr	r3, [sp, #12]
    ebea:	lsls	r7, r3, #31
    ebec:	bpl.w	df3c <_svfprintf_r+0x52c>
    ebf0:	ldr	r3, [sp, #144]	; 0x90
    ebf2:	ldr	r1, [sp, #72]	; 0x48
    ebf4:	ldr	r2, [sp, #76]	; 0x4c
    ebf6:	str.w	r2, [r9]
    ebfa:	adds	r3, #1
    ebfc:	add	r4, r1
    ebfe:	cmp	r3, #7
    ec00:	str	r4, [sp, #148]	; 0x94
    ec02:	str.w	r1, [r9, #4]
    ec06:	str	r3, [sp, #144]	; 0x90
    ec08:	bgt.w	efa6 <_svfprintf_r+0x1596>
    ec0c:	add.w	r9, r9, #8
    ec10:	negs	r5, r5
    ec12:	cmp	r5, #0
    ec14:	ble.w	ed6c <_svfprintf_r+0x135c>
    ec18:	ldr	r2, [pc, #656]	; (eeac <_svfprintf_r+0x149c>)
    ec1a:	str	r2, [sp, #44]	; 0x2c
    ec1c:	cmp	r5, #16
    ec1e:	ble.w	edb4 <_svfprintf_r+0x13a4>
    ec22:	mov	r2, r4
    ec24:	movs	r7, #16
    ec26:	ldr.w	fp, [sp, #24]
    ec2a:	ldr	r4, [sp, #20]
    ec2c:	b.n	ec3a <_svfprintf_r+0x122a>
    ec2e:	add.w	r9, r9, #8
    ec32:	subs	r5, #16
    ec34:	cmp	r5, #16
    ec36:	ble.w	edb2 <_svfprintf_r+0x13a2>
    ec3a:	adds	r3, #1
    ec3c:	adds	r2, #16
    ec3e:	cmp	r3, #7
    ec40:	str	r2, [sp, #148]	; 0x94
    ec42:	str	r3, [sp, #144]	; 0x90
    ec44:	str.w	sl, [r9]
    ec48:	str.w	r7, [r9, #4]
    ec4c:	ble.n	ec2e <_svfprintf_r+0x121e>
    ec4e:	add	r2, sp, #140	; 0x8c
    ec50:	mov	r1, r4
    ec52:	mov	r0, fp
    ec54:	bl	129a8 <__ssprint_r>
    ec58:	cmp	r0, #0
    ec5a:	bne.w	dc04 <_svfprintf_r+0x1f4>
    ec5e:	ldr	r2, [sp, #148]	; 0x94
    ec60:	ldr	r3, [sp, #144]	; 0x90
    ec62:	add.w	r9, sp, #192	; 0xc0
    ec66:	b.n	ec32 <_svfprintf_r+0x1222>
    ec68:	ldr	r2, [sp, #12]
    ec6a:	b.w	e0e0 <_svfprintf_r+0x6d0>
    ec6e:	ldr	r2, [sp, #12]
    ec70:	b.n	e78a <_svfprintf_r+0xd7a>
    ec72:	ldr	r3, [sp, #12]
    ec74:	orr.w	r3, r3, #32
    ec78:	str	r3, [sp, #12]
    ec7a:	add.w	r8, r8, #1
    ec7e:	ldrb.w	r3, [r8]
    ec82:	b.w	dac4 <_svfprintf_r+0xb4>
    ec86:	add	r2, sp, #140	; 0x8c
    ec88:	ldr	r1, [sp, #20]
    ec8a:	ldr	r0, [sp, #24]
    ec8c:	bl	129a8 <__ssprint_r>
    ec90:	cmp	r0, #0
    ec92:	bne.w	dc04 <_svfprintf_r+0x1f4>
    ec96:	ldr	r4, [sp, #148]	; 0x94
    ec98:	add.w	r9, sp, #192	; 0xc0
    ec9c:	b.w	e3fc <_svfprintf_r+0x9ec>
    eca0:	movs	r1, #64	; 0x40
    eca2:	ldr	r0, [sp, #24]
    eca4:	bl	b99c <_malloc_r>
    eca8:	ldr	r2, [sp, #20]
    ecaa:	str	r0, [r2, #0]
    ecac:	str	r0, [r2, #16]
    ecae:	cmp	r0, #0
    ecb0:	beq.w	f09a <_svfprintf_r+0x168a>
    ecb4:	ldr	r2, [sp, #20]
    ecb6:	movs	r3, #64	; 0x40
    ecb8:	str	r3, [r2, #20]
    ecba:	b.w	da3e <_svfprintf_r+0x2e>
    ecbe:	add	r2, sp, #132	; 0x84
    ecc0:	add	r3, sp, #120	; 0x78
    ecc2:	str	r2, [sp, #4]
    ecc4:	str	r3, [sp, #0]
    ecc6:	mov	r2, fp
    ecc8:	add	r3, sp, #116	; 0x74
    ecca:	movs	r1, #3
    eccc:	vldr	d0, [sp, #96]	; 0x60
    ecd0:	ldr	r0, [sp, #24]
    ecd2:	bl	10218 <_dtoa_r>
    ecd6:	mov	r5, fp
    ecd8:	mov	r6, r0
    ecda:	ldr	r3, [sp, #52]	; 0x34
    ecdc:	cmp	r3, #70	; 0x46
    ecde:	add.w	r4, r6, r5
    ece2:	bne.w	ea6a <_svfprintf_r+0x105a>
    ece6:	ldrb	r3, [r6, #0]
    ece8:	cmp	r3, #48	; 0x30
    ecea:	beq.w	effc <_svfprintf_r+0x15ec>
    ecee:	ldr	r5, [sp, #116]	; 0x74
    ecf0:	add	r4, r5
    ecf2:	b.n	ea6a <_svfprintf_r+0x105a>
    ecf4:	add	r2, sp, #140	; 0x8c
    ecf6:	ldr	r1, [sp, #20]
    ecf8:	ldr	r0, [sp, #24]
    ecfa:	bl	129a8 <__ssprint_r>
    ecfe:	cmp	r0, #0
    ed00:	bne.w	dc04 <_svfprintf_r+0x1f4>
    ed04:	ldr	r5, [sp, #116]	; 0x74
    ed06:	ldr	r4, [sp, #148]	; 0x94
    ed08:	add.w	r9, sp, #192	; 0xc0
    ed0c:	b.n	ebe2 <_svfprintf_r+0x11d2>
    ed0e:	cmp.w	fp, #0
    ed12:	it	eq
    ed14:	moveq.w	fp, #1
    ed18:	b.n	ea0a <_svfprintf_r+0xffa>
    ed1a:	str	r3, [sp, #40]	; 0x28
    ed1c:	mov	r7, r2
    ed1e:	b.n	e7da <_svfprintf_r+0xdca>
    ed20:	str	r3, [sp, #40]	; 0x28
    ed22:	b.n	eb12 <_svfprintf_r+0x1102>
    ed24:	adds	r3, #4
    ed26:	ldr	r4, [r2, #0]
    ed28:	str	r3, [sp, #40]	; 0x28
    ed2a:	movs	r5, #0
    ed2c:	b.w	e176 <_svfprintf_r+0x766>
    ed30:	movs	r7, #45	; 0x2d
    ed32:	str	r3, [sp, #16]
    ed34:	ldr	r3, [sp, #44]	; 0x2c
    ed36:	str	r3, [sp, #12]
    ed38:	strb.w	r7, [sp, #111]	; 0x6f
    ed3c:	mov.w	fp, #0
    ed40:	b.w	ddb6 <_svfprintf_r+0x3a6>
    ed44:	mov	r0, r6
    ed46:	bl	c800 <strlen>
    ed4a:	mov	fp, r4
    ed4c:	mov	r3, r0
    ed4e:	str	r0, [sp, #36]	; 0x24
    ed50:	b.w	e298 <_svfprintf_r+0x888>
    ed54:	add	r2, sp, #140	; 0x8c
    ed56:	ldr	r1, [sp, #20]
    ed58:	ldr	r0, [sp, #24]
    ed5a:	bl	129a8 <__ssprint_r>
    ed5e:	cmp	r0, #0
    ed60:	bne.w	dc04 <_svfprintf_r+0x1f4>
    ed64:	ldr	r4, [sp, #148]	; 0x94
    ed66:	ldr	r3, [sp, #144]	; 0x90
    ed68:	add.w	r9, sp, #192	; 0xc0
    ed6c:	ldr	r1, [sp, #56]	; 0x38
    ed6e:	str.w	r6, [r9]
    ed72:	adds	r3, #1
    ed74:	add	r4, r1
    ed76:	cmp	r3, #7
    ed78:	str	r4, [sp, #148]	; 0x94
    ed7a:	str	r3, [sp, #144]	; 0x90
    ed7c:	str.w	r1, [r9, #4]
    ed80:	ble.w	df38 <_svfprintf_r+0x528>
    ed84:	b.w	e57e <_svfprintf_r+0xb6e>
    ed88:	ldr	r3, [sp, #116]	; 0x74
    ed8a:	adds	r5, r3, #3
    ed8c:	blt.n	edcc <_svfprintf_r+0x13bc>
    ed8e:	cmp	fp, r3
    ed90:	blt.n	edcc <_svfprintf_r+0x13bc>
    ed92:	str	r3, [sp, #60]	; 0x3c
    ed94:	b.n	eaae <_svfprintf_r+0x109e>
    ed96:	mov	r3, r4
    ed98:	b.n	ea90 <_svfprintf_r+0x1080>
    ed9a:	add	r2, sp, #140	; 0x8c
    ed9c:	ldr	r1, [sp, #20]
    ed9e:	ldr	r0, [sp, #24]
    eda0:	bl	129a8 <__ssprint_r>
    eda4:	cmp	r0, #0
    eda6:	bne.w	dc04 <_svfprintf_r+0x1f4>
    edaa:	ldr	r4, [sp, #148]	; 0x94
    edac:	add.w	r9, sp, #192	; 0xc0
    edb0:	b.n	e64c <_svfprintf_r+0xc3c>
    edb2:	mov	r4, r2
    edb4:	adds	r3, #1
    edb6:	ldr	r2, [sp, #44]	; 0x2c
    edb8:	str	r3, [sp, #144]	; 0x90
    edba:	add	r4, r5
    edbc:	cmp	r3, #7
    edbe:	str	r4, [sp, #148]	; 0x94
    edc0:	stmia.w	r9, {r2, r5}
    edc4:	bgt.n	ed54 <_svfprintf_r+0x1344>
    edc6:	add.w	r9, r9, #8
    edca:	b.n	ed6c <_svfprintf_r+0x135c>
    edcc:	ldr	r2, [sp, #52]	; 0x34
    edce:	subs	r2, #2
    edd0:	str	r2, [sp, #52]	; 0x34
    edd2:	subs	r3, #1
    edd4:	cmp	r3, #0
    edd6:	ldrb.w	r2, [sp, #52]	; 0x34
    edda:	str	r3, [sp, #116]	; 0x74
    eddc:	it	lt
    edde:	neglt	r3, r3
    ede0:	strb.w	r2, [sp, #124]	; 0x7c
    ede4:	ite	lt
    ede6:	movlt	r2, #45	; 0x2d
    ede8:	movge	r2, #43	; 0x2b
    edea:	cmp	r3, #9
    edec:	strb.w	r2, [sp, #125]	; 0x7d
    edf0:	ble.w	efca <_svfprintf_r+0x15ba>
    edf4:	add.w	r0, sp, #139	; 0x8b
    edf8:	mov	r4, r0
    edfa:	ldr	r2, [pc, #180]	; (eeb0 <_svfprintf_r+0x14a0>)
    edfc:	smull	r2, r1, r2, r3
    ee00:	asrs	r2, r3, #31
    ee02:	rsb	r2, r2, r1, asr #2
    ee06:	add.w	r1, r2, r2, lsl #2
    ee0a:	sub.w	r3, r3, r1, lsl #1
    ee0e:	add.w	r1, r3, #48	; 0x30
    ee12:	cmp	r2, #9
    ee14:	mov	r3, r2
    ee16:	strb.w	r1, [r4, #-1]!
    ee1a:	bgt.n	edfa <_svfprintf_r+0x13ea>
    ee1c:	mov	r1, r4
    ee1e:	adds	r3, #48	; 0x30
    ee20:	uxtb	r2, r3
    ee22:	strb.w	r2, [r1, #-1]!
    ee26:	cmp	r0, r1
    ee28:	bls.w	f094 <_svfprintf_r+0x1684>
    ee2c:	add.w	r1, sp, #126	; 0x7e
    ee30:	mov	r3, r4
    ee32:	b.n	ee38 <_svfprintf_r+0x1428>
    ee34:	ldrb.w	r2, [r3], #1
    ee38:	strb.w	r2, [r1], #1
    ee3c:	cmp	r0, r3
    ee3e:	bne.n	ee34 <_svfprintf_r+0x1424>
    ee40:	adds	r3, r0, #1
    ee42:	subs	r3, r3, r4
    ee44:	add.w	r2, sp, #126	; 0x7e
    ee48:	add	r3, r2
    ee4a:	add	r2, sp, #124	; 0x7c
    ee4c:	subs	r3, r3, r2
    ee4e:	ldr	r2, [sp, #56]	; 0x38
    ee50:	str	r3, [sp, #84]	; 0x54
    ee52:	cmp	r2, #1
    ee54:	add	r3, r2
    ee56:	str	r3, [sp, #36]	; 0x24
    ee58:	ble.w	f02a <_svfprintf_r+0x161a>
    ee5c:	ldr	r3, [sp, #36]	; 0x24
    ee5e:	ldr	r2, [sp, #72]	; 0x48
    ee60:	add	r3, r2
    ee62:	movs	r2, #0
    ee64:	str	r3, [sp, #36]	; 0x24
    ee66:	str	r2, [sp, #60]	; 0x3c
    ee68:	bic.w	r3, r3, r3, asr #31
    ee6c:	b.n	eaca <_svfprintf_r+0x10ba>
    ee6e:	add	r2, sp, #140	; 0x8c
    ee70:	ldr	r1, [sp, #20]
    ee72:	ldr	r0, [sp, #24]
    ee74:	bl	129a8 <__ssprint_r>
    ee78:	cmp	r0, #0
    ee7a:	bne.w	dc04 <_svfprintf_r+0x1f4>
    ee7e:	ldr	r3, [sp, #116]	; 0x74
    ee80:	ldr	r4, [sp, #148]	; 0x94
    ee82:	add.w	r9, sp, #192	; 0xc0
    ee86:	b.n	e860 <_svfprintf_r+0xe50>
    ee88:	add	r2, sp, #140	; 0x8c
    ee8a:	ldr	r1, [sp, #20]
    ee8c:	ldr	r0, [sp, #24]
    ee8e:	bl	129a8 <__ssprint_r>
    ee92:	cmp	r0, #0
    ee94:	bne.w	dc04 <_svfprintf_r+0x1f4>
    ee98:	ldr	r3, [sp, #116]	; 0x74
    ee9a:	ldr	r2, [sp, #56]	; 0x38
    ee9c:	ldr	r4, [sp, #148]	; 0x94
    ee9e:	subs	r3, r2, r3
    eea0:	add.w	r9, sp, #192	; 0xc0
    eea4:	b.n	e890 <_svfprintf_r+0xe80>
    eea6:	nop
    eea8:	.word	0x00013840
    eeac:	.word	0x000137f0
    eeb0:	.word	0x66666667
    eeb4:	cmp	r5, #6
    eeb6:	mov	r3, r5
    eeb8:	it	cs
    eeba:	movcs	r3, #6
    eebc:	str	r3, [sp, #36]	; 0x24
    eebe:	bic.w	r3, r3, r3, asr #31
    eec2:	mov	fp, r6
    eec4:	str	r7, [sp, #40]	; 0x28
    eec6:	str	r6, [sp, #60]	; 0x3c
    eec8:	mov	r7, r6
    eeca:	str	r3, [sp, #16]
    eecc:	ldr	r6, [pc, #536]	; (f0e8 <_svfprintf_r+0x16d8>)
    eece:	b.w	ddb4 <_svfprintf_r+0x3a4>
    eed2:	mov.w	fp, #6
    eed6:	b.n	ea0a <_svfprintf_r+0xffa>
    eed8:	add	r2, sp, #132	; 0x84
    eeda:	add	r3, sp, #120	; 0x78
    eedc:	str	r2, [sp, #4]
    eede:	str	r3, [sp, #0]
    eee0:	mov	r2, fp
    eee2:	add	r3, sp, #116	; 0x74
    eee4:	movs	r1, #3
    eee6:	vldr	d0, [sp, #96]	; 0x60
    eeea:	ldr	r0, [sp, #24]
    eeec:	bl	10218 <_dtoa_r>
    eef0:	mov	r5, fp
    eef2:	mov	r6, r0
    eef4:	add.w	r4, r0, fp
    eef8:	b.n	ece6 <_svfprintf_r+0x12d6>
    eefa:	movs	r7, #45	; 0x2d
    eefc:	strb.w	r7, [sp, #111]	; 0x6f
    ef00:	b.w	e05a <_svfprintf_r+0x64a>
    ef04:	str	r3, [sp, #12]
    ef06:	b.w	e1b2 <_svfprintf_r+0x7a2>
    ef0a:	ldrd	r1, r2, [sp, #64]	; 0x40
    ef0e:	add.w	r3, r2, #2147483648	; 0x80000000
    ef12:	str	r3, [sp, #100]	; 0x64
    ef14:	movs	r3, #45	; 0x2d
    ef16:	str	r1, [sp, #96]	; 0x60
    ef18:	str	r3, [sp, #16]
    ef1a:	b.n	ea26 <_svfprintf_r+0x1016>
    ef1c:	ldr	r2, [sp, #72]	; 0x48
    ef1e:	ldr	r3, [sp, #56]	; 0x38
    ef20:	add	r3, r2
    ef22:	ldr	r2, [sp, #60]	; 0x3c
    ef24:	str	r3, [sp, #36]	; 0x24
    ef26:	cmp	r2, #0
    ef28:	ble.w	f03e <_svfprintf_r+0x162e>
    ef2c:	movs	r2, #103	; 0x67
    ef2e:	bic.w	r3, r3, r3, asr #31
    ef32:	str	r2, [sp, #52]	; 0x34
    ef34:	b.n	eaca <_svfprintf_r+0x10ba>
    ef36:	ldr	r3, [sp, #52]	; 0x34
    ef38:	cmp	r3, #71	; 0x47
    ef3a:	bne.w	ea68 <_svfprintf_r+0x1058>
    ef3e:	ldr	r3, [sp, #12]
    ef40:	lsls	r3, r3, #31
    ef42:	bmi.w	ecda <_svfprintf_r+0x12ca>
    ef46:	ldr	r3, [sp, #132]	; 0x84
    ef48:	cmp	r7, #71	; 0x47
    ef4a:	sub.w	r3, r3, r6
    ef4e:	str	r3, [sp, #56]	; 0x38
    ef50:	beq.w	ed88 <_svfprintf_r+0x1378>
    ef54:	ldr	r3, [sp, #116]	; 0x74
    ef56:	b.n	edd2 <_svfprintf_r+0x13c2>
    ef58:	bic.w	r3, r5, r5, asr #31
    ef5c:	str	r7, [sp, #40]	; 0x28
    ef5e:	str	r3, [sp, #16]
    ef60:	str	r5, [sp, #36]	; 0x24
    ef62:	mov	fp, r0
    ef64:	str	r0, [sp, #60]	; 0x3c
    ef66:	ldrb.w	r7, [sp, #111]	; 0x6f
    ef6a:	b.w	ddb4 <_svfprintf_r+0x3a4>
    ef6e:	cmp	r3, #0
    ef70:	ble.n	f04e <_svfprintf_r+0x163e>
    ef72:	cmp.w	fp, #0
    ef76:	bne.n	f018 <_svfprintf_r+0x1608>
    ef78:	ldr	r2, [sp, #12]
    ef7a:	lsls	r4, r2, #31
    ef7c:	bmi.n	f018 <_svfprintf_r+0x1608>
    ef7e:	mov	r2, r3
    ef80:	str	r2, [sp, #36]	; 0x24
    ef82:	bic.w	r3, r3, r3, asr #31
    ef86:	b.n	eaca <_svfprintf_r+0x10ba>
    ef88:	ldr	r3, [sp, #12]
    ef8a:	lsls	r3, r3, #31
    ef8c:	mov	r7, fp
    ef8e:	bpl.n	ef9c <_svfprintf_r+0x158c>
    ef90:	add	r6, sp, #256	; 0x100
    ef92:	movs	r3, #48	; 0x30
    ef94:	strb.w	r3, [r6, #-65]!
    ef98:	b.w	dda0 <_svfprintf_r+0x390>
    ef9c:	str.w	fp, [sp, #36]	; 0x24
    efa0:	add	r6, sp, #192	; 0xc0
    efa2:	b.w	dda6 <_svfprintf_r+0x396>
    efa6:	add	r2, sp, #140	; 0x8c
    efa8:	ldr	r1, [sp, #20]
    efaa:	ldr	r0, [sp, #24]
    efac:	bl	129a8 <__ssprint_r>
    efb0:	cmp	r0, #0
    efb2:	bne.w	dc04 <_svfprintf_r+0x1f4>
    efb6:	ldr	r5, [sp, #116]	; 0x74
    efb8:	ldr	r4, [sp, #148]	; 0x94
    efba:	ldr	r3, [sp, #144]	; 0x90
    efbc:	add.w	r9, sp, #192	; 0xc0
    efc0:	b.n	ec10 <_svfprintf_r+0x1200>
    efc2:	mov	r8, r4
    efc4:	movs	r5, #0
    efc6:	b.w	dac8 <_svfprintf_r+0xb8>
    efca:	adds	r3, #48	; 0x30
    efcc:	movs	r2, #48	; 0x30
    efce:	strb.w	r3, [sp, #127]	; 0x7f
    efd2:	strb.w	r2, [sp, #126]	; 0x7e
    efd6:	add	r3, sp, #128	; 0x80
    efd8:	b.n	ee4a <_svfprintf_r+0x143a>
    efda:	ldr	r3, [sp, #132]	; 0x84
    efdc:	b.n	ea90 <_svfprintf_r+0x1080>
    efde:	ldr	r2, [sp, #72]	; 0x48
    efe0:	ldr	r3, [sp, #60]	; 0x3c
    efe2:	add	r3, r2
    efe4:	movs	r2, #103	; 0x67
    efe6:	str	r3, [sp, #36]	; 0x24
    efe8:	str	r2, [sp, #52]	; 0x34
    efea:	bic.w	r3, r3, r3, asr #31
    efee:	b.n	eaca <_svfprintf_r+0x10ba>
    eff0:	ldr	r6, [pc, #248]	; (f0ec <_svfprintf_r+0x16dc>)
    eff2:	ldr	r3, [pc, #252]	; (f0f0 <_svfprintf_r+0x16e0>)
    eff4:	ldrb.w	r7, [sp, #111]	; 0x6f
    eff8:	b.w	e05e <_svfprintf_r+0x64e>
    effc:	movs	r2, #0
    effe:	movs	r3, #0
    f000:	ldrd	r0, r1, [sp, #96]	; 0x60
    f004:	bl	b160 <__aeabi_dcmpeq>
    f008:	cmp	r0, #0
    f00a:	bne.w	ecee <_svfprintf_r+0x12de>
    f00e:	rsb	r5, r5, #1
    f012:	str	r5, [sp, #116]	; 0x74
    f014:	add	r4, r5
    f016:	b.n	ea6a <_svfprintf_r+0x105a>
    f018:	ldr	r3, [sp, #60]	; 0x3c
    f01a:	ldr	r2, [sp, #72]	; 0x48
    f01c:	adds	r5, r3, r2
    f01e:	add.w	r3, r5, fp
    f022:	str	r3, [sp, #36]	; 0x24
    f024:	bic.w	r3, r3, r3, asr #31
    f028:	b.n	eaca <_svfprintf_r+0x10ba>
    f02a:	ldr	r3, [sp, #12]
    f02c:	ands.w	r3, r3, #1
    f030:	bne.w	ee5c <_svfprintf_r+0x144c>
    f034:	str	r3, [sp, #60]	; 0x3c
    f036:	ldr	r3, [sp, #36]	; 0x24
    f038:	bic.w	r3, r3, r3, asr #31
    f03c:	b.n	eaca <_svfprintf_r+0x10ba>
    f03e:	ldr	r3, [sp, #60]	; 0x3c
    f040:	ldr	r2, [sp, #36]	; 0x24
    f042:	rsb	r3, r3, #1
    f046:	add	r2, r3
    f048:	mov	r3, r2
    f04a:	str	r2, [sp, #36]	; 0x24
    f04c:	b.n	ef2c <_svfprintf_r+0x151c>
    f04e:	cmp.w	fp, #0
    f052:	bne.n	f05a <_svfprintf_r+0x164a>
    f054:	ldr	r3, [sp, #12]
    f056:	lsls	r0, r3, #31
    f058:	bpl.n	f06a <_svfprintf_r+0x165a>
    f05a:	ldr	r3, [sp, #72]	; 0x48
    f05c:	adds	r5, r3, #1
    f05e:	add.w	r3, r5, fp
    f062:	str	r3, [sp, #36]	; 0x24
    f064:	bic.w	r3, r3, r3, asr #31
    f068:	b.n	eaca <_svfprintf_r+0x10ba>
    f06a:	movs	r3, #1
    f06c:	str	r3, [sp, #36]	; 0x24
    f06e:	b.n	eaca <_svfprintf_r+0x10ba>
    f070:	ldr	r0, [sp, #40]	; 0x28
    f072:	ldrb.w	r3, [r8, #1]
    f076:	ldr	r5, [r0, #0]
    f078:	adds	r0, #4
    f07a:	cmp	r5, #0
    f07c:	str	r0, [sp, #40]	; 0x28
    f07e:	mov	r8, r4
    f080:	bge.w	dac4 <_svfprintf_r+0xb4>
    f084:	mov.w	r5, #4294967295
    f088:	b.w	dac4 <_svfprintf_r+0xb4>
    f08c:	strb.w	r1, [sp, #111]	; 0x6f
    f090:	b.w	dc26 <_svfprintf_r+0x216>
    f094:	add.w	r3, sp, #126	; 0x7e
    f098:	b.n	ee4a <_svfprintf_r+0x143a>
    f09a:	ldr	r2, [sp, #24]
    f09c:	movs	r3, #12
    f09e:	str	r3, [r2, #0]
    f0a0:	mov.w	r0, #4294967295
    f0a4:	b.w	dc16 <_svfprintf_r+0x206>
    f0a8:	strb.w	r1, [sp, #111]	; 0x6f
    f0ac:	b.w	dd20 <_svfprintf_r+0x310>
    f0b0:	strb.w	r1, [sp, #111]	; 0x6f
    f0b4:	b.w	dfec <_svfprintf_r+0x5dc>
    f0b8:	strb.w	r1, [sp, #111]	; 0x6f
    f0bc:	b.w	e15a <_svfprintf_r+0x74a>
    f0c0:	strb.w	r1, [sp, #111]	; 0x6f
    f0c4:	b.w	e0fe <_svfprintf_r+0x6ee>
    f0c8:	strb.w	r1, [sp, #111]	; 0x6f
    f0cc:	b.w	e0aa <_svfprintf_r+0x69a>
    f0d0:	strb.w	r1, [sp, #111]	; 0x6f
    f0d4:	b.w	e342 <_svfprintf_r+0x932>
    f0d8:	strb.w	r1, [sp, #111]	; 0x6f
    f0dc:	b.w	e300 <_svfprintf_r+0x8f0>
    f0e0:	strb.w	r1, [sp, #111]	; 0x6f
    f0e4:	b.w	e2c4 <_svfprintf_r+0x8b4>
    f0e8:	.word	0x00013838
    f0ec:	.word	0x0001380c
    f0f0:	.word	0x00013808

0000f0f4 <__ssvfscanf_r>:
    f0f4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f0f8:	mov	fp, r1
    f0fa:	ldrsh.w	r1, [r1, #12]
    f0fe:	sub.w	sp, sp, #692	; 0x2b4
    f102:	mov	sl, r0
    f104:	lsls	r0, r1, #18
    f106:	mov	r4, r2
    f108:	str	r3, [sp, #20]
    f10a:	bmi.n	f120 <__ssvfscanf_r+0x2c>
    f10c:	ldr.w	r3, [fp, #100]	; 0x64
    f110:	orr.w	r1, r1, #8192	; 0x2000
    f114:	bic.w	r3, r3, #8192	; 0x2000
    f118:	strh.w	r1, [fp, #12]
    f11c:	str.w	r3, [fp, #100]	; 0x64
    f120:	mov	r6, r4
    f122:	movs	r3, #0
    f124:	str	r3, [sp, #28]
    f126:	str	r3, [sp, #16]
    f128:	mov	r7, r3
    f12a:	str	r3, [sp, #24]
    f12c:	ldrb.w	r3, [r6], #1
    f130:	str	r3, [sp, #68]	; 0x44
    f132:	cbz	r3, f190 <__ssvfscanf_r+0x9c>
    f134:	bl	b968 <__locale_ctype_ptr>
    f138:	ldr	r2, [sp, #68]	; 0x44
    f13a:	add	r0, r2
    f13c:	ldrb	r3, [r0, #1]
    f13e:	and.w	r3, r3, #8
    f142:	and.w	r5, r3, #255	; 0xff
    f146:	cbz	r3, f19a <__ssvfscanf_r+0xa6>
    f148:	ldr.w	r3, [fp, #4]
    f14c:	b.n	f172 <__ssvfscanf_r+0x7e>
    f14e:	bl	b968 <__locale_ctype_ptr>
    f152:	ldr.w	r3, [fp]
    f156:	ldrb	r2, [r3, #0]
    f158:	add	r0, r2
    f15a:	adds	r3, #1
    f15c:	ldrb	r2, [r0, #1]
    f15e:	lsls	r1, r2, #28
    f160:	bpl.n	f182 <__ssvfscanf_r+0x8e>
    f162:	ldr.w	r2, [fp, #4]
    f166:	str.w	r3, [fp]
    f16a:	subs	r3, r2, #1
    f16c:	adds	r7, #1
    f16e:	str.w	r3, [fp, #4]
    f172:	cmp	r3, #0
    f174:	bgt.n	f14e <__ssvfscanf_r+0x5a>
    f176:	mov	r1, fp
    f178:	mov	r0, sl
    f17a:	bl	12b2c <__ssrefill_r>
    f17e:	cmp	r0, #0
    f180:	beq.n	f14e <__ssvfscanf_r+0x5a>
    f182:	mov	r4, r6
    f184:	mov	r6, r4
    f186:	ldrb.w	r3, [r6], #1
    f18a:	str	r3, [sp, #68]	; 0x44
    f18c:	cmp	r3, #0
    f18e:	bne.n	f134 <__ssvfscanf_r+0x40>
    f190:	ldr	r0, [sp, #24]
    f192:	add.w	sp, sp, #692	; 0x2b4
    f196:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f19a:	cmp	r2, #37	; 0x25
    f19c:	bne.w	f2a8 <__ssvfscanf_r+0x1b4>
    f1a0:	ldrb.w	r8, [r4, #1]
    f1a4:	mov	r4, r5
    f1a6:	adds	r3, r6, #1
    f1a8:	cmp.w	r8, #120	; 0x78
    f1ac:	bhi.w	f636 <__ssvfscanf_r+0x542>
    f1b0:	tbh	[pc, r8, lsl #1]
    f1b4:	.word	0x02410092
    f1b8:	.word	0x02410241
    f1bc:	.word	0x02410241
    f1c0:	.word	0x02410241
    f1c4:	.word	0x02410241
    f1c8:	.word	0x02410241
    f1cc:	.word	0x02410241
    f1d0:	.word	0x02410241
    f1d4:	.word	0x02410241
    f1d8:	.word	0x02410241
    f1dc:	.word	0x02410241
    f1e0:	.word	0x02410241
    f1e4:	.word	0x02410241
    f1e8:	.word	0x02410241
    f1ec:	.word	0x02410241
    f1f0:	.word	0x02410241
    f1f4:	.word	0x02410241
    f1f8:	.word	0x02410241
    f1fc:	.word	0x00790241
    f200:	.word	0x02410241
    f204:	.word	0x02410241
    f208:	.word	0x024101d8
    f20c:	.word	0x02410241
    f210:	.word	0x02410241
    f214:	.word	0x01cf01cf
    f218:	.word	0x01cf01cf
    f21c:	.word	0x01cf01cf
    f220:	.word	0x01cf01cf
    f224:	.word	0x01cf01cf
    f228:	.word	0x02410241
    f22c:	.word	0x02410241
    f230:	.word	0x02410241
    f234:	.word	0x02410241
    f238:	.word	0x02410241
    f23c:	.word	0x01b901c1
    f240:	.word	0x01b90241
    f244:	.word	0x02410241
    f248:	.word	0x02410241
    f24c:	.word	0x024101b3
    f250:	.word	0x01a30241
    f254:	.word	0x02410241
    f258:	.word	0x02410241
    f25c:	.word	0x02410241
    f260:	.word	0x02410241
    f264:	.word	0x02410193
    f268:	.word	0x01510241
    f26c:	.word	0x02410241
    f270:	.word	0x02410241
    f274:	.word	0x02410241
    f278:	.word	0x01220241
    f27c:	.word	0x01b90188
    f280:	.word	0x01b901b9
    f284:	.word	0x0098011c
    f288:	.word	0x02410241
    f28c:	.word	0x024100d5
    f290:	.word	0x0101010d
    f294:	.word	0x024100f3
    f298:	.word	0x00eb0241
    f29c:	.word	0x00df0241
    f2a0:	.word	0x02410241
    f2a4:	.short	0x0193
    f2a6:	mov	r6, r3
    f2a8:	ldr.w	r3, [fp, #4]
    f2ac:	cmp	r3, #0
    f2ae:	ble.w	f758 <__ssvfscanf_r+0x664>
    f2b2:	ldr.w	r3, [fp]
    f2b6:	ldrb.w	r2, [r6, #-1]
    f2ba:	ldrb	r1, [r3, #0]
    f2bc:	cmp	r1, r2
    f2be:	bne.w	f190 <__ssvfscanf_r+0x9c>
    f2c2:	ldr.w	r2, [fp, #4]
    f2c6:	adds	r3, #1
    f2c8:	subs	r2, #1
    f2ca:	str.w	r3, [fp]
    f2ce:	adds	r7, #1
    f2d0:	str.w	r2, [fp, #4]
    f2d4:	mov	r4, r6
    f2d6:	b.n	f184 <__ssvfscanf_r+0x90>
    f2d8:	mov.w	r0, #4294967295
    f2dc:	add.w	sp, sp, #692	; 0x2b4
    f2e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f2e4:	str	r3, [sp, #12]
    f2e6:	ldr.w	r3, [fp, #4]
    f2ea:	cmp	r3, #0
    f2ec:	ble.w	f7b6 <__ssvfscanf_r+0x6c2>
    f2f0:	ldr	r3, [pc, #736]	; (f5d4 <__ssvfscanf_r+0x4e0>)
    f2f2:	str	r3, [sp, #28]
    f2f4:	movs	r3, #0
    f2f6:	str	r3, [sp, #16]
    f2f8:	movs	r6, #3
    f2fa:	b.n	f300 <__ssvfscanf_r+0x20c>
    f2fc:	str.w	lr, [fp]
    f300:	bl	b968 <__locale_ctype_ptr>
    f304:	ldr.w	r2, [fp]
    f308:	ldrb	r1, [r2, #0]
    f30a:	add	r0, r1
    f30c:	add.w	lr, r2, #1
    f310:	ldrb	r3, [r0, #1]
    f312:	and.w	r3, r3, #8
    f316:	and.w	r8, r3, #255	; 0xff
    f31a:	cmp	r3, #0
    f31c:	beq.w	f81e <__ssvfscanf_r+0x72a>
    f320:	ldr.w	r3, [fp, #4]
    f324:	subs	r3, #1
    f326:	cmp	r3, #0
    f328:	add.w	r7, r7, #1
    f32c:	str.w	r3, [fp, #4]
    f330:	bgt.n	f2fc <__ssvfscanf_r+0x208>
    f332:	mov	r1, fp
    f334:	mov	r0, sl
    f336:	bl	12b2c <__ssrefill_r>
    f33a:	cmp	r0, #0
    f33c:	beq.n	f300 <__ssvfscanf_r+0x20c>
    f33e:	ldr	r2, [sp, #24]
    f340:	cmp	r2, #0
    f342:	beq.n	f2d8 <__ssvfscanf_r+0x1e4>
    f344:	ldrh.w	r3, [fp, #12]
    f348:	tst.w	r3, #64	; 0x40
    f34c:	mov	r3, r2
    f34e:	it	ne
    f350:	movne.w	r3, #4294967295
    f354:	mov	r0, r3
    f356:	add.w	sp, sp, #692	; 0x2b4
    f35a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f35e:	ldrb.w	r8, [r6, #1]
    f362:	cmp.w	r8, #108	; 0x6c
    f366:	beq.w	f76e <__ssvfscanf_r+0x67a>
    f36a:	orr.w	r5, r5, #1
    f36e:	mov	r6, r3
    f370:	b.n	f1a6 <__ssvfscanf_r+0xb2>
    f372:	str	r3, [sp, #12]
    f374:	ldr.w	r3, [fp, #4]
    f378:	cmp	r3, #0
    f37a:	ble.w	f80e <__ssvfscanf_r+0x71a>
    f37e:	ldr	r3, [pc, #600]	; (f5d8 <__ssvfscanf_r+0x4e4>)
    f380:	str	r3, [sp, #28]
    f382:	movs	r3, #10
    f384:	str	r3, [sp, #16]
    f386:	movs	r6, #3
    f388:	b.n	f300 <__ssvfscanf_r+0x20c>
    f38a:	str	r3, [sp, #12]
    f38c:	ldr.w	r3, [fp, #4]
    f390:	cmp	r3, #0
    f392:	ble.w	f7fe <__ssvfscanf_r+0x70a>
    f396:	movs	r6, #2
    f398:	b.n	f300 <__ssvfscanf_r+0x20c>
    f39a:	str	r3, [sp, #12]
    f39c:	ldr.w	r3, [fp, #4]
    f3a0:	cmp	r3, #0
    f3a2:	orr.w	r5, r5, #544	; 0x220
    f3a6:	ble.w	f4ea <__ssvfscanf_r+0x3f6>
    f3aa:	ldr	r3, [pc, #556]	; (f5d8 <__ssvfscanf_r+0x4e4>)
    f3ac:	str	r3, [sp, #28]
    f3ae:	movs	r3, #16
    f3b0:	str	r3, [sp, #16]
    f3b2:	movs	r6, #3
    f3b4:	b.n	f300 <__ssvfscanf_r+0x20c>
    f3b6:	str	r3, [sp, #12]
    f3b8:	ldr.w	r3, [fp, #4]
    f3bc:	cmp	r3, #0
    f3be:	ble.w	f50a <__ssvfscanf_r+0x416>
    f3c2:	ldr	r3, [pc, #532]	; (f5d8 <__ssvfscanf_r+0x4e4>)
    f3c4:	str	r3, [sp, #28]
    f3c6:	movs	r3, #8
    f3c8:	str	r3, [sp, #16]
    f3ca:	movs	r6, #3
    f3cc:	b.n	f300 <__ssvfscanf_r+0x20c>
    f3ce:	lsls	r2, r5, #27
    f3d0:	mov	r6, r3
    f3d2:	str	r3, [sp, #12]
    f3d4:	bmi.w	f5bc <__ssvfscanf_r+0x4c8>
    f3d8:	lsls	r3, r5, #29
    f3da:	bpl.w	f786 <__ssvfscanf_r+0x692>
    f3de:	ldr	r1, [sp, #20]
    f3e0:	ldr	r3, [r1, #0]
    f3e2:	strh	r7, [r3, #0]
    f3e4:	adds	r3, r1, #4
    f3e6:	str	r3, [sp, #20]
    f3e8:	mov	r4, r6
    f3ea:	b.n	f184 <__ssvfscanf_r+0x90>
    f3ec:	ldrb.w	r8, [r6, #1]
    f3f0:	orr.w	r5, r5, #4
    f3f4:	mov	r6, r3
    f3f6:	b.n	f1a6 <__ssvfscanf_r+0xb2>
    f3f8:	str	r3, [sp, #12]
    f3fa:	ldr.w	r3, [fp, #4]
    f3fe:	cmp	r3, #0
    f400:	ble.w	f7de <__ssvfscanf_r+0x6ea>
    f404:	cmp	r4, #0
    f406:	it	eq
    f408:	moveq	r4, #1
    f40a:	ands.w	r3, r5, #1
    f40e:	bne.w	f656 <__ssvfscanf_r+0x562>
    f412:	lsls	r2, r5, #27
    f414:	bpl.w	f72e <__ssvfscanf_r+0x63a>
    f418:	mov	r5, r3
    f41a:	b.n	f430 <__ssvfscanf_r+0x33c>
    f41c:	add	r3, r2
    f41e:	str.w	r3, [fp]
    f422:	add	r5, r2
    f424:	subs	r4, r4, r2
    f426:	bl	12b2c <__ssrefill_r>
    f42a:	cmp	r0, #0
    f42c:	bne.w	f726 <__ssvfscanf_r+0x632>
    f430:	ldr.w	r2, [fp, #4]
    f434:	ldr.w	r3, [fp]
    f438:	cmp	r2, r4
    f43a:	mov	r1, fp
    f43c:	mov	r0, sl
    f43e:	blt.n	f41c <__ssvfscanf_r+0x328>
    f440:	subs	r2, r2, r4
    f442:	add	r3, r4
    f444:	str.w	r2, [fp, #4]
    f448:	add	r5, r4
    f44a:	str.w	r3, [fp]
    f44e:	ldr	r6, [sp, #12]
    f450:	add	r7, r5
    f452:	mov	r4, r6
    f454:	b.n	f184 <__ssvfscanf_r+0x90>
    f456:	add.w	r9, sp, #80	; 0x50
    f45a:	mov	r1, r3
    f45c:	mov	r0, r9
    f45e:	bl	123c8 <__sccl>
    f462:	ldr.w	r3, [fp, #4]
    f466:	cmp	r3, #0
    f468:	mov	r6, r0
    f46a:	ble.w	f7ce <__ssvfscanf_r+0x6da>
    f46e:	cmp	r4, #0
    f470:	ldr.w	r2, [fp]
    f474:	it	eq
    f476:	moveq.w	r4, #4294967295
    f47a:	lsls	r3, r5, #27
    f47c:	ldrb	r1, [r2, #0]
    f47e:	bpl.w	f5c2 <__ssvfscanf_r+0x4ce>
    f482:	mov	r8, r4
    f484:	movs	r5, #0
    f486:	b.n	f48a <__ssvfscanf_r+0x396>
    f488:	ldrb	r1, [r2, #0]
    f48a:	ldrb.w	r3, [r9, r1]
    f48e:	adds	r2, #1
    f490:	cmp	r3, #0
    f492:	beq.w	f71c <__ssvfscanf_r+0x628>
    f496:	ldr.w	r3, [fp, #4]
    f49a:	str.w	r2, [fp]
    f49e:	adds	r5, #1
    f4a0:	subs	r3, #1
    f4a2:	cmp	r5, r4
    f4a4:	str.w	r3, [fp, #4]
    f4a8:	beq.w	f716 <__ssvfscanf_r+0x622>
    f4ac:	cmp	r3, #0
    f4ae:	bgt.n	f488 <__ssvfscanf_r+0x394>
    f4b0:	mov	r1, fp
    f4b2:	mov	r0, sl
    f4b4:	bl	12b2c <__ssrefill_r>
    f4b8:	cmp	r0, #0
    f4ba:	bne.w	f714 <__ssvfscanf_r+0x620>
    f4be:	ldr.w	r2, [fp]
    f4c2:	b.n	f488 <__ssvfscanf_r+0x394>
    f4c4:	str	r3, [sp, #12]
    f4c6:	ldr.w	r3, [fp, #4]
    f4ca:	cmp	r3, #0
    f4cc:	ble.n	f544 <__ssvfscanf_r+0x450>
    f4ce:	ldr	r3, [pc, #260]	; (f5d4 <__ssvfscanf_r+0x4e0>)
    f4d0:	str	r3, [sp, #28]
    f4d2:	movs	r3, #10
    f4d4:	str	r3, [sp, #16]
    f4d6:	movs	r6, #3
    f4d8:	b.n	f300 <__ssvfscanf_r+0x20c>
    f4da:	str	r3, [sp, #12]
    f4dc:	ldr.w	r3, [fp, #4]
    f4e0:	cmp	r3, #0
    f4e2:	orr.w	r5, r5, #512	; 0x200
    f4e6:	bgt.w	f3aa <__ssvfscanf_r+0x2b6>
    f4ea:	mov	r1, fp
    f4ec:	mov	r0, sl
    f4ee:	bl	12b2c <__ssrefill_r>
    f4f2:	cmp	r0, #0
    f4f4:	beq.w	f3aa <__ssvfscanf_r+0x2b6>
    f4f8:	b.n	f33e <__ssvfscanf_r+0x24a>
    f4fa:	str	r3, [sp, #12]
    f4fc:	ldr.w	r3, [fp, #4]
    f500:	cmp	r3, #0
    f502:	orr.w	r5, r5, #1
    f506:	bgt.w	f3c2 <__ssvfscanf_r+0x2ce>
    f50a:	mov	r1, fp
    f50c:	mov	r0, sl
    f50e:	bl	12b2c <__ssrefill_r>
    f512:	cmp	r0, #0
    f514:	beq.w	f3c2 <__ssvfscanf_r+0x2ce>
    f518:	b.n	f33e <__ssvfscanf_r+0x24a>
    f51a:	ldrb.w	r8, [r6, #1]
    f51e:	orr.w	r5, r5, #2
    f522:	mov	r6, r3
    f524:	b.n	f1a6 <__ssvfscanf_r+0xb2>
    f526:	str	r3, [sp, #12]
    f528:	ldr.w	r3, [fp, #4]
    f52c:	cmp	r3, #0
    f52e:	ble.w	f7ee <__ssvfscanf_r+0x6fa>
    f532:	movs	r6, #4
    f534:	b.n	f300 <__ssvfscanf_r+0x20c>
    f536:	str	r3, [sp, #12]
    f538:	ldr.w	r3, [fp, #4]
    f53c:	cmp	r3, #0
    f53e:	orr.w	r5, r5, #1
    f542:	bgt.n	f4ce <__ssvfscanf_r+0x3da>
    f544:	mov	r1, fp
    f546:	mov	r0, sl
    f548:	bl	12b2c <__ssrefill_r>
    f54c:	cmp	r0, #0
    f54e:	beq.n	f4ce <__ssvfscanf_r+0x3da>
    f550:	b.n	f33e <__ssvfscanf_r+0x24a>
    f552:	add.w	r4, r4, r4, lsl #2
    f556:	add.w	r4, r8, r4, lsl #1
    f55a:	subs	r4, #48	; 0x30
    f55c:	ldrb.w	r8, [r6, #1]
    f560:	mov	r6, r3
    f562:	b.n	f1a6 <__ssvfscanf_r+0xb2>
    f564:	ldrb.w	r8, [r6, #1]
    f568:	orr.w	r5, r5, #16
    f56c:	mov	r6, r3
    f56e:	b.n	f1a6 <__ssvfscanf_r+0xb2>
    f570:	add	r3, sp, #72	; 0x48
    f572:	mov	r1, r8
    f574:	mov	r0, r3
    f576:	movs	r2, #8
    f578:	str	r3, [sp, #32]
    f57a:	bl	c10c <memset>
    f57e:	ands.w	r9, r5, #16
    f582:	bne.w	fe48 <__ssvfscanf_r+0xd54>
    f586:	ldr	r2, [sp, #20]
    f588:	mov	r3, r2
    f58a:	adds	r3, #4
    f58c:	ldr.w	r8, [r2]
    f590:	str	r3, [sp, #20]
    f592:	movs	r6, #0
    f594:	bl	b968 <__locale_ctype_ptr>
    f598:	ldr.w	r3, [fp]
    f59c:	ldrb	r3, [r3, #0]
    f59e:	add	r0, r3
    f5a0:	ldrb	r3, [r0, #1]
    f5a2:	lsls	r0, r3, #28
    f5a4:	bmi.n	f5ac <__ssvfscanf_r+0x4b8>
    f5a6:	cmp	r4, #0
    f5a8:	bne.w	fdac <__ssvfscanf_r+0xcb8>
    f5ac:	cmp.w	r9, #0
    f5b0:	bne.n	f5bc <__ssvfscanf_r+0x4c8>
    f5b2:	str.w	r9, [r8]
    f5b6:	ldr	r3, [sp, #24]
    f5b8:	adds	r3, #1
    f5ba:	str	r3, [sp, #24]
    f5bc:	ldr	r6, [sp, #12]
    f5be:	mov	r4, r6
    f5c0:	b.n	f184 <__ssvfscanf_r+0x90>
    f5c2:	ldr	r0, [sp, #20]
    f5c4:	ldr	r5, [r0, #0]
    f5c6:	mov	r3, r0
    f5c8:	adds	r3, #4
    f5ca:	add.w	r8, r5, r4
    f5ce:	str	r3, [sp, #12]
    f5d0:	mov	r4, r5
    f5d2:	b.n	f5e2 <__ssvfscanf_r+0x4ee>
    f5d4:	.word	0x0000d9e9
    f5d8:	.word	0x00012775
    f5dc:	ldr.w	r2, [fp]
    f5e0:	ldrb	r1, [r2, #0]
    f5e2:	ldrb.w	r3, [r9, r1]
    f5e6:	adds	r0, r2, #1
    f5e8:	cbz	r3, f61c <__ssvfscanf_r+0x528>
    f5ea:	ldr.w	r3, [fp, #4]
    f5ee:	str.w	r0, [fp]
    f5f2:	subs	r3, #1
    f5f4:	str.w	r3, [fp, #4]
    f5f8:	ldrb	r3, [r2, #0]
    f5fa:	strb.w	r3, [r4], #1
    f5fe:	cmp	r8, r4
    f600:	beq.n	f61c <__ssvfscanf_r+0x528>
    f602:	ldr.w	r3, [fp, #4]
    f606:	cmp	r3, #0
    f608:	bgt.n	f5dc <__ssvfscanf_r+0x4e8>
    f60a:	mov	r1, fp
    f60c:	mov	r0, sl
    f60e:	bl	12b2c <__ssrefill_r>
    f612:	cmp	r0, #0
    f614:	beq.n	f5dc <__ssvfscanf_r+0x4e8>
    f616:	cmp	r5, r4
    f618:	beq.w	f33e <__ssvfscanf_r+0x24a>
    f61c:	subs	r5, r4, r5
    f61e:	beq.w	f190 <__ssvfscanf_r+0x9c>
    f622:	ldr	r2, [sp, #24]
    f624:	adds	r2, #1
    f626:	movs	r3, #0
    f628:	str	r2, [sp, #24]
    f62a:	ldr	r2, [sp, #12]
    f62c:	str	r2, [sp, #20]
    f62e:	strb	r3, [r4, #0]
    f630:	add	r7, r5
    f632:	mov	r4, r6
    f634:	b.n	f184 <__ssvfscanf_r+0x90>
    f636:	str	r3, [sp, #12]
    f638:	bl	b968 <__locale_ctype_ptr>
    f63c:	add	r0, r8
    f63e:	ldrb	r3, [r0, #1]
    f640:	and.w	r3, r3, #3
    f644:	cmp	r3, #1
    f646:	ldr.w	r3, [fp, #4]
    f64a:	beq.w	f77a <__ssvfscanf_r+0x686>
    f64e:	cmp	r3, #0
    f650:	bgt.w	f4ce <__ssvfscanf_r+0x3da>
    f654:	b.n	f544 <__ssvfscanf_r+0x450>
    f656:	add	r3, sp, #72	; 0x48
    f658:	mov	r0, r3
    f65a:	movs	r2, #8
    f65c:	movs	r1, #0
    f65e:	str	r3, [sp, #32]
    f660:	bl	c10c <memset>
    f664:	ands.w	r3, r5, #16
    f668:	str	r3, [sp, #40]	; 0x28
    f66a:	bne.n	f768 <__ssvfscanf_r+0x674>
    f66c:	ldr	r2, [sp, #20]
    f66e:	mov	r3, r2
    f670:	adds	r3, #4
    f672:	ldr.w	r9, [r2]
    f676:	str	r3, [sp, #20]
    f678:	movs	r5, #0
    f67a:	add.w	r8, sp, #336	; 0x150
    f67e:	bl	b944 <__locale_mb_cur_max>
    f682:	cmp	r0, r5
    f684:	beq.w	f33e <__ssvfscanf_r+0x24a>
    f688:	ldmia.w	fp, {r2, r3}
    f68c:	ldrb.w	r0, [r2], #1
    f690:	str.w	r2, [fp]
    f694:	subs	r3, #1
    f696:	ldr	r2, [sp, #32]
    f698:	str	r2, [sp, #0]
    f69a:	adds	r6, r5, #1
    f69c:	str.w	r3, [fp, #4]
    f6a0:	mov	r1, r9
    f6a2:	strb.w	r0, [r8, r5]
    f6a6:	mov	r3, r6
    f6a8:	mov	r2, r8
    f6aa:	mov	r0, sl
    f6ac:	bl	11a84 <_mbrtowc_r>
    f6b0:	adds	r1, r0, #1
    f6b2:	beq.w	f33e <__ssvfscanf_r+0x24a>
    f6b6:	cbnz	r0, f6e2 <__ssvfscanf_r+0x5ee>
    f6b8:	ldr	r3, [sp, #40]	; 0x28
    f6ba:	cbnz	r3, f702 <__ssvfscanf_r+0x60e>
    f6bc:	str.w	r3, [r9]
    f6c0:	add	r7, r6
    f6c2:	subs	r4, #1
    f6c4:	add.w	r9, r9, #4
    f6c8:	ldr.w	r3, [fp, #4]
    f6cc:	cmp	r3, #0
    f6ce:	mov.w	r5, #0
    f6d2:	ble.n	f6f0 <__ssvfscanf_r+0x5fc>
    f6d4:	cmp	r4, #0
    f6d6:	bne.n	f67e <__ssvfscanf_r+0x58a>
    f6d8:	ldr	r3, [sp, #40]	; 0x28
    f6da:	cmp	r3, #0
    f6dc:	beq.w	f5b6 <__ssvfscanf_r+0x4c2>
    f6e0:	b.n	f5bc <__ssvfscanf_r+0x4c8>
    f6e2:	adds	r0, #2
    f6e4:	bne.n	f708 <__ssvfscanf_r+0x614>
    f6e6:	ldr.w	r3, [fp, #4]
    f6ea:	cmp	r3, #0
    f6ec:	mov	r5, r6
    f6ee:	bgt.n	f67e <__ssvfscanf_r+0x58a>
    f6f0:	mov	r1, fp
    f6f2:	mov	r0, sl
    f6f4:	bl	12b2c <__ssrefill_r>
    f6f8:	cmp	r0, #0
    f6fa:	beq.n	f6d4 <__ssvfscanf_r+0x5e0>
    f6fc:	cmp	r5, #0
    f6fe:	beq.n	f6d8 <__ssvfscanf_r+0x5e4>
    f700:	b.n	f33e <__ssvfscanf_r+0x24a>
    f702:	add	r7, r6
    f704:	subs	r4, #1
    f706:	b.n	f6c8 <__ssvfscanf_r+0x5d4>
    f708:	ldr	r3, [sp, #40]	; 0x28
    f70a:	add	r7, r6
    f70c:	subs	r4, #1
    f70e:	cmp	r3, #0
    f710:	bne.n	f6c8 <__ssvfscanf_r+0x5d4>
    f712:	b.n	f6c4 <__ssvfscanf_r+0x5d0>
    f714:	mov	r8, r5
    f716:	mov	r5, r8
    f718:	add	r7, r5
    f71a:	b.n	f632 <__ssvfscanf_r+0x53e>
    f71c:	cmp	r5, #0
    f71e:	beq.w	f190 <__ssvfscanf_r+0x9c>
    f722:	add	r7, r5
    f724:	b.n	f632 <__ssvfscanf_r+0x53e>
    f726:	cmp	r5, #0
    f728:	bne.w	f44e <__ssvfscanf_r+0x35a>
    f72c:	b.n	f33e <__ssvfscanf_r+0x24a>
    f72e:	ldr	r5, [sp, #20]
    f730:	mov	r3, r4
    f732:	ldr	r1, [r5, #0]
    f734:	str.w	fp, [sp]
    f738:	movs	r2, #1
    f73a:	mov	r0, sl
    f73c:	bl	12b68 <_sfread_r>
    f740:	adds	r6, r5, #4
    f742:	cmp	r0, #0
    f744:	beq.w	f33e <__ssvfscanf_r+0x24a>
    f748:	ldr	r3, [sp, #24]
    f74a:	str	r6, [sp, #20]
    f74c:	ldr	r6, [sp, #12]
    f74e:	adds	r3, #1
    f750:	add	r7, r0
    f752:	str	r3, [sp, #24]
    f754:	mov	r4, r6
    f756:	b.n	f184 <__ssvfscanf_r+0x90>
    f758:	mov	r1, fp
    f75a:	mov	r0, sl
    f75c:	bl	12b2c <__ssrefill_r>
    f760:	cmp	r0, #0
    f762:	beq.w	f2b2 <__ssvfscanf_r+0x1be>
    f766:	b.n	f33e <__ssvfscanf_r+0x24a>
    f768:	mov.w	r9, #0
    f76c:	b.n	f678 <__ssvfscanf_r+0x584>
    f76e:	ldrb.w	r8, [r6, #2]
    f772:	orr.w	r5, r5, #2
    f776:	adds	r6, #2
    f778:	b.n	f1a6 <__ssvfscanf_r+0xb2>
    f77a:	cmp	r3, #0
    f77c:	orr.w	r5, r5, #1
    f780:	bgt.w	f4ce <__ssvfscanf_r+0x3da>
    f784:	b.n	f544 <__ssvfscanf_r+0x450>
    f786:	lsls	r4, r5, #31
    f788:	bmi.n	f7a4 <__ssvfscanf_r+0x6b0>
    f78a:	lsls	r0, r5, #30
    f78c:	bpl.n	f7a4 <__ssvfscanf_r+0x6b0>
    f78e:	ldr	r2, [sp, #20]
    f790:	ldr	r6, [sp, #12]
    f792:	ldr	r3, [r2, #0]
    f794:	mov	r0, r7
    f796:	asrs	r1, r7, #31
    f798:	adds	r2, #4
    f79a:	str	r2, [sp, #20]
    f79c:	strd	r0, r1, [r3]
    f7a0:	mov	r4, r6
    f7a2:	b.n	f184 <__ssvfscanf_r+0x90>
    f7a4:	ldr	r2, [sp, #20]
    f7a6:	ldr	r6, [sp, #12]
    f7a8:	ldr	r3, [r2, #0]
    f7aa:	str	r7, [r3, #0]
    f7ac:	mov	r3, r2
    f7ae:	adds	r3, #4
    f7b0:	str	r3, [sp, #20]
    f7b2:	mov	r4, r6
    f7b4:	b.n	f184 <__ssvfscanf_r+0x90>
    f7b6:	mov	r1, fp
    f7b8:	mov	r0, sl
    f7ba:	bl	12b2c <__ssrefill_r>
    f7be:	cmp	r0, #0
    f7c0:	bne.w	f33e <__ssvfscanf_r+0x24a>
    f7c4:	ldr	r3, [pc, #504]	; (f9c0 <__ssvfscanf_r+0x8cc>)
    f7c6:	str	r0, [sp, #16]
    f7c8:	str	r3, [sp, #28]
    f7ca:	movs	r6, #3
    f7cc:	b.n	f300 <__ssvfscanf_r+0x20c>
    f7ce:	mov	r1, fp
    f7d0:	mov	r0, sl
    f7d2:	bl	12b2c <__ssrefill_r>
    f7d6:	cmp	r0, #0
    f7d8:	beq.w	f46e <__ssvfscanf_r+0x37a>
    f7dc:	b.n	f33e <__ssvfscanf_r+0x24a>
    f7de:	mov	r1, fp
    f7e0:	mov	r0, sl
    f7e2:	bl	12b2c <__ssrefill_r>
    f7e6:	cmp	r0, #0
    f7e8:	beq.w	f404 <__ssvfscanf_r+0x310>
    f7ec:	b.n	f33e <__ssvfscanf_r+0x24a>
    f7ee:	mov	r1, fp
    f7f0:	mov	r0, sl
    f7f2:	bl	12b2c <__ssrefill_r>
    f7f6:	cmp	r0, #0
    f7f8:	beq.w	f532 <__ssvfscanf_r+0x43e>
    f7fc:	b.n	f33e <__ssvfscanf_r+0x24a>
    f7fe:	mov	r1, fp
    f800:	mov	r0, sl
    f802:	bl	12b2c <__ssrefill_r>
    f806:	cmp	r0, #0
    f808:	beq.w	f396 <__ssvfscanf_r+0x2a2>
    f80c:	b.n	f33e <__ssvfscanf_r+0x24a>
    f80e:	mov	r1, fp
    f810:	mov	r0, sl
    f812:	bl	12b2c <__ssrefill_r>
    f816:	cmp	r0, #0
    f818:	beq.w	f37e <__ssvfscanf_r+0x28a>
    f81c:	b.n	f33e <__ssvfscanf_r+0x24a>
    f81e:	cmp	r6, #3
    f820:	beq.w	fb62 <__ssvfscanf_r+0xa6e>
    f824:	cmp	r6, #4
    f826:	bne.w	fca4 <__ssvfscanf_r+0xbb0>
    f82a:	mov	r0, sl
    f82c:	bl	11a68 <_localeconv_r>
    f830:	subs	r3, r4, #1
    f832:	ldr	r2, [r0, #0]
    f834:	str	r2, [sp, #48]	; 0x30
    f836:	cmp.w	r3, #348	; 0x15c
    f83a:	bls.w	fd0c <__ssvfscanf_r+0xc18>
    f83e:	mvn.w	r1, #348	; 0x15c
    f842:	adds	r3, r4, r1
    f844:	str	r3, [sp, #56]	; 0x38
    f846:	movw	r4, #349	; 0x15d
    f84a:	add	r3, sp, #336	; 0x150
    f84c:	mov.w	r8, #0
    f850:	mov	r2, r3
    f852:	str	r3, [sp, #40]	; 0x28
    f854:	orr.w	r5, r5, #1920	; 0x780
    f858:	mov	r3, r8
    f85a:	str.w	r8, [sp, #60]	; 0x3c
    f85e:	str.w	r8, [sp, #52]	; 0x34
    f862:	mov	r6, r8
    f864:	str.w	r8, [sp, #44]	; 0x2c
    f868:	mov	r9, r2
    f86a:	ldr.w	r0, [fp]
    f86e:	ldrb	r1, [r0, #0]
    f870:	sub.w	lr, r1, #43	; 0x2b
    f874:	cmp.w	lr, #78	; 0x4e
    f878:	bhi.w	fb12 <__ssvfscanf_r+0xa1e>
    f87c:	tbh	[pc, lr, lsl #1]
    f880:	.word	0x0149007a
    f884:	.word	0x0149007a
    f888:	.word	0x006e0149
    f88c:	.word	0x004f004f
    f890:	.word	0x004f004f
    f894:	.word	0x004f004f
    f898:	.word	0x004f004f
    f89c:	.word	0x0149004f
    f8a0:	.word	0x01490149
    f8a4:	.word	0x01490149
    f8a8:	.word	0x01490149
    f8ac:	.word	0x01490144
    f8b0:	.word	0x01490149
    f8b4:	.word	0x0125012c
    f8b8:	.word	0x01490149
    f8bc:	.word	0x014900a2
    f8c0:	.word	0x01490149
    f8c4:	.word	0x008b0149
    f8c8:	.word	0x01490149
    f8cc:	.word	0x01490149
    f8d0:	.word	0x00850149
    f8d4:	.word	0x01490149
    f8d8:	.word	0x01490149
    f8dc:	.word	0x0149007f
    f8e0:	.word	0x01490149
    f8e4:	.word	0x01490149
    f8e8:	.word	0x01490149
    f8ec:	.word	0x01490144
    f8f0:	.word	0x01490149
    f8f4:	.word	0x0125012c
    f8f8:	.word	0x01490149
    f8fc:	.word	0x014900a2
    f900:	.word	0x01490149
    f904:	.word	0x008b0149
    f908:	.word	0x01490149
    f90c:	.word	0x01490149
    f910:	.word	0x00850149
    f914:	.word	0x01490149
    f918:	.word	0x01490149
    f91c:	.short	0x007f
    f91e:	cmn.w	r3, r8
    f922:	bne.n	f952 <__ssvfscanf_r+0x85e>
    f924:	bic.w	r5, r5, #384	; 0x180
    f928:	strb.w	r1, [r9]
    f92c:	add.w	r9, r9, #1
    f930:	ldr.w	r1, [fp, #4]
    f934:	subs	r1, #1
    f936:	cmp	r1, #0
    f938:	add.w	r4, r4, #4294967295
    f93c:	add.w	r7, r7, #1
    f940:	str.w	r1, [fp, #4]
    f944:	ble.w	fb2c <__ssvfscanf_r+0xa38>
    f948:	adds	r0, #1
    f94a:	str.w	r0, [fp]
    f94e:	cmp	r4, #0
    f950:	bne.n	f86a <__ssvfscanf_r+0x776>
    f952:	cmp	r6, #0
    f954:	beq.n	f9dc <__ssvfscanf_r+0x8e8>
    f956:	bic.w	r5, r5, #256	; 0x100
    f95a:	b.n	f9dc <__ssvfscanf_r+0x8e8>
    f95c:	lsls	r2, r5, #23
    f95e:	bpl.n	f91e <__ssvfscanf_r+0x82a>
    f960:	ldr	r2, [sp, #56]	; 0x38
    f962:	bic.w	r5, r5, #128	; 0x80
    f966:	adds	r6, #1
    f968:	cmp	r2, #0
    f96a:	beq.n	f930 <__ssvfscanf_r+0x83c>
    f96c:	subs	r2, #1
    f96e:	str	r2, [sp, #56]	; 0x38
    f970:	adds	r4, #1
    f972:	b.n	f930 <__ssvfscanf_r+0x83c>
    f974:	lsls	r2, r5, #24
    f976:	bpl.n	f952 <__ssvfscanf_r+0x85e>
    f978:	bic.w	r5, r5, #128	; 0x80
    f97c:	b.n	f928 <__ssvfscanf_r+0x834>
    f97e:	cmp.w	r8, #7
    f982:	bne.n	f952 <__ssvfscanf_r+0x85e>
    f984:	mov.w	r8, #8
    f988:	b.n	f928 <__ssvfscanf_r+0x834>
    f98a:	cmp.w	r8, #6
    f98e:	bne.n	f952 <__ssvfscanf_r+0x85e>
    f990:	mov.w	r8, #7
    f994:	b.n	f928 <__ssvfscanf_r+0x834>
    f996:	cmp	r3, #0
    f998:	bne.w	fb58 <__ssvfscanf_r+0xa64>
    f99c:	cbnz	r6, f9aa <__ssvfscanf_r+0x8b6>
    f99e:	and.w	lr, r5, #1792	; 0x700
    f9a2:	cmp.w	lr, #1792	; 0x700
    f9a6:	beq.w	fe30 <__ssvfscanf_r+0xd3c>
    f9aa:	cmp.w	r8, #1
    f9ae:	beq.n	f9b6 <__ssvfscanf_r+0x8c2>
    f9b0:	cmp.w	r8, #4
    f9b4:	bne.n	f952 <__ssvfscanf_r+0x85e>
    f9b6:	add.w	r8, r8, #1
    f9ba:	uxtb.w	r8, r8
    f9be:	b.n	f928 <__ssvfscanf_r+0x834>
    f9c0:	.word	0x0000d9e9
    f9c4:	cmp.w	r8, #0
    f9c8:	bne.w	fb46 <__ssvfscanf_r+0xa52>
    f9cc:	cmp	r6, #0
    f9ce:	bne.n	f956 <__ssvfscanf_r+0x862>
    f9d0:	and.w	lr, r5, #1792	; 0x700
    f9d4:	cmp.w	lr, #1792	; 0x700
    f9d8:	beq.w	fe50 <__ssvfscanf_r+0xd5c>
    f9dc:	subs	r3, #1
    f9de:	cmp	r3, #1
    f9e0:	bls.w	fee6 <__ssvfscanf_r+0xdf2>
    f9e4:	add.w	r3, r8, #4294967295
    f9e8:	cmp	r3, #6
    f9ea:	bhi.n	fa1a <__ssvfscanf_r+0x926>
    f9ec:	cmp.w	r8, #2
    f9f0:	bls.w	ff34 <__ssvfscanf_r+0xe40>
    f9f4:	cmp.w	r8, #3
    f9f8:	beq.n	fa1a <__ssvfscanf_r+0x926>
    f9fa:	sub.w	r4, r8, #4
    f9fe:	uxtb	r4, r4
    fa00:	mvn.w	r8, r4
    fa04:	add	r8, r9
    fa06:	ldrb.w	r1, [r9, #-1]!
    fa0a:	mov	r2, fp
    fa0c:	mov	r0, sl
    fa0e:	bl	12aa8 <_sungetc_r>
    fa12:	cmp	r8, r9
    fa14:	bne.n	fa06 <__ssvfscanf_r+0x912>
    fa16:	subs	r7, #1
    fa18:	subs	r7, r7, r4
    fa1a:	lsls	r1, r5, #23
    fa1c:	bpl.n	fa58 <__ssvfscanf_r+0x964>
    fa1e:	lsls	r2, r5, #21
    fa20:	bmi.w	ff0a <__ssvfscanf_r+0xe16>
    fa24:	ldrb.w	r1, [r9, #-1]
    fa28:	cmp	r1, #101	; 0x65
    fa2a:	add.w	r4, r9, #4294967295
    fa2e:	add.w	r8, r7, #4294967295
    fa32:	beq.n	fa4c <__ssvfscanf_r+0x958>
    fa34:	cmp	r1, #69	; 0x45
    fa36:	beq.n	fa4c <__ssvfscanf_r+0x958>
    fa38:	mov	r2, fp
    fa3a:	mov	r0, sl
    fa3c:	bl	12aa8 <_sungetc_r>
    fa40:	ldrb.w	r1, [r9, #-2]
    fa44:	sub.w	r8, r7, #2
    fa48:	sub.w	r4, r9, #2
    fa4c:	mov	r2, fp
    fa4e:	mov	r0, sl
    fa50:	bl	12aa8 <_sungetc_r>
    fa54:	mov	r7, r8
    fa56:	mov	r9, r4
    fa58:	ands.w	r2, r5, #16
    fa5c:	bne.w	f5bc <__ssvfscanf_r+0x4c8>
    fa60:	and.w	r3, r5, #1536	; 0x600
    fa64:	cmp.w	r3, #1024	; 0x400
    fa68:	strb.w	r2, [r9]
    fa6c:	beq.w	fe5a <__ssvfscanf_r+0xd66>
    fa70:	ldr	r3, [sp, #52]	; 0x34
    fa72:	cmp	r3, #0
    fa74:	bne.w	fe7c <__ssvfscanf_r+0xd88>
    fa78:	ldr	r1, [sp, #40]	; 0x28
    fa7a:	movs	r2, #0
    fa7c:	mov	r0, sl
    fa7e:	bl	d890 <_strtod_r>
    fa82:	lsls	r3, r5, #31
    fa84:	bmi.w	fd12 <__ssvfscanf_r+0xc1e>
    fa88:	ands.w	r5, r5, #2
    fa8c:	bne.w	fd12 <__ssvfscanf_r+0xc1e>
    fa90:	vmov	r2, r3, d0
    fa94:	vmov	r0, r1, d0
    fa98:	vstr	d0, [sp, #32]
    fa9c:	bl	b1c4 <__aeabi_dcmpun>
    faa0:	ldr	r4, [sp, #20]
    faa2:	vldr	d0, [sp, #32]
    faa6:	adds	r6, r4, #4
    faa8:	ldr	r4, [r4, #0]
    faaa:	cmp	r0, #0
    faac:	bne.w	ff68 <__ssvfscanf_r+0xe74>
    fab0:	vmov	r0, r1, d0
    fab4:	bl	b280 <__aeabi_d2f>
    fab8:	str	r6, [sp, #20]
    faba:	str	r0, [r4, #0]
    fabc:	ldr	r3, [sp, #24]
    fabe:	ldr	r6, [sp, #12]
    fac0:	adds	r3, #1
    fac2:	str	r3, [sp, #24]
    fac4:	mov	r4, r6
    fac6:	b.w	f184 <__ssvfscanf_r+0x90>
    faca:	cmp.w	r8, #2
    face:	bne.w	f952 <__ssvfscanf_r+0x85e>
    fad2:	mov.w	r8, #3
    fad6:	b.n	f928 <__ssvfscanf_r+0x834>
    fad8:	and.w	lr, r5, #1280	; 0x500
    fadc:	cmp.w	lr, #1024	; 0x400
    fae0:	beq.n	faee <__ssvfscanf_r+0x9fa>
    fae2:	lsls	r2, r5, #21
    fae4:	bpl.w	f952 <__ssvfscanf_r+0x85e>
    fae8:	cmp	r6, #0
    faea:	beq.w	f9dc <__ssvfscanf_r+0x8e8>
    faee:	lsls	r2, r5, #22
    faf0:	bmi.n	fafc <__ssvfscanf_r+0xa08>
    faf2:	ldr	r2, [sp, #44]	; 0x2c
    faf4:	str.w	r9, [sp, #60]	; 0x3c
    faf8:	subs	r2, r6, r2
    fafa:	str	r2, [sp, #52]	; 0x34
    fafc:	bic.w	r5, r5, #1920	; 0x780
    fb00:	orr.w	r5, r5, #384	; 0x180
    fb04:	movs	r6, #0
    fb06:	b.n	f928 <__ssvfscanf_r+0x834>
    fb08:	cmp	r3, #1
    fb0a:	bne.w	f952 <__ssvfscanf_r+0x85e>
    fb0e:	movs	r3, #2
    fb10:	b.n	f928 <__ssvfscanf_r+0x834>
    fb12:	ldr	r2, [sp, #48]	; 0x30
    fb14:	ldrb.w	lr, [r2]
    fb18:	cmp	lr, r1
    fb1a:	bne.w	f952 <__ssvfscanf_r+0x85e>
    fb1e:	lsls	r2, r5, #22
    fb20:	bpl.w	f952 <__ssvfscanf_r+0x85e>
    fb24:	bic.w	r5, r5, #640	; 0x280
    fb28:	str	r6, [sp, #44]	; 0x2c
    fb2a:	b.n	f928 <__ssvfscanf_r+0x834>
    fb2c:	mov	r1, fp
    fb2e:	mov	r0, sl
    fb30:	str	r3, [sp, #32]
    fb32:	bl	12b2c <__ssrefill_r>
    fb36:	ldr	r3, [sp, #32]
    fb38:	cmp	r0, #0
    fb3a:	bne.w	f952 <__ssvfscanf_r+0x85e>
    fb3e:	cmp	r4, #0
    fb40:	bne.w	f86a <__ssvfscanf_r+0x776>
    fb44:	b.n	f952 <__ssvfscanf_r+0x85e>
    fb46:	cmp.w	r8, #3
    fb4a:	beq.w	f9b6 <__ssvfscanf_r+0x8c2>
    fb4e:	cmp.w	r8, #5
    fb52:	beq.w	f9b6 <__ssvfscanf_r+0x8c2>
    fb56:	b.n	f952 <__ssvfscanf_r+0x85e>
    fb58:	cmp	r3, #2
    fb5a:	bne.w	f9aa <__ssvfscanf_r+0x8b6>
    fb5e:	movs	r3, #3
    fb60:	b.n	f928 <__ssvfscanf_r+0x834>
    fb62:	subs	r3, r4, #1
    fb64:	cmp.w	r3, #348	; 0x15c
    fb68:	itte	hi
    fb6a:	mvnhi.w	r0, #348	; 0x15c
    fb6e:	addhi.w	r9, r4, r0
    fb72:	movls	r9, r8
    fb74:	add	r3, sp, #336	; 0x150
    fb76:	mov	r0, r2
    fb78:	mov	r2, r7
    fb7a:	mov	r7, r9
    fb7c:	ldr.w	r9, [sp, #16]
    fb80:	str	r3, [sp, #40]	; 0x28
    fb82:	it	hi
    fb84:	movwhi	r4, #349	; 0x15d
    fb88:	orr.w	r5, r5, #3456	; 0xd80
    fb8c:	mov	r6, r3
    fb8e:	mov.w	r8, #0
    fb92:	sub.w	r3, r1, #43	; 0x2b
    fb96:	cmp	r3, #77	; 0x4d
    fb98:	bhi.n	fc3e <__ssvfscanf_r+0xb4a>
    fb9a:	tbb	[pc, r3]
    fb9e:	.short	0x507e
    fba0:	.word	0x6f50507e
    fba4:	.word	0x69696969
    fba8:	.word	0x4a696969
    fbac:	.word	0x5050504a
    fbb0:	.word	0x50505050
    fbb4:	.word	0x44444444
    fbb8:	.word	0x50504444
    fbbc:	.word	0x50505050
    fbc0:	.word	0x50505050
    fbc4:	.word	0x50505050
    fbc8:	.word	0x27505050
    fbcc:	.word	0x50505050
    fbd0:	.word	0x50505050
    fbd4:	.word	0x44444444
    fbd8:	.word	0x50504444
    fbdc:	.word	0x50505050
    fbe0:	.word	0x50505050
    fbe4:	.word	0x50505050
    fbe8:	.word	0x27505050
    fbec:	and.w	r3, r5, #1536	; 0x600
    fbf0:	cmp.w	r3, #512	; 0x200
    fbf4:	bne.n	fc3e <__ssvfscanf_r+0xb4a>
    fbf6:	bic.w	r5, r5, #512	; 0x200
    fbfa:	orr.w	r5, r5, #1280	; 0x500
    fbfe:	mov.w	r9, #16
    fc02:	strb	r1, [r6, #0]
    fc04:	adds	r6, #1
    fc06:	ldr.w	r3, [fp, #4]
    fc0a:	subs	r3, #1
    fc0c:	cmp	r3, #0
    fc0e:	str.w	r3, [fp, #4]
    fc12:	ble.n	fcfa <__ssvfscanf_r+0xc06>
    fc14:	adds	r0, #1
    fc16:	str.w	r0, [fp]
    fc1a:	subs	r4, #1
    fc1c:	beq.n	fc3e <__ssvfscanf_r+0xb4a>
    fc1e:	ldr.w	r0, [fp]
    fc22:	ldrb	r1, [r0, #0]
    fc24:	b.n	fb92 <__ssvfscanf_r+0xa9e>
    fc26:	cmp.w	r9, #10
    fc2a:	ble.n	fc3e <__ssvfscanf_r+0xb4a>
    fc2c:	bic.w	r5, r5, #2944	; 0xb80
    fc30:	b.n	fc02 <__ssvfscanf_r+0xb0e>
    fc32:	ldr	r3, [pc, #756]	; (ff28 <__ssvfscanf_r+0xe34>)
    fc34:	ldrsh.w	r9, [r3, r9, lsl #1]
    fc38:	cmp.w	r9, #8
    fc3c:	bgt.n	fc2c <__ssvfscanf_r+0xb38>
    fc3e:	lsls	r1, r5, #23
    fc40:	mov	r7, r2
    fc42:	str.w	r9, [sp, #16]
    fc46:	bpl.n	fc58 <__ssvfscanf_r+0xb64>
    fc48:	ldr	r3, [sp, #40]	; 0x28
    fc4a:	cmp	r6, r3
    fc4c:	bhi.w	fe38 <__ssvfscanf_r+0xd44>
    fc50:	ldr	r3, [sp, #40]	; 0x28
    fc52:	cmp	r6, r3
    fc54:	beq.w	f190 <__ssvfscanf_r+0x9c>
    fc58:	ands.w	r4, r5, #16
    fc5c:	beq.w	fd84 <__ssvfscanf_r+0xc90>
    fc60:	ldr	r3, [sp, #40]	; 0x28
    fc62:	subs	r6, r6, r3
    fc64:	add	r6, r8
    fc66:	add	r7, r6
    fc68:	ldr	r6, [sp, #12]
    fc6a:	mov	r4, r6
    fc6c:	b.w	f184 <__ssvfscanf_r+0x90>
    fc70:	ldr	r3, [pc, #692]	; (ff28 <__ssvfscanf_r+0xe34>)
    fc72:	bic.w	r5, r5, #2944	; 0xb80
    fc76:	ldrsh.w	r9, [r3, r9, lsl #1]
    fc7a:	b.n	fc02 <__ssvfscanf_r+0xb0e>
    fc7c:	lsls	r3, r5, #20
    fc7e:	bpl.n	fc02 <__ssvfscanf_r+0xb0e>
    fc80:	cmp.w	r9, #0
    fc84:	bne.n	fc8e <__ssvfscanf_r+0xb9a>
    fc86:	orr.w	r5, r5, #512	; 0x200
    fc8a:	mov.w	r9, #8
    fc8e:	lsls	r3, r5, #21
    fc90:	bpl.w	fe14 <__ssvfscanf_r+0xd20>
    fc94:	bic.w	r5, r5, #1408	; 0x580
    fc98:	b.n	fc02 <__ssvfscanf_r+0xb0e>
    fc9a:	lsls	r3, r5, #24
    fc9c:	bpl.n	fc3e <__ssvfscanf_r+0xb4a>
    fc9e:	bic.w	r5, r5, #128	; 0x80
    fca2:	b.n	fc02 <__ssvfscanf_r+0xb0e>
    fca4:	cmp	r4, #0
    fca6:	it	eq
    fca8:	moveq.w	r4, #4294967295
    fcac:	ands.w	r3, r5, #1
    fcb0:	bne.w	f570 <__ssvfscanf_r+0x47c>
    fcb4:	lsls	r1, r5, #27
    fcb6:	bpl.n	fd20 <__ssvfscanf_r+0xc2c>
    fcb8:	mov	r5, r3
    fcba:	bl	b968 <__locale_ctype_ptr>
    fcbe:	ldr.w	r3, [fp]
    fcc2:	ldrb	r2, [r3, #0]
    fcc4:	add	r0, r2
    fcc6:	adds	r3, #1
    fcc8:	ldrb	r2, [r0, #1]
    fcca:	lsls	r2, r2, #28
    fccc:	bmi.w	f44e <__ssvfscanf_r+0x35a>
    fcd0:	ldr.w	r2, [fp, #4]
    fcd4:	str.w	r3, [fp]
    fcd8:	adds	r5, #1
    fcda:	subs	r3, r2, #1
    fcdc:	cmp	r4, r5
    fcde:	str.w	r3, [fp, #4]
    fce2:	beq.w	f44e <__ssvfscanf_r+0x35a>
    fce6:	cmp	r3, #0
    fce8:	bgt.n	fcba <__ssvfscanf_r+0xbc6>
    fcea:	mov	r1, fp
    fcec:	mov	r0, sl
    fcee:	bl	12b2c <__ssrefill_r>
    fcf2:	cmp	r0, #0
    fcf4:	beq.n	fcba <__ssvfscanf_r+0xbc6>
    fcf6:	b.w	f44e <__ssvfscanf_r+0x35a>
    fcfa:	mov	r1, fp
    fcfc:	mov	r0, sl
    fcfe:	str	r2, [sp, #16]
    fd00:	bl	12b2c <__ssrefill_r>
    fd04:	ldr	r2, [sp, #16]
    fd06:	cmp	r0, #0
    fd08:	beq.n	fc1a <__ssvfscanf_r+0xb26>
    fd0a:	b.n	fc3e <__ssvfscanf_r+0xb4a>
    fd0c:	str.w	r8, [sp, #56]	; 0x38
    fd10:	b.n	f84a <__ssvfscanf_r+0x756>
    fd12:	ldr	r2, [sp, #20]
    fd14:	ldr	r3, [r2, #0]
    fd16:	adds	r2, #4
    fd18:	str	r2, [sp, #20]
    fd1a:	vstr	d0, [r3]
    fd1e:	b.n	fabc <__ssvfscanf_r+0x9c8>
    fd20:	ldr	r2, [sp, #20]
    fd22:	ldr	r5, [r2, #0]
    fd24:	adds	r6, r2, #4
    fd26:	add	r4, r5
    fd28:	mov	r8, r5
    fd2a:	bl	b968 <__locale_ctype_ptr>
    fd2e:	ldr.w	r2, [fp]
    fd32:	ldrb	r3, [r2, #0]
    fd34:	add	r0, r3
    fd36:	adds	r1, r2, #1
    fd38:	ldrb	r3, [r0, #1]
    fd3a:	lsls	r3, r3, #28
    fd3c:	bmi.n	fd6a <__ssvfscanf_r+0xc76>
    fd3e:	ldr.w	r3, [fp, #4]
    fd42:	str.w	r1, [fp]
    fd46:	subs	r3, #1
    fd48:	str.w	r3, [fp, #4]
    fd4c:	ldrb	r3, [r2, #0]
    fd4e:	strb.w	r3, [r8], #1
    fd52:	cmp	r4, r8
    fd54:	beq.n	fd6c <__ssvfscanf_r+0xc78>
    fd56:	ldr.w	r3, [fp, #4]
    fd5a:	cmp	r3, #0
    fd5c:	bgt.n	fd2a <__ssvfscanf_r+0xc36>
    fd5e:	mov	r1, fp
    fd60:	mov	r0, sl
    fd62:	bl	12b2c <__ssrefill_r>
    fd66:	cmp	r0, #0
    fd68:	beq.n	fd2a <__ssvfscanf_r+0xc36>
    fd6a:	mov	r4, r8
    fd6c:	ldr	r2, [sp, #24]
    fd6e:	str	r6, [sp, #20]
    fd70:	ldr	r6, [sp, #12]
    fd72:	subs	r5, r4, r5
    fd74:	movs	r3, #0
    fd76:	adds	r2, #1
    fd78:	strb	r3, [r4, #0]
    fd7a:	add	r7, r5
    fd7c:	str	r2, [sp, #24]
    fd7e:	mov	r4, r6
    fd80:	b.w	f184 <__ssvfscanf_r+0x90>
    fd84:	mov	r2, r4
    fd86:	strb	r4, [r6, #0]
    fd88:	ldr	r3, [sp, #16]
    fd8a:	ldr	r1, [sp, #40]	; 0x28
    fd8c:	ldr	r4, [sp, #28]
    fd8e:	mov	r0, sl
    fd90:	blx	r4
    fd92:	lsls	r2, r5, #26
    fd94:	bmi.n	fe24 <__ssvfscanf_r+0xd30>
    fd96:	lsls	r3, r5, #29
    fd98:	bpl.n	fe92 <__ssvfscanf_r+0xd9e>
    fd9a:	ldr	r2, [sp, #20]
    fd9c:	ldr	r3, [r2, #0]
    fd9e:	adds	r2, #4
    fda0:	str	r2, [sp, #20]
    fda2:	strh	r0, [r3, #0]
    fda4:	ldr	r3, [sp, #24]
    fda6:	adds	r3, #1
    fda8:	str	r3, [sp, #24]
    fdaa:	b.n	fc60 <__ssvfscanf_r+0xb6c>
    fdac:	bl	b944 <__locale_mb_cur_max>
    fdb0:	cmp	r6, r0
    fdb2:	beq.w	f33e <__ssvfscanf_r+0x24a>
    fdb6:	ldmia.w	fp, {r2, r3}
    fdba:	ldrb.w	r0, [r2], #1
    fdbe:	str.w	r2, [fp]
    fdc2:	ldr	r2, [sp, #32]
    fdc4:	str	r2, [sp, #0]
    fdc6:	add	r2, sp, #336	; 0x150
    fdc8:	adds	r5, r6, #1
    fdca:	subs	r3, #1
    fdcc:	strb	r0, [r2, r6]
    fdce:	str.w	r3, [fp, #4]
    fdd2:	mov	r1, r8
    fdd4:	mov	r3, r5
    fdd6:	mov	r0, sl
    fdd8:	bl	11a84 <_mbrtowc_r>
    fddc:	adds	r6, r0, #1
    fdde:	beq.w	f33e <__ssvfscanf_r+0x24a>
    fde2:	cmp	r0, #0
    fde4:	bne.n	febe <__ssvfscanf_r+0xdca>
    fde6:	str.w	r0, [r8]
    fdea:	bl	11a48 <iswspace>
    fdee:	cmp	r0, #0
    fdf0:	beq.w	ff52 <__ssvfscanf_r+0xe5e>
    fdf4:	cmp	r5, #0
    fdf6:	beq.w	f5ac <__ssvfscanf_r+0x4b8>
    fdfa:	add	r3, sp, #336	; 0x150
    fdfc:	adds	r4, r3, r5
    fdfe:	subs	r5, #1
    fe00:	mov	r2, fp
    fe02:	ldrb.w	r1, [r4, #-1]!
    fe06:	mov	r0, sl
    fe08:	bl	12aa8 <_sungetc_r>
    fe0c:	cmp	r5, #0
    fe0e:	bne.n	fdfe <__ssvfscanf_r+0xd0a>
    fe10:	b.w	f5ac <__ssvfscanf_r+0x4b8>
    fe14:	bic.w	r5, r5, #896	; 0x380
    fe18:	cbz	r7, fe1e <__ssvfscanf_r+0xd2a>
    fe1a:	subs	r7, #1
    fe1c:	adds	r4, #1
    fe1e:	add.w	r8, r8, #1
    fe22:	b.n	fc06 <__ssvfscanf_r+0xb12>
    fe24:	ldr	r2, [sp, #20]
    fe26:	ldr	r3, [r2, #0]
    fe28:	adds	r2, #4
    fe2a:	str	r2, [sp, #20]
    fe2c:	str	r0, [r3, #0]
    fe2e:	b.n	fda4 <__ssvfscanf_r+0xcb0>
    fe30:	bic.w	r5, r5, #1920	; 0x780
    fe34:	movs	r3, #1
    fe36:	b.n	f928 <__ssvfscanf_r+0x834>
    fe38:	ldrb.w	r1, [r6, #-1]
    fe3c:	mov	r2, fp
    fe3e:	mov	r0, sl
    fe40:	bl	12aa8 <_sungetc_r>
    fe44:	subs	r6, #1
    fe46:	b.n	fc50 <__ssvfscanf_r+0xb5c>
    fe48:	add.w	r8, sp, #68	; 0x44
    fe4c:	b.w	f592 <__ssvfscanf_r+0x49e>
    fe50:	bic.w	r5, r5, #1920	; 0x780
    fe54:	mov.w	r8, #1
    fe58:	b.n	f928 <__ssvfscanf_r+0x834>
    fe5a:	ldr	r3, [sp, #44]	; 0x2c
    fe5c:	subs	r6, r6, r3
    fe5e:	negs	r2, r6
    fe60:	cmp	r6, #0
    fe62:	beq.w	fa78 <__ssvfscanf_r+0x984>
    fe66:	addw	r3, sp, #675	; 0x2a3
    fe6a:	cmp	r9, r3
    fe6c:	it	cs
    fe6e:	addwcs	r9, sp, #674	; 0x2a2
    fe72:	mov	r0, r9
    fe74:	ldr	r1, [pc, #180]	; (ff2c <__ssvfscanf_r+0xe38>)
    fe76:	bl	c5b4 <sprintf>
    fe7a:	b.n	fa78 <__ssvfscanf_r+0x984>
    fe7c:	ldr	r4, [sp, #60]	; 0x3c
    fe7e:	mov	r1, r4
    fe80:	movs	r3, #10
    fe82:	adds	r1, #1
    fe84:	mov	r0, sl
    fe86:	bl	d9e8 <_strtol_r>
    fe8a:	ldr	r3, [sp, #52]	; 0x34
    fe8c:	mov	r9, r4
    fe8e:	subs	r2, r0, r3
    fe90:	b.n	fe66 <__ssvfscanf_r+0xd72>
    fe92:	ands.w	r2, r5, #1
    fe96:	bne.n	fe24 <__ssvfscanf_r+0xd30>
    fe98:	lsls	r4, r5, #30
    fe9a:	bpl.n	fe24 <__ssvfscanf_r+0xd30>
    fe9c:	ldr	r3, [sp, #28]
    fe9e:	mov	r1, r3
    fea0:	ldr	r3, [pc, #140]	; (ff30 <__ssvfscanf_r+0xe3c>)
    fea2:	cmp	r1, r3
    fea4:	mov	r0, sl
    fea6:	ldr	r3, [sp, #16]
    fea8:	ldr	r1, [sp, #40]	; 0x28
    feaa:	beq.n	ff76 <__ssvfscanf_r+0xe82>
    feac:	bl	125e8 <_strtoll_r>
    feb0:	ldr	r2, [sp, #20]
    feb2:	ldr	r3, [r2, #0]
    feb4:	adds	r2, #4
    feb6:	str	r2, [sp, #20]
    feb8:	strd	r0, r1, [r3]
    febc:	b.n	fda4 <__ssvfscanf_r+0xcb0>
    febe:	adds	r0, #2
    fec0:	bne.n	ff04 <__ssvfscanf_r+0xe10>
    fec2:	mov	r6, r5
    fec4:	ldr.w	r3, [fp, #4]
    fec8:	cmp	r3, #0
    feca:	bgt.w	f594 <__ssvfscanf_r+0x4a0>
    fece:	mov	r1, fp
    fed0:	mov	r0, sl
    fed2:	bl	12b2c <__ssrefill_r>
    fed6:	cmp	r0, #0
    fed8:	beq.w	f594 <__ssvfscanf_r+0x4a0>
    fedc:	cmp	r6, #0
    fede:	bne.w	f33e <__ssvfscanf_r+0x24a>
    fee2:	b.w	f5ac <__ssvfscanf_r+0x4b8>
    fee6:	ldr	r3, [sp, #40]	; 0x28
    fee8:	cmp	r9, r3
    feea:	bls.w	f190 <__ssvfscanf_r+0x9c>
    feee:	ldrb.w	r1, [r9, #-1]!
    fef2:	mov	r2, fp
    fef4:	mov	r0, sl
    fef6:	bl	12aa8 <_sungetc_r>
    fefa:	ldr	r3, [sp, #40]	; 0x28
    fefc:	cmp	r9, r3
    fefe:	bne.n	feee <__ssvfscanf_r+0xdfa>
    ff00:	b.w	f190 <__ssvfscanf_r+0x9c>
    ff04:	ldr.w	r0, [r8]
    ff08:	b.n	fdea <__ssvfscanf_r+0xcf6>
    ff0a:	ldr	r3, [sp, #40]	; 0x28
    ff0c:	cmp	r9, r3
    ff0e:	bls.w	f190 <__ssvfscanf_r+0x9c>
    ff12:	ldrb.w	r1, [r9, #-1]!
    ff16:	mov	r2, fp
    ff18:	mov	r0, sl
    ff1a:	bl	12aa8 <_sungetc_r>
    ff1e:	ldr	r3, [sp, #40]	; 0x28
    ff20:	cmp	r9, r3
    ff22:	bne.n	ff12 <__ssvfscanf_r+0xe1e>
    ff24:	b.w	f190 <__ssvfscanf_r+0x9c>
    ff28:	.word	0x00013854
    ff2c:	.word	0x00013878
    ff30:	.word	0x00012775
    ff34:	ldr	r3, [sp, #40]	; 0x28
    ff36:	cmp	r9, r3
    ff38:	bls.w	f190 <__ssvfscanf_r+0x9c>
    ff3c:	ldrb.w	r1, [r9, #-1]!
    ff40:	mov	r2, fp
    ff42:	mov	r0, sl
    ff44:	bl	12aa8 <_sungetc_r>
    ff48:	ldr	r3, [sp, #40]	; 0x28
    ff4a:	cmp	r9, r3
    ff4c:	bne.n	ff3c <__ssvfscanf_r+0xe48>
    ff4e:	b.w	f190 <__ssvfscanf_r+0x9c>
    ff52:	add	r7, r5
    ff54:	subs	r4, #1
    ff56:	cmp.w	r9, #0
    ff5a:	bne.n	ff64 <__ssvfscanf_r+0xe70>
    ff5c:	add.w	r8, r8, #4
    ff60:	mov	r6, r9
    ff62:	b.n	fec4 <__ssvfscanf_r+0xdd0>
    ff64:	mov	r6, r0
    ff66:	b.n	fec4 <__ssvfscanf_r+0xdd0>
    ff68:	mov	r0, r5
    ff6a:	bl	a908 <nanf>
    ff6e:	str	r6, [sp, #20]
    ff70:	vstr	s0, [r4]
    ff74:	b.n	fabc <__ssvfscanf_r+0x9c8>
    ff76:	bl	12984 <_strtoull_r>
    ff7a:	b.n	feb0 <__ssvfscanf_r+0xdbc>

0000ff7c <_vdprintf_r>:
    ff7c:	push	{r4, r5, r6, r7, lr}
    ff7e:	sub.w	sp, sp, #532	; 0x214
    ff82:	add	r5, sp, #16
    ff84:	str	r3, [sp, #0]
    ff86:	mov	r7, r1
    ff88:	mov	r3, r2
    ff8a:	mov.w	r4, #512	; 0x200
    ff8e:	add	r2, sp, #12
    ff90:	mov	r1, r5
    ff92:	str	r4, [sp, #12]
    ff94:	mov	r6, r0
    ff96:	bl	12c64 <_vasnprintf_r>
    ff9a:	cbz	r0, ffc0 <_vdprintf_r+0x44>
    ff9c:	mov	r4, r0
    ff9e:	mov	r2, r0
    ffa0:	mov	r1, r7
    ffa2:	ldr	r3, [sp, #12]
    ffa4:	mov	r0, r6
    ffa6:	bl	fffc <_write_r>
    ffaa:	cmp	r4, r5
    ffac:	str	r0, [sp, #12]
    ffae:	beq.n	ffba <_vdprintf_r+0x3e>
    ffb0:	mov	r0, r6
    ffb2:	mov	r1, r4
    ffb4:	bl	11110 <_free_r>
    ffb8:	ldr	r0, [sp, #12]
    ffba:	add.w	sp, sp, #532	; 0x214
    ffbe:	pop	{r4, r5, r6, r7, pc}
    ffc0:	mov.w	r0, #4294967295
    ffc4:	b.n	ffba <_vdprintf_r+0x3e>
    ffc6:	nop

0000ffc8 <vdprintf>:
    ffc8:	push	{r4}
    ffca:	ldr	r4, [pc, #16]	; (ffdc <vdprintf+0x14>)
    ffcc:	mov	r3, r2
    ffce:	mov	r2, r1
    ffd0:	mov	r1, r0
    ffd2:	ldr	r0, [r4, #0]
    ffd4:	ldr.w	r4, [sp], #4
    ffd8:	b.w	ff7c <_vdprintf_r>
    ffdc:	.word	0x20017400

0000ffe0 <__ascii_wctomb>:
    ffe0:	cbz	r1, ffec <__ascii_wctomb+0xc>
    ffe2:	cmp	r2, #255	; 0xff
    ffe4:	bhi.n	fff0 <__ascii_wctomb+0x10>
    ffe6:	strb	r2, [r1, #0]
    ffe8:	movs	r0, #1
    ffea:	bx	lr
    ffec:	mov	r0, r1
    ffee:	bx	lr
    fff0:	movs	r3, #138	; 0x8a
    fff2:	str	r3, [r0, #0]
    fff4:	mov.w	r0, #4294967295
    fff8:	bx	lr
    fffa:	nop

0000fffc <_write_r>:
    fffc:	push	{r4, r5, r6, lr}
    fffe:	mov	r5, r1
   10000:	ldr	r4, [pc, #32]	; (10024 <_write_r+0x28>)
   10002:	mov	r1, r2
   10004:	mov	r6, r0
   10006:	mov	r2, r3
   10008:	mov	r0, r5
   1000a:	movs	r3, #0
   1000c:	str	r3, [r4, #0]
   1000e:	bl	9d0c <_write>
   10012:	adds	r3, r0, #1
   10014:	beq.n	10018 <_write_r+0x1c>
   10016:	pop	{r4, r5, r6, pc}
   10018:	ldr	r3, [r4, #0]
   1001a:	cmp	r3, #0
   1001c:	beq.n	10016 <_write_r+0x1a>
   1001e:	str	r3, [r6, #0]
   10020:	pop	{r4, r5, r6, pc}
   10022:	nop
   10024:	.word	0x2001ce3c

00010028 <__register_exitproc>:
   10028:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1002c:	ldr	r4, [pc, #148]	; (100c4 <__register_exitproc+0x9c>)
   1002e:	ldr	r5, [r4, #0]
   10030:	ldr.w	r4, [r5, #328]	; 0x148
   10034:	mov	r6, r0
   10036:	mov	r8, r1
   10038:	mov	sl, r2
   1003a:	mov	r9, r3
   1003c:	cbz	r4, 100b0 <__register_exitproc+0x88>
   1003e:	ldr	r0, [r4, #4]
   10040:	cmp	r0, #31
   10042:	bgt.n	10074 <__register_exitproc+0x4c>
   10044:	adds	r3, r0, #1
   10046:	cbz	r6, 10066 <__register_exitproc+0x3e>
   10048:	add.w	r5, r4, r0, lsl #2
   1004c:	movs	r2, #1
   1004e:	str.w	sl, [r5, #136]	; 0x88
   10052:	ldr.w	r1, [r4, #392]	; 0x188
   10056:	lsls	r2, r0
   10058:	orrs	r1, r2
   1005a:	cmp	r6, #2
   1005c:	str.w	r1, [r4, #392]	; 0x188
   10060:	str.w	r9, [r5, #264]	; 0x108
   10064:	beq.n	100a4 <__register_exitproc+0x7c>
   10066:	adds	r0, #2
   10068:	str	r3, [r4, #4]
   1006a:	str.w	r8, [r4, r0, lsl #2]
   1006e:	movs	r0, #0
   10070:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10074:	ldr	r3, [pc, #80]	; (100c8 <__register_exitproc+0xa0>)
   10076:	cbz	r3, 100ba <__register_exitproc+0x92>
   10078:	mov.w	r0, #400	; 0x190
   1007c:	bl	b97c <malloc>
   10080:	mov	r4, r0
   10082:	cbz	r0, 100ba <__register_exitproc+0x92>
   10084:	ldr.w	r3, [r5, #328]	; 0x148
   10088:	movs	r7, #0
   1008a:	stmia.w	r0, {r3, r7}
   1008e:	str.w	r4, [r5, #328]	; 0x148
   10092:	mov	r0, r7
   10094:	movs	r3, #1
   10096:	str.w	r7, [r4, #392]	; 0x188
   1009a:	str.w	r7, [r4, #396]	; 0x18c
   1009e:	cmp	r6, #0
   100a0:	beq.n	10066 <__register_exitproc+0x3e>
   100a2:	b.n	10048 <__register_exitproc+0x20>
   100a4:	ldr.w	r1, [r4, #396]	; 0x18c
   100a8:	orrs	r2, r1
   100aa:	str.w	r2, [r4, #396]	; 0x18c
   100ae:	b.n	10066 <__register_exitproc+0x3e>
   100b0:	add.w	r4, r5, #332	; 0x14c
   100b4:	str.w	r4, [r5, #328]	; 0x148
   100b8:	b.n	1003e <__register_exitproc+0x16>
   100ba:	mov.w	r0, #4294967295
   100be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   100c2:	nop
   100c4:	.word	0x00013778
   100c8:	.word	0x0000b97d

000100cc <register_fini>:
   100cc:	ldr	r3, [pc, #8]	; (100d8 <register_fini+0xc>)
   100ce:	cbz	r3, 100d6 <register_fini+0xa>
   100d0:	ldr	r0, [pc, #8]	; (100dc <register_fini+0x10>)
   100d2:	b.w	100e0 <atexit>
   100d6:	bx	lr
   100d8:	.word	0x00000000
   100dc:	.word	0x0001104d

000100e0 <atexit>:
   100e0:	movs	r3, #0
   100e2:	mov	r1, r0
   100e4:	mov	r2, r3
   100e6:	mov	r0, r3
   100e8:	b.w	10028 <__register_exitproc>

000100ec <quorem>:
   100ec:	ldr	r2, [r0, #16]
   100ee:	ldr	r3, [r1, #16]
   100f0:	cmp	r3, r2
   100f2:	bgt.w	10210 <quorem+0x124>
   100f6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   100fa:	add.w	r8, r3, #4294967295
   100fe:	add.w	r7, r1, #20
   10102:	add.w	fp, r0, #20
   10106:	ldr.w	r2, [r7, r8, lsl #2]
   1010a:	ldr.w	r3, [fp, r8, lsl #2]
   1010e:	mov.w	r4, r8, lsl #2
   10112:	sub	sp, #12
   10114:	adds	r2, #1
   10116:	udiv	r9, r3, r2
   1011a:	add.w	r3, fp, r4
   1011e:	str	r4, [sp, #0]
   10120:	add.w	sl, r7, r4
   10124:	str	r3, [sp, #4]
   10126:	cmp.w	r9, #0
   1012a:	beq.n	101a0 <quorem+0xb4>
   1012c:	movs	r5, #0
   1012e:	mov	ip, r7
   10130:	mov	lr, fp
   10132:	mov	r3, r5
   10134:	ldr.w	r6, [ip], #4
   10138:	ldr.w	r2, [lr]
   1013c:	uxth	r4, r6
   1013e:	mla	r5, r9, r4, r5
   10142:	lsrs	r6, r6, #16
   10144:	lsrs	r4, r5, #16
   10146:	mla	r4, r9, r6, r4
   1014a:	uxth	r5, r5
   1014c:	subs	r3, r3, r5
   1014e:	uxth	r6, r4
   10150:	uxtah	r3, r3, r2
   10154:	rsb	r6, r6, r2, lsr #16
   10158:	add.w	r6, r6, r3, asr #16
   1015c:	uxth	r3, r3
   1015e:	orr.w	r3, r3, r6, lsl #16
   10162:	cmp	sl, ip
   10164:	str.w	r3, [lr], #4
   10168:	mov.w	r5, r4, lsr #16
   1016c:	mov.w	r3, r6, asr #16
   10170:	bcs.n	10134 <quorem+0x48>
   10172:	ldr	r3, [sp, #0]
   10174:	ldr.w	r3, [fp, r3]
   10178:	cbnz	r3, 101a0 <quorem+0xb4>
   1017a:	ldr	r4, [sp, #4]
   1017c:	subs	r3, r4, #4
   1017e:	cmp	fp, r3
   10180:	bcs.n	1019c <quorem+0xb0>
   10182:	ldr.w	r3, [r4, #-4]
   10186:	cbnz	r3, 1019c <quorem+0xb0>
   10188:	sub.w	r3, r4, #8
   1018c:	b.n	10194 <quorem+0xa8>
   1018e:	ldr	r2, [r3, #0]
   10190:	subs	r3, #4
   10192:	cbnz	r2, 1019c <quorem+0xb0>
   10194:	cmp	fp, r3
   10196:	add.w	r8, r8, #4294967295
   1019a:	bcc.n	1018e <quorem+0xa2>
   1019c:	str.w	r8, [r0, #16]
   101a0:	mov	r4, r0
   101a2:	bl	11f88 <__mcmp>
   101a6:	cmp	r0, #0
   101a8:	blt.n	10208 <quorem+0x11c>
   101aa:	add.w	r9, r9, #1
   101ae:	mov	r5, fp
   101b0:	movs	r3, #0
   101b2:	ldr.w	r1, [r7], #4
   101b6:	ldr	r0, [r5, #0]
   101b8:	uxth	r2, r1
   101ba:	subs	r2, r3, r2
   101bc:	lsrs	r1, r1, #16
   101be:	uxtah	r2, r2, r0
   101c2:	rsb	r3, r1, r0, lsr #16
   101c6:	add.w	r3, r3, r2, asr #16
   101ca:	uxth	r1, r2
   101cc:	orr.w	r1, r1, r3, lsl #16
   101d0:	cmp	sl, r7
   101d2:	str.w	r1, [r5], #4
   101d6:	mov.w	r3, r3, asr #16
   101da:	bcs.n	101b2 <quorem+0xc6>
   101dc:	ldr.w	r2, [fp, r8, lsl #2]
   101e0:	add.w	r3, fp, r8, lsl #2
   101e4:	cbnz	r2, 10208 <quorem+0x11c>
   101e6:	subs	r2, r3, #4
   101e8:	cmp	fp, r2
   101ea:	bcs.n	10204 <quorem+0x118>
   101ec:	ldr.w	r2, [r3, #-4]
   101f0:	cbnz	r2, 10204 <quorem+0x118>
   101f2:	subs	r3, #8
   101f4:	b.n	101fc <quorem+0x110>
   101f6:	ldr	r2, [r3, #0]
   101f8:	subs	r3, #4
   101fa:	cbnz	r2, 10204 <quorem+0x118>
   101fc:	cmp	fp, r3
   101fe:	add.w	r8, r8, #4294967295
   10202:	bcc.n	101f6 <quorem+0x10a>
   10204:	str.w	r8, [r4, #16]
   10208:	mov	r0, r9
   1020a:	add	sp, #12
   1020c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10210:	movs	r0, #0
   10212:	bx	lr
   10214:			; <UNDEFINED> instruction: 0xffffffff

00010218 <_dtoa_r>:
   10218:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1021c:	vmov	r6, r7, d0
   10220:	sub	sp, #108	; 0x6c
   10222:	ldr	r4, [r0, #64]	; 0x40
   10224:	ldr	r5, [sp, #144]	; 0x90
   10226:	str	r1, [sp, #0]
   10228:	mov	r9, r0
   1022a:	str	r2, [sp, #20]
   1022c:	str	r3, [sp, #12]
   1022e:	vmov	sl, s0
   10232:	mov	fp, r7
   10234:	cbz	r4, 1024c <_dtoa_r+0x34>
   10236:	ldr	r2, [r0, #68]	; 0x44
   10238:	str	r2, [r4, #4]
   1023a:	movs	r3, #1
   1023c:	lsls	r3, r2
   1023e:	str	r3, [r4, #8]
   10240:	mov	r1, r4
   10242:	bl	11b2c <_Bfree>
   10246:	movs	r3, #0
   10248:	str.w	r3, [r9, #64]	; 0x40
   1024c:	cmp.w	fp, #0
   10250:	mov	r4, fp
   10252:	blt.n	102be <_dtoa_r+0xa6>
   10254:	movs	r3, #0
   10256:	str	r3, [r5, #0]
   10258:	ldr	r3, [pc, #644]	; (104e0 <_dtoa_r+0x2c8>)
   1025a:	mov	r2, r3
   1025c:	ands	r3, r4
   1025e:	cmp	r3, r2
   10260:	beq.n	10290 <_dtoa_r+0x78>
   10262:	movs	r2, #0
   10264:	movs	r3, #0
   10266:	mov	r0, sl
   10268:	mov	r1, fp
   1026a:	bl	b160 <__aeabi_dcmpeq>
   1026e:	mov	r6, sl
   10270:	mov	r7, fp
   10272:	mov	r8, r0
   10274:	cbz	r0, 102ca <_dtoa_r+0xb2>
   10276:	ldr	r2, [sp, #12]
   10278:	movs	r3, #1
   1027a:	str	r3, [r2, #0]
   1027c:	ldr	r3, [sp, #148]	; 0x94
   1027e:	cmp	r3, #0
   10280:	beq.w	10400 <_dtoa_r+0x1e8>
   10284:	ldr	r0, [pc, #604]	; (104e4 <_dtoa_r+0x2cc>)
   10286:	str	r0, [r3, #0]
   10288:	subs	r0, #1
   1028a:	add	sp, #108	; 0x6c
   1028c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10290:	ldr	r2, [sp, #12]
   10292:	movw	r3, #9999	; 0x270f
   10296:	str	r3, [r2, #0]
   10298:	cmp.w	sl, #0
   1029c:	beq.w	103d4 <_dtoa_r+0x1bc>
   102a0:	ldr	r0, [pc, #580]	; (104e8 <_dtoa_r+0x2d0>)
   102a2:	ldr	r3, [sp, #148]	; 0x94
   102a4:	cmp	r3, #0
   102a6:	beq.n	1028a <_dtoa_r+0x72>
   102a8:	ldrb	r3, [r0, #3]
   102aa:	cmp	r3, #0
   102ac:	beq.w	10404 <_dtoa_r+0x1ec>
   102b0:	add.w	r3, r0, #8
   102b4:	ldr	r2, [sp, #148]	; 0x94
   102b6:	str	r3, [r2, #0]
   102b8:	add	sp, #108	; 0x6c
   102ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   102be:	movs	r3, #1
   102c0:	bic.w	r4, fp, #2147483648	; 0x80000000
   102c4:	str	r3, [r5, #0]
   102c6:	mov	fp, r4
   102c8:	b.n	10258 <_dtoa_r+0x40>
   102ca:	add	r2, sp, #96	; 0x60
   102cc:	add	r1, sp, #100	; 0x64
   102ce:	vmov	d0, r6, r7
   102d2:	mov	r0, r9
   102d4:	bl	12204 <__d2b>
   102d8:	lsrs	r5, r4, #20
   102da:	str	r0, [sp, #40]	; 0x28
   102dc:	bne.w	103e6 <_dtoa_r+0x1ce>
   102e0:	ldr	r5, [sp, #96]	; 0x60
   102e2:	ldr	r6, [sp, #100]	; 0x64
   102e4:	add	r6, r5
   102e6:	addw	r3, r6, #1074	; 0x432
   102ea:	cmp	r3, #32
   102ec:	ble.w	10800 <_dtoa_r+0x5e8>
   102f0:	rsb	r3, r3, #64	; 0x40
   102f4:	addw	r0, r6, #1042	; 0x412
   102f8:	lsls	r4, r3
   102fa:	lsr.w	r0, sl, r0
   102fe:	orrs	r0, r4
   10300:	bl	aba4 <__aeabi_ui2d>
   10304:	movs	r3, #1
   10306:	subs	r4, r6, #1
   10308:	sub.w	r1, r1, #32505856	; 0x1f00000
   1030c:	str	r3, [sp, #60]	; 0x3c
   1030e:	movs	r2, #0
   10310:	ldr	r3, [pc, #472]	; (104ec <_dtoa_r+0x2d4>)
   10312:	bl	a928 <__aeabi_dsub>
   10316:	add	r3, pc, #432	; (adr r3, 104c8 <_dtoa_r+0x2b0>)
   10318:	ldrd	r2, r3, [r3]
   1031c:	bl	ac90 <__aeabi_dmul>
   10320:	add	r3, pc, #428	; (adr r3, 104d0 <_dtoa_r+0x2b8>)
   10322:	ldrd	r2, r3, [r3]
   10326:	bl	a92c <__adddf3>
   1032a:	mov	r6, r0
   1032c:	mov	r0, r4
   1032e:	mov	r7, r1
   10330:	bl	abc4 <__aeabi_i2d>
   10334:	add	r3, pc, #416	; (adr r3, 104d8 <_dtoa_r+0x2c0>)
   10336:	ldrd	r2, r3, [r3]
   1033a:	bl	ac90 <__aeabi_dmul>
   1033e:	mov	r2, r0
   10340:	mov	r3, r1
   10342:	mov	r0, r6
   10344:	mov	r1, r7
   10346:	bl	a92c <__adddf3>
   1034a:	mov	r6, r0
   1034c:	mov	r7, r1
   1034e:	bl	b1f0 <__aeabi_d2iz>
   10352:	movs	r2, #0
   10354:	str	r0, [sp, #16]
   10356:	movs	r3, #0
   10358:	mov	r0, r6
   1035a:	mov	r1, r7
   1035c:	bl	b174 <__aeabi_dcmplt>
   10360:	cmp	r0, #0
   10362:	bne.w	107b6 <_dtoa_r+0x59e>
   10366:	ldr	r6, [sp, #16]
   10368:	cmp	r6, #22
   1036a:	bhi.w	107b0 <_dtoa_r+0x598>
   1036e:	ldr	r3, [pc, #384]	; (104f0 <_dtoa_r+0x2d8>)
   10370:	add.w	r3, r3, r6, lsl #3
   10374:	ldrd	r0, r1, [r3]
   10378:	mov	r2, sl
   1037a:	mov	r3, fp
   1037c:	bl	b1b0 <__aeabi_dcmpgt>
   10380:	cmp	r0, #0
   10382:	beq.w	1080a <_dtoa_r+0x5f2>
   10386:	subs	r3, r6, #1
   10388:	str	r3, [sp, #16]
   1038a:	movs	r3, #0
   1038c:	str	r3, [sp, #52]	; 0x34
   1038e:	subs	r5, r5, r4
   10390:	subs.w	r8, r5, #1
   10394:	bmi.w	107ec <_dtoa_r+0x5d4>
   10398:	movs	r3, #0
   1039a:	str	r3, [sp, #28]
   1039c:	ldr	r3, [sp, #16]
   1039e:	cmp	r3, #0
   103a0:	blt.w	107da <_dtoa_r+0x5c2>
   103a4:	add	r8, r3
   103a6:	str	r3, [sp, #48]	; 0x30
   103a8:	movs	r3, #0
   103aa:	str	r3, [sp, #24]
   103ac:	ldr	r3, [sp, #0]
   103ae:	cmp	r3, #9
   103b0:	bhi.n	10408 <_dtoa_r+0x1f0>
   103b2:	cmp	r3, #5
   103b4:	ble.w	11040 <_dtoa_r+0xe28>
   103b8:	subs	r3, #4
   103ba:	str	r3, [sp, #0]
   103bc:	movs	r6, #0
   103be:	ldr	r3, [sp, #0]
   103c0:	subs	r3, #2
   103c2:	cmp	r3, #3
   103c4:	bhi.w	1100e <_dtoa_r+0xdf6>
   103c8:	tbh	[pc, r3, lsl #1]
   103cc:	.word	0x0224032b
   103d0:	.word	0x04500336
   103d4:	ldr	r3, [pc, #272]	; (104e8 <_dtoa_r+0x2d0>)
   103d6:	ldr	r2, [pc, #284]	; (104f4 <_dtoa_r+0x2dc>)
   103d8:	ubfx	r0, r4, #0, #20
   103dc:	cmp	r0, #0
   103de:	ite	ne
   103e0:	movne	r0, r3
   103e2:	moveq	r0, r2
   103e4:	b.n	102a2 <_dtoa_r+0x8a>
   103e6:	ubfx	r3, fp, #0, #20
   103ea:	orr.w	r1, r3, #1069547520	; 0x3fc00000
   103ee:	subw	r4, r5, #1023	; 0x3ff
   103f2:	mov	r0, sl
   103f4:	str.w	r8, [sp, #60]	; 0x3c
   103f8:	orr.w	r1, r1, #3145728	; 0x300000
   103fc:	ldr	r5, [sp, #96]	; 0x60
   103fe:	b.n	1030e <_dtoa_r+0xf6>
   10400:	ldr	r0, [pc, #244]	; (104f8 <_dtoa_r+0x2e0>)
   10402:	b.n	1028a <_dtoa_r+0x72>
   10404:	adds	r3, r0, #3
   10406:	b.n	102b4 <_dtoa_r+0x9c>
   10408:	movs	r1, #0
   1040a:	str.w	r1, [r9, #68]	; 0x44
   1040e:	mov	r0, r9
   10410:	mov	r4, r1
   10412:	str	r1, [sp, #0]
   10414:	bl	11ae0 <_Balloc>
   10418:	mov.w	r3, #4294967295
   1041c:	str	r3, [sp, #32]
   1041e:	str	r3, [sp, #56]	; 0x38
   10420:	movs	r3, #1
   10422:	str	r0, [sp, #36]	; 0x24
   10424:	str.w	r0, [r9, #64]	; 0x40
   10428:	str	r4, [sp, #20]
   1042a:	str	r3, [sp, #44]	; 0x2c
   1042c:	ldr	r3, [sp, #100]	; 0x64
   1042e:	cmp	r3, #0
   10430:	blt.w	105d4 <_dtoa_r+0x3bc>
   10434:	ldr	r2, [sp, #16]
   10436:	cmp	r2, #14
   10438:	bgt.w	105d4 <_dtoa_r+0x3bc>
   1043c:	ldr	r3, [pc, #176]	; (104f0 <_dtoa_r+0x2d8>)
   1043e:	add.w	r3, r3, r2, lsl #3
   10442:	vldr	d7, [r3]
   10446:	ldr	r3, [sp, #20]
   10448:	cmp	r3, #0
   1044a:	vstr	d7, [sp]
   1044e:	blt.w	10a4e <_dtoa_r+0x836>
   10452:	mov	r6, sl
   10454:	mov	r7, fp
   10456:	ldrd	sl, fp, [sp]
   1045a:	mov	r0, r6
   1045c:	mov	r2, sl
   1045e:	mov	r3, fp
   10460:	mov	r1, r7
   10462:	bl	aee4 <__aeabi_ddiv>
   10466:	bl	b1f0 <__aeabi_d2iz>
   1046a:	mov	r4, r0
   1046c:	bl	abc4 <__aeabi_i2d>
   10470:	mov	r2, sl
   10472:	mov	r3, fp
   10474:	bl	ac90 <__aeabi_dmul>
   10478:	mov	r3, r1
   1047a:	mov	r2, r0
   1047c:	mov	r1, r7
   1047e:	mov	r0, r6
   10480:	bl	a928 <__aeabi_dsub>
   10484:	ldr	r5, [sp, #36]	; 0x24
   10486:	add.w	r3, r4, #48	; 0x30
   1048a:	strb	r3, [r5, #0]
   1048c:	ldr	r3, [sp, #32]
   1048e:	cmp	r3, #1
   10490:	mov	r6, r0
   10492:	mov	r7, r1
   10494:	add.w	r5, r5, #1
   10498:	beq.n	1055e <_dtoa_r+0x346>
   1049a:	movs	r2, #0
   1049c:	ldr	r3, [pc, #92]	; (104fc <_dtoa_r+0x2e4>)
   1049e:	bl	ac90 <__aeabi_dmul>
   104a2:	movs	r2, #0
   104a4:	movs	r3, #0
   104a6:	mov	r6, r0
   104a8:	mov	r7, r1
   104aa:	bl	b160 <__aeabi_dcmpeq>
   104ae:	cmp	r0, #0
   104b0:	bne.n	105ae <_dtoa_r+0x396>
   104b2:	str.w	r9, [sp, #20]
   104b6:	ldr.w	sl, [sp, #32]
   104ba:	ldr.w	fp, [sp, #36]	; 0x24
   104be:	ldrd	r8, r9, [sp]
   104c2:	b.n	10516 <_dtoa_r+0x2fe>
   104c4:	nop.w
   104c8:	.word	0x636f4361
   104cc:	.word	0x3fd287a7
   104d0:	.word	0x8b60c8b3
   104d4:	.word	0x3fc68a28
   104d8:	.word	0x509f79fb
   104dc:	.word	0x3fd34413
   104e0:	.word	0x7ff00000
   104e4:	.word	0x00013841
   104e8:	.word	0x00013990
   104ec:	.word	0x3ff80000
   104f0:	.word	0x00013a98
   104f4:	.word	0x00013984
   104f8:	.word	0x00013840
   104fc:	.word	0x40240000
   10500:	bl	ac90 <__aeabi_dmul>
   10504:	movs	r2, #0
   10506:	movs	r3, #0
   10508:	mov	r6, r0
   1050a:	mov	r7, r1
   1050c:	bl	b160 <__aeabi_dcmpeq>
   10510:	cmp	r0, #0
   10512:	bne.w	10c72 <_dtoa_r+0xa5a>
   10516:	mov	r2, r8
   10518:	mov	r3, r9
   1051a:	mov	r0, r6
   1051c:	mov	r1, r7
   1051e:	bl	aee4 <__aeabi_ddiv>
   10522:	bl	b1f0 <__aeabi_d2iz>
   10526:	mov	r4, r0
   10528:	bl	abc4 <__aeabi_i2d>
   1052c:	mov	r2, r8
   1052e:	mov	r3, r9
   10530:	bl	ac90 <__aeabi_dmul>
   10534:	mov	r2, r0
   10536:	mov	r3, r1
   10538:	mov	r0, r6
   1053a:	mov	r1, r7
   1053c:	bl	a928 <__aeabi_dsub>
   10540:	add.w	lr, r4, #48	; 0x30
   10544:	strb.w	lr, [r5], #1
   10548:	rsb	lr, fp, r5
   1054c:	cmp	lr, sl
   1054e:	mov	r6, r0
   10550:	mov	r7, r1
   10552:	mov.w	r2, #0
   10556:	ldr	r3, [pc, #696]	; (10810 <_dtoa_r+0x5f8>)
   10558:	bne.n	10500 <_dtoa_r+0x2e8>
   1055a:	ldr.w	r9, [sp, #20]
   1055e:	mov	r2, r6
   10560:	mov	r3, r7
   10562:	mov	r0, r6
   10564:	mov	r1, r7
   10566:	bl	a92c <__adddf3>
   1056a:	mov	r6, r0
   1056c:	mov	r7, r1
   1056e:	mov	r2, r0
   10570:	mov	r3, r1
   10572:	ldrd	r0, r1, [sp]
   10576:	bl	b174 <__aeabi_dcmplt>
   1057a:	cbnz	r0, 1058e <_dtoa_r+0x376>
   1057c:	mov	r2, r6
   1057e:	mov	r3, r7
   10580:	ldrd	r0, r1, [sp]
   10584:	bl	b160 <__aeabi_dcmpeq>
   10588:	cbz	r0, 105ae <_dtoa_r+0x396>
   1058a:	lsls	r3, r4, #31
   1058c:	bpl.n	105ae <_dtoa_r+0x396>
   1058e:	ldrb.w	r4, [r5, #-1]
   10592:	ldr	r2, [sp, #36]	; 0x24
   10594:	subs	r3, r5, #1
   10596:	b.n	105a2 <_dtoa_r+0x38a>
   10598:	cmp	r2, r3
   1059a:	beq.w	10d96 <_dtoa_r+0xb7e>
   1059e:	ldrb.w	r4, [r3, #-1]!
   105a2:	cmp	r4, #57	; 0x39
   105a4:	add.w	r5, r3, #1
   105a8:	beq.n	10598 <_dtoa_r+0x380>
   105aa:	adds	r4, #1
   105ac:	strb	r4, [r3, #0]
   105ae:	ldr	r1, [sp, #40]	; 0x28
   105b0:	mov	r0, r9
   105b2:	bl	11b2c <_Bfree>
   105b6:	movs	r2, #0
   105b8:	ldr	r3, [sp, #16]
   105ba:	strb	r2, [r5, #0]
   105bc:	ldr	r2, [sp, #12]
   105be:	adds	r3, #1
   105c0:	str	r3, [r2, #0]
   105c2:	ldr	r3, [sp, #148]	; 0x94
   105c4:	cmp	r3, #0
   105c6:	beq.w	10d00 <_dtoa_r+0xae8>
   105ca:	ldr	r0, [sp, #36]	; 0x24
   105cc:	str	r5, [r3, #0]
   105ce:	add	sp, #108	; 0x6c
   105d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   105d4:	ldr	r2, [sp, #44]	; 0x2c
   105d6:	cmp	r2, #0
   105d8:	beq.w	107f8 <_dtoa_r+0x5e0>
   105dc:	ldr	r2, [sp, #0]
   105de:	cmp	r2, #1
   105e0:	ble.w	10a92 <_dtoa_r+0x87a>
   105e4:	ldr	r3, [sp, #32]
   105e6:	ldr	r2, [sp, #24]
   105e8:	subs	r7, r3, #1
   105ea:	cmp	r2, r7
   105ec:	blt.w	10d06 <_dtoa_r+0xaee>
   105f0:	subs	r7, r2, r7
   105f2:	ldr	r3, [sp, #32]
   105f4:	cmp	r3, #0
   105f6:	blt.w	10efa <_dtoa_r+0xce2>
   105fa:	ldr	r5, [sp, #28]
   105fc:	ldr	r3, [sp, #32]
   105fe:	ldr	r2, [sp, #28]
   10600:	movs	r1, #1
   10602:	add	r2, r3
   10604:	mov	r0, r9
   10606:	str	r2, [sp, #28]
   10608:	add	r8, r3
   1060a:	bl	11cf4 <__i2b>
   1060e:	mov	r6, r0
   10610:	cbz	r5, 1062c <_dtoa_r+0x414>
   10612:	cmp.w	r8, #0
   10616:	ble.n	1062c <_dtoa_r+0x414>
   10618:	cmp	r5, r8
   1061a:	ldr	r2, [sp, #28]
   1061c:	mov	r3, r5
   1061e:	it	ge
   10620:	movge	r3, r8
   10622:	subs	r2, r2, r3
   10624:	str	r2, [sp, #28]
   10626:	subs	r5, r5, r3
   10628:	rsb	r8, r3, r8
   1062c:	ldr	r3, [sp, #24]
   1062e:	cmp	r3, #0
   10630:	ble.w	10c1e <_dtoa_r+0xa06>
   10634:	ldr	r2, [sp, #44]	; 0x2c
   10636:	cmp	r2, #0
   10638:	beq.w	10a40 <_dtoa_r+0x828>
   1063c:	cmp	r7, #0
   1063e:	beq.w	10a40 <_dtoa_r+0x828>
   10642:	mov	r1, r6
   10644:	mov	r2, r7
   10646:	mov	r0, r9
   10648:	bl	11e38 <__pow5mult>
   1064c:	ldr	r2, [sp, #40]	; 0x28
   1064e:	mov	r1, r0
   10650:	mov	r6, r0
   10652:	mov	r0, r9
   10654:	bl	11d08 <__multiply>
   10658:	ldr	r1, [sp, #40]	; 0x28
   1065a:	mov	r4, r0
   1065c:	mov	r0, r9
   1065e:	bl	11b2c <_Bfree>
   10662:	ldr	r3, [sp, #24]
   10664:	subs	r3, r3, r7
   10666:	str	r3, [sp, #24]
   10668:	bne.w	10a3e <_dtoa_r+0x826>
   1066c:	movs	r1, #1
   1066e:	mov	r0, r9
   10670:	bl	11cf4 <__i2b>
   10674:	ldr	r3, [sp, #48]	; 0x30
   10676:	str	r0, [sp, #24]
   10678:	cmp	r3, #0
   1067a:	beq.w	10aa8 <_dtoa_r+0x890>
   1067e:	mov	r1, r0
   10680:	mov	r2, r3
   10682:	mov	r0, r9
   10684:	bl	11e38 <__pow5mult>
   10688:	ldr	r3, [sp, #0]
   1068a:	str	r0, [sp, #24]
   1068c:	cmp	r3, #1
   1068e:	ble.w	10c78 <_dtoa_r+0xa60>
   10692:	movs	r7, #0
   10694:	ldr	r2, [sp, #24]
   10696:	ldr	r3, [r2, #16]
   10698:	add.w	r3, r2, r3, lsl #2
   1069c:	ldr	r0, [r3, #16]
   1069e:	bl	11c58 <__hi0bits>
   106a2:	rsb	r0, r0, #32
   106a6:	add	r0, r8
   106a8:	ands.w	r0, r0, #31
   106ac:	beq.w	10aa4 <_dtoa_r+0x88c>
   106b0:	rsb	r3, r0, #32
   106b4:	cmp	r3, #4
   106b6:	ble.w	11034 <_dtoa_r+0xe1c>
   106ba:	rsb	r0, r0, #28
   106be:	ldr	r3, [sp, #28]
   106c0:	add	r3, r0
   106c2:	str	r3, [sp, #28]
   106c4:	add	r5, r0
   106c6:	add	r8, r0
   106c8:	ldr	r3, [sp, #28]
   106ca:	cmp	r3, #0
   106cc:	ble.n	106da <_dtoa_r+0x4c2>
   106ce:	mov	r1, r4
   106d0:	mov	r2, r3
   106d2:	mov	r0, r9
   106d4:	bl	11ed8 <__lshift>
   106d8:	mov	r4, r0
   106da:	cmp.w	r8, #0
   106de:	ble.n	106ec <_dtoa_r+0x4d4>
   106e0:	mov	r2, r8
   106e2:	ldr	r1, [sp, #24]
   106e4:	mov	r0, r9
   106e6:	bl	11ed8 <__lshift>
   106ea:	str	r0, [sp, #24]
   106ec:	ldr	r3, [sp, #52]	; 0x34
   106ee:	cmp	r3, #0
   106f0:	bne.w	10be8 <_dtoa_r+0x9d0>
   106f4:	ldr	r3, [sp, #32]
   106f6:	cmp	r3, #0
   106f8:	ble.w	10c22 <_dtoa_r+0xa0a>
   106fc:	ldr	r3, [sp, #44]	; 0x2c
   106fe:	cmp	r3, #0
   10700:	bne.w	10aec <_dtoa_r+0x8d4>
   10704:	ldr.w	fp, [sp, #36]	; 0x24
   10708:	ldr	r7, [sp, #32]
   1070a:	ldr.w	r8, [sp, #24]
   1070e:	mov	r5, fp
   10710:	b.n	10718 <_dtoa_r+0x500>
   10712:	bl	11b40 <__multadd>
   10716:	mov	r4, r0
   10718:	mov	r1, r8
   1071a:	mov	r0, r4
   1071c:	bl	100ec <quorem>
   10720:	add.w	sl, r0, #48	; 0x30
   10724:	strb.w	sl, [r5], #1
   10728:	rsb	r3, fp, r5
   1072c:	cmp	r3, r7
   1072e:	mov.w	r2, #10
   10732:	mov.w	r3, #0
   10736:	mov	r1, r4
   10738:	mov	r0, r9
   1073a:	blt.n	10712 <_dtoa_r+0x4fa>
   1073c:	ldr	r3, [sp, #36]	; 0x24
   1073e:	ldr	r2, [sp, #32]
   10740:	cmp	r2, #1
   10742:	ite	ge
   10744:	addge	r3, r3, r2
   10746:	addlt	r3, #1
   10748:	mov	r5, r3
   1074a:	mov.w	fp, #0
   1074e:	mov	r1, r4
   10750:	movs	r2, #1
   10752:	mov	r0, r9
   10754:	bl	11ed8 <__lshift>
   10758:	ldr	r1, [sp, #24]
   1075a:	str	r0, [sp, #40]	; 0x28
   1075c:	bl	11f88 <__mcmp>
   10760:	cmp	r0, #0
   10762:	ble.w	10d70 <_dtoa_r+0xb58>
   10766:	ldrb.w	r2, [r5, #-1]
   1076a:	ldr	r1, [sp, #36]	; 0x24
   1076c:	subs	r3, r5, #1
   1076e:	b.n	1077a <_dtoa_r+0x562>
   10770:	cmp	r3, r1
   10772:	beq.w	10c5e <_dtoa_r+0xa46>
   10776:	ldrb.w	r2, [r3, #-1]!
   1077a:	cmp	r2, #57	; 0x39
   1077c:	add.w	r5, r3, #1
   10780:	beq.n	10770 <_dtoa_r+0x558>
   10782:	adds	r2, #1
   10784:	strb	r2, [r3, #0]
   10786:	ldr	r1, [sp, #24]
   10788:	mov	r0, r9
   1078a:	bl	11b2c <_Bfree>
   1078e:	cmp	r6, #0
   10790:	beq.w	105ae <_dtoa_r+0x396>
   10794:	cmp.w	fp, #0
   10798:	beq.n	107a6 <_dtoa_r+0x58e>
   1079a:	cmp	fp, r6
   1079c:	beq.n	107a6 <_dtoa_r+0x58e>
   1079e:	mov	r1, fp
   107a0:	mov	r0, r9
   107a2:	bl	11b2c <_Bfree>
   107a6:	mov	r1, r6
   107a8:	mov	r0, r9
   107aa:	bl	11b2c <_Bfree>
   107ae:	b.n	105ae <_dtoa_r+0x396>
   107b0:	movs	r3, #1
   107b2:	str	r3, [sp, #52]	; 0x34
   107b4:	b.n	1038e <_dtoa_r+0x176>
   107b6:	ldr.w	r8, [sp, #16]
   107ba:	mov	r0, r8
   107bc:	bl	abc4 <__aeabi_i2d>
   107c0:	mov	r2, r0
   107c2:	mov	r3, r1
   107c4:	mov	r0, r6
   107c6:	mov	r1, r7
   107c8:	bl	b160 <__aeabi_dcmpeq>
   107cc:	cmp	r0, #0
   107ce:	bne.w	10366 <_dtoa_r+0x14e>
   107d2:	add.w	r3, r8, #4294967295
   107d6:	str	r3, [sp, #16]
   107d8:	b.n	10366 <_dtoa_r+0x14e>
   107da:	ldr	r2, [sp, #28]
   107dc:	ldr	r3, [sp, #16]
   107de:	subs	r2, r2, r3
   107e0:	negs	r3, r3
   107e2:	str	r3, [sp, #24]
   107e4:	movs	r3, #0
   107e6:	str	r2, [sp, #28]
   107e8:	str	r3, [sp, #48]	; 0x30
   107ea:	b.n	103ac <_dtoa_r+0x194>
   107ec:	rsb	r3, r8, #0
   107f0:	str	r3, [sp, #28]
   107f2:	mov.w	r8, #0
   107f6:	b.n	1039c <_dtoa_r+0x184>
   107f8:	ldr	r7, [sp, #24]
   107fa:	ldr	r5, [sp, #28]
   107fc:	ldr	r6, [sp, #44]	; 0x2c
   107fe:	b.n	10610 <_dtoa_r+0x3f8>
   10800:	rsb	r4, r3, #32
   10804:	lsl.w	r0, sl, r4
   10808:	b.n	10300 <_dtoa_r+0xe8>
   1080a:	str	r0, [sp, #52]	; 0x34
   1080c:	b.n	1038e <_dtoa_r+0x176>
   1080e:	nop
   10810:	.word	0x40240000
   10814:	movs	r3, #0
   10816:	str	r3, [sp, #44]	; 0x2c
   10818:	ldr	r3, [sp, #16]
   1081a:	ldr	r2, [sp, #20]
   1081c:	add	r3, r2
   1081e:	str	r3, [sp, #56]	; 0x38
   10820:	adds	r3, #1
   10822:	cmp	r3, #0
   10824:	str	r3, [sp, #32]
   10826:	ble.w	10d24 <_dtoa_r+0xb0c>
   1082a:	ldr	r4, [sp, #32]
   1082c:	mov	r5, r4
   1082e:	movs	r1, #0
   10830:	cmp	r5, #23
   10832:	str.w	r1, [r9, #68]	; 0x44
   10836:	bls.n	10850 <_dtoa_r+0x638>
   10838:	movs	r2, #1
   1083a:	movs	r3, #4
   1083c:	lsls	r3, r3, #1
   1083e:	add.w	r0, r3, #20
   10842:	cmp	r0, r5
   10844:	mov	r1, r2
   10846:	add.w	r2, r2, #1
   1084a:	bls.n	1083c <_dtoa_r+0x624>
   1084c:	str.w	r1, [r9, #68]	; 0x44
   10850:	mov	r0, r9
   10852:	bl	11ae0 <_Balloc>
   10856:	cmp	r4, #14
   10858:	str	r0, [sp, #36]	; 0x24
   1085a:	str.w	r0, [r9, #64]	; 0x40
   1085e:	bhi.w	1042c <_dtoa_r+0x214>
   10862:	cmp	r6, #0
   10864:	beq.w	1042c <_dtoa_r+0x214>
   10868:	ldr	r1, [sp, #16]
   1086a:	cmp	r1, #0
   1086c:	strd	sl, fp, [sp, #64]	; 0x40
   10870:	ble.w	10da8 <_dtoa_r+0xb90>
   10874:	ldr	r3, [pc, #576]	; (10ab8 <_dtoa_r+0x8a0>)
   10876:	and.w	r2, r1, #15
   1087a:	asrs	r6, r1, #4
   1087c:	add.w	r3, r3, r2, lsl #3
   10880:	lsls	r0, r6, #27
   10882:	ldrd	r4, r5, [r3]
   10886:	bpl.w	10d16 <_dtoa_r+0xafe>
   1088a:	ldr	r3, [pc, #560]	; (10abc <_dtoa_r+0x8a4>)
   1088c:	mov	r0, sl
   1088e:	mov	r1, fp
   10890:	ldrd	r2, r3, [r3, #32]
   10894:	bl	aee4 <__aeabi_ddiv>
   10898:	strd	r0, r1, [sp, #72]	; 0x48
   1089c:	and.w	r6, r6, #15
   108a0:	mov.w	sl, #3
   108a4:	cbz	r6, 108c8 <_dtoa_r+0x6b0>
   108a6:	ldr	r7, [pc, #532]	; (10abc <_dtoa_r+0x8a4>)
   108a8:	lsls	r1, r6, #31
   108aa:	bpl.n	108c0 <_dtoa_r+0x6a8>
   108ac:	mov	r0, r4
   108ae:	mov	r1, r5
   108b0:	ldrd	r2, r3, [r7]
   108b4:	bl	ac90 <__aeabi_dmul>
   108b8:	add.w	sl, sl, #1
   108bc:	mov	r4, r0
   108be:	mov	r5, r1
   108c0:	asrs	r6, r6, #1
   108c2:	add.w	r7, r7, #8
   108c6:	bne.n	108a8 <_dtoa_r+0x690>
   108c8:	mov	r2, r4
   108ca:	mov	r3, r5
   108cc:	ldrd	r0, r1, [sp, #72]	; 0x48
   108d0:	bl	aee4 <__aeabi_ddiv>
   108d4:	mov	r6, r0
   108d6:	mov	r7, r1
   108d8:	ldr	r3, [sp, #52]	; 0x34
   108da:	cbz	r3, 108ee <_dtoa_r+0x6d6>
   108dc:	movs	r2, #0
   108de:	ldr	r3, [pc, #480]	; (10ac0 <_dtoa_r+0x8a8>)
   108e0:	mov	r0, r6
   108e2:	mov	r1, r7
   108e4:	bl	b174 <__aeabi_dcmplt>
   108e8:	cmp	r0, #0
   108ea:	bne.w	10f22 <_dtoa_r+0xd0a>
   108ee:	mov	r0, sl
   108f0:	bl	abc4 <__aeabi_i2d>
   108f4:	mov	r2, r6
   108f6:	mov	r3, r7
   108f8:	bl	ac90 <__aeabi_dmul>
   108fc:	ldr	r3, [pc, #452]	; (10ac4 <_dtoa_r+0x8ac>)
   108fe:	movs	r2, #0
   10900:	bl	a92c <__adddf3>
   10904:	ldr	r3, [sp, #32]
   10906:	mov	r4, r0
   10908:	sub.w	r5, r1, #54525952	; 0x3400000
   1090c:	cmp	r3, #0
   1090e:	beq.w	10cc8 <_dtoa_r+0xab0>
   10912:	ldr	r3, [sp, #16]
   10914:	str	r3, [sp, #88]	; 0x58
   10916:	ldr	r3, [sp, #32]
   10918:	str	r3, [sp, #72]	; 0x48
   1091a:	ldr	r3, [sp, #44]	; 0x2c
   1091c:	cmp	r3, #0
   1091e:	beq.w	10e4a <_dtoa_r+0xc32>
   10922:	ldr	r2, [sp, #72]	; 0x48
   10924:	ldr	r3, [pc, #400]	; (10ab8 <_dtoa_r+0x8a0>)
   10926:	ldr	r1, [pc, #416]	; (10ac8 <_dtoa_r+0x8b0>)
   10928:	add.w	r3, r3, r2, lsl #3
   1092c:	ldrd	r2, r3, [r3, #-8]
   10930:	movs	r0, #0
   10932:	bl	aee4 <__aeabi_ddiv>
   10936:	mov	r2, r4
   10938:	mov	r3, r5
   1093a:	bl	a928 <__aeabi_dsub>
   1093e:	mov	sl, r0
   10940:	mov	fp, r1
   10942:	mov	r0, r6
   10944:	mov	r1, r7
   10946:	bl	b1f0 <__aeabi_d2iz>
   1094a:	mov	r4, r0
   1094c:	bl	abc4 <__aeabi_i2d>
   10950:	mov	r2, r0
   10952:	mov	r3, r1
   10954:	mov	r0, r6
   10956:	mov	r1, r7
   10958:	bl	a928 <__aeabi_dsub>
   1095c:	adds	r4, #48	; 0x30
   1095e:	ldr	r5, [sp, #36]	; 0x24
   10960:	uxtb	r4, r4
   10962:	mov	r6, r0
   10964:	mov	r7, r1
   10966:	strb	r4, [r5, #0]
   10968:	mov	r2, r0
   1096a:	mov	r3, r1
   1096c:	mov	r0, sl
   1096e:	mov	r1, fp
   10970:	adds	r5, #1
   10972:	bl	b1b0 <__aeabi_dcmpgt>
   10976:	cmp	r0, #0
   10978:	bne.n	10a1c <_dtoa_r+0x804>
   1097a:	mov	r2, r6
   1097c:	mov	r3, r7
   1097e:	movs	r0, #0
   10980:	ldr	r1, [pc, #316]	; (10ac0 <_dtoa_r+0x8a8>)
   10982:	bl	a928 <__aeabi_dsub>
   10986:	mov	r2, r0
   10988:	mov	r3, r1
   1098a:	mov	r0, sl
   1098c:	mov	r1, fp
   1098e:	bl	b1b0 <__aeabi_dcmpgt>
   10992:	cmp	r0, #0
   10994:	bne.w	10fa8 <_dtoa_r+0xd90>
   10998:	ldr	r2, [sp, #72]	; 0x48
   1099a:	cmp	r2, #1
   1099c:	ble.w	10d8e <_dtoa_r+0xb76>
   109a0:	ldr	r3, [sp, #72]	; 0x48
   109a2:	ldr	r2, [sp, #36]	; 0x24
   109a4:	str.w	r8, [sp, #72]	; 0x48
   109a8:	add	r3, r2
   109aa:	mov	r8, r3
   109ac:	b.n	109ca <_dtoa_r+0x7b2>
   109ae:	movs	r0, #0
   109b0:	ldr	r1, [pc, #268]	; (10ac0 <_dtoa_r+0x8a8>)
   109b2:	bl	a928 <__aeabi_dsub>
   109b6:	mov	r2, sl
   109b8:	mov	r3, fp
   109ba:	bl	b174 <__aeabi_dcmplt>
   109be:	cmp	r0, #0
   109c0:	bne.w	10fa8 <_dtoa_r+0xd90>
   109c4:	cmp	r5, r8
   109c6:	beq.w	10d8a <_dtoa_r+0xb72>
   109ca:	mov	r0, sl
   109cc:	mov	r1, fp
   109ce:	movs	r2, #0
   109d0:	ldr	r3, [pc, #248]	; (10acc <_dtoa_r+0x8b4>)
   109d2:	bl	ac90 <__aeabi_dmul>
   109d6:	movs	r2, #0
   109d8:	ldr	r3, [pc, #240]	; (10acc <_dtoa_r+0x8b4>)
   109da:	mov	sl, r0
   109dc:	mov	fp, r1
   109de:	mov	r0, r6
   109e0:	mov	r1, r7
   109e2:	bl	ac90 <__aeabi_dmul>
   109e6:	mov	r7, r1
   109e8:	mov	r6, r0
   109ea:	bl	b1f0 <__aeabi_d2iz>
   109ee:	mov	r4, r0
   109f0:	bl	abc4 <__aeabi_i2d>
   109f4:	mov	r2, r0
   109f6:	mov	r3, r1
   109f8:	mov	r0, r6
   109fa:	mov	r1, r7
   109fc:	bl	a928 <__aeabi_dsub>
   10a00:	adds	r4, #48	; 0x30
   10a02:	uxtb	r4, r4
   10a04:	mov	r2, sl
   10a06:	mov	r3, fp
   10a08:	strb.w	r4, [r5], #1
   10a0c:	mov	r6, r0
   10a0e:	mov	r7, r1
   10a10:	bl	b174 <__aeabi_dcmplt>
   10a14:	mov	r2, r6
   10a16:	mov	r3, r7
   10a18:	cmp	r0, #0
   10a1a:	beq.n	109ae <_dtoa_r+0x796>
   10a1c:	ldr	r3, [sp, #88]	; 0x58
   10a1e:	str	r3, [sp, #16]
   10a20:	b.n	105ae <_dtoa_r+0x396>
   10a22:	movs	r3, #0
   10a24:	str	r3, [sp, #44]	; 0x2c
   10a26:	ldr	r3, [sp, #20]
   10a28:	cmp	r3, #0
   10a2a:	ble.w	10d2e <_dtoa_r+0xb16>
   10a2e:	mov	r5, r3
   10a30:	mov	r4, r3
   10a32:	str	r3, [sp, #56]	; 0x38
   10a34:	str	r3, [sp, #32]
   10a36:	b.n	1082e <_dtoa_r+0x616>
   10a38:	movs	r3, #1
   10a3a:	str	r3, [sp, #44]	; 0x2c
   10a3c:	b.n	10a26 <_dtoa_r+0x80e>
   10a3e:	str	r4, [sp, #40]	; 0x28
   10a40:	ldr	r2, [sp, #24]
   10a42:	ldr	r1, [sp, #40]	; 0x28
   10a44:	mov	r0, r9
   10a46:	bl	11e38 <__pow5mult>
   10a4a:	mov	r4, r0
   10a4c:	b.n	1066c <_dtoa_r+0x454>
   10a4e:	ldr	r3, [sp, #32]
   10a50:	cmp	r3, #0
   10a52:	bgt.w	10452 <_dtoa_r+0x23a>
   10a56:	bne.w	10cf8 <_dtoa_r+0xae0>
   10a5a:	movs	r2, #0
   10a5c:	ldr	r3, [pc, #112]	; (10ad0 <_dtoa_r+0x8b8>)
   10a5e:	ldrd	r0, r1, [sp]
   10a62:	bl	ac90 <__aeabi_dmul>
   10a66:	mov	r3, fp
   10a68:	mov	r2, sl
   10a6a:	bl	b19c <__aeabi_dcmpge>
   10a6e:	ldr	r3, [sp, #32]
   10a70:	str	r3, [sp, #24]
   10a72:	mov	r6, r3
   10a74:	cmp	r0, #0
   10a76:	beq.w	10c4e <_dtoa_r+0xa36>
   10a7a:	ldr	r3, [sp, #20]
   10a7c:	ldr	r5, [sp, #36]	; 0x24
   10a7e:	mvns	r3, r3
   10a80:	str	r3, [sp, #16]
   10a82:	ldr	r1, [sp, #24]
   10a84:	mov	r0, r9
   10a86:	bl	11b2c <_Bfree>
   10a8a:	cmp	r6, #0
   10a8c:	beq.w	105ae <_dtoa_r+0x396>
   10a90:	b.n	107a6 <_dtoa_r+0x58e>
   10a92:	ldr	r2, [sp, #60]	; 0x3c
   10a94:	cmp	r2, #0
   10a96:	beq.w	10f0a <_dtoa_r+0xcf2>
   10a9a:	addw	r3, r3, #1075	; 0x433
   10a9e:	ldr	r7, [sp, #24]
   10aa0:	ldr	r5, [sp, #28]
   10aa2:	b.n	105fe <_dtoa_r+0x3e6>
   10aa4:	movs	r0, #28
   10aa6:	b.n	106be <_dtoa_r+0x4a6>
   10aa8:	ldr	r3, [sp, #0]
   10aaa:	cmp	r3, #1
   10aac:	ble.w	10fb0 <_dtoa_r+0xd98>
   10ab0:	ldr	r7, [sp, #48]	; 0x30
   10ab2:	movs	r0, #1
   10ab4:	b.n	106a6 <_dtoa_r+0x48e>
   10ab6:	nop
   10ab8:	.word	0x00013a98
   10abc:	.word	0x00013b60
   10ac0:	.word	0x3ff00000
   10ac4:	.word	0x401c0000
   10ac8:	.word	0x3fe00000
   10acc:	.word	0x40240000
   10ad0:	.word	0x40140000
   10ad4:	mov	r1, r6
   10ad6:	movs	r3, #0
   10ad8:	movs	r2, #10
   10ada:	mov	r0, r9
   10adc:	bl	11b40 <__multadd>
   10ae0:	ldr	r3, [sp, #56]	; 0x38
   10ae2:	cmp	r3, #0
   10ae4:	mov	r6, r0
   10ae6:	ble.w	11004 <_dtoa_r+0xdec>
   10aea:	str	r3, [sp, #32]
   10aec:	cmp	r5, #0
   10aee:	ble.n	10afc <_dtoa_r+0x8e4>
   10af0:	mov	r1, r6
   10af2:	mov	r2, r5
   10af4:	mov	r0, r9
   10af6:	bl	11ed8 <__lshift>
   10afa:	mov	r6, r0
   10afc:	cmp	r7, #0
   10afe:	bne.w	10dfa <_dtoa_r+0xbe2>
   10b02:	mov	r8, r6
   10b04:	ldr	r3, [sp, #32]
   10b06:	ldr	r2, [sp, #36]	; 0x24
   10b08:	subs	r3, #1
   10b0a:	adds	r3, r2, r3
   10b0c:	str	r3, [sp, #32]
   10b0e:	and.w	r3, sl, #1
   10b12:	str	r3, [sp, #40]	; 0x28
   10b14:	mov	r7, r2
   10b16:	ldr.w	fp, [sp, #24]
   10b1a:	mov	r0, r4
   10b1c:	mov	r1, fp
   10b1e:	bl	100ec <quorem>
   10b22:	mov	r1, r6
   10b24:	mov	r5, r0
   10b26:	mov	r0, r4
   10b28:	bl	11f88 <__mcmp>
   10b2c:	mov	r2, r8
   10b2e:	mov	r1, fp
   10b30:	mov	sl, r0
   10b32:	mov	r0, r9
   10b34:	bl	11fcc <__mdiff>
   10b38:	ldr	r2, [r0, #12]
   10b3a:	mov	fp, r0
   10b3c:	add.w	r3, r5, #48	; 0x30
   10b40:	cmp	r2, #0
   10b42:	bne.n	10bd8 <_dtoa_r+0x9c0>
   10b44:	mov	r1, r0
   10b46:	mov	r0, r4
   10b48:	str	r3, [sp, #28]
   10b4a:	bl	11f88 <__mcmp>
   10b4e:	mov	r1, fp
   10b50:	str	r0, [sp, #20]
   10b52:	mov	r0, r9
   10b54:	bl	11b2c <_Bfree>
   10b58:	ldr	r2, [sp, #20]
   10b5a:	ldr	r3, [sp, #28]
   10b5c:	cbnz	r2, 10b6a <_dtoa_r+0x952>
   10b5e:	ldr	r1, [sp, #0]
   10b60:	cbnz	r1, 10b6a <_dtoa_r+0x952>
   10b62:	ldr	r1, [sp, #40]	; 0x28
   10b64:	cmp	r1, #0
   10b66:	beq.w	10fd4 <_dtoa_r+0xdbc>
   10b6a:	cmp.w	sl, #0
   10b6e:	blt.w	10d38 <_dtoa_r+0xb20>
   10b72:	bne.n	10b80 <_dtoa_r+0x968>
   10b74:	ldr	r1, [sp, #0]
   10b76:	cbnz	r1, 10b80 <_dtoa_r+0x968>
   10b78:	ldr	r1, [sp, #40]	; 0x28
   10b7a:	cmp	r1, #0
   10b7c:	beq.w	10d38 <_dtoa_r+0xb20>
   10b80:	cmp	r2, #0
   10b82:	bgt.w	10e22 <_dtoa_r+0xc0a>
   10b86:	ldr	r2, [sp, #32]
   10b88:	strb	r3, [r7, #0]
   10b8a:	add.w	sl, r7, #1
   10b8e:	cmp	r7, r2
   10b90:	mov	r5, sl
   10b92:	beq.w	10e3a <_dtoa_r+0xc22>
   10b96:	mov	r1, r4
   10b98:	movs	r3, #0
   10b9a:	movs	r2, #10
   10b9c:	mov	r0, r9
   10b9e:	bl	11b40 <__multadd>
   10ba2:	cmp	r6, r8
   10ba4:	mov	r4, r0
   10ba6:	mov	r1, r6
   10ba8:	mov.w	r3, #0
   10bac:	mov.w	r2, #10
   10bb0:	mov	r0, r9
   10bb2:	beq.n	10bcc <_dtoa_r+0x9b4>
   10bb4:	bl	11b40 <__multadd>
   10bb8:	mov	r1, r8
   10bba:	mov	r6, r0
   10bbc:	movs	r3, #0
   10bbe:	movs	r2, #10
   10bc0:	mov	r0, r9
   10bc2:	bl	11b40 <__multadd>
   10bc6:	mov	r7, sl
   10bc8:	mov	r8, r0
   10bca:	b.n	10b16 <_dtoa_r+0x8fe>
   10bcc:	bl	11b40 <__multadd>
   10bd0:	mov	r7, sl
   10bd2:	mov	r6, r0
   10bd4:	mov	r8, r0
   10bd6:	b.n	10b16 <_dtoa_r+0x8fe>
   10bd8:	mov	r1, r0
   10bda:	mov	r0, r9
   10bdc:	str	r3, [sp, #20]
   10bde:	bl	11b2c <_Bfree>
   10be2:	movs	r2, #1
   10be4:	ldr	r3, [sp, #20]
   10be6:	b.n	10b6a <_dtoa_r+0x952>
   10be8:	ldr	r1, [sp, #24]
   10bea:	mov	r0, r4
   10bec:	bl	11f88 <__mcmp>
   10bf0:	cmp	r0, #0
   10bf2:	bge.w	106f4 <_dtoa_r+0x4dc>
   10bf6:	mov	r1, r4
   10bf8:	ldr	r4, [sp, #16]
   10bfa:	movs	r3, #0
   10bfc:	subs	r4, #1
   10bfe:	movs	r2, #10
   10c00:	mov	r0, r9
   10c02:	str	r4, [sp, #16]
   10c04:	bl	11b40 <__multadd>
   10c08:	ldr	r3, [sp, #44]	; 0x2c
   10c0a:	mov	r4, r0
   10c0c:	cmp	r3, #0
   10c0e:	bne.w	10ad4 <_dtoa_r+0x8bc>
   10c12:	ldr	r3, [sp, #56]	; 0x38
   10c14:	cmp	r3, #0
   10c16:	ble.w	10ff4 <_dtoa_r+0xddc>
   10c1a:	str	r3, [sp, #32]
   10c1c:	b.n	10704 <_dtoa_r+0x4ec>
   10c1e:	ldr	r4, [sp, #40]	; 0x28
   10c20:	b.n	1066c <_dtoa_r+0x454>
   10c22:	ldr	r3, [sp, #0]
   10c24:	cmp	r3, #2
   10c26:	ble.w	106fc <_dtoa_r+0x4e4>
   10c2a:	ldr	r3, [sp, #32]
   10c2c:	cmp	r3, #0
   10c2e:	bne.w	10f6c <_dtoa_r+0xd54>
   10c32:	ldr	r1, [sp, #24]
   10c34:	movs	r2, #5
   10c36:	mov	r0, r9
   10c38:	bl	11b40 <__multadd>
   10c3c:	mov	r1, r0
   10c3e:	str	r0, [sp, #24]
   10c40:	mov	r0, r4
   10c42:	bl	11f88 <__mcmp>
   10c46:	cmp	r0, #0
   10c48:	str	r4, [sp, #40]	; 0x28
   10c4a:	ble.w	10a7a <_dtoa_r+0x862>
   10c4e:	ldr	r2, [sp, #16]
   10c50:	ldr	r1, [sp, #36]	; 0x24
   10c52:	movs	r3, #49	; 0x31
   10c54:	adds	r2, #1
   10c56:	str	r2, [sp, #16]
   10c58:	strb	r3, [r1, #0]
   10c5a:	adds	r5, r1, #1
   10c5c:	b.n	10a82 <_dtoa_r+0x86a>
   10c5e:	ldr	r2, [sp, #16]
   10c60:	adds	r2, #1
   10c62:	str	r2, [sp, #16]
   10c64:	ldr	r2, [sp, #36]	; 0x24
   10c66:	movs	r3, #49	; 0x31
   10c68:	strb	r3, [r2, #0]
   10c6a:	b.n	10786 <_dtoa_r+0x56e>
   10c6c:	movs	r3, #1
   10c6e:	str	r3, [sp, #44]	; 0x2c
   10c70:	b.n	10818 <_dtoa_r+0x600>
   10c72:	ldr.w	r9, [sp, #20]
   10c76:	b.n	105ae <_dtoa_r+0x396>
   10c78:	cmp.w	sl, #0
   10c7c:	bne.w	10692 <_dtoa_r+0x47a>
   10c80:	ubfx	r3, fp, #0, #20
   10c84:	cmp	r3, #0
   10c86:	bne.w	10f06 <_dtoa_r+0xcee>
   10c8a:	bic.w	r7, fp, #2147483648	; 0x80000000
   10c8e:	lsrs	r7, r7, #20
   10c90:	lsls	r7, r7, #20
   10c92:	cbz	r7, 10ca0 <_dtoa_r+0xa88>
   10c94:	ldr	r3, [sp, #28]
   10c96:	adds	r3, #1
   10c98:	str	r3, [sp, #28]
   10c9a:	add.w	r8, r8, #1
   10c9e:	movs	r7, #1
   10ca0:	ldr	r3, [sp, #48]	; 0x30
   10ca2:	movs	r0, #1
   10ca4:	cmp	r3, #0
   10ca6:	beq.w	106a6 <_dtoa_r+0x48e>
   10caa:	b.n	10694 <_dtoa_r+0x47c>
   10cac:	mov	r0, sl
   10cae:	bl	abc4 <__aeabi_i2d>
   10cb2:	mov	r2, r6
   10cb4:	mov	r3, r7
   10cb6:	bl	ac90 <__aeabi_dmul>
   10cba:	movs	r2, #0
   10cbc:	ldr	r3, [pc, #764]	; (10fbc <_dtoa_r+0xda4>)
   10cbe:	bl	a92c <__adddf3>
   10cc2:	mov	r4, r0
   10cc4:	sub.w	r5, r1, #54525952	; 0x3400000
   10cc8:	mov	r0, r6
   10cca:	mov	r1, r7
   10ccc:	movs	r2, #0
   10cce:	ldr	r3, [pc, #752]	; (10fc0 <_dtoa_r+0xda8>)
   10cd0:	bl	a928 <__aeabi_dsub>
   10cd4:	mov	r2, r4
   10cd6:	mov	r3, r5
   10cd8:	mov	r6, r0
   10cda:	mov	r7, r1
   10cdc:	bl	b1b0 <__aeabi_dcmpgt>
   10ce0:	cmp	r0, #0
   10ce2:	bne.w	10e42 <_dtoa_r+0xc2a>
   10ce6:	mov	r2, r4
   10ce8:	add.w	r3, r5, #2147483648	; 0x80000000
   10cec:	mov	r0, r6
   10cee:	mov	r1, r7
   10cf0:	bl	b174 <__aeabi_dcmplt>
   10cf4:	cmp	r0, #0
   10cf6:	beq.n	10d8e <_dtoa_r+0xb76>
   10cf8:	movs	r3, #0
   10cfa:	str	r3, [sp, #24]
   10cfc:	mov	r6, r3
   10cfe:	b.n	10a7a <_dtoa_r+0x862>
   10d00:	ldr	r0, [sp, #36]	; 0x24
   10d02:	b.w	1028a <_dtoa_r+0x72>
   10d06:	ldr	r3, [sp, #24]
   10d08:	ldr	r2, [sp, #48]	; 0x30
   10d0a:	str	r7, [sp, #24]
   10d0c:	subs	r3, r7, r3
   10d0e:	add	r2, r3
   10d10:	str	r2, [sp, #48]	; 0x30
   10d12:	movs	r7, #0
   10d14:	b.n	105f2 <_dtoa_r+0x3da>
   10d16:	vldr	d7, [sp, #64]	; 0x40
   10d1a:	mov.w	sl, #2
   10d1e:	vstr	d7, [sp, #72]	; 0x48
   10d22:	b.n	108a4 <_dtoa_r+0x68c>
   10d24:	mov	r4, r3
   10d26:	movs	r1, #0
   10d28:	str.w	r1, [r9, #68]	; 0x44
   10d2c:	b.n	10850 <_dtoa_r+0x638>
   10d2e:	movs	r4, #1
   10d30:	str	r4, [sp, #56]	; 0x38
   10d32:	str	r4, [sp, #32]
   10d34:	str	r4, [sp, #20]
   10d36:	b.n	10d26 <_dtoa_r+0xb0e>
   10d38:	cmp	r2, #0
   10d3a:	mov	sl, r3
   10d3c:	ble.n	10d62 <_dtoa_r+0xb4a>
   10d3e:	mov	r1, r4
   10d40:	movs	r2, #1
   10d42:	mov	r0, r9
   10d44:	bl	11ed8 <__lshift>
   10d48:	ldr	r1, [sp, #24]
   10d4a:	mov	r4, r0
   10d4c:	bl	11f88 <__mcmp>
   10d50:	cmp	r0, #0
   10d52:	ble.w	10fe6 <_dtoa_r+0xdce>
   10d56:	cmp.w	sl, #57	; 0x39
   10d5a:	beq.w	10f70 <_dtoa_r+0xd58>
   10d5e:	add.w	sl, r5, #49	; 0x31
   10d62:	mov	fp, r6
   10d64:	strb.w	sl, [r7]
   10d68:	adds	r5, r7, #1
   10d6a:	mov	r6, r8
   10d6c:	str	r4, [sp, #40]	; 0x28
   10d6e:	b.n	10786 <_dtoa_r+0x56e>
   10d70:	bne.n	10d7c <_dtoa_r+0xb64>
   10d72:	tst.w	sl, #1
   10d76:	beq.n	10d7c <_dtoa_r+0xb64>
   10d78:	b.n	10766 <_dtoa_r+0x54e>
   10d7a:	mov	r5, r2
   10d7c:	ldrb.w	r3, [r5, #-1]
   10d80:	cmp	r3, #48	; 0x30
   10d82:	add.w	r2, r5, #4294967295
   10d86:	beq.n	10d7a <_dtoa_r+0xb62>
   10d88:	b.n	10786 <_dtoa_r+0x56e>
   10d8a:	ldr.w	r8, [sp, #72]	; 0x48
   10d8e:	ldrd	sl, fp, [sp, #64]	; 0x40
   10d92:	b.w	1042c <_dtoa_r+0x214>
   10d96:	ldr	r1, [sp, #36]	; 0x24
   10d98:	movs	r2, #48	; 0x30
   10d9a:	strb	r2, [r1, #0]
   10d9c:	ldr	r2, [sp, #16]
   10d9e:	ldrb.w	r4, [r5, #-1]
   10da2:	adds	r2, #1
   10da4:	str	r2, [sp, #16]
   10da6:	b.n	105aa <_dtoa_r+0x392>
   10da8:	ldr	r3, [sp, #16]
   10daa:	negs	r4, r3
   10dac:	cmp	r4, #0
   10dae:	beq.w	10f18 <_dtoa_r+0xd00>
   10db2:	ldr	r3, [pc, #528]	; (10fc4 <_dtoa_r+0xdac>)
   10db4:	and.w	r2, r4, #15
   10db8:	add.w	r3, r3, r2, lsl #3
   10dbc:	ldrd	r2, r3, [r3]
   10dc0:	ldrd	r0, r1, [sp, #64]	; 0x40
   10dc4:	bl	ac90 <__aeabi_dmul>
   10dc8:	asrs	r4, r4, #4
   10dca:	mov	r6, r0
   10dcc:	mov	r7, r1
   10dce:	beq.w	10ffe <_dtoa_r+0xde6>
   10dd2:	ldr	r5, [pc, #500]	; (10fc8 <_dtoa_r+0xdb0>)
   10dd4:	mov.w	sl, #2
   10dd8:	lsls	r2, r4, #31
   10dda:	bpl.n	10df0 <_dtoa_r+0xbd8>
   10ddc:	mov	r0, r6
   10dde:	mov	r1, r7
   10de0:	ldrd	r2, r3, [r5]
   10de4:	bl	ac90 <__aeabi_dmul>
   10de8:	add.w	sl, sl, #1
   10dec:	mov	r6, r0
   10dee:	mov	r7, r1
   10df0:	asrs	r4, r4, #1
   10df2:	add.w	r5, r5, #8
   10df6:	bne.n	10dd8 <_dtoa_r+0xbc0>
   10df8:	b.n	108d8 <_dtoa_r+0x6c0>
   10dfa:	ldr	r1, [r6, #4]
   10dfc:	mov	r0, r9
   10dfe:	bl	11ae0 <_Balloc>
   10e02:	ldr	r3, [r6, #16]
   10e04:	adds	r2, r3, #2
   10e06:	mov	r5, r0
   10e08:	lsls	r2, r2, #2
   10e0a:	add.w	r1, r6, #12
   10e0e:	adds	r0, #12
   10e10:	bl	81f4 <memcpy>
   10e14:	mov	r1, r5
   10e16:	movs	r2, #1
   10e18:	mov	r0, r9
   10e1a:	bl	11ed8 <__lshift>
   10e1e:	mov	r8, r0
   10e20:	b.n	10b04 <_dtoa_r+0x8ec>
   10e22:	cmp	r3, #57	; 0x39
   10e24:	beq.w	10f70 <_dtoa_r+0xd58>
   10e28:	add.w	sl, r3, #1
   10e2c:	mov	fp, r6
   10e2e:	strb.w	sl, [r7]
   10e32:	adds	r5, r7, #1
   10e34:	mov	r6, r8
   10e36:	str	r4, [sp, #40]	; 0x28
   10e38:	b.n	10786 <_dtoa_r+0x56e>
   10e3a:	mov	fp, r6
   10e3c:	mov	sl, r3
   10e3e:	mov	r6, r8
   10e40:	b.n	1074e <_dtoa_r+0x536>
   10e42:	movs	r3, #0
   10e44:	str	r3, [sp, #24]
   10e46:	mov	r6, r3
   10e48:	b.n	10c4e <_dtoa_r+0xa36>
   10e4a:	ldr	r3, [sp, #72]	; 0x48
   10e4c:	ldr	r1, [pc, #372]	; (10fc4 <_dtoa_r+0xdac>)
   10e4e:	subs	r2, r3, #1
   10e50:	add.w	r1, r1, r2, lsl #3
   10e54:	mov	r3, r5
   10e56:	str	r2, [sp, #92]	; 0x5c
   10e58:	ldrd	r0, r1, [r1]
   10e5c:	mov	r2, r4
   10e5e:	bl	ac90 <__aeabi_dmul>
   10e62:	strd	r0, r1, [sp, #80]	; 0x50
   10e66:	mov	r1, r7
   10e68:	mov	r0, r6
   10e6a:	bl	b1f0 <__aeabi_d2iz>
   10e6e:	mov	r4, r0
   10e70:	bl	abc4 <__aeabi_i2d>
   10e74:	mov	r3, r1
   10e76:	mov	r2, r0
   10e78:	mov	r1, r7
   10e7a:	mov	r0, r6
   10e7c:	bl	a928 <__aeabi_dsub>
   10e80:	ldr	r3, [sp, #72]	; 0x48
   10e82:	mov	r7, r1
   10e84:	ldr	r1, [sp, #36]	; 0x24
   10e86:	adds	r4, #48	; 0x30
   10e88:	cmp	r3, #1
   10e8a:	mov	r6, r0
   10e8c:	strb	r4, [r1, #0]
   10e8e:	add.w	r5, r1, #1
   10e92:	beq.n	10ed6 <_dtoa_r+0xcbe>
   10e94:	ldr	r3, [sp, #72]	; 0x48
   10e96:	ldr	r2, [sp, #36]	; 0x24
   10e98:	add	r3, r2
   10e9a:	mov	sl, r3
   10e9c:	mov	fp, r5
   10e9e:	movs	r2, #0
   10ea0:	ldr	r3, [pc, #296]	; (10fcc <_dtoa_r+0xdb4>)
   10ea2:	mov	r0, r6
   10ea4:	mov	r1, r7
   10ea6:	bl	ac90 <__aeabi_dmul>
   10eaa:	mov	r7, r1
   10eac:	mov	r6, r0
   10eae:	bl	b1f0 <__aeabi_d2iz>
   10eb2:	mov	r4, r0
   10eb4:	bl	abc4 <__aeabi_i2d>
   10eb8:	adds	r4, #48	; 0x30
   10eba:	mov	r2, r0
   10ebc:	mov	r3, r1
   10ebe:	mov	r0, r6
   10ec0:	mov	r1, r7
   10ec2:	bl	a928 <__aeabi_dsub>
   10ec6:	strb.w	r4, [fp], #1
   10eca:	cmp	sl, fp
   10ecc:	mov	r6, r0
   10ece:	mov	r7, r1
   10ed0:	bne.n	10e9e <_dtoa_r+0xc86>
   10ed2:	ldr	r3, [sp, #92]	; 0x5c
   10ed4:	add	r5, r3
   10ed6:	movs	r2, #0
   10ed8:	ldr	r3, [pc, #244]	; (10fd0 <_dtoa_r+0xdb8>)
   10eda:	ldrd	r0, r1, [sp, #80]	; 0x50
   10ede:	bl	a92c <__adddf3>
   10ee2:	mov	r2, r6
   10ee4:	mov	r3, r7
   10ee6:	bl	b174 <__aeabi_dcmplt>
   10eea:	cmp	r0, #0
   10eec:	beq.n	10f80 <_dtoa_r+0xd68>
   10eee:	ldr	r3, [sp, #88]	; 0x58
   10ef0:	str	r3, [sp, #16]
   10ef2:	ldrb.w	r4, [r5, #-1]
   10ef6:	b.w	10592 <_dtoa_r+0x37a>
   10efa:	ldr	r3, [sp, #28]
   10efc:	ldr	r2, [sp, #32]
   10efe:	subs	r5, r3, r2
   10f00:	movs	r3, #0
   10f02:	b.w	105fe <_dtoa_r+0x3e6>
   10f06:	movs	r7, #0
   10f08:	b.n	10ca0 <_dtoa_r+0xa88>
   10f0a:	ldr	r3, [sp, #96]	; 0x60
   10f0c:	ldr	r7, [sp, #24]
   10f0e:	ldr	r5, [sp, #28]
   10f10:	rsb	r3, r3, #54	; 0x36
   10f14:	b.w	105fe <_dtoa_r+0x3e6>
   10f18:	ldrd	r6, r7, [sp, #64]	; 0x40
   10f1c:	mov.w	sl, #2
   10f20:	b.n	108d8 <_dtoa_r+0x6c0>
   10f22:	ldr	r3, [sp, #32]
   10f24:	cmp	r3, #0
   10f26:	beq.w	10cac <_dtoa_r+0xa94>
   10f2a:	ldr	r3, [sp, #56]	; 0x38
   10f2c:	cmp	r3, #0
   10f2e:	ble.w	10d8e <_dtoa_r+0xb76>
   10f32:	movs	r2, #0
   10f34:	ldr	r3, [pc, #148]	; (10fcc <_dtoa_r+0xdb4>)
   10f36:	mov	r0, r6
   10f38:	mov	r1, r7
   10f3a:	bl	ac90 <__aeabi_dmul>
   10f3e:	mov	r6, r0
   10f40:	mov	r7, r1
   10f42:	add.w	r0, sl, #1
   10f46:	bl	abc4 <__aeabi_i2d>
   10f4a:	mov	r2, r6
   10f4c:	mov	r3, r7
   10f4e:	bl	ac90 <__aeabi_dmul>
   10f52:	movs	r2, #0
   10f54:	ldr	r3, [pc, #100]	; (10fbc <_dtoa_r+0xda4>)
   10f56:	bl	a92c <__adddf3>
   10f5a:	ldr	r2, [sp, #16]
   10f5c:	ldr	r3, [sp, #56]	; 0x38
   10f5e:	str	r3, [sp, #72]	; 0x48
   10f60:	subs	r2, #1
   10f62:	mov	r4, r0
   10f64:	sub.w	r5, r1, #54525952	; 0x3400000
   10f68:	str	r2, [sp, #88]	; 0x58
   10f6a:	b.n	1091a <_dtoa_r+0x702>
   10f6c:	str	r4, [sp, #40]	; 0x28
   10f6e:	b.n	10a7a <_dtoa_r+0x862>
   10f70:	movs	r2, #57	; 0x39
   10f72:	mov	fp, r6
   10f74:	str	r4, [sp, #40]	; 0x28
   10f76:	mov	r6, r8
   10f78:	strb	r2, [r7, #0]
   10f7a:	adds	r5, r7, #1
   10f7c:	b.w	1076a <_dtoa_r+0x552>
   10f80:	ldrd	r2, r3, [sp, #80]	; 0x50
   10f84:	movs	r0, #0
   10f86:	ldr	r1, [pc, #72]	; (10fd0 <_dtoa_r+0xdb8>)
   10f88:	bl	a928 <__aeabi_dsub>
   10f8c:	mov	r2, r6
   10f8e:	mov	r3, r7
   10f90:	bl	b1b0 <__aeabi_dcmpgt>
   10f94:	cbnz	r0, 10f9a <_dtoa_r+0xd82>
   10f96:	b.n	10d8e <_dtoa_r+0xb76>
   10f98:	mov	r5, r2
   10f9a:	ldrb.w	r3, [r5, #-1]
   10f9e:	cmp	r3, #48	; 0x30
   10fa0:	add.w	r2, r5, #4294967295
   10fa4:	beq.n	10f98 <_dtoa_r+0xd80>
   10fa6:	b.n	10a1c <_dtoa_r+0x804>
   10fa8:	ldr	r3, [sp, #88]	; 0x58
   10faa:	str	r3, [sp, #16]
   10fac:	b.w	10592 <_dtoa_r+0x37a>
   10fb0:	cmp.w	sl, #0
   10fb4:	bne.w	10ab0 <_dtoa_r+0x898>
   10fb8:	b.n	10c80 <_dtoa_r+0xa68>
   10fba:	nop
   10fbc:	.word	0x401c0000
   10fc0:	.word	0x40140000
   10fc4:	.word	0x00013a98
   10fc8:	.word	0x00013b60
   10fcc:	.word	0x40240000
   10fd0:	.word	0x3fe00000
   10fd4:	cmp	r3, #57	; 0x39
   10fd6:	mov	fp, sl
   10fd8:	mov	sl, r3
   10fda:	beq.n	10f70 <_dtoa_r+0xd58>
   10fdc:	cmp.w	fp, #0
   10fe0:	bgt.w	10d5e <_dtoa_r+0xb46>
   10fe4:	b.n	10d62 <_dtoa_r+0xb4a>
   10fe6:	bne.w	10d62 <_dtoa_r+0xb4a>
   10fea:	tst.w	sl, #1
   10fee:	beq.w	10d62 <_dtoa_r+0xb4a>
   10ff2:	b.n	10d56 <_dtoa_r+0xb3e>
   10ff4:	ldr	r3, [sp, #0]
   10ff6:	cmp	r3, #2
   10ff8:	bgt.n	11046 <_dtoa_r+0xe2e>
   10ffa:	ldr	r3, [sp, #56]	; 0x38
   10ffc:	b.n	10c1a <_dtoa_r+0xa02>
   10ffe:	mov.w	sl, #2
   11002:	b.n	108d8 <_dtoa_r+0x6c0>
   11004:	ldr	r3, [sp, #0]
   11006:	cmp	r3, #2
   11008:	bgt.n	11046 <_dtoa_r+0xe2e>
   1100a:	ldr	r3, [sp, #56]	; 0x38
   1100c:	b.n	10aea <_dtoa_r+0x8d2>
   1100e:	movs	r4, #0
   11010:	str.w	r4, [r9, #68]	; 0x44
   11014:	mov	r1, r4
   11016:	mov	r0, r9
   11018:	bl	11ae0 <_Balloc>
   1101c:	mov.w	r3, #4294967295
   11020:	str	r3, [sp, #32]
   11022:	str	r3, [sp, #56]	; 0x38
   11024:	movs	r3, #1
   11026:	str	r0, [sp, #36]	; 0x24
   11028:	str	r4, [sp, #20]
   1102a:	str.w	r0, [r9, #64]	; 0x40
   1102e:	str	r3, [sp, #44]	; 0x2c
   11030:	b.w	1042c <_dtoa_r+0x214>
   11034:	beq.w	106c8 <_dtoa_r+0x4b0>
   11038:	rsb	r0, r0, #60	; 0x3c
   1103c:	b.w	106be <_dtoa_r+0x4a6>
   11040:	movs	r6, #1
   11042:	b.w	103be <_dtoa_r+0x1a6>
   11046:	ldr	r3, [sp, #56]	; 0x38
   11048:	str	r3, [sp, #32]
   1104a:	b.n	10c2a <_dtoa_r+0xa12>

0001104c <__libc_fini_array>:
   1104c:	push	{r3, r4, r5, lr}
   1104e:	ldr	r5, [pc, #28]	; (1106c <__libc_fini_array+0x20>)
   11050:	ldr	r4, [pc, #28]	; (11070 <__libc_fini_array+0x24>)
   11052:	subs	r4, r5, r4
   11054:	asrs	r4, r4, #2
   11056:	beq.n	11064 <__libc_fini_array+0x18>
   11058:	subs	r4, #1
   1105a:	ldr.w	r3, [r5, #-4]!
   1105e:	blx	r3
   11060:	cmp	r4, #0
   11062:	bne.n	11058 <__libc_fini_array+0xc>
   11064:	ldmia.w	sp!, {r3, r4, r5, lr}
   11068:	b.w	13bf8 <__init_array_end>
	...

00011074 <_malloc_trim_r>:
   11074:	push	{r3, r4, r5, r6, r7, lr}
   11076:	ldr	r7, [pc, #140]	; (11104 <_malloc_trim_r+0x90>)
   11078:	mov	r4, r1
   1107a:	mov	r6, r0
   1107c:	bl	c1a8 <__malloc_lock>
   11080:	ldr	r3, [r7, #8]
   11082:	ldr	r5, [r3, #4]
   11084:	bic.w	r5, r5, #3
   11088:	subs	r1, r5, r4
   1108a:	addw	r1, r1, #4079	; 0xfef
   1108e:	bic.w	r1, r1, #4080	; 0xff0
   11092:	bic.w	r1, r1, #15
   11096:	sub.w	r4, r1, #4096	; 0x1000
   1109a:	cmp.w	r4, #4096	; 0x1000
   1109e:	blt.n	110b0 <_malloc_trim_r+0x3c>
   110a0:	movs	r1, #0
   110a2:	mov	r0, r6
   110a4:	bl	c590 <_sbrk_r>
   110a8:	ldr	r3, [r7, #8]
   110aa:	add	r3, r5
   110ac:	cmp	r0, r3
   110ae:	beq.n	110ba <_malloc_trim_r+0x46>
   110b0:	mov	r0, r6
   110b2:	bl	c1ac <__malloc_unlock>
   110b6:	movs	r0, #0
   110b8:	pop	{r3, r4, r5, r6, r7, pc}
   110ba:	negs	r1, r4
   110bc:	mov	r0, r6
   110be:	bl	c590 <_sbrk_r>
   110c2:	adds	r0, #1
   110c4:	beq.n	110e2 <_malloc_trim_r+0x6e>
   110c6:	ldr	r3, [pc, #64]	; (11108 <_malloc_trim_r+0x94>)
   110c8:	ldr	r2, [r7, #8]
   110ca:	ldr	r1, [r3, #0]
   110cc:	subs	r5, r5, r4
   110ce:	orr.w	r5, r5, #1
   110d2:	mov	r0, r6
   110d4:	subs	r1, r1, r4
   110d6:	str	r5, [r2, #4]
   110d8:	str	r1, [r3, #0]
   110da:	bl	c1ac <__malloc_unlock>
   110de:	movs	r0, #1
   110e0:	pop	{r3, r4, r5, r6, r7, pc}
   110e2:	movs	r1, #0
   110e4:	mov	r0, r6
   110e6:	bl	c590 <_sbrk_r>
   110ea:	ldr	r2, [r7, #8]
   110ec:	subs	r3, r0, r2
   110ee:	cmp	r3, #15
   110f0:	ble.n	110b0 <_malloc_trim_r+0x3c>
   110f2:	ldr	r4, [pc, #24]	; (1110c <_malloc_trim_r+0x98>)
   110f4:	ldr	r1, [pc, #16]	; (11108 <_malloc_trim_r+0x94>)
   110f6:	ldr	r4, [r4, #0]
   110f8:	orr.w	r3, r3, #1
   110fc:	subs	r0, r0, r4
   110fe:	str	r3, [r2, #4]
   11100:	str	r0, [r1, #0]
   11102:	b.n	110b0 <_malloc_trim_r+0x3c>
   11104:	.word	0x20017570
   11108:	.word	0x2001ce00
   1110c:	.word	0x2001797c

00011110 <_free_r>:
   11110:	cmp	r1, #0
   11112:	beq.n	111a0 <_free_r+0x90>
   11114:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11118:	mov	r5, r1
   1111a:	mov	r8, r0
   1111c:	bl	c1a8 <__malloc_lock>
   11120:	ldr.w	r7, [r5, #-4]
   11124:	ldr	r1, [pc, #424]	; (112d0 <_free_r+0x1c0>)
   11126:	bic.w	r3, r7, #1
   1112a:	sub.w	r4, r5, #8
   1112e:	adds	r2, r4, r3
   11130:	ldr	r6, [r1, #8]
   11132:	ldr	r0, [r2, #4]
   11134:	cmp	r2, r6
   11136:	bic.w	r0, r0, #3
   1113a:	beq.n	11202 <_free_r+0xf2>
   1113c:	lsls	r6, r7, #31
   1113e:	str	r0, [r2, #4]
   11140:	bmi.n	1115a <_free_r+0x4a>
   11142:	ldr.w	r7, [r5, #-8]
   11146:	subs	r4, r4, r7
   11148:	add.w	lr, r1, #8
   1114c:	ldr	r5, [r4, #8]
   1114e:	cmp	r5, lr
   11150:	add	r3, r7
   11152:	beq.n	11234 <_free_r+0x124>
   11154:	ldr	r7, [r4, #12]
   11156:	str	r7, [r5, #12]
   11158:	str	r5, [r7, #8]
   1115a:	adds	r5, r2, r0
   1115c:	ldr	r5, [r5, #4]
   1115e:	lsls	r5, r5, #31
   11160:	bpl.n	111e8 <_free_r+0xd8>
   11162:	orr.w	r2, r3, #1
   11166:	str	r2, [r4, #4]
   11168:	str	r3, [r4, r3]
   1116a:	cmp.w	r3, #512	; 0x200
   1116e:	bcs.n	111a2 <_free_r+0x92>
   11170:	lsrs	r3, r3, #3
   11172:	adds	r2, r3, #1
   11174:	ldr	r5, [r1, #4]
   11176:	ldr.w	r7, [r1, r2, lsl #3]
   1117a:	str	r7, [r4, #8]
   1117c:	movs	r0, #1
   1117e:	asrs	r3, r3, #2
   11180:	lsl.w	r3, r0, r3
   11184:	add.w	r0, r1, r2, lsl #3
   11188:	orrs	r5, r3
   1118a:	subs	r0, #8
   1118c:	str	r0, [r4, #12]
   1118e:	str	r5, [r1, #4]
   11190:	str.w	r4, [r1, r2, lsl #3]
   11194:	str	r4, [r7, #12]
   11196:	mov	r0, r8
   11198:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1119c:	b.w	c1ac <__malloc_unlock>
   111a0:	bx	lr
   111a2:	lsrs	r2, r3, #9
   111a4:	cmp	r2, #4
   111a6:	bhi.n	11250 <_free_r+0x140>
   111a8:	lsrs	r2, r3, #6
   111aa:	add.w	r7, r2, #57	; 0x39
   111ae:	lsls	r7, r7, #1
   111b0:	add.w	r5, r2, #56	; 0x38
   111b4:	add.w	r0, r1, r7, lsl #2
   111b8:	ldr.w	r2, [r1, r7, lsl #2]
   111bc:	ldr	r1, [pc, #272]	; (112d0 <_free_r+0x1c0>)
   111be:	subs	r0, #8
   111c0:	cmp	r0, r2
   111c2:	beq.n	11260 <_free_r+0x150>
   111c4:	ldr	r1, [r2, #4]
   111c6:	bic.w	r1, r1, #3
   111ca:	cmp	r3, r1
   111cc:	bcs.n	111d4 <_free_r+0xc4>
   111ce:	ldr	r2, [r2, #8]
   111d0:	cmp	r0, r2
   111d2:	bne.n	111c4 <_free_r+0xb4>
   111d4:	ldr	r0, [r2, #12]
   111d6:	str	r0, [r4, #12]
   111d8:	str	r2, [r4, #8]
   111da:	str	r4, [r0, #8]
   111dc:	str	r4, [r2, #12]
   111de:	mov	r0, r8
   111e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   111e4:	b.w	c1ac <__malloc_unlock>
   111e8:	ldr	r5, [r2, #8]
   111ea:	ldr	r7, [pc, #232]	; (112d4 <_free_r+0x1c4>)
   111ec:	cmp	r5, r7
   111ee:	add	r3, r0
   111f0:	beq.n	11272 <_free_r+0x162>
   111f2:	ldr	r0, [r2, #12]
   111f4:	str	r0, [r5, #12]
   111f6:	orr.w	r2, r3, #1
   111fa:	str	r5, [r0, #8]
   111fc:	str	r2, [r4, #4]
   111fe:	str	r3, [r4, r3]
   11200:	b.n	1116a <_free_r+0x5a>
   11202:	lsls	r7, r7, #31
   11204:	add	r3, r0
   11206:	bmi.n	11218 <_free_r+0x108>
   11208:	ldr.w	r2, [r5, #-8]
   1120c:	subs	r4, r4, r2
   1120e:	add	r3, r2
   11210:	ldr	r0, [r4, #8]
   11212:	ldr	r2, [r4, #12]
   11214:	str	r2, [r0, #12]
   11216:	str	r0, [r2, #8]
   11218:	ldr	r2, [pc, #188]	; (112d8 <_free_r+0x1c8>)
   1121a:	ldr	r2, [r2, #0]
   1121c:	orr.w	r0, r3, #1
   11220:	cmp	r3, r2
   11222:	str	r0, [r4, #4]
   11224:	str	r4, [r1, #8]
   11226:	bcc.n	11196 <_free_r+0x86>
   11228:	ldr	r3, [pc, #176]	; (112dc <_free_r+0x1cc>)
   1122a:	mov	r0, r8
   1122c:	ldr	r1, [r3, #0]
   1122e:	bl	11074 <_malloc_trim_r>
   11232:	b.n	11196 <_free_r+0x86>
   11234:	adds	r1, r2, r0
   11236:	ldr	r1, [r1, #4]
   11238:	lsls	r1, r1, #31
   1123a:	bmi.n	112c6 <_free_r+0x1b6>
   1123c:	ldr	r1, [r2, #8]
   1123e:	ldr	r2, [r2, #12]
   11240:	str	r2, [r1, #12]
   11242:	add	r3, r0
   11244:	orr.w	r0, r3, #1
   11248:	str	r1, [r2, #8]
   1124a:	str	r0, [r4, #4]
   1124c:	str	r3, [r4, r3]
   1124e:	b.n	11196 <_free_r+0x86>
   11250:	cmp	r2, #20
   11252:	bhi.n	11284 <_free_r+0x174>
   11254:	add.w	r7, r2, #92	; 0x5c
   11258:	lsls	r7, r7, #1
   1125a:	add.w	r5, r2, #91	; 0x5b
   1125e:	b.n	111b4 <_free_r+0xa4>
   11260:	asrs	r2, r5, #2
   11262:	ldr	r3, [r1, #4]
   11264:	movs	r5, #1
   11266:	lsl.w	r2, r5, r2
   1126a:	orrs	r3, r2
   1126c:	str	r3, [r1, #4]
   1126e:	mov	r2, r0
   11270:	b.n	111d6 <_free_r+0xc6>
   11272:	orr.w	r2, r3, #1
   11276:	str	r4, [r1, #20]
   11278:	str	r4, [r1, #16]
   1127a:	str	r5, [r4, #12]
   1127c:	str	r5, [r4, #8]
   1127e:	str	r2, [r4, #4]
   11280:	str	r3, [r4, r3]
   11282:	b.n	11196 <_free_r+0x86>
   11284:	cmp	r2, #84	; 0x54
   11286:	bhi.n	11296 <_free_r+0x186>
   11288:	lsrs	r2, r3, #12
   1128a:	add.w	r7, r2, #111	; 0x6f
   1128e:	lsls	r7, r7, #1
   11290:	add.w	r5, r2, #110	; 0x6e
   11294:	b.n	111b4 <_free_r+0xa4>
   11296:	cmp.w	r2, #340	; 0x154
   1129a:	bhi.n	112aa <_free_r+0x19a>
   1129c:	lsrs	r2, r3, #15
   1129e:	add.w	r7, r2, #120	; 0x78
   112a2:	lsls	r7, r7, #1
   112a4:	add.w	r5, r2, #119	; 0x77
   112a8:	b.n	111b4 <_free_r+0xa4>
   112aa:	movw	r0, #1364	; 0x554
   112ae:	cmp	r2, r0
   112b0:	bhi.n	112c0 <_free_r+0x1b0>
   112b2:	lsrs	r2, r3, #18
   112b4:	add.w	r7, r2, #125	; 0x7d
   112b8:	lsls	r7, r7, #1
   112ba:	add.w	r5, r2, #124	; 0x7c
   112be:	b.n	111b4 <_free_r+0xa4>
   112c0:	movs	r7, #254	; 0xfe
   112c2:	movs	r5, #126	; 0x7e
   112c4:	b.n	111b4 <_free_r+0xa4>
   112c6:	orr.w	r2, r3, #1
   112ca:	str	r2, [r4, #4]
   112cc:	str	r3, [r4, r3]
   112ce:	b.n	11196 <_free_r+0x86>
   112d0:	.word	0x20017570
   112d4:	.word	0x20017578
   112d8:	.word	0x20017978
   112dc:	.word	0x2001cdfc

000112e0 <rshift>:
   112e0:	ldr	r2, [r0, #16]
   112e2:	asrs	r3, r1, #5
   112e4:	cmp	r3, r2
   112e6:	bge.n	11346 <rshift+0x66>
   112e8:	push	{r4, r5, r6, r7, lr}
   112ea:	ands.w	r1, r1, #31
   112ee:	add.w	r6, r0, #20
   112f2:	add.w	r2, r6, r2, lsl #2
   112f6:	add.w	lr, r6, r3, lsl #2
   112fa:	beq.n	11350 <rshift+0x70>
   112fc:	ldr.w	r3, [r6, r3, lsl #2]
   11300:	add.w	r5, lr, #4
   11304:	cmp	r2, r5
   11306:	lsr.w	r4, r3, r1
   1130a:	rsb	ip, r1, #32
   1130e:	bls.n	11384 <rshift+0xa4>
   11310:	add.w	r7, r0, #16
   11314:	ldr	r3, [r5, #0]
   11316:	lsl.w	r3, r3, ip
   1131a:	orrs	r3, r4
   1131c:	str.w	r3, [r7, #4]!
   11320:	ldr.w	r3, [r5], #4
   11324:	cmp	r2, r5
   11326:	lsr.w	r4, r3, r1
   1132a:	bhi.n	11314 <rshift+0x34>
   1132c:	rsb	r2, lr, r2
   11330:	subs	r2, #5
   11332:	bic.w	r2, r2, #3
   11336:	adds	r2, #4
   11338:	add	r2, r6
   1133a:	str	r4, [r2, #0]
   1133c:	cbz	r4, 11340 <rshift+0x60>
   1133e:	adds	r2, #4
   11340:	subs	r3, r2, r6
   11342:	asrs	r3, r3, #2
   11344:	b.n	11374 <rshift+0x94>
   11346:	movs	r3, #0
   11348:	str	r3, [r0, #16]
   1134a:	movs	r3, #0
   1134c:	str	r3, [r0, #20]
   1134e:	bx	lr
   11350:	cmp	r2, lr
   11352:	bls.n	1137a <rshift+0x9a>
   11354:	add.w	r4, r0, #16
   11358:	mov	r1, lr
   1135a:	ldr.w	r5, [r1], #4
   1135e:	str.w	r5, [r4, #4]!
   11362:	cmp	r2, r1
   11364:	bhi.n	1135a <rshift+0x7a>
   11366:	mvn.w	r3, lr
   1136a:	add	r3, r2
   1136c:	bic.w	r3, r3, #3
   11370:	adds	r3, #4
   11372:	asrs	r3, r3, #2
   11374:	str	r3, [r0, #16]
   11376:	cbz	r3, 1137e <rshift+0x9e>
   11378:	pop	{r4, r5, r6, r7, pc}
   1137a:	movs	r3, #0
   1137c:	str	r3, [r0, #16]
   1137e:	movs	r3, #0
   11380:	str	r3, [r0, #20]
   11382:	pop	{r4, r5, r6, r7, pc}
   11384:	mov	r2, r6
   11386:	b.n	1133a <rshift+0x5a>

00011388 <__gethex>:
   11388:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1138c:	sub	sp, #44	; 0x2c
   1138e:	mov	r9, r1
   11390:	str	r0, [sp, #20]
   11392:	ldr	r0, [sp, #88]	; 0x58
   11394:	str	r2, [sp, #12]
   11396:	str	r3, [sp, #32]
   11398:	bl	11a64 <__localeconv_l>
   1139c:	ldr	r3, [r0, #0]
   1139e:	str	r3, [sp, #8]
   113a0:	mov	r0, r3
   113a2:	mov	r4, r3
   113a4:	bl	c800 <strlen>
   113a8:	ldr.w	r3, [r9]
   113ac:	str	r0, [sp, #0]
   113ae:	ldrb	r2, [r3, #2]
   113b0:	adds	r1, r4, r0
   113b2:	cmp	r2, #48	; 0x30
   113b4:	ldrb.w	fp, [r1, #-1]
   113b8:	bne.w	1170e <__gethex+0x386>
   113bc:	adds	r3, #3
   113be:	mov.w	r8, #0
   113c2:	mov	r4, r3
   113c4:	ldrb.w	r2, [r3], #1
   113c8:	cmp	r2, #48	; 0x30
   113ca:	add.w	r8, r8, #1
   113ce:	beq.n	113c2 <__gethex+0x3a>
   113d0:	ldr	r6, [pc, #712]	; (1169c <__gethex+0x314>)
   113d2:	ldrb	r3, [r6, r2]
   113d4:	cmp	r3, #0
   113d6:	beq.w	115ba <__gethex+0x232>
   113da:	ldrb	r3, [r4, #0]
   113dc:	mov.w	sl, #0
   113e0:	ldrb	r3, [r6, r3]
   113e2:	mov	r5, sl
   113e4:	mov	r7, r4
   113e6:	cbz	r3, 113f2 <__gethex+0x6a>
   113e8:	ldrb.w	r3, [r7, #1]!
   113ec:	ldrb	r3, [r6, r3]
   113ee:	cmp	r3, #0
   113f0:	bne.n	113e8 <__gethex+0x60>
   113f2:	ldr	r2, [sp, #0]
   113f4:	ldr	r1, [sp, #8]
   113f6:	mov	r0, r7
   113f8:	bl	c8dc <strncmp>
   113fc:	cmp	r0, #0
   113fe:	beq.w	11526 <__gethex+0x19e>
   11402:	ldrb	r3, [r7, #0]
   11404:	cmp	r5, #0
   11406:	beq.w	116ec <__gethex+0x364>
   1140a:	subs	r5, r5, r7
   1140c:	lsls	r2, r5, #2
   1140e:	str	r2, [sp, #4]
   11410:	cmp	r3, #80	; 0x50
   11412:	beq.w	11538 <__gethex+0x1b0>
   11416:	cmp	r3, #112	; 0x70
   11418:	beq.w	11538 <__gethex+0x1b0>
   1141c:	mov	r5, r7
   1141e:	str.w	r7, [r9]
   11422:	cmp.w	sl, #0
   11426:	bne.w	11598 <__gethex+0x210>
   1142a:	subs	r3, r5, r4
   1142c:	subs	r3, #1
   1142e:	cmp	r3, #7
   11430:	mov	r1, sl
   11432:	ble.n	1143e <__gethex+0xb6>
   11434:	asrs	r3, r3, #1
   11436:	cmp	r3, #7
   11438:	add.w	r1, r1, #1
   1143c:	bgt.n	11434 <__gethex+0xac>
   1143e:	ldr	r0, [sp, #20]
   11440:	bl	11ae0 <_Balloc>
   11444:	mov	r3, r0
   11446:	adds	r3, #20
   11448:	cmp	r5, r4
   1144a:	str	r0, [sp, #16]
   1144c:	str	r3, [sp, #28]
   1144e:	bls.w	117f8 <__gethex+0x470>
   11452:	mov	r9, r3
   11454:	ldr	r3, [sp, #0]
   11456:	mov.w	r8, #0
   1145a:	rsb	r3, r3, #1
   1145e:	mov	r7, r8
   11460:	str	r3, [sp, #24]
   11462:	b.n	11484 <__gethex+0xfc>
   11464:	cmp	r7, #32
   11466:	beq.w	115a8 <__gethex+0x220>
   1146a:	mov	r2, r7
   1146c:	adds	r7, #4
   1146e:	ldrb.w	r3, [r5, #-1]
   11472:	ldrb	r3, [r6, r3]
   11474:	mov	r5, sl
   11476:	and.w	r3, r3, #15
   1147a:	lsls	r3, r2
   1147c:	cmp	r5, r4
   1147e:	orr.w	r8, r8, r3
   11482:	bls.n	114b0 <__gethex+0x128>
   11484:	ldrb.w	r3, [r5, #-1]
   11488:	cmp	r3, fp
   1148a:	add.w	sl, r5, #4294967295
   1148e:	bne.n	11464 <__gethex+0xdc>
   11490:	ldr	r3, [sp, #24]
   11492:	add	r3, sl
   11494:	cmp	r3, r4
   11496:	bcc.n	11464 <__gethex+0xdc>
   11498:	mov	r0, r3
   1149a:	ldr	r2, [sp, #0]
   1149c:	ldr	r1, [sp, #8]
   1149e:	str	r3, [sp, #36]	; 0x24
   114a0:	bl	c8dc <strncmp>
   114a4:	ldr	r3, [sp, #36]	; 0x24
   114a6:	cmp	r0, #0
   114a8:	bne.n	11464 <__gethex+0xdc>
   114aa:	mov	r5, r3
   114ac:	cmp	r5, r4
   114ae:	bhi.n	11484 <__gethex+0xfc>
   114b0:	str.w	r8, [r9], #4
   114b4:	ldr	r3, [sp, #28]
   114b6:	ldr	r2, [sp, #16]
   114b8:	rsb	r9, r3, r9
   114bc:	mov.w	r3, r9, asr #2
   114c0:	str	r3, [r2, #16]
   114c2:	mov	r0, r8
   114c4:	mov.w	r9, r3, lsl #5
   114c8:	bl	11c58 <__hi0bits>
   114cc:	ldr	r3, [sp, #12]
   114ce:	ldr	r6, [r3, #0]
   114d0:	rsb	r0, r0, r9
   114d4:	cmp	r0, r6
   114d6:	bgt.w	116a0 <__gethex+0x318>
   114da:	blt.w	116f0 <__gethex+0x368>
   114de:	movs	r7, #0
   114e0:	ldr	r3, [sp, #12]
   114e2:	ldr	r2, [sp, #4]
   114e4:	ldr	r3, [r3, #8]
   114e6:	cmp	r2, r3
   114e8:	bgt.w	1161a <__gethex+0x292>
   114ec:	ldr	r0, [sp, #12]
   114ee:	ldr	r1, [sp, #4]
   114f0:	ldr	r3, [r0, #4]
   114f2:	cmp	r1, r3
   114f4:	bge.w	11662 <__gethex+0x2da>
   114f8:	subs	r5, r3, r1
   114fa:	cmp	r6, r5
   114fc:	bgt.w	1171e <__gethex+0x396>
   11500:	ldr	r2, [r0, #12]
   11502:	cmp	r2, #2
   11504:	beq.w	11806 <__gethex+0x47e>
   11508:	cmp	r2, #3
   1150a:	beq.w	117c6 <__gethex+0x43e>
   1150e:	cmp	r2, #1
   11510:	beq.w	1180e <__gethex+0x486>
   11514:	ldr	r0, [sp, #20]
   11516:	ldr	r1, [sp, #16]
   11518:	bl	11b2c <_Bfree>
   1151c:	ldr	r2, [sp, #80]	; 0x50
   1151e:	movs	r3, #0
   11520:	str	r3, [r2, #0]
   11522:	movs	r0, #80	; 0x50
   11524:	b.n	115a2 <__gethex+0x21a>
   11526:	cmp	r5, #0
   11528:	beq.w	1175e <__gethex+0x3d6>
   1152c:	ldrb	r3, [r7, #0]
   1152e:	b.n	1140a <__gethex+0x82>
   11530:	movs	r3, #0
   11532:	str	r3, [sp, #4]
   11534:	mov.w	sl, #1
   11538:	ldrb	r3, [r7, #1]
   1153a:	cmp	r3, #43	; 0x2b
   1153c:	beq.w	11698 <__gethex+0x310>
   11540:	cmp	r3, #45	; 0x2d
   11542:	beq.n	11630 <__gethex+0x2a8>
   11544:	adds	r1, r7, #1
   11546:	movs	r5, #0
   11548:	ldrb	r3, [r6, r3]
   1154a:	ldr	r0, [pc, #336]	; (1169c <__gethex+0x314>)
   1154c:	subs	r2, r3, #1
   1154e:	cmp	r2, #24
   11550:	bhi.w	1141c <__gethex+0x94>
   11554:	ldrb	r2, [r1, #1]
   11556:	ldrb	r2, [r0, r2]
   11558:	subs	r0, r2, #1
   1155a:	cmp	r0, #24
   1155c:	sub.w	r3, r3, #16
   11560:	add.w	r1, r1, #1
   11564:	bhi.n	1157e <__gethex+0x1f6>
   11566:	ldrb.w	r0, [r1, #1]!
   1156a:	add.w	r3, r3, r3, lsl #2
   1156e:	add.w	r3, r2, r3, lsl #1
   11572:	ldrb	r2, [r6, r0]
   11574:	subs	r0, r2, #1
   11576:	cmp	r0, #24
   11578:	sub.w	r3, r3, #16
   1157c:	bls.n	11566 <__gethex+0x1de>
   1157e:	cbz	r5, 11582 <__gethex+0x1fa>
   11580:	negs	r3, r3
   11582:	ldr	r2, [sp, #4]
   11584:	mov	r5, r7
   11586:	add	r2, r3
   11588:	mov	r7, r1
   1158a:	str	r2, [sp, #4]
   1158c:	str.w	r7, [r9]
   11590:	cmp.w	sl, #0
   11594:	beq.w	1142a <__gethex+0xa2>
   11598:	cmp.w	r8, #0
   1159c:	ite	eq
   1159e:	moveq	r0, #6
   115a0:	movne	r0, #0
   115a2:	add	sp, #44	; 0x2c
   115a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115a8:	str.w	r8, [r9]
   115ac:	mov.w	r8, #0
   115b0:	add.w	r9, r9, #4
   115b4:	mov	r2, r8
   115b6:	movs	r7, #4
   115b8:	b.n	1146e <__gethex+0xe6>
   115ba:	ldr	r5, [sp, #0]
   115bc:	ldr	r1, [sp, #8]
   115be:	mov	r2, r5
   115c0:	mov	r0, r4
   115c2:	bl	c8dc <strncmp>
   115c6:	cmp	r0, #0
   115c8:	beq.n	11638 <__gethex+0x2b0>
   115ca:	ldrb	r3, [r4, #0]
   115cc:	mov	r7, r4
   115ce:	cmp	r3, #80	; 0x50
   115d0:	beq.n	11530 <__gethex+0x1a8>
   115d2:	cmp	r3, #112	; 0x70
   115d4:	beq.n	11530 <__gethex+0x1a8>
   115d6:	str.w	r7, [r9]
   115da:	b.n	11598 <__gethex+0x210>
   115dc:	ldr	r3, [sp, #16]
   115de:	ldr	r3, [r3, #8]
   115e0:	cmp	r7, r3
   115e2:	bge.w	1184e <__gethex+0x4c6>
   115e6:	mov	r3, r7
   115e8:	ldr	r0, [sp, #16]
   115ea:	add.w	r2, r0, r3, lsl #2
   115ee:	movs	r1, #1
   115f0:	adds	r3, #1
   115f2:	cmp	r4, #2
   115f4:	str	r3, [r0, #16]
   115f6:	str	r1, [r2, #20]
   115f8:	beq.w	1182c <__gethex+0x4a4>
   115fc:	cmp	r7, r3
   115fe:	bge.w	117b8 <__gethex+0x430>
   11602:	movs	r1, #1
   11604:	ldr	r0, [sp, #16]
   11606:	bl	112e0 <rshift>
   1160a:	ldr	r3, [sp, #12]
   1160c:	ldr	r2, [sp, #4]
   1160e:	ldr	r3, [r3, #8]
   11610:	adds	r2, #1
   11612:	cmp	r2, r3
   11614:	str	r2, [sp, #4]
   11616:	ble.w	117be <__gethex+0x436>
   1161a:	ldr	r0, [sp, #20]
   1161c:	ldr	r1, [sp, #16]
   1161e:	bl	11b2c <_Bfree>
   11622:	ldr	r2, [sp, #80]	; 0x50
   11624:	movs	r3, #0
   11626:	movs	r0, #163	; 0xa3
   11628:	str	r3, [r2, #0]
   1162a:	add	sp, #44	; 0x2c
   1162c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11630:	movs	r5, #1
   11632:	ldrb	r3, [r7, #2]
   11634:	adds	r1, r7, #2
   11636:	b.n	11548 <__gethex+0x1c0>
   11638:	ldrb	r2, [r4, r5]
   1163a:	ldrb	r3, [r6, r2]
   1163c:	adds	r7, r4, r5
   1163e:	cmp	r3, #0
   11640:	beq.n	11716 <__gethex+0x38e>
   11642:	cmp	r2, #48	; 0x30
   11644:	mov	r4, r7
   11646:	bne.n	11652 <__gethex+0x2ca>
   11648:	ldrb.w	r3, [r4, #1]!
   1164c:	cmp	r3, #48	; 0x30
   1164e:	beq.n	11648 <__gethex+0x2c0>
   11650:	ldrb	r3, [r6, r3]
   11652:	clz	sl, r3
   11656:	mov	r5, r7
   11658:	mov.w	sl, sl, lsr #5
   1165c:	mov.w	r8, #1
   11660:	b.n	113e4 <__gethex+0x5c>
   11662:	movs	r4, #1
   11664:	cbz	r7, 11680 <__gethex+0x2f8>
   11666:	ldr	r3, [sp, #12]
   11668:	ldr	r3, [r3, #12]
   1166a:	cmp	r3, #2
   1166c:	beq.w	1177a <__gethex+0x3f2>
   11670:	cmp	r3, #3
   11672:	beq.w	11782 <__gethex+0x3fa>
   11676:	cmp	r3, #1
   11678:	beq.w	117e6 <__gethex+0x45e>
   1167c:	orr.w	r4, r4, #16
   11680:	ldr	r3, [sp, #80]	; 0x50
   11682:	mov	r2, r3
   11684:	ldr	r3, [sp, #16]
   11686:	str	r3, [r2, #0]
   11688:	ldr	r3, [sp, #32]
   1168a:	mov	r2, r3
   1168c:	ldr	r3, [sp, #4]
   1168e:	str	r3, [r2, #0]
   11690:	mov	r0, r4
   11692:	add	sp, #44	; 0x2c
   11694:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11698:	movs	r5, #0
   1169a:	b.n	11632 <__gethex+0x2aa>
   1169c:	.word	0x00013994
   116a0:	subs	r4, r0, r6
   116a2:	mov	r1, r4
   116a4:	ldr	r0, [sp, #16]
   116a6:	bl	12368 <__any_on>
   116aa:	cmp	r0, #0
   116ac:	beq.n	1171a <__gethex+0x392>
   116ae:	subs	r2, r4, #1
   116b0:	asrs	r1, r2, #5
   116b2:	ldr	r0, [sp, #28]
   116b4:	and.w	r3, r2, #31
   116b8:	ldr.w	r1, [r0, r1, lsl #2]
   116bc:	movs	r7, #1
   116be:	lsl.w	r3, r7, r3
   116c2:	tst	r3, r1
   116c4:	beq.n	116dc <__gethex+0x354>
   116c6:	cmp	r2, r7
   116c8:	ble.w	11802 <__gethex+0x47a>
   116cc:	subs	r1, r4, #2
   116ce:	ldr	r0, [sp, #16]
   116d0:	bl	12368 <__any_on>
   116d4:	cmp	r0, #0
   116d6:	beq.w	11802 <__gethex+0x47a>
   116da:	movs	r7, #3
   116dc:	ldr	r3, [sp, #4]
   116de:	ldr	r0, [sp, #16]
   116e0:	add	r3, r4
   116e2:	mov	r1, r4
   116e4:	str	r3, [sp, #4]
   116e6:	bl	112e0 <rshift>
   116ea:	b.n	114e0 <__gethex+0x158>
   116ec:	str	r5, [sp, #4]
   116ee:	b.n	11410 <__gethex+0x88>
   116f0:	subs	r4, r6, r0
   116f2:	ldr	r1, [sp, #16]
   116f4:	ldr	r0, [sp, #20]
   116f6:	mov	r2, r4
   116f8:	bl	11ed8 <__lshift>
   116fc:	ldr	r3, [sp, #4]
   116fe:	str	r0, [sp, #16]
   11700:	subs	r3, r3, r4
   11702:	str	r3, [sp, #4]
   11704:	mov	r3, r0
   11706:	adds	r3, #20
   11708:	str	r3, [sp, #28]
   1170a:	movs	r7, #0
   1170c:	b.n	114e0 <__gethex+0x158>
   1170e:	adds	r4, r3, #2
   11710:	mov.w	r8, #0
   11714:	b.n	113d0 <__gethex+0x48>
   11716:	mov	r3, r2
   11718:	b.n	115ce <__gethex+0x246>
   1171a:	mov	r7, r0
   1171c:	b.n	116dc <__gethex+0x354>
   1171e:	subs	r4, r5, #1
   11720:	cmp	r7, #0
   11722:	bne.n	117c2 <__gethex+0x43a>
   11724:	cbz	r4, 11730 <__gethex+0x3a8>
   11726:	mov	r1, r4
   11728:	ldr	r0, [sp, #16]
   1172a:	bl	12368 <__any_on>
   1172e:	mov	r7, r0
   11730:	asrs	r3, r4, #5
   11732:	ldr	r2, [sp, #28]
   11734:	ldr	r0, [sp, #16]
   11736:	ldr.w	r2, [r2, r3, lsl #2]
   1173a:	and.w	r4, r4, #31
   1173e:	movs	r3, #1
   11740:	lsl.w	r4, r3, r4
   11744:	tst	r4, r2
   11746:	mov	r1, r5
   11748:	it	ne
   1174a:	orrne.w	r7, r7, #2
   1174e:	bl	112e0 <rshift>
   11752:	ldr	r3, [sp, #12]
   11754:	ldr	r3, [r3, #4]
   11756:	str	r3, [sp, #4]
   11758:	subs	r6, r6, r5
   1175a:	movs	r4, #2
   1175c:	b.n	11664 <__gethex+0x2dc>
   1175e:	ldr	r1, [sp, #0]
   11760:	ldrb	r3, [r7, r1]
   11762:	ldrb	r2, [r6, r3]
   11764:	adds	r5, r7, r1
   11766:	mov	r7, r5
   11768:	cmp	r2, #0
   1176a:	beq.w	1140a <__gethex+0x82>
   1176e:	ldrb.w	r3, [r7, #1]!
   11772:	ldrb	r2, [r6, r3]
   11774:	cmp	r2, #0
   11776:	bne.n	1176e <__gethex+0x3e6>
   11778:	b.n	1140a <__gethex+0x82>
   1177a:	ldr	r3, [sp, #84]	; 0x54
   1177c:	rsb	r3, r3, #1
   11780:	str	r3, [sp, #84]	; 0x54
   11782:	ldr	r3, [sp, #84]	; 0x54
   11784:	cmp	r3, #0
   11786:	beq.w	1167c <__gethex+0x2f4>
   1178a:	ldr	r3, [sp, #16]
   1178c:	ldr	r5, [sp, #28]
   1178e:	ldr	r7, [r3, #16]
   11790:	mov.w	r8, r7, lsl #2
   11794:	add.w	r0, r5, r8
   11798:	mov	r3, r5
   1179a:	movs	r1, #0
   1179c:	b.n	117a8 <__gethex+0x420>
   1179e:	str.w	r1, [r3], #4
   117a2:	cmp	r0, r3
   117a4:	bls.w	115dc <__gethex+0x254>
   117a8:	ldr	r2, [r3, #0]
   117aa:	cmp.w	r2, #4294967295
   117ae:	beq.n	1179e <__gethex+0x416>
   117b0:	adds	r2, #1
   117b2:	cmp	r4, #2
   117b4:	str	r2, [r3, #0]
   117b6:	beq.n	1182c <__gethex+0x4a4>
   117b8:	ands.w	r6, r6, #31
   117bc:	bne.n	1183a <__gethex+0x4b2>
   117be:	movs	r4, #33	; 0x21
   117c0:	b.n	11680 <__gethex+0x2f8>
   117c2:	movs	r7, #1
   117c4:	b.n	11730 <__gethex+0x3a8>
   117c6:	ldr	r2, [sp, #84]	; 0x54
   117c8:	cmp	r2, #0
   117ca:	beq.w	11514 <__gethex+0x18c>
   117ce:	ldr	r1, [sp, #32]
   117d0:	str	r3, [r1, #0]
   117d2:	ldr	r3, [sp, #28]
   117d4:	ldr	r1, [sp, #16]
   117d6:	movs	r2, #1
   117d8:	str	r2, [r1, #16]
   117da:	str	r2, [r3, #0]
   117dc:	ldr	r3, [sp, #80]	; 0x50
   117de:	mov	r2, r3
   117e0:	movs	r0, #98	; 0x62
   117e2:	str	r1, [r2, #0]
   117e4:	b.n	115a2 <__gethex+0x21a>
   117e6:	lsls	r2, r7, #30
   117e8:	bpl.w	1167c <__gethex+0x2f4>
   117ec:	ldr	r3, [sp, #28]
   117ee:	ldr	r3, [r3, #0]
   117f0:	orrs	r3, r7
   117f2:	lsls	r3, r3, #31
   117f4:	bmi.n	1178a <__gethex+0x402>
   117f6:	b.n	1167c <__gethex+0x2f4>
   117f8:	ldr.w	r9, [sp, #28]
   117fc:	mov.w	r8, #0
   11800:	b.n	114b0 <__gethex+0x128>
   11802:	movs	r7, #2
   11804:	b.n	116dc <__gethex+0x354>
   11806:	ldr	r2, [sp, #84]	; 0x54
   11808:	cmp	r2, #0
   1180a:	beq.n	117ce <__gethex+0x446>
   1180c:	b.n	11514 <__gethex+0x18c>
   1180e:	cmp	r6, r5
   11810:	bne.w	11514 <__gethex+0x18c>
   11814:	cmp	r6, #1
   11816:	ble.n	117ce <__gethex+0x446>
   11818:	subs	r1, r6, #1
   1181a:	ldr	r0, [sp, #16]
   1181c:	bl	12368 <__any_on>
   11820:	cmp	r0, #0
   11822:	beq.w	11514 <__gethex+0x18c>
   11826:	ldr	r3, [sp, #12]
   11828:	ldr	r3, [r3, #4]
   1182a:	b.n	117ce <__gethex+0x446>
   1182c:	ldr	r3, [sp, #12]
   1182e:	ldr	r3, [r3, #0]
   11830:	subs	r3, #1
   11832:	cmp	r6, r3
   11834:	beq.n	11880 <__gethex+0x4f8>
   11836:	movs	r4, #34	; 0x22
   11838:	b.n	11680 <__gethex+0x2f8>
   1183a:	add	r5, r8
   1183c:	rsb	r6, r6, #32
   11840:	ldr.w	r0, [r5, #-4]
   11844:	bl	11c58 <__hi0bits>
   11848:	cmp	r0, r6
   1184a:	bge.n	117be <__gethex+0x436>
   1184c:	b.n	11602 <__gethex+0x27a>
   1184e:	ldr	r3, [sp, #16]
   11850:	ldr.w	r9, [sp, #20]
   11854:	ldr	r1, [r3, #4]
   11856:	mov	r0, r9
   11858:	adds	r1, #1
   1185a:	bl	11ae0 <_Balloc>
   1185e:	ldr	r1, [sp, #16]
   11860:	ldr	r3, [r1, #16]
   11862:	adds	r2, r3, #2
   11864:	mov	r5, r0
   11866:	lsls	r2, r2, #2
   11868:	adds	r1, #12
   1186a:	adds	r0, #12
   1186c:	bl	81f4 <memcpy>
   11870:	ldr	r1, [sp, #16]
   11872:	mov	r0, r9
   11874:	bl	11b2c <_Bfree>
   11878:	str	r5, [sp, #16]
   1187a:	ldr	r3, [r5, #16]
   1187c:	adds	r5, #20
   1187e:	b.n	115e8 <__gethex+0x260>
   11880:	asrs	r3, r6, #5
   11882:	and.w	r6, r6, #31
   11886:	ldr.w	r2, [r5, r3, lsl #2]
   1188a:	movs	r3, #1
   1188c:	lsls	r3, r6
   1188e:	tst	r3, r2
   11890:	ite	ne
   11892:	movne	r4, #33	; 0x21
   11894:	moveq	r4, #34	; 0x22
   11896:	b.n	11680 <__gethex+0x2f8>

00011898 <__match>:
   11898:	push	{r4, r5}
   1189a:	ldr	r4, [r0, #0]
   1189c:	b.n	118b0 <__match+0x18>
   1189e:	ldrb.w	r3, [r4, #1]!
   118a2:	sub.w	r5, r3, #65	; 0x41
   118a6:	cmp	r5, #25
   118a8:	it	ls
   118aa:	addls	r3, #32
   118ac:	cmp	r3, r2
   118ae:	bne.n	118c2 <__match+0x2a>
   118b0:	ldrb.w	r2, [r1], #1
   118b4:	cmp	r2, #0
   118b6:	bne.n	1189e <__match+0x6>
   118b8:	adds	r4, #1
   118ba:	str	r4, [r0, #0]
   118bc:	movs	r0, #1
   118be:	pop	{r4, r5}
   118c0:	bx	lr
   118c2:	movs	r0, #0
   118c4:	pop	{r4, r5}
   118c6:	bx	lr

000118c8 <__hexnan>:
   118c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118cc:	ldr	r3, [r1, #0]
   118ce:	ldr.w	r9, [pc, #372]	; 11a44 <__hexnan+0x17c>
   118d2:	sub	sp, #20
   118d4:	asrs	r1, r3, #5
   118d6:	add.w	r1, r2, r1, lsl #2
   118da:	ands.w	r3, r3, #31
   118de:	str	r1, [sp, #4]
   118e0:	itt	ne
   118e2:	addne	r1, #4
   118e4:	strne	r1, [sp, #4]
   118e6:	ldr	r4, [sp, #4]
   118e8:	str	r0, [sp, #8]
   118ea:	str	r3, [sp, #12]
   118ec:	movs	r3, #0
   118ee:	mov	r1, r3
   118f0:	str.w	r3, [r4, #-4]
   118f4:	mov	sl, r3
   118f6:	mov	lr, r3
   118f8:	ldr	r3, [sp, #8]
   118fa:	sub.w	ip, r4, #4
   118fe:	ldr	r5, [r3, #0]
   11900:	mov	r8, ip
   11902:	mov	r0, ip
   11904:	ldrb.w	r3, [r5, #1]!
   11908:	cbz	r3, 11954 <__hexnan+0x8c>
   1190a:	ldrb.w	r4, [r9, r3]
   1190e:	cmp	r4, #0
   11910:	bne.n	1199a <__hexnan+0xd2>
   11912:	cmp	r3, #32
   11914:	bhi.n	119d2 <__hexnan+0x10a>
   11916:	cmp	lr, sl
   11918:	ble.n	11904 <__hexnan+0x3c>
   1191a:	cmp	r0, r8
   1191c:	bcs.n	11946 <__hexnan+0x7e>
   1191e:	cmp	r1, #7
   11920:	bgt.n	11946 <__hexnan+0x7e>
   11922:	rsb	r1, r1, #8
   11926:	lsls	r1, r1, #2
   11928:	ldr	r6, [r0, #0]
   1192a:	rsb	fp, r1, #32
   1192e:	mov	r3, r0
   11930:	ldr	r7, [r3, #4]
   11932:	lsl.w	r4, r7, fp
   11936:	orrs	r4, r6
   11938:	lsr.w	r6, r7, r1
   1193c:	str	r4, [r3, #0]
   1193e:	str.w	r6, [r3, #4]!
   11942:	cmp	r8, r3
   11944:	bhi.n	11930 <__hexnan+0x68>
   11946:	cmp	r0, r2
   11948:	bhi.n	119c0 <__hexnan+0xf8>
   1194a:	ldrb.w	r3, [r5, #1]!
   1194e:	movs	r1, #8
   11950:	cmp	r3, #0
   11952:	bne.n	1190a <__hexnan+0x42>
   11954:	cmp.w	lr, #0
   11958:	beq.n	119d6 <__hexnan+0x10e>
   1195a:	cmp	r0, r8
   1195c:	bcs.n	11962 <__hexnan+0x9a>
   1195e:	cmp	r1, #7
   11960:	ble.n	11a1c <__hexnan+0x154>
   11962:	cmp	r0, r2
   11964:	bls.n	119de <__hexnan+0x116>
   11966:	mov	r3, r2
   11968:	ldr.w	r1, [r0], #4
   1196c:	str.w	r1, [r3], #4
   11970:	cmp	ip, r0
   11972:	bcs.n	11968 <__hexnan+0xa0>
   11974:	movs	r1, #0
   11976:	str.w	r1, [r3], #4
   1197a:	cmp	ip, r3
   1197c:	bcs.n	11976 <__hexnan+0xae>
   1197e:	ldr	r3, [sp, #4]
   11980:	ldr.w	r3, [r3, #-4]
   11984:	cbnz	r3, 11992 <__hexnan+0xca>
   11986:	cmp	r2, ip
   11988:	beq.n	11a00 <__hexnan+0x138>
   1198a:	ldr.w	r3, [ip, #-4]!
   1198e:	cmp	r3, #0
   11990:	beq.n	11986 <__hexnan+0xbe>
   11992:	movs	r0, #5
   11994:	add	sp, #20
   11996:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1199a:	adds	r1, #1
   1199c:	cmp	r1, #8
   1199e:	add.w	lr, lr, #1
   119a2:	ble.n	119b2 <__hexnan+0xea>
   119a4:	cmp	r0, r2
   119a6:	bls.n	11904 <__hexnan+0x3c>
   119a8:	movs	r3, #0
   119aa:	str.w	r3, [r0, #-4]
   119ae:	movs	r1, #1
   119b0:	subs	r0, #4
   119b2:	ldr	r3, [r0, #0]
   119b4:	and.w	r4, r4, #15
   119b8:	orr.w	r4, r4, r3, lsl #4
   119bc:	str	r4, [r0, #0]
   119be:	b.n	11904 <__hexnan+0x3c>
   119c0:	movs	r3, #0
   119c2:	sub.w	r8, r0, #4
   119c6:	str.w	r3, [r0, #-4]
   119ca:	mov	sl, lr
   119cc:	mov	r0, r8
   119ce:	mov	r1, r3
   119d0:	b.n	11904 <__hexnan+0x3c>
   119d2:	cmp	r3, #41	; 0x29
   119d4:	beq.n	11a0e <__hexnan+0x146>
   119d6:	movs	r0, #4
   119d8:	add	sp, #20
   119da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119de:	ldr	r3, [sp, #12]
   119e0:	cmp	r3, #0
   119e2:	beq.n	1197e <__hexnan+0xb6>
   119e4:	ldr	r4, [sp, #4]
   119e6:	ldr	r3, [sp, #12]
   119e8:	ldr.w	r1, [r4, #-4]
   119ec:	rsb	r3, r3, #32
   119f0:	mov.w	r0, #4294967295
   119f4:	lsr.w	r3, r0, r3
   119f8:	ands	r3, r1
   119fa:	str.w	r3, [r4, #-4]
   119fe:	b.n	11984 <__hexnan+0xbc>
   11a00:	movs	r3, #1
   11a02:	movs	r0, #5
   11a04:	str.w	r3, [ip]
   11a08:	add	sp, #20
   11a0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a0e:	ldr	r3, [sp, #8]
   11a10:	adds	r5, #1
   11a12:	str	r5, [r3, #0]
   11a14:	cmp.w	lr, #0
   11a18:	bne.n	1195a <__hexnan+0x92>
   11a1a:	b.n	119d6 <__hexnan+0x10e>
   11a1c:	rsb	r3, r1, #8
   11a20:	lsls	r3, r3, #2
   11a22:	ldr	r5, [r0, #0]
   11a24:	rsb	r7, r3, #32
   11a28:	mov	r1, r0
   11a2a:	ldr	r6, [r1, #4]
   11a2c:	lsl.w	r4, r6, r7
   11a30:	orrs	r4, r5
   11a32:	lsr.w	r5, r6, r3
   11a36:	str	r4, [r1, #0]
   11a38:	str.w	r5, [r1, #4]!
   11a3c:	cmp	r8, r1
   11a3e:	bhi.n	11a2a <__hexnan+0x162>
   11a40:	b.n	11962 <__hexnan+0x9a>
   11a42:	nop
   11a44:	.word	0x00013994

00011a48 <iswspace>:
   11a48:	cmp	r0, #255	; 0xff
   11a4a:	bls.n	11a50 <iswspace+0x8>
   11a4c:	movs	r0, #0
   11a4e:	bx	lr
   11a50:	push	{r4, lr}
   11a52:	mov	r4, r0
   11a54:	bl	b968 <__locale_ctype_ptr>
   11a58:	add	r0, r4
   11a5a:	ldrb	r0, [r0, #1]
   11a5c:	and.w	r0, r0, #8
   11a60:	uxtb	r0, r0
   11a62:	pop	{r4, pc}

00011a64 <__localeconv_l>:
   11a64:	adds	r0, #240	; 0xf0
   11a66:	bx	lr

00011a68 <_localeconv_r>:
   11a68:	ldr	r2, [pc, #16]	; (11a7c <_localeconv_r+0x14>)
   11a6a:	ldr	r3, [pc, #20]	; (11a80 <_localeconv_r+0x18>)
   11a6c:	ldr	r2, [r2, #0]
   11a6e:	ldr	r0, [r2, #52]	; 0x34
   11a70:	cmp	r0, #0
   11a72:	it	eq
   11a74:	moveq	r0, r3
   11a76:	adds	r0, #240	; 0xf0
   11a78:	bx	lr
   11a7a:	nop
   11a7c:	.word	0x20017400
   11a80:	.word	0x20017404

00011a84 <_mbrtowc_r>:
   11a84:	push	{r4, r5, r6, r7, lr}
   11a86:	sub	sp, #12
   11a88:	mov	r7, r0
   11a8a:	ldr	r5, [sp, #32]
   11a8c:	cbz	r2, 11ab4 <_mbrtowc_r+0x30>
   11a8e:	ldr	r4, [pc, #68]	; (11ad4 <_mbrtowc_r+0x50>)
   11a90:	ldr	r6, [pc, #68]	; (11ad8 <_mbrtowc_r+0x54>)
   11a92:	ldr	r4, [r4, #0]
   11a94:	ldr	r4, [r4, #52]	; 0x34
   11a96:	str	r5, [sp, #0]
   11a98:	cmp	r4, #0
   11a9a:	it	eq
   11a9c:	moveq	r4, r6
   11a9e:	ldr.w	r4, [r4, #228]	; 0xe4
   11aa2:	blx	r4
   11aa4:	adds	r3, r0, #1
   11aa6:	bne.n	11ab0 <_mbrtowc_r+0x2c>
   11aa8:	movs	r2, #0
   11aaa:	movs	r3, #138	; 0x8a
   11aac:	str	r2, [r5, #0]
   11aae:	str	r3, [r7, #0]
   11ab0:	add	sp, #12
   11ab2:	pop	{r4, r5, r6, r7, pc}
   11ab4:	ldr	r3, [pc, #28]	; (11ad4 <_mbrtowc_r+0x50>)
   11ab6:	ldr	r1, [pc, #32]	; (11ad8 <_mbrtowc_r+0x54>)
   11ab8:	ldr	r3, [r3, #0]
   11aba:	ldr	r3, [r3, #52]	; 0x34
   11abc:	str	r5, [sp, #0]
   11abe:	cmp	r3, #0
   11ac0:	it	eq
   11ac2:	moveq	r3, r1
   11ac4:	mov	r4, r2
   11ac6:	mov	r1, r4
   11ac8:	ldr	r2, [pc, #16]	; (11adc <_mbrtowc_r+0x58>)
   11aca:	ldr.w	r4, [r3, #228]	; 0xe4
   11ace:	movs	r3, #1
   11ad0:	blx	r4
   11ad2:	b.n	11aa4 <_mbrtowc_r+0x20>
   11ad4:	.word	0x20017400
   11ad8:	.word	0x20017404
   11adc:	.word	0x00012fc8

00011ae0 <_Balloc>:
   11ae0:	ldr	r3, [r0, #76]	; 0x4c
   11ae2:	push	{r4, r5, r6, lr}
   11ae4:	mov	r5, r0
   11ae6:	mov	r4, r1
   11ae8:	cbz	r3, 11afe <_Balloc+0x1e>
   11aea:	ldr.w	r0, [r3, r4, lsl #2]
   11aee:	cbz	r0, 11b12 <_Balloc+0x32>
   11af0:	ldr	r2, [r0, #0]
   11af2:	str.w	r2, [r3, r4, lsl #2]
   11af6:	movs	r3, #0
   11af8:	str	r3, [r0, #16]
   11afa:	str	r3, [r0, #12]
   11afc:	pop	{r4, r5, r6, pc}
   11afe:	movs	r2, #33	; 0x21
   11b00:	movs	r1, #4
   11b02:	bl	12cc4 <_calloc_r>
   11b06:	str	r0, [r5, #76]	; 0x4c
   11b08:	mov	r3, r0
   11b0a:	cmp	r0, #0
   11b0c:	bne.n	11aea <_Balloc+0xa>
   11b0e:	movs	r0, #0
   11b10:	pop	{r4, r5, r6, pc}
   11b12:	movs	r1, #1
   11b14:	lsl.w	r6, r1, r4
   11b18:	adds	r2, r6, #5
   11b1a:	mov	r0, r5
   11b1c:	lsls	r2, r2, #2
   11b1e:	bl	12cc4 <_calloc_r>
   11b22:	cmp	r0, #0
   11b24:	beq.n	11b0e <_Balloc+0x2e>
   11b26:	str	r4, [r0, #4]
   11b28:	str	r6, [r0, #8]
   11b2a:	b.n	11af6 <_Balloc+0x16>

00011b2c <_Bfree>:
   11b2c:	cbz	r1, 11b3c <_Bfree+0x10>
   11b2e:	ldr	r3, [r0, #76]	; 0x4c
   11b30:	ldr	r2, [r1, #4]
   11b32:	ldr.w	r0, [r3, r2, lsl #2]
   11b36:	str	r0, [r1, #0]
   11b38:	str.w	r1, [r3, r2, lsl #2]
   11b3c:	bx	lr
   11b3e:	nop

00011b40 <__multadd>:
   11b40:	push	{r4, r5, r6, r7, lr}
   11b42:	ldr	r4, [r1, #16]
   11b44:	sub	sp, #12
   11b46:	mov	r5, r1
   11b48:	mov	r6, r0
   11b4a:	add.w	lr, r1, #20
   11b4e:	movs	r7, #0
   11b50:	ldr.w	r0, [lr]
   11b54:	uxth	r1, r0
   11b56:	mla	r1, r2, r1, r3
   11b5a:	lsrs	r3, r1, #16
   11b5c:	lsrs	r0, r0, #16
   11b5e:	mla	r3, r2, r0, r3
   11b62:	uxth	r1, r1
   11b64:	adds	r7, #1
   11b66:	add.w	r1, r1, r3, lsl #16
   11b6a:	cmp	r4, r7
   11b6c:	str.w	r1, [lr], #4
   11b70:	mov.w	r3, r3, lsr #16
   11b74:	bgt.n	11b50 <__multadd+0x10>
   11b76:	cbz	r3, 11b88 <__multadd+0x48>
   11b78:	ldr	r2, [r5, #8]
   11b7a:	cmp	r4, r2
   11b7c:	bge.n	11b8e <__multadd+0x4e>
   11b7e:	add.w	r2, r5, r4, lsl #2
   11b82:	adds	r4, #1
   11b84:	str	r3, [r2, #20]
   11b86:	str	r4, [r5, #16]
   11b88:	mov	r0, r5
   11b8a:	add	sp, #12
   11b8c:	pop	{r4, r5, r6, r7, pc}
   11b8e:	ldr	r1, [r5, #4]
   11b90:	str	r3, [sp, #4]
   11b92:	adds	r1, #1
   11b94:	mov	r0, r6
   11b96:	bl	11ae0 <_Balloc>
   11b9a:	ldr	r2, [r5, #16]
   11b9c:	adds	r2, #2
   11b9e:	add.w	r1, r5, #12
   11ba2:	mov	r7, r0
   11ba4:	lsls	r2, r2, #2
   11ba6:	adds	r0, #12
   11ba8:	bl	81f4 <memcpy>
   11bac:	ldr	r2, [r6, #76]	; 0x4c
   11bae:	ldr	r1, [r5, #4]
   11bb0:	ldr	r3, [sp, #4]
   11bb2:	ldr.w	r0, [r2, r1, lsl #2]
   11bb6:	str	r0, [r5, #0]
   11bb8:	str.w	r5, [r2, r1, lsl #2]
   11bbc:	mov	r5, r7
   11bbe:	b.n	11b7e <__multadd+0x3e>

00011bc0 <__s2b>:
   11bc0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11bc4:	ldr	r4, [pc, #140]	; (11c54 <__s2b+0x94>)
   11bc6:	ldr	r5, [sp, #32]
   11bc8:	mov	r7, r3
   11bca:	adds	r3, #8
   11bcc:	smull	r4, lr, r4, r3
   11bd0:	asrs	r3, r3, #31
   11bd2:	rsb	lr, r3, lr, asr #1
   11bd6:	cmp.w	lr, #1
   11bda:	mov	r6, r0
   11bdc:	mov	r4, r1
   11bde:	mov	r8, r2
   11be0:	ble.n	11c4e <__s2b+0x8e>
   11be2:	movs	r3, #1
   11be4:	movs	r1, #0
   11be6:	lsls	r3, r3, #1
   11be8:	cmp	lr, r3
   11bea:	add.w	r1, r1, #1
   11bee:	bgt.n	11be6 <__s2b+0x26>
   11bf0:	mov	r0, r6
   11bf2:	bl	11ae0 <_Balloc>
   11bf6:	movs	r3, #1
   11bf8:	cmp.w	r8, #9
   11bfc:	str	r5, [r0, #20]
   11bfe:	str	r3, [r0, #16]
   11c00:	ble.n	11c46 <__s2b+0x86>
   11c02:	add.w	r9, r4, #9
   11c06:	mov	r5, r9
   11c08:	add	r4, r8
   11c0a:	ldrb.w	r3, [r5], #1
   11c0e:	mov	r1, r0
   11c10:	subs	r3, #48	; 0x30
   11c12:	movs	r2, #10
   11c14:	mov	r0, r6
   11c16:	bl	11b40 <__multadd>
   11c1a:	cmp	r5, r4
   11c1c:	bne.n	11c0a <__s2b+0x4a>
   11c1e:	add.w	r4, r9, r8
   11c22:	subs	r4, #8
   11c24:	cmp	r7, r8
   11c26:	ble.n	11c42 <__s2b+0x82>
   11c28:	rsb	r7, r8, r7
   11c2c:	add	r7, r4
   11c2e:	ldrb.w	r3, [r4], #1
   11c32:	mov	r1, r0
   11c34:	subs	r3, #48	; 0x30
   11c36:	movs	r2, #10
   11c38:	mov	r0, r6
   11c3a:	bl	11b40 <__multadd>
   11c3e:	cmp	r7, r4
   11c40:	bne.n	11c2e <__s2b+0x6e>
   11c42:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11c46:	adds	r4, #10
   11c48:	mov.w	r8, #9
   11c4c:	b.n	11c24 <__s2b+0x64>
   11c4e:	movs	r1, #0
   11c50:	b.n	11bf0 <__s2b+0x30>
   11c52:	nop
   11c54:	.word	0x38e38e39

00011c58 <__hi0bits>:
   11c58:	lsrs	r3, r0, #16
   11c5a:	lsls	r3, r3, #16
   11c5c:	cbnz	r3, 11c8c <__hi0bits+0x34>
   11c5e:	lsls	r0, r0, #16
   11c60:	movs	r3, #16
   11c62:	tst.w	r0, #4278190080	; 0xff000000
   11c66:	itt	eq
   11c68:	lsleq	r0, r0, #8
   11c6a:	addeq	r3, #8
   11c6c:	tst.w	r0, #4026531840	; 0xf0000000
   11c70:	itt	eq
   11c72:	lsleq	r0, r0, #4
   11c74:	addeq	r3, #4
   11c76:	tst.w	r0, #3221225472	; 0xc0000000
   11c7a:	itt	eq
   11c7c:	lsleq	r0, r0, #2
   11c7e:	addeq	r3, #2
   11c80:	cmp	r0, #0
   11c82:	blt.n	11c94 <__hi0bits+0x3c>
   11c84:	lsls	r2, r0, #1
   11c86:	bmi.n	11c90 <__hi0bits+0x38>
   11c88:	movs	r0, #32
   11c8a:	bx	lr
   11c8c:	movs	r3, #0
   11c8e:	b.n	11c62 <__hi0bits+0xa>
   11c90:	adds	r0, r3, #1
   11c92:	bx	lr
   11c94:	mov	r0, r3
   11c96:	bx	lr

00011c98 <__lo0bits>:
   11c98:	ldr	r3, [r0, #0]
   11c9a:	ands.w	r2, r3, #7
   11c9e:	beq.n	11cb0 <__lo0bits+0x18>
   11ca0:	lsls	r1, r3, #31
   11ca2:	bmi.n	11ce6 <__lo0bits+0x4e>
   11ca4:	lsls	r2, r3, #30
   11ca6:	bmi.n	11cea <__lo0bits+0x52>
   11ca8:	lsrs	r3, r3, #2
   11caa:	str	r3, [r0, #0]
   11cac:	movs	r0, #2
   11cae:	bx	lr
   11cb0:	uxth	r1, r3
   11cb2:	cbnz	r1, 11cb8 <__lo0bits+0x20>
   11cb4:	lsrs	r3, r3, #16
   11cb6:	movs	r2, #16
   11cb8:	tst.w	r3, #255	; 0xff
   11cbc:	itt	eq
   11cbe:	lsreq	r3, r3, #8
   11cc0:	addeq	r2, #8
   11cc2:	lsls	r1, r3, #28
   11cc4:	itt	eq
   11cc6:	lsreq	r3, r3, #4
   11cc8:	addeq	r2, #4
   11cca:	lsls	r1, r3, #30
   11ccc:	itt	eq
   11cce:	lsreq	r3, r3, #2
   11cd0:	addeq	r2, #2
   11cd2:	lsls	r1, r3, #31
   11cd4:	bmi.n	11ce0 <__lo0bits+0x48>
   11cd6:	lsrs	r3, r3, #1
   11cd8:	bne.n	11cde <__lo0bits+0x46>
   11cda:	movs	r0, #32
   11cdc:	bx	lr
   11cde:	adds	r2, #1
   11ce0:	str	r3, [r0, #0]
   11ce2:	mov	r0, r2
   11ce4:	bx	lr
   11ce6:	movs	r0, #0
   11ce8:	bx	lr
   11cea:	lsrs	r3, r3, #1
   11cec:	str	r3, [r0, #0]
   11cee:	movs	r0, #1
   11cf0:	bx	lr
   11cf2:	nop

00011cf4 <__i2b>:
   11cf4:	push	{r4, lr}
   11cf6:	mov	r4, r1
   11cf8:	movs	r1, #1
   11cfa:	bl	11ae0 <_Balloc>
   11cfe:	movs	r2, #1
   11d00:	str	r4, [r0, #20]
   11d02:	str	r2, [r0, #16]
   11d04:	pop	{r4, pc}
   11d06:	nop

00011d08 <__multiply>:
   11d08:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d0c:	ldr	r5, [r1, #16]
   11d0e:	ldr	r7, [r2, #16]
   11d10:	cmp	r5, r7
   11d12:	sub	sp, #12
   11d14:	mov	r4, r1
   11d16:	mov	r6, r2
   11d18:	bge.n	11d24 <__multiply+0x1c>
   11d1a:	mov	r2, r5
   11d1c:	mov	r4, r6
   11d1e:	mov	r5, r7
   11d20:	mov	r6, r1
   11d22:	mov	r7, r2
   11d24:	ldr	r3, [r4, #8]
   11d26:	ldr	r1, [r4, #4]
   11d28:	add.w	r8, r5, r7
   11d2c:	cmp	r8, r3
   11d2e:	it	gt
   11d30:	addgt	r1, #1
   11d32:	bl	11ae0 <_Balloc>
   11d36:	add.w	ip, r0, #20
   11d3a:	add.w	r9, ip, r8, lsl #2
   11d3e:	cmp	ip, r9
   11d40:	str	r0, [sp, #0]
   11d42:	bcs.n	11d50 <__multiply+0x48>
   11d44:	mov	r3, ip
   11d46:	movs	r1, #0
   11d48:	str.w	r1, [r3], #4
   11d4c:	cmp	r9, r3
   11d4e:	bhi.n	11d48 <__multiply+0x40>
   11d50:	add.w	r2, r6, #20
   11d54:	add.w	sl, r2, r7, lsl #2
   11d58:	add.w	r3, r4, #20
   11d5c:	cmp	r2, sl
   11d5e:	add.w	lr, r3, r5, lsl #2
   11d62:	bcs.n	11e0e <__multiply+0x106>
   11d64:	str.w	r9, [sp, #4]
   11d68:	mov	r9, r3
   11d6a:	ldr.w	r3, [r2], #4
   11d6e:	uxth.w	fp, r3
   11d72:	cmp.w	fp, #0
   11d76:	beq.n	11dba <__multiply+0xb2>
   11d78:	movs	r0, #0
   11d7a:	mov	r7, r9
   11d7c:	mov	r6, ip
   11d7e:	mov	r5, r0
   11d80:	b.n	11d84 <__multiply+0x7c>
   11d82:	mov	r6, r3
   11d84:	ldr.w	r4, [r7], #4
   11d88:	ldr	r0, [r6, #0]
   11d8a:	uxth	r1, r4
   11d8c:	uxth	r3, r0
   11d8e:	mla	r1, fp, r1, r3
   11d92:	lsrs	r4, r4, #16
   11d94:	lsrs	r0, r0, #16
   11d96:	adds	r3, r1, r5
   11d98:	mla	r0, fp, r4, r0
   11d9c:	add.w	r0, r0, r3, lsr #16
   11da0:	uxth	r1, r3
   11da2:	mov	r3, r6
   11da4:	orr.w	r1, r1, r0, lsl #16
   11da8:	cmp	lr, r7
   11daa:	mov.w	r5, r0, lsr #16
   11dae:	str.w	r1, [r3], #4
   11db2:	bhi.n	11d82 <__multiply+0x7a>
   11db4:	str	r5, [r6, #4]
   11db6:	ldr.w	r3, [r2, #-4]
   11dba:	movs.w	fp, r3, lsr #16
   11dbe:	beq.n	11e02 <__multiply+0xfa>
   11dc0:	ldr.w	r3, [ip]
   11dc4:	mov	r7, ip
   11dc6:	mov	r0, r3
   11dc8:	mov	r5, r9
   11dca:	movs	r1, #0
   11dcc:	b.n	11dd0 <__multiply+0xc8>
   11dce:	mov	r7, r6
   11dd0:	ldrh	r4, [r5, #0]
   11dd2:	lsrs	r0, r0, #16
   11dd4:	mla	r0, fp, r4, r0
   11dd8:	add	r1, r0
   11dda:	uxth	r4, r3
   11ddc:	mov	r6, r7
   11dde:	orr.w	r3, r4, r1, lsl #16
   11de2:	str.w	r3, [r6], #4
   11de6:	ldr	r0, [r7, #4]
   11de8:	ldr.w	r4, [r5], #4
   11dec:	uxth	r3, r0
   11dee:	lsrs	r4, r4, #16
   11df0:	mla	r4, fp, r4, r3
   11df4:	add.w	r3, r4, r1, lsr #16
   11df8:	cmp	lr, r5
   11dfa:	mov.w	r1, r3, lsr #16
   11dfe:	bhi.n	11dce <__multiply+0xc6>
   11e00:	str	r3, [r7, #4]
   11e02:	cmp	sl, r2
   11e04:	add.w	ip, ip, #4
   11e08:	bhi.n	11d6a <__multiply+0x62>
   11e0a:	ldr.w	r9, [sp, #4]
   11e0e:	cmp.w	r8, #0
   11e12:	ble.n	11e2c <__multiply+0x124>
   11e14:	ldr.w	r3, [r9, #-4]
   11e18:	sub.w	r9, r9, #4
   11e1c:	cbz	r3, 11e26 <__multiply+0x11e>
   11e1e:	b.n	11e2c <__multiply+0x124>
   11e20:	ldr.w	r3, [r9, #-4]!
   11e24:	cbnz	r3, 11e2c <__multiply+0x124>
   11e26:	subs.w	r8, r8, #1
   11e2a:	bne.n	11e20 <__multiply+0x118>
   11e2c:	ldr	r0, [sp, #0]
   11e2e:	str.w	r8, [r0, #16]
   11e32:	add	sp, #12
   11e34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011e38 <__pow5mult>:
   11e38:	ands.w	r3, r2, #3
   11e3c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e40:	mov	r4, r2
   11e42:	mov	r7, r0
   11e44:	bne.n	11ea4 <__pow5mult+0x6c>
   11e46:	mov	r6, r1
   11e48:	asrs	r4, r4, #2
   11e4a:	beq.n	11e86 <__pow5mult+0x4e>
   11e4c:	ldr	r5, [r7, #72]	; 0x48
   11e4e:	cbz	r5, 11eb6 <__pow5mult+0x7e>
   11e50:	lsls	r3, r4, #31
   11e52:	mov.w	r8, #0
   11e56:	bmi.n	11e66 <__pow5mult+0x2e>
   11e58:	asrs	r4, r4, #1
   11e5a:	beq.n	11e86 <__pow5mult+0x4e>
   11e5c:	ldr	r0, [r5, #0]
   11e5e:	cbz	r0, 11e8c <__pow5mult+0x54>
   11e60:	mov	r5, r0
   11e62:	lsls	r3, r4, #31
   11e64:	bpl.n	11e58 <__pow5mult+0x20>
   11e66:	mov	r2, r5
   11e68:	mov	r1, r6
   11e6a:	mov	r0, r7
   11e6c:	bl	11d08 <__multiply>
   11e70:	cbz	r6, 11ea0 <__pow5mult+0x68>
   11e72:	ldr	r2, [r6, #4]
   11e74:	ldr	r3, [r7, #76]	; 0x4c
   11e76:	asrs	r4, r4, #1
   11e78:	ldr.w	r1, [r3, r2, lsl #2]
   11e7c:	str	r1, [r6, #0]
   11e7e:	str.w	r6, [r3, r2, lsl #2]
   11e82:	mov	r6, r0
   11e84:	bne.n	11e5c <__pow5mult+0x24>
   11e86:	mov	r0, r6
   11e88:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11e8c:	mov	r2, r5
   11e8e:	mov	r1, r5
   11e90:	mov	r0, r7
   11e92:	bl	11d08 <__multiply>
   11e96:	str	r0, [r5, #0]
   11e98:	str.w	r8, [r0]
   11e9c:	mov	r5, r0
   11e9e:	b.n	11e62 <__pow5mult+0x2a>
   11ea0:	mov	r6, r0
   11ea2:	b.n	11e58 <__pow5mult+0x20>
   11ea4:	subs	r2, r3, #1
   11ea6:	ldr	r5, [pc, #44]	; (11ed4 <__pow5mult+0x9c>)
   11ea8:	movs	r3, #0
   11eaa:	ldr.w	r2, [r5, r2, lsl #2]
   11eae:	bl	11b40 <__multadd>
   11eb2:	mov	r6, r0
   11eb4:	b.n	11e48 <__pow5mult+0x10>
   11eb6:	movs	r1, #1
   11eb8:	mov	r0, r7
   11eba:	bl	11ae0 <_Balloc>
   11ebe:	movw	r1, #625	; 0x271
   11ec2:	movs	r2, #1
   11ec4:	movs	r3, #0
   11ec6:	str	r1, [r0, #20]
   11ec8:	str	r2, [r0, #16]
   11eca:	mov	r5, r0
   11ecc:	str	r0, [r7, #72]	; 0x48
   11ece:	str	r3, [r0, #0]
   11ed0:	b.n	11e50 <__pow5mult+0x18>
   11ed2:	nop
   11ed4:	.word	0x00013b88

00011ed8 <__lshift>:
   11ed8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11edc:	mov	r9, r2
   11ede:	ldr	r2, [r1, #16]
   11ee0:	ldr	r3, [r1, #8]
   11ee2:	mov.w	r4, r9, asr #5
   11ee6:	add.w	r8, r4, r2
   11eea:	add.w	r5, r8, #1
   11eee:	cmp	r5, r3
   11ef0:	mov	r6, r1
   11ef2:	mov	sl, r0
   11ef4:	ldr	r1, [r1, #4]
   11ef6:	ble.n	11f02 <__lshift+0x2a>
   11ef8:	lsls	r3, r3, #1
   11efa:	cmp	r5, r3
   11efc:	add.w	r1, r1, #1
   11f00:	bgt.n	11ef8 <__lshift+0x20>
   11f02:	mov	r0, sl
   11f04:	bl	11ae0 <_Balloc>
   11f08:	cmp	r4, #0
   11f0a:	add.w	r2, r0, #20
   11f0e:	ble.n	11f82 <__lshift+0xaa>
   11f10:	add.w	r3, r2, r4, lsl #2
   11f14:	movs	r1, #0
   11f16:	str.w	r1, [r2], #4
   11f1a:	cmp	r3, r2
   11f1c:	bne.n	11f16 <__lshift+0x3e>
   11f1e:	ldr	r4, [r6, #16]
   11f20:	add.w	r1, r6, #20
   11f24:	ands.w	r9, r9, #31
   11f28:	add.w	lr, r1, r4, lsl #2
   11f2c:	beq.n	11f72 <__lshift+0x9a>
   11f2e:	rsb	r2, r9, #32
   11f32:	movs	r4, #0
   11f34:	ldr	r7, [r1, #0]
   11f36:	lsl.w	ip, r7, r9
   11f3a:	orr.w	r4, ip, r4
   11f3e:	mov	ip, r3
   11f40:	str.w	r4, [r3], #4
   11f44:	ldr.w	r4, [r1], #4
   11f48:	cmp	lr, r1
   11f4a:	lsr.w	r4, r4, r2
   11f4e:	bhi.n	11f34 <__lshift+0x5c>
   11f50:	str.w	r4, [ip, #4]
   11f54:	cbz	r4, 11f5a <__lshift+0x82>
   11f56:	add.w	r5, r8, #2
   11f5a:	ldr.w	r3, [sl, #76]	; 0x4c
   11f5e:	ldr	r2, [r6, #4]
   11f60:	subs	r5, #1
   11f62:	ldr.w	r1, [r3, r2, lsl #2]
   11f66:	str	r5, [r0, #16]
   11f68:	str	r1, [r6, #0]
   11f6a:	str.w	r6, [r3, r2, lsl #2]
   11f6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11f72:	subs	r3, #4
   11f74:	ldr.w	r2, [r1], #4
   11f78:	str.w	r2, [r3, #4]!
   11f7c:	cmp	lr, r1
   11f7e:	bhi.n	11f74 <__lshift+0x9c>
   11f80:	b.n	11f5a <__lshift+0x82>
   11f82:	mov	r3, r2
   11f84:	b.n	11f1e <__lshift+0x46>
   11f86:	nop

00011f88 <__mcmp>:
   11f88:	ldr	r2, [r0, #16]
   11f8a:	ldr	r3, [r1, #16]
   11f8c:	subs	r2, r2, r3
   11f8e:	bne.n	11fb8 <__mcmp+0x30>
   11f90:	lsls	r3, r3, #2
   11f92:	adds	r0, #20
   11f94:	adds	r1, #20
   11f96:	add	r1, r3
   11f98:	push	{r4}
   11f9a:	add	r3, r0
   11f9c:	b.n	11fa2 <__mcmp+0x1a>
   11f9e:	cmp	r0, r3
   11fa0:	bcs.n	11fbc <__mcmp+0x34>
   11fa2:	ldr.w	r4, [r3, #-4]!
   11fa6:	ldr.w	r2, [r1, #-4]!
   11faa:	cmp	r4, r2
   11fac:	beq.n	11f9e <__mcmp+0x16>
   11fae:	bcc.n	11fc4 <__mcmp+0x3c>
   11fb0:	movs	r0, #1
   11fb2:	ldr.w	r4, [sp], #4
   11fb6:	bx	lr
   11fb8:	mov	r0, r2
   11fba:	bx	lr
   11fbc:	movs	r0, #0
   11fbe:	ldr.w	r4, [sp], #4
   11fc2:	bx	lr
   11fc4:	mov.w	r0, #4294967295
   11fc8:	b.n	11fb2 <__mcmp+0x2a>
   11fca:	nop

00011fcc <__mdiff>:
   11fcc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11fd0:	ldr	r3, [r1, #16]
   11fd2:	mov	r7, r1
   11fd4:	ldr	r1, [r2, #16]
   11fd6:	subs	r3, r3, r1
   11fd8:	cmp	r3, #0
   11fda:	mov	r8, r2
   11fdc:	bne.n	1200e <__mdiff+0x42>
   11fde:	lsls	r1, r1, #2
   11fe0:	add.w	r2, r7, #20
   11fe4:	add.w	r5, r8, #20
   11fe8:	adds	r3, r2, r1
   11fea:	add	r1, r5
   11fec:	b.n	11ff2 <__mdiff+0x26>
   11fee:	cmp	r2, r3
   11ff0:	bcs.n	120b0 <__mdiff+0xe4>
   11ff2:	ldr.w	r6, [r3, #-4]!
   11ff6:	ldr.w	r4, [r1, #-4]!
   11ffa:	cmp	r6, r4
   11ffc:	beq.n	11fee <__mdiff+0x22>
   11ffe:	bcs.n	120c2 <__mdiff+0xf6>
   12000:	mov	r3, r7
   12002:	mov	r4, r2
   12004:	mov	r7, r8
   12006:	mov.w	r9, #1
   1200a:	mov	r8, r3
   1200c:	b.n	1201c <__mdiff+0x50>
   1200e:	blt.n	120cc <__mdiff+0x100>
   12010:	add.w	r5, r7, #20
   12014:	add.w	r4, r2, #20
   12018:	mov.w	r9, #0
   1201c:	ldr	r1, [r7, #4]
   1201e:	bl	11ae0 <_Balloc>
   12022:	ldr.w	r3, [r8, #16]
   12026:	ldr	r6, [r7, #16]
   12028:	str.w	r9, [r0, #12]
   1202c:	add.w	ip, r4, r3, lsl #2
   12030:	mov	lr, r4
   12032:	add.w	r7, r5, r6, lsl #2
   12036:	add.w	r4, r0, #20
   1203a:	movs	r3, #0
   1203c:	ldr.w	r1, [lr], #4
   12040:	ldr.w	r8, [r5], #4
   12044:	uxth	r2, r1
   12046:	uxtah	r3, r3, r8
   1204a:	lsrs	r1, r1, #16
   1204c:	subs	r2, r3, r2
   1204e:	rsb	r3, r1, r8, lsr #16
   12052:	add.w	r3, r3, r2, asr #16
   12056:	uxth	r2, r2
   12058:	orr.w	r2, r2, r3, lsl #16
   1205c:	cmp	ip, lr
   1205e:	str.w	r2, [r4], #4
   12062:	mov.w	r3, r3, asr #16
   12066:	bhi.n	1203c <__mdiff+0x70>
   12068:	cmp	r7, r5
   1206a:	bls.n	1209c <__mdiff+0xd0>
   1206c:	mov	ip, r4
   1206e:	mov	r1, r5
   12070:	ldr.w	lr, [r1], #4
   12074:	uxtah	r2, r3, lr
   12078:	asrs	r3, r2, #16
   1207a:	add.w	r3, r3, lr, lsr #16
   1207e:	uxth	r2, r2
   12080:	orr.w	r2, r2, r3, lsl #16
   12084:	cmp	r7, r1
   12086:	str.w	r2, [ip], #4
   1208a:	mov.w	r3, r3, asr #16
   1208e:	bhi.n	12070 <__mdiff+0xa4>
   12090:	mvns	r5, r5
   12092:	add	r5, r7
   12094:	bic.w	r5, r5, #3
   12098:	adds	r5, #4
   1209a:	add	r4, r5
   1209c:	subs	r4, #4
   1209e:	cbnz	r2, 120aa <__mdiff+0xde>
   120a0:	ldr.w	r3, [r4, #-4]!
   120a4:	subs	r6, #1
   120a6:	cmp	r3, #0
   120a8:	beq.n	120a0 <__mdiff+0xd4>
   120aa:	str	r6, [r0, #16]
   120ac:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   120b0:	movs	r1, #0
   120b2:	bl	11ae0 <_Balloc>
   120b6:	movs	r2, #1
   120b8:	movs	r3, #0
   120ba:	str	r2, [r0, #16]
   120bc:	str	r3, [r0, #20]
   120be:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   120c2:	mov	r4, r5
   120c4:	mov.w	r9, #0
   120c8:	mov	r5, r2
   120ca:	b.n	1201c <__mdiff+0x50>
   120cc:	mov	r3, r7
   120ce:	add.w	r4, r7, #20
   120d2:	add.w	r5, r8, #20
   120d6:	mov	r7, r8
   120d8:	mov.w	r9, #1
   120dc:	mov	r8, r3
   120de:	b.n	1201c <__mdiff+0x50>

000120e0 <__ulp>:
   120e0:	ldr	r3, [pc, #76]	; (12130 <__ulp+0x50>)
   120e2:	vmov	r2, s1
   120e6:	ands	r2, r3
   120e8:	sub.w	r3, r2, #54525952	; 0x3400000
   120ec:	cmp	r3, #0
   120ee:	ble.n	120fa <__ulp+0x1a>
   120f0:	movs	r0, #0
   120f2:	mov	r1, r3
   120f4:	vmov	d0, r0, r1
   120f8:	bx	lr
   120fa:	negs	r3, r3
   120fc:	asrs	r3, r3, #20
   120fe:	cmp	r3, #19
   12100:	ble.n	1211e <__ulp+0x3e>
   12102:	subs	r3, #20
   12104:	cmp	r3, #30
   12106:	ittte	le
   12108:	rsble	r3, r3, #31
   1210c:	movle	r2, #1
   1210e:	lslle.w	r3, r2, r3
   12112:	movgt	r3, #1
   12114:	movs	r1, #0
   12116:	mov	r0, r3
   12118:	vmov	d0, r0, r1
   1211c:	bx	lr
   1211e:	mov.w	r2, #524288	; 0x80000
   12122:	movs	r0, #0
   12124:	asr.w	r1, r2, r3
   12128:	vmov	d0, r0, r1
   1212c:	bx	lr
   1212e:	nop
   12130:	.word	0x7ff00000

00012134 <__b2d>:
   12134:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12138:	ldr	r6, [r0, #16]
   1213a:	add.w	r8, r0, #20
   1213e:	add.w	r6, r8, r6, lsl #2
   12142:	ldr.w	r7, [r6, #-4]
   12146:	mov	r0, r7
   12148:	bl	11c58 <__hi0bits>
   1214c:	rsb	r3, r0, #32
   12150:	cmp	r0, #10
   12152:	str	r3, [r1, #0]
   12154:	sub.w	r3, r6, #4
   12158:	bgt.n	1218c <__b2d+0x58>
   1215a:	cmp	r8, r3
   1215c:	rsb	r2, r0, #11
   12160:	it	cc
   12162:	ldrcc.w	r3, [r6, #-8]
   12166:	lsr.w	r1, r7, r2
   1216a:	add.w	r0, r0, #21
   1216e:	orr.w	r5, r1, #1069547520	; 0x3fc00000
   12172:	ite	cc
   12174:	lsrcc	r3, r2
   12176:	movcs	r3, #0
   12178:	lsl.w	r0, r7, r0
   1217c:	orr.w	r5, r5, #3145728	; 0x300000
   12180:	orr.w	r4, r0, r3
   12184:	vmov	d0, r4, r5
   12188:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1218c:	cmp	r8, r3
   1218e:	bcs.n	121d2 <__b2d+0x9e>
   12190:	subs.w	r3, r0, #11
   12194:	ldr.w	r2, [r6, #-8]
   12198:	beq.n	121d8 <__b2d+0xa4>
   1219a:	lsl.w	r0, r7, r3
   1219e:	orr.w	r7, r0, #1069547520	; 0x3fc00000
   121a2:	rsb	lr, r3, #32
   121a6:	sub.w	r1, r6, #8
   121aa:	orr.w	r7, r7, #3145728	; 0x300000
   121ae:	lsr.w	r0, r2, lr
   121b2:	cmp	r8, r1
   121b4:	orr.w	r5, r7, r0
   121b8:	bcs.n	121fc <__b2d+0xc8>
   121ba:	ldr.w	r1, [r6, #-12]
   121be:	lsl.w	r0, r2, r3
   121c2:	lsr.w	r3, r1, lr
   121c6:	orrs	r0, r3
   121c8:	mov	r4, r0
   121ca:	vmov	d0, r4, r5
   121ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   121d2:	subs	r0, #11
   121d4:	bne.n	121ea <__b2d+0xb6>
   121d6:	mov	r2, r0
   121d8:	orr.w	r5, r7, #1069547520	; 0x3fc00000
   121dc:	orr.w	r5, r5, #3145728	; 0x300000
   121e0:	mov	r4, r2
   121e2:	vmov	d0, r4, r5
   121e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   121ea:	lsl.w	r0, r7, r0
   121ee:	orr.w	r5, r0, #1069547520	; 0x3fc00000
   121f2:	movs	r0, #0
   121f4:	orr.w	r5, r5, #3145728	; 0x300000
   121f8:	mov	r4, r0
   121fa:	b.n	121ca <__b2d+0x96>
   121fc:	lsl.w	r0, r2, r3
   12200:	mov	r4, r0
   12202:	b.n	121ca <__b2d+0x96>

00012204 <__d2b>:
   12204:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12208:	vmov	r6, r7, d0
   1220c:	sub	sp, #12
   1220e:	mov	r8, r1
   12210:	movs	r1, #1
   12212:	mov	r4, r7
   12214:	ubfx	r5, r7, #20, #11
   12218:	mov	r7, r2
   1221a:	bl	11ae0 <_Balloc>
   1221e:	ubfx	r4, r4, #0, #20
   12222:	mov	r9, r0
   12224:	cbz	r5, 1222a <__d2b+0x26>
   12226:	orr.w	r4, r4, #1048576	; 0x100000
   1222a:	str	r4, [sp, #4]
   1222c:	cbz	r6, 12276 <__d2b+0x72>
   1222e:	add	r0, sp, #8
   12230:	str.w	r6, [r0, #-8]!
   12234:	bl	11c98 <__lo0bits>
   12238:	cmp	r0, #0
   1223a:	bne.n	122a6 <__d2b+0xa2>
   1223c:	ldmia.w	sp, {r2, r3}
   12240:	str.w	r2, [r9, #20]
   12244:	cmp	r3, #0
   12246:	ite	eq
   12248:	moveq	r1, #1
   1224a:	movne	r1, #2
   1224c:	str.w	r3, [r9, #24]
   12250:	str.w	r1, [r9, #16]
   12254:	cbnz	r5, 1228e <__d2b+0x8a>
   12256:	add.w	r3, r9, r1, lsl #2
   1225a:	subw	r0, r0, #1074	; 0x432
   1225e:	str.w	r0, [r8]
   12262:	ldr	r0, [r3, #16]
   12264:	bl	11c58 <__hi0bits>
   12268:	rsb	r0, r0, r1, lsl #5
   1226c:	str	r0, [r7, #0]
   1226e:	mov	r0, r9
   12270:	add	sp, #12
   12272:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12276:	add	r0, sp, #4
   12278:	bl	11c98 <__lo0bits>
   1227c:	ldr	r3, [sp, #4]
   1227e:	str.w	r3, [r9, #20]
   12282:	movs	r1, #1
   12284:	adds	r0, #32
   12286:	str.w	r1, [r9, #16]
   1228a:	cmp	r5, #0
   1228c:	beq.n	12256 <__d2b+0x52>
   1228e:	subw	r5, r5, #1075	; 0x433
   12292:	add	r5, r0
   12294:	rsb	r0, r0, #53	; 0x35
   12298:	str.w	r5, [r8]
   1229c:	str	r0, [r7, #0]
   1229e:	mov	r0, r9
   122a0:	add	sp, #12
   122a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   122a6:	ldmia.w	sp, {r2, r3}
   122aa:	rsb	r1, r0, #32
   122ae:	lsl.w	r1, r3, r1
   122b2:	orrs	r2, r1
   122b4:	lsrs	r3, r0
   122b6:	str	r3, [sp, #4]
   122b8:	str.w	r2, [r9, #20]
   122bc:	b.n	12244 <__d2b+0x40>
   122be:	nop

000122c0 <__ratio>:
   122c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   122c4:	sub	sp, #12
   122c6:	mov	r8, r1
   122c8:	mov	r1, sp
   122ca:	mov	r9, r0
   122cc:	bl	12134 <__b2d>
   122d0:	mov	r0, r8
   122d2:	add	r1, sp, #4
   122d4:	vmov	r4, r5, d0
   122d8:	bl	12134 <__b2d>
   122dc:	ldmia.w	sp, {r1, r3}
   122e0:	ldr.w	r2, [r9, #16]
   122e4:	ldr.w	r0, [r8, #16]
   122e8:	subs	r1, r1, r3
   122ea:	subs	r0, r2, r0
   122ec:	add.w	r3, r1, r0, lsl #5
   122f0:	cmp	r3, #0
   122f2:	vmov	r6, r7, d0
   122f6:	ble.n	12314 <__ratio+0x54>
   122f8:	add.w	r1, r5, r3, lsl #20
   122fc:	mov	r5, r1
   122fe:	mov	r2, r6
   12300:	mov	r3, r7
   12302:	mov	r0, r4
   12304:	mov	r1, r5
   12306:	bl	aee4 <__aeabi_ddiv>
   1230a:	vmov	d0, r0, r1
   1230e:	add	sp, #12
   12310:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12314:	sub.w	r9, r7, r3, lsl #20
   12318:	vmov	r6, s0
   1231c:	mov	r7, r9
   1231e:	b.n	122fe <__ratio+0x3e>

00012320 <__copybits>:
   12320:	push	{r4, r5, r6}
   12322:	ldr	r4, [r2, #16]
   12324:	add.w	r3, r2, #20
   12328:	subs	r1, #1
   1232a:	asrs	r6, r1, #5
   1232c:	add.w	r4, r3, r4, lsl #2
   12330:	adds	r6, #1
   12332:	cmp	r3, r4
   12334:	add.w	r6, r0, r6, lsl #2
   12338:	bcs.n	12354 <__copybits+0x34>
   1233a:	subs	r1, r0, #4
   1233c:	ldr.w	r5, [r3], #4
   12340:	str.w	r5, [r1, #4]!
   12344:	cmp	r4, r3
   12346:	bhi.n	1233c <__copybits+0x1c>
   12348:	subs	r3, r4, r2
   1234a:	subs	r3, #21
   1234c:	bic.w	r3, r3, #3
   12350:	adds	r3, #4
   12352:	add	r0, r3
   12354:	cmp	r6, r0
   12356:	bls.n	12362 <__copybits+0x42>
   12358:	movs	r3, #0
   1235a:	str.w	r3, [r0], #4
   1235e:	cmp	r6, r0
   12360:	bhi.n	1235a <__copybits+0x3a>
   12362:	pop	{r4, r5, r6}
   12364:	bx	lr
   12366:	nop

00012368 <__any_on>:
   12368:	ldr	r3, [r0, #16]
   1236a:	asrs	r2, r1, #5
   1236c:	cmp	r3, r2
   1236e:	push	{r4}
   12370:	add.w	r4, r0, #20
   12374:	bge.n	12398 <__any_on+0x30>
   12376:	add.w	r3, r4, r3, lsl #2
   1237a:	cmp	r4, r3
   1237c:	bcs.n	123c2 <__any_on+0x5a>
   1237e:	ldr.w	r0, [r3, #-4]
   12382:	subs	r3, #4
   12384:	cbz	r0, 1238e <__any_on+0x26>
   12386:	b.n	123b4 <__any_on+0x4c>
   12388:	ldr.w	r2, [r3, #-4]!
   1238c:	cbnz	r2, 123b4 <__any_on+0x4c>
   1238e:	cmp	r4, r3
   12390:	bcc.n	12388 <__any_on+0x20>
   12392:	ldr.w	r4, [sp], #4
   12396:	bx	lr
   12398:	ble.n	123bc <__any_on+0x54>
   1239a:	ands.w	r1, r1, #31
   1239e:	beq.n	123bc <__any_on+0x54>
   123a0:	ldr.w	r0, [r4, r2, lsl #2]
   123a4:	lsr.w	r3, r0, r1
   123a8:	lsl.w	r1, r3, r1
   123ac:	cmp	r0, r1
   123ae:	add.w	r3, r4, r2, lsl #2
   123b2:	beq.n	1237a <__any_on+0x12>
   123b4:	movs	r0, #1
   123b6:	ldr.w	r4, [sp], #4
   123ba:	bx	lr
   123bc:	add.w	r3, r4, r2, lsl #2
   123c0:	b.n	1237a <__any_on+0x12>
   123c2:	movs	r0, #0
   123c4:	b.n	12392 <__any_on+0x2a>
   123c6:	nop

000123c8 <__sccl>:
   123c8:	push	{r4, r5, r6}
   123ca:	ldrb	r5, [r1, #0]
   123cc:	cmp	r5, #94	; 0x5e
   123ce:	beq.n	12430 <__sccl+0x68>
   123d0:	movs	r2, #0
   123d2:	adds	r1, #1
   123d4:	mov	r6, r2
   123d6:	subs	r3, r0, #1
   123d8:	add.w	r4, r0, #255	; 0xff
   123dc:	strb.w	r2, [r3, #1]!
   123e0:	cmp	r3, r4
   123e2:	bne.n	123dc <__sccl+0x14>
   123e4:	cbz	r5, 12408 <__sccl+0x40>
   123e6:	eor.w	r2, r6, #1
   123ea:	strb	r2, [r0, r5]
   123ec:	adds	r4, r1, #1
   123ee:	ldrb.w	r3, [r4, #-1]
   123f2:	cmp	r3, #45	; 0x2d
   123f4:	beq.n	12414 <__sccl+0x4c>
   123f6:	cmp	r3, #93	; 0x5d
   123f8:	beq.n	1240e <__sccl+0x46>
   123fa:	cbz	r3, 12402 <__sccl+0x3a>
   123fc:	mov	r5, r3
   123fe:	mov	r1, r4
   12400:	b.n	123ea <__sccl+0x22>
   12402:	mov	r0, r1
   12404:	pop	{r4, r5, r6}
   12406:	bx	lr
   12408:	subs	r0, r1, #1
   1240a:	pop	{r4, r5, r6}
   1240c:	bx	lr
   1240e:	mov	r0, r4
   12410:	pop	{r4, r5, r6}
   12412:	bx	lr
   12414:	ldrb	r6, [r1, #1]
   12416:	cmp	r6, #93	; 0x5d
   12418:	beq.n	123fc <__sccl+0x34>
   1241a:	cmp	r5, r6
   1241c:	bgt.n	123fc <__sccl+0x34>
   1241e:	adds	r1, #2
   12420:	adds	r3, r0, r5
   12422:	adds	r5, #1
   12424:	cmp	r6, r5
   12426:	strb.w	r2, [r3, #1]!
   1242a:	bgt.n	12422 <__sccl+0x5a>
   1242c:	adds	r4, #2
   1242e:	b.n	123ee <__sccl+0x26>
   12430:	movs	r2, #1
   12432:	ldrb	r5, [r1, #1]
   12434:	mov	r6, r2
   12436:	adds	r1, #2
   12438:	b.n	123d6 <__sccl+0xe>
   1243a:	nop

0001243c <_strtoll_l.isra.0>:
   1243c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12440:	sub	sp, #20
   12442:	mov	sl, r3
   12444:	str	r1, [sp, #8]
   12446:	str	r0, [sp, #12]
   12448:	str	r2, [sp, #4]
   1244a:	mov	r7, r1
   1244c:	ldr	r6, [sp, #56]	; 0x38
   1244e:	b.n	12452 <_strtoll_l.isra.0+0x16>
   12450:	mov	r7, r5
   12452:	mov	r5, r7
   12454:	mov	r0, r6
   12456:	ldrb.w	r4, [r5], #1
   1245a:	bl	b960 <__locale_ctype_ptr_l>
   1245e:	add	r0, r4
   12460:	ldrb	r3, [r0, #1]
   12462:	and.w	r3, r3, #8
   12466:	and.w	r2, r3, #255	; 0xff
   1246a:	cmp	r3, #0
   1246c:	bne.n	12450 <_strtoll_l.isra.0+0x14>
   1246e:	cmp	r4, #45	; 0x2d
   12470:	beq.w	1257a <_strtoll_l.isra.0+0x13e>
   12474:	cmp	r4, #43	; 0x2b
   12476:	it	eq
   12478:	ldrbeq	r4, [r7, #1]
   1247a:	str	r2, [sp, #0]
   1247c:	it	eq
   1247e:	addeq	r5, r7, #2
   12480:	cmp.w	sl, #0
   12484:	beq.n	124a0 <_strtoll_l.isra.0+0x64>
   12486:	cmp.w	sl, #16
   1248a:	beq.w	125b8 <_strtoll_l.isra.0+0x17c>
   1248e:	ldr	r3, [sp, #0]
   12490:	mov	r6, sl
   12492:	asrs	r7, r6, #31
   12494:	cbnz	r3, 124b2 <_strtoll_l.isra.0+0x76>
   12496:	mov.w	r8, #4294967295
   1249a:	mvn.w	r9, #2147483648	; 0x80000000
   1249e:	b.n	124ba <_strtoll_l.isra.0+0x7e>
   124a0:	cmp	r4, #48	; 0x30
   124a2:	beq.n	125a4 <_strtoll_l.isra.0+0x168>
   124a4:	movs	r6, #10
   124a6:	movs	r7, #0
   124a8:	mov.w	sl, #10
   124ac:	ldr	r3, [sp, #0]
   124ae:	cmp	r3, #0
   124b0:	beq.n	12496 <_strtoll_l.isra.0+0x5a>
   124b2:	mov.w	r8, #0
   124b6:	mov.w	r9, #2147483648	; 0x80000000
   124ba:	mov	r2, r6
   124bc:	mov	r3, r7
   124be:	mov	r0, r8
   124c0:	mov	r1, r9
   124c2:	bl	b53c <__aeabi_uldivmod>
   124c6:	mov	r3, r7
   124c8:	mov	fp, r2
   124ca:	mov	r0, r8
   124cc:	mov	r2, r6
   124ce:	mov	r1, r9
   124d0:	bl	b53c <__aeabi_uldivmod>
   124d4:	mov.w	lr, #0
   124d8:	movs	r2, #0
   124da:	movs	r3, #0
   124dc:	b.n	124fe <_strtoll_l.isra.0+0xc2>
   124de:	beq.n	1256c <_strtoll_l.isra.0+0x130>
   124e0:	mul.w	r4, r2, r7
   124e4:	mla	r4, r6, r3, r4
   124e8:	umull	r2, r3, r2, r6
   124ec:	add	r3, r4
   124ee:	adds.w	r2, r2, ip
   124f2:	adc.w	r3, r3, ip, asr #31
   124f6:	mov.w	lr, #1
   124fa:	ldrb.w	r4, [r5], #1
   124fe:	sub.w	ip, r4, #48	; 0x30
   12502:	cmp.w	ip, #9
   12506:	bls.n	12516 <_strtoll_l.isra.0+0xda>
   12508:	sub.w	ip, r4, #65	; 0x41
   1250c:	cmp.w	ip, #25
   12510:	bhi.n	1252e <_strtoll_l.isra.0+0xf2>
   12512:	sub.w	ip, r4, #55	; 0x37
   12516:	cmp	sl, ip
   12518:	ble.n	12540 <_strtoll_l.isra.0+0x104>
   1251a:	cmp.w	lr, #4294967295
   1251e:	beq.n	124fa <_strtoll_l.isra.0+0xbe>
   12520:	cmp	r1, r3
   12522:	it	eq
   12524:	cmpeq	r0, r2
   12526:	bcs.n	124de <_strtoll_l.isra.0+0xa2>
   12528:	mov.w	lr, #4294967295
   1252c:	b.n	124fa <_strtoll_l.isra.0+0xbe>
   1252e:	sub.w	ip, r4, #97	; 0x61
   12532:	cmp.w	ip, #25
   12536:	bhi.n	12540 <_strtoll_l.isra.0+0x104>
   12538:	sub.w	ip, r4, #87	; 0x57
   1253c:	cmp	sl, ip
   1253e:	bgt.n	1251a <_strtoll_l.isra.0+0xde>
   12540:	cmp.w	lr, #4294967295
   12544:	beq.n	12584 <_strtoll_l.isra.0+0x148>
   12546:	ldr	r1, [sp, #0]
   12548:	cbz	r1, 12550 <_strtoll_l.isra.0+0x114>
   1254a:	negs	r2, r2
   1254c:	sbc.w	r3, r3, r3, lsl #1
   12550:	ldr	r1, [sp, #4]
   12552:	cmp	r1, #0
   12554:	beq.n	125dc <_strtoll_l.isra.0+0x1a0>
   12556:	cmp.w	lr, #0
   1255a:	bne.n	1259c <_strtoll_l.isra.0+0x160>
   1255c:	ldr	r5, [sp, #8]
   1255e:	mov	r0, r2
   12560:	mov	r1, r3
   12562:	ldr	r3, [sp, #4]
   12564:	str	r5, [r3, #0]
   12566:	add	sp, #20
   12568:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1256c:	cmp	fp, ip
   1256e:	bge.n	124e0 <_strtoll_l.isra.0+0xa4>
   12570:	mov	r2, r0
   12572:	mov	r3, r1
   12574:	mov.w	lr, #4294967295
   12578:	b.n	124fa <_strtoll_l.isra.0+0xbe>
   1257a:	movs	r3, #1
   1257c:	adds	r5, r7, #2
   1257e:	ldrb	r4, [r7, #1]
   12580:	str	r3, [sp, #0]
   12582:	b.n	12480 <_strtoll_l.isra.0+0x44>
   12584:	ldr	r3, [sp, #0]
   12586:	cbnz	r3, 125d4 <_strtoll_l.isra.0+0x198>
   12588:	mov.w	r0, #4294967295
   1258c:	mvn.w	r1, #2147483648	; 0x80000000
   12590:	ldr	r2, [sp, #12]
   12592:	movs	r3, #34	; 0x22
   12594:	str	r3, [r2, #0]
   12596:	ldr	r3, [sp, #4]
   12598:	cbnz	r3, 125a0 <_strtoll_l.isra.0+0x164>
   1259a:	b.n	12566 <_strtoll_l.isra.0+0x12a>
   1259c:	mov	r0, r2
   1259e:	mov	r1, r3
   125a0:	subs	r5, #1
   125a2:	b.n	12562 <_strtoll_l.isra.0+0x126>
   125a4:	ldrb	r3, [r5, #0]
   125a6:	and.w	r3, r3, #223	; 0xdf
   125aa:	cmp	r3, #88	; 0x58
   125ac:	beq.n	125c6 <_strtoll_l.isra.0+0x18a>
   125ae:	movs	r6, #8
   125b0:	movs	r7, #0
   125b2:	mov.w	sl, #8
   125b6:	b.n	124ac <_strtoll_l.isra.0+0x70>
   125b8:	cmp	r4, #48	; 0x30
   125ba:	bne.n	125e2 <_strtoll_l.isra.0+0x1a6>
   125bc:	ldrb	r3, [r5, #0]
   125be:	and.w	r3, r3, #223	; 0xdf
   125c2:	cmp	r3, #88	; 0x58
   125c4:	bne.n	125e2 <_strtoll_l.isra.0+0x1a6>
   125c6:	ldrb	r4, [r5, #1]
   125c8:	movs	r6, #16
   125ca:	movs	r7, #0
   125cc:	adds	r5, #2
   125ce:	mov.w	sl, #16
   125d2:	b.n	124ac <_strtoll_l.isra.0+0x70>
   125d4:	movs	r0, #0
   125d6:	mov.w	r1, #2147483648	; 0x80000000
   125da:	b.n	12590 <_strtoll_l.isra.0+0x154>
   125dc:	mov	r0, r2
   125de:	mov	r1, r3
   125e0:	b.n	12566 <_strtoll_l.isra.0+0x12a>
   125e2:	movs	r6, #16
   125e4:	movs	r7, #0
   125e6:	b.n	124ac <_strtoll_l.isra.0+0x70>

000125e8 <_strtoll_r>:
   125e8:	push	{r4, r5, lr}
   125ea:	ldr	r4, [pc, #24]	; (12604 <_strtoll_r+0x1c>)
   125ec:	ldr	r5, [pc, #24]	; (12608 <_strtoll_r+0x20>)
   125ee:	ldr	r4, [r4, #0]
   125f0:	ldr	r4, [r4, #52]	; 0x34
   125f2:	sub	sp, #12
   125f4:	cmp	r4, #0
   125f6:	it	eq
   125f8:	moveq	r4, r5
   125fa:	str	r4, [sp, #0]
   125fc:	bl	1243c <_strtoll_l.isra.0>
   12600:	add	sp, #12
   12602:	pop	{r4, r5, pc}
   12604:	.word	0x20017400
   12608:	.word	0x20017404

0001260c <_strtoul_l.isra.0>:
   1260c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12610:	ldr.w	r9, [sp, #40]	; 0x28
   12614:	mov	r6, r1
   12616:	mov	r7, r0
   12618:	mov	r5, r2
   1261a:	mov	r8, r3
   1261c:	mov	fp, r1
   1261e:	b.n	12622 <_strtoul_l.isra.0+0x16>
   12620:	mov	fp, r4
   12622:	mov	r4, fp
   12624:	mov	r0, r9
   12626:	ldrb.w	sl, [r4], #1
   1262a:	bl	b960 <__locale_ctype_ptr_l>
   1262e:	add	r0, sl
   12630:	ldrb	r0, [r0, #1]
   12632:	and.w	r0, r0, #8
   12636:	and.w	ip, r0, #255	; 0xff
   1263a:	cmp	r0, #0
   1263c:	bne.n	12620 <_strtoul_l.isra.0+0x14>
   1263e:	mov	r1, sl
   12640:	cmp	r1, #45	; 0x2d
   12642:	beq.n	12708 <_strtoul_l.isra.0+0xfc>
   12644:	cmp	r1, #43	; 0x2b
   12646:	itt	eq
   12648:	ldrbeq.w	r1, [fp, #1]
   1264c:	addeq.w	r4, fp, #2
   12650:	cmp.w	r8, #0
   12654:	beq.n	12670 <_strtoul_l.isra.0+0x64>
   12656:	cmp.w	r8, #16
   1265a:	beq.n	12716 <_strtoul_l.isra.0+0x10a>
   1265c:	mov.w	r3, #4294967295
   12660:	udiv	r3, r3, r8
   12664:	mul.w	sl, r8, r3
   12668:	mvn.w	sl, sl
   1266c:	mov	r9, r8
   1266e:	b.n	12680 <_strtoul_l.isra.0+0x74>
   12670:	cmp	r1, #48	; 0x30
   12672:	beq.n	12738 <_strtoul_l.isra.0+0x12c>
   12674:	mov.w	r8, #10
   12678:	ldr	r3, [pc, #244]	; (12770 <_strtoul_l.isra.0+0x164>)
   1267a:	mov	r9, r8
   1267c:	mov.w	sl, #5
   12680:	mov.w	lr, #0
   12684:	mov	r0, lr
   12686:	b.n	12696 <_strtoul_l.isra.0+0x8a>
   12688:	beq.n	126ea <_strtoul_l.isra.0+0xde>
   1268a:	mla	r0, r9, r0, r2
   1268e:	mov.w	lr, #1
   12692:	ldrb.w	r1, [r4], #1
   12696:	sub.w	r2, r1, #48	; 0x30
   1269a:	cmp	r2, #9
   1269c:	bls.n	126aa <_strtoul_l.isra.0+0x9e>
   1269e:	sub.w	r2, r1, #65	; 0x41
   126a2:	cmp	r2, #25
   126a4:	bhi.n	126be <_strtoul_l.isra.0+0xb2>
   126a6:	sub.w	r2, r1, #55	; 0x37
   126aa:	cmp	r8, r2
   126ac:	ble.n	126ce <_strtoul_l.isra.0+0xc2>
   126ae:	cmp.w	lr, #4294967295
   126b2:	beq.n	12692 <_strtoul_l.isra.0+0x86>
   126b4:	cmp	r0, r3
   126b6:	bls.n	12688 <_strtoul_l.isra.0+0x7c>
   126b8:	mov.w	lr, #4294967295
   126bc:	b.n	12692 <_strtoul_l.isra.0+0x86>
   126be:	sub.w	r2, r1, #97	; 0x61
   126c2:	cmp	r2, #25
   126c4:	bhi.n	126ce <_strtoul_l.isra.0+0xc2>
   126c6:	sub.w	r2, r1, #87	; 0x57
   126ca:	cmp	r8, r2
   126cc:	bgt.n	126ae <_strtoul_l.isra.0+0xa2>
   126ce:	cmp.w	lr, #4294967295
   126d2:	beq.n	126f8 <_strtoul_l.isra.0+0xec>
   126d4:	cmp.w	ip, #0
   126d8:	beq.n	126dc <_strtoul_l.isra.0+0xd0>
   126da:	negs	r0, r0
   126dc:	cbz	r5, 126f4 <_strtoul_l.isra.0+0xe8>
   126de:	cmp.w	lr, #0
   126e2:	bne.n	12700 <_strtoul_l.isra.0+0xf4>
   126e4:	str	r6, [r5, #0]
   126e6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126ea:	cmp	r2, sl
   126ec:	ble.n	1268a <_strtoul_l.isra.0+0x7e>
   126ee:	mov.w	lr, #4294967295
   126f2:	b.n	12692 <_strtoul_l.isra.0+0x86>
   126f4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126f8:	movs	r3, #34	; 0x22
   126fa:	str	r3, [r7, #0]
   126fc:	mov	r0, lr
   126fe:	cbz	r5, 12752 <_strtoul_l.isra.0+0x146>
   12700:	subs	r6, r4, #1
   12702:	str	r6, [r5, #0]
   12704:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12708:	add.w	r4, fp, #2
   1270c:	ldrb.w	r1, [fp, #1]
   12710:	mov.w	ip, #1
   12714:	b.n	12650 <_strtoul_l.isra.0+0x44>
   12716:	cmp	r1, #48	; 0x30
   12718:	bne.n	12756 <_strtoul_l.isra.0+0x14a>
   1271a:	ldrb	r3, [r4, #0]
   1271c:	and.w	r3, r3, #223	; 0xdf
   12720:	cmp	r3, #88	; 0x58
   12722:	bne.n	12762 <_strtoul_l.isra.0+0x156>
   12724:	mov.w	r9, #16
   12728:	ldrb	r1, [r4, #1]
   1272a:	mov	r8, r9
   1272c:	mov.w	sl, #15
   12730:	adds	r4, #2
   12732:	mvn.w	r3, #4026531840	; 0xf0000000
   12736:	b.n	12680 <_strtoul_l.isra.0+0x74>
   12738:	ldrb	r3, [r4, #0]
   1273a:	and.w	r3, r3, #223	; 0xdf
   1273e:	cmp	r3, #88	; 0x58
   12740:	beq.n	12724 <_strtoul_l.isra.0+0x118>
   12742:	mov.w	r8, #8
   12746:	mov	r9, r8
   12748:	mov.w	sl, #7
   1274c:	mvn.w	r3, #3758096384	; 0xe0000000
   12750:	b.n	12680 <_strtoul_l.isra.0+0x74>
   12752:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12756:	mov.w	sl, #15
   1275a:	mvn.w	r3, #4026531840	; 0xf0000000
   1275e:	mov	r9, r8
   12760:	b.n	12680 <_strtoul_l.isra.0+0x74>
   12762:	mov	r9, r8
   12764:	mov.w	sl, #15
   12768:	mvn.w	r3, #4026531840	; 0xf0000000
   1276c:	b.n	12680 <_strtoul_l.isra.0+0x74>
   1276e:	nop
   12770:	.word	0x19999999

00012774 <_strtoul_r>:
   12774:	push	{r4, r5, lr}
   12776:	ldr	r4, [pc, #24]	; (12790 <_strtoul_r+0x1c>)
   12778:	ldr	r5, [pc, #24]	; (12794 <_strtoul_r+0x20>)
   1277a:	ldr	r4, [r4, #0]
   1277c:	ldr	r4, [r4, #52]	; 0x34
   1277e:	sub	sp, #12
   12780:	cmp	r4, #0
   12782:	it	eq
   12784:	moveq	r4, r5
   12786:	str	r4, [sp, #0]
   12788:	bl	1260c <_strtoul_l.isra.0>
   1278c:	add	sp, #12
   1278e:	pop	{r4, r5, pc}
   12790:	.word	0x20017400
   12794:	.word	0x20017404

00012798 <_strtoull_l.isra.0>:
   12798:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1279c:	sub	sp, #20
   1279e:	mov	fp, r1
   127a0:	str	r0, [sp, #8]
   127a2:	mov	r7, r2
   127a4:	mov	r6, r3
   127a6:	mov	r8, r1
   127a8:	ldr	r4, [sp, #56]	; 0x38
   127aa:	b.n	127ae <_strtoull_l.isra.0+0x16>
   127ac:	mov	r8, r5
   127ae:	mov	r5, r8
   127b0:	mov	r0, r4
   127b2:	ldrb.w	r9, [r5], #1
   127b6:	bl	b960 <__locale_ctype_ptr_l>
   127ba:	add	r0, r9
   127bc:	ldrb	r3, [r0, #1]
   127be:	and.w	r3, r3, #8
   127c2:	and.w	r2, r3, #255	; 0xff
   127c6:	cmp	r3, #0
   127c8:	bne.n	127ac <_strtoull_l.isra.0+0x14>
   127ca:	mov	r4, r9
   127cc:	cmp	r4, #45	; 0x2d
   127ce:	beq.w	128ea <_strtoull_l.isra.0+0x152>
   127d2:	cmp	r4, #43	; 0x2b
   127d4:	it	eq
   127d6:	ldrbeq.w	r4, [r8, #1]
   127da:	str	r2, [sp, #4]
   127dc:	it	eq
   127de:	addeq.w	r5, r8, #2
   127e2:	cbz	r6, 1281c <_strtoull_l.isra.0+0x84>
   127e4:	cmp	r6, #16
   127e6:	beq.w	128f8 <_strtoull_l.isra.0+0x160>
   127ea:	mov.w	r9, r6, asr #31
   127ee:	mov	r2, r6
   127f0:	mov	r3, r9
   127f2:	mov.w	r0, #4294967295
   127f6:	mov.w	r1, #4294967295
   127fa:	bl	b53c <__aeabi_uldivmod>
   127fe:	mov	r2, r6
   12800:	str	r0, [sp, #12]
   12802:	mov	sl, r1
   12804:	mov	r3, r9
   12806:	mov.w	r0, #4294967295
   1280a:	mov.w	r1, #4294967295
   1280e:	bl	b53c <__aeabi_uldivmod>
   12812:	mov	r8, r6
   12814:	mov	lr, r2
   12816:	ldr	r2, [sp, #12]
   12818:	mov	r3, sl
   1281a:	b.n	12836 <_strtoull_l.isra.0+0x9e>
   1281c:	cmp	r4, #48	; 0x30
   1281e:	beq.w	12924 <_strtoull_l.isra.0+0x18c>
   12822:	ldr	r3, [pc, #348]	; (12980 <_strtoull_l.isra.0+0x1e8>)
   12824:	mov.w	lr, #5
   12828:	mov.w	r2, #2576980377	; 0x99999999
   1282c:	mov.w	r8, #10
   12830:	mov.w	r9, #0
   12834:	movs	r6, #10
   12836:	mov.w	ip, #0
   1283a:	movs	r0, #0
   1283c:	movs	r1, #0
   1283e:	b.n	12866 <_strtoull_l.isra.0+0xce>
   12840:	cmp	r1, r3
   12842:	it	eq
   12844:	cmpeq	r0, r2
   12846:	beq.n	128ca <_strtoull_l.isra.0+0x132>
   12848:	mul.w	r4, r0, r9
   1284c:	mla	r4, r8, r1, r4
   12850:	umull	r0, r1, r0, r8
   12854:	add	r1, r4
   12856:	adds.w	r0, r0, sl
   1285a:	adc.w	r1, r1, sl, asr #31
   1285e:	mov.w	ip, #1
   12862:	ldrb.w	r4, [r5], #1
   12866:	sub.w	sl, r4, #48	; 0x30
   1286a:	cmp.w	sl, #9
   1286e:	bls.n	1287e <_strtoull_l.isra.0+0xe6>
   12870:	sub.w	sl, r4, #65	; 0x41
   12874:	cmp.w	sl, #25
   12878:	bhi.n	12896 <_strtoull_l.isra.0+0xfe>
   1287a:	sub.w	sl, r4, #55	; 0x37
   1287e:	cmp	r6, sl
   12880:	ble.n	128a8 <_strtoull_l.isra.0+0x110>
   12882:	cmp.w	ip, #4294967295
   12886:	beq.n	12862 <_strtoull_l.isra.0+0xca>
   12888:	cmp	r3, r1
   1288a:	it	eq
   1288c:	cmpeq	r2, r0
   1288e:	bcs.n	12840 <_strtoull_l.isra.0+0xa8>
   12890:	mov.w	ip, #4294967295
   12894:	b.n	12862 <_strtoull_l.isra.0+0xca>
   12896:	sub.w	sl, r4, #97	; 0x61
   1289a:	cmp.w	sl, #25
   1289e:	bhi.n	128a8 <_strtoull_l.isra.0+0x110>
   128a0:	sub.w	sl, r4, #87	; 0x57
   128a4:	cmp	r6, sl
   128a6:	bgt.n	12882 <_strtoull_l.isra.0+0xea>
   128a8:	cmp.w	ip, #4294967295
   128ac:	beq.n	128d4 <_strtoull_l.isra.0+0x13c>
   128ae:	ldr	r3, [sp, #4]
   128b0:	cbz	r3, 128b8 <_strtoull_l.isra.0+0x120>
   128b2:	negs	r0, r0
   128b4:	sbc.w	r1, r1, r1, lsl #1
   128b8:	cbz	r7, 128c4 <_strtoull_l.isra.0+0x12c>
   128ba:	cmp.w	ip, #0
   128be:	bne.n	128e6 <_strtoull_l.isra.0+0x14e>
   128c0:	mov	r5, fp
   128c2:	str	r5, [r7, #0]
   128c4:	add	sp, #20
   128c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128ca:	cmp	sl, lr
   128cc:	ble.n	12848 <_strtoull_l.isra.0+0xb0>
   128ce:	mov.w	ip, #4294967295
   128d2:	b.n	12862 <_strtoull_l.isra.0+0xca>
   128d4:	ldr	r2, [sp, #8]
   128d6:	movs	r3, #34	; 0x22
   128d8:	str	r3, [r2, #0]
   128da:	mov.w	r0, #4294967295
   128de:	mov.w	r1, #4294967295
   128e2:	cmp	r7, #0
   128e4:	beq.n	128c4 <_strtoull_l.isra.0+0x12c>
   128e6:	subs	r5, #1
   128e8:	b.n	128c2 <_strtoull_l.isra.0+0x12a>
   128ea:	movs	r3, #1
   128ec:	add.w	r5, r8, #2
   128f0:	ldrb.w	r4, [r8, #1]
   128f4:	str	r3, [sp, #4]
   128f6:	b.n	127e2 <_strtoull_l.isra.0+0x4a>
   128f8:	cmp	r4, #48	; 0x30
   128fa:	bne.n	12946 <_strtoull_l.isra.0+0x1ae>
   128fc:	ldrb	r3, [r5, #0]
   128fe:	and.w	r3, r3, #223	; 0xdf
   12902:	cmp	r3, #88	; 0x58
   12904:	bne.n	1295c <_strtoull_l.isra.0+0x1c4>
   12906:	mov.w	r3, #4294967295
   1290a:	ldrb	r4, [r5, #1]
   1290c:	str	r3, [sp, #12]
   1290e:	mov.w	lr, #15
   12912:	adds	r5, #2
   12914:	mvn.w	sl, #4026531840	; 0xf0000000
   12918:	mov.w	r8, #16
   1291c:	mov.w	r9, #0
   12920:	movs	r6, #16
   12922:	b.n	12816 <_strtoull_l.isra.0+0x7e>
   12924:	ldrb	r3, [r5, #0]
   12926:	and.w	r3, r3, #223	; 0xdf
   1292a:	cmp	r3, #88	; 0x58
   1292c:	beq.n	12906 <_strtoull_l.isra.0+0x16e>
   1292e:	mov.w	lr, #7
   12932:	mov.w	r2, #4294967295
   12936:	mvn.w	r3, #3758096384	; 0xe0000000
   1293a:	mov.w	r8, #8
   1293e:	mov.w	r9, #0
   12942:	movs	r6, #8
   12944:	b.n	12836 <_strtoull_l.isra.0+0x9e>
   12946:	mov.w	lr, #15
   1294a:	mov.w	r2, #4294967295
   1294e:	mvn.w	r3, #4026531840	; 0xf0000000
   12952:	mov.w	r8, #16
   12956:	mov.w	r9, #0
   1295a:	b.n	12836 <_strtoull_l.isra.0+0x9e>
   1295c:	mov.w	r8, #16
   12960:	mov.w	r9, #0
   12964:	mov	r2, r8
   12966:	mov	r3, r9
   12968:	mov.w	r0, #4294967295
   1296c:	mov.w	r1, #4294967295
   12970:	bl	b53c <__aeabi_uldivmod>
   12974:	mvn.w	r3, #4026531840	; 0xf0000000
   12978:	mov	lr, r2
   1297a:	mov.w	r2, #4294967295
   1297e:	b.n	12836 <_strtoull_l.isra.0+0x9e>
   12980:	.word	0x19999999

00012984 <_strtoull_r>:
   12984:	push	{r4, r5, lr}
   12986:	ldr	r4, [pc, #24]	; (129a0 <_strtoull_r+0x1c>)
   12988:	ldr	r5, [pc, #24]	; (129a4 <_strtoull_r+0x20>)
   1298a:	ldr	r4, [r4, #0]
   1298c:	ldr	r4, [r4, #52]	; 0x34
   1298e:	sub	sp, #12
   12990:	cmp	r4, #0
   12992:	it	eq
   12994:	moveq	r4, r5
   12996:	str	r4, [sp, #0]
   12998:	bl	12798 <_strtoull_l.isra.0>
   1299c:	add	sp, #12
   1299e:	pop	{r4, r5, pc}
   129a0:	.word	0x20017400
   129a4:	.word	0x20017404

000129a8 <__ssprint_r>:
   129a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129ac:	ldr	r3, [r2, #8]
   129ae:	sub	sp, #12
   129b0:	mov	r8, r2
   129b2:	cmp	r3, #0
   129b4:	beq.n	12a9c <__ssprint_r+0xf4>
   129b6:	mov	fp, r0
   129b8:	mov.w	r9, #0
   129bc:	ldr	r6, [r2, #0]
   129be:	ldr	r0, [r1, #0]
   129c0:	ldr	r3, [r1, #8]
   129c2:	mov	r5, r1
   129c4:	mov	r4, r9
   129c6:	cmp	r4, #0
   129c8:	beq.n	12a56 <__ssprint_r+0xae>
   129ca:	cmp	r4, r3
   129cc:	mov	r7, r3
   129ce:	mov	sl, r3
   129d0:	bcc.n	12a60 <__ssprint_r+0xb8>
   129d2:	ldrh	r3, [r5, #12]
   129d4:	tst.w	r3, #1152	; 0x480
   129d8:	beq.n	12a36 <__ssprint_r+0x8e>
   129da:	ldr	r7, [r5, #20]
   129dc:	ldr	r1, [r5, #16]
   129de:	add.w	r7, r7, r7, lsl #1
   129e2:	rsb	sl, r1, r0
   129e6:	add.w	r7, r7, r7, lsr #31
   129ea:	adds	r0, r4, #1
   129ec:	asrs	r7, r7, #1
   129ee:	add	r0, sl
   129f0:	cmp	r0, r7
   129f2:	mov	r2, r7
   129f4:	itt	hi
   129f6:	movhi	r7, r0
   129f8:	movhi	r2, r7
   129fa:	lsls	r3, r3, #21
   129fc:	bpl.n	12a66 <__ssprint_r+0xbe>
   129fe:	mov	r1, r2
   12a00:	mov	r0, fp
   12a02:	bl	b99c <_malloc_r>
   12a06:	cmp	r0, #0
   12a08:	beq.n	12a7a <__ssprint_r+0xd2>
   12a0a:	mov	r2, sl
   12a0c:	ldr	r1, [r5, #16]
   12a0e:	str	r0, [sp, #4]
   12a10:	bl	81f4 <memcpy>
   12a14:	ldrh	r2, [r5, #12]
   12a16:	ldr	r3, [sp, #4]
   12a18:	bic.w	r2, r2, #1152	; 0x480
   12a1c:	orr.w	r2, r2, #128	; 0x80
   12a20:	strh	r2, [r5, #12]
   12a22:	rsb	r2, sl, r7
   12a26:	add.w	r0, r3, sl
   12a2a:	str	r7, [r5, #20]
   12a2c:	str	r3, [r5, #16]
   12a2e:	str	r0, [r5, #0]
   12a30:	str	r2, [r5, #8]
   12a32:	mov	r7, r4
   12a34:	mov	sl, r4
   12a36:	mov	r2, sl
   12a38:	mov	r1, r9
   12a3a:	bl	c044 <memmove>
   12a3e:	ldr.w	r2, [r8, #8]
   12a42:	ldr	r3, [r5, #8]
   12a44:	ldr	r0, [r5, #0]
   12a46:	subs	r3, r3, r7
   12a48:	add	r0, sl
   12a4a:	subs	r4, r2, r4
   12a4c:	str	r3, [r5, #8]
   12a4e:	str	r0, [r5, #0]
   12a50:	str.w	r4, [r8, #8]
   12a54:	cbz	r4, 12a9c <__ssprint_r+0xf4>
   12a56:	ldr.w	r9, [r6]
   12a5a:	ldr	r4, [r6, #4]
   12a5c:	adds	r6, #8
   12a5e:	b.n	129c6 <__ssprint_r+0x1e>
   12a60:	mov	r7, r4
   12a62:	mov	sl, r4
   12a64:	b.n	12a36 <__ssprint_r+0x8e>
   12a66:	mov	r0, fp
   12a68:	bl	c1b0 <_realloc_r>
   12a6c:	mov	r3, r0
   12a6e:	cmp	r0, #0
   12a70:	bne.n	12a22 <__ssprint_r+0x7a>
   12a72:	ldr	r1, [r5, #16]
   12a74:	mov	r0, fp
   12a76:	bl	11110 <_free_r>
   12a7a:	movs	r3, #12
   12a7c:	str.w	r3, [fp]
   12a80:	ldrh	r3, [r5, #12]
   12a82:	movs	r2, #0
   12a84:	orr.w	r3, r3, #64	; 0x40
   12a88:	mov.w	r0, #4294967295
   12a8c:	strh	r3, [r5, #12]
   12a8e:	str.w	r2, [r8, #8]
   12a92:	str.w	r2, [r8, #4]
   12a96:	add	sp, #12
   12a98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a9c:	movs	r0, #0
   12a9e:	str.w	r0, [r8, #4]
   12aa2:	add	sp, #12
   12aa4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012aa8 <_sungetc_r>:
   12aa8:	adds	r3, r1, #1
   12aaa:	push	{r4, r5, r6, lr}
   12aac:	beq.n	12ae6 <_sungetc_r+0x3e>
   12aae:	ldrh	r3, [r2, #12]
   12ab0:	ldr	r4, [r2, #48]	; 0x30
   12ab2:	bic.w	r3, r3, #32
   12ab6:	strh	r3, [r2, #12]
   12ab8:	uxtb	r5, r1
   12aba:	cbz	r4, 12aec <_sungetc_r+0x44>
   12abc:	mov	r4, r2
   12abe:	ldr	r2, [r2, #4]
   12ac0:	ldr	r3, [r4, #52]	; 0x34
   12ac2:	cmp	r2, r3
   12ac4:	mov	r6, r1
   12ac6:	bge.n	12adc <_sungetc_r+0x34>
   12ac8:	ldr	r3, [r4, #0]
   12aca:	subs	r2, r3, #1
   12acc:	str	r2, [r4, #0]
   12ace:	strb.w	r6, [r3, #-1]
   12ad2:	ldr	r3, [r4, #4]
   12ad4:	adds	r3, #1
   12ad6:	str	r3, [r4, #4]
   12ad8:	mov	r0, r5
   12ada:	pop	{r4, r5, r6, pc}
   12adc:	mov	r1, r4
   12ade:	bl	12bec <__submore>
   12ae2:	cmp	r0, #0
   12ae4:	beq.n	12ac8 <_sungetc_r+0x20>
   12ae6:	mov.w	r5, #4294967295
   12aea:	b.n	12ad8 <_sungetc_r+0x30>
   12aec:	ldr	r0, [r2, #16]
   12aee:	ldr	r3, [r2, #0]
   12af0:	cbz	r0, 12afe <_sungetc_r+0x56>
   12af2:	cmp	r0, r3
   12af4:	bcs.n	12afe <_sungetc_r+0x56>
   12af6:	ldrb.w	r0, [r3, #-1]
   12afa:	cmp	r5, r0
   12afc:	beq.n	12b1e <_sungetc_r+0x76>
   12afe:	str	r3, [r2, #56]	; 0x38
   12b00:	mov	r3, r2
   12b02:	ldr	r6, [r2, #4]
   12b04:	str	r6, [r2, #60]	; 0x3c
   12b06:	add.w	r4, r2, #64	; 0x40
   12b0a:	movs	r0, #3
   12b0c:	str	r0, [r2, #52]	; 0x34
   12b0e:	str	r4, [r2, #48]	; 0x30
   12b10:	strb.w	r1, [r3, #66]!
   12b14:	movs	r1, #1
   12b16:	str	r3, [r2, #0]
   12b18:	str	r1, [r2, #4]
   12b1a:	mov	r0, r5
   12b1c:	pop	{r4, r5, r6, pc}
   12b1e:	ldr	r1, [r2, #4]
   12b20:	subs	r3, #1
   12b22:	adds	r1, #1
   12b24:	str	r3, [r2, #0]
   12b26:	str	r1, [r2, #4]
   12b28:	b.n	12ad8 <_sungetc_r+0x30>
   12b2a:	nop

00012b2c <__ssrefill_r>:
   12b2c:	push	{r4, lr}
   12b2e:	mov	r4, r1
   12b30:	ldr	r1, [r1, #48]	; 0x30
   12b32:	cbz	r1, 12b50 <__ssrefill_r+0x24>
   12b34:	add.w	r3, r4, #64	; 0x40
   12b38:	cmp	r1, r3
   12b3a:	beq.n	12b40 <__ssrefill_r+0x14>
   12b3c:	bl	11110 <_free_r>
   12b40:	ldr	r3, [r4, #60]	; 0x3c
   12b42:	str	r3, [r4, #4]
   12b44:	movs	r0, #0
   12b46:	str	r0, [r4, #48]	; 0x30
   12b48:	cbz	r3, 12b50 <__ssrefill_r+0x24>
   12b4a:	ldr	r3, [r4, #56]	; 0x38
   12b4c:	str	r3, [r4, #0]
   12b4e:	pop	{r4, pc}
   12b50:	ldrh	r3, [r4, #12]
   12b52:	ldr	r2, [r4, #16]
   12b54:	str	r2, [r4, #0]
   12b56:	orr.w	r3, r3, #32
   12b5a:	movs	r2, #0
   12b5c:	strh	r3, [r4, #12]
   12b5e:	str	r2, [r4, #4]
   12b60:	mov.w	r0, #4294967295
   12b64:	pop	{r4, pc}
   12b66:	nop

00012b68 <_sfread_r>:
   12b68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b6c:	sub	sp, #12
   12b6e:	mul.w	r9, r2, r3
   12b72:	str	r2, [sp, #4]
   12b74:	mov	sl, r3
   12b76:	ldr	r4, [sp, #48]	; 0x30
   12b78:	cmp.w	r9, #0
   12b7c:	beq.n	12bd2 <_sfread_r+0x6a>
   12b7e:	mov	r7, r0
   12b80:	mov	r6, r1
   12b82:	mov	r5, r9
   12b84:	mov.w	r8, #0
   12b88:	b.n	12baa <_sfread_r+0x42>
   12b8a:	ldr	r1, [r4, #0]
   12b8c:	bl	81f4 <memcpy>
   12b90:	ldr	r2, [r4, #0]
   12b92:	str.w	r8, [r4, #4]
   12b96:	add	r2, fp
   12b98:	str	r2, [r4, #0]
   12b9a:	mov	r1, r4
   12b9c:	mov	r0, r7
   12b9e:	add	r6, fp
   12ba0:	rsb	r5, fp, r5
   12ba4:	bl	12b2c <__ssrefill_r>
   12ba8:	cbnz	r0, 12bda <_sfread_r+0x72>
   12baa:	ldr.w	fp, [r4, #4]
   12bae:	cmp	r5, fp
   12bb0:	mov	r0, r6
   12bb2:	mov	r2, fp
   12bb4:	bhi.n	12b8a <_sfread_r+0x22>
   12bb6:	mov	r2, r5
   12bb8:	ldr	r1, [r4, #0]
   12bba:	bl	81f4 <memcpy>
   12bbe:	ldr	r2, [r4, #4]
   12bc0:	ldr	r3, [r4, #0]
   12bc2:	subs	r2, r2, r5
   12bc4:	add	r3, r5
   12bc6:	mov	r0, sl
   12bc8:	str	r2, [r4, #4]
   12bca:	str	r3, [r4, #0]
   12bcc:	add	sp, #12
   12bce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bd2:	mov	r0, r9
   12bd4:	add	sp, #12
   12bd6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bda:	ldr	r3, [sp, #4]
   12bdc:	rsb	r9, r5, r9
   12be0:	udiv	r0, r9, r3
   12be4:	add	sp, #12
   12be6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bea:	nop

00012bec <__submore>:
   12bec:	add.w	r3, r1, #64	; 0x40
   12bf0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12bf4:	mov	r4, r1
   12bf6:	ldr	r1, [r1, #48]	; 0x30
   12bf8:	cmp	r1, r3
   12bfa:	beq.n	12c26 <__submore+0x3a>
   12bfc:	ldr	r6, [r4, #52]	; 0x34
   12bfe:	lsls	r7, r6, #1
   12c00:	mov	r2, r7
   12c02:	bl	c1b0 <_realloc_r>
   12c06:	mov	r5, r0
   12c08:	cbz	r0, 12c5c <__submore+0x70>
   12c0a:	add.w	r8, r0, r6
   12c0e:	mov	r2, r6
   12c10:	mov	r0, r8
   12c12:	mov	r1, r5
   12c14:	bl	81f4 <memcpy>
   12c18:	str.w	r8, [r4]
   12c1c:	str	r5, [r4, #48]	; 0x30
   12c1e:	str	r7, [r4, #52]	; 0x34
   12c20:	movs	r0, #0
   12c22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12c26:	mov.w	r1, #1024	; 0x400
   12c2a:	bl	b99c <_malloc_r>
   12c2e:	cbz	r0, 12c5c <__submore+0x70>
   12c30:	ldrb.w	r3, [r4, #66]	; 0x42
   12c34:	str	r0, [r4, #48]	; 0x30
   12c36:	mov.w	r2, #1024	; 0x400
   12c3a:	str	r2, [r4, #52]	; 0x34
   12c3c:	strb.w	r3, [r0, #1023]	; 0x3ff
   12c40:	ldrb.w	r3, [r4, #65]	; 0x41
   12c44:	strb.w	r3, [r0, #1022]	; 0x3fe
   12c48:	ldrb.w	r3, [r4, #64]	; 0x40
   12c4c:	strb.w	r3, [r0, #1021]	; 0x3fd
   12c50:	addw	r0, r0, #1021	; 0x3fd
   12c54:	str	r0, [r4, #0]
   12c56:	movs	r0, #0
   12c58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12c5c:	mov.w	r0, #4294967295
   12c60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012c64 <_vasnprintf_r>:
   12c64:	push	{r4, r5, r6, lr}
   12c66:	mov	r5, r2
   12c68:	sub	sp, #104	; 0x68
   12c6a:	ldr	r4, [r2, #0]
   12c6c:	cbz	r1, 12c72 <_vasnprintf_r+0xe>
   12c6e:	cmp	r4, #0
   12c70:	bne.n	12ca8 <_vasnprintf_r+0x44>
   12c72:	movs	r4, #0
   12c74:	mov.w	r2, #648	; 0x288
   12c78:	strh.w	r2, [sp, #12]
   12c7c:	str	r4, [sp, #0]
   12c7e:	str	r4, [sp, #16]
   12c80:	mov	r2, r3
   12c82:	movw	r6, #65535	; 0xffff
   12c86:	ldr	r3, [sp, #120]	; 0x78
   12c88:	str	r4, [sp, #8]
   12c8a:	mov	r1, sp
   12c8c:	str	r4, [sp, #20]
   12c8e:	strh.w	r6, [sp, #14]
   12c92:	bl	da10 <_svfprintf_r>
   12c96:	cmp	r0, #0
   12c98:	blt.n	12cbe <_vasnprintf_r+0x5a>
   12c9a:	ldr	r3, [sp, #0]
   12c9c:	str	r0, [r5, #0]
   12c9e:	movs	r2, #0
   12ca0:	strb	r2, [r3, #0]
   12ca2:	ldr	r0, [sp, #16]
   12ca4:	add	sp, #104	; 0x68
   12ca6:	pop	{r4, r5, r6, pc}
   12ca8:	mov.w	r2, #1544	; 0x608
   12cac:	str	r1, [sp, #0]
   12cae:	str	r1, [sp, #16]
   12cb0:	strh.w	r2, [sp, #12]
   12cb4:	bge.n	12c80 <_vasnprintf_r+0x1c>
   12cb6:	movs	r3, #139	; 0x8b
   12cb8:	str	r3, [r0, #0]
   12cba:	movs	r0, #0
   12cbc:	b.n	12ca4 <_vasnprintf_r+0x40>
   12cbe:	movs	r0, #0
   12cc0:	b.n	12ca4 <_vasnprintf_r+0x40>
   12cc2:	nop

00012cc4 <_calloc_r>:
   12cc4:	push	{r4, lr}
   12cc6:	mul.w	r1, r2, r1
   12cca:	bl	b99c <_malloc_r>
   12cce:	mov	r4, r0
   12cd0:	cbz	r0, 12d0a <_calloc_r+0x46>
   12cd2:	ldr.w	r2, [r0, #-4]
   12cd6:	bic.w	r2, r2, #3
   12cda:	subs	r2, #4
   12cdc:	cmp	r2, #36	; 0x24
   12cde:	bhi.n	12d12 <_calloc_r+0x4e>
   12ce0:	cmp	r2, #19
   12ce2:	bls.n	12d0e <_calloc_r+0x4a>
   12ce4:	movs	r3, #0
   12ce6:	cmp	r2, #27
   12ce8:	str	r3, [r0, #0]
   12cea:	str	r3, [r0, #4]
   12cec:	bls.n	12d1c <_calloc_r+0x58>
   12cee:	cmp	r2, #36	; 0x24
   12cf0:	str	r3, [r0, #8]
   12cf2:	str	r3, [r0, #12]
   12cf4:	iteee	ne
   12cf6:	addne.w	r2, r0, #16
   12cfa:	streq	r3, [r0, #16]
   12cfc:	streq	r3, [r0, #20]
   12cfe:	addeq.w	r2, r0, #24
   12d02:	movs	r3, #0
   12d04:	str	r3, [r2, #0]
   12d06:	str	r3, [r2, #4]
   12d08:	str	r3, [r2, #8]
   12d0a:	mov	r0, r4
   12d0c:	pop	{r4, pc}
   12d0e:	mov	r2, r0
   12d10:	b.n	12d02 <_calloc_r+0x3e>
   12d12:	movs	r1, #0
   12d14:	bl	c10c <memset>
   12d18:	mov	r0, r4
   12d1a:	pop	{r4, pc}
   12d1c:	add.w	r2, r0, #8
   12d20:	b.n	12d02 <_calloc_r+0x3e>
   12d22:	nop

00012d24 <vtable for AudioStream>:
	...
   12d2c:	i...

00012d30 <vtable for mRecordQueue<137>>:
	...
   12d38:	]...

00012d3c <vtable for StreamFile<FsBaseFile, unsigned long long>>:
	...
   12d44:	........m.......
   12d54:	........m...

00012d60 <vtable for FsFile>:
	...
   12d68:	........m.......
   12d78:	........m...%02d
   12d88:	:%02d:%02d..%04d
   12d98:	/%02d/%02d..%d %
   12da8:	d %d %d %d %d %d
   12db8:	....%s_%04d_%02d
   12dc8:	_%02d_%02d_%02d_
   12dd8:	%02d%s..%04d_%02
   12de8:	d_%02d_%02d_%02d
   12df8:	_%02d...RIFF....
   12e08:	WAVE....fmt ....
   12e18:	data....file Clo
   12e28:	sed.Config.txt..
   12e38:	%s......%10d....
   12e48:	%d..Envi_%s.txt.
   12e58:	%04d_%02d_%02d,.
   12e68:	%02d_%02d_%02d,.
   12e78:	%10.1f,.close ac
   12e88:	quisition...Hibe
   12e98:	rnate now 1.Hibe
   12ea8:	rnate now 2.Hibe
   12eb8:	rnate now 3.?!xa
   12ec8:	....oar1234ndtch
   12ed8:	wseikp..%02d....
   12ee8:	%04d....%c %5d o
   12ef8:	n_time......%c %
   12f08:	5d acq_time.....
   12f18:	%c %5d rep_rate.
   12f28:	....%c %5d first
   12f38:	_hour...%c %5d s
   12f48:	econd_hour......
   12f58:	%c %5d third_hou
   12f68:	r...%c %5d last_
   12f78:	hour....%c %s na
   12f88:	me......%c %s da
   12f98:	te......%c %s ti
   12fa8:	me......%c %5d p
   12fb8:	rocessing type..
   12fc8:	....%c %5d thres
   12fd8:	hold....%c %5d n
   12fe8:	oise window.....
   12ff8:	%c %5d slow wind
   13008:	ow......%c %5d e
   13018:	xtraction window
   13028:	....%c %5d inhib
   13038:	it window...%c %
   13048:	5d noise repetit
   13058:	ion rate....%c %
   13068:	5d pre trigger d
   13078:	elay....exter 'a
   13088:	' to print this.
   13098:	exter '?c' to re
   130a8:	ad value c=(o,a,
   130b8:	r,1,2,3,4,n,d,t,
   130c8:	c,h,w,s,m,i,k,p)
   130d8:	....  e.g.: ?1 w
   130e8:	ill print first 
   130f8:	hour....exter '!
   13108:	cval' to read va
   13118:	lue c=(0,a,r,1,2
   13128:	,3,4,n,d,t,c,h,w
   13138:	,s,m,i,k,p) and 
   13148:	val is new value
   13158:	....  e.g.: !110
   13168:	 will set first 
   13178:	hour to 10..exte
   13188:	r 'xval' to exit
   13198:	 menu (x is dela
   131a8:	y in minutes, -1
   131b8:	 means immediate
   131c8:	)...  e.g.: x10 
   131d8:	will exit and hi
   131e8:	bernate for 10 m
   131f8:	inutes..        
   13208:	x-1 with exit an
   13218:	d start immediat
   13228:	ely.microSoundRe
   13238:	corder..End of S
   13248:	etup....SdError:
   13258:	 0X.,0X.Check SD
   13268:	 format.....erro
   13278:	r: .file.write d
   13288:	ata failed..file
   13298:	.open failed....
   132a8:	file.preAllocate
   132b8:	 failed.closed..
   132c8:	file closed..loo
   132d8:	p: %5d %4d; %5d 
   132e8:	%5d; %5d; ..

000132f4 <SPIClass::spi0_hardware>:
   132f4:	<..@............
   13304:	.....%....'.....
   13314:	................
   13324:	................
   13334:	................
   13344:	..........-.....
   13354:	................
   13364:	................
   13374:	................
   13384:	.. .

00013388 <monthDays>:
   13388:	............

00013394 <vtable for AudioInputI2SQuad>:
	...
   1339c:	.,..

000133a0 <TwoWire::i2c0_hardware>:
   133a0:	4..@@.....".0...
   133b0:	....!./.........

000133c0 <TwoWire::i2c1_hardware>:
   133c0:	4..@....&:......
   133d0:	..%;............

000133e0 <TwoWire::i2c2_hardware>:
   133e0:	(..@@...........
   133f0:	............J...

00013400 <vtable for TwoWire>:
	...
   13408:	.0...0..m....0..
   13418:	m0..y0...0..

00013424 <vtable for SdFile>:
	...
   1342c:	.:......m...q...
   1343c:	EXFAT...

00013444 <vtable for SdSpiCard>:
	...
   1344c:	5j..9j...j...n..
   1345c:	%m...p..%j..Ij..
   1346c:	.o...j...j...j..
   1347c:	.m...m..ul..u...
   1348c:	!j...p...n...o..

0001349c <vtable for SdioCard>:
	...
   134a4:	.r...s......-x..
   134b4:	1u...y..=y...x..
   134c4:	.u..-r..9r..At..
   134d4:	Er..ar..}r...s..
   134e4:	.s...v...w...v..

000134f4 <digital_pin_to_info_PGM>:
   134f4:	@..C@..@D..CD..@
   13504:	...C...@0..C0..@
   13514:	4..C4..@...C...@
   13524:	...C...@...C...@
   13534:	...C...@...C...@
   13544:	...C...@...C...@
   13554:	...C...@...C...@
   13564:	...C...@...C...@
   13574:	...C...@...C...@
   13584:	...C...@...C...@
   13594:	...C...@...C...@
   135a4:	...C...@...C...@
   135b4:	h .Ch..@...C...@
   135c4:	8..C8..@<..C<..@
   135d4:	@..C@..@H..CH..@
   135e4:	L..CL..@(..C(..@
   135f4:	,..C,..@` .C`..@
   13604:	d .Cd..@ ..C ..@
   13614:	$..C$..@(..C(..@
   13624:	,..C,..@D..CD..@
   13634:	p..Cp..@t..Ct..@
   13644:	h..Ch..@P..CP..@
   13654:	X..CX..@\..C\..@
   13664:	T..CT..@ ..C ..@
   13674:	$..C$..@...C...@
   13684:	...C...@8..C8..@
   13694:	4..C4..@0..C0..@
   136a4:	<..C<..@,..C,..@
   136b4:	( .C(..@, .C,..@
   136c4:	. .C...@. .C...@
   136d4:	. .C...@. .C...@
   136e4:	. .C...@. .C...@

000136f4 <vtable for usb_serial_class>:
	...
   136fc:	................
   1370c:	................
   1371c:	....

00013720 <usb_endpoint_config_table>:
   13720:	....

00013724 <usb_descriptor_list>:
   13724:	....4o. ........
   13734:	`o. C........o. 
   13744:	........Ho. ....
   13754:	.....o. ........
   13764:	.o. ............
   13774:	....

00013778 <_global_impure_ptr>:
   13778:	.o. C...POSIX...
   13788:	....

0001378c <fpi.6173>:
   1378c:	5...............
   1379c:	....nf..inity...
   137ac:	an..

000137b0 <fpinan.6209>:
   137b0:	4...............
   137c0:	........

000137c8 <tinytens>:
   137c8:	.......<3...#.I9
   137d8:	=..D...2......[%
   137e8:	Co.d(.h.

000137f0 <zeroes.7258>:
   137f0:	0000000000000000
   13800:	INF.inf.NAN.nan.
   13810:	0123456789ABCDEF
   13820:	....0123456789ab
   13830:	cdef....(null)..
   13840:	0...

00013844 <blanks.7257>:
   13844:	                

00013854 <basefix.7328>:
   13854:	................
   13864:	................
   13874:	....e%ld....

00013880 <_ctype_>:
   13880:	.         ((((( 
   13890:	                
   138a0:	 ...............
   138b0:	................
   138c0:	..AAAAAA........
   138d0:	................
   138e0:	..BBBBBB........
   138f0:	................
   13900:	 ...............
	...
   13980:	....Infinity....
   13990:	NaN.

00013994 <__hexdig>:
	...
   139c4:	................
   139d4:	................
	...
   139f4:	................
	...
   13a94:	....

00013a98 <__mprec_tens>:
   13a98:	.......?......$@
   13aa8:	......Y@.....@.@
   13ab8:	.......@.....j.@
   13ac8:	.......A......cA
   13ad8:	.......A....e..A
   13ae8:	... _..B....vH7B
   13af8:	......mB..@..0.B
   13b08:	.......B..4&.k.C
   13b18:	...7y.AC....W4vC
   13b28:	..Ngm..C.=.`.X.C
   13b38:	@..x...DP.....KD
   13b48:	..M....D.J...-.D
   13b58:	...yCx.D

00013b60 <__mprec_bigtens>:
   13b60:	...7y.AC.n.....F
   13b70:	..?..O8M2.0.Hw.Z
   13b80:	<.s..O.u

00013b88 <p05.6087>:
   13b88:	........}...

00013b94 <_init>:
   13b94:	push	{r3, r4, r5, r6, r7, lr}
   13b96:	nop
   13b98:	pop	{r3, r4, r5, r6, r7}
   13b9a:	pop	{r3}
   13b9c:	mov	lr, r3
   13b9e:	bx	lr

00013ba0 <__init_array_start>:
   13ba0:	.word	0x000100cd

00013ba4 <__frame_dummy_init_array_entry>:
   13ba4:	5.... ...+..!+..
   13bb4:	9+..Q+..i+...+..
   13bc4:	.+...+...+......
   13bd4:	...../.../...0..
   13be4:	%0..=0..U0..m2..
   13bf4:	.?..

Disassembly of section .fini:

00013bf8 <_fini>:
   13bf8:	push	{r3, r4, r5, r6, r7, lr}
   13bfa:	nop
